
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08006aa8  08006aa8  00016aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd8  08006dd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000070  08006e50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08006e50  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173ab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d35  00000000  00000000  0003744b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0003a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  0003b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056c1  00000000  00000000  0003be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130d1  00000000  00000000  000414d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc2b4  00000000  00000000  000545a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  001108ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006a8c 	.word	0x08006a8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006a8c 	.word	0x08006a8c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b9 	b.w	8000684 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f838 	bl	8000708 <convert>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006a0:	1415      	asrs	r5, r2, #16
 80006a2:	0414      	lsls	r4, r2, #16
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f000 f82f 	bl	8000708 <convert>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006b2:	4620      	mov	r0, r4
 80006b4:	4629      	mov	r1, r5
 80006b6:	f7ff fe1b 	bl	80002f0 <__aeabi_ldivmod>
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	4613      	mov	r3, r2
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}

080006c8 <printFix>:

void printFix(int32_t i) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	da05      	bge.n	80006e2 <printFix+0x1a>
            printf("-");
 80006d6:	202d      	movs	r0, #45	; 0x2d
 80006d8:	f005 f8b4 	bl	8005844 <putchar>
            i = ~i + 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	425b      	negs	r3, r3
 80006e0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1419      	asrs	r1, r3, #16
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	0c1b      	lsrs	r3, r3, #16
 80006f4:	461a      	mov	r2, r3
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <printFix+0x3c>)
 80006f8:	f005 f88c 	bl	8005814 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08006aa8 	.word	0x08006aa8

08000708 <convert>:
	 */

       return i << 2;
   }

int32_t convert(int32_t i) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	041b      	lsls	r3, r3, #16
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000732:	b29b      	uxth	r3, r3
 8000734:	3301      	adds	r3, #1
 8000736:	425a      	negs	r2, r3
 8000738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800073c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000740:	bf58      	it	pl
 8000742:	4253      	negpl	r3, r2
 8000744:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800074c:	b29b      	uxth	r3, r3
 800074e:	89fa      	ldrh	r2, [r7, #14]
 8000750:	429a      	cmp	r2, r3
 8000752:	d00c      	beq.n	800076e <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800075a:	b29b      	uxth	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	89fa      	ldrh	r2, [r7, #14]
 8000768:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 800076c:	e002      	b.n	8000774 <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <RingBuffer_Write+0x5c>)
 8000770:	f005 f850 	bl	8005814 <iprintf>
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08006ab8 	.word	0x08006ab8

08000780 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    int result = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800078c:	e015      	b.n	80007ba <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b2f      	cmp	r3, #47	; 0x2f
 8000794:	d90e      	bls.n	80007b4 <string_to_int+0x34>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b39      	cmp	r3, #57	; 0x39
 800079c:	d80a      	bhi.n	80007b4 <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b30      	subs	r3, #48	; 0x30
 80007b0:	4413      	add	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
        }
        str++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
    while (*str) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1e5      	bne.n	800078e <string_to_int+0xe>
    }
    return result;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <powten>:

int powten(int x) {
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	int i = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd0f      	ble.n	8000802 <powten+0x32>
		for (int j = 0; j < x; j++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	e008      	b.n	80007fa <powten+0x2a>
			i *= 10;
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbf2      	blt.n	80007e8 <powten+0x18>
		}
	}
	return i;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <Altxx>:

int32_t Altxx(char *data) {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 8000818:	4921      	ldr	r1, [pc, #132]	; (80008a0 <Altxx+0x90>)
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f005 f8d0 	bl	80059c0 <strtok>
 8000820:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
	int j = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 8000832:	e01a      	b.n	800086a <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 8000834:	69f8      	ldr	r0, [r7, #28]
 8000836:	f7ff ffa3 	bl	8000780 <string_to_int>
 800083a:	4602      	mov	r2, r0
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	f107 0120 	add.w	r1, r7, #32
 8000844:	440b      	add	r3, r1
 8000846:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d104      	bne.n	800085a <Altxx+0x4a>
 8000850:	69f8      	ldr	r0, [r7, #28]
 8000852:	f7ff fcef 	bl	8000234 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 8000860:	490f      	ldr	r1, [pc, #60]	; (80008a0 <Altxx+0x90>)
 8000862:	2000      	movs	r0, #0
 8000864:	f005 f8ac 	bl	80059c0 <strtok>
 8000868:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1e1      	bne.n	8000834 <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff48 	bl	8000708 <convert>
 8000878:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 800087a:	68fc      	ldr	r4, [r7, #12]
 800087c:	69b8      	ldr	r0, [r7, #24]
 800087e:	f7ff ffa7 	bl	80007d0 <powten>
 8000882:	4603      	mov	r3, r0
 8000884:	4619      	mov	r1, r3
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff fefe 	bl	8000688 <Rational>
 800088c:	4602      	mov	r2, r0
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4413      	add	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 8000894:	693b      	ldr	r3, [r7, #16]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	08006b50 	.word	0x08006b50

080008a4 <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <DDmmmmmm+0x90>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	82bb      	strh	r3, [r7, #20]
 80008b2:	2300      	movs	r3, #0
 80008b4:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2202      	movs	r2, #2
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 f850 	bl	800596c <strncpy>
    strcpy(mm_str, data + 2);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	1c9a      	adds	r2, r3, #2
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f005 f840 	bl	800595c <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff4d 	bl	8000780 <string_to_int>
 80008e6:	4603      	mov	r3, r0
 80008e8:	041b      	lsls	r3, r3, #16
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff45 	bl	8000780 <string_to_int>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80008fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	141d      	asrs	r5, r3, #16
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	041c      	lsls	r4, r3, #16
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <DDmmmmmm+0x94>)
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	4620      	mov	r0, r4
 8000912:	4629      	mov	r1, r5
 8000914:	f7ff fcec 	bl	80002f0 <__aeabi_ldivmod>
 8000918:	4602      	mov	r2, r0
 800091a:	460b      	mov	r3, r1
 800091c:	4613      	mov	r3, r2
 800091e:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 8000920:	69fa      	ldr	r2, [r7, #28]
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	4413      	add	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]

    return cords;
 8000928:	69bb      	ldr	r3, [r7, #24]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bdb0      	pop	{r4, r5, r7, pc}
 8000932:	bf00      	nop
 8000934:	08006b54 	.word	0x08006b54
 8000938:	000927c0 	.word	0x000927c0

0800093c <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2203      	movs	r2, #3
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	f005 f804 	bl	800596c <strncpy>
	strcpy(mm_str, data + 3);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1cda      	adds	r2, r3, #3
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fff4 	bl	800595c <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff01 	bl	8000780 <string_to_int>
 800097e:	4603      	mov	r3, r0
 8000980:	041b      	lsls	r3, r3, #16
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fef9 	bl	8000780 <string_to_int>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000996:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	141d      	asrs	r5, r3, #16
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	041c      	lsls	r4, r3, #16
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <DDDmmmmmm+0x90>)
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	4620      	mov	r0, r4
 80009aa:	4629      	mov	r1, r5
 80009ac:	f7ff fca0 	bl	80002f0 <__aeabi_ldivmod>
 80009b0:	4602      	mov	r2, r0
 80009b2:	460b      	mov	r3, r1
 80009b4:	4613      	mov	r3, r2
 80009b6:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	4413      	add	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
	return cords;
 80009c0:	69bb      	ldr	r3, [r7, #24]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	000927c0 	.word	0x000927c0

080009d0 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d101      	bne.n	80009f2 <RingBuffer_Read+0x22>
        return 0;  // No data
 80009ee:	2300      	movs	r3, #0
 80009f0:	e019      	b.n	8000a26 <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	5c9a      	ldrb	r2, [r3, r2]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	425a      	negs	r2, r3
 8000a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a18:	bf58      	it	pl
 8000a1a:	4253      	negpl	r3, r2
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    return 1;
 8000a24:	2301      	movs	r3, #1
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	7b1b      	ldrb	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8097 	beq.w	8000b76 <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 8000a48:	4a6c      	ldr	r2, [pc, #432]	; (8000bfc <getGPGGA+0x1c8>)
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a52:	6018      	str	r0, [r3, #0]
 8000a54:	3304      	adds	r3, #4
 8000a56:	8019      	strh	r1, [r3, #0]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	0c0a      	lsrs	r2, r1, #16
 8000a5c:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f004 ff94 	bl	8005992 <strstr>
 8000a6a:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80bf 	beq.w	8000bf2 <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 8000a74:	69b8      	ldr	r0, [r7, #24]
 8000a76:	f7ff fbdd 	bl	8000234 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b28      	cmp	r3, #40	; 0x28
 8000a7e:	d973      	bls.n	8000b68 <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 8000a80:	495f      	ldr	r1, [pc, #380]	; (8000c00 <getGPGGA+0x1cc>)
 8000a82:	69b8      	ldr	r0, [r7, #24]
 8000a84:	f004 ff9c 	bl	80059c0 <strtok>
 8000a88:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 8000a8e:	e067      	b.n	8000b60 <getGPGGA+0x12c>
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	3b03      	subs	r3, #3
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	d85a      	bhi.n	8000b4e <getGPGGA+0x11a>
 8000a98:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <getGPGGA+0x6c>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ac1 	.word	0x08000ac1
 8000aa4:	08000acf 	.word	0x08000acf
 8000aa8:	08000b01 	.word	0x08000b01
 8000aac:	08000b0f 	.word	0x08000b0f
 8000ab0:	08000b4f 	.word	0x08000b4f
 8000ab4:	08000b4f 	.word	0x08000b4f
 8000ab8:	08000b4f 	.word	0x08000b4f
 8000abc:	08000b41 	.word	0x08000b41
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8000ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ac2:	f7ff feef 	bl	80008a4 <DDmmmmmm>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	601a      	str	r2, [r3, #0]
							break;
 8000acc:	e040      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8000ace:	494d      	ldr	r1, [pc, #308]	; (8000c04 <getGPGGA+0x1d0>)
 8000ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ad2:	f7ff fba5 	bl	8000220 <strcmp>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ae4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 8000aec:	e030      	b.n	8000b50 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bfb8      	it	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	425a      	negs	r2, r3
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	601a      	str	r2, [r3, #0]
							break;
 8000afe:	e027      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 8000b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b02:	f7ff ff1b 	bl	800093c <DDDmmmmmm>
 8000b06:	4602      	mov	r2, r0
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
							break;
 8000b0c:	e020      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 8000b0e:	493e      	ldr	r1, [pc, #248]	; (8000c08 <getGPGGA+0x1d4>)
 8000b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b12:	f7ff fb85 	bl	8000220 <strcmp>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 8000b2c:	e010      	b.n	8000b50 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	425a      	negs	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
							break;
 8000b3e:	e007      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 8000b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b42:	f7ff fe65 	bl	8000810 <Altxx>
 8000b46:	4602      	mov	r2, r0
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	609a      	str	r2, [r3, #8]
							break;
 8000b4c:	e000      	b.n	8000b50 <getGPGGA+0x11c>
						}
						default: {
							break;
 8000b4e:	bf00      	nop
						}
					}
					i++;
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	3301      	adds	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000b56:	492a      	ldr	r1, [pc, #168]	; (8000c00 <getGPGGA+0x1cc>)
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f004 ff31 	bl	80059c0 <strtok>
 8000b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d194      	bne.n	8000a90 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s \r\n", filter);
		}
	}
}
 8000b66:	e044      	b.n	8000bf2 <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 8000b68:	4828      	ldr	r0, [pc, #160]	; (8000c0c <getGPGGA+0x1d8>)
 8000b6a:	f004 feef 	bl	800594c <puts>
				gps->active = 0;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
}
 8000b74:	e03d      	b.n	8000bf2 <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 8000b76:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <getGPGGA+0x1dc>)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b80:	6018      	str	r0, [r3, #0]
 8000b82:	3304      	adds	r3, #4
 8000b84:	8019      	strh	r1, [r3, #0]
 8000b86:	3302      	adds	r3, #2
 8000b88:	0c0a      	lsrs	r2, r1, #16
 8000b8a:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f004 fefd 	bl	8005992 <strstr>
 8000b98:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d028      	beq.n	8000bf2 <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 8000ba0:	4917      	ldr	r1, [pc, #92]	; (8000c00 <getGPGGA+0x1cc>)
 8000ba2:	69f8      	ldr	r0, [r7, #28]
 8000ba4:	f004 ff0c 	bl	80059c0 <strtok>
 8000ba8:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8000bae:	e01d      	b.n	8000bec <getGPGGA+0x1b8>
				i++;
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000bb6:	4912      	ldr	r1, [pc, #72]	; (8000c00 <getGPGGA+0x1cc>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f004 ff01 	bl	80059c0 <strtok>
 8000bbe:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d112      	bne.n	8000bec <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 8000bc6:	4913      	ldr	r1, [pc, #76]	; (8000c14 <getGPGGA+0x1e0>)
 8000bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bca:	f7ff fb29 	bl	8000220 <strcmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d106      	bne.n	8000be2 <getGPGGA+0x1ae>
							gps->active = 1;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <getGPGGA+0x1e4>)
 8000bdc:	f004 feb6 	bl	800594c <puts>
 8000be0:	e003      	b.n	8000bea <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <getGPGGA+0x1e8>)
 8000be6:	f004 fe15 	bl	8005814 <iprintf>
						break;
 8000bea:	bf00      	nop
			while (tokPtr != NULL) {
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1de      	bne.n	8000bb0 <getGPGGA+0x17c>
}
 8000bf2:	bf00      	nop
 8000bf4:	3730      	adds	r7, #48	; 0x30
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08006bb4 	.word	0x08006bb4
 8000c00:	08006b58 	.word	0x08006b58
 8000c04:	08006b5c 	.word	0x08006b5c
 8000c08:	08006b60 	.word	0x08006b60
 8000c0c:	08006b64 	.word	0x08006b64
 8000c10:	08006bbc 	.word	0x08006bbc
 8000c14:	08006b80 	.word	0x08006b80
 8000c18:	08006b84 	.word	0x08006b84
 8000c1c:	08006b98 	.word	0x08006b98

08000c20 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 8000c2a:	e01d      	b.n	8000c68 <process_uart_data+0x48>
        if (indx < sizeof(sentence) - 1) {
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <process_uart_data+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2bf8      	cmp	r3, #248	; 0xf8
 8000c32:	d807      	bhi.n	8000c44 <process_uart_data+0x24>
            sentence[indx++] = c;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <process_uart_data+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	4912      	ldr	r1, [pc, #72]	; (8000c84 <process_uart_data+0x64>)
 8000c3c:	600a      	str	r2, [r1, #0]
 8000c3e:	7bf9      	ldrb	r1, [r7, #15]
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <process_uart_data+0x68>)
 8000c42:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	d10e      	bne.n	8000c68 <process_uart_data+0x48>
            sentence[indx] = '\0';  // Null-terminate the string
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <process_uart_data+0x64>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <process_uart_data+0x68>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	54d1      	strb	r1, [r2, r3]
            printf("Log:   UART Sentence received \r\n");
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <process_uart_data+0x6c>)
 8000c56:	f004 fe79 	bl	800594c <puts>
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8000c5a:	6839      	ldr	r1, [r7, #0]
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <process_uart_data+0x68>)
 8000c5e:	f7ff fee9 	bl	8000a34 <getGPGGA>
            indx = 0;  // Reset for next line
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <process_uart_data+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8000c68:	f107 030f 	add.w	r3, r7, #15
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff feae 	bl	80009d0 <RingBuffer_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1d8      	bne.n	8000c2c <process_uart_data+0xc>
        }
    }
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000008c 	.word	0x2000008c
 8000c88:	200004a0 	.word	0x200004a0
 8000c8c:	08006bc4 	.word	0x08006bc4

08000c90 <printGPS>:

void printGPS(GPSRead_t GPS) {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	463c      	mov	r4, r7
 8000c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (GPS.active) {
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d01a      	beq.n	8000cd8 <printGPS+0x48>
		printf("Active: %i ~ Latitude: ", GPS.active);
 8000ca2:	7b3b      	ldrb	r3, [r7, #12]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <printGPS+0x58>)
 8000ca8:	f004 fdb4 	bl	8005814 <iprintf>
		printFix(GPS.latitude);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fd0a 	bl	80006c8 <printFix>
		printf("deg ~ Longitude: ");
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <printGPS+0x5c>)
 8000cb6:	f004 fdad 	bl	8005814 <iprintf>
		printFix(GPS.longitude);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd03 	bl	80006c8 <printFix>
		printf("deg ~ Altitude: ");
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <printGPS+0x60>)
 8000cc4:	f004 fda6 	bl	8005814 <iprintf>
		printFix(GPS.altitude);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fcfc 	bl	80006c8 <printFix>
		printf("m. \r\n");
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <printGPS+0x64>)
 8000cd2:	f004 fe3b 	bl	800594c <puts>
	} else {
		printf("Error: GPS inactive \r\n");
	}
}
 8000cd6:	e002      	b.n	8000cde <printGPS+0x4e>
		printf("Error: GPS inactive \r\n");
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <printGPS+0x68>)
 8000cda:	f004 fe37 	bl	800594c <puts>
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08006be4 	.word	0x08006be4
 8000cec:	08006bfc 	.word	0x08006bfc
 8000cf0:	08006c10 	.word	0x08006c10
 8000cf4:	08006c24 	.word	0x08006c24
 8000cf8:	08006c2c 	.word	0x08006c2c

08000cfc <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8000d04:	f240 5322 	movw	r3, #1314	; 0x522
 8000d08:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8000d0a:	f107 021c 	add.w	r2, r7, #28
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2302      	movs	r3, #2
 8000d16:	21d6      	movs	r1, #214	; 0xd6
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f001 f8df 	bl	8001edc <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f000 fccc 	bl	80016bc <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 8000d24:	f246 0320 	movw	r3, #24608	; 0x6020
 8000d28:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 8000d2a:	f107 0218 	add.w	r2, r7, #24
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2302      	movs	r3, #2
 8000d36:	21d6      	movs	r1, #214	; 0xd6
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f001 f8cf 	bl	8001edc <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f000 fcbc 	bl	80016bc <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 8000d44:	f247 0320 	movw	r3, #28704	; 0x7020
 8000d48:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2302      	movs	r3, #2
 8000d56:	213c      	movs	r1, #60	; 0x3c
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f001 f8bf 	bl	8001edc <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f000 fcac 	bl	80016bc <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8000d64:	2322      	movs	r3, #34	; 0x22
 8000d66:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8000d68:	f107 0210 	add.w	r2, r7, #16
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	213c      	movs	r1, #60	; 0x3c
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f001 f8b0 	bl	8001edc <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f000 fc9d 	bl	80016bc <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8000d82:	f640 4323 	movw	r3, #3107	; 0xc23
 8000d86:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2302      	movs	r3, #2
 8000d94:	213c      	movs	r1, #60	; 0x3c
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f001 f8a0 	bl	8001edc <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f000 fc8d 	bl	80016bc <HAL_Delay>
}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 fc12 	bl	80015da <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f845 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f000 f95b 	bl	8001074 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dbe:	f000 f90d 	bl	8000fdc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000dc2:	f000 f8bf 	bl	8000f44 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000dc6:	f000 f87d 	bl	8000ec4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <main+0x84>)
 8000dcc:	f7ff ff96 	bl	8000cfc <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f000 fc6d 	bl	80016bc <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4913      	ldr	r1, [pc, #76]	; (8000e34 <main+0x88>)
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <main+0x8c>)
 8000de8:	f002 fcf4 	bl	80037d4 <HAL_UART_Receive_IT>
	printf("Res %i: ", i);
	printFix(vector[i]);
	printf("\r\n");
}
*/
int i = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  while (1)
  {
	  process_uart_data(&uart_rx_buf, &GPS);
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <main+0x90>)
 8000df6:	f7ff ff13 	bl	8000c20 <process_uart_data>
	  HAL_Delay(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f000 fc5e 	bl	80016bc <HAL_Delay>
	  i++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
	  	  if (!(i % 1000)) {
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <main+0x94>)
 8000e0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e0e:	1199      	asrs	r1, r3, #6
 8000e10:	17d3      	asrs	r3, r2, #31
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1e6      	bne.n	8000df0 <main+0x44>
	  		  i = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
	  		  printGPS(GPS);
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2a:	f7ff ff31 	bl	8000c90 <printGPS>
	  process_uart_data(&uart_rx_buf, &GPS);
 8000e2e:	e7df      	b.n	8000df0 <main+0x44>
 8000e30:	2000059c 	.word	0x2000059c
 8000e34:	200005f0 	.word	0x200005f0
 8000e38:	200005f4 	.word	0x200005f4
 8000e3c:	20000090 	.word	0x20000090
 8000e40:	10624dd3 	.word	0x10624dd3

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	2238      	movs	r2, #56	; 0x38
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 fcd6 	bl	8005804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e6a:	f001 fc01 	bl	8002670 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fca7 	bl	80027d8 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e90:	f000 f948 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 ffa7 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000eb8:	f000 f934 	bl	8001124 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3750      	adds	r7, #80	; 0x50
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <MX_I2C3_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <MX_I2C3_Init+0x7c>)
 8000ed2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000f00:	f000 ff50 	bl	8001da4 <HAL_I2C_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f0a:	f000 f90b 	bl	8001124 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000f12:	f001 fb15 	bl	8002540 <HAL_I2CEx_ConfigAnalogFilter>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 f902 	bl	8001124 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_I2C3_Init+0x74>)
 8000f24:	f001 fb57 	bl	80025d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 f8f9 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000059c 	.word	0x2000059c
 8000f3c:	40007800 	.word	0x40007800
 8000f40:	0010061a 	.word	0x0010061a

08000f44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <MX_USART1_UART_Init+0x94>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f8e:	f002 fb43 	bl	8003618 <HAL_UART_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f98:	f000 f8c4 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000fa0:	f004 fb3b 	bl	800561a <HAL_UARTEx_SetTxFifoThreshold>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000faa:	f000 f8bb 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000fb2:	f004 fb70 	bl	8005696 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 f8b2 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f004 faf1 	bl	80055a8 <HAL_UARTEx_DisableFifoMode>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f8aa 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200005f4 	.word	0x200005f4
 8000fd8:	40013800 	.word	0x40013800

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_USART2_UART_Init+0x90>)
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <MX_USART2_UART_Init+0x94>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_USART2_UART_Init+0x90>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_USART2_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_USART2_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_USART2_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_USART2_UART_Init+0x90>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_USART2_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_USART2_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_USART2_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_USART2_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_USART2_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x90>)
 8001026:	f002 faf7 	bl	8003618 <HAL_UART_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001030:	f000 f878 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_USART2_UART_Init+0x90>)
 8001038:	f004 faef 	bl	800561a <HAL_UARTEx_SetTxFifoThreshold>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001042:	f000 f86f 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x90>)
 800104a:	f004 fb24 	bl	8005696 <HAL_UARTEx_SetRxFifoThreshold>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001054:	f000 f866 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_USART2_UART_Init+0x90>)
 800105a:	f004 faa5 	bl	80055a8 <HAL_UARTEx_DisableFifoMode>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001064:	f000 f85e 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000688 	.word	0x20000688
 8001070:	40004400 	.word	0x40004400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0x44>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <MX_GPIO_Init+0x44>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_GPIO_Init+0x44>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <_write+0x28>)
 80010d4:	f002 faf0 	bl	80036b8 <HAL_UART_Transmit>
    return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000688 	.word	0x20000688

080010e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_UART_RxCpltCallback+0x30>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d10a      	bne.n	800110e <HAL_UART_RxCpltCallback+0x26>
		//printf("UART Error: ISR=0x%08lX, SR=0x%08lX\r\n", huart->Instance->ISR, huart->Instance->RQR);
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_UART_RxCpltCallback+0x34>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <HAL_UART_RxCpltCallback+0x38>)
 8001100:	f7ff fb0e 	bl	8000720 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 8001104:	2201      	movs	r2, #1
 8001106:	4905      	ldr	r1, [pc, #20]	; (800111c <HAL_UART_RxCpltCallback+0x34>)
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <HAL_UART_RxCpltCallback+0x30>)
 800110a:	f002 fb63 	bl	80037d4 <HAL_UART_Receive_IT>
		 //printf("RX: %c (0x%02X)\r\n", rx_buffer[0], rx_buffer[0]);
	}
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200005f4 	.word	0x200005f4
 800111c:	200005f0 	.word	0x200005f0
 8001120:	20000090 	.word	0x20000090

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6613      	str	r3, [r2, #96]	; 0x60
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001166:	f001 fb27 	bl	80027b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09c      	sub	sp, #112	; 0x70
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	2244      	movs	r2, #68	; 0x44
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fb33 	bl	8005804 <memset>
  if(hi2c->Instance==I2C3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2e      	ldr	r2, [pc, #184]	; (800125c <HAL_I2C_MspInit+0xe4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d154      	bne.n	8001252 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f83e 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff ffaf 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a25      	ldr	r2, [pc, #148]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fc:	2312      	movs	r3, #18
 80011fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001208:	2302      	movs	r3, #2
 800120a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f000 fc43 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800121a:	2320      	movs	r3, #32
 800121c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121e:	2312      	movs	r3, #18
 8001220:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800122a:	2308      	movs	r3, #8
 800122c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001232:	4619      	mov	r1, r3
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_I2C_MspInit+0xec>)
 8001236:	f000 fc33 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 8001240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001244:	6593      	str	r3, [r2, #88]	; 0x58
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_I2C_MspInit+0xe8>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3770      	adds	r7, #112	; 0x70
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007800 	.word	0x40007800
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09c      	sub	sp, #112	; 0x70
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	2244      	movs	r2, #68	; 0x44
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fabb 	bl	8005804 <memset>
  if(huart->Instance==USART1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a42      	ldr	r2, [pc, #264]	; (800139c <HAL_UART_MspInit+0x134>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d140      	bne.n	800131a <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 ffc7 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b0:	f7ff ff38 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_UART_MspInit+0x138>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a39      	ldr	r2, [pc, #228]	; (80013a0 <HAL_UART_MspInit+0x138>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <HAL_UART_MspInit+0x138>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_UART_MspInit+0x138>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a33      	ldr	r2, [pc, #204]	; (80013a0 <HAL_UART_MspInit+0x138>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <HAL_UART_MspInit+0x138>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f6:	2307      	movs	r3, #7
 80012f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f000 fbcc 	bl	8001aa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2025      	movs	r0, #37	; 0x25
 800130e:	f000 fad2 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001312:	2025      	movs	r0, #37	; 0x25
 8001314:	f000 fae9 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001318:	e03b      	b.n	8001392 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <HAL_UART_MspInit+0x13c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d136      	bne.n	8001392 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	4618      	mov	r0, r3
 8001332:	f001 ff81 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800133c:	f7ff fef2 	bl	8001124 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x138>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_UART_MspInit+0x138>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	6593      	str	r3, [r2, #88]	; 0x58
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x138>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x138>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0x138>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0x138>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001370:	230c      	movs	r3, #12
 8001372:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001380:	2307      	movs	r3, #7
 8001382:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f000 fb87 	bl	8001aa0 <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	3770      	adds	r7, #112	; 0x70
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013800 	.word	0x40013800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40004400 	.word	0x40004400

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f944 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USART1_IRQHandler+0x10>)
 8001402:	f002 fa33 	bl	800386c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200005f4 	.word	0x200005f4

08001410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_kill>:

int _kill(int pid, int sig)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800142a:	f004 f9c1 	bl	80057b0 <__errno>
 800142e:	4603      	mov	r3, r0
 8001430:	2216      	movs	r2, #22
 8001432:	601a      	str	r2, [r3, #0]
	return -1;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_exit>:

void _exit (int status)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ffe7 	bl	8001420 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001452:	e7fe      	b.n	8001452 <_exit+0x12>

08001454 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e00a      	b.n	800147c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001466:	f3af 8000 	nop.w
 800146a:	4601      	mov	r1, r0
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	60ba      	str	r2, [r7, #8]
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf0      	blt.n	8001466 <_read+0x12>
	}

return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:
	}
	return len;
}

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	605a      	str	r2, [r3, #4]
	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_isatty>:

int _isatty(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	return 1;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f004 f942 	bl	80057b0 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20008000 	.word	0x20008000
 8001558:	00000400 	.word	0x00000400
 800155c:	20000494 	.word	0x20000494
 8001560:	20000730 	.word	0x20000730

08001564 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800158a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f004 f901 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7ff fbf7 	bl	8000dac <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   r0, =_estack
 80015c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015cc:	08006de0 	.word	0x08006de0
  ldr r2, =_sbss
 80015d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015d4:	20000730 	.word	0x20000730

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>

080015da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f95b 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ea:	200f      	movs	r0, #15
 80015ec:	f000 f80e 	bl	800160c <HAL_InitTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e001      	b.n	8001600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fc:	f7ff fd98 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001600:	79fb      	ldrb	r3, [r7, #7]

}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_InitTick+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d022      	beq.n	8001666 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_InitTick+0x6c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_InitTick+0x68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800162c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f966 	bl	8001906 <HAL_SYSTICK_Config>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	d809      	bhi.n	800165a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001646:	2200      	movs	r2, #0
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	f04f 30ff 	mov.w	r0, #4294967295
 800164e:	f000 f932 	bl	80018b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_InitTick+0x70>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e007      	b.n	800166a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e004      	b.n	800166a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000008 	.word	0x20000008
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x1c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x20>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4a03      	ldr	r2, [pc, #12]	; (800169c <HAL_IncTick+0x1c>)
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	2000071c 	.word	0x2000071c
 80016a0:	20000008 	.word	0x20000008

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000071c 	.word	0x2000071c

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d004      	beq.n	80016e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_Delay+0x40>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e0:	bf00      	nop
 80016e2:	f7ff ffdf 	bl	80016a4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d8f7      	bhi.n	80016e2 <HAL_Delay+0x26>
  {
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000008 	.word	0x20000008

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff40 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff33 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa4 	bl	800185c <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d005      	beq.n	8001942 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2204      	movs	r2, #4
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e037      	b.n	80019b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 020e 	bic.w	r2, r2, #14
 8001950:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 021f 	and.w	r2, r3, #31
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800198e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00c      	beq.n	80019b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d00d      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2204      	movs	r2, #4
 80019ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e047      	b.n	8001a94 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 020e 	bic.w	r2, r2, #14
 8001a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
    }
  }
  return status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aae:	e15a      	b.n	8001d66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 814c 	beq.w	8001d60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d017      	beq.n	8001b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d123      	bne.n	8001bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	6939      	ldr	r1, [r7, #16]
 8001bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0203 	and.w	r2, r3, #3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80a6 	beq.w	8001d60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c20:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c56:	d01f      	beq.n	8001c98 <HAL_GPIO_Init+0x1f8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d019      	beq.n	8001c94 <HAL_GPIO_Init+0x1f4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1f0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_GPIO_Init+0x2f4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1ec>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a49      	ldr	r2, [pc, #292]	; (8001d98 <HAL_GPIO_Init+0x2f8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1e8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_GPIO_Init+0x2fc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1e4>
 8001c80:	2305      	movs	r3, #5
 8001c82:	e00a      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c84:	2306      	movs	r3, #6
 8001c86:	e008      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001caa:	4937      	ldr	r1, [pc, #220]	; (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cdc:	4a30      	ldr	r2, [pc, #192]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_GPIO_Init+0x300>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f ae9d 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000c00 	.word	0x48000c00
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	48001400 	.word	0x48001400
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e08d      	b.n	8001ed2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff f9d4 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e006      	b.n	8001e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d108      	bne.n	8001e46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	e007      	b.n	8001e56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69d9      	ldr	r1, [r3, #28]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
 8001eec:	4613      	mov	r3, r2
 8001eee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	f040 80fd 	bne.w	80020f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_I2C_Master_Transmit+0x30>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e0f6      	b.n	80020fa <HAL_I2C_Master_Transmit+0x21e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f14:	f7ff fbc6 	bl	80016a4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2319      	movs	r3, #25
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f914 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e1      	b.n	80020fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2210      	movs	r2, #16
 8001f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	893a      	ldrh	r2, [r7, #8]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2bff      	cmp	r3, #255	; 0xff
 8001f66:	d906      	bls.n	8001f76 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	22ff      	movs	r2, #255	; 0xff
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e007      	b.n	8001f86 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d024      	beq.n	8001fd8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_I2C_Master_Transmit+0x228>)
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fa83 	bl	80024dc <I2C_TransferConfig>
 8001fd6:	e066      	b.n	80020a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_I2C_Master_Transmit+0x228>)
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa78 	bl	80024dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fec:	e05b      	b.n	80020a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f907 	bl	8002206 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e07b      	b.n	80020fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d034      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x1ca>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d130      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2200      	movs	r2, #0
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f880 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e04d      	b.n	80020fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	2bff      	cmp	r3, #255	; 0xff
 8002066:	d90e      	bls.n	8002086 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fa2c 	bl	80024dc <I2C_TransferConfig>
 8002084:	e00f      	b.n	80020a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	b2da      	uxtb	r2, r3
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	2300      	movs	r3, #0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fa1b 	bl	80024dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d19e      	bne.n	8001fee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	6a39      	ldr	r1, [r7, #32]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f8ed 	bl	8002294 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e01a      	b.n	80020fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2220      	movs	r2, #32
 80020ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_I2C_Master_Transmit+0x22c>)
 80020d8:	400b      	ands	r3, r1
 80020da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	80002000 	.word	0x80002000
 8002108:	fe00e800 	.word	0xfe00e800

0800210c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d103      	bne.n	800212a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d007      	beq.n	8002148 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	619a      	str	r2, [r3, #24]
  }
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002164:	e03b      	b.n	80021de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f8d6 	bl	800231c <I2C_IsErrorOccurred>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e041      	b.n	80021fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d02d      	beq.n	80021de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002182:	f7ff fa8f 	bl	80016a4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d302      	bcc.n	8002198 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d122      	bne.n	80021de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4013      	ands	r3, r2
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d113      	bne.n	80021de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4013      	ands	r3, r2
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d0b4      	beq.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002212:	e033      	b.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f87f 	bl	800231c <I2C_IsErrorOccurred>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e031      	b.n	800228c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d025      	beq.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002230:	f7ff fa38 	bl	80016a4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d302      	bcc.n	8002246 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11a      	bne.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	d013      	beq.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e007      	b.n	800228c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d1c4      	bne.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a0:	e02f      	b.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f838 	bl	800231c <I2C_IsErrorOccurred>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e02d      	b.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7ff f9f5 	bl	80016a4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11a      	bne.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d013      	beq.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b20      	cmp	r3, #32
 800230e:	d1c8      	bne.n	80022a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d068      	beq.n	800241a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002350:	e049      	b.n	80023e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d045      	beq.n	80023e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7ff f9a3 	bl	80016a4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <I2C_IsErrorOccurred+0x54>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d13a      	bne.n	80023e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002382:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002392:	d121      	bne.n	80023d8 <I2C_IsErrorOccurred+0xbc>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800239a:	d01d      	beq.n	80023d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d01a      	beq.n	80023d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023b2:	f7ff f977 	bl	80016a4 <HAL_GetTick>
 80023b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b8:	e00e      	b.n	80023d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023ba:	f7ff f973 	bl	80016a4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b19      	cmp	r3, #25
 80023c6:	d907      	bls.n	80023d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f043 0320 	orr.w	r3, r3, #32
 80023ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80023d6:	e006      	b.n	80023e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d1e9      	bne.n	80023ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d003      	beq.n	80023fc <I2C_IsErrorOccurred+0xe0>
 80023f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0aa      	beq.n	8002352 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2220      	movs	r2, #32
 800240a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00b      	beq.n	8002444 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800245e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01c      	beq.n	80024ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff fe3b 	bl	800210c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <I2C_IsErrorOccurred+0x1bc>)
 80024a2:	400b      	ands	r3, r1
 80024a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	fe00e800 	.word	0xfe00e800

080024dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	4613      	mov	r3, r2
 80024ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024f4:	7a7b      	ldrb	r3, [r7, #9]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	4313      	orrs	r3, r2
 8002506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800250a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	0d5b      	lsrs	r3, r3, #21
 8002516:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <I2C_TransferConfig+0x60>)
 800251c:	430b      	orrs	r3, r1
 800251e:	43db      	mvns	r3, r3
 8002520:	ea02 0103 	and.w	r1, r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	03ff63ff 	.word	0x03ff63ff

08002540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	d138      	bne.n	80025c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002560:	2302      	movs	r3, #2
 8002562:	e032      	b.n	80025ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002592:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d139      	bne.n	8002660 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e033      	b.n	8002662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2224      	movs	r2, #36	; 0x24
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002628:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d141      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800267e:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d131      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002692:	4a46      	ldr	r2, [pc, #280]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a4:	4a41      	ldr	r2, [pc, #260]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ac:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2232      	movs	r2, #50	; 0x32
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	0c9b      	lsrs	r3, r3, #18
 80026be:	3301      	adds	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c2:	e002      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d102      	bne.n	80026de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	d158      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e057      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002700:	e04d      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002708:	d141      	bne.n	800278e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d131      	bne.n	800277c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271e:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2232      	movs	r2, #50	; 0x32
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	0c9b      	lsrs	r3, r3, #18
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800274e:	e002      	b.n	8002756 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002762:	d102      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f2      	bne.n	8002750 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d112      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e011      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800278c:	e007      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40007000 	.word	0x40007000
 80027b0:	20000000 	.word	0x20000000
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c6:	6093      	str	r3, [r2, #8]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40007000 	.word	0x40007000

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e301      	b.n	8002dee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d075      	beq.n	80028e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4ba3      	ldr	r3, [pc, #652]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002800:	4ba0      	ldr	r3, [pc, #640]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d102      	bne.n	8002816 <HAL_RCC_OscConfig+0x3e>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d002      	beq.n	800281c <HAL_RCC_OscConfig+0x44>
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b99      	ldr	r3, [pc, #612]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2dc      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x74>
 800283e:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a8a      	ldr	r2, [pc, #552]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a83      	ldr	r2, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a80      	ldr	r2, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe ff08 	bl	80016a4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe ff04 	bl	80016a4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e2a1      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xc0>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fef4 	bl	80016a4 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fef0 	bl	80016a4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e28d      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d075      	beq.n	80029da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d102      	bne.n	800290e <HAL_RCC_OscConfig+0x136>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d002      	beq.n	8002914 <HAL_RCC_OscConfig+0x13c>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d11f      	bne.n	8002954 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002914:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x154>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e260      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b55      	ldr	r3, [pc, #340]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4952      	ldr	r1, [pc, #328]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002940:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCC_OscConfig+0x2b0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fe61 	bl	800160c <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d043      	beq.n	80029d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e24c      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d023      	beq.n	80029a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a48      	ldr	r2, [pc, #288]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fe9c 	bl	80016a4 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002970:	f7fe fe98 	bl	80016a4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e235      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	061b      	lsls	r3, r3, #24
 800299c:	4939      	ldr	r1, [pc, #228]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e01a      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a4:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a36      	ldr	r2, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fe78 	bl	80016a4 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7fe fe74 	bl	80016a4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e211      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1e0>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	4a23      	ldr	r2, [pc, #140]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fe51 	bl	80016a4 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe fe4d 	bl	80016a4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1ea      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <HAL_RCC_OscConfig+0x22e>
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fe34 	bl	80016a4 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe fe30 	bl	80016a4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1cd      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ef      	bne.n	8002a40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80ab 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2b4>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e005      	b.n	8002a8e <HAL_RCC_OscConfig+0x2b6>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4bad      	ldr	r3, [pc, #692]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4aac      	ldr	r2, [pc, #688]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9e:	4baa      	ldr	r3, [pc, #680]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4ba7      	ldr	r3, [pc, #668]	; (8002d4c <HAL_RCC_OscConfig+0x574>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aba:	4ba4      	ldr	r3, [pc, #656]	; (8002d4c <HAL_RCC_OscConfig+0x574>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4aa3      	ldr	r2, [pc, #652]	; (8002d4c <HAL_RCC_OscConfig+0x574>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fded 	bl	80016a4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe fde9 	bl	80016a4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e186      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	4b9a      	ldr	r3, [pc, #616]	; (8002d4c <HAL_RCC_OscConfig+0x574>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_RCC_OscConfig+0x32e>
 8002af4:	4b94      	ldr	r3, [pc, #592]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a93      	ldr	r2, [pc, #588]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	e024      	b.n	8002b50 <HAL_RCC_OscConfig+0x378>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d110      	bne.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002b0e:	4b8e      	ldr	r3, [pc, #568]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a8c      	ldr	r2, [pc, #560]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1e:	4b8a      	ldr	r3, [pc, #552]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	4a88      	ldr	r2, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCC_OscConfig+0x378>
 8002b30:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	4a84      	ldr	r2, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b40:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	4a80      	ldr	r2, [pc, #512]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d016      	beq.n	8002b86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe fda4 	bl	80016a4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe fda0 	bl	80016a4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e13b      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	4b74      	ldr	r3, [pc, #464]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ed      	beq.n	8002b60 <HAL_RCC_OscConfig+0x388>
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fd8d 	bl	80016a4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fd89 	bl	80016a4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e124      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ed      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd8:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bde:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fd5c 	bl	80016a4 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf0:	f7fe fd58 	bl	80016a4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0f5      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x418>
 8002c10:	e01b      	b.n	8002c4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c12:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fd3f 	bl	80016a4 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c2a:	f7fe fd3b 	bl	80016a4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0d8      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ef      	bne.n	8002c2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80cc 	beq.w	8002dec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c54:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	f000 8086 	beq.w	8002d6e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d15a      	bne.n	8002d20 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a36      	ldr	r2, [pc, #216]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fd15 	bl	80016a4 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fd11 	bl	80016a4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0ae      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6a11      	ldr	r1, [r2, #32]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	4311      	orrs	r1, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cb6:	0212      	lsls	r2, r2, #8
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cbe:	0852      	lsrs	r2, r2, #1
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0552      	lsls	r2, r2, #21
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cca:	0852      	lsrs	r2, r2, #1
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0652      	lsls	r2, r2, #25
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cd6:	06d2      	lsls	r2, r2, #27
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fcd4 	bl	80016a4 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fcd0 	bl	80016a4 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e06d      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x528>
 8002d1e:	e065      	b.n	8002dec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_RCC_OscConfig+0x570>)
 8002d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fcba 	bl	80016a4 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d32:	e00f      	b.n	8002d54 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fcb6 	bl	80016a4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d908      	bls.n	8002d54 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e053      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_RCC_OscConfig+0x620>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e9      	bne.n	8002d34 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_OscConfig+0x620>)
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4924      	ldr	r1, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x620>)
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_OscConfig+0x624>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
 8002d6c:	e03e      	b.n	8002dec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e039      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_RCC_OscConfig+0x620>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f003 0203 	and.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d12c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d123      	bne.n	8002de8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d11b      	bne.n	8002de8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d113      	bne.n	8002de8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d109      	bne.n	8002de8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	feeefffc 	.word	0xfeeefffc

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e11e      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b8e      	ldr	r3, [pc, #568]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	498c      	ldr	r1, [pc, #560]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e106      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d073      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d129      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5c:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0f4      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e6c:	f000 f99e 	bl	80031ac <RCC_GetSysClockFreqFromPLLSource>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <HAL_RCC_ClockConfig+0x268>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d93f      	bls.n	8002efa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e7a:	4b7a      	ldr	r3, [pc, #488]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d033      	beq.n	8002efa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d12f      	bne.n	8002efa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea2:	4a70      	ldr	r2, [pc, #448]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e024      	b.n	8002efa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0c6      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0be      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ed8:	f000 f8ce 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4a61      	ldr	r2, [pc, #388]	; (8003068 <HAL_RCC_ClockConfig+0x268>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d909      	bls.n	8002efa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ee6:	4b5f      	ldr	r3, [pc, #380]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eee:	4a5d      	ldr	r2, [pc, #372]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002efa:	4b5a      	ldr	r3, [pc, #360]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4957      	ldr	r1, [pc, #348]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0c:	f7fe fbca 	bl	80016a4 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7fe fbc6 	bl	80016a4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e095      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 020c 	and.w	r2, r3, #12
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1eb      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f74:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b39      	ldr	r3, [pc, #228]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4936      	ldr	r1, [pc, #216]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4a32      	ldr	r2, [pc, #200]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d21d      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 020f 	bic.w	r2, r3, #15
 8002fb8:	4929      	ldr	r1, [pc, #164]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fb70 	bl	80016a4 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fb6c 	bl	80016a4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e03b      	b.n	8003056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1ed      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4917      	ldr	r1, [pc, #92]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490f      	ldr	r1, [pc, #60]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302a:	f000 f825 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_RCC_ClockConfig+0x264>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490c      	ldr	r1, [pc, #48]	; (800306c <HAL_RCC_ClockConfig+0x26c>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x270>)
 8003048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fadc 	bl	800160c <HAL_InitTick>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
 8003068:	04c4b400 	.word	0x04c4b400
 800306c:	08006c44 	.word	0x08006c44
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800307e:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d102      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800308a:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_RCC_GetSysClockFreq+0xbc>)
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e047      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_RCC_GetSysClockFreq+0xc0>)
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	e03e      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d136      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3301      	adds	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d10c      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030cc:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	4a16      	ldr	r2, [pc, #88]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	0a12      	lsrs	r2, r2, #8
 80030da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
      break;
 80030e4:	e00c      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4a10      	ldr	r2, [pc, #64]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	0a12      	lsrs	r2, r2, #8
 80030f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
      break;
 80030fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0e5b      	lsrs	r3, r3, #25
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e001      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003120:	693b      	ldr	r3, [r7, #16]
}
 8003122:	4618      	mov	r0, r3
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4904      	ldr	r1, [pc, #16]	; (800317c <HAL_RCC_GetPCLK1Freq+0x28>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	08006c54 	.word	0x08006c54

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003184:	f7ff ffda 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08006c54 	.word	0x08006c54

080031ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d10c      	bne.n	80031ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d0:	4a17      	ldr	r2, [pc, #92]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031da:	68d2      	ldr	r2, [r2, #12]
 80031dc:	0a12      	lsrs	r2, r2, #8
 80031de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	617b      	str	r3, [r7, #20]
    break;
 80031e8:	e00c      	b.n	8003204 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f4:	68d2      	ldr	r2, [r2, #12]
 80031f6:	0a12      	lsrs	r2, r2, #8
 80031f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    break;
 8003202:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0e5b      	lsrs	r3, r3, #25
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800321e:	687b      	ldr	r3, [r7, #4]
}
 8003220:	4618      	mov	r0, r3
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40021000 	.word	0x40021000
 8003230:	007a1200 	.word	0x007a1200
 8003234:	00f42400 	.word	0x00f42400

08003238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003240:	2300      	movs	r3, #0
 8003242:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003244:	2300      	movs	r3, #0
 8003246:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8098 	beq.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003282:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a39      	ldr	r2, [pc, #228]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800328e:	f7fe fa09 	bl	80016a4 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003294:	e009      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7fe fa05 	bl	80016a4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d902      	bls.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	74fb      	strb	r3, [r7, #19]
        break;
 80032a8:	e005      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032aa:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ef      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d159      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01e      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d019      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d8:	4b23      	ldr	r3, [pc, #140]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003304:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe f9c5 	bl	80016a4 <HAL_GetTick>
 800331a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331c:	e00b      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe f9c1 	bl	80016a4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d902      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	74fb      	strb	r3, [r7, #19]
            break;
 8003334:	e006      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ec      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10b      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003360:	e008      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	74bb      	strb	r3, [r7, #18]
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003374:	7c7b      	ldrb	r3, [r7, #17]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d105      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337a:	4ba6      	ldr	r3, [pc, #664]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	4aa5      	ldr	r2, [pc, #660]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003392:	4ba0      	ldr	r3, [pc, #640]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f023 0203 	bic.w	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	499c      	ldr	r1, [pc, #624]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b4:	4b97      	ldr	r3, [pc, #604]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 020c 	bic.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4994      	ldr	r1, [pc, #592]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d6:	4b8f      	ldr	r3, [pc, #572]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	498b      	ldr	r1, [pc, #556]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f8:	4b86      	ldr	r3, [pc, #536]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	4983      	ldr	r1, [pc, #524]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800341a:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	497a      	ldr	r1, [pc, #488]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343c:	4b75      	ldr	r3, [pc, #468]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	4972      	ldr	r1, [pc, #456]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4969      	ldr	r1, [pc, #420]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003480:	4b64      	ldr	r3, [pc, #400]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4961      	ldr	r1, [pc, #388]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a2:	4b5c      	ldr	r3, [pc, #368]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	4958      	ldr	r1, [pc, #352]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	4950      	ldr	r1, [pc, #320]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e2:	d105      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034fc:	4b45      	ldr	r3, [pc, #276]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	4942      	ldr	r1, [pc, #264]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351a:	d105      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351c:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003526:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4934      	ldr	r1, [pc, #208]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003552:	d105      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d015      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	4926      	ldr	r1, [pc, #152]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358a:	d105      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a20      	ldr	r2, [pc, #128]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003596:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	4918      	ldr	r1, [pc, #96]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a12      	ldr	r2, [pc, #72]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d015      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	490a      	ldr	r1, [pc, #40]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035fa:	d105      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003608:	7cbb      	ldrb	r3, [r7, #18]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000

08003618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e042      	b.n	80036b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd fe13 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2224      	movs	r2, #36	; 0x24
 8003646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fee2 	bl	800442c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fc43 	bl	8003ef4 <UART_SetConfig>
 800366e:	4603      	mov	r3, r0
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e01b      	b.n	80036b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 ff61 	bl	8004570 <UART_CheckIdleState>
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d17b      	bne.n	80037ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_UART_Transmit+0x26>
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e074      	b.n	80037cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	; 0x21
 80036ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f2:	f7fd ffd7 	bl	80016a4 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003710:	d108      	bne.n	8003724 <HAL_UART_Transmit+0x6c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800372c:	e030      	b.n	8003790 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 ffc3 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e03d      	b.n	80037cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e007      	b.n	800377e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1c8      	bne.n	800372e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 ff8c 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e006      	b.n	80037cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d137      	bne.n	800385c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Receive_IT+0x24>
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e030      	b.n	800385e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_UART_Receive_IT+0x94>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d01f      	beq.n	800384c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d018      	beq.n	800384c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	613b      	str	r3, [r7, #16]
   return(result);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	69f9      	ldr	r1, [r7, #28]
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	61bb      	str	r3, [r7, #24]
   return(result);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	461a      	mov	r2, r3
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 ffa4 	bl	80047a0 <UART_Start_Receive_IT>
 8003858:	4603      	mov	r3, r0
 800385a:	e000      	b.n	800385e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40008000 	.word	0x40008000

0800386c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b0ba      	sub	sp, #232	; 0xe8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003896:	f640 030f 	movw	r3, #2063	; 0x80f
 800389a:	4013      	ands	r3, r2
 800389c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11b      	bne.n	80038e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 82e3 	beq.w	8003e9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
      }
      return;
 80038de:	e2dd      	b.n	8003e9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8123 	beq.w	8003b30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80038ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80038ee:	4b8d      	ldr	r3, [pc, #564]	; (8003b24 <HAL_UART_IRQHandler+0x2b8>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80038f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038fa:	4b8b      	ldr	r3, [pc, #556]	; (8003b28 <HAL_UART_IRQHandler+0x2bc>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8116 	beq.w	8003b30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d011      	beq.n	8003934 <HAL_UART_IRQHandler+0xc8>
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2201      	movs	r2, #1
 8003922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d011      	beq.n	8003964 <HAL_UART_IRQHandler+0xf8>
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d011      	beq.n	8003994 <HAL_UART_IRQHandler+0x128>
 8003970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2204      	movs	r2, #4
 8003982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f043 0202 	orr.w	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d017      	beq.n	80039d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80039b0:	4b5c      	ldr	r3, [pc, #368]	; (8003b24 <HAL_UART_IRQHandler+0x2b8>)
 80039b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2208      	movs	r2, #8
 80039be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f043 0208 	orr.w	r2, r3, #8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <HAL_UART_IRQHandler+0x196>
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8249 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d013      	beq.n	8003a42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d054      	beq.n	8003b10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 ffbc 	bl	80049e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d146      	bne.n	8003b08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1d9      	bne.n	8003a7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d017      	beq.n	8003b00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_UART_IRQHandler+0x2c0>)
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd ff75 	bl	80019d0 <HAL_DMA_Abort_IT>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003afa:	4610      	mov	r0, r2
 8003afc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	e00f      	b.n	8003b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e1 	bl	8003ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b06:	e00b      	b.n	8003b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f9dd 	bl	8003ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	e007      	b.n	8003b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f9d9 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003b1e:	e1bf      	b.n	8003ea0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	bf00      	nop
    return;
 8003b22:	e1bd      	b.n	8003ea0 <HAL_UART_IRQHandler+0x634>
 8003b24:	10000001 	.word	0x10000001
 8003b28:	04000120 	.word	0x04000120
 8003b2c:	08004ab1 	.word	0x08004ab1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 8153 	bne.w	8003de0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 814c 	beq.w	8003de0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8145 	beq.w	8003de0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	f040 80bb 	bne.w	8003ce4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 818f 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f080 8187 	bcs.w	8003ea4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 8087 	bne.w	8003cc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1da      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e1      	bne.n	8003bfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e3      	bne.n	8003c3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	f023 0310 	bic.w	r3, r3, #16
 8003c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ca4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e4      	bne.n	8003c80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd fe2e 	bl	800191e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8fd 	bl	8003edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ce2:	e0df      	b.n	8003ea4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80d1 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80cc 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
 8003d34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e4      	bne.n	8003d10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	623b      	str	r3, [r7, #32]
   return(result);
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e1      	bne.n	8003d46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e4      	bne.n	8003d96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f87f 	bl	8003edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dde:	e063      	b.n	8003ea8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <HAL_UART_IRQHandler+0x59e>
 8003dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 fbb2 	bl	800556c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e08:	e051      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d014      	beq.n	8003e40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03a      	beq.n	8003eac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
    }
    return;
 8003e3e:	e035      	b.n	8003eac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_UART_IRQHandler+0x5f4>
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fe3f 	bl	8004adc <UART_EndTransmit_IT>
    return;
 8003e5e:	e026      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_UART_IRQHandler+0x614>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f001 fb8b 	bl	8005594 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e7e:	e016      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_UART_IRQHandler+0x642>
 8003e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da0c      	bge.n	8003eae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f001 fb73 	bl	8005580 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e9a:	e008      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
      return;
 8003e9c:	bf00      	nop
 8003e9e:	e006      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
    return;
 8003ea0:	bf00      	nop
 8003ea2:	e004      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
      return;
 8003ea4:	bf00      	nop
 8003ea6:	e002      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
      return;
 8003ea8:	bf00      	nop
 8003eaa:	e000      	b.n	8003eae <HAL_UART_IRQHandler+0x642>
    return;
 8003eac:	bf00      	nop
  }
}
 8003eae:	37e8      	adds	r7, #232	; 0xe8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b5b0      	push	{r4, r5, r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4baf      	ldr	r3, [pc, #700]	; (80041dc <UART_SetConfig+0x2e8>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	69f9      	ldr	r1, [r7, #28]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4aa4      	ldr	r2, [pc, #656]	; (80041e0 <UART_SetConfig+0x2ec>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	f023 010f 	bic.w	r1, r3, #15
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a95      	ldr	r2, [pc, #596]	; (80041e4 <UART_SetConfig+0x2f0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d120      	bne.n	8003fd6 <UART_SetConfig+0xe2>
 8003f94:	4b94      	ldr	r3, [pc, #592]	; (80041e8 <UART_SetConfig+0x2f4>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d816      	bhi.n	8003fd0 <UART_SetConfig+0xdc>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0xb4>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc5 	.word	0x08003fc5
 8003fb0:	08003fbf 	.word	0x08003fbf
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	2301      	movs	r3, #1
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e0bc      	b.n	8004138 <UART_SetConfig+0x244>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e0b9      	b.n	8004138 <UART_SetConfig+0x244>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e0b6      	b.n	8004138 <UART_SetConfig+0x244>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e0b3      	b.n	8004138 <UART_SetConfig+0x244>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	76fb      	strb	r3, [r7, #27]
 8003fd4:	e0b0      	b.n	8004138 <UART_SetConfig+0x244>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a84      	ldr	r2, [pc, #528]	; (80041ec <UART_SetConfig+0x2f8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d132      	bne.n	8004046 <UART_SetConfig+0x152>
 8003fe0:	4b81      	ldr	r3, [pc, #516]	; (80041e8 <UART_SetConfig+0x2f4>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d828      	bhi.n	8004040 <UART_SetConfig+0x14c>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x100>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004041 	.word	0x08004041
 8003ffc:	08004041 	.word	0x08004041
 8004000:	08004041 	.word	0x08004041
 8004004:	08004035 	.word	0x08004035
 8004008:	08004041 	.word	0x08004041
 800400c:	08004041 	.word	0x08004041
 8004010:	08004041 	.word	0x08004041
 8004014:	0800402f 	.word	0x0800402f
 8004018:	08004041 	.word	0x08004041
 800401c:	08004041 	.word	0x08004041
 8004020:	08004041 	.word	0x08004041
 8004024:	0800403b 	.word	0x0800403b
 8004028:	2300      	movs	r3, #0
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	e084      	b.n	8004138 <UART_SetConfig+0x244>
 800402e:	2302      	movs	r3, #2
 8004030:	76fb      	strb	r3, [r7, #27]
 8004032:	e081      	b.n	8004138 <UART_SetConfig+0x244>
 8004034:	2304      	movs	r3, #4
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	e07e      	b.n	8004138 <UART_SetConfig+0x244>
 800403a:	2308      	movs	r3, #8
 800403c:	76fb      	strb	r3, [r7, #27]
 800403e:	e07b      	b.n	8004138 <UART_SetConfig+0x244>
 8004040:	2310      	movs	r3, #16
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	e078      	b.n	8004138 <UART_SetConfig+0x244>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a69      	ldr	r2, [pc, #420]	; (80041f0 <UART_SetConfig+0x2fc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d120      	bne.n	8004092 <UART_SetConfig+0x19e>
 8004050:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <UART_SetConfig+0x2f4>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d013      	beq.n	8004086 <UART_SetConfig+0x192>
 800405e:	2b30      	cmp	r3, #48	; 0x30
 8004060:	d814      	bhi.n	800408c <UART_SetConfig+0x198>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d009      	beq.n	800407a <UART_SetConfig+0x186>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d810      	bhi.n	800408c <UART_SetConfig+0x198>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <UART_SetConfig+0x180>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d006      	beq.n	8004080 <UART_SetConfig+0x18c>
 8004072:	e00b      	b.n	800408c <UART_SetConfig+0x198>
 8004074:	2300      	movs	r3, #0
 8004076:	76fb      	strb	r3, [r7, #27]
 8004078:	e05e      	b.n	8004138 <UART_SetConfig+0x244>
 800407a:	2302      	movs	r3, #2
 800407c:	76fb      	strb	r3, [r7, #27]
 800407e:	e05b      	b.n	8004138 <UART_SetConfig+0x244>
 8004080:	2304      	movs	r3, #4
 8004082:	76fb      	strb	r3, [r7, #27]
 8004084:	e058      	b.n	8004138 <UART_SetConfig+0x244>
 8004086:	2308      	movs	r3, #8
 8004088:	76fb      	strb	r3, [r7, #27]
 800408a:	e055      	b.n	8004138 <UART_SetConfig+0x244>
 800408c:	2310      	movs	r3, #16
 800408e:	76fb      	strb	r3, [r7, #27]
 8004090:	e052      	b.n	8004138 <UART_SetConfig+0x244>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a57      	ldr	r2, [pc, #348]	; (80041f4 <UART_SetConfig+0x300>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <UART_SetConfig+0x1ea>
 800409c:	4b52      	ldr	r3, [pc, #328]	; (80041e8 <UART_SetConfig+0x2f4>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040a6:	2bc0      	cmp	r3, #192	; 0xc0
 80040a8:	d013      	beq.n	80040d2 <UART_SetConfig+0x1de>
 80040aa:	2bc0      	cmp	r3, #192	; 0xc0
 80040ac:	d814      	bhi.n	80040d8 <UART_SetConfig+0x1e4>
 80040ae:	2b80      	cmp	r3, #128	; 0x80
 80040b0:	d009      	beq.n	80040c6 <UART_SetConfig+0x1d2>
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d810      	bhi.n	80040d8 <UART_SetConfig+0x1e4>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <UART_SetConfig+0x1cc>
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d006      	beq.n	80040cc <UART_SetConfig+0x1d8>
 80040be:	e00b      	b.n	80040d8 <UART_SetConfig+0x1e4>
 80040c0:	2300      	movs	r3, #0
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e038      	b.n	8004138 <UART_SetConfig+0x244>
 80040c6:	2302      	movs	r3, #2
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e035      	b.n	8004138 <UART_SetConfig+0x244>
 80040cc:	2304      	movs	r3, #4
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e032      	b.n	8004138 <UART_SetConfig+0x244>
 80040d2:	2308      	movs	r3, #8
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e02f      	b.n	8004138 <UART_SetConfig+0x244>
 80040d8:	2310      	movs	r3, #16
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e02c      	b.n	8004138 <UART_SetConfig+0x244>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3f      	ldr	r2, [pc, #252]	; (80041e0 <UART_SetConfig+0x2ec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d125      	bne.n	8004134 <UART_SetConfig+0x240>
 80040e8:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <UART_SetConfig+0x2f4>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f6:	d017      	beq.n	8004128 <UART_SetConfig+0x234>
 80040f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fc:	d817      	bhi.n	800412e <UART_SetConfig+0x23a>
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004102:	d00b      	beq.n	800411c <UART_SetConfig+0x228>
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004108:	d811      	bhi.n	800412e <UART_SetConfig+0x23a>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <UART_SetConfig+0x222>
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d006      	beq.n	8004122 <UART_SetConfig+0x22e>
 8004114:	e00b      	b.n	800412e <UART_SetConfig+0x23a>
 8004116:	2300      	movs	r3, #0
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e00d      	b.n	8004138 <UART_SetConfig+0x244>
 800411c:	2302      	movs	r3, #2
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e00a      	b.n	8004138 <UART_SetConfig+0x244>
 8004122:	2304      	movs	r3, #4
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e007      	b.n	8004138 <UART_SetConfig+0x244>
 8004128:	2308      	movs	r3, #8
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e004      	b.n	8004138 <UART_SetConfig+0x244>
 800412e:	2310      	movs	r3, #16
 8004130:	76fb      	strb	r3, [r7, #27]
 8004132:	e001      	b.n	8004138 <UART_SetConfig+0x244>
 8004134:	2310      	movs	r3, #16
 8004136:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <UART_SetConfig+0x2ec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	f040 809e 	bne.w	8004280 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004144:	7efb      	ldrb	r3, [r7, #27]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d823      	bhi.n	8004192 <UART_SetConfig+0x29e>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x25c>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004175 	.word	0x08004175
 8004154:	08004193 	.word	0x08004193
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004193 	.word	0x08004193
 8004160:	08004183 	.word	0x08004183
 8004164:	08004193 	.word	0x08004193
 8004168:	08004193 	.word	0x08004193
 800416c:	08004193 	.word	0x08004193
 8004170:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fe ffee 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004178:	6178      	str	r0, [r7, #20]
        break;
 800417a:	e00f      	b.n	800419c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <UART_SetConfig+0x304>)
 800417e:	617b      	str	r3, [r7, #20]
        break;
 8004180:	e00c      	b.n	800419c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7fe ff79 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8004186:	6178      	str	r0, [r7, #20]
        break;
 8004188:	e008      	b.n	800419c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418e:	617b      	str	r3, [r7, #20]
        break;
 8004190:	e004      	b.n	800419c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	76bb      	strb	r3, [r7, #26]
        break;
 800419a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 812c 	beq.w	80043fc <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	4a14      	ldr	r2, [pc, #80]	; (80041fc <UART_SetConfig+0x308>)
 80041aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ae:	461a      	mov	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80041b6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	4413      	add	r3, r2
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d305      	bcc.n	80041d4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d915      	bls.n	8004200 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	76bb      	strb	r3, [r7, #26]
 80041d8:	e110      	b.n	80043fc <UART_SetConfig+0x508>
 80041da:	bf00      	nop
 80041dc:	cfff69f3 	.word	0xcfff69f3
 80041e0:	40008000 	.word	0x40008000
 80041e4:	40013800 	.word	0x40013800
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40004400 	.word	0x40004400
 80041f0:	40004800 	.word	0x40004800
 80041f4:	40004c00 	.word	0x40004c00
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	08006c5c 	.word	0x08006c5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4618      	mov	r0, r3
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	4a85      	ldr	r2, [pc, #532]	; (8004424 <UART_SetConfig+0x530>)
 800420e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004212:	b29a      	uxth	r2, r3
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	f7fc f8ba 	bl	8000390 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	020b      	lsls	r3, r1, #8
 800422e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004232:	0202      	lsls	r2, r0, #8
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	6849      	ldr	r1, [r1, #4]
 8004238:	0849      	lsrs	r1, r1, #1
 800423a:	4608      	mov	r0, r1
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	1814      	adds	r4, r2, r0
 8004242:	eb43 0501 	adc.w	r5, r3, r1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	461a      	mov	r2, r3
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	4620      	mov	r0, r4
 8004252:	4629      	mov	r1, r5
 8004254:	f7fc f89c 	bl	8000390 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004266:	d308      	bcc.n	800427a <UART_SetConfig+0x386>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426e:	d204      	bcs.n	800427a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	e0c0      	b.n	80043fc <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	76bb      	strb	r3, [r7, #26]
 800427e:	e0bd      	b.n	80043fc <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	d164      	bne.n	8004354 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800428a:	7efb      	ldrb	r3, [r7, #27]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d828      	bhi.n	80042e2 <UART_SetConfig+0x3ee>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x3a4>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042e3 	.word	0x080042e3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042e3 	.word	0x080042e3
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7fe ff4a 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 80042c0:	6178      	str	r0, [r7, #20]
        break;
 80042c2:	e013      	b.n	80042ec <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7fe ff5c 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 80042c8:	6178      	str	r0, [r7, #20]
        break;
 80042ca:	e00f      	b.n	80042ec <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <UART_SetConfig+0x534>)
 80042ce:	617b      	str	r3, [r7, #20]
        break;
 80042d0:	e00c      	b.n	80042ec <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe fed1 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80042d6:	6178      	str	r0, [r7, #20]
        break;
 80042d8:	e008      	b.n	80042ec <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	617b      	str	r3, [r7, #20]
        break;
 80042e0:	e004      	b.n	80042ec <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	76bb      	strb	r3, [r7, #26]
        break;
 80042ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8084 	beq.w	80043fc <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	4a4a      	ldr	r2, [pc, #296]	; (8004424 <UART_SetConfig+0x530>)
 80042fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042fe:	461a      	mov	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fbb3 f3f2 	udiv	r3, r3, r2
 8004306:	005a      	lsls	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	441a      	add	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d916      	bls.n	800434e <UART_SetConfig+0x45a>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d212      	bcs.n	800434e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f023 030f 	bic.w	r3, r3, #15
 8004330:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	b29a      	uxth	r2, r3
 800433e:	89fb      	ldrh	r3, [r7, #14]
 8004340:	4313      	orrs	r3, r2
 8004342:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	89fa      	ldrh	r2, [r7, #14]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	e056      	b.n	80043fc <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	76bb      	strb	r3, [r7, #26]
 8004352:	e053      	b.n	80043fc <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004354:	7efb      	ldrb	r3, [r7, #27]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d827      	bhi.n	80043aa <UART_SetConfig+0x4b6>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0x46c>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004385 	.word	0x08004385
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004395 	.word	0x08004395
 800436c:	080043ab 	.word	0x080043ab
 8004370:	0800439b 	.word	0x0800439b
 8004374:	080043ab 	.word	0x080043ab
 8004378:	080043ab 	.word	0x080043ab
 800437c:	080043ab 	.word	0x080043ab
 8004380:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7fe fee6 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004388:	6178      	str	r0, [r7, #20]
        break;
 800438a:	e013      	b.n	80043b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800438c:	f7fe fef8 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004390:	6178      	str	r0, [r7, #20]
        break;
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <UART_SetConfig+0x534>)
 8004396:	617b      	str	r3, [r7, #20]
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7fe fe6d 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 800439e:	6178      	str	r0, [r7, #20]
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e004      	b.n	80043b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	76bb      	strb	r3, [r7, #26]
        break;
 80043b2:	bf00      	nop
    }

    if (pclk != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <UART_SetConfig+0x530>)
 80043c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c4:	461a      	mov	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	441a      	add	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b0f      	cmp	r3, #15
 80043e2:	d909      	bls.n	80043f8 <UART_SetConfig+0x504>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ea:	d205      	bcs.n	80043f8 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e001      	b.n	80043fc <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004418:	7ebb      	ldrb	r3, [r7, #26]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	08006c5c 	.word	0x08006c5c
 8004428:	00f42400 	.word	0x00f42400

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d10a      	bne.n	8004542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b098      	sub	sp, #96	; 0x60
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004580:	f7fd f890 	bl	80016a4 <HAL_GetTick>
 8004584:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d12f      	bne.n	80045f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f88e 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d022      	beq.n	80045f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c2:	653b      	str	r3, [r7, #80]	; 0x50
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
 80045ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e063      	b.n	80046bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d149      	bne.n	8004696 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004602:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f857 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d03c      	beq.n	8004696 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	623b      	str	r3, [r7, #32]
   return(result);
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e6      	bne.n	800461c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	60fb      	str	r3, [r7, #12]
   return(result);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466e:	61fa      	str	r2, [r7, #28]
 8004670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	69b9      	ldr	r1, [r7, #24]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	617b      	str	r3, [r7, #20]
   return(result);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e012      	b.n	80046bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3758      	adds	r7, #88	; 0x58
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d4:	e04f      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d04b      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fc ffe1 	bl	80016a4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e04e      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d037      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d034      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d031      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d110      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2208      	movs	r2, #8
 8004726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f95b 	bl	80049e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2208      	movs	r2, #8
 8004732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e029      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004750:	d111      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f941 	bl	80049e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	429a      	cmp	r2, r3
 8004792:	d0a0      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b0a3      	sub	sp, #140	; 0x8c
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	d10e      	bne.n	80047f2 <UART_Start_Receive_IT+0x52>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <UART_Start_Receive_IT+0x48>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047e6:	e02d      	b.n	8004844 <UART_Start_Receive_IT+0xa4>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	22ff      	movs	r2, #255	; 0xff
 80047ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047f0:	e028      	b.n	8004844 <UART_Start_Receive_IT+0xa4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <UART_Start_Receive_IT+0x76>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <UART_Start_Receive_IT+0x6c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800480a:	e01b      	b.n	8004844 <UART_Start_Receive_IT+0xa4>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	227f      	movs	r2, #127	; 0x7f
 8004810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004814:	e016      	b.n	8004844 <UART_Start_Receive_IT+0xa4>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800481e:	d10d      	bne.n	800483c <UART_Start_Receive_IT+0x9c>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <UART_Start_Receive_IT+0x92>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	227f      	movs	r2, #127	; 0x7f
 800482c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004830:	e008      	b.n	8004844 <UART_Start_Receive_IT+0xa4>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	223f      	movs	r2, #63	; 0x3f
 8004836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800483a:	e003      	b.n	8004844 <UART_Start_Receive_IT+0xa4>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2222      	movs	r2, #34	; 0x22
 8004850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004878:	673a      	str	r2, [r7, #112]	; 0x70
 800487a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800487e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e3      	bne.n	8004854 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004894:	d14f      	bne.n	8004936 <UART_Start_Receive_IT+0x196>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d349      	bcc.n	8004936 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d107      	bne.n	80048bc <UART_Start_Receive_IT+0x11c>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a47      	ldr	r2, [pc, #284]	; (80049d4 <UART_Start_Receive_IT+0x234>)
 80048b8:	675a      	str	r2, [r3, #116]	; 0x74
 80048ba:	e002      	b.n	80048c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a46      	ldr	r2, [pc, #280]	; (80049d8 <UART_Start_Receive_IT+0x238>)
 80048c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e4      	bne.n	80048ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004920:	64ba      	str	r2, [r7, #72]	; 0x48
 8004922:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800492e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_Start_Receive_IT+0x160>
 8004934:	e046      	b.n	80049c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493e:	d107      	bne.n	8004950 <UART_Start_Receive_IT+0x1b0>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a24      	ldr	r2, [pc, #144]	; (80049dc <UART_Start_Receive_IT+0x23c>)
 800494c:	675a      	str	r2, [r3, #116]	; 0x74
 800494e:	e002      	b.n	8004956 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <UART_Start_Receive_IT+0x240>)
 8004954:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d019      	beq.n	8004992 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004972:	677b      	str	r3, [r7, #116]	; 0x74
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
 800497e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e6      	bne.n	800495e <UART_Start_Receive_IT+0x1be>
 8004990:	e018      	b.n	80049c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	613b      	str	r3, [r7, #16]
   return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f043 0320 	orr.w	r3, r3, #32
 80049a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e6      	bne.n	8004992 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	378c      	adds	r7, #140	; 0x8c
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	08005205 	.word	0x08005205
 80049d8:	08004ea5 	.word	0x08004ea5
 80049dc:	08004ced 	.word	0x08004ced
 80049e0:	08004b35 	.word	0x08004b35

080049e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b095      	sub	sp, #84	; 0x54
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e3      	bne.n	8004a1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d118      	bne.n	8004a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004aa4:	bf00      	nop
 8004aa6:	3754      	adds	r7, #84	; 0x54
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff f9fa 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff f9c5 	bl	8003eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b2a:	bf00      	nop
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b09c      	sub	sp, #112	; 0x70
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4c:	2b22      	cmp	r3, #34	; 0x22
 8004b4e:	f040 80be 	bne.w	8004cce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80a1 	bne.w	8004cde <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	667b      	str	r3, [r7, #100]	; 0x64
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bee:	647a      	str	r2, [r7, #68]	; 0x44
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a33      	ldr	r2, [pc, #204]	; (8004ce8 <UART_RxISR_8BIT+0x1b4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01f      	beq.n	8004c60 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d018      	beq.n	8004c60 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d12e      	bne.n	8004cc6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	69b9      	ldr	r1, [r7, #24]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d103      	bne.n	8004cb6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff f90c 	bl	8003edc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cc4:	e00b      	b.n	8004cde <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc fa0e 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 8004ccc:	e007      	b.n	8004cde <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0208 	orr.w	r2, r2, #8
 8004cdc:	619a      	str	r2, [r3, #24]
}
 8004cde:	bf00      	nop
 8004ce0:	3770      	adds	r7, #112	; 0x70
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40008000 	.word	0x40008000

08004cec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b09c      	sub	sp, #112	; 0x70
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004cfa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d04:	2b22      	cmp	r3, #34	; 0x22
 8004d06:	f040 80be 	bne.w	8004e86 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004d1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d22:	4013      	ands	r3, r2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 80a1 	bne.w	8004e96 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d68:	667b      	str	r3, [r7, #100]	; 0x64
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d72:	657b      	str	r3, [r7, #84]	; 0x54
 8004d74:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004da6:	643a      	str	r2, [r7, #64]	; 0x40
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a33      	ldr	r2, [pc, #204]	; (8004ea0 <UART_RxISR_16BIT+0x1b4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d01f      	beq.n	8004e18 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e6      	bne.n	8004de6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d12e      	bne.n	8004e7e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f023 0310 	bic.w	r3, r3, #16
 8004e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6979      	ldr	r1, [r7, #20]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	613b      	str	r3, [r7, #16]
   return(result);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e6      	bne.n	8004e26 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d103      	bne.n	8004e6e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff f830 	bl	8003edc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e7c:	e00b      	b.n	8004e96 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc f932 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 8004e84:	e007      	b.n	8004e96 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0208 	orr.w	r2, r2, #8
 8004e94:	619a      	str	r2, [r3, #24]
}
 8004e96:	bf00      	nop
 8004e98:	3770      	adds	r7, #112	; 0x70
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40008000 	.word	0x40008000

08004ea4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b0ac      	sub	sp, #176	; 0xb0
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004eb2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eda:	2b22      	cmp	r3, #34	; 0x22
 8004edc:	f040 8182 	bne.w	80051e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ee6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004eea:	e125      	b.n	8005138 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ef6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004efa:	b2d9      	uxtb	r1, r3
 8004efc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	400a      	ands	r2, r1
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d053      	beq.n	8004fe6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <UART_RxISR_8BIT_FIFOEN+0xca>
 8004f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f043 0204 	orr.w	r2, r3, #4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d011      	beq.n	8004fce <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f043 0202 	orr.w	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d006      	beq.n	8004fe6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fe ff75 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 80a2 	bne.w	8005138 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005016:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005018:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800501c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e4      	bne.n	8004ff4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800503a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3308      	adds	r3, #8
 800504e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005052:	66ba      	str	r2, [r7, #104]	; 0x68
 8005054:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005058:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e1      	bne.n	800502a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5f      	ldr	r2, [pc, #380]	; (80051fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d021      	beq.n	80050c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01a      	beq.n	80050c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050b4:	657b      	str	r3, [r7, #84]	; 0x54
 80050b6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e4      	bne.n	8005092 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d130      	bne.n	8005132 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050f8:	643b      	str	r3, [r7, #64]	; 0x40
 80050fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e4      	bne.n	80050d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d103      	bne.n	8005122 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2210      	movs	r2, #16
 8005120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fe fed6 	bl	8003edc <HAL_UARTEx_RxEventCallback>
 8005130:	e002      	b.n	8005138 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fb ffd8 	bl	80010e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005138:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	f47f aecf 	bne.w	8004eec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005154:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800515c:	2b00      	cmp	r3, #0
 800515e:	d049      	beq.n	80051f4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005166:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800516a:	429a      	cmp	r2, r3
 800516c:	d242      	bcs.n	80051f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	61fb      	str	r3, [r7, #28]
   return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e3      	bne.n	800516e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a15      	ldr	r2, [pc, #84]	; (8005200 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80051aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f043 0320 	orr.w	r3, r3, #32
 80051c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	613b      	str	r3, [r7, #16]
   return(result);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e4      	bne.n	80051ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051e2:	e007      	b.n	80051f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	619a      	str	r2, [r3, #24]
}
 80051f4:	bf00      	nop
 80051f6:	37b0      	adds	r7, #176	; 0xb0
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40008000 	.word	0x40008000
 8005200:	08004b35 	.word	0x08004b35

08005204 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b0ae      	sub	sp, #184	; 0xb8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005212:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	2b22      	cmp	r3, #34	; 0x22
 800523c:	f040 8186 	bne.w	800554c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005246:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800524a:	e129      	b.n	80054a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800525e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005262:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005266:	4013      	ands	r3, r2
 8005268:	b29a      	uxth	r2, r3
 800526a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800526e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d053      	beq.n	800534a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80052ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80052de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2202      	movs	r2, #2
 80052f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d011      	beq.n	8005332 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800530e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2204      	movs	r2, #4
 8005320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f043 0202 	orr.w	r2, r3, #2
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fe fdc3 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 80a4 	bne.w	80054a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800537a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800537e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800538c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e2      	bne.n	8005358 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80053ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e1      	bne.n	8005392 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a5f      	ldr	r2, [pc, #380]	; (8005564 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d021      	beq.n	8005430 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800540e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800541c:	65bb      	str	r3, [r7, #88]	; 0x58
 800541e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800542a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e4      	bne.n	80053fa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d130      	bne.n	800549a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	f023 0310 	bic.w	r3, r3, #16
 8005452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005460:	647b      	str	r3, [r7, #68]	; 0x44
 8005462:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e4      	bne.n	800543e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d103      	bne.n	800548a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2210      	movs	r2, #16
 8005488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe fd22 	bl	8003edc <HAL_UARTEx_RxEventCallback>
 8005498:	e002      	b.n	80054a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb fe24 	bl	80010e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80054a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f47f aecb 	bne.w	800524c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80054c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d049      	beq.n	800555c <UART_RxISR_16BIT_FIFOEN+0x358>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d242      	bcs.n	800555c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	623b      	str	r3, [r7, #32]
   return(result);
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054fa:	633a      	str	r2, [r7, #48]	; 0x30
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e3      	bne.n	80054d6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005512:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	60fb      	str	r3, [r7, #12]
   return(result);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f043 0320 	orr.w	r3, r3, #32
 8005528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	69b9      	ldr	r1, [r7, #24]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	617b      	str	r3, [r7, #20]
   return(result);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e4      	bne.n	8005514 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800554a:	e007      	b.n	800555c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0208 	orr.w	r2, r2, #8
 800555a:	619a      	str	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	37b8      	adds	r7, #184	; 0xb8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40008000 	.word	0x40008000
 8005568:	08004ced 	.word	0x08004ced

0800556c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UARTEx_DisableFifoMode+0x16>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e027      	b.n	800560e <HAL_UARTEx_DisableFifoMode+0x66>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2224      	movs	r2, #36	; 0x24
 80055ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800562e:	2302      	movs	r3, #2
 8005630:	e02d      	b.n	800568e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f850 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e02d      	b.n	800570a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	; 0x24
 80056ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f812 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005734:	e031      	b.n	800579a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005736:	2308      	movs	r3, #8
 8005738:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800573a:	2308      	movs	r3, #8
 800573c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	0e5b      	lsrs	r3, r3, #25
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0f5b      	lsrs	r3, r3, #29
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	7b3a      	ldrb	r2, [r7, #12]
 8005762:	4911      	ldr	r1, [pc, #68]	; (80057a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005764:	5c8a      	ldrb	r2, [r1, r2]
 8005766:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800576a:	7b3a      	ldrb	r2, [r7, #12]
 800576c:	490f      	ldr	r1, [pc, #60]	; (80057ac <UARTEx_SetNbDataToProcess+0x98>)
 800576e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005770:	fb93 f3f2 	sdiv	r3, r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	7b7a      	ldrb	r2, [r7, #13]
 8005780:	4909      	ldr	r1, [pc, #36]	; (80057a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005782:	5c8a      	ldrb	r2, [r1, r2]
 8005784:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005788:	7b7a      	ldrb	r2, [r7, #13]
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <UARTEx_SetNbDataToProcess+0x98>)
 800578c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800578e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	08006c74 	.word	0x08006c74
 80057ac:	08006c7c 	.word	0x08006c7c

080057b0 <__errno>:
 80057b0:	4b01      	ldr	r3, [pc, #4]	; (80057b8 <__errno+0x8>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000000c 	.word	0x2000000c

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4d0d      	ldr	r5, [pc, #52]	; (80057f4 <__libc_init_array+0x38>)
 80057c0:	4c0d      	ldr	r4, [pc, #52]	; (80057f8 <__libc_init_array+0x3c>)
 80057c2:	1b64      	subs	r4, r4, r5
 80057c4:	10a4      	asrs	r4, r4, #2
 80057c6:	2600      	movs	r6, #0
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	4d0b      	ldr	r5, [pc, #44]	; (80057fc <__libc_init_array+0x40>)
 80057ce:	4c0c      	ldr	r4, [pc, #48]	; (8005800 <__libc_init_array+0x44>)
 80057d0:	f001 f95c 	bl	8006a8c <_init>
 80057d4:	1b64      	subs	r4, r4, r5
 80057d6:	10a4      	asrs	r4, r4, #2
 80057d8:	2600      	movs	r6, #0
 80057da:	42a6      	cmp	r6, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e4:	4798      	blx	r3
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ee:	4798      	blx	r3
 80057f0:	3601      	adds	r6, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	08006dd8 	.word	0x08006dd8
 80057f8:	08006dd8 	.word	0x08006dd8
 80057fc:	08006dd8 	.word	0x08006dd8
 8005800:	08006ddc 	.word	0x08006ddc

08005804 <memset>:
 8005804:	4402      	add	r2, r0
 8005806:	4603      	mov	r3, r0
 8005808:	4293      	cmp	r3, r2
 800580a:	d100      	bne.n	800580e <memset+0xa>
 800580c:	4770      	bx	lr
 800580e:	f803 1b01 	strb.w	r1, [r3], #1
 8005812:	e7f9      	b.n	8005808 <memset+0x4>

08005814 <iprintf>:
 8005814:	b40f      	push	{r0, r1, r2, r3}
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <iprintf+0x2c>)
 8005818:	b513      	push	{r0, r1, r4, lr}
 800581a:	681c      	ldr	r4, [r3, #0]
 800581c:	b124      	cbz	r4, 8005828 <iprintf+0x14>
 800581e:	69a3      	ldr	r3, [r4, #24]
 8005820:	b913      	cbnz	r3, 8005828 <iprintf+0x14>
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fb20 	bl	8005e68 <__sinit>
 8005828:	ab05      	add	r3, sp, #20
 800582a:	9a04      	ldr	r2, [sp, #16]
 800582c:	68a1      	ldr	r1, [r4, #8]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fd0b 	bl	800624c <_vfiprintf_r>
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	2000000c 	.word	0x2000000c

08005844 <putchar>:
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <putchar+0x28>)
 8005846:	b513      	push	{r0, r1, r4, lr}
 8005848:	681c      	ldr	r4, [r3, #0]
 800584a:	4601      	mov	r1, r0
 800584c:	b134      	cbz	r4, 800585c <putchar+0x18>
 800584e:	69a3      	ldr	r3, [r4, #24]
 8005850:	b923      	cbnz	r3, 800585c <putchar+0x18>
 8005852:	9001      	str	r0, [sp, #4]
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fb07 	bl	8005e68 <__sinit>
 800585a:	9901      	ldr	r1, [sp, #4]
 800585c:	68a2      	ldr	r2, [r4, #8]
 800585e:	4620      	mov	r0, r4
 8005860:	b002      	add	sp, #8
 8005862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005866:	f000 bfb5 	b.w	80067d4 <_putc_r>
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <_puts_r>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4605      	mov	r5, r0
 8005876:	b118      	cbz	r0, 8005880 <_puts_r+0x10>
 8005878:	6983      	ldr	r3, [r0, #24]
 800587a:	b90b      	cbnz	r3, 8005880 <_puts_r+0x10>
 800587c:	f000 faf4 	bl	8005e68 <__sinit>
 8005880:	69ab      	ldr	r3, [r5, #24]
 8005882:	68ac      	ldr	r4, [r5, #8]
 8005884:	b913      	cbnz	r3, 800588c <_puts_r+0x1c>
 8005886:	4628      	mov	r0, r5
 8005888:	f000 faee 	bl	8005e68 <__sinit>
 800588c:	4b2c      	ldr	r3, [pc, #176]	; (8005940 <_puts_r+0xd0>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d120      	bne.n	80058d4 <_puts_r+0x64>
 8005892:	686c      	ldr	r4, [r5, #4]
 8005894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005896:	07db      	lsls	r3, r3, #31
 8005898:	d405      	bmi.n	80058a6 <_puts_r+0x36>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	0598      	lsls	r0, r3, #22
 800589e:	d402      	bmi.n	80058a6 <_puts_r+0x36>
 80058a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a2:	f000 fb91 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	0719      	lsls	r1, r3, #28
 80058aa:	d51d      	bpl.n	80058e8 <_puts_r+0x78>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b1db      	cbz	r3, 80058e8 <_puts_r+0x78>
 80058b0:	3e01      	subs	r6, #1
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058b8:	3b01      	subs	r3, #1
 80058ba:	60a3      	str	r3, [r4, #8]
 80058bc:	bb39      	cbnz	r1, 800590e <_puts_r+0x9e>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da38      	bge.n	8005934 <_puts_r+0xc4>
 80058c2:	4622      	mov	r2, r4
 80058c4:	210a      	movs	r1, #10
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f8d6 	bl	8005a78 <__swbuf_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d011      	beq.n	80058f4 <_puts_r+0x84>
 80058d0:	250a      	movs	r5, #10
 80058d2:	e011      	b.n	80058f8 <_puts_r+0x88>
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <_puts_r+0xd4>)
 80058d6:	429c      	cmp	r4, r3
 80058d8:	d101      	bne.n	80058de <_puts_r+0x6e>
 80058da:	68ac      	ldr	r4, [r5, #8]
 80058dc:	e7da      	b.n	8005894 <_puts_r+0x24>
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <_puts_r+0xd8>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	bf08      	it	eq
 80058e4:	68ec      	ldreq	r4, [r5, #12]
 80058e6:	e7d5      	b.n	8005894 <_puts_r+0x24>
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f916 	bl	8005b1c <__swsetup_r>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0dd      	beq.n	80058b0 <_puts_r+0x40>
 80058f4:	f04f 35ff 	mov.w	r5, #4294967295
 80058f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058fa:	07da      	lsls	r2, r3, #31
 80058fc:	d405      	bmi.n	800590a <_puts_r+0x9a>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	d402      	bmi.n	800590a <_puts_r+0x9a>
 8005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005906:	f000 fb60 	bl	8005fca <__retarget_lock_release_recursive>
 800590a:	4628      	mov	r0, r5
 800590c:	bd70      	pop	{r4, r5, r6, pc}
 800590e:	2b00      	cmp	r3, #0
 8005910:	da04      	bge.n	800591c <_puts_r+0xac>
 8005912:	69a2      	ldr	r2, [r4, #24]
 8005914:	429a      	cmp	r2, r3
 8005916:	dc06      	bgt.n	8005926 <_puts_r+0xb6>
 8005918:	290a      	cmp	r1, #10
 800591a:	d004      	beq.n	8005926 <_puts_r+0xb6>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	6022      	str	r2, [r4, #0]
 8005922:	7019      	strb	r1, [r3, #0]
 8005924:	e7c5      	b.n	80058b2 <_puts_r+0x42>
 8005926:	4622      	mov	r2, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 f8a5 	bl	8005a78 <__swbuf_r>
 800592e:	3001      	adds	r0, #1
 8005930:	d1bf      	bne.n	80058b2 <_puts_r+0x42>
 8005932:	e7df      	b.n	80058f4 <_puts_r+0x84>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	250a      	movs	r5, #10
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	6022      	str	r2, [r4, #0]
 800593c:	701d      	strb	r5, [r3, #0]
 800593e:	e7db      	b.n	80058f8 <_puts_r+0x88>
 8005940:	08006d5c 	.word	0x08006d5c
 8005944:	08006d7c 	.word	0x08006d7c
 8005948:	08006d3c 	.word	0x08006d3c

0800594c <puts>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <puts+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f7ff bf8d 	b.w	8005870 <_puts_r>
 8005956:	bf00      	nop
 8005958:	2000000c 	.word	0x2000000c

0800595c <strcpy>:
 800595c:	4603      	mov	r3, r0
 800595e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005962:	f803 2b01 	strb.w	r2, [r3], #1
 8005966:	2a00      	cmp	r2, #0
 8005968:	d1f9      	bne.n	800595e <strcpy+0x2>
 800596a:	4770      	bx	lr

0800596c <strncpy>:
 800596c:	b510      	push	{r4, lr}
 800596e:	3901      	subs	r1, #1
 8005970:	4603      	mov	r3, r0
 8005972:	b132      	cbz	r2, 8005982 <strncpy+0x16>
 8005974:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005978:	f803 4b01 	strb.w	r4, [r3], #1
 800597c:	3a01      	subs	r2, #1
 800597e:	2c00      	cmp	r4, #0
 8005980:	d1f7      	bne.n	8005972 <strncpy+0x6>
 8005982:	441a      	add	r2, r3
 8005984:	2100      	movs	r1, #0
 8005986:	4293      	cmp	r3, r2
 8005988:	d100      	bne.n	800598c <strncpy+0x20>
 800598a:	bd10      	pop	{r4, pc}
 800598c:	f803 1b01 	strb.w	r1, [r3], #1
 8005990:	e7f9      	b.n	8005986 <strncpy+0x1a>

08005992 <strstr>:
 8005992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005994:	780c      	ldrb	r4, [r1, #0]
 8005996:	b164      	cbz	r4, 80059b2 <strstr+0x20>
 8005998:	4603      	mov	r3, r0
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	1c5e      	adds	r6, r3, #1
 80059a0:	b90a      	cbnz	r2, 80059a6 <strstr+0x14>
 80059a2:	4610      	mov	r0, r2
 80059a4:	e005      	b.n	80059b2 <strstr+0x20>
 80059a6:	4294      	cmp	r4, r2
 80059a8:	d108      	bne.n	80059bc <strstr+0x2a>
 80059aa:	460d      	mov	r5, r1
 80059ac:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80059b0:	b902      	cbnz	r2, 80059b4 <strstr+0x22>
 80059b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80059b8:	4297      	cmp	r7, r2
 80059ba:	d0f7      	beq.n	80059ac <strstr+0x1a>
 80059bc:	4633      	mov	r3, r6
 80059be:	e7ec      	b.n	800599a <strstr+0x8>

080059c0 <strtok>:
 80059c0:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <strtok+0x5c>)
 80059c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059c4:	681e      	ldr	r6, [r3, #0]
 80059c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80059c8:	4605      	mov	r5, r0
 80059ca:	b9fc      	cbnz	r4, 8005a0c <strtok+0x4c>
 80059cc:	2050      	movs	r0, #80	; 0x50
 80059ce:	9101      	str	r1, [sp, #4]
 80059d0:	f000 fb60 	bl	8006094 <malloc>
 80059d4:	9901      	ldr	r1, [sp, #4]
 80059d6:	65b0      	str	r0, [r6, #88]	; 0x58
 80059d8:	4602      	mov	r2, r0
 80059da:	b920      	cbnz	r0, 80059e6 <strtok+0x26>
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <strtok+0x60>)
 80059de:	4811      	ldr	r0, [pc, #68]	; (8005a24 <strtok+0x64>)
 80059e0:	2157      	movs	r1, #87	; 0x57
 80059e2:	f000 f909 	bl	8005bf8 <__assert_func>
 80059e6:	e9c0 4400 	strd	r4, r4, [r0]
 80059ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80059ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80059f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80059f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80059fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80059fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a02:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a06:	6184      	str	r4, [r0, #24]
 8005a08:	7704      	strb	r4, [r0, #28]
 8005a0a:	6244      	str	r4, [r0, #36]	; 0x24
 8005a0c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4628      	mov	r0, r5
 8005a12:	b002      	add	sp, #8
 8005a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a18:	f000 b806 	b.w	8005a28 <__strtok_r>
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	08006c88 	.word	0x08006c88
 8005a24:	08006c9f 	.word	0x08006c9f

08005a28 <__strtok_r>:
 8005a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2a:	b908      	cbnz	r0, 8005a30 <__strtok_r+0x8>
 8005a2c:	6810      	ldr	r0, [r2, #0]
 8005a2e:	b188      	cbz	r0, 8005a54 <__strtok_r+0x2c>
 8005a30:	4604      	mov	r4, r0
 8005a32:	4620      	mov	r0, r4
 8005a34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a38:	460f      	mov	r7, r1
 8005a3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a3e:	b91e      	cbnz	r6, 8005a48 <__strtok_r+0x20>
 8005a40:	b965      	cbnz	r5, 8005a5c <__strtok_r+0x34>
 8005a42:	6015      	str	r5, [r2, #0]
 8005a44:	4628      	mov	r0, r5
 8005a46:	e005      	b.n	8005a54 <__strtok_r+0x2c>
 8005a48:	42b5      	cmp	r5, r6
 8005a4a:	d1f6      	bne.n	8005a3a <__strtok_r+0x12>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f0      	bne.n	8005a32 <__strtok_r+0xa>
 8005a50:	6014      	str	r4, [r2, #0]
 8005a52:	7003      	strb	r3, [r0, #0]
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a56:	461c      	mov	r4, r3
 8005a58:	e00c      	b.n	8005a74 <__strtok_r+0x4c>
 8005a5a:	b915      	cbnz	r5, 8005a62 <__strtok_r+0x3a>
 8005a5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a60:	460e      	mov	r6, r1
 8005a62:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a66:	42ab      	cmp	r3, r5
 8005a68:	d1f7      	bne.n	8005a5a <__strtok_r+0x32>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f3      	beq.n	8005a56 <__strtok_r+0x2e>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005a74:	6014      	str	r4, [r2, #0]
 8005a76:	e7ed      	b.n	8005a54 <__strtok_r+0x2c>

08005a78 <__swbuf_r>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	4605      	mov	r5, r0
 8005a80:	b118      	cbz	r0, 8005a8a <__swbuf_r+0x12>
 8005a82:	6983      	ldr	r3, [r0, #24]
 8005a84:	b90b      	cbnz	r3, 8005a8a <__swbuf_r+0x12>
 8005a86:	f000 f9ef 	bl	8005e68 <__sinit>
 8005a8a:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <__swbuf_r+0x98>)
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	d12b      	bne.n	8005ae8 <__swbuf_r+0x70>
 8005a90:	686c      	ldr	r4, [r5, #4]
 8005a92:	69a3      	ldr	r3, [r4, #24]
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	071a      	lsls	r2, r3, #28
 8005a9a:	d52f      	bpl.n	8005afc <__swbuf_r+0x84>
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	b36b      	cbz	r3, 8005afc <__swbuf_r+0x84>
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	1ac0      	subs	r0, r0, r3
 8005aa6:	6963      	ldr	r3, [r4, #20]
 8005aa8:	b2f6      	uxtb	r6, r6
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	4637      	mov	r7, r6
 8005aae:	dc04      	bgt.n	8005aba <__swbuf_r+0x42>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 f944 	bl	8005d40 <_fflush_r>
 8005ab8:	bb30      	cbnz	r0, 8005b08 <__swbuf_r+0x90>
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	60a3      	str	r3, [r4, #8]
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	701e      	strb	r6, [r3, #0]
 8005ac8:	6963      	ldr	r3, [r4, #20]
 8005aca:	3001      	adds	r0, #1
 8005acc:	4283      	cmp	r3, r0
 8005ace:	d004      	beq.n	8005ada <__swbuf_r+0x62>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	07db      	lsls	r3, r3, #31
 8005ad4:	d506      	bpl.n	8005ae4 <__swbuf_r+0x6c>
 8005ad6:	2e0a      	cmp	r6, #10
 8005ad8:	d104      	bne.n	8005ae4 <__swbuf_r+0x6c>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f92f 	bl	8005d40 <_fflush_r>
 8005ae2:	b988      	cbnz	r0, 8005b08 <__swbuf_r+0x90>
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <__swbuf_r+0x9c>)
 8005aea:	429c      	cmp	r4, r3
 8005aec:	d101      	bne.n	8005af2 <__swbuf_r+0x7a>
 8005aee:	68ac      	ldr	r4, [r5, #8]
 8005af0:	e7cf      	b.n	8005a92 <__swbuf_r+0x1a>
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <__swbuf_r+0xa0>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	bf08      	it	eq
 8005af8:	68ec      	ldreq	r4, [r5, #12]
 8005afa:	e7ca      	b.n	8005a92 <__swbuf_r+0x1a>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 f80c 	bl	8005b1c <__swsetup_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d0cb      	beq.n	8005aa0 <__swbuf_r+0x28>
 8005b08:	f04f 37ff 	mov.w	r7, #4294967295
 8005b0c:	e7ea      	b.n	8005ae4 <__swbuf_r+0x6c>
 8005b0e:	bf00      	nop
 8005b10:	08006d5c 	.word	0x08006d5c
 8005b14:	08006d7c 	.word	0x08006d7c
 8005b18:	08006d3c 	.word	0x08006d3c

08005b1c <__swsetup_r>:
 8005b1c:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <__swsetup_r+0xcc>)
 8005b1e:	b570      	push	{r4, r5, r6, lr}
 8005b20:	681d      	ldr	r5, [r3, #0]
 8005b22:	4606      	mov	r6, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	b125      	cbz	r5, 8005b32 <__swsetup_r+0x16>
 8005b28:	69ab      	ldr	r3, [r5, #24]
 8005b2a:	b913      	cbnz	r3, 8005b32 <__swsetup_r+0x16>
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 f99b 	bl	8005e68 <__sinit>
 8005b32:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <__swsetup_r+0xd0>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	d10f      	bne.n	8005b58 <__swsetup_r+0x3c>
 8005b38:	686c      	ldr	r4, [r5, #4]
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b40:	0719      	lsls	r1, r3, #28
 8005b42:	d42c      	bmi.n	8005b9e <__swsetup_r+0x82>
 8005b44:	06dd      	lsls	r5, r3, #27
 8005b46:	d411      	bmi.n	8005b6c <__swsetup_r+0x50>
 8005b48:	2309      	movs	r3, #9
 8005b4a:	6033      	str	r3, [r6, #0]
 8005b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295
 8005b56:	e03e      	b.n	8005bd6 <__swsetup_r+0xba>
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <__swsetup_r+0xd4>)
 8005b5a:	429c      	cmp	r4, r3
 8005b5c:	d101      	bne.n	8005b62 <__swsetup_r+0x46>
 8005b5e:	68ac      	ldr	r4, [r5, #8]
 8005b60:	e7eb      	b.n	8005b3a <__swsetup_r+0x1e>
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <__swsetup_r+0xd8>)
 8005b64:	429c      	cmp	r4, r3
 8005b66:	bf08      	it	eq
 8005b68:	68ec      	ldreq	r4, [r5, #12]
 8005b6a:	e7e6      	b.n	8005b3a <__swsetup_r+0x1e>
 8005b6c:	0758      	lsls	r0, r3, #29
 8005b6e:	d512      	bpl.n	8005b96 <__swsetup_r+0x7a>
 8005b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b72:	b141      	cbz	r1, 8005b86 <__swsetup_r+0x6a>
 8005b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <__swsetup_r+0x66>
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 fa91 	bl	80060a4 <_free_r>
 8005b82:	2300      	movs	r3, #0
 8005b84:	6363      	str	r3, [r4, #52]	; 0x34
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	b94b      	cbnz	r3, 8005bb6 <__swsetup_r+0x9a>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bac:	d003      	beq.n	8005bb6 <__swsetup_r+0x9a>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 fa2f 	bl	8006014 <__smakebuf_r>
 8005bb6:	89a0      	ldrh	r0, [r4, #12]
 8005bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bbc:	f010 0301 	ands.w	r3, r0, #1
 8005bc0:	d00a      	beq.n	8005bd8 <__swsetup_r+0xbc>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60a3      	str	r3, [r4, #8]
 8005bc6:	6963      	ldr	r3, [r4, #20]
 8005bc8:	425b      	negs	r3, r3
 8005bca:	61a3      	str	r3, [r4, #24]
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	b943      	cbnz	r3, 8005be2 <__swsetup_r+0xc6>
 8005bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bd4:	d1ba      	bne.n	8005b4c <__swsetup_r+0x30>
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	0781      	lsls	r1, r0, #30
 8005bda:	bf58      	it	pl
 8005bdc:	6963      	ldrpl	r3, [r4, #20]
 8005bde:	60a3      	str	r3, [r4, #8]
 8005be0:	e7f4      	b.n	8005bcc <__swsetup_r+0xb0>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e7f7      	b.n	8005bd6 <__swsetup_r+0xba>
 8005be6:	bf00      	nop
 8005be8:	2000000c 	.word	0x2000000c
 8005bec:	08006d5c 	.word	0x08006d5c
 8005bf0:	08006d7c 	.word	0x08006d7c
 8005bf4:	08006d3c 	.word	0x08006d3c

08005bf8 <__assert_func>:
 8005bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bfa:	4614      	mov	r4, r2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <__assert_func+0x2c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4605      	mov	r5, r0
 8005c04:	68d8      	ldr	r0, [r3, #12]
 8005c06:	b14c      	cbz	r4, 8005c1c <__assert_func+0x24>
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <__assert_func+0x30>)
 8005c0a:	9100      	str	r1, [sp, #0]
 8005c0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c10:	4906      	ldr	r1, [pc, #24]	; (8005c2c <__assert_func+0x34>)
 8005c12:	462b      	mov	r3, r5
 8005c14:	f000 f9a6 	bl	8005f64 <fiprintf>
 8005c18:	f000 fe8a 	bl	8006930 <abort>
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <__assert_func+0x38>)
 8005c1e:	461c      	mov	r4, r3
 8005c20:	e7f3      	b.n	8005c0a <__assert_func+0x12>
 8005c22:	bf00      	nop
 8005c24:	2000000c 	.word	0x2000000c
 8005c28:	08006d00 	.word	0x08006d00
 8005c2c:	08006d0d 	.word	0x08006d0d
 8005c30:	08006d3b 	.word	0x08006d3b

08005c34 <__sflush_r>:
 8005c34:	898a      	ldrh	r2, [r1, #12]
 8005c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	0710      	lsls	r0, r2, #28
 8005c3e:	460c      	mov	r4, r1
 8005c40:	d458      	bmi.n	8005cf4 <__sflush_r+0xc0>
 8005c42:	684b      	ldr	r3, [r1, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	dc05      	bgt.n	8005c54 <__sflush_r+0x20>
 8005c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	dc02      	bgt.n	8005c54 <__sflush_r+0x20>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	d0f9      	beq.n	8005c4e <__sflush_r+0x1a>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c60:	682f      	ldr	r7, [r5, #0]
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	d032      	beq.n	8005ccc <__sflush_r+0x98>
 8005c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	075a      	lsls	r2, r3, #29
 8005c6c:	d505      	bpl.n	8005c7a <__sflush_r+0x46>
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	1ac0      	subs	r0, r0, r3
 8005c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c74:	b10b      	cbz	r3, 8005c7a <__sflush_r+0x46>
 8005c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c78:	1ac0      	subs	r0, r0, r3
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c80:	6a21      	ldr	r1, [r4, #32]
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b0      	blx	r6
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	d106      	bne.n	8005c9a <__sflush_r+0x66>
 8005c8c:	6829      	ldr	r1, [r5, #0]
 8005c8e:	291d      	cmp	r1, #29
 8005c90:	d82c      	bhi.n	8005cec <__sflush_r+0xb8>
 8005c92:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <__sflush_r+0x108>)
 8005c94:	40ca      	lsrs	r2, r1
 8005c96:	07d6      	lsls	r6, r2, #31
 8005c98:	d528      	bpl.n	8005cec <__sflush_r+0xb8>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	6062      	str	r2, [r4, #4]
 8005c9e:	04d9      	lsls	r1, r3, #19
 8005ca0:	6922      	ldr	r2, [r4, #16]
 8005ca2:	6022      	str	r2, [r4, #0]
 8005ca4:	d504      	bpl.n	8005cb0 <__sflush_r+0x7c>
 8005ca6:	1c42      	adds	r2, r0, #1
 8005ca8:	d101      	bne.n	8005cae <__sflush_r+0x7a>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	b903      	cbnz	r3, 8005cb0 <__sflush_r+0x7c>
 8005cae:	6560      	str	r0, [r4, #84]	; 0x54
 8005cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb2:	602f      	str	r7, [r5, #0]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d0ca      	beq.n	8005c4e <__sflush_r+0x1a>
 8005cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	d002      	beq.n	8005cc6 <__sflush_r+0x92>
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f000 f9ef 	bl	80060a4 <_free_r>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005cca:	e7c1      	b.n	8005c50 <__sflush_r+0x1c>
 8005ccc:	6a21      	ldr	r1, [r4, #32]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b0      	blx	r6
 8005cd4:	1c41      	adds	r1, r0, #1
 8005cd6:	d1c7      	bne.n	8005c68 <__sflush_r+0x34>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0c4      	beq.n	8005c68 <__sflush_r+0x34>
 8005cde:	2b1d      	cmp	r3, #29
 8005ce0:	d001      	beq.n	8005ce6 <__sflush_r+0xb2>
 8005ce2:	2b16      	cmp	r3, #22
 8005ce4:	d101      	bne.n	8005cea <__sflush_r+0xb6>
 8005ce6:	602f      	str	r7, [r5, #0]
 8005ce8:	e7b1      	b.n	8005c4e <__sflush_r+0x1a>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	e7ad      	b.n	8005c50 <__sflush_r+0x1c>
 8005cf4:	690f      	ldr	r7, [r1, #16]
 8005cf6:	2f00      	cmp	r7, #0
 8005cf8:	d0a9      	beq.n	8005c4e <__sflush_r+0x1a>
 8005cfa:	0793      	lsls	r3, r2, #30
 8005cfc:	680e      	ldr	r6, [r1, #0]
 8005cfe:	bf08      	it	eq
 8005d00:	694b      	ldreq	r3, [r1, #20]
 8005d02:	600f      	str	r7, [r1, #0]
 8005d04:	bf18      	it	ne
 8005d06:	2300      	movne	r3, #0
 8005d08:	eba6 0807 	sub.w	r8, r6, r7
 8005d0c:	608b      	str	r3, [r1, #8]
 8005d0e:	f1b8 0f00 	cmp.w	r8, #0
 8005d12:	dd9c      	ble.n	8005c4e <__sflush_r+0x1a>
 8005d14:	6a21      	ldr	r1, [r4, #32]
 8005d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d18:	4643      	mov	r3, r8
 8005d1a:	463a      	mov	r2, r7
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b0      	blx	r6
 8005d20:	2800      	cmp	r0, #0
 8005d22:	dc06      	bgt.n	8005d32 <__sflush_r+0xfe>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e78e      	b.n	8005c50 <__sflush_r+0x1c>
 8005d32:	4407      	add	r7, r0
 8005d34:	eba8 0800 	sub.w	r8, r8, r0
 8005d38:	e7e9      	b.n	8005d0e <__sflush_r+0xda>
 8005d3a:	bf00      	nop
 8005d3c:	20400001 	.word	0x20400001

08005d40 <_fflush_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	690b      	ldr	r3, [r1, #16]
 8005d44:	4605      	mov	r5, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	b913      	cbnz	r3, 8005d50 <_fflush_r+0x10>
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	b118      	cbz	r0, 8005d5a <_fflush_r+0x1a>
 8005d52:	6983      	ldr	r3, [r0, #24]
 8005d54:	b90b      	cbnz	r3, 8005d5a <_fflush_r+0x1a>
 8005d56:	f000 f887 	bl	8005e68 <__sinit>
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <_fflush_r+0x6c>)
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d11b      	bne.n	8005d98 <_fflush_r+0x58>
 8005d60:	686c      	ldr	r4, [r5, #4]
 8005d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ef      	beq.n	8005d4a <_fflush_r+0xa>
 8005d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d6c:	07d0      	lsls	r0, r2, #31
 8005d6e:	d404      	bmi.n	8005d7a <_fflush_r+0x3a>
 8005d70:	0599      	lsls	r1, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <_fflush_r+0x3a>
 8005d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d76:	f000 f927 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	f7ff ff59 	bl	8005c34 <__sflush_r>
 8005d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d84:	07da      	lsls	r2, r3, #31
 8005d86:	4605      	mov	r5, r0
 8005d88:	d4e0      	bmi.n	8005d4c <_fflush_r+0xc>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	059b      	lsls	r3, r3, #22
 8005d8e:	d4dd      	bmi.n	8005d4c <_fflush_r+0xc>
 8005d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d92:	f000 f91a 	bl	8005fca <__retarget_lock_release_recursive>
 8005d96:	e7d9      	b.n	8005d4c <_fflush_r+0xc>
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <_fflush_r+0x70>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d101      	bne.n	8005da2 <_fflush_r+0x62>
 8005d9e:	68ac      	ldr	r4, [r5, #8]
 8005da0:	e7df      	b.n	8005d62 <_fflush_r+0x22>
 8005da2:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <_fflush_r+0x74>)
 8005da4:	429c      	cmp	r4, r3
 8005da6:	bf08      	it	eq
 8005da8:	68ec      	ldreq	r4, [r5, #12]
 8005daa:	e7da      	b.n	8005d62 <_fflush_r+0x22>
 8005dac:	08006d5c 	.word	0x08006d5c
 8005db0:	08006d7c 	.word	0x08006d7c
 8005db4:	08006d3c 	.word	0x08006d3c

08005db8 <std>:
 8005db8:	2300      	movs	r3, #0
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8005dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dc6:	6083      	str	r3, [r0, #8]
 8005dc8:	8181      	strh	r1, [r0, #12]
 8005dca:	6643      	str	r3, [r0, #100]	; 0x64
 8005dcc:	81c2      	strh	r2, [r0, #14]
 8005dce:	6183      	str	r3, [r0, #24]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	305c      	adds	r0, #92	; 0x5c
 8005dd6:	f7ff fd15 	bl	8005804 <memset>
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <std+0x38>)
 8005ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <std+0x3c>)
 8005de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <std+0x40>)
 8005de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <std+0x44>)
 8005de8:	6224      	str	r4, [r4, #32]
 8005dea:	6323      	str	r3, [r4, #48]	; 0x30
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	bf00      	nop
 8005df0:	08006885 	.word	0x08006885
 8005df4:	080068a7 	.word	0x080068a7
 8005df8:	080068df 	.word	0x080068df
 8005dfc:	08006903 	.word	0x08006903

08005e00 <_cleanup_r>:
 8005e00:	4901      	ldr	r1, [pc, #4]	; (8005e08 <_cleanup_r+0x8>)
 8005e02:	f000 b8c1 	b.w	8005f88 <_fwalk_reent>
 8005e06:	bf00      	nop
 8005e08:	08005d41 	.word	0x08005d41

08005e0c <__sfmoreglue>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	1e4a      	subs	r2, r1, #1
 8005e10:	2568      	movs	r5, #104	; 0x68
 8005e12:	4355      	muls	r5, r2
 8005e14:	460e      	mov	r6, r1
 8005e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e1a:	f000 f993 	bl	8006144 <_malloc_r>
 8005e1e:	4604      	mov	r4, r0
 8005e20:	b140      	cbz	r0, 8005e34 <__sfmoreglue+0x28>
 8005e22:	2100      	movs	r1, #0
 8005e24:	e9c0 1600 	strd	r1, r6, [r0]
 8005e28:	300c      	adds	r0, #12
 8005e2a:	60a0      	str	r0, [r4, #8]
 8005e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e30:	f7ff fce8 	bl	8005804 <memset>
 8005e34:	4620      	mov	r0, r4
 8005e36:	bd70      	pop	{r4, r5, r6, pc}

08005e38 <__sfp_lock_acquire>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__sfp_lock_acquire+0x8>)
 8005e3a:	f000 b8c5 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20000728 	.word	0x20000728

08005e44 <__sfp_lock_release>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__sfp_lock_release+0x8>)
 8005e46:	f000 b8c0 	b.w	8005fca <__retarget_lock_release_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20000728 	.word	0x20000728

08005e50 <__sinit_lock_acquire>:
 8005e50:	4801      	ldr	r0, [pc, #4]	; (8005e58 <__sinit_lock_acquire+0x8>)
 8005e52:	f000 b8b9 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 8005e56:	bf00      	nop
 8005e58:	20000723 	.word	0x20000723

08005e5c <__sinit_lock_release>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	; (8005e64 <__sinit_lock_release+0x8>)
 8005e5e:	f000 b8b4 	b.w	8005fca <__retarget_lock_release_recursive>
 8005e62:	bf00      	nop
 8005e64:	20000723 	.word	0x20000723

08005e68 <__sinit>:
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	f7ff fff0 	bl	8005e50 <__sinit_lock_acquire>
 8005e70:	69a3      	ldr	r3, [r4, #24]
 8005e72:	b11b      	cbz	r3, 8005e7c <__sinit+0x14>
 8005e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e78:	f7ff bff0 	b.w	8005e5c <__sinit_lock_release>
 8005e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e80:	6523      	str	r3, [r4, #80]	; 0x50
 8005e82:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <__sinit+0x68>)
 8005e84:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <__sinit+0x6c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	bf04      	itt	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	61a3      	streq	r3, [r4, #24]
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 f820 	bl	8005ed8 <__sfp>
 8005e98:	6060      	str	r0, [r4, #4]
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 f81c 	bl	8005ed8 <__sfp>
 8005ea0:	60a0      	str	r0, [r4, #8]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 f818 	bl	8005ed8 <__sfp>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	60e0      	str	r0, [r4, #12]
 8005eac:	2104      	movs	r1, #4
 8005eae:	6860      	ldr	r0, [r4, #4]
 8005eb0:	f7ff ff82 	bl	8005db8 <std>
 8005eb4:	68a0      	ldr	r0, [r4, #8]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2109      	movs	r1, #9
 8005eba:	f7ff ff7d 	bl	8005db8 <std>
 8005ebe:	68e0      	ldr	r0, [r4, #12]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	2112      	movs	r1, #18
 8005ec4:	f7ff ff78 	bl	8005db8 <std>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61a3      	str	r3, [r4, #24]
 8005ecc:	e7d2      	b.n	8005e74 <__sinit+0xc>
 8005ece:	bf00      	nop
 8005ed0:	08006c84 	.word	0x08006c84
 8005ed4:	08005e01 	.word	0x08005e01

08005ed8 <__sfp>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	4607      	mov	r7, r0
 8005edc:	f7ff ffac 	bl	8005e38 <__sfp_lock_acquire>
 8005ee0:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <__sfp+0x84>)
 8005ee2:	681e      	ldr	r6, [r3, #0]
 8005ee4:	69b3      	ldr	r3, [r6, #24]
 8005ee6:	b913      	cbnz	r3, 8005eee <__sfp+0x16>
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff ffbd 	bl	8005e68 <__sinit>
 8005eee:	3648      	adds	r6, #72	; 0x48
 8005ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	d503      	bpl.n	8005f00 <__sfp+0x28>
 8005ef8:	6833      	ldr	r3, [r6, #0]
 8005efa:	b30b      	cbz	r3, 8005f40 <__sfp+0x68>
 8005efc:	6836      	ldr	r6, [r6, #0]
 8005efe:	e7f7      	b.n	8005ef0 <__sfp+0x18>
 8005f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f04:	b9d5      	cbnz	r5, 8005f3c <__sfp+0x64>
 8005f06:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <__sfp+0x88>)
 8005f08:	60e3      	str	r3, [r4, #12]
 8005f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8005f10:	f000 f859 	bl	8005fc6 <__retarget_lock_init_recursive>
 8005f14:	f7ff ff96 	bl	8005e44 <__sfp_lock_release>
 8005f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f20:	6025      	str	r5, [r4, #0]
 8005f22:	61a5      	str	r5, [r4, #24]
 8005f24:	2208      	movs	r2, #8
 8005f26:	4629      	mov	r1, r5
 8005f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f2c:	f7ff fc6a 	bl	8005804 <memset>
 8005f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f38:	4620      	mov	r0, r4
 8005f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3c:	3468      	adds	r4, #104	; 0x68
 8005f3e:	e7d9      	b.n	8005ef4 <__sfp+0x1c>
 8005f40:	2104      	movs	r1, #4
 8005f42:	4638      	mov	r0, r7
 8005f44:	f7ff ff62 	bl	8005e0c <__sfmoreglue>
 8005f48:	4604      	mov	r4, r0
 8005f4a:	6030      	str	r0, [r6, #0]
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1d5      	bne.n	8005efc <__sfp+0x24>
 8005f50:	f7ff ff78 	bl	8005e44 <__sfp_lock_release>
 8005f54:	230c      	movs	r3, #12
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	e7ee      	b.n	8005f38 <__sfp+0x60>
 8005f5a:	bf00      	nop
 8005f5c:	08006c84 	.word	0x08006c84
 8005f60:	ffff0001 	.word	0xffff0001

08005f64 <fiprintf>:
 8005f64:	b40e      	push	{r1, r2, r3}
 8005f66:	b503      	push	{r0, r1, lr}
 8005f68:	4601      	mov	r1, r0
 8005f6a:	ab03      	add	r3, sp, #12
 8005f6c:	4805      	ldr	r0, [pc, #20]	; (8005f84 <fiprintf+0x20>)
 8005f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f72:	6800      	ldr	r0, [r0, #0]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	f000 f969 	bl	800624c <_vfiprintf_r>
 8005f7a:	b002      	add	sp, #8
 8005f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f80:	b003      	add	sp, #12
 8005f82:	4770      	bx	lr
 8005f84:	2000000c 	.word	0x2000000c

08005f88 <_fwalk_reent>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	4688      	mov	r8, r1
 8005f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f94:	2700      	movs	r7, #0
 8005f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f9e:	d505      	bpl.n	8005fac <_fwalk_reent+0x24>
 8005fa0:	6824      	ldr	r4, [r4, #0]
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	d1f7      	bne.n	8005f96 <_fwalk_reent+0xe>
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fac:	89ab      	ldrh	r3, [r5, #12]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d907      	bls.n	8005fc2 <_fwalk_reent+0x3a>
 8005fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	d003      	beq.n	8005fc2 <_fwalk_reent+0x3a>
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	47c0      	blx	r8
 8005fc0:	4307      	orrs	r7, r0
 8005fc2:	3568      	adds	r5, #104	; 0x68
 8005fc4:	e7e9      	b.n	8005f9a <_fwalk_reent+0x12>

08005fc6 <__retarget_lock_init_recursive>:
 8005fc6:	4770      	bx	lr

08005fc8 <__retarget_lock_acquire_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_release_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <__swhatbuf_r>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	460e      	mov	r6, r1
 8005fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	b096      	sub	sp, #88	; 0x58
 8005fd8:	4614      	mov	r4, r2
 8005fda:	461d      	mov	r5, r3
 8005fdc:	da07      	bge.n	8005fee <__swhatbuf_r+0x22>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	89b3      	ldrh	r3, [r6, #12]
 8005fe4:	061a      	lsls	r2, r3, #24
 8005fe6:	d410      	bmi.n	800600a <__swhatbuf_r+0x3e>
 8005fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fec:	e00e      	b.n	800600c <__swhatbuf_r+0x40>
 8005fee:	466a      	mov	r2, sp
 8005ff0:	f000 fcb6 	bl	8006960 <_fstat_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	dbf2      	blt.n	8005fde <__swhatbuf_r+0x12>
 8005ff8:	9a01      	ldr	r2, [sp, #4]
 8005ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006002:	425a      	negs	r2, r3
 8006004:	415a      	adcs	r2, r3
 8006006:	602a      	str	r2, [r5, #0]
 8006008:	e7ee      	b.n	8005fe8 <__swhatbuf_r+0x1c>
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	2000      	movs	r0, #0
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	b016      	add	sp, #88	; 0x58
 8006012:	bd70      	pop	{r4, r5, r6, pc}

08006014 <__smakebuf_r>:
 8006014:	898b      	ldrh	r3, [r1, #12]
 8006016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006018:	079d      	lsls	r5, r3, #30
 800601a:	4606      	mov	r6, r0
 800601c:	460c      	mov	r4, r1
 800601e:	d507      	bpl.n	8006030 <__smakebuf_r+0x1c>
 8006020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	2301      	movs	r3, #1
 800602a:	6163      	str	r3, [r4, #20]
 800602c:	b002      	add	sp, #8
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	ab01      	add	r3, sp, #4
 8006032:	466a      	mov	r2, sp
 8006034:	f7ff ffca 	bl	8005fcc <__swhatbuf_r>
 8006038:	9900      	ldr	r1, [sp, #0]
 800603a:	4605      	mov	r5, r0
 800603c:	4630      	mov	r0, r6
 800603e:	f000 f881 	bl	8006144 <_malloc_r>
 8006042:	b948      	cbnz	r0, 8006058 <__smakebuf_r+0x44>
 8006044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006048:	059a      	lsls	r2, r3, #22
 800604a:	d4ef      	bmi.n	800602c <__smakebuf_r+0x18>
 800604c:	f023 0303 	bic.w	r3, r3, #3
 8006050:	f043 0302 	orr.w	r3, r3, #2
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	e7e3      	b.n	8006020 <__smakebuf_r+0xc>
 8006058:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <__smakebuf_r+0x7c>)
 800605a:	62b3      	str	r3, [r6, #40]	; 0x28
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	6020      	str	r0, [r4, #0]
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	81a3      	strh	r3, [r4, #12]
 8006066:	9b00      	ldr	r3, [sp, #0]
 8006068:	6163      	str	r3, [r4, #20]
 800606a:	9b01      	ldr	r3, [sp, #4]
 800606c:	6120      	str	r0, [r4, #16]
 800606e:	b15b      	cbz	r3, 8006088 <__smakebuf_r+0x74>
 8006070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006074:	4630      	mov	r0, r6
 8006076:	f000 fc85 	bl	8006984 <_isatty_r>
 800607a:	b128      	cbz	r0, 8006088 <__smakebuf_r+0x74>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	89a0      	ldrh	r0, [r4, #12]
 800608a:	4305      	orrs	r5, r0
 800608c:	81a5      	strh	r5, [r4, #12]
 800608e:	e7cd      	b.n	800602c <__smakebuf_r+0x18>
 8006090:	08005e01 	.word	0x08005e01

08006094 <malloc>:
 8006094:	4b02      	ldr	r3, [pc, #8]	; (80060a0 <malloc+0xc>)
 8006096:	4601      	mov	r1, r0
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f000 b853 	b.w	8006144 <_malloc_r>
 800609e:	bf00      	nop
 80060a0:	2000000c 	.word	0x2000000c

080060a4 <_free_r>:
 80060a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060a6:	2900      	cmp	r1, #0
 80060a8:	d048      	beq.n	800613c <_free_r+0x98>
 80060aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ae:	9001      	str	r0, [sp, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f1a1 0404 	sub.w	r4, r1, #4
 80060b6:	bfb8      	it	lt
 80060b8:	18e4      	addlt	r4, r4, r3
 80060ba:	f000 fc85 	bl	80069c8 <__malloc_lock>
 80060be:	4a20      	ldr	r2, [pc, #128]	; (8006140 <_free_r+0x9c>)
 80060c0:	9801      	ldr	r0, [sp, #4]
 80060c2:	6813      	ldr	r3, [r2, #0]
 80060c4:	4615      	mov	r5, r2
 80060c6:	b933      	cbnz	r3, 80060d6 <_free_r+0x32>
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	6014      	str	r4, [r2, #0]
 80060cc:	b003      	add	sp, #12
 80060ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d2:	f000 bc7f 	b.w	80069d4 <__malloc_unlock>
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	d90b      	bls.n	80060f2 <_free_r+0x4e>
 80060da:	6821      	ldr	r1, [r4, #0]
 80060dc:	1862      	adds	r2, r4, r1
 80060de:	4293      	cmp	r3, r2
 80060e0:	bf04      	itt	eq
 80060e2:	681a      	ldreq	r2, [r3, #0]
 80060e4:	685b      	ldreq	r3, [r3, #4]
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	bf04      	itt	eq
 80060ea:	1852      	addeq	r2, r2, r1
 80060ec:	6022      	streq	r2, [r4, #0]
 80060ee:	602c      	str	r4, [r5, #0]
 80060f0:	e7ec      	b.n	80060cc <_free_r+0x28>
 80060f2:	461a      	mov	r2, r3
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	b10b      	cbz	r3, 80060fc <_free_r+0x58>
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d9fa      	bls.n	80060f2 <_free_r+0x4e>
 80060fc:	6811      	ldr	r1, [r2, #0]
 80060fe:	1855      	adds	r5, r2, r1
 8006100:	42a5      	cmp	r5, r4
 8006102:	d10b      	bne.n	800611c <_free_r+0x78>
 8006104:	6824      	ldr	r4, [r4, #0]
 8006106:	4421      	add	r1, r4
 8006108:	1854      	adds	r4, r2, r1
 800610a:	42a3      	cmp	r3, r4
 800610c:	6011      	str	r1, [r2, #0]
 800610e:	d1dd      	bne.n	80060cc <_free_r+0x28>
 8006110:	681c      	ldr	r4, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	6053      	str	r3, [r2, #4]
 8006116:	4421      	add	r1, r4
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	e7d7      	b.n	80060cc <_free_r+0x28>
 800611c:	d902      	bls.n	8006124 <_free_r+0x80>
 800611e:	230c      	movs	r3, #12
 8006120:	6003      	str	r3, [r0, #0]
 8006122:	e7d3      	b.n	80060cc <_free_r+0x28>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf04      	itt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	bf04      	itt	eq
 8006134:	1949      	addeq	r1, r1, r5
 8006136:	6021      	streq	r1, [r4, #0]
 8006138:	6054      	str	r4, [r2, #4]
 800613a:	e7c7      	b.n	80060cc <_free_r+0x28>
 800613c:	b003      	add	sp, #12
 800613e:	bd30      	pop	{r4, r5, pc}
 8006140:	20000498 	.word	0x20000498

08006144 <_malloc_r>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	1ccd      	adds	r5, r1, #3
 8006148:	f025 0503 	bic.w	r5, r5, #3
 800614c:	3508      	adds	r5, #8
 800614e:	2d0c      	cmp	r5, #12
 8006150:	bf38      	it	cc
 8006152:	250c      	movcc	r5, #12
 8006154:	2d00      	cmp	r5, #0
 8006156:	4606      	mov	r6, r0
 8006158:	db01      	blt.n	800615e <_malloc_r+0x1a>
 800615a:	42a9      	cmp	r1, r5
 800615c:	d903      	bls.n	8006166 <_malloc_r+0x22>
 800615e:	230c      	movs	r3, #12
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	2000      	movs	r0, #0
 8006164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006166:	f000 fc2f 	bl	80069c8 <__malloc_lock>
 800616a:	4921      	ldr	r1, [pc, #132]	; (80061f0 <_malloc_r+0xac>)
 800616c:	680a      	ldr	r2, [r1, #0]
 800616e:	4614      	mov	r4, r2
 8006170:	b99c      	cbnz	r4, 800619a <_malloc_r+0x56>
 8006172:	4f20      	ldr	r7, [pc, #128]	; (80061f4 <_malloc_r+0xb0>)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	b923      	cbnz	r3, 8006182 <_malloc_r+0x3e>
 8006178:	4621      	mov	r1, r4
 800617a:	4630      	mov	r0, r6
 800617c:	f000 fb72 	bl	8006864 <_sbrk_r>
 8006180:	6038      	str	r0, [r7, #0]
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	f000 fb6d 	bl	8006864 <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d123      	bne.n	80061d6 <_malloc_r+0x92>
 800618e:	230c      	movs	r3, #12
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	4630      	mov	r0, r6
 8006194:	f000 fc1e 	bl	80069d4 <__malloc_unlock>
 8006198:	e7e3      	b.n	8006162 <_malloc_r+0x1e>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	1b5b      	subs	r3, r3, r5
 800619e:	d417      	bmi.n	80061d0 <_malloc_r+0x8c>
 80061a0:	2b0b      	cmp	r3, #11
 80061a2:	d903      	bls.n	80061ac <_malloc_r+0x68>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	441c      	add	r4, r3
 80061a8:	6025      	str	r5, [r4, #0]
 80061aa:	e004      	b.n	80061b6 <_malloc_r+0x72>
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	42a2      	cmp	r2, r4
 80061b0:	bf0c      	ite	eq
 80061b2:	600b      	streq	r3, [r1, #0]
 80061b4:	6053      	strne	r3, [r2, #4]
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 fc0c 	bl	80069d4 <__malloc_unlock>
 80061bc:	f104 000b 	add.w	r0, r4, #11
 80061c0:	1d23      	adds	r3, r4, #4
 80061c2:	f020 0007 	bic.w	r0, r0, #7
 80061c6:	1ac2      	subs	r2, r0, r3
 80061c8:	d0cc      	beq.n	8006164 <_malloc_r+0x20>
 80061ca:	1a1b      	subs	r3, r3, r0
 80061cc:	50a3      	str	r3, [r4, r2]
 80061ce:	e7c9      	b.n	8006164 <_malloc_r+0x20>
 80061d0:	4622      	mov	r2, r4
 80061d2:	6864      	ldr	r4, [r4, #4]
 80061d4:	e7cc      	b.n	8006170 <_malloc_r+0x2c>
 80061d6:	1cc4      	adds	r4, r0, #3
 80061d8:	f024 0403 	bic.w	r4, r4, #3
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d0e3      	beq.n	80061a8 <_malloc_r+0x64>
 80061e0:	1a21      	subs	r1, r4, r0
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fb3e 	bl	8006864 <_sbrk_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1dd      	bne.n	80061a8 <_malloc_r+0x64>
 80061ec:	e7cf      	b.n	800618e <_malloc_r+0x4a>
 80061ee:	bf00      	nop
 80061f0:	20000498 	.word	0x20000498
 80061f4:	2000049c 	.word	0x2000049c

080061f8 <__sfputc_r>:
 80061f8:	6893      	ldr	r3, [r2, #8]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	b410      	push	{r4}
 8006200:	6093      	str	r3, [r2, #8]
 8006202:	da08      	bge.n	8006216 <__sfputc_r+0x1e>
 8006204:	6994      	ldr	r4, [r2, #24]
 8006206:	42a3      	cmp	r3, r4
 8006208:	db01      	blt.n	800620e <__sfputc_r+0x16>
 800620a:	290a      	cmp	r1, #10
 800620c:	d103      	bne.n	8006216 <__sfputc_r+0x1e>
 800620e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006212:	f7ff bc31 	b.w	8005a78 <__swbuf_r>
 8006216:	6813      	ldr	r3, [r2, #0]
 8006218:	1c58      	adds	r0, r3, #1
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	7019      	strb	r1, [r3, #0]
 800621e:	4608      	mov	r0, r1
 8006220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006224:	4770      	bx	lr

08006226 <__sfputs_r>:
 8006226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	4614      	mov	r4, r2
 800622e:	18d5      	adds	r5, r2, r3
 8006230:	42ac      	cmp	r4, r5
 8006232:	d101      	bne.n	8006238 <__sfputs_r+0x12>
 8006234:	2000      	movs	r0, #0
 8006236:	e007      	b.n	8006248 <__sfputs_r+0x22>
 8006238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623c:	463a      	mov	r2, r7
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ffda 	bl	80061f8 <__sfputc_r>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d1f3      	bne.n	8006230 <__sfputs_r+0xa>
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800624c <_vfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	460d      	mov	r5, r1
 8006252:	b09d      	sub	sp, #116	; 0x74
 8006254:	4614      	mov	r4, r2
 8006256:	4698      	mov	r8, r3
 8006258:	4606      	mov	r6, r0
 800625a:	b118      	cbz	r0, 8006264 <_vfiprintf_r+0x18>
 800625c:	6983      	ldr	r3, [r0, #24]
 800625e:	b90b      	cbnz	r3, 8006264 <_vfiprintf_r+0x18>
 8006260:	f7ff fe02 	bl	8005e68 <__sinit>
 8006264:	4b89      	ldr	r3, [pc, #548]	; (800648c <_vfiprintf_r+0x240>)
 8006266:	429d      	cmp	r5, r3
 8006268:	d11b      	bne.n	80062a2 <_vfiprintf_r+0x56>
 800626a:	6875      	ldr	r5, [r6, #4]
 800626c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800626e:	07d9      	lsls	r1, r3, #31
 8006270:	d405      	bmi.n	800627e <_vfiprintf_r+0x32>
 8006272:	89ab      	ldrh	r3, [r5, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d402      	bmi.n	800627e <_vfiprintf_r+0x32>
 8006278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800627a:	f7ff fea5 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	071b      	lsls	r3, r3, #28
 8006282:	d501      	bpl.n	8006288 <_vfiprintf_r+0x3c>
 8006284:	692b      	ldr	r3, [r5, #16]
 8006286:	b9eb      	cbnz	r3, 80062c4 <_vfiprintf_r+0x78>
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff fc46 	bl	8005b1c <__swsetup_r>
 8006290:	b1c0      	cbz	r0, 80062c4 <_vfiprintf_r+0x78>
 8006292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006294:	07dc      	lsls	r4, r3, #31
 8006296:	d50e      	bpl.n	80062b6 <_vfiprintf_r+0x6a>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	b01d      	add	sp, #116	; 0x74
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	4b7b      	ldr	r3, [pc, #492]	; (8006490 <_vfiprintf_r+0x244>)
 80062a4:	429d      	cmp	r5, r3
 80062a6:	d101      	bne.n	80062ac <_vfiprintf_r+0x60>
 80062a8:	68b5      	ldr	r5, [r6, #8]
 80062aa:	e7df      	b.n	800626c <_vfiprintf_r+0x20>
 80062ac:	4b79      	ldr	r3, [pc, #484]	; (8006494 <_vfiprintf_r+0x248>)
 80062ae:	429d      	cmp	r5, r3
 80062b0:	bf08      	it	eq
 80062b2:	68f5      	ldreq	r5, [r6, #12]
 80062b4:	e7da      	b.n	800626c <_vfiprintf_r+0x20>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	0598      	lsls	r0, r3, #22
 80062ba:	d4ed      	bmi.n	8006298 <_vfiprintf_r+0x4c>
 80062bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062be:	f7ff fe84 	bl	8005fca <__retarget_lock_release_recursive>
 80062c2:	e7e9      	b.n	8006298 <_vfiprintf_r+0x4c>
 80062c4:	2300      	movs	r3, #0
 80062c6:	9309      	str	r3, [sp, #36]	; 0x24
 80062c8:	2320      	movs	r3, #32
 80062ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80062d2:	2330      	movs	r3, #48	; 0x30
 80062d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006498 <_vfiprintf_r+0x24c>
 80062d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062dc:	f04f 0901 	mov.w	r9, #1
 80062e0:	4623      	mov	r3, r4
 80062e2:	469a      	mov	sl, r3
 80062e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062e8:	b10a      	cbz	r2, 80062ee <_vfiprintf_r+0xa2>
 80062ea:	2a25      	cmp	r2, #37	; 0x25
 80062ec:	d1f9      	bne.n	80062e2 <_vfiprintf_r+0x96>
 80062ee:	ebba 0b04 	subs.w	fp, sl, r4
 80062f2:	d00b      	beq.n	800630c <_vfiprintf_r+0xc0>
 80062f4:	465b      	mov	r3, fp
 80062f6:	4622      	mov	r2, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff ff93 	bl	8006226 <__sfputs_r>
 8006300:	3001      	adds	r0, #1
 8006302:	f000 80aa 	beq.w	800645a <_vfiprintf_r+0x20e>
 8006306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006308:	445a      	add	r2, fp
 800630a:	9209      	str	r2, [sp, #36]	; 0x24
 800630c:	f89a 3000 	ldrb.w	r3, [sl]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80a2 	beq.w	800645a <_vfiprintf_r+0x20e>
 8006316:	2300      	movs	r3, #0
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006320:	f10a 0a01 	add.w	sl, sl, #1
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	9307      	str	r3, [sp, #28]
 8006328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800632c:	931a      	str	r3, [sp, #104]	; 0x68
 800632e:	4654      	mov	r4, sl
 8006330:	2205      	movs	r2, #5
 8006332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006336:	4858      	ldr	r0, [pc, #352]	; (8006498 <_vfiprintf_r+0x24c>)
 8006338:	f7f9 ff8a 	bl	8000250 <memchr>
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	b9d8      	cbnz	r0, 8006378 <_vfiprintf_r+0x12c>
 8006340:	06d1      	lsls	r1, r2, #27
 8006342:	bf44      	itt	mi
 8006344:	2320      	movmi	r3, #32
 8006346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800634a:	0713      	lsls	r3, r2, #28
 800634c:	bf44      	itt	mi
 800634e:	232b      	movmi	r3, #43	; 0x2b
 8006350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006354:	f89a 3000 	ldrb.w	r3, [sl]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d015      	beq.n	8006388 <_vfiprintf_r+0x13c>
 800635c:	9a07      	ldr	r2, [sp, #28]
 800635e:	4654      	mov	r4, sl
 8006360:	2000      	movs	r0, #0
 8006362:	f04f 0c0a 	mov.w	ip, #10
 8006366:	4621      	mov	r1, r4
 8006368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636c:	3b30      	subs	r3, #48	; 0x30
 800636e:	2b09      	cmp	r3, #9
 8006370:	d94e      	bls.n	8006410 <_vfiprintf_r+0x1c4>
 8006372:	b1b0      	cbz	r0, 80063a2 <_vfiprintf_r+0x156>
 8006374:	9207      	str	r2, [sp, #28]
 8006376:	e014      	b.n	80063a2 <_vfiprintf_r+0x156>
 8006378:	eba0 0308 	sub.w	r3, r0, r8
 800637c:	fa09 f303 	lsl.w	r3, r9, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	46a2      	mov	sl, r4
 8006386:	e7d2      	b.n	800632e <_vfiprintf_r+0xe2>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	1d19      	adds	r1, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	9103      	str	r1, [sp, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	bfbb      	ittet	lt
 8006394:	425b      	neglt	r3, r3
 8006396:	f042 0202 	orrlt.w	r2, r2, #2
 800639a:	9307      	strge	r3, [sp, #28]
 800639c:	9307      	strlt	r3, [sp, #28]
 800639e:	bfb8      	it	lt
 80063a0:	9204      	strlt	r2, [sp, #16]
 80063a2:	7823      	ldrb	r3, [r4, #0]
 80063a4:	2b2e      	cmp	r3, #46	; 0x2e
 80063a6:	d10c      	bne.n	80063c2 <_vfiprintf_r+0x176>
 80063a8:	7863      	ldrb	r3, [r4, #1]
 80063aa:	2b2a      	cmp	r3, #42	; 0x2a
 80063ac:	d135      	bne.n	800641a <_vfiprintf_r+0x1ce>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9203      	str	r2, [sp, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfb8      	it	lt
 80063ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80063be:	3402      	adds	r4, #2
 80063c0:	9305      	str	r3, [sp, #20]
 80063c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064a8 <_vfiprintf_r+0x25c>
 80063c6:	7821      	ldrb	r1, [r4, #0]
 80063c8:	2203      	movs	r2, #3
 80063ca:	4650      	mov	r0, sl
 80063cc:	f7f9 ff40 	bl	8000250 <memchr>
 80063d0:	b140      	cbz	r0, 80063e4 <_vfiprintf_r+0x198>
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	eba0 000a 	sub.w	r0, r0, sl
 80063d8:	fa03 f000 	lsl.w	r0, r3, r0
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	4303      	orrs	r3, r0
 80063e0:	3401      	adds	r4, #1
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e8:	482c      	ldr	r0, [pc, #176]	; (800649c <_vfiprintf_r+0x250>)
 80063ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ee:	2206      	movs	r2, #6
 80063f0:	f7f9 ff2e 	bl	8000250 <memchr>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d03f      	beq.n	8006478 <_vfiprintf_r+0x22c>
 80063f8:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <_vfiprintf_r+0x254>)
 80063fa:	bb1b      	cbnz	r3, 8006444 <_vfiprintf_r+0x1f8>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	3307      	adds	r3, #7
 8006400:	f023 0307 	bic.w	r3, r3, #7
 8006404:	3308      	adds	r3, #8
 8006406:	9303      	str	r3, [sp, #12]
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	443b      	add	r3, r7
 800640c:	9309      	str	r3, [sp, #36]	; 0x24
 800640e:	e767      	b.n	80062e0 <_vfiprintf_r+0x94>
 8006410:	fb0c 3202 	mla	r2, ip, r2, r3
 8006414:	460c      	mov	r4, r1
 8006416:	2001      	movs	r0, #1
 8006418:	e7a5      	b.n	8006366 <_vfiprintf_r+0x11a>
 800641a:	2300      	movs	r3, #0
 800641c:	3401      	adds	r4, #1
 800641e:	9305      	str	r3, [sp, #20]
 8006420:	4619      	mov	r1, r3
 8006422:	f04f 0c0a 	mov.w	ip, #10
 8006426:	4620      	mov	r0, r4
 8006428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800642c:	3a30      	subs	r2, #48	; 0x30
 800642e:	2a09      	cmp	r2, #9
 8006430:	d903      	bls.n	800643a <_vfiprintf_r+0x1ee>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0c5      	beq.n	80063c2 <_vfiprintf_r+0x176>
 8006436:	9105      	str	r1, [sp, #20]
 8006438:	e7c3      	b.n	80063c2 <_vfiprintf_r+0x176>
 800643a:	fb0c 2101 	mla	r1, ip, r1, r2
 800643e:	4604      	mov	r4, r0
 8006440:	2301      	movs	r3, #1
 8006442:	e7f0      	b.n	8006426 <_vfiprintf_r+0x1da>
 8006444:	ab03      	add	r3, sp, #12
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	462a      	mov	r2, r5
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <_vfiprintf_r+0x258>)
 800644c:	a904      	add	r1, sp, #16
 800644e:	4630      	mov	r0, r6
 8006450:	f3af 8000 	nop.w
 8006454:	4607      	mov	r7, r0
 8006456:	1c78      	adds	r0, r7, #1
 8006458:	d1d6      	bne.n	8006408 <_vfiprintf_r+0x1bc>
 800645a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800645c:	07d9      	lsls	r1, r3, #31
 800645e:	d405      	bmi.n	800646c <_vfiprintf_r+0x220>
 8006460:	89ab      	ldrh	r3, [r5, #12]
 8006462:	059a      	lsls	r2, r3, #22
 8006464:	d402      	bmi.n	800646c <_vfiprintf_r+0x220>
 8006466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006468:	f7ff fdaf 	bl	8005fca <__retarget_lock_release_recursive>
 800646c:	89ab      	ldrh	r3, [r5, #12]
 800646e:	065b      	lsls	r3, r3, #25
 8006470:	f53f af12 	bmi.w	8006298 <_vfiprintf_r+0x4c>
 8006474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006476:	e711      	b.n	800629c <_vfiprintf_r+0x50>
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	462a      	mov	r2, r5
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <_vfiprintf_r+0x258>)
 8006480:	a904      	add	r1, sp, #16
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f880 	bl	8006588 <_printf_i>
 8006488:	e7e4      	b.n	8006454 <_vfiprintf_r+0x208>
 800648a:	bf00      	nop
 800648c:	08006d5c 	.word	0x08006d5c
 8006490:	08006d7c 	.word	0x08006d7c
 8006494:	08006d3c 	.word	0x08006d3c
 8006498:	08006d9c 	.word	0x08006d9c
 800649c:	08006da6 	.word	0x08006da6
 80064a0:	00000000 	.word	0x00000000
 80064a4:	08006227 	.word	0x08006227
 80064a8:	08006da2 	.word	0x08006da2

080064ac <_printf_common>:
 80064ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	4616      	mov	r6, r2
 80064b2:	4699      	mov	r9, r3
 80064b4:	688a      	ldr	r2, [r1, #8]
 80064b6:	690b      	ldr	r3, [r1, #16]
 80064b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064bc:	4293      	cmp	r3, r2
 80064be:	bfb8      	it	lt
 80064c0:	4613      	movlt	r3, r2
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064c8:	4607      	mov	r7, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	b10a      	cbz	r2, 80064d2 <_printf_common+0x26>
 80064ce:	3301      	adds	r3, #1
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	0699      	lsls	r1, r3, #26
 80064d6:	bf42      	ittt	mi
 80064d8:	6833      	ldrmi	r3, [r6, #0]
 80064da:	3302      	addmi	r3, #2
 80064dc:	6033      	strmi	r3, [r6, #0]
 80064de:	6825      	ldr	r5, [r4, #0]
 80064e0:	f015 0506 	ands.w	r5, r5, #6
 80064e4:	d106      	bne.n	80064f4 <_printf_common+0x48>
 80064e6:	f104 0a19 	add.w	sl, r4, #25
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	6832      	ldr	r2, [r6, #0]
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	dc26      	bgt.n	8006542 <_printf_common+0x96>
 80064f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064f8:	1e13      	subs	r3, r2, #0
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	bf18      	it	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	0692      	lsls	r2, r2, #26
 8006502:	d42b      	bmi.n	800655c <_printf_common+0xb0>
 8006504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006508:	4649      	mov	r1, r9
 800650a:	4638      	mov	r0, r7
 800650c:	47c0      	blx	r8
 800650e:	3001      	adds	r0, #1
 8006510:	d01e      	beq.n	8006550 <_printf_common+0xa4>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	68e5      	ldr	r5, [r4, #12]
 8006516:	6832      	ldr	r2, [r6, #0]
 8006518:	f003 0306 	and.w	r3, r3, #6
 800651c:	2b04      	cmp	r3, #4
 800651e:	bf08      	it	eq
 8006520:	1aad      	subeq	r5, r5, r2
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	6922      	ldr	r2, [r4, #16]
 8006526:	bf0c      	ite	eq
 8006528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800652c:	2500      	movne	r5, #0
 800652e:	4293      	cmp	r3, r2
 8006530:	bfc4      	itt	gt
 8006532:	1a9b      	subgt	r3, r3, r2
 8006534:	18ed      	addgt	r5, r5, r3
 8006536:	2600      	movs	r6, #0
 8006538:	341a      	adds	r4, #26
 800653a:	42b5      	cmp	r5, r6
 800653c:	d11a      	bne.n	8006574 <_printf_common+0xc8>
 800653e:	2000      	movs	r0, #0
 8006540:	e008      	b.n	8006554 <_printf_common+0xa8>
 8006542:	2301      	movs	r3, #1
 8006544:	4652      	mov	r2, sl
 8006546:	4649      	mov	r1, r9
 8006548:	4638      	mov	r0, r7
 800654a:	47c0      	blx	r8
 800654c:	3001      	adds	r0, #1
 800654e:	d103      	bne.n	8006558 <_printf_common+0xac>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	3501      	adds	r5, #1
 800655a:	e7c6      	b.n	80064ea <_printf_common+0x3e>
 800655c:	18e1      	adds	r1, r4, r3
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	2030      	movs	r0, #48	; 0x30
 8006562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006566:	4422      	add	r2, r4
 8006568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800656c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006570:	3302      	adds	r3, #2
 8006572:	e7c7      	b.n	8006504 <_printf_common+0x58>
 8006574:	2301      	movs	r3, #1
 8006576:	4622      	mov	r2, r4
 8006578:	4649      	mov	r1, r9
 800657a:	4638      	mov	r0, r7
 800657c:	47c0      	blx	r8
 800657e:	3001      	adds	r0, #1
 8006580:	d0e6      	beq.n	8006550 <_printf_common+0xa4>
 8006582:	3601      	adds	r6, #1
 8006584:	e7d9      	b.n	800653a <_printf_common+0x8e>
	...

08006588 <_printf_i>:
 8006588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	460c      	mov	r4, r1
 800658e:	4691      	mov	r9, r2
 8006590:	7e27      	ldrb	r7, [r4, #24]
 8006592:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006594:	2f78      	cmp	r7, #120	; 0x78
 8006596:	4680      	mov	r8, r0
 8006598:	469a      	mov	sl, r3
 800659a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800659e:	d807      	bhi.n	80065b0 <_printf_i+0x28>
 80065a0:	2f62      	cmp	r7, #98	; 0x62
 80065a2:	d80a      	bhi.n	80065ba <_printf_i+0x32>
 80065a4:	2f00      	cmp	r7, #0
 80065a6:	f000 80d8 	beq.w	800675a <_printf_i+0x1d2>
 80065aa:	2f58      	cmp	r7, #88	; 0x58
 80065ac:	f000 80a3 	beq.w	80066f6 <_printf_i+0x16e>
 80065b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b8:	e03a      	b.n	8006630 <_printf_i+0xa8>
 80065ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065be:	2b15      	cmp	r3, #21
 80065c0:	d8f6      	bhi.n	80065b0 <_printf_i+0x28>
 80065c2:	a001      	add	r0, pc, #4	; (adr r0, 80065c8 <_printf_i+0x40>)
 80065c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065c8:	08006621 	.word	0x08006621
 80065cc:	08006635 	.word	0x08006635
 80065d0:	080065b1 	.word	0x080065b1
 80065d4:	080065b1 	.word	0x080065b1
 80065d8:	080065b1 	.word	0x080065b1
 80065dc:	080065b1 	.word	0x080065b1
 80065e0:	08006635 	.word	0x08006635
 80065e4:	080065b1 	.word	0x080065b1
 80065e8:	080065b1 	.word	0x080065b1
 80065ec:	080065b1 	.word	0x080065b1
 80065f0:	080065b1 	.word	0x080065b1
 80065f4:	08006741 	.word	0x08006741
 80065f8:	08006665 	.word	0x08006665
 80065fc:	08006723 	.word	0x08006723
 8006600:	080065b1 	.word	0x080065b1
 8006604:	080065b1 	.word	0x080065b1
 8006608:	08006763 	.word	0x08006763
 800660c:	080065b1 	.word	0x080065b1
 8006610:	08006665 	.word	0x08006665
 8006614:	080065b1 	.word	0x080065b1
 8006618:	080065b1 	.word	0x080065b1
 800661c:	0800672b 	.word	0x0800672b
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	1d1a      	adds	r2, r3, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	600a      	str	r2, [r1, #0]
 8006628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800662c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006630:	2301      	movs	r3, #1
 8006632:	e0a3      	b.n	800677c <_printf_i+0x1f4>
 8006634:	6825      	ldr	r5, [r4, #0]
 8006636:	6808      	ldr	r0, [r1, #0]
 8006638:	062e      	lsls	r6, r5, #24
 800663a:	f100 0304 	add.w	r3, r0, #4
 800663e:	d50a      	bpl.n	8006656 <_printf_i+0xce>
 8006640:	6805      	ldr	r5, [r0, #0]
 8006642:	600b      	str	r3, [r1, #0]
 8006644:	2d00      	cmp	r5, #0
 8006646:	da03      	bge.n	8006650 <_printf_i+0xc8>
 8006648:	232d      	movs	r3, #45	; 0x2d
 800664a:	426d      	negs	r5, r5
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	485e      	ldr	r0, [pc, #376]	; (80067cc <_printf_i+0x244>)
 8006652:	230a      	movs	r3, #10
 8006654:	e019      	b.n	800668a <_printf_i+0x102>
 8006656:	f015 0f40 	tst.w	r5, #64	; 0x40
 800665a:	6805      	ldr	r5, [r0, #0]
 800665c:	600b      	str	r3, [r1, #0]
 800665e:	bf18      	it	ne
 8006660:	b22d      	sxthne	r5, r5
 8006662:	e7ef      	b.n	8006644 <_printf_i+0xbc>
 8006664:	680b      	ldr	r3, [r1, #0]
 8006666:	6825      	ldr	r5, [r4, #0]
 8006668:	1d18      	adds	r0, r3, #4
 800666a:	6008      	str	r0, [r1, #0]
 800666c:	0628      	lsls	r0, r5, #24
 800666e:	d501      	bpl.n	8006674 <_printf_i+0xec>
 8006670:	681d      	ldr	r5, [r3, #0]
 8006672:	e002      	b.n	800667a <_printf_i+0xf2>
 8006674:	0669      	lsls	r1, r5, #25
 8006676:	d5fb      	bpl.n	8006670 <_printf_i+0xe8>
 8006678:	881d      	ldrh	r5, [r3, #0]
 800667a:	4854      	ldr	r0, [pc, #336]	; (80067cc <_printf_i+0x244>)
 800667c:	2f6f      	cmp	r7, #111	; 0x6f
 800667e:	bf0c      	ite	eq
 8006680:	2308      	moveq	r3, #8
 8006682:	230a      	movne	r3, #10
 8006684:	2100      	movs	r1, #0
 8006686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800668a:	6866      	ldr	r6, [r4, #4]
 800668c:	60a6      	str	r6, [r4, #8]
 800668e:	2e00      	cmp	r6, #0
 8006690:	bfa2      	ittt	ge
 8006692:	6821      	ldrge	r1, [r4, #0]
 8006694:	f021 0104 	bicge.w	r1, r1, #4
 8006698:	6021      	strge	r1, [r4, #0]
 800669a:	b90d      	cbnz	r5, 80066a0 <_printf_i+0x118>
 800669c:	2e00      	cmp	r6, #0
 800669e:	d04d      	beq.n	800673c <_printf_i+0x1b4>
 80066a0:	4616      	mov	r6, r2
 80066a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066a6:	fb03 5711 	mls	r7, r3, r1, r5
 80066aa:	5dc7      	ldrb	r7, [r0, r7]
 80066ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066b0:	462f      	mov	r7, r5
 80066b2:	42bb      	cmp	r3, r7
 80066b4:	460d      	mov	r5, r1
 80066b6:	d9f4      	bls.n	80066a2 <_printf_i+0x11a>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d10b      	bne.n	80066d4 <_printf_i+0x14c>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07df      	lsls	r7, r3, #31
 80066c0:	d508      	bpl.n	80066d4 <_printf_i+0x14c>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6861      	ldr	r1, [r4, #4]
 80066c6:	4299      	cmp	r1, r3
 80066c8:	bfde      	ittt	le
 80066ca:	2330      	movle	r3, #48	; 0x30
 80066cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066d4:	1b92      	subs	r2, r2, r6
 80066d6:	6122      	str	r2, [r4, #16]
 80066d8:	f8cd a000 	str.w	sl, [sp]
 80066dc:	464b      	mov	r3, r9
 80066de:	aa03      	add	r2, sp, #12
 80066e0:	4621      	mov	r1, r4
 80066e2:	4640      	mov	r0, r8
 80066e4:	f7ff fee2 	bl	80064ac <_printf_common>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d14c      	bne.n	8006786 <_printf_i+0x1fe>
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	b004      	add	sp, #16
 80066f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f6:	4835      	ldr	r0, [pc, #212]	; (80067cc <_printf_i+0x244>)
 80066f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	680e      	ldr	r6, [r1, #0]
 8006700:	061f      	lsls	r7, r3, #24
 8006702:	f856 5b04 	ldr.w	r5, [r6], #4
 8006706:	600e      	str	r6, [r1, #0]
 8006708:	d514      	bpl.n	8006734 <_printf_i+0x1ac>
 800670a:	07d9      	lsls	r1, r3, #31
 800670c:	bf44      	itt	mi
 800670e:	f043 0320 	orrmi.w	r3, r3, #32
 8006712:	6023      	strmi	r3, [r4, #0]
 8006714:	b91d      	cbnz	r5, 800671e <_printf_i+0x196>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f023 0320 	bic.w	r3, r3, #32
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	2310      	movs	r3, #16
 8006720:	e7b0      	b.n	8006684 <_printf_i+0xfc>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f043 0320 	orr.w	r3, r3, #32
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	2378      	movs	r3, #120	; 0x78
 800672c:	4828      	ldr	r0, [pc, #160]	; (80067d0 <_printf_i+0x248>)
 800672e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006732:	e7e3      	b.n	80066fc <_printf_i+0x174>
 8006734:	065e      	lsls	r6, r3, #25
 8006736:	bf48      	it	mi
 8006738:	b2ad      	uxthmi	r5, r5
 800673a:	e7e6      	b.n	800670a <_printf_i+0x182>
 800673c:	4616      	mov	r6, r2
 800673e:	e7bb      	b.n	80066b8 <_printf_i+0x130>
 8006740:	680b      	ldr	r3, [r1, #0]
 8006742:	6826      	ldr	r6, [r4, #0]
 8006744:	6960      	ldr	r0, [r4, #20]
 8006746:	1d1d      	adds	r5, r3, #4
 8006748:	600d      	str	r5, [r1, #0]
 800674a:	0635      	lsls	r5, r6, #24
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	d501      	bpl.n	8006754 <_printf_i+0x1cc>
 8006750:	6018      	str	r0, [r3, #0]
 8006752:	e002      	b.n	800675a <_printf_i+0x1d2>
 8006754:	0671      	lsls	r1, r6, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0x1c8>
 8006758:	8018      	strh	r0, [r3, #0]
 800675a:	2300      	movs	r3, #0
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	4616      	mov	r6, r2
 8006760:	e7ba      	b.n	80066d8 <_printf_i+0x150>
 8006762:	680b      	ldr	r3, [r1, #0]
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	600a      	str	r2, [r1, #0]
 8006768:	681e      	ldr	r6, [r3, #0]
 800676a:	6862      	ldr	r2, [r4, #4]
 800676c:	2100      	movs	r1, #0
 800676e:	4630      	mov	r0, r6
 8006770:	f7f9 fd6e 	bl	8000250 <memchr>
 8006774:	b108      	cbz	r0, 800677a <_printf_i+0x1f2>
 8006776:	1b80      	subs	r0, r0, r6
 8006778:	6060      	str	r0, [r4, #4]
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	6123      	str	r3, [r4, #16]
 800677e:	2300      	movs	r3, #0
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006784:	e7a8      	b.n	80066d8 <_printf_i+0x150>
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	4632      	mov	r2, r6
 800678a:	4649      	mov	r1, r9
 800678c:	4640      	mov	r0, r8
 800678e:	47d0      	blx	sl
 8006790:	3001      	adds	r0, #1
 8006792:	d0ab      	beq.n	80066ec <_printf_i+0x164>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	079b      	lsls	r3, r3, #30
 8006798:	d413      	bmi.n	80067c2 <_printf_i+0x23a>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	4298      	cmp	r0, r3
 80067a0:	bfb8      	it	lt
 80067a2:	4618      	movlt	r0, r3
 80067a4:	e7a4      	b.n	80066f0 <_printf_i+0x168>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4632      	mov	r2, r6
 80067aa:	4649      	mov	r1, r9
 80067ac:	4640      	mov	r0, r8
 80067ae:	47d0      	blx	sl
 80067b0:	3001      	adds	r0, #1
 80067b2:	d09b      	beq.n	80066ec <_printf_i+0x164>
 80067b4:	3501      	adds	r5, #1
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	9903      	ldr	r1, [sp, #12]
 80067ba:	1a5b      	subs	r3, r3, r1
 80067bc:	42ab      	cmp	r3, r5
 80067be:	dcf2      	bgt.n	80067a6 <_printf_i+0x21e>
 80067c0:	e7eb      	b.n	800679a <_printf_i+0x212>
 80067c2:	2500      	movs	r5, #0
 80067c4:	f104 0619 	add.w	r6, r4, #25
 80067c8:	e7f5      	b.n	80067b6 <_printf_i+0x22e>
 80067ca:	bf00      	nop
 80067cc:	08006dad 	.word	0x08006dad
 80067d0:	08006dbe 	.word	0x08006dbe

080067d4 <_putc_r>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	460d      	mov	r5, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	4606      	mov	r6, r0
 80067dc:	b118      	cbz	r0, 80067e6 <_putc_r+0x12>
 80067de:	6983      	ldr	r3, [r0, #24]
 80067e0:	b90b      	cbnz	r3, 80067e6 <_putc_r+0x12>
 80067e2:	f7ff fb41 	bl	8005e68 <__sinit>
 80067e6:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <_putc_r+0x84>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	d124      	bne.n	8006836 <_putc_r+0x62>
 80067ec:	6874      	ldr	r4, [r6, #4]
 80067ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067f0:	07d8      	lsls	r0, r3, #31
 80067f2:	d405      	bmi.n	8006800 <_putc_r+0x2c>
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	0599      	lsls	r1, r3, #22
 80067f8:	d402      	bmi.n	8006800 <_putc_r+0x2c>
 80067fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fc:	f7ff fbe4 	bl	8005fc8 <__retarget_lock_acquire_recursive>
 8006800:	68a3      	ldr	r3, [r4, #8]
 8006802:	3b01      	subs	r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	60a3      	str	r3, [r4, #8]
 8006808:	da05      	bge.n	8006816 <_putc_r+0x42>
 800680a:	69a2      	ldr	r2, [r4, #24]
 800680c:	4293      	cmp	r3, r2
 800680e:	db1c      	blt.n	800684a <_putc_r+0x76>
 8006810:	b2eb      	uxtb	r3, r5
 8006812:	2b0a      	cmp	r3, #10
 8006814:	d019      	beq.n	800684a <_putc_r+0x76>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	701d      	strb	r5, [r3, #0]
 800681e:	b2ed      	uxtb	r5, r5
 8006820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006822:	07da      	lsls	r2, r3, #31
 8006824:	d405      	bmi.n	8006832 <_putc_r+0x5e>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	059b      	lsls	r3, r3, #22
 800682a:	d402      	bmi.n	8006832 <_putc_r+0x5e>
 800682c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800682e:	f7ff fbcc 	bl	8005fca <__retarget_lock_release_recursive>
 8006832:	4628      	mov	r0, r5
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <_putc_r+0x88>)
 8006838:	429c      	cmp	r4, r3
 800683a:	d101      	bne.n	8006840 <_putc_r+0x6c>
 800683c:	68b4      	ldr	r4, [r6, #8]
 800683e:	e7d6      	b.n	80067ee <_putc_r+0x1a>
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <_putc_r+0x8c>)
 8006842:	429c      	cmp	r4, r3
 8006844:	bf08      	it	eq
 8006846:	68f4      	ldreq	r4, [r6, #12]
 8006848:	e7d1      	b.n	80067ee <_putc_r+0x1a>
 800684a:	4629      	mov	r1, r5
 800684c:	4622      	mov	r2, r4
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff f912 	bl	8005a78 <__swbuf_r>
 8006854:	4605      	mov	r5, r0
 8006856:	e7e3      	b.n	8006820 <_putc_r+0x4c>
 8006858:	08006d5c 	.word	0x08006d5c
 800685c:	08006d7c 	.word	0x08006d7c
 8006860:	08006d3c 	.word	0x08006d3c

08006864 <_sbrk_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	; (8006880 <_sbrk_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa fe42 	bl	80014f8 <_sbrk>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_sbrk_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_sbrk_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	2000072c 	.word	0x2000072c

08006884 <__sread>:
 8006884:	b510      	push	{r4, lr}
 8006886:	460c      	mov	r4, r1
 8006888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688c:	f000 f8a8 	bl	80069e0 <_read_r>
 8006890:	2800      	cmp	r0, #0
 8006892:	bfab      	itete	ge
 8006894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006896:	89a3      	ldrhlt	r3, [r4, #12]
 8006898:	181b      	addge	r3, r3, r0
 800689a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800689e:	bfac      	ite	ge
 80068a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80068a2:	81a3      	strhlt	r3, [r4, #12]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <__swrite>:
 80068a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068aa:	461f      	mov	r7, r3
 80068ac:	898b      	ldrh	r3, [r1, #12]
 80068ae:	05db      	lsls	r3, r3, #23
 80068b0:	4605      	mov	r5, r0
 80068b2:	460c      	mov	r4, r1
 80068b4:	4616      	mov	r6, r2
 80068b6:	d505      	bpl.n	80068c4 <__swrite+0x1e>
 80068b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068bc:	2302      	movs	r3, #2
 80068be:	2200      	movs	r2, #0
 80068c0:	f000 f870 	bl	80069a4 <_lseek_r>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	4632      	mov	r2, r6
 80068d2:	463b      	mov	r3, r7
 80068d4:	4628      	mov	r0, r5
 80068d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068da:	f000 b817 	b.w	800690c <_write_r>

080068de <__sseek>:
 80068de:	b510      	push	{r4, lr}
 80068e0:	460c      	mov	r4, r1
 80068e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e6:	f000 f85d 	bl	80069a4 <_lseek_r>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	bf15      	itete	ne
 80068f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80068f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068fa:	81a3      	strheq	r3, [r4, #12]
 80068fc:	bf18      	it	ne
 80068fe:	81a3      	strhne	r3, [r4, #12]
 8006900:	bd10      	pop	{r4, pc}

08006902 <__sclose>:
 8006902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006906:	f000 b81b 	b.w	8006940 <_close_r>
	...

0800690c <_write_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4d07      	ldr	r5, [pc, #28]	; (800692c <_write_r+0x20>)
 8006910:	4604      	mov	r4, r0
 8006912:	4608      	mov	r0, r1
 8006914:	4611      	mov	r1, r2
 8006916:	2200      	movs	r2, #0
 8006918:	602a      	str	r2, [r5, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	f7fa fbce 	bl	80010bc <_write>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_write_r+0x1e>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_write_r+0x1e>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	2000072c 	.word	0x2000072c

08006930 <abort>:
 8006930:	b508      	push	{r3, lr}
 8006932:	2006      	movs	r0, #6
 8006934:	f000 f88e 	bl	8006a54 <raise>
 8006938:	2001      	movs	r0, #1
 800693a:	f7fa fd81 	bl	8001440 <_exit>
	...

08006940 <_close_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d06      	ldr	r5, [pc, #24]	; (800695c <_close_r+0x1c>)
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	f7fa fd9f 	bl	800148e <_close>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_close_r+0x1a>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_close_r+0x1a>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	2000072c 	.word	0x2000072c

08006960 <_fstat_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	; (8006980 <_fstat_r+0x20>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	4611      	mov	r1, r2
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	f7fa fd9a 	bl	80014a6 <_fstat>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d102      	bne.n	800697c <_fstat_r+0x1c>
 8006976:	682b      	ldr	r3, [r5, #0]
 8006978:	b103      	cbz	r3, 800697c <_fstat_r+0x1c>
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	2000072c 	.word	0x2000072c

08006984 <_isatty_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_isatty_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa fd99 	bl	80014c6 <_isatty>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_isatty_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_isatty_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	2000072c 	.word	0x2000072c

080069a4 <_lseek_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4d07      	ldr	r5, [pc, #28]	; (80069c4 <_lseek_r+0x20>)
 80069a8:	4604      	mov	r4, r0
 80069aa:	4608      	mov	r0, r1
 80069ac:	4611      	mov	r1, r2
 80069ae:	2200      	movs	r2, #0
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f7fa fd92 	bl	80014dc <_lseek>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_lseek_r+0x1e>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_lseek_r+0x1e>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	2000072c 	.word	0x2000072c

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff bafd 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20000724 	.word	0x20000724

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff baf8 	b.w	8005fca <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20000724 	.word	0x20000724

080069e0 <_read_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d07      	ldr	r5, [pc, #28]	; (8006a00 <_read_r+0x20>)
 80069e4:	4604      	mov	r4, r0
 80069e6:	4608      	mov	r0, r1
 80069e8:	4611      	mov	r1, r2
 80069ea:	2200      	movs	r2, #0
 80069ec:	602a      	str	r2, [r5, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f7fa fd30 	bl	8001454 <_read>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_read_r+0x1e>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_read_r+0x1e>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	2000072c 	.word	0x2000072c

08006a04 <_raise_r>:
 8006a04:	291f      	cmp	r1, #31
 8006a06:	b538      	push	{r3, r4, r5, lr}
 8006a08:	4604      	mov	r4, r0
 8006a0a:	460d      	mov	r5, r1
 8006a0c:	d904      	bls.n	8006a18 <_raise_r+0x14>
 8006a0e:	2316      	movs	r3, #22
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a1a:	b112      	cbz	r2, 8006a22 <_raise_r+0x1e>
 8006a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a20:	b94b      	cbnz	r3, 8006a36 <_raise_r+0x32>
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 f830 	bl	8006a88 <_getpid_r>
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a32:	f000 b817 	b.w	8006a64 <_kill_r>
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d00a      	beq.n	8006a50 <_raise_r+0x4c>
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	d103      	bne.n	8006a46 <_raise_r+0x42>
 8006a3e:	2316      	movs	r3, #22
 8006a40:	6003      	str	r3, [r0, #0]
 8006a42:	2001      	movs	r0, #1
 8006a44:	e7e7      	b.n	8006a16 <_raise_r+0x12>
 8006a46:	2400      	movs	r4, #0
 8006a48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	4798      	blx	r3
 8006a50:	2000      	movs	r0, #0
 8006a52:	e7e0      	b.n	8006a16 <_raise_r+0x12>

08006a54 <raise>:
 8006a54:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <raise+0xc>)
 8006a56:	4601      	mov	r1, r0
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f7ff bfd3 	b.w	8006a04 <_raise_r>
 8006a5e:	bf00      	nop
 8006a60:	2000000c 	.word	0x2000000c

08006a64 <_kill_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d07      	ldr	r5, [pc, #28]	; (8006a84 <_kill_r+0x20>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	f7fa fcd5 	bl	8001420 <_kill>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d102      	bne.n	8006a80 <_kill_r+0x1c>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	b103      	cbz	r3, 8006a80 <_kill_r+0x1c>
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	bd38      	pop	{r3, r4, r5, pc}
 8006a82:	bf00      	nop
 8006a84:	2000072c 	.word	0x2000072c

08006a88 <_getpid_r>:
 8006a88:	f7fa bcc2 	b.w	8001410 <_getpid>

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
