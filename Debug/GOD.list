
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  08009e60  08009e60  00019e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e4  0800b2e4  00020a34  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ec  0800b2ec  00020a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a34  20000000  0800b2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000a34  0800bd28  00020a34  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  0800bd28  000210f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a34  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd3b  00000000  00000000  00020a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a63  00000000  00000000  0003d79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00041208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  000422b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208c5  00000000  00000000  00043208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001660b  00000000  00000000  00063acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd8ed  00000000  00000000  0007a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001379c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f0  00000000  00000000  00137a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a34 	.word	0x20000a34
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009e48 	.word	0x08009e48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a38 	.word	0x20000a38
 800021c:	08009e48 	.word	0x08009e48

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b9 	b.w	8000684 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <squareroot>:

#include <stdint.h> // Whatever needs to be included
#include <stdio.h>
#include "fixp.h"

int32_t squareroot(uint32_t x) {
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: a 32bit 16.16 variable.
	 * Returns: The square root of the variable.
	 */

    uint64_t scaled_value = (uint64_t)x << 16;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	040b      	lsls	r3, r1, #16
 80006a2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80006a6:	0402      	lsls	r2, r0, #16
 80006a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    uint64_t approx = scaled_value; // Initial guess
 80006ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint64_t better_approx;
    do {
        better_approx = (approx + scaled_value / approx) / 2;
 80006b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80006b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006bc:	f7ff fe68 	bl	8000390 <__aeabi_uldivmod>
 80006c0:	4602      	mov	r2, r0
 80006c2:	460b      	mov	r3, r1
 80006c4:	4610      	mov	r0, r2
 80006c6:	4619      	mov	r1, r3
 80006c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80006cc:	1884      	adds	r4, r0, r2
 80006ce:	eb41 0503 	adc.w	r5, r1, r3
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	0862      	lsrs	r2, r4, #1
 80006dc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80006e0:	086b      	lsrs	r3, r5, #1
 80006e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
        if (better_approx == approx) break;
 80006e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80006ee:	4299      	cmp	r1, r3
 80006f0:	bf08      	it	eq
 80006f2:	4290      	cmpeq	r0, r2
 80006f4:	d004      	beq.n	8000700 <squareroot+0x78>
        approx = better_approx;
 80006f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
        better_approx = (approx + scaled_value / approx) / 2;
 80006fe:	e7d9      	b.n	80006b4 <squareroot+0x2c>
        if (better_approx == approx) break;
 8000700:	bf00      	nop
    } while (1);

    return (uint32_t)(approx);
 8000702:	69bb      	ldr	r3, [r7, #24]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bdb0      	pop	{r4, r5, r7, pc}

0800070c <Rational>:

int32_t Rational(int a, int b) {
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f844 	bl	80007a4 <convert>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000724:	1415      	asrs	r5, r2, #16
 8000726:	0414      	lsls	r4, r2, #16
 8000728:	6838      	ldr	r0, [r7, #0]
 800072a:	f000 f83b 	bl	80007a4 <convert>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000736:	4620      	mov	r0, r4
 8000738:	4629      	mov	r1, r5
 800073a:	f7ff fdd9 	bl	80002f0 <__aeabi_ldivmod>
 800073e:	4602      	mov	r2, r0
 8000740:	460b      	mov	r3, r1
 8000742:	4613      	mov	r3, r2
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bdb0      	pop	{r4, r5, r7, pc}

0800074c <printFix>:

void printFix(int32_t i) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da05      	bge.n	8000766 <printFix+0x1a>
            printf("-");
 800075a:	202d      	movs	r0, #45	; 0x2d
 800075c:	f007 fdde 	bl	800831c <putchar>
            i = ~i + 1;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	425b      	negs	r3, r3
 8000764:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	1419      	asrs	r1, r3, #16
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	b29b      	uxth	r3, r3
 800076e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	461a      	mov	r2, r3
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <printFix+0x3c>)
 800077c:	f007 fdb6 	bl	80082ec <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08009e60 	.word	0x08009e60

0800078c <expand>:

int32_t expand(int32_t i) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	009b      	lsls	r3, r3, #2
   }
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <convert>:

int32_t convert(int32_t i) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	041b      	lsls	r3, r3, #16
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <inconvert>:

int32_t inconvert(int32_t i) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80007ca:	141b      	asrs	r3, r3, #16
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	3301      	adds	r3, #1
 80007ee:	425a      	negs	r2, r3
 80007f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000804:	b29b      	uxth	r3, r3
 8000806:	89fa      	ldrh	r2, [r7, #14]
 8000808:	429a      	cmp	r2, r3
 800080a:	d00c      	beq.n	8000826 <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000812:	b29b      	uxth	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	78fa      	ldrb	r2, [r7, #3]
 800081a:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	89fa      	ldrh	r2, [r7, #14]
 8000820:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 8000824:	e002      	b.n	800082c <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <RingBuffer_Write+0x5c>)
 8000828:	f007 fd60 	bl	80082ec <iprintf>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08009e70 	.word	0x08009e70

08000838 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    int result = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000844:	e015      	b.n	8000872 <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b2f      	cmp	r3, #47	; 0x2f
 800084c:	d90e      	bls.n	800086c <string_to_int+0x34>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b39      	cmp	r3, #57	; 0x39
 8000854:	d80a      	bhi.n	800086c <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b30      	subs	r3, #48	; 0x30
 8000868:	4413      	add	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
        }
        str++;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1e5      	bne.n	8000846 <string_to_int+0xe>
    }
    return result;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <powten>:

int powten(int x) {
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	int i = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd0f      	ble.n	80008ba <powten+0x32>
		for (int j = 0; j < x; j++) {
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	e008      	b.n	80008b2 <powten+0x2a>
			i *= 10;
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dbf2      	blt.n	80008a0 <powten+0x18>
		}
	}
	return i;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <Altxx>:

int32_t Altxx(char *data) {
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 80008d0:	4921      	ldr	r1, [pc, #132]	; (8000958 <Altxx+0x90>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f007 fe00 	bl	80084d8 <strtok>
 80008d8:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
	int j = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 80008ea:	e01a      	b.n	8000922 <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 80008ec:	69f8      	ldr	r0, [r7, #28]
 80008ee:	f7ff ffa3 	bl	8000838 <string_to_int>
 80008f2:	4602      	mov	r2, r0
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	f107 0120 	add.w	r1, r7, #32
 80008fc:	440b      	add	r3, r1
 80008fe:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d104      	bne.n	8000912 <Altxx+0x4a>
 8000908:	69f8      	ldr	r0, [r7, #28]
 800090a:	f7ff fc93 	bl	8000234 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 8000918:	490f      	ldr	r1, [pc, #60]	; (8000958 <Altxx+0x90>)
 800091a:	2000      	movs	r0, #0
 800091c:	f007 fddc 	bl	80084d8 <strtok>
 8000920:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e1      	bne.n	80008ec <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff3a 	bl	80007a4 <convert>
 8000930:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 8000932:	68fc      	ldr	r4, [r7, #12]
 8000934:	69b8      	ldr	r0, [r7, #24]
 8000936:	f7ff ffa7 	bl	8000888 <powten>
 800093a:	4603      	mov	r3, r0
 800093c:	4619      	mov	r1, r3
 800093e:	4620      	mov	r0, r4
 8000940:	f7ff fee4 	bl	800070c <Rational>
 8000944:	4602      	mov	r2, r0
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	4413      	add	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 800094c:	693b      	ldr	r3, [r7, #16]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08009f08 	.word	0x08009f08

0800095c <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <DDmmmmmm+0x90>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	82bb      	strh	r3, [r7, #20]
 800096a:	2300      	movs	r3, #0
 800096c:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2202      	movs	r2, #2
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	f007 fd80 	bl	8008484 <strncpy>
    strcpy(mm_str, data + 2);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	1c9a      	adds	r2, r3, #2
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f007 fd70 	bl	8008474 <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff4d 	bl	8000838 <string_to_int>
 800099e:	4603      	mov	r3, r0
 80009a0:	041b      	lsls	r3, r3, #16
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff45 	bl	8000838 <string_to_int>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	141d      	asrs	r5, r3, #16
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	041c      	lsls	r4, r3, #16
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <DDmmmmmm+0x94>)
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	4620      	mov	r0, r4
 80009ca:	4629      	mov	r1, r5
 80009cc:	f7ff fc90 	bl	80002f0 <__aeabi_ldivmod>
 80009d0:	4602      	mov	r2, r0
 80009d2:	460b      	mov	r3, r1
 80009d4:	4613      	mov	r3, r2
 80009d6:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4413      	add	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]

    return cords;
 80009e0:	69bb      	ldr	r3, [r7, #24]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08009f0c 	.word	0x08009f0c
 80009f0:	000927c0 	.word	0x000927c0

080009f4 <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2203      	movs	r2, #3
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f007 fd34 	bl	8008484 <strncpy>
	strcpy(mm_str, data + 3);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1cda      	adds	r2, r3, #3
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f007 fd24 	bl	8008474 <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff01 	bl	8000838 <string_to_int>
 8000a36:	4603      	mov	r3, r0
 8000a38:	041b      	lsls	r3, r3, #16
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fef9 	bl	8000838 <string_to_int>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	141d      	asrs	r5, r3, #16
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	041c      	lsls	r4, r3, #16
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <DDDmmmmmm+0x90>)
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	4620      	mov	r0, r4
 8000a62:	4629      	mov	r1, r5
 8000a64:	f7ff fc44 	bl	80002f0 <__aeabi_ldivmod>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a74:	4413      	add	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
	return cords;
 8000a78:	69bb      	ldr	r3, [r7, #24]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bdb0      	pop	{r4, r5, r7, pc}
 8000a82:	bf00      	nop
 8000a84:	000927c0 	.word	0x000927c0

08000a88 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d101      	bne.n	8000aaa <RingBuffer_Read+0x22>
        return 0;  // No data
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e019      	b.n	8000ade <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	5c9a      	ldrb	r2, [r3, r2]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	425a      	negs	r2, r3
 8000ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000acc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000ad0:	bf58      	it	pl
 8000ad2:	4253      	negpl	r3, r2
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	7b1b      	ldrb	r3, [r3, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8097 	beq.w	8000c2e <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 8000b00:	4a6c      	ldr	r2, [pc, #432]	; (8000cb4 <getGPGGA+0x1c8>)
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b0a:	6018      	str	r0, [r3, #0]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	8019      	strh	r1, [r3, #0]
 8000b10:	3302      	adds	r3, #2
 8000b12:	0c0a      	lsrs	r2, r1, #16
 8000b14:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f007 fcc4 	bl	80084aa <strstr>
 8000b22:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 80bf 	beq.w	8000caa <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 8000b2c:	69b8      	ldr	r0, [r7, #24]
 8000b2e:	f7ff fb81 	bl	8000234 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b28      	cmp	r3, #40	; 0x28
 8000b36:	d973      	bls.n	8000c20 <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 8000b38:	495f      	ldr	r1, [pc, #380]	; (8000cb8 <getGPGGA+0x1cc>)
 8000b3a:	69b8      	ldr	r0, [r7, #24]
 8000b3c:	f007 fccc 	bl	80084d8 <strtok>
 8000b40:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 8000b46:	e067      	b.n	8000c18 <getGPGGA+0x12c>
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	3b03      	subs	r3, #3
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d85a      	bhi.n	8000c06 <getGPGGA+0x11a>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <getGPGGA+0x6c>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b79 	.word	0x08000b79
 8000b5c:	08000b87 	.word	0x08000b87
 8000b60:	08000bb9 	.word	0x08000bb9
 8000b64:	08000bc7 	.word	0x08000bc7
 8000b68:	08000c07 	.word	0x08000c07
 8000b6c:	08000c07 	.word	0x08000c07
 8000b70:	08000c07 	.word	0x08000c07
 8000b74:	08000bf9 	.word	0x08000bf9
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8000b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b7a:	f7ff feef 	bl	800095c <DDmmmmmm>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	601a      	str	r2, [r3, #0]
							break;
 8000b84:	e040      	b.n	8000c08 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8000b86:	494d      	ldr	r1, [pc, #308]	; (8000cbc <getGPGGA+0x1d0>)
 8000b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b8a:	f7ff fb49 	bl	8000220 <strcmp>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d108      	bne.n	8000ba6 <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b9c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 8000ba4:	e030      	b.n	8000c08 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	425a      	negs	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	601a      	str	r2, [r3, #0]
							break;
 8000bb6:	e027      	b.n	8000c08 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 8000bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000bba:	f7ff ff1b 	bl	80009f4 <DDDmmmmmm>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
							break;
 8000bc4:	e020      	b.n	8000c08 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 8000bc6:	493e      	ldr	r1, [pc, #248]	; (8000cc0 <getGPGGA+0x1d4>)
 8000bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000bca:	f7ff fb29 	bl	8000220 <strcmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d108      	bne.n	8000be6 <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bdc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 8000be4:	e010      	b.n	8000c08 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	425a      	negs	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
							break;
 8000bf6:	e007      	b.n	8000c08 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 8000bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000bfa:	f7ff fe65 	bl	80008c8 <Altxx>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	609a      	str	r2, [r3, #8]
							break;
 8000c04:	e000      	b.n	8000c08 <getGPGGA+0x11c>
						}
						default: {
							break;
 8000c06:	bf00      	nop
						}
					}
					i++;
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000c0e:	492a      	ldr	r1, [pc, #168]	; (8000cb8 <getGPGGA+0x1cc>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f007 fc61 	bl	80084d8 <strtok>
 8000c16:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d194      	bne.n	8000b48 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s \r\n", filter);
		}
	}
}
 8000c1e:	e044      	b.n	8000caa <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 8000c20:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <getGPGGA+0x1d8>)
 8000c22:	f007 fbff 	bl	8008424 <puts>
				gps->active = 0;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	731a      	strb	r2, [r3, #12]
}
 8000c2c:	e03d      	b.n	8000caa <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 8000c2e:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <getGPGGA+0x1dc>)
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c38:	6018      	str	r0, [r3, #0]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	8019      	strh	r1, [r3, #0]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	0c0a      	lsrs	r2, r1, #16
 8000c42:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f007 fc2d 	bl	80084aa <strstr>
 8000c50:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d028      	beq.n	8000caa <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 8000c58:	4917      	ldr	r1, [pc, #92]	; (8000cb8 <getGPGGA+0x1cc>)
 8000c5a:	69f8      	ldr	r0, [r7, #28]
 8000c5c:	f007 fc3c 	bl	80084d8 <strtok>
 8000c60:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8000c66:	e01d      	b.n	8000ca4 <getGPGGA+0x1b8>
				i++;
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000c6e:	4912      	ldr	r1, [pc, #72]	; (8000cb8 <getGPGGA+0x1cc>)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f007 fc31 	bl	80084d8 <strtok>
 8000c76:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d112      	bne.n	8000ca4 <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 8000c7e:	4913      	ldr	r1, [pc, #76]	; (8000ccc <getGPGGA+0x1e0>)
 8000c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c82:	f7ff facd 	bl	8000220 <strcmp>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d106      	bne.n	8000c9a <getGPGGA+0x1ae>
							gps->active = 1;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <getGPGGA+0x1e4>)
 8000c94:	f007 fbc6 	bl	8008424 <puts>
 8000c98:	e003      	b.n	8000ca2 <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <getGPGGA+0x1e8>)
 8000c9e:	f007 fb25 	bl	80082ec <iprintf>
						break;
 8000ca2:	bf00      	nop
			while (tokPtr != NULL) {
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1de      	bne.n	8000c68 <getGPGGA+0x17c>
}
 8000caa:	bf00      	nop
 8000cac:	3730      	adds	r7, #48	; 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08009f6c 	.word	0x08009f6c
 8000cb8:	08009f10 	.word	0x08009f10
 8000cbc:	08009f14 	.word	0x08009f14
 8000cc0:	08009f18 	.word	0x08009f18
 8000cc4:	08009f1c 	.word	0x08009f1c
 8000cc8:	08009f74 	.word	0x08009f74
 8000ccc:	08009f38 	.word	0x08009f38
 8000cd0:	08009f3c 	.word	0x08009f3c
 8000cd4:	08009f50 	.word	0x08009f50

08000cd8 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 8000ce2:	e01d      	b.n	8000d20 <process_uart_data+0x48>
        if (indx < sizeof(sentence) - 1) {
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <process_uart_data+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2bf8      	cmp	r3, #248	; 0xf8
 8000cea:	d807      	bhi.n	8000cfc <process_uart_data+0x24>
            sentence[indx++] = c;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <process_uart_data+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	4912      	ldr	r1, [pc, #72]	; (8000d3c <process_uart_data+0x64>)
 8000cf4:	600a      	str	r2, [r1, #0]
 8000cf6:	7bf9      	ldrb	r1, [r7, #15]
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <process_uart_data+0x68>)
 8000cfa:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d10e      	bne.n	8000d20 <process_uart_data+0x48>
            sentence[indx] = '\0';  // Null-terminate the string
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <process_uart_data+0x64>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <process_uart_data+0x68>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	54d1      	strb	r1, [r2, r3]
            printf("Log:   UART Sentence received \r\n");
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <process_uart_data+0x6c>)
 8000d0e:	f007 fb89 	bl	8008424 <puts>
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8000d12:	6839      	ldr	r1, [r7, #0]
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <process_uart_data+0x68>)
 8000d16:	f7ff fee9 	bl	8000aec <getGPGGA>
            indx = 0;  // Reset for next line
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <process_uart_data+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8000d20:	f107 030f 	add.w	r3, r7, #15
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff feae 	bl	8000a88 <RingBuffer_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1d8      	bne.n	8000ce4 <process_uart_data+0xc>
        }
    }
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000a50 	.word	0x20000a50
 8000d40:	20000e64 	.word	0x20000e64
 8000d44:	08009f7c 	.word	0x08009f7c

08000d48 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <I2C_Scan+0x58>)
 8000d52:	f007 fb67 	bl	8008424 <puts>

    for (i = 1; i < 128; i++) {
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e015      	b.n	8000d88 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	b299      	uxth	r1, r3
 8000d64:	230a      	movs	r3, #10
 8000d66:	2201      	movs	r2, #1
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f003 fdc3 	bl	80048f4 <HAL_I2C_IsDeviceReady>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <I2C_Scan+0x5c>)
 8000d7e:	f007 fab5 	bl	80082ec <iprintf>
    for (i = 1; i < 128; i++) {
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	3301      	adds	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dae5      	bge.n	8000d5c <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <I2C_Scan+0x60>)
 8000d92:	f007 fb47 	bl	8008424 <puts>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08009ffc 	.word	0x08009ffc
 8000da4:	0800a014 	.word	0x0800a014
 8000da8:	0800a03c 	.word	0x0800a03c

08000dac <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2102      	movs	r1, #2
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f003 fada 	bl	8004370 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f002 ff63 	bl	8003c88 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f003 fad1 	bl	8004370 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 ff5a 	bl	8003c88 <HAL_Delay>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	2110      	movs	r1, #16
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f003 fabd 	bl	8004370 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	085b      	lsrs	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	2120      	movs	r1, #32
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f003 fab1 	bl	8004370 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f003 faa5 	bl	8004370 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	2108      	movs	r1, #8
 8000e36:	4804      	ldr	r0, [pc, #16]	; (8000e48 <LCD_Send4Bits+0x70>)
 8000e38:	f003 fa9a 	bl	8004370 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000e3c:	f7ff ffb6 	bl	8000dac <LCD_EnablePulse>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	48000400 	.word	0x48000400

08000e4c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2101      	movs	r1, #1
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f003 fa87 	bl	8004370 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffb5 	bl	8000dd8 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffae 	bl	8000dd8 <LCD_Send4Bits>
    HAL_Delay(2);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f002 ff03 	bl	8003c88 <HAL_Delay>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <LCD_SendChar>:

void LCD_SendChar(char c) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2101      	movs	r1, #1
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f003 fa68 	bl	8004370 <HAL_GPIO_WritePin>
    LCD_Send4Bits(c >> 4);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff96 	bl	8000dd8 <LCD_Send4Bits>
    LCD_Send4Bits(c & 0x0F);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff8f 	bl	8000dd8 <LCD_Send4Bits>
    HAL_Delay(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f002 fee4 	bl	8003c88 <HAL_Delay>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LCD_SendString>:

void LCD_SendString(char* str) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ed0:	e006      	b.n	8000ee0 <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ffd5 	bl	8000e8a <LCD_SendChar>
    while (*str) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <LCD_SendString+0xa>
    }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	460a      	mov	r2, r1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	4613      	mov	r3, r2
 8000f00:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <LCD_SetCursor+0x1a>
 8000f08:	2200      	movs	r2, #0
 8000f0a:	e000      	b.n	8000f0e <LCD_SetCursor+0x1c>
 8000f0c:	2240      	movs	r2, #64	; 0x40
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	4413      	add	r3, r2
 8000f12:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | addr);
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff95 	bl	8000e4c <LCD_SendCommand>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <LCD_Init>:

void LCD_Init(void) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f002 feaa 	bl	8003c88 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f7ff ff4f 	bl	8000dd8 <LCD_Send4Bits>
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f002 fea4 	bl	8003c88 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f7ff ff49 	bl	8000dd8 <LCD_Send4Bits>
 8000f46:	2001      	movs	r0, #1
 8000f48:	f002 fe9e 	bl	8003c88 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f7ff ff43 	bl	8000dd8 <LCD_Send4Bits>
 8000f52:	2001      	movs	r0, #1
 8000f54:	f002 fe98 	bl	8003c88 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff ff3d 	bl	8000dd8 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8000f5e:	2028      	movs	r0, #40	; 0x28
 8000f60:	f7ff ff74 	bl	8000e4c <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8000f64:	200c      	movs	r0, #12
 8000f66:	f7ff ff71 	bl	8000e4c <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff ff6e 	bl	8000e4c <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff ff6b 	bl	8000e4c <LCD_SendCommand>
    HAL_Delay(2);
 8000f76:	2002      	movs	r0, #2
 8000f78:	f002 fe86 	bl	8003c88 <HAL_Delay>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LCD_PrintInt>:

void LCD_PrintInt(int32_t value) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    if (value == 0) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <LCD_PrintInt+0x16>
        LCD_SendString("0    ");
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <LCD_PrintInt+0x34>)
 8000f90:	f7ff ff9a 	bl	8000ec8 <LCD_SendString>
 8000f94:	e00b      	b.n	8000fae <LCD_PrintInt+0x2e>
        return;
    }
    char buffer[12];
    sprintf(buffer, "%ld  ", (long)value);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4906      	ldr	r1, [pc, #24]	; (8000fb8 <LCD_PrintInt+0x38>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 fa48 	bl	8008434 <siprintf>
    LCD_SendString(buffer);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff8d 	bl	8000ec8 <LCD_SendString>
}
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800a04c 	.word	0x0800a04c
 8000fb8:	0800a054 	.word	0x0800a054

08000fbc <LCD_PrintAngle>:

void LCD_PrintAngle(int32_t angle) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    //angle = inconvert(angle);  // Convert to integer degrees

    if (angle < 0) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da05      	bge.n	8000fd6 <LCD_PrintAngle+0x1a>
        LCD_SendChar('-');
 8000fca:	202d      	movs	r0, #45	; 0x2d
 8000fcc:	f7ff ff5d 	bl	8000e8a <LCD_SendChar>
        angle = -angle;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	607b      	str	r3, [r7, #4]
    }
    LCD_PrintInt(angle);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffd2 	bl	8000f80 <LCD_PrintInt>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8000fec:	f240 5322 	movw	r3, #1314	; 0x522
 8000ff0:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8000ff2:	f107 021c 	add.w	r2, r7, #28
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	21d6      	movs	r1, #214	; 0xd6
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f003 fa69 	bl	80044d8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f002 fe3e 	bl	8003c88 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 800100c:	f246 0320 	movw	r3, #24608	; 0x6020
 8001010:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 8001012:	f107 0218 	add.w	r2, r7, #24
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	21d6      	movs	r1, #214	; 0xd6
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f003 fa59 	bl	80044d8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f002 fe2e 	bl	8003c88 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 800102c:	f247 0320 	movw	r3, #28704	; 0x7020
 8001030:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8001032:	f107 0214 	add.w	r2, r7, #20
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2302      	movs	r3, #2
 800103e:	213c      	movs	r1, #60	; 0x3c
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f003 fa49 	bl	80044d8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f002 fe1e 	bl	8003c88 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 800104c:	2322      	movs	r3, #34	; 0x22
 800104e:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8001050:	f107 0210 	add.w	r2, r7, #16
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	213c      	movs	r1, #60	; 0x3c
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f003 fa3a 	bl	80044d8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f002 fe0f 	bl	8003c88 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 800106a:	f640 4323 	movw	r3, #3107	; 0xc23
 800106e:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8001070:	f107 020c 	add.w	r2, r7, #12
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2302      	movs	r3, #2
 800107c:	213c      	movs	r1, #60	; 0x3c
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f003 fa2a 	bl	80044d8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8001084:	200a      	movs	r0, #10
 8001086:	f002 fdff 	bl	8003c88 <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <lsmAccRead>:
	};

	return out;
}

Vector3D lsmAccRead(I2C_HandleTypeDef*handle) {
 8001092:	b590      	push	{r4, r7, lr}
 8001094:	b08d      	sub	sp, #52	; 0x34
 8001096:	af02      	add	r7, sp, #8
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, OUT_X_L_M, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c3, LSM9DS1_MAG_ADDRESS << 1 | 0x01, buffer, sizeof(buffer), HAL_MAX_DELAY);
	printf("%d\n", buffer);
	*/

	uint8_t reg1 = OUT_X_XL | 0x80; // Enable auto-increment
 800109c:	23a8      	movs	r3, #168	; 0xa8
 800109e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data1[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, &reg1, 1, HAL_MAX_DELAY);
 80010a2:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	21d6      	movs	r1, #214	; 0xd6
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f003 fa11 	bl	80044d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_ACC_ADDRESS << 1) | 0x01, data1, 6, HAL_MAX_DELAY);
 80010b6:	f107 0218 	add.w	r2, r7, #24
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2306      	movs	r3, #6
 80010c2:	21d7      	movs	r1, #215	; 0xd7
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f003 fb1f 	bl	8004708 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t acc_x = (int16_t)(data1[1] << 8 | data1[0]);
 80010ca:	7e7b      	ldrb	r3, [r7, #25]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7e3b      	ldrb	r3, [r7, #24]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t acc_y = (int16_t)(data1[3] << 8 | data1[2]);
 80010d8:	7efb      	ldrb	r3, [r7, #27]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7ebb      	ldrb	r3, [r7, #26]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t acc_z = (int16_t)(data1[5] << 8 | data1[4]);
 80010e6:	7f7b      	ldrb	r3, [r7, #29]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7f3b      	ldrb	r3, [r7, #28]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {acc_x, acc_y, acc_z};
 80010f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001104:	617b      	str	r3, [r7, #20]
	return output;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	461c      	mov	r4, r3
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	372c      	adds	r7, #44	; 0x2c
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}

0800111e <lsmMagRead>:

Vector3D lsmMagRead(I2C_HandleTypeDef*handle) {
 800111e:	b590      	push	{r4, r7, lr}
 8001120:	b08d      	sub	sp, #52	; 0x34
 8001122:	af02      	add	r7, sp, #8
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
	uint8_t reg2 = OUT_X_L_M | 0x80; // Enable auto-increment
 8001128:	23a8      	movs	r3, #168	; 0xa8
 800112a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data2[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, &reg2, 1, HAL_MAX_DELAY);
 800112e:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	213c      	movs	r1, #60	; 0x3c
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f003 f9cb 	bl	80044d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_MAG_ADDRESS << 1) | 0x01, data2, 6, HAL_MAX_DELAY);
 8001142:	f107 0218 	add.w	r2, r7, #24
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2306      	movs	r3, #6
 800114e:	213d      	movs	r1, #61	; 0x3d
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f003 fad9 	bl	8004708 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t mag_x = (int16_t)(data2[1] << 8 | data2[0]);
 8001156:	7e7b      	ldrb	r3, [r7, #25]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	7e3b      	ldrb	r3, [r7, #24]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t mag_y = (int16_t)(data2[3] << 8 | data2[2]);
 8001164:	7efb      	ldrb	r3, [r7, #27]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7ebb      	ldrb	r3, [r7, #26]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t mag_z = (int16_t)(data2[5] << 8 | data2[4]);
 8001172:	7f7b      	ldrb	r3, [r7, #29]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7f3b      	ldrb	r3, [r7, #28]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {mag_x, mag_y, mag_z};
 8001180:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001190:	617b      	str	r3, [r7, #20]
	return output;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	461c      	mov	r4, r3
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800119e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	372c      	adds	r7, #44	; 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
	...

080011ac <sinus>:
const int32_t atan_lut[512] = { -51472, -51343, -51214, -51085, -50955, -50824, -50693, -50562, -50430, -50297, -50164, -50030, -49896, -49761, -49626, -49491, -49354, -49217, -49080, -48942, -48804, -48665, -48525, -48385, -48245, -48104, -47962, -47820, -47677, -47534, -47390, -47245, -47100, -46955, -46808, -46662, -46514, -46367, -46218, -46069, -45919, -45769, -45619, -45467, -45315, -45163, -45010, -44856, -44702, -44547, -44392, -44235, -44079, -43922, -43764, -43605, -43446, -43287, -43126, -42965, -42804, -42642, -42479, -42316, -42152, -41987, -41822, -41656, -41490, -41323, -41155, -40987, -40818, -40649, -40479, -40308, -40136, -39964, -39792, -39618, -39444, -39270, -39094, -38919, -38742, -38565, -38387, -38209, -38030, -37850, -37670, -37489, -37307, -37125, -36942, -36758, -36574, -36389, -36203, -36017, -35830, -35643, -35455, -35266, -35076, -34886, -34696, -34504, -34312, -34119, -33926, -33732, -33537, -33342, -33146, -32949, -32752, -32554, -32356, -32156, -31957, -31756, -31555, -31353, -31151, -30947, -30744, -30539, -30334, -30129, -29922, -29715, -29508, -29299, -29091, -28881, -28671, -28460, -28249, -28037, -27824, -27611, -27397, -27182, -26967, -26751, -26535, -26318, -26100, -25882, -25663, -25444, -25224, -25003, -24782, -24560, -24338, -24115, -23891, -23667, -23442, -23217, -22991, -22764, -22537, -22310, -22081, -21853, -21623, -21394, -21163, -20932, -20701, -20469, -20236, -20003, -19770, -19535, -19301, -19066, -18830, -18594, -18357, -18120, -17882, -17644, -17406, -17167, -16927, -16687, -16447, -16206, -15964, -15723, -15480, -15238, -14995, -14751, -14507, -14263, -14018, -13773, -13527, -13281, -13035, -12788, -12541, -12294, -12046, -11798, -11550, -11301, -11052, -10802, -10553, -10303, -10052, -9802, -9551, -9299, -9048, -8796, -8544, -8292, -8039, -7786, -7533, -7280, -7027, -6773, -6519, -6265, -6011, -5756, -5502, -5247, -4992, -4737, -4482, -4226, -3971, -3715, -3460, -3204, -2948, -2692, -2436, -2179, -1923, -1667, -1411, -1154, -898, -641, -385, -128, 128, 385, 641, 898, 1154, 1411, 1667, 1923, 2179, 2436, 2692, 2948, 3204, 3460, 3715, 3971, 4226, 4482, 4737, 4992, 5247, 5502, 5756, 6011, 6265, 6519, 6773, 7027, 7280, 7533, 7786, 8039, 8292, 8544, 8796, 9048, 9299, 9551, 9802, 10052, 10303, 10553, 10802, 11052, 11301, 11550, 11798, 12046, 12294, 12541, 12788, 13035, 13281, 13527, 13773, 14018, 14263, 14507, 14751, 14995, 15238, 15480, 15723, 15964, 16206, 16447, 16687, 16927, 17167, 17406, 17644, 17882, 18120, 18357, 18594, 18830, 19066, 19301, 19535, 19770, 20003, 20236, 20469, 20701, 20932, 21163, 21394, 21623, 21853, 22081, 22310, 22537, 22764, 22991, 23217, 23442, 23667, 23891, 24115, 24338, 24560, 24782, 25003, 25224, 25444, 25663, 25882, 26100, 26318, 26535, 26751, 26967, 27182, 27397, 27611, 27824, 28037, 28249, 28460, 28671, 28881, 29091, 29299, 29508, 29715, 29922, 30129, 30334, 30539, 30744, 30947, 31151, 31353, 31555, 31756, 31957, 32156, 32356, 32554, 32752, 32949, 33146, 33342, 33537, 33732, 33926, 34119, 34312, 34504, 34696, 34886, 35076, 35266, 35455, 35643, 35830, 36017, 36203, 36389, 36574, 36758, 36942, 37125, 37307, 37489, 37670, 37850, 38030, 38209, 38387, 38565, 38742, 38919, 39094, 39270, 39444, 39618, 39792, 39964, 40136, 40308, 40479, 40649, 40818, 40987, 41155, 41323, 41490, 41656, 41822, 41987, 42152, 42316, 42479, 42642, 42804, 42965, 43126, 43287, 43446, 43605, 43764, 43922, 44079, 44235, 44392, 44547, 44702, 44856, 45010, 45163, 45315, 45467, 45619, 45769, 45919, 46069, 46218, 46367, 46514, 46662, 46808, 46955, 47100, 47245, 47390, 47534, 47677, 47820, 47962, 48104, 48245, 48385, 48525, 48665, 48804, 48942, 49080, 49217, 49354, 49491, 49626, 49761, 49896, 50030, 50164, 50297, 50430, 50562, 50693, 50824, 50955, 51085, 51214, 51343, 51472 };
const int32_t asin_lut[512] = { -102944, -97149, -94746, -92901, -91343, -89970, -88727, -87583, -86517, -85515, -84566, -83662, -82798, -81969, -81170, -80398, -79651, -78926, -78221, -77535, -76867, -76214, -75575, -74951, -74339, -73740, -73151, -72573, -72006, -71447, -70898, -70357, -69824, -69299, -68782, -68271, -67767, -67270, -66778, -66293, -65813, -65339, -64870, -64406, -63947, -63493, -63043, -62597, -62156, -61719, -61286, -60857, -60431, -60009, -59591, -59176, -58764, -58355, -57950, -57548, -57148, -56752, -56358, -55967, -55579, -55193, -54810, -54429, -54051, -53675, -53301, -52929, -52560, -52193, -51828, -51465, -51104, -50745, -50388, -50032, -49679, -49327, -48977, -48629, -48283, -47938, -47595, -47253, -46913, -46575, -46238, -45902, -45568, -45235, -44904, -44574, -44245, -43918, -43592, -43267, -42944, -42622, -42301, -41981, -41662, -41344, -41028, -40713, -40398, -40085, -39773, -39462, -39152, -38842, -38534, -38227, -37921, -37616, -37311, -37008, -36705, -36403, -36102, -35802, -35503, -35205, -34907, -34611, -34315, -34019, -33725, -33431, -33138, -32846, -32554, -32264, -31973, -31684, -31395, -31107, -30819, -30533, -30246, -29961, -29676, -29391, -29108, -28824, -28542, -28260, -27978, -27697, -27417, -27137, -26857, -26579, -26300, -26022, -25745, -25468, -25192, -24916, -24640, -24365, -24091, -23817, -23543, -23270, -22997, -22725, -22453, -22181, -21910, -21639, -21369, -21099, -20829, -20560, -20291, -20022, -19754, -19486, -19218, -18951, -18684, -18417, -18151, -17885, -17619, -17354, -17089, -16824, -16560, -16295, -16031, -15768, -15504, -15241, -14978, -14715, -14453, -14191, -13929, -13667, -13405, -13144, -12883, -12622, -12361, -12101, -11840, -11580, -11320, -11060, -10801, -10541, -10282, -10023, -9764, -9505, -9247, -8988, -8730, -8472, -8213, -7956, -7698, -7440, -7182, -6925, -6667, -6410, -6153, -5896, -5639, -5382, -5125, -4868, -4612, -4355, -4099, -3842, -3586, -3329, -3073, -2817, -2561, -2304, -2048, -1792, -1536, -1280, -1024, -768, -512, -256, 0, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2561, 2817, 3073, 3329, 3586, 3842, 4099, 4355, 4612, 4868, 5125, 5382, 5639, 5896, 6153, 6410, 6667, 6925, 7182, 7440, 7698, 7956, 8213, 8472, 8730, 8988, 9247, 9505, 9764, 10023, 10282, 10541, 10801, 11060, 11320, 11580, 11840, 12101, 12361, 12622, 12883, 13144, 13405, 13667, 13929, 14191, 14453, 14715, 14978, 15241, 15504, 15768, 16031, 16295, 16560, 16824, 17089, 17354, 17619, 17885, 18151, 18417, 18684, 18951, 19218, 19486, 19754, 20022, 20291, 20560, 20829, 21099, 21369, 21639, 21910, 22181, 22453, 22725, 22997, 23270, 23543, 23817, 24091, 24365, 24640, 24916, 25192, 25468, 25745, 26022, 26300, 26579, 26857, 27137, 27417, 27697, 27978, 28260, 28542, 28824, 29108, 29391, 29676, 29961, 30246, 30533, 30819, 31107, 31395, 31684, 31973, 32264, 32554, 32846, 33138, 33431, 33725, 34019, 34315, 34611, 34907, 35205, 35503, 35802, 36102, 36403, 36705, 37008, 37311, 37616, 37921, 38227, 38534, 38842, 39152, 39462, 39773, 40085, 40398, 40713, 41028, 41344, 41662, 41981, 42301, 42622, 42944, 43267, 43592, 43918, 44245, 44574, 44904, 45235, 45568, 45902, 46238, 46575, 46913, 47253, 47595, 47938, 48283, 48629, 48977, 49327, 49679, 50032, 50388, 50745, 51104, 51465, 51828, 52193, 52560, 52929, 53301, 53675, 54051, 54429, 54810, 55193, 55579, 55967, 56358, 56752, 57148, 57548, 57950, 58355, 58764, 59176, 59591, 60009, 60431, 60857, 61286, 61719, 62156, 62597, 63043, 63493, 63947, 64406, 64870, 65339, 65813, 66293, 66778, 67270, 67767, 68271, 68782, 69299, 69824, 70357, 70898, 71447, 72006, 72573, 73151, 73740, 74339, 74951, 75575, 76214, 76867, 77535, 78221, 78926, 79651, 80398, 81170, 81969, 82798, 83662, 84566, 85515, 86517, 87583, 88727, 89970, 91343, 92901, 94746, 97149};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 80011b4:	e003      	b.n	80011be <sinus+0x12>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dbf8      	blt.n	80011b6 <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	425a      	negs	r2, r3
 80011c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011cc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80011d0:	bf58      	it	pl
 80011d2:	4253      	negpl	r3, r2
 80011d4:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <sinus+0x44>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011de:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fad3 	bl	800078c <expand>
 80011e6:	4603      	mov	r3, r0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	0800a120 	.word	0x0800a120

080011f4 <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001202:	425a      	negs	r2, r3
 8001204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001208:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800120c:	bf58      	it	pl
 800120e:	4253      	negpl	r3, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffcb 	bl	80011ac <sinus>
 8001216:	4603      	mov	r3, r0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8001220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 800122a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800122e:	f7ff fab9 	bl	80007a4 <convert>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800123a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800123e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001242:	2002      	movs	r0, #2
 8001244:	f7ff faae 	bl	80007a4 <convert>
 8001248:	4603      	mov	r3, r0
 800124a:	461c      	mov	r4, r3
 800124c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001250:	4622      	mov	r2, r4
 8001252:	462b      	mov	r3, r5
 8001254:	1891      	adds	r1, r2, r2
 8001256:	6039      	str	r1, [r7, #0]
 8001258:	415b      	adcs	r3, r3
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001260:	1912      	adds	r2, r2, r4
 8001262:	eb45 0303 	adc.w	r3, r5, r3
 8001266:	f04f 0000 	mov.w	r0, #0
 800126a:	f04f 0100 	mov.w	r1, #0
 800126e:	0199      	lsls	r1, r3, #6
 8001270:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001274:	0190      	lsls	r0, r2, #6
 8001276:	1812      	adds	r2, r2, r0
 8001278:	eb41 0303 	adc.w	r3, r1, r3
 800127c:	f04f 0000 	mov.w	r0, #0
 8001280:	f04f 0100 	mov.w	r1, #0
 8001284:	0159      	lsls	r1, r3, #5
 8001286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800128a:	0150      	lsls	r0, r2, #5
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	1b12      	subs	r2, r2, r4
 8001292:	eb63 0305 	sbc.w	r3, r3, r5
 8001296:	f04f 0000 	mov.w	r0, #0
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	0159      	lsls	r1, r3, #5
 80012a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012a4:	0150      	lsls	r0, r2, #5
 80012a6:	eb12 0800 	adds.w	r8, r2, r0
 80012aa:	eb43 0901 	adc.w	r9, r3, r1
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80012ba:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80012be:	ea4f 4329 	mov.w	r3, r9, asr #16
 80012c2:	4613      	mov	r3, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ca:	4650      	mov	r0, sl
 80012cc:	4659      	mov	r1, fp
 80012ce:	f7ff f80f 	bl	80002f0 <__aeabi_ldivmod>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4613      	mov	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	461a      	mov	r2, r3
 80012e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ea:	fb02 f501 	mul.w	r5, r2, r1
 80012ee:	fb00 f403 	mul.w	r4, r0, r3
 80012f2:	442c      	add	r4, r5
 80012f4:	fba0 2302 	umull	r2, r3, r0, r2
 80012f8:	18e1      	adds	r1, r4, r3
 80012fa:	460b      	mov	r3, r1
 80012fc:	f04f 0000 	mov.w	r0, #0
 8001300:	f04f 0100 	mov.w	r1, #0
 8001304:	0c10      	lsrs	r0, r2, #16
 8001306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800130a:	1419      	asrs	r1, r3, #16
 800130c:	4603      	mov	r3, r0
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fa54 	bl	80007bc <inconvert>
 8001314:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f7ff ff48 	bl	80011ac <sinus>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001328 <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8001328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8001332:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001336:	f7ff fa35 	bl	80007a4 <convert>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001342:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001346:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff fa2a 	bl	80007a4 <convert>
 8001350:	4603      	mov	r3, r0
 8001352:	461c      	mov	r4, r3
 8001354:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001358:	4622      	mov	r2, r4
 800135a:	462b      	mov	r3, r5
 800135c:	1891      	adds	r1, r2, r2
 800135e:	6039      	str	r1, [r7, #0]
 8001360:	415b      	adcs	r3, r3
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001368:	1912      	adds	r2, r2, r4
 800136a:	eb45 0303 	adc.w	r3, r5, r3
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	0199      	lsls	r1, r3, #6
 8001378:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800137c:	0190      	lsls	r0, r2, #6
 800137e:	1812      	adds	r2, r2, r0
 8001380:	eb41 0303 	adc.w	r3, r1, r3
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	0159      	lsls	r1, r3, #5
 800138e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001392:	0150      	lsls	r0, r2, #5
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	1b12      	subs	r2, r2, r4
 800139a:	eb63 0305 	sbc.w	r3, r3, r5
 800139e:	f04f 0000 	mov.w	r0, #0
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	0159      	lsls	r1, r3, #5
 80013a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ac:	0150      	lsls	r0, r2, #5
 80013ae:	eb12 0800 	adds.w	r8, r2, r0
 80013b2:	eb43 0901 	adc.w	r9, r3, r1
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80013c2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80013c6:	ea4f 4329 	mov.w	r3, r9, asr #16
 80013ca:	4613      	mov	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013d2:	4650      	mov	r0, sl
 80013d4:	4659      	mov	r1, fp
 80013d6:	f7fe ff8b 	bl	80002f0 <__aeabi_ldivmod>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4613      	mov	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4618      	mov	r0, r3
 80013e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	461a      	mov	r2, r3
 80013ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013f2:	fb02 f501 	mul.w	r5, r2, r1
 80013f6:	fb00 f403 	mul.w	r4, r0, r3
 80013fa:	442c      	add	r4, r5
 80013fc:	fba0 2302 	umull	r2, r3, r0, r2
 8001400:	18e1      	adds	r1, r4, r3
 8001402:	460b      	mov	r3, r1
 8001404:	f04f 0000 	mov.w	r0, #0
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	0c10      	lsrs	r0, r2, #16
 800140e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001412:	1419      	asrs	r1, r3, #16
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f9d0 	bl	80007bc <inconvert>
 800141c:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 800141e:	6938      	ldr	r0, [r7, #16]
 8001420:	f7ff fee8 	bl	80011f4 <cosinus>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001430 <normalizeTheta>:

int32_t HVs[104] = {
0x00000000, 0xFFEACCCD, 0x00000000, 0xFFD8AE14, 0xFFF663D7, 0x00000000, 0x00112666, 0xFFF74A3D, 0xFFF9AE14, 0x00000000, 0x00096B85, 0x0003E8F6, 0x000AAB85, 0xFFFFC7AE, 0x00000000, 0xFFFCF333, 0x000B87AE, 0x000968F6, 0x00086E14, 0xFFFFA666, 0x00000000, 0xFFF2C51F, 0xFFE5199A, 0xFFFE028F, 0xFFFDD1EC, 0xFFFF87AE, 0x0001028F, 0x00000000, 0x0018D47B, 0x0008B0A4, 0x00020CCD, 0x0003B333, 0xFFFB0F5C, 0xFFFFC28F, 0x00002148, 0x00000000, 0xFFF2970A, 0x00059C29, 0x000C6E14, 0x000AB0A4, 0x00017AE1, 0xFFFDF0A4, 0x00010000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

int32_t normalizeTheta(int32_t theta) {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    int32_t result;
    if ((theta > -1) && (theta<1)) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db05      	blt.n	800144a <normalizeTheta+0x1a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc02      	bgt.n	800144a <normalizeTheta+0x1a>
        result = 1;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e00c      	b.n	8001464 <normalizeTheta+0x34>
    }
    else {
    	if ((theta < ((180 << 16) + 1)) && (theta > ((179 << 16) + 65535))) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8001450:	dc06      	bgt.n	8001460 <normalizeTheta+0x30>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8001458:	db02      	blt.n	8001460 <normalizeTheta+0x30>
            result = (179<<16)+65535;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <normalizeTheta+0x44>)
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e001      	b.n	8001464 <normalizeTheta+0x34>
        }
        else {
            result = theta;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	60fb      	str	r3, [r7, #12]
        }
    }
    return result;
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	00b3ffff 	.word	0x00b3ffff

08001478 <toRad>:

int32_t toRad(int32_t angledeg) {
 8001478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
    return DIV(MULT(angledeg,PI),180<<16);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	461c      	mov	r4, r3
 8001486:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800148a:	4622      	mov	r2, r4
 800148c:	462b      	mov	r3, r5
 800148e:	1891      	adds	r1, r2, r2
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	415b      	adcs	r3, r3
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800149a:	1912      	adds	r2, r2, r4
 800149c:	eb45 0303 	adc.w	r3, r5, r3
 80014a0:	f04f 0000 	mov.w	r0, #0
 80014a4:	f04f 0100 	mov.w	r1, #0
 80014a8:	0199      	lsls	r1, r3, #6
 80014aa:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80014ae:	0190      	lsls	r0, r2, #6
 80014b0:	1812      	adds	r2, r2, r0
 80014b2:	eb41 0303 	adc.w	r3, r1, r3
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0159      	lsls	r1, r3, #5
 80014c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c4:	0150      	lsls	r0, r2, #5
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	1b12      	subs	r2, r2, r4
 80014cc:	eb63 0305 	sbc.w	r3, r3, r5
 80014d0:	f04f 0000 	mov.w	r0, #0
 80014d4:	f04f 0100 	mov.w	r1, #0
 80014d8:	0159      	lsls	r1, r3, #5
 80014da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014de:	0150      	lsls	r0, r2, #5
 80014e0:	eb12 0800 	adds.w	r8, r2, r0
 80014e4:	eb43 0901 	adc.w	r9, r3, r1
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80014f4:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80014f8:	ea4f 4329 	mov.w	r3, r9, asr #16
 80014fc:	4613      	mov	r3, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001504:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001508:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 800150c:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	4650      	mov	r0, sl
 8001516:	4659      	mov	r1, fp
 8001518:	f7fe feea 	bl	80002f0 <__aeabi_ldivmod>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4613      	mov	r3, r2
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800152c <magnet>:

void magnet(int32_t r, int32_t theta, int32_t phi, int32_t days, int32_t buffer[3]) {
 800152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001530:	b0b9      	sub	sp, #228	; 0xe4
 8001532:	af00      	add	r7, sp, #0
 8001534:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001536:	63b9      	str	r1, [r7, #56]	; 0x38
 8001538:	637a      	str	r2, [r7, #52]	; 0x34
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
 800153c:	466b      	mov	r3, sp
 800153e:	60bb      	str	r3, [r7, #8]
	 * Input2: 16.16 latitude in degrees, where 0 is equator, 90 is north pole and -90 is south pole
	 * Input3: 16.16 longitude in degrees, ranging from -180 to 180, where 0 is the prime meridian
	 * Input4: 16.16 decimal days since 2000
	 * Input5: 3-array of int32_t to be changed to Br, Bt and Bp respectively, in Rasmus units
	 */
	printf("Theta input: ");
 8001540:	4892      	ldr	r0, [pc, #584]	; (800178c <magnet+0x260>)
 8001542:	f006 fed3 	bl	80082ec <iprintf>
	printFix(theta);
 8001546:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001548:	f7ff f900 	bl	800074c <printFix>
	printf("\r\n");
 800154c:	4890      	ldr	r0, [pc, #576]	; (8001790 <magnet+0x264>)
 800154e:	f006 ff69 	bl	8008424 <puts>

	printf("Phi input: ");
 8001552:	4890      	ldr	r0, [pc, #576]	; (8001794 <magnet+0x268>)
 8001554:	f006 feca 	bl	80082ec <iprintf>
	printFix(phi);
 8001558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800155a:	f7ff f8f7 	bl	800074c <printFix>
	printf("\r\n");
 800155e:	488c      	ldr	r0, [pc, #560]	; (8001790 <magnet+0x264>)
 8001560:	f006 ff60 	bl	8008424 <puts>

	printf("Normalized theta: ");
 8001564:	488c      	ldr	r0, [pc, #560]	; (8001798 <magnet+0x26c>)
 8001566:	f006 fec1 	bl	80082ec <iprintf>
    theta = normalizeTheta(theta);
 800156a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800156c:	f7ff ff60 	bl	8001430 <normalizeTheta>
 8001570:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 8001572:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001574:	f7ff f8ea 	bl	800074c <printFix>
    printf("\r\n");
 8001578:	4885      	ldr	r0, [pc, #532]	; (8001790 <magnet+0x264>)
 800157a:	f006 ff53 	bl	8008424 <puts>

    printf("Theta radians: ");
 800157e:	4887      	ldr	r0, [pc, #540]	; (800179c <magnet+0x270>)
 8001580:	f006 feb4 	bl	80082ec <iprintf>
    theta = toRad(5898240-theta);
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	f5c3 03b4 	rsb	r3, r3, #5898240	; 0x5a0000
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff74 	bl	8001478 <toRad>
 8001590:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 8001592:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001594:	f7ff f8da 	bl	800074c <printFix>
    printf("\r\n");
 8001598:	487d      	ldr	r0, [pc, #500]	; (8001790 <magnet+0x264>)
 800159a:	f006 ff43 	bl	8008424 <puts>

    printf("Phi radians: ");
 800159e:	4880      	ldr	r0, [pc, #512]	; (80017a0 <magnet+0x274>)
 80015a0:	f006 fea4 	bl	80082ec <iprintf>
    phi = toRad(phi);
 80015a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015a6:	f7ff ff67 	bl	8001478 <toRad>
 80015aa:	6378      	str	r0, [r7, #52]	; 0x34
    printFix(phi);
 80015ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015ae:	f7ff f8cd 	bl	800074c <printFix>
    printf("\r\n");
 80015b2:	4877      	ldr	r0, [pc, #476]	; (8001790 <magnet+0x264>)
 80015b4:	f006 ff36 	bl	8008424 <puts>
    int32_t a = 417542963;
 80015b8:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <magnet+0x278>)
 80015ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int Nmodel = 13; // hard code
 80015be:	230d      	movs	r3, #13
 80015c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int Nmax = Nmodel * (Nmodel + 3 ) / 2;
 80015c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015c8:	3303      	adds	r3, #3
 80015ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	0fda      	lsrs	r2, r3, #31
 80015d4:	4413      	add	r3, r2
 80015d6:	105b      	asrs	r3, r3, #1
 80015d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    int32_t g[Nmodel][Nmodel+1];
 80015dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015e0:	f103 0c01 	add.w	ip, r3, #1
 80015e4:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 80015e8:	f10c 33ff 	add.w	r3, ip, #4294967295
 80015ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015f0:	4663      	mov	r3, ip
 80015f2:	461a      	mov	r2, r3
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f04f 0100 	mov.w	r1, #0
 8001600:	0159      	lsls	r1, r3, #5
 8001602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001606:	0150      	lsls	r0, r2, #5
 8001608:	4663      	mov	r3, ip
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4633      	mov	r3, r6
 8001610:	3b01      	subs	r3, #1
 8001612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001616:	4663      	mov	r3, ip
 8001618:	4618      	mov	r0, r3
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	4633      	mov	r3, r6
 8001620:	461a      	mov	r2, r3
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	fb02 f501 	mul.w	r5, r2, r1
 800162a:	fb00 f403 	mul.w	r4, r0, r3
 800162e:	442c      	add	r4, r5
 8001630:	fba0 0102 	umull	r0, r1, r0, r2
 8001634:	1863      	adds	r3, r4, r1
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	014b      	lsls	r3, r1, #5
 8001642:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001646:	0142      	lsls	r2, r0, #5
 8001648:	4663      	mov	r3, ip
 800164a:	4618      	mov	r0, r3
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	4633      	mov	r3, r6
 8001652:	461a      	mov	r2, r3
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	fb02 f501 	mul.w	r5, r2, r1
 800165c:	fb00 f403 	mul.w	r4, r0, r3
 8001660:	442c      	add	r4, r5
 8001662:	fba0 0102 	umull	r0, r1, r0, r2
 8001666:	1863      	adds	r3, r4, r1
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	014b      	lsls	r3, r1, #5
 8001674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001678:	0142      	lsls	r2, r0, #5
 800167a:	4662      	mov	r2, ip
 800167c:	607e      	str	r6, [r7, #4]
 800167e:	4633      	mov	r3, r6
 8001680:	fb03 f302 	mul.w	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	3307      	adds	r3, #7
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	ebad 0d03 	sub.w	sp, sp, r3
 8001690:	466b      	mov	r3, sp
 8001692:	3303      	adds	r3, #3
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t h[Nmodel][Nmodel+1];
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016a0:	1c5e      	adds	r6, r3, #1
 80016a2:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 80016a6:	1e73      	subs	r3, r6, #1
 80016a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ac:	4633      	mov	r3, r6
 80016ae:	461a      	mov	r2, r3
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	f04f 0000 	mov.w	r0, #0
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	0159      	lsls	r1, r3, #5
 80016be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c2:	0150      	lsls	r0, r2, #5
 80016c4:	4633      	mov	r3, r6
 80016c6:	009a      	lsls	r2, r3, #2
 80016c8:	60fa      	str	r2, [r7, #12]
 80016ca:	4622      	mov	r2, r4
 80016cc:	1e53      	subs	r3, r2, #1
 80016ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016d2:	4633      	mov	r3, r6
 80016d4:	4618      	mov	r0, r3
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	613c      	str	r4, [r7, #16]
 80016dc:	4623      	mov	r3, r4
 80016de:	461a      	mov	r2, r3
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	fb02 f501 	mul.w	r5, r2, r1
 80016e8:	fb00 f403 	mul.w	r4, r0, r3
 80016ec:	442c      	add	r4, r5
 80016ee:	fba0 0102 	umull	r0, r1, r0, r2
 80016f2:	1863      	adds	r3, r4, r1
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	014b      	lsls	r3, r1, #5
 8001700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001704:	0142      	lsls	r2, r0, #5
 8001706:	4633      	mov	r3, r6
 8001708:	4618      	mov	r0, r3
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	fb02 f501 	mul.w	r5, r2, r1
 800171a:	fb00 f403 	mul.w	r4, r0, r3
 800171e:	442c      	add	r4, r5
 8001720:	fba0 0102 	umull	r0, r1, r0, r2
 8001724:	1863      	adds	r3, r4, r1
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	014b      	lsls	r3, r1, #5
 8001732:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001736:	0142      	lsls	r2, r0, #5
 8001738:	4632      	mov	r2, r6
 800173a:	693c      	ldr	r4, [r7, #16]
 800173c:	4623      	mov	r3, r4
 800173e:	fb03 f302 	mul.w	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	3307      	adds	r3, #7
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	ebad 0d03 	sub.w	sp, sp, r3
 800174e:	466b      	mov	r3, sp
 8001750:	3303      	adds	r3, #3
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(g, 0, sizeof(g));
 8001758:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800175c:	4662      	mov	r2, ip
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	fb03 f302 	mul.w	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
 8001768:	2100      	movs	r1, #0
 800176a:	f006 fdb7 	bl	80082dc <memset>
    memset(h, 0, sizeof(h));
 800176e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001770:	4632      	mov	r2, r6
 8001772:	4623      	mov	r3, r4
 8001774:	fb03 f302 	mul.w	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	461a      	mov	r2, r3
 800177c:	2100      	movs	r1, #0
 800177e:	f006 fdad 	bl	80082dc <memset>


    int i;
    for (i = 0; i < Nmax; i++) { // 0 to 103
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001788:	e0a8      	b.n	80018dc <magnet+0x3b0>
 800178a:	bf00      	nop
 800178c:	0800a05c 	.word	0x0800a05c
 8001790:	0800a06c 	.word	0x0800a06c
 8001794:	0800a070 	.word	0x0800a070
 8001798:	0800a07c 	.word	0x0800a07c
 800179c:	0800a090 	.word	0x0800a090
 80017a0:	0800a0a0 	.word	0x0800a0a0
 80017a4:	18e33333 	.word	0x18e33333
        g[Ns[i]-1][Ms[i]] = (Gs[i] + MULT(GVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2; // 360 til 16.16
 80017a8:	4adc      	ldr	r2, [pc, #880]	; (8001b1c <magnet+0x5f0>)
 80017aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017ae:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80017b2:	4adb      	ldr	r2, [pc, #876]	; (8001b20 <magnet+0x5f4>)
 80017b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	461c      	mov	r4, r3
 80017be:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	461a      	mov	r2, r3
 80017c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ca:	ea4f 4922 	mov.w	r9, r2, asr #16
 80017ce:	ea4f 4802 	mov.w	r8, r2, lsl #16
 80017d2:	4ad4      	ldr	r2, [pc, #848]	; (8001b24 <magnet+0x5f8>)
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	4640      	mov	r0, r8
 80017da:	4649      	mov	r1, r9
 80017dc:	f7fe fd88 	bl	80002f0 <__aeabi_ldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4613      	mov	r3, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ec:	fb02 f005 	mul.w	r0, r2, r5
 80017f0:	fb04 f103 	mul.w	r1, r4, r3
 80017f4:	4401      	add	r1, r0
 80017f6:	fba4 2302 	umull	r2, r3, r4, r2
 80017fa:	4419      	add	r1, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	0c10      	lsrs	r0, r2, #16
 8001808:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800180c:	1419      	asrs	r1, r3, #16
 800180e:	4603      	mov	r3, r0
 8001810:	4433      	add	r3, r6
 8001812:	1c99      	adds	r1, r3, #2
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089d      	lsrs	r5, r3, #2
 8001818:	4ac3      	ldr	r2, [pc, #780]	; (8001b28 <magnet+0x5fc>)
 800181a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	1e5c      	subs	r4, r3, #1
 8001824:	4ac1      	ldr	r2, [pc, #772]	; (8001b2c <magnet+0x600>)
 8001826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800182a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800182e:	1089      	asrs	r1, r1, #2
 8001830:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001834:	fb04 f305 	mul.w	r3, r4, r5
 8001838:	4403      	add	r3, r0
 800183a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        h[Ns[i]-1][Ms[i]] = (Hs[i] + MULT(HVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2;
 800183e:	4abc      	ldr	r2, [pc, #752]	; (8001b30 <magnet+0x604>)
 8001840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001844:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8001848:	4aba      	ldr	r2, [pc, #744]	; (8001b34 <magnet+0x608>)
 800184a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	461c      	mov	r4, r3
 8001854:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185a:	461a      	mov	r2, r3
 800185c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001860:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001864:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001868:	4aae      	ldr	r2, [pc, #696]	; (8001b24 <magnet+0x5f8>)
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	4650      	mov	r0, sl
 8001870:	4659      	mov	r1, fp
 8001872:	f7fe fd3d 	bl	80002f0 <__aeabi_ldivmod>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4613      	mov	r3, r2
 800187c:	461a      	mov	r2, r3
 800187e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001882:	fb02 f005 	mul.w	r0, r2, r5
 8001886:	fb04 f103 	mul.w	r1, r4, r3
 800188a:	4401      	add	r1, r0
 800188c:	fba4 2302 	umull	r2, r3, r4, r2
 8001890:	4419      	add	r1, r3
 8001892:	460b      	mov	r3, r1
 8001894:	f04f 0000 	mov.w	r0, #0
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	0c10      	lsrs	r0, r2, #16
 800189e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80018a2:	1419      	asrs	r1, r3, #16
 80018a4:	4603      	mov	r3, r0
 80018a6:	4433      	add	r3, r6
 80018a8:	1c99      	adds	r1, r3, #2
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	089d      	lsrs	r5, r3, #2
 80018ae:	4a9e      	ldr	r2, [pc, #632]	; (8001b28 <magnet+0x5fc>)
 80018b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	1e5c      	subs	r4, r3, #1
 80018ba:	4a9c      	ldr	r2, [pc, #624]	; (8001b2c <magnet+0x600>)
 80018bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c4:	1089      	asrs	r1, r1, #2
 80018c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80018c8:	fb04 f305 	mul.w	r3, r4, r5
 80018cc:	4403      	add	r3, r0
 80018ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < Nmax; i++) { // 0 to 103
 80018d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018d6:	3301      	adds	r3, #1
 80018d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80018e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f6ff af5f 	blt.w	80017a8 <magnet+0x27c>
    }

    int32_t Bt = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int32_t Br = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int32_t Bp = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    int32_t P11 = 1<<16;
 80018fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    int32_t P10 = 1<<16;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int32_t dP11 = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t dP10 = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    int32_t K;

    int16_t m;
    int16_t n;

    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 8001918:	2300      	movs	r3, #0
 800191a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800191e:	f000 bc99 	b.w	8002254 <magnet+0xd28>
        for (n = 1; n <= Nmodel; n++) {
 8001922:	2301      	movs	r3, #1
 8001924:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001928:	f000 bc86 	b.w	8002238 <magnet+0xd0c>
            if ( m <= n ) {
 800192c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001930:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001934:	429a      	cmp	r2, r3
 8001936:	f300 8478 	bgt.w	800222a <magnet+0xcfe>
                if (m == n) {
 800193a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800193e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001942:	429a      	cmp	r2, r3
 8001944:	d175      	bne.n	8001a32 <magnet+0x506>
                    P2 = MULT(sinrad(theta), P11);
 8001946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001948:	f7ff fc6a 	bl	8001220 <sinrad>
 800194c:	4603      	mov	r3, r0
 800194e:	4618      	mov	r0, r3
 8001950:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001958:	461a      	mov	r2, r3
 800195a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800195e:	fb02 f501 	mul.w	r5, r2, r1
 8001962:	fb00 f403 	mul.w	r4, r0, r3
 8001966:	442c      	add	r4, r5
 8001968:	fba0 2302 	umull	r2, r3, r0, r2
 800196c:	18e1      	adds	r1, r4, r3
 800196e:	460b      	mov	r3, r1
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	0c10      	lsrs	r0, r2, #16
 800197a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800197e:	1419      	asrs	r1, r3, #16
 8001980:	4603      	mov	r3, r0
 8001982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    dP2 = MULT(sinrad(theta), dP11) + MULT(cosrad(theta), P11);
 8001986:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001988:	f7ff fc4a 	bl	8001220 <sinrad>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001998:	461a      	mov	r2, r3
 800199a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800199e:	fb02 f501 	mul.w	r5, r2, r1
 80019a2:	fb00 f403 	mul.w	r4, r0, r3
 80019a6:	442c      	add	r4, r5
 80019a8:	fba0 2302 	umull	r2, r3, r0, r2
 80019ac:	18e1      	adds	r1, r4, r3
 80019ae:	460b      	mov	r3, r1
 80019b0:	f04f 0000 	mov.w	r0, #0
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	0c10      	lsrs	r0, r2, #16
 80019ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80019be:	1419      	asrs	r1, r3, #16
 80019c0:	4606      	mov	r6, r0
 80019c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019c4:	f7ff fcb0 	bl	8001328 <cosrad>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019d0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80019d4:	4608      	mov	r0, r1
 80019d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80019da:	fb00 f503 	mul.w	r5, r0, r3
 80019de:	fb02 f401 	mul.w	r4, r2, r1
 80019e2:	442c      	add	r4, r5
 80019e4:	fba2 2300 	umull	r2, r3, r2, r0
 80019e8:	18e1      	adds	r1, r4, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0c10      	lsrs	r0, r2, #16
 80019f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80019fa:	1419      	asrs	r1, r3, #16
 80019fc:	4603      	mov	r3, r0
 80019fe:	4433      	add	r3, r6
 8001a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    P11 = P2;
 8001a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    P10 = P11;
 8001a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    P20 = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    dP11 = dP2;
 8001a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    dP10 = dP11;
 8001a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    dP20 = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a30:	e1b1      	b.n	8001d96 <magnet+0x86a>
                } else {
                    if (n == 1) {
 8001a32:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d17e      	bne.n	8001b38 <magnet+0x60c>
                        P2 = MULT(cosrad(theta), P10);
 8001a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a3c:	f7ff fc74 	bl	8001328 <cosrad>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4618      	mov	r0, r3
 8001a44:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a52:	fb02 f501 	mul.w	r5, r2, r1
 8001a56:	fb00 f403 	mul.w	r4, r0, r3
 8001a5a:	442c      	add	r4, r5
 8001a5c:	fba0 2302 	umull	r2, r3, r0, r2
 8001a60:	18e1      	adds	r1, r4, r3
 8001a62:	460b      	mov	r3, r1
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	0c10      	lsrs	r0, r2, #16
 8001a6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a72:	1419      	asrs	r1, r3, #16
 8001a74:	4603      	mov	r3, r0
 8001a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10);
 8001a7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a7c:	f7ff fc54 	bl	8001328 <cosrad>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001a88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a92:	fb02 f501 	mul.w	r5, r2, r1
 8001a96:	fb00 f403 	mul.w	r4, r0, r3
 8001a9a:	442c      	add	r4, r5
 8001a9c:	fba0 2302 	umull	r2, r3, r0, r2
 8001aa0:	18e1      	adds	r1, r4, r3
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0c10      	lsrs	r0, r2, #16
 8001aae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ab2:	1419      	asrs	r1, r3, #16
 8001ab4:	4606      	mov	r6, r0
 8001ab6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ab8:	f7ff fbb2 	bl	8001220 <sinrad>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ac4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ac8:	4608      	mov	r0, r1
 8001aca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ace:	fb00 f503 	mul.w	r5, r0, r3
 8001ad2:	fb02 f401 	mul.w	r4, r2, r1
 8001ad6:	442c      	add	r4, r5
 8001ad8:	fba2 2300 	umull	r2, r3, r2, r0
 8001adc:	18e1      	adds	r1, r4, r3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0c10      	lsrs	r0, r2, #16
 8001aea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001aee:	1419      	asrs	r1, r3, #16
 8001af0:	4603      	mov	r3, r0
 8001af2:	1af3      	subs	r3, r6, r3
 8001af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001b10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b18:	e13d      	b.n	8001d96 <magnet+0x86a>
 8001b1a:	bf00      	nop
 8001b1c:	20000340 	.word	0x20000340
 8001b20:	200004e0 	.word	0x200004e0
 8001b24:	016d0000 	.word	0x016d0000
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	200001a0 	.word	0x200001a0
 8001b30:	20000680 	.word	0x20000680
 8001b34:	20000820 	.word	0x20000820
                    } else {
                    	int32_t nm1 = convert(n-1);           // 16.16
 8001b38:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fe30 	bl	80007a4 <convert>
 8001b44:	67b8      	str	r0, [r7, #120]	; 0x78
                    	int32_t mfix = convert(m);
 8001b46:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fe2a 	bl	80007a4 <convert>
 8001b50:	6778      	str	r0, [r7, #116]	; 0x74
                    	int32_t num  = FIX16_MULT(nm1,nm1) - FIX16_MULT(mfix,mfix);
 8001b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b54:	4618      	mov	r0, r3
 8001b56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b62:	fb02 f501 	mul.w	r5, r2, r1
 8001b66:	fb00 f403 	mul.w	r4, r0, r3
 8001b6a:	442c      	add	r4, r5
 8001b6c:	fba0 2302 	umull	r2, r3, r0, r2
 8001b70:	18e1      	adds	r1, r4, r3
 8001b72:	460b      	mov	r3, r1
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	0c10      	lsrs	r0, r2, #16
 8001b7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b82:	1419      	asrs	r1, r3, #16
 8001b84:	4606      	mov	r6, r0
 8001b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b88:	461a      	mov	r2, r3
 8001b8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b8e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b90:	4608      	mov	r0, r1
 8001b92:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b96:	fb00 f503 	mul.w	r5, r0, r3
 8001b9a:	fb02 f401 	mul.w	r4, r2, r1
 8001b9e:	442c      	add	r4, r5
 8001ba0:	fba2 2300 	umull	r2, r3, r2, r0
 8001ba4:	18e1      	adds	r1, r4, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	0c10      	lsrs	r0, r2, #16
 8001bb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001bb6:	1419      	asrs	r1, r3, #16
 8001bb8:	4603      	mov	r3, r0
 8001bba:	1af3      	subs	r3, r6, r3
 8001bbc:	673b      	str	r3, [r7, #112]	; 0x70
                    	int32_t den  = FIX16_MULT(convert(2*n)-convert(1),
 8001bbe:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fded 	bl	80007a4 <convert>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7fe fde9 	bl	80007a4 <convert>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	1ae3      	subs	r3, r4, r3
 8001bd6:	461c      	mov	r4, r3
 8001bd8:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001bdc:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fdde 	bl	80007a4 <convert>
 8001be8:	4606      	mov	r6, r0
 8001bea:	2003      	movs	r0, #3
 8001bec:	f7fe fdda 	bl	80007a4 <convert>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	1af3      	subs	r3, r6, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001bfa:	fb02 f005 	mul.w	r0, r2, r5
 8001bfe:	fb04 f103 	mul.w	r1, r4, r3
 8001c02:	4401      	add	r1, r0
 8001c04:	fba4 2302 	umull	r2, r3, r4, r2
 8001c08:	4419      	add	r1, r3
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	0c10      	lsrs	r0, r2, #16
 8001c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c1a:	1419      	asrs	r1, r3, #16
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    	                          convert(2*n)-convert(3));
                    	K = FIX16_DIV(num, den);
 8001c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c22:	461a      	mov	r2, r3
 8001c24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c28:	1411      	asrs	r1, r2, #16
 8001c2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001c2c:	0413      	lsls	r3, r2, #16
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c32:	461a      	mov	r2, r3
 8001c34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c3c:	f7fe fb58 	bl	80002f0 <__aeabi_ldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	66bb      	str	r3, [r7, #104]	; 0x68
                    	P2 = MULT(cosrad(theta), P10) - MULT(K, P20);
 8001c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c4a:	f7ff fb6d 	bl	8001328 <cosrad>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4618      	mov	r0, r3
 8001c52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c60:	fb02 f501 	mul.w	r5, r2, r1
 8001c64:	fb00 f403 	mul.w	r4, r0, r3
 8001c68:	442c      	add	r4, r5
 8001c6a:	fba0 2302 	umull	r2, r3, r0, r2
 8001c6e:	18e1      	adds	r1, r4, r3
 8001c70:	460b      	mov	r3, r1
 8001c72:	f04f 0000 	mov.w	r0, #0
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	0c10      	lsrs	r0, r2, #16
 8001c7c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c80:	1419      	asrs	r1, r3, #16
 8001c82:	4606      	mov	r6, r0
 8001c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c86:	461a      	mov	r2, r3
 8001c88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c8c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001c90:	4608      	mov	r0, r1
 8001c92:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c96:	fb00 f503 	mul.w	r5, r0, r3
 8001c9a:	fb02 f401 	mul.w	r4, r2, r1
 8001c9e:	442c      	add	r4, r5
 8001ca0:	fba2 2300 	umull	r2, r3, r2, r0
 8001ca4:	18e1      	adds	r1, r4, r3
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0c10      	lsrs	r0, r2, #16
 8001cb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cb6:	1419      	asrs	r1, r3, #16
 8001cb8:	4603      	mov	r3, r0
 8001cba:	1af3      	subs	r3, r6, r3
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10) - MULT(K, dP20);
 8001cc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001cc2:	f7ff fb31 	bl	8001328 <cosrad>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001cce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cd8:	fb02 f501 	mul.w	r5, r2, r1
 8001cdc:	fb00 f403 	mul.w	r4, r0, r3
 8001ce0:	442c      	add	r4, r5
 8001ce2:	fba0 2302 	umull	r2, r3, r0, r2
 8001ce6:	18e1      	adds	r1, r4, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0c10      	lsrs	r0, r2, #16
 8001cf4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cf8:	1419      	asrs	r1, r3, #16
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001cfe:	f7ff fa8f 	bl	8001220 <sinrad>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d0a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001d0e:	4608      	mov	r0, r1
 8001d10:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d14:	fb00 f503 	mul.w	r5, r0, r3
 8001d18:	fb02 f401 	mul.w	r4, r2, r1
 8001d1c:	442c      	add	r4, r5
 8001d1e:	fba2 2300 	umull	r2, r3, r2, r0
 8001d22:	18e1      	adds	r1, r4, r3
 8001d24:	460b      	mov	r3, r1
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0c10      	lsrs	r0, r2, #16
 8001d30:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d34:	1419      	asrs	r1, r3, #16
 8001d36:	4603      	mov	r3, r0
 8001d38:	1af6      	subs	r6, r6, r3
 8001d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d42:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001d46:	4608      	mov	r0, r1
 8001d48:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d4c:	fb00 f503 	mul.w	r5, r0, r3
 8001d50:	fb02 f401 	mul.w	r4, r2, r1
 8001d54:	442c      	add	r4, r5
 8001d56:	fba2 2300 	umull	r2, r3, r2, r0
 8001d5a:	18e1      	adds	r1, r4, r3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0c10      	lsrs	r0, r2, #16
 8001d68:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d6c:	1419      	asrs	r1, r3, #16
 8001d6e:	4603      	mov	r3, r0
 8001d70:	1af3      	subs	r3, r6, r3
 8001d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001d86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001d8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    }
                }
                // Precompute repeated terms
                int32_t ar_pow = POW(DIV(a, r), (n + 2)<<16);
 8001d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001da0:	1411      	asrs	r1, r2, #16
 8001da2:	6279      	str	r1, [r7, #36]	; 0x24
 8001da4:	0413      	lsls	r3, r2, #16
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001daa:	461a      	mov	r2, r3
 8001dac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001db0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001db4:	f7fe fa9c 	bl	80002f0 <__aeabi_ldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001dca:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001dce:	3302      	adds	r3, #2
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	141b      	asrs	r3, r3, #16
 8001dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da5c      	bge.n	8001e9a <magnet+0x96e>
 8001de0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001de4:	425b      	negs	r3, r3
 8001de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dee:	461a      	mov	r2, r3
 8001df0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001df4:	f04f 0000 	mov.w	r0, #0
 8001df8:	f04f 0101 	mov.w	r1, #1
 8001dfc:	f7fe fa78 	bl	80002f0 <__aeabi_ldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4613      	mov	r3, r2
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e0a:	e046      	b.n	8001e9a <magnet+0x96e>
 8001e0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01d      	beq.n	8001e54 <magnet+0x928>
 8001e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e26:	461a      	mov	r2, r3
 8001e28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e2c:	fb02 f501 	mul.w	r5, r2, r1
 8001e30:	fb00 f403 	mul.w	r4, r0, r3
 8001e34:	442c      	add	r4, r5
 8001e36:	fba0 2302 	umull	r2, r3, r0, r2
 8001e3a:	18e1      	adds	r1, r4, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0c10      	lsrs	r0, r2, #16
 8001e48:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e4c:	1419      	asrs	r1, r3, #16
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e58:	4618      	mov	r0, r3
 8001e5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e62:	461a      	mov	r2, r3
 8001e64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e68:	fb02 f501 	mul.w	r5, r2, r1
 8001e6c:	fb00 f403 	mul.w	r4, r0, r3
 8001e70:	442c      	add	r4, r5
 8001e72:	fba0 2302 	umull	r2, r3, r0, r2
 8001e76:	18e1      	adds	r1, r4, r3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	0c10      	lsrs	r0, r2, #16
 8001e84:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e88:	1419      	asrs	r1, r3, #16
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e94:	105b      	asrs	r3, r3, #1
 8001e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1b4      	bne.n	8001e0c <magnet+0x8e0>
 8001ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ea6:	667b      	str	r3, [r7, #100]	; 0x64
                int32_t mphi = MULT(m<<16, phi);
 8001ea8:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ebc:	fb02 f501 	mul.w	r5, r2, r1
 8001ec0:	fb00 f403 	mul.w	r4, r0, r3
 8001ec4:	442c      	add	r4, r5
 8001ec6:	fba0 2302 	umull	r2, r3, r0, r2
 8001eca:	18e1      	adds	r1, r4, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	0c10      	lsrs	r0, r2, #16
 8001ed8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001edc:	1419      	asrs	r1, r3, #16
 8001ede:	4603      	mov	r3, r0
 8001ee0:	663b      	str	r3, [r7, #96]	; 0x60
                int32_t cos_mphi = cosrad(mphi);
 8001ee2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001ee4:	f7ff fa20 	bl	8001328 <cosrad>
 8001ee8:	65f8      	str	r0, [r7, #92]	; 0x5c
                int32_t sin_mphi = sinrad(mphi);
 8001eea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001eec:	f7ff f998 	bl	8001220 <sinrad>
 8001ef0:	65b8      	str	r0, [r7, #88]	; 0x58

                int32_t gnm = g[n - 1][m];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	0899      	lsrs	r1, r3, #2
 8001ef6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f04:	fb00 f101 	mul.w	r1, r0, r1
 8001f08:	440a      	add	r2, r1
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	657b      	str	r3, [r7, #84]	; 0x54
                int32_t hnm = h[n - 1][m];
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	0899      	lsrs	r1, r3, #2
 8001f14:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001f18:	1e58      	subs	r0, r3, #1
 8001f1a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f20:	fb00 f101 	mul.w	r1, r0, r1
 8001f24:	440a      	add	r2, r1
 8001f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2a:	653b      	str	r3, [r7, #80]	; 0x50

                int32_t gcos = MULT(gnm, cos_mphi);
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2e:	4618      	mov	r0, r3
 8001f30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	461a      	mov	r2, r3
 8001f38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f3c:	fb02 f501 	mul.w	r5, r2, r1
 8001f40:	fb00 f403 	mul.w	r4, r0, r3
 8001f44:	442c      	add	r4, r5
 8001f46:	fba0 2302 	umull	r2, r3, r0, r2
 8001f4a:	18e1      	adds	r1, r4, r3
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	f04f 0000 	mov.w	r0, #0
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	0c10      	lsrs	r0, r2, #16
 8001f58:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f5c:	1419      	asrs	r1, r3, #16
 8001f5e:	4603      	mov	r3, r0
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
                int32_t hsin = MULT(hnm, sin_mphi);
 8001f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f64:	4618      	mov	r0, r3
 8001f66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f72:	fb02 f501 	mul.w	r5, r2, r1
 8001f76:	fb00 f403 	mul.w	r4, r0, r3
 8001f7a:	442c      	add	r4, r5
 8001f7c:	fba0 2302 	umull	r2, r3, r0, r2
 8001f80:	18e1      	adds	r1, r4, r3
 8001f82:	460b      	mov	r3, r1
 8001f84:	f04f 0000 	mov.w	r0, #0
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	0c10      	lsrs	r0, r2, #16
 8001f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f92:	1419      	asrs	r1, r3, #16
 8001f94:	4603      	mov	r3, r0
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
                int32_t gsin = MULT(gnm, sin_mphi);
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fa8:	fb02 f501 	mul.w	r5, r2, r1
 8001fac:	fb00 f403 	mul.w	r4, r0, r3
 8001fb0:	442c      	add	r4, r5
 8001fb2:	fba0 2302 	umull	r2, r3, r0, r2
 8001fb6:	18e1      	adds	r1, r4, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	0c10      	lsrs	r0, r2, #16
 8001fc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fc8:	1419      	asrs	r1, r3, #16
 8001fca:	4603      	mov	r3, r0
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
                int32_t hcos = MULT(hnm, cos_mphi);
 8001fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd8:	461a      	mov	r2, r3
 8001fda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fde:	fb02 f501 	mul.w	r5, r2, r1
 8001fe2:	fb00 f403 	mul.w	r4, r0, r3
 8001fe6:	442c      	add	r4, r5
 8001fe8:	fba0 2302 	umull	r2, r3, r0, r2
 8001fec:	18e1      	adds	r1, r4, r3
 8001fee:	460b      	mov	r3, r1
 8001ff0:	f04f 0000 	mov.w	r0, #0
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	0c10      	lsrs	r0, r2, #16
 8001ffa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ffe:	1419      	asrs	r1, r3, #16
 8002000:	4603      	mov	r3, r0
 8002002:	643b      	str	r3, [r7, #64]	; 0x40

                // Magnetic field component updates
                Br = Br + MULT(MULT(ar_pow, (n + 1)<<16), MULT((gcos + hsin), P2));
 8002004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002006:	4618      	mov	r0, r3
 8002008:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800200c:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8002010:	3301      	adds	r3, #1
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	461a      	mov	r2, r3
 8002016:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800201a:	fb02 f501 	mul.w	r5, r2, r1
 800201e:	fb00 f403 	mul.w	r4, r0, r3
 8002022:	442c      	add	r4, r5
 8002024:	fba0 2302 	umull	r2, r3, r0, r2
 8002028:	18e1      	adds	r1, r4, r3
 800202a:	460b      	mov	r3, r1
 800202c:	f04f 0000 	mov.w	r0, #0
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	0c10      	lsrs	r0, r2, #16
 8002036:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800203a:	1419      	asrs	r1, r3, #16
 800203c:	4603      	mov	r3, r0
 800203e:	4698      	mov	r8, r3
 8002040:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	4413      	add	r3, r2
 800204a:	4618      	mov	r0, r3
 800204c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002054:	461a      	mov	r2, r3
 8002056:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800205a:	fb02 f501 	mul.w	r5, r2, r1
 800205e:	fb00 f403 	mul.w	r4, r0, r3
 8002062:	442c      	add	r4, r5
 8002064:	fba0 0102 	umull	r0, r1, r0, r2
 8002068:	1863      	adds	r3, r4, r1
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	0c02      	lsrs	r2, r0, #16
 8002076:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800207a:	140b      	asrs	r3, r1, #16
 800207c:	4613      	mov	r3, r2
 800207e:	461a      	mov	r2, r3
 8002080:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002084:	fb02 f009 	mul.w	r0, r2, r9
 8002088:	fb08 f103 	mul.w	r1, r8, r3
 800208c:	4401      	add	r1, r0
 800208e:	fba8 2302 	umull	r2, r3, r8, r2
 8002092:	4419      	add	r1, r3
 8002094:	460b      	mov	r3, r1
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	0c10      	lsrs	r0, r2, #16
 80020a0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020a4:	1419      	asrs	r1, r3, #16
 80020a6:	4602      	mov	r2, r0
 80020a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020ac:	4413      	add	r3, r2
 80020ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                Bt = Bt + MULT(MULT(ar_pow, 1<<16), MULT((gcos + hsin), dP2));
 80020b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b4:	4618      	mov	r0, r3
 80020b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	040b      	lsls	r3, r1, #16
 80020c4:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80020c8:	0402      	lsls	r2, r0, #16
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	0c10      	lsrs	r0, r2, #16
 80020d4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020d8:	1419      	asrs	r1, r3, #16
 80020da:	4603      	mov	r3, r0
 80020dc:	4698      	mov	r8, r3
 80020de:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80020e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e6:	4413      	add	r3, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020f2:	461a      	mov	r2, r3
 80020f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020f8:	fb02 f501 	mul.w	r5, r2, r1
 80020fc:	fb00 f403 	mul.w	r4, r0, r3
 8002100:	442c      	add	r4, r5
 8002102:	fba0 0102 	umull	r0, r1, r0, r2
 8002106:	1863      	adds	r3, r4, r1
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	0c02      	lsrs	r2, r0, #16
 8002114:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002118:	140b      	asrs	r3, r1, #16
 800211a:	4613      	mov	r3, r2
 800211c:	461a      	mov	r2, r3
 800211e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002122:	fb02 f009 	mul.w	r0, r2, r9
 8002126:	fb08 f103 	mul.w	r1, r8, r3
 800212a:	4401      	add	r1, r0
 800212c:	fba8 2302 	umull	r2, r3, r8, r2
 8002130:	4419      	add	r1, r3
 8002132:	460b      	mov	r3, r1
 8002134:	f04f 0000 	mov.w	r0, #0
 8002138:	f04f 0100 	mov.w	r1, #0
 800213c:	0c10      	lsrs	r0, r2, #16
 800213e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002142:	1419      	asrs	r1, r3, #16
 8002144:	4602      	mov	r2, r0
 8002146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800214a:	4413      	add	r3, r2
 800214c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                Bp = Bp + MULT(MULT(ar_pow, 1<<16), MULT(MULT(convert(m), (-gsin + hcos)), P2));
 8002150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002152:	4618      	mov	r0, r3
 8002154:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	040b      	lsls	r3, r1, #16
 8002162:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002166:	0402      	lsls	r2, r0, #16
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0c10      	lsrs	r0, r2, #16
 8002172:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002176:	1419      	asrs	r1, r3, #16
 8002178:	4603      	mov	r3, r0
 800217a:	4698      	mov	r8, r3
 800217c:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002180:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fb0d 	bl	80007a4 <convert>
 800218a:	4603      	mov	r3, r0
 800218c:	4618      	mov	r0, r3
 800218e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	461a      	mov	r2, r3
 800219a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800219e:	fb02 f501 	mul.w	r5, r2, r1
 80021a2:	fb00 f403 	mul.w	r4, r0, r3
 80021a6:	442c      	add	r4, r5
 80021a8:	fba0 0102 	umull	r0, r1, r0, r2
 80021ac:	1863      	adds	r3, r4, r1
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	0c02      	lsrs	r2, r0, #16
 80021ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021be:	140b      	asrs	r3, r1, #16
 80021c0:	4613      	mov	r3, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80021c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021cc:	461a      	mov	r2, r3
 80021ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021d2:	fb02 f501 	mul.w	r5, r2, r1
 80021d6:	fb00 f403 	mul.w	r4, r0, r3
 80021da:	442c      	add	r4, r5
 80021dc:	fba0 0102 	umull	r0, r1, r0, r2
 80021e0:	1863      	adds	r3, r4, r1
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	0c02      	lsrs	r2, r0, #16
 80021ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021f2:	140b      	asrs	r3, r1, #16
 80021f4:	4613      	mov	r3, r2
 80021f6:	461a      	mov	r2, r3
 80021f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021fc:	fb02 f009 	mul.w	r0, r2, r9
 8002200:	fb08 f103 	mul.w	r1, r8, r3
 8002204:	4401      	add	r1, r0
 8002206:	fba8 2302 	umull	r2, r3, r8, r2
 800220a:	4419      	add	r1, r3
 800220c:	460b      	mov	r3, r1
 800220e:	f04f 0000 	mov.w	r0, #0
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	0c10      	lsrs	r0, r2, #16
 8002218:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800221c:	1419      	asrs	r1, r3, #16
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002224:	4413      	add	r3, r2
 8002226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        for (n = 1; n <= Nmodel; n++) {
 800222a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800222e:	b29b      	uxth	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002238:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800223c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002240:	429a      	cmp	r2, r3
 8002242:	f6bf ab73 	bge.w	800192c <magnet+0x400>
    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 8002246:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 800224a:	b29b      	uxth	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	b29b      	uxth	r3, r3
 8002250:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8002254:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002258:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800225c:	429a      	cmp	r2, r3
 800225e:	f6bf ab60 	bge.w	8001922 <magnet+0x3f6>
            }
        }
    }
    Bt = -Bt;
 8002262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002266:	425b      	negs	r3, r3
 8002268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    Bp = -DIV(Bp, sinrad(theta));
 800226c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002270:	461a      	mov	r2, r3
 8002272:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002276:	1411      	asrs	r1, r2, #16
 8002278:	61f9      	str	r1, [r7, #28]
 800227a:	0413      	lsls	r3, r2, #16
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002280:	f7fe ffce 	bl	8001220 <sinrad>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800228c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002290:	f7fe f82e 	bl	80002f0 <__aeabi_ldivmod>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4613      	mov	r3, r2
 800229a:	425b      	negs	r3, r3
 800229c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    buffer[0] = Bt;
 80022a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022a4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80022a8:	601a      	str	r2, [r3, #0]
    buffer[1] = Bp;
 80022aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022ae:	3304      	adds	r3, #4
 80022b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022b4:	601a      	str	r2, [r3, #0]
    buffer[2] = Br;
 80022b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022ba:	3308      	adds	r3, #8
 80022bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 80022c6:	bf00      	nop
 80022c8:	37e4      	adds	r7, #228	; 0xe4
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022d0 <main>:
    mag_avg->y = (int32_t)(mag_sum_y / div);
    mag_avg->z = (int32_t)(mag_sum_z / div);
}

int main(void)
{
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b0c5      	sub	sp, #276	; 0x114
 80022d4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d6:	f001 fc66 	bl	8003ba6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022da:	f000 f97f 	bl	80025dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022de:	f000 fa95 	bl	800280c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022e2:	f000 fa47 	bl	8002774 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80022e6:	f000 f9f9 	bl	80026dc <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80022ea:	f000 f9b7 	bl	800265c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 80022ee:	48ac      	ldr	r0, [pc, #688]	; (80025a0 <main+0x2d0>)
 80022f0:	f7fe fe78 	bl	8000fe4 <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 80022f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
  HAL_Delay(10);
 8002302:	200a      	movs	r0, #10
 8002304:	f001 fcc0 	bl	8003c88 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	49a6      	ldr	r1, [pc, #664]	; (80025a4 <main+0x2d4>)
 800230c:	48a6      	ldr	r0, [pc, #664]	; (80025a8 <main+0x2d8>)
 800230e:	f003 ffcd 	bl	80062ac <HAL_UART_Receive_IT>
  LCD_Init();
 8002312:	f7fe fe0a 	bl	8000f2a <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 8002316:	48a2      	ldr	r0, [pc, #648]	; (80025a0 <main+0x2d0>)
 8002318:	f7fe fd16 	bl	8000d48 <I2C_Scan>

int32_t r = REarth16km + Rational(2,10); // Earth's radius in fixed point 16.16 format
 800231c:	210a      	movs	r1, #10
 800231e:	2002      	movs	r0, #2
 8002320:	f7fe f9f4 	bl	800070c <Rational>
 8002324:	4602      	mov	r2, r0
 8002326:	4ba1      	ldr	r3, [pc, #644]	; (80025ac <main+0x2dc>)
 8002328:	4413      	add	r3, r2
 800232a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
printf("r : ");
 800232e:	48a0      	ldr	r0, [pc, #640]	; (80025b0 <main+0x2e0>)
 8002330:	f005 ffdc 	bl	80082ec <iprintf>
printFix(r);
 8002334:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002338:	f7fe fa08 	bl	800074c <printFix>
printf("\r\n");
 800233c:	489d      	ldr	r0, [pc, #628]	; (80025b4 <main+0x2e4>)
 800233e:	f006 f871 	bl	8008424 <puts>
int32_t phi = convert(30);
 8002342:	201e      	movs	r0, #30
 8002344:	f7fe fa2e 	bl	80007a4 <convert>
 8002348:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
int32_t theta = convert(45);
 800234c:	202d      	movs	r0, #45	; 0x2d
 800234e:	f7fe fa29 	bl	80007a4 <convert>
 8002352:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
int32_t days = 24510000;
 8002356:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <main+0x2e8>)
 8002358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
int32_t vector[3];
magnet(r, theta, phi, days, vector);
 800235c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002366:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800236a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800236e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002372:	f7ff f8db 	bl	800152c <magnet>
int i;
for (i=0; i<3; i++) {
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800237c:	e017      	b.n	80023ae <main+0xde>
	printf("Res %i: ", i);
 800237e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002382:	488e      	ldr	r0, [pc, #568]	; (80025bc <main+0x2ec>)
 8002384:	f005 ffb2 	bl	80082ec <iprintf>
	printFix(vector[i]);
 8002388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8002392:	4413      	add	r3, r2
 8002394:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f9d7 	bl	800074c <printFix>
	printf("\r\n");
 800239e:	4885      	ldr	r0, [pc, #532]	; (80025b4 <main+0x2e4>)
 80023a0:	f006 f840 	bl	8008424 <puts>
for (i=0; i<3; i++) {
 80023a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a8:	3301      	adds	r3, #1
 80023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	dde3      	ble.n	800237e <main+0xae>
}


//Vector3D M1 = {1<<16,0,0};
//Vector3D g1 = {0,0,-10<<16};
Vector3D M2 = {convert(100),              /* Copenhagen field */
 80023b6:	2064      	movs	r0, #100	; 0x64
 80023b8:	f7fe f9f4 	bl	80007a4 <convert>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                      0,
                      convert(-166)};
 80023c8:	f06f 00a5 	mvn.w	r0, #165	; 0xa5
 80023cc:	f7fe f9ea 	bl	80007a4 <convert>
 80023d0:	4603      	mov	r3, r0
Vector3D M2 = {convert(100),              /* Copenhagen field */
 80023d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
Vector3D g2 = { 0, 0, convert(1)};
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80023e2:	2001      	movs	r0, #1
 80023e4:	f7fe f9de 	bl	80007a4 <convert>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8



LCD_SetCursor(0, 0);
 80023ee:	2100      	movs	r1, #0
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fd7e 	bl	8000ef2 <LCD_SetCursor>
    LCD_SendString("Roll");
 80023f6:	4872      	ldr	r0, [pc, #456]	; (80025c0 <main+0x2f0>)
 80023f8:	f7fe fd66 	bl	8000ec8 <LCD_SendString>
    LCD_SetCursor(0, 6);
 80023fc:	2106      	movs	r1, #6
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe fd77 	bl	8000ef2 <LCD_SetCursor>
    LCD_SendString("Pitch");
 8002404:	486f      	ldr	r0, [pc, #444]	; (80025c4 <main+0x2f4>)
 8002406:	f7fe fd5f 	bl	8000ec8 <LCD_SendString>
    LCD_SetCursor(0, 12);
 800240a:	210c      	movs	r1, #12
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fd70 	bl	8000ef2 <LCD_SetCursor>
    LCD_SendString("Yaw");
 8002412:	486d      	ldr	r0, [pc, #436]	; (80025c8 <main+0x2f8>)
 8002414:	f7fe fd58 	bl	8000ec8 <LCD_SendString>

i = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//Vector3D magdata;
//Vector3D accdata;
Vector3D degrot;
Matrix3x3 rot;
Vector3D accdata = {0, 0, convert(1)}; // gravity straight down
 800241e:	2300      	movs	r3, #0
 8002420:	667b      	str	r3, [r7, #100]	; 0x64
 8002422:	2300      	movs	r3, #0
 8002424:	66bb      	str	r3, [r7, #104]	; 0x68
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe f9bc 	bl	80007a4 <convert>
 800242c:	4603      	mov	r3, r0
 800242e:	66fb      	str	r3, [r7, #108]	; 0x6c
Vector3D magdata = {convert(1), 0, 0};  // magnetic north along X
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe f9b7 	bl	80007a4 <convert>
 8002436:	4603      	mov	r3, r0
 8002438:	65bb      	str	r3, [r7, #88]	; 0x58
 800243a:	2300      	movs	r3, #0
 800243c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800243e:	2300      	movs	r3, #0
 8002440:	663b      	str	r3, [r7, #96]	; 0x60
Matrix3x3 Rnb;
Vector3D mag_raw;

  while (1)
  {
	  accdata = lsmAccRead(&hi2c3);
 8002442:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002446:	4956      	ldr	r1, [pc, #344]	; (80025a0 <main+0x2d0>)
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe22 	bl	8001092 <lsmAccRead>

	  printf("\n acc: %ld, %ld, %ld \n",accdata.x,accdata.y, accdata.z);
 800244e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	485d      	ldr	r0, [pc, #372]	; (80025cc <main+0x2fc>)
 8002456:	f005 ff49 	bl	80082ec <iprintf>
	  printf("mag: %ld, %ld, %ld \n",magdata.x,magdata.y, magdata.z);
 800245a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800245c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800245e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002460:	485b      	ldr	r0, [pc, #364]	; (80025d0 <main+0x300>)
 8002462:	f005 ff43 	bl	80082ec <iprintf>

	  //readSensorsAndAverage(&accdata, &magdata);
	  mag_raw = lsmMagRead(&hi2c3);
 8002466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246a:	494d      	ldr	r1, [pc, #308]	; (80025a0 <main+0x2d0>)
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe56 	bl	800111e <lsmMagRead>
	  magdata.x = mag_raw.y + 2897;
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	f603 3351 	addw	r3, r3, #2897	; 0xb51
 8002478:	65bb      	str	r3, [r7, #88]	; 0x58
	  magdata.y = -mag_raw.x + 3352;
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	f5c3 6351 	rsb	r3, r3, #3344	; 0xd10
 8002480:	3308      	adds	r3, #8
 8002482:	65fb      	str	r3, [r7, #92]	; 0x5c
	  magdata.z = mag_raw.z + 3200;
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800248a:	663b      	str	r3, [r7, #96]	; 0x60
	  triad(magdata,accdata,M2,g2, &rot);
 800248c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002490:	9308      	str	r3, [sp, #32]
 8002492:	ac05      	add	r4, sp, #20
 8002494:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002498:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800249c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024a0:	ac02      	add	r4, sp, #8
 80024a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024ae:	466a      	mov	r2, sp
 80024b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80024bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024be:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c4:	f000 fc5c 	bl	8002d80 <triad>
	  Rnb = transpose(rot);
 80024c8:	463e      	mov	r6, r7
 80024ca:	466d      	mov	r5, sp
 80024cc:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80024d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e2:	4630      	mov	r0, r6
 80024e4:	f001 fa18 	bl	8003918 <transpose>
 80024e8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80024ec:	463d      	mov	r5, r7
 80024ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f6:	682b      	ldr	r3, [r5, #0]
 80024f8:	6023      	str	r3, [r4, #0]
	  rot2eulerZYX(&Rnb,&degrot);
 80024fa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80024fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f000 ff43 	bl	8003390 <rot2eulerZYX>
	  printf("\n %ld, %ld, %ld \n",degrot.x, degrot.y, degrot.z);
 800250a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800250e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002512:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002516:	482f      	ldr	r0, [pc, #188]	; (80025d4 <main+0x304>)
 8002518:	f005 fee8 	bl	80082ec <iprintf>

	  HAL_Delay(100);
 800251c:	2064      	movs	r0, #100	; 0x64
 800251e:	f001 fbb3 	bl	8003c88 <HAL_Delay>

	  //////////////////////////////////LCD deg print//////////////////
	  LCD_SetCursor(1, 0);
 8002522:	2100      	movs	r1, #0
 8002524:	2001      	movs	r0, #1
 8002526:	f7fe fce4 	bl	8000ef2 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.x));
 800252a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f944 	bl	80007bc <inconvert>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd40 	bl	8000fbc <LCD_PrintAngle>
	  HAL_Delay(10); //vigtigt der skal være delay ellers virker det ikke at rykke cursor
 800253c:	200a      	movs	r0, #10
 800253e:	f001 fba3 	bl	8003c88 <HAL_Delay>

	  LCD_SetCursor(1, 6);
 8002542:	2106      	movs	r1, #6
 8002544:	2001      	movs	r0, #1
 8002546:	f7fe fcd4 	bl	8000ef2 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.y));
 800254a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f934 	bl	80007bc <inconvert>
 8002554:	4603      	mov	r3, r0
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fd30 	bl	8000fbc <LCD_PrintAngle>
	  HAL_Delay(10);
 800255c:	200a      	movs	r0, #10
 800255e:	f001 fb93 	bl	8003c88 <HAL_Delay>

	  LCD_SetCursor(1, 12);
 8002562:	210c      	movs	r1, #12
 8002564:	2001      	movs	r0, #1
 8002566:	f7fe fcc4 	bl	8000ef2 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.z));
 800256a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe f924 	bl	80007bc <inconvert>
 8002574:	4603      	mov	r3, r0
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fd20 	bl	8000fbc <LCD_PrintAngle>
	  HAL_Delay(10);
 800257c:	200a      	movs	r0, #10
 800257e:	f001 fb83 	bl	8003c88 <HAL_Delay>
	  //////////////////////////////////LCD deg print end//////////////

	  process_uart_data(&uart_rx_buf, &GPS);
 8002582:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002586:	4619      	mov	r1, r3
 8002588:	4813      	ldr	r0, [pc, #76]	; (80025d8 <main+0x308>)
 800258a:	f7fe fba5 	bl	8000cd8 <process_uart_data>
	  HAL_Delay(10);
 800258e:	200a      	movs	r0, #10
 8002590:	f001 fb7a 	bl	8003c88 <HAL_Delay>
	  i++;
 8002594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002598:	3301      	adds	r3, #1
 800259a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  accdata = lsmAccRead(&hi2c3);
 800259e:	e750      	b.n	8002442 <main+0x172>
 80025a0:	20000f60 	.word	0x20000f60
 80025a4:	20000fb4 	.word	0x20000fb4
 80025a8:	20000fb8 	.word	0x20000fb8
 80025ac:	18e33333 	.word	0x18e33333
 80025b0:	0800a0b0 	.word	0x0800a0b0
 80025b4:	0800a0b8 	.word	0x0800a0b8
 80025b8:	0175fe30 	.word	0x0175fe30
 80025bc:	0800a0bc 	.word	0x0800a0bc
 80025c0:	0800a0c8 	.word	0x0800a0c8
 80025c4:	0800a0d0 	.word	0x0800a0d0
 80025c8:	0800a0d8 	.word	0x0800a0d8
 80025cc:	0800a0dc 	.word	0x0800a0dc
 80025d0:	0800a0f4 	.word	0x0800a0f4
 80025d4:	0800a10c 	.word	0x0800a10c
 80025d8:	20000a54 	.word	0x20000a54

080025dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b094      	sub	sp, #80	; 0x50
 80025e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e2:	f107 0318 	add.w	r3, r7, #24
 80025e6:	2238      	movs	r2, #56	; 0x38
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f005 fe76 	bl	80082dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002602:	f002 fda1 	bl	8005148 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800260a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002610:	2340      	movs	r3, #64	; 0x40
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	4618      	mov	r0, r3
 800261e:	f002 fe47 	bl	80052b0 <HAL_RCC_OscConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002628:	f000 f978 	bl	800291c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262c:	230f      	movs	r3, #15
 800262e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002630:	2301      	movs	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f003 f947 	bl	80058d8 <HAL_RCC_ClockConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002650:	f000 f964 	bl	800291c <Error_Handler>
  }
}
 8002654:	bf00      	nop
 8002656:	3750      	adds	r7, #80	; 0x50
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <MX_I2C3_Init+0x78>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <MX_I2C3_Init+0x7c>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_I2C3_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002674:	2201      	movs	r2, #1
 8002676:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_I2C3_Init+0x74>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_I2C3_Init+0x74>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002698:	f001 fe82 	bl	80043a0 <HAL_I2C_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026a2:	f000 f93b 	bl	800291c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4809      	ldr	r0, [pc, #36]	; (80026d0 <MX_I2C3_Init+0x74>)
 80026aa:	f002 fcb5 	bl	8005018 <HAL_I2CEx_ConfigAnalogFilter>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026b4:	f000 f932 	bl	800291c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026b8:	2100      	movs	r1, #0
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_I2C3_Init+0x74>)
 80026bc:	f002 fcf7 	bl	80050ae <HAL_I2CEx_ConfigDigitalFilter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026c6:	f000 f929 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000f60 	.word	0x20000f60
 80026d4:	40007800 	.word	0x40007800
 80026d8:	0010061a 	.word	0x0010061a

080026dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <MX_USART1_UART_Init+0x90>)
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <MX_USART1_UART_Init+0x94>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <MX_USART1_UART_Init+0x90>)
 80026e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <MX_USART1_UART_Init+0x90>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <MX_USART1_UART_Init+0x90>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <MX_USART1_UART_Init+0x90>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_USART1_UART_Init+0x90>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <MX_USART1_UART_Init+0x90>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <MX_USART1_UART_Init+0x90>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_USART1_UART_Init+0x90>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <MX_USART1_UART_Init+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_USART1_UART_Init+0x90>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002724:	4811      	ldr	r0, [pc, #68]	; (800276c <MX_USART1_UART_Init+0x90>)
 8002726:	f003 fce3 	bl	80060f0 <HAL_UART_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002730:	f000 f8f4 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002734:	2100      	movs	r1, #0
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <MX_USART1_UART_Init+0x90>)
 8002738:	f005 fcdb 	bl	80080f2 <HAL_UARTEx_SetTxFifoThreshold>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002742:	f000 f8eb 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002746:	2100      	movs	r1, #0
 8002748:	4808      	ldr	r0, [pc, #32]	; (800276c <MX_USART1_UART_Init+0x90>)
 800274a:	f005 fd10 	bl	800816e <HAL_UARTEx_SetRxFifoThreshold>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002754:	f000 f8e2 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <MX_USART1_UART_Init+0x90>)
 800275a:	f005 fc91 	bl	8008080 <HAL_UARTEx_DisableFifoMode>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002764:	f000 f8da 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000fb8 	.word	0x20000fb8
 8002770:	40013800 	.word	0x40013800

08002774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <MX_USART2_UART_Init+0x90>)
 800277a:	4a23      	ldr	r2, [pc, #140]	; (8002808 <MX_USART2_UART_Init+0x94>)
 800277c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <MX_USART2_UART_Init+0x90>)
 8002780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <MX_USART2_UART_Init+0x90>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_USART2_UART_Init+0x90>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <MX_USART2_UART_Init+0x90>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <MX_USART2_UART_Init+0x90>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027bc:	4811      	ldr	r0, [pc, #68]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027be:	f003 fc97 	bl	80060f0 <HAL_UART_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027c8:	f000 f8a8 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027cc:	2100      	movs	r1, #0
 80027ce:	480d      	ldr	r0, [pc, #52]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027d0:	f005 fc8f 	bl	80080f2 <HAL_UARTEx_SetTxFifoThreshold>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027da:	f000 f89f 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027de:	2100      	movs	r1, #0
 80027e0:	4808      	ldr	r0, [pc, #32]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027e2:	f005 fcc4 	bl	800816e <HAL_UARTEx_SetRxFifoThreshold>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027ec:	f000 f896 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027f0:	4804      	ldr	r0, [pc, #16]	; (8002804 <MX_USART2_UART_Init+0x90>)
 80027f2:	f005 fc45 	bl	8008080 <HAL_UARTEx_DisableFifoMode>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027fc:	f000 f88e 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000104c 	.word	0x2000104c
 8002808:	40004400 	.word	0x40004400

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <MX_GPIO_Init+0xa0>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <MX_GPIO_Init+0xa0>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <MX_GPIO_Init+0xa0>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <MX_GPIO_Init+0xa0>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <MX_GPIO_Init+0xa0>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <MX_GPIO_Init+0xa0>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002852:	2200      	movs	r2, #0
 8002854:	2173      	movs	r1, #115	; 0x73
 8002856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285a:	f001 fd89 	bl	8004370 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	2108      	movs	r1, #8
 8002862:	4813      	ldr	r0, [pc, #76]	; (80028b0 <MX_GPIO_Init+0xa4>)
 8002864:	f001 fd84 	bl	8004370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002868:	2373      	movs	r3, #115	; 0x73
 800286a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	2301      	movs	r3, #1
 800286e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	4619      	mov	r1, r3
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f001 fbf3 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002886:	2308      	movs	r3, #8
 8002888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288a:	2301      	movs	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4619      	mov	r1, r3
 800289c:	4804      	ldr	r0, [pc, #16]	; (80028b0 <MX_GPIO_Init+0xa4>)
 800289e:	f001 fbe5 	bl	800406c <HAL_GPIO_Init>

}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	48000400 	.word	0x48000400

080028b4 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	4804      	ldr	r0, [pc, #16]	; (80028dc <_write+0x28>)
 80028cc:	f003 fc60 	bl	8006190 <HAL_UART_Transmit>
    return len;
 80028d0:	687b      	ldr	r3, [r7, #4]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000104c 	.word	0x2000104c

080028e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_UART_RxCpltCallback+0x30>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10a      	bne.n	8002906 <HAL_UART_RxCpltCallback+0x26>
		//printf("UART Error: ISR=0x%08lX, SR=0x%08lX\r\n", huart->Instance->ISR, huart->Instance->RQR);
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_UART_RxCpltCallback+0x34>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4808      	ldr	r0, [pc, #32]	; (8002918 <HAL_UART_RxCpltCallback+0x38>)
 80028f8:	f7fd ff6e 	bl	80007d8 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 80028fc:	2201      	movs	r2, #1
 80028fe:	4905      	ldr	r1, [pc, #20]	; (8002914 <HAL_UART_RxCpltCallback+0x34>)
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <HAL_UART_RxCpltCallback+0x30>)
 8002902:	f003 fcd3 	bl	80062ac <HAL_UART_Receive_IT>
		 //printf("RX: %c (0x%02X)\r\n", rx_buffer[0], rx_buffer[0]);
	}
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000fb8 	.word	0x20000fb8
 8002914:	20000fb4 	.word	0x20000fb4
 8002918:	20000a54 	.word	0x20000a54

0800291c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	e7fe      	b.n	8002924 <Error_Handler+0x8>
	...

08002928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_MspInit+0x44>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_MspInit+0x44>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6613      	str	r3, [r2, #96]	; 0x60
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_MspInit+0x44>)
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_MspInit+0x44>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_MspInit+0x44>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_MspInit+0x44>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800295e:	f002 fc97 	bl	8005290 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b09c      	sub	sp, #112	; 0x70
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	2244      	movs	r2, #68	; 0x44
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f005 fca3 	bl	80082dc <memset>
  if(hi2c->Instance==I2C3)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_I2C_MspInit+0xe4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d154      	bne.n	8002a4a <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029aa:	f107 0318 	add.w	r3, r7, #24
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 f9ae 	bl	8005d10 <HAL_RCCEx_PeriphCLKConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029ba:	f7ff ffaf 	bl	800291c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f4:	2312      	movs	r3, #18
 80029f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002a00:	2302      	movs	r3, #2
 8002a02:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0e:	f001 fb2d 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a12:	2320      	movs	r3, #32
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a16:	2312      	movs	r3, #18
 8002a18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002a22:	2308      	movs	r3, #8
 8002a24:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <HAL_I2C_MspInit+0xec>)
 8002a2e:	f001 fb1d 	bl	800406c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 8002a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_I2C_MspInit+0xe8>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3770      	adds	r7, #112	; 0x70
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40007800 	.word	0x40007800
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000400 	.word	0x48000400

08002a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b09c      	sub	sp, #112	; 0x70
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	2244      	movs	r2, #68	; 0x44
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 fc2b 	bl	80082dc <memset>
  if(huart->Instance==USART1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_UART_MspInit+0x134>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d140      	bne.n	8002b12 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a98:	f107 0318 	add.w	r3, r7, #24
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 f937 	bl	8005d10 <HAL_RCCEx_PeriphCLKConfig>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002aa8:	f7ff ff38 	bl	800291c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002adc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aee:	2307      	movs	r3, #7
 8002af0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afc:	f001 fab6 	bl	800406c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2100      	movs	r1, #0
 8002b04:	2025      	movs	r0, #37	; 0x25
 8002b06:	f001 f9bc 	bl	8003e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b0a:	2025      	movs	r0, #37	; 0x25
 8002b0c:	f001 f9d3 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b10:	e03b      	b.n	8002b8a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_UART_MspInit+0x13c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d136      	bne.n	8002b8a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b24:	f107 0318 	add.w	r3, r7, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 f8f1 	bl	8005d10 <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002b34:	f7ff fef2 	bl	800291c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b42:	6593      	str	r3, [r2, #88]	; 0x58
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_UART_MspInit+0x138>)
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b78:	2307      	movs	r3, #7
 8002b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b80:	4619      	mov	r1, r3
 8002b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b86:	f001 fa71 	bl	800406c <HAL_GPIO_Init>
}
 8002b8a:	bf00      	nop
 8002b8c:	3770      	adds	r7, #112	; 0x70
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40004400 	.word	0x40004400

08002ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <NMI_Handler+0x4>

08002ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <HardFault_Handler+0x4>

08002bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <MemManage_Handler+0x4>

08002bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <BusFault_Handler+0x4>

08002bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <UsageFault_Handler+0x4>

08002bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bec:	f001 f82e 	bl	8003c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <USART1_IRQHandler+0x10>)
 8002bfa:	f003 fba3 	bl	8006344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000fb8 	.word	0x20000fb8

08002c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	return 1;
 8002c0c:	2301      	movs	r3, #1
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_kill>:

int _kill(int pid, int sig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c22:	f005 fb31 	bl	8008288 <__errno>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2216      	movs	r2, #22
 8002c2a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_exit>:

void _exit (int status)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ffe7 	bl	8002c18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c4a:	e7fe      	b.n	8002c4a <_exit+0x12>

08002c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c5e:	f3af 8000 	nop.w
 8002c62:	4601      	mov	r1, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf0      	blt.n	8002c5e <_read+0x12>
	}

return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cae:	605a      	str	r2, [r3, #4]
	return 0;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_isatty>:

int _isatty(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f005 fab2 	bl	8008288 <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20008000 	.word	0x20008000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	20000e58 	.word	0x20000e58
 8002d58:	200010f8 	.word	0x200010f8

08002d5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <SystemInit+0x20>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <SystemInit+0x20>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <triad>:
#include <vector.h>
#include <luts.h>
#define PI16 205887


void triad(Vector3D B1, Vector3D g1, Vector3D B2, Vector3D g2, Matrix3x3* result){
 8002d80:	b082      	sub	sp, #8
 8002d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d86:	b0f5      	sub	sp, #468	; 0x1d4
 8002d88:	af10      	add	r7, sp, #64	; 0x40
 8002d8a:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d92:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	// Normalisér alle vektorerne
	int32_t nB1 = norm(B1);
 8002d96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d9e:	f000 fd33 	bl	8003808 <norm>
 8002da2:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
	int32_t ng1 = norm(g1);
 8002da6:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002daa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dae:	f000 fd2b 	bl	8003808 <norm>
 8002db2:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
	int32_t nB2 = norm(B2);
 8002db6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dbe:	f000 fd23 	bl	8003808 <norm>
 8002dc2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	int32_t ng2 = norm(g2);
 8002dc6:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8002dca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dce:	f000 fd1b 	bl	8003808 <norm>
 8002dd2:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180

	B1.x = FIX16_DIV(B1.x, nB1);
 8002dd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002de2:	ea4f 4922 	mov.w	r9, r2, asr #16
 8002de6:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8002dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002dee:	461a      	mov	r2, r3
 8002df0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002df4:	4640      	mov	r0, r8
 8002df6:	4649      	mov	r1, r9
 8002df8:	f7fd fa7a 	bl	80002f0 <__aeabi_ldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e04:	601a      	str	r2, [r3, #0]
	B1.y = FIX16_DIV(B1.y, nB1);
 8002e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e12:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002e16:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002e1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e1e:	461a      	mov	r2, r3
 8002e20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e24:	4650      	mov	r0, sl
 8002e26:	4659      	mov	r1, fp
 8002e28:	f7fd fa62 	bl	80002f0 <__aeabi_ldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e34:	605a      	str	r2, [r3, #4]
	B1.z = FIX16_DIV(B1.z, nB1);
 8002e36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e42:	1416      	asrs	r6, r2, #16
 8002e44:	0415      	lsls	r5, r2, #16
 8002e46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e50:	4628      	mov	r0, r5
 8002e52:	4631      	mov	r1, r6
 8002e54:	f7fd fa4c 	bl	80002f0 <__aeabi_ldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e60:	609a      	str	r2, [r3, #8]

	g1.x = FIX16_DIV(g1.x, ng1);
 8002e62:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002e66:	461a      	mov	r2, r3
 8002e68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e6c:	1411      	asrs	r1, r2, #16
 8002e6e:	6779      	str	r1, [r7, #116]	; 0x74
 8002e70:	0413      	lsls	r3, r2, #16
 8002e72:	673b      	str	r3, [r7, #112]	; 0x70
 8002e74:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e78:	461a      	mov	r2, r3
 8002e7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e7e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002e82:	f7fd fa35 	bl	80002f0 <__aeabi_ldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	g1.y = FIX16_DIV(g1.y, ng1);
 8002e90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e94:	461a      	mov	r2, r3
 8002e96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e9a:	1411      	asrs	r1, r2, #16
 8002e9c:	66f9      	str	r1, [r7, #108]	; 0x6c
 8002e9e:	0413      	lsls	r3, r2, #16
 8002ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002eac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002eb0:	f7fd fa1e 	bl	80002f0 <__aeabi_ldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	g1.z = FIX16_DIV(g1.z, ng1);
 8002ebe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ec8:	1411      	asrs	r1, r2, #16
 8002eca:	6679      	str	r1, [r7, #100]	; 0x64
 8002ecc:	0413      	lsls	r3, r2, #16
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002eda:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ede:	f7fd fa07 	bl	80002f0 <__aeabi_ldivmod>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	B2.x = FIX16_DIV(B2.x, nB2);
 8002eec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ef6:	1411      	asrs	r1, r2, #16
 8002ef8:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002efa:	0413      	lsls	r3, r2, #16
 8002efc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002efe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f02:	461a      	mov	r2, r3
 8002f04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f0c:	f7fd f9f0 	bl	80002f0 <__aeabi_ldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	B2.y = FIX16_DIV(B2.y, nB2);
 8002f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002f1e:	461a      	mov	r2, r3
 8002f20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f24:	1411      	asrs	r1, r2, #16
 8002f26:	6579      	str	r1, [r7, #84]	; 0x54
 8002f28:	0413      	lsls	r3, r2, #16
 8002f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f30:	461a      	mov	r2, r3
 8002f32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f3a:	f7fd f9d9 	bl	80002f0 <__aeabi_ldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4613      	mov	r3, r2
 8002f44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	B2.z = FIX16_DIV(B2.z, nB2);
 8002f48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f52:	1411      	asrs	r1, r2, #16
 8002f54:	64f9      	str	r1, [r7, #76]	; 0x4c
 8002f56:	0413      	lsls	r3, r2, #16
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f5a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f5e:	461a      	mov	r2, r3
 8002f60:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f64:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f68:	f7fd f9c2 	bl	80002f0 <__aeabi_ldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	g2.x = FIX16_DIV(g2.x, ng2);
 8002f76:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f80:	1411      	asrs	r1, r2, #16
 8002f82:	6479      	str	r1, [r7, #68]	; 0x44
 8002f84:	0413      	lsls	r3, r2, #16
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
 8002f88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f96:	f7fd f9ab 	bl	80002f0 <__aeabi_ldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	g2.y = FIX16_DIV(g2.y, ng2);
 8002fa4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002fa8:	461a      	mov	r2, r3
 8002faa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fae:	1411      	asrs	r1, r2, #16
 8002fb0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002fb2:	0413      	lsls	r3, r2, #16
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fba:	461a      	mov	r2, r3
 8002fbc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fc4:	f7fd f994 	bl	80002f0 <__aeabi_ldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	g2.z = FIX16_DIV(g2.z, ng2);
 8002fd2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fdc:	1411      	asrs	r1, r2, #16
 8002fde:	6379      	str	r1, [r7, #52]	; 0x34
 8002fe0:	0413      	lsls	r3, r2, #16
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe8:	461a      	mov	r2, r3
 8002fea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ff2:	f7fd f97d 	bl	80002f0 <__aeabi_ldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	Vector3D u1;
	Vector3D u2;
	Vector3D u3;

	t1 = B1;
 8003000:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003004:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8003008:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800300c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	u1 = B2;
 8003010:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8003014:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003018:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800301c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	Vector3D B1xg1 = cross(B1, g1);
 8003020:	f507 7692 	add.w	r6, r7, #292	; 0x124
 8003024:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8003028:	466c      	mov	r4, sp
 800302a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800302e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003036:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800303a:	4630      	mov	r0, r6
 800303c:	f000 fb2e 	bl	800369c <cross>

	int32_t nB1g1 = norm(B1xg1);
 8003040:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003044:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003048:	f000 fbde 	bl	8003808 <norm>
 800304c:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	t2.x = FIX16_DIV(B1xg1.x, nB1g1);
 8003050:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003054:	461a      	mov	r2, r3
 8003056:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800305a:	1411      	asrs	r1, r2, #16
 800305c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800305e:	0413      	lsls	r3, r2, #16
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 8003062:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003066:	461a      	mov	r2, r3
 8003068:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800306c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003070:	f7fd f93e 	bl	80002f0 <__aeabi_ldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	t2.y = FIX16_DIV(B1xg1.y, nB1g1);
 800307e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003082:	461a      	mov	r2, r3
 8003084:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003088:	1411      	asrs	r1, r2, #16
 800308a:	6279      	str	r1, [r7, #36]	; 0x24
 800308c:	0413      	lsls	r3, r2, #16
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003094:	461a      	mov	r2, r3
 8003096:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800309a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800309e:	f7fd f927 	bl	80002f0 <__aeabi_ldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4613      	mov	r3, r2
 80030a8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	t2.z = FIX16_DIV(B1xg1.z, nB1g1);
 80030ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80030b0:	461a      	mov	r2, r3
 80030b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030b6:	1411      	asrs	r1, r2, #16
 80030b8:	61f9      	str	r1, [r7, #28]
 80030ba:	0413      	lsls	r3, r2, #16
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80030c2:	461a      	mov	r2, r3
 80030c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030cc:	f7fd f910 	bl	80002f0 <__aeabi_ldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	t3 = cross(t1, t2);
 80030da:	f507 75aa 	add.w	r5, r7, #340	; 0x154
 80030de:	466c      	mov	r4, sp
 80030e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80030e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030ec:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80030f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f2:	4628      	mov	r0, r5
 80030f4:	f000 fad2 	bl	800369c <cross>

	Vector3D B2xg2 = cross(B2, g2);
 80030f8:	f507 758c 	add.w	r5, r7, #280	; 0x118
 80030fc:	466c      	mov	r4, sp
 80030fe:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8003102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800310a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800310e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003110:	4628      	mov	r0, r5
 8003112:	f000 fac3 	bl	800369c <cross>

	int32_t nB2g2 = norm(B2xg2);
 8003116:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800311a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800311e:	f000 fb73 	bl	8003808 <norm>
 8003122:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
	u2.x = FIX16_DIV(B2xg2.x, nB2g2);
 8003126:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800312a:	461a      	mov	r2, r3
 800312c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003130:	1411      	asrs	r1, r2, #16
 8003132:	6179      	str	r1, [r7, #20]
 8003134:	0413      	lsls	r3, r2, #16
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800313c:	461a      	mov	r2, r3
 800313e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003142:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003146:	f7fd f8d3 	bl	80002f0 <__aeabi_ldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4613      	mov	r3, r2
 8003150:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	u2.y = FIX16_DIV(B2xg2.y, nB2g2);
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003158:	461a      	mov	r2, r3
 800315a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800315e:	1411      	asrs	r1, r2, #16
 8003160:	60f9      	str	r1, [r7, #12]
 8003162:	0413      	lsls	r3, r2, #16
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800316a:	461a      	mov	r2, r3
 800316c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003174:	f7fd f8bc 	bl	80002f0 <__aeabi_ldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	u2.z = FIX16_DIV(B2xg2.z, nB2g2);
 8003182:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003186:	461a      	mov	r2, r3
 8003188:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800318c:	1411      	asrs	r1, r2, #16
 800318e:	6079      	str	r1, [r7, #4]
 8003190:	0413      	lsls	r3, r2, #16
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003198:	461a      	mov	r2, r3
 800319a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800319e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031a2:	f7fd f8a5 	bl	80002f0 <__aeabi_ldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4613      	mov	r3, r2
 80031ac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	u3 = cross(u1, u2);
 80031b0:	f507 7598 	add.w	r5, r7, #304	; 0x130
 80031b4:	466c      	mov	r4, sp
 80031b6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80031ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80031c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c8:	4628      	mov	r0, r5
 80031ca:	f000 fa67 	bl	800369c <cross>

	Matrix3x3 U = create_matrix_from_vectors(u1, u2, u3);
 80031ce:	f107 05f4 	add.w	r5, r7, #244	; 0xf4
 80031d2:	ac03      	add	r4, sp, #12
 80031d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031e0:	466c      	mov	r4, sp
 80031e2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80031e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80031f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f4:	4628      	mov	r0, r5
 80031f6:	f000 fb65 	bl	80038c4 <create_matrix_from_vectors>
	Matrix3x3 T = create_matrix_from_vectors(t1, t2, t3);
 80031fa:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 80031fe:	ac03      	add	r4, sp, #12
 8003200:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003204:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800320c:	466c      	mov	r4, sp
 800320e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800321a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800321e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003220:	4628      	mov	r0, r5
 8003222:	f000 fb4f 	bl	80038c4 <create_matrix_from_vectors>

	Matrix3x3 C;
	Matrix3x3 Tt = transpose(T);
 8003226:	f107 0688 	add.w	r6, r7, #136	; 0x88
 800322a:	466d      	mov	r5, sp
 800322c:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8003230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003238:	e885 0003 	stmia.w	r5, {r0, r1}
 800323c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003242:	4630      	mov	r0, r6
 8003244:	f000 fb68 	bl	8003918 <transpose>

	C = MMult(U,Tt);
 8003248:	f107 06ac 	add.w	r6, r7, #172	; 0xac
 800324c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003250:	ac06      	add	r4, sp, #24
 8003252:	461d      	mov	r5, r3
 8003254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	466d      	mov	r5, sp
 8003262:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800326e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003272:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003278:	4630      	mov	r0, r6
 800327a:	f000 fb8f 	bl	800399c <MMult>
	*result = C;
 800327e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003282:	461d      	mov	r5, r3
 8003284:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	602b      	str	r3, [r5, #0]
}
 8003294:	bf00      	nop
 8003296:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800329a:	46bd      	mov	sp, r7
 800329c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	b002      	add	sp, #8
 80032a2:	4770      	bx	lr

080032a4 <q16_from_float>:
#define Q16_SHIFT   16
#define Q16_ONE     (1 << Q16_SHIFT)

/*----- helpers: float ⟷ Q16.16 ----------------------------------------*/
int32_t q16_from_float(float f)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int32_t)(f * (float)Q16_ONE + (f >= 0 ? 0.5f : -0.5f));
 80032ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80032b2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80032ec <q16_from_float+0x48>
 80032b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80032be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	db02      	blt.n	80032ce <q16_from_float+0x2a>
 80032c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032cc:	e001      	b.n	80032d2 <q16_from_float+0x2e>
 80032ce:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032da:	ee17 3a90 	vmov	r3, s15
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	47800000 	.word	0x47800000

080032f0 <q16_to_float>:
static inline float q16_to_float(int32_t q)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    return (float)q / (float)Q16_ONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003302:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800331c <q16_to_float+0x2c>
 8003306:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800330a:	eef0 7a66 	vmov.f32	s15, s13
}
 800330e:	eeb0 0a67 	vmov.f32	s0, s15
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	47800000 	.word	0x47800000

08003320 <asin16>:

/*----- reference asin:  returns radians in Q16.16 ----------------------*/
int32_t asin16(int32_t x_q16)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    float xf = q16_to_float(x_q16);          /*  -1 … +1                  */
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ffe1 	bl	80032f0 <q16_to_float>
 800332e:	ed87 0a03 	vstr	s0, [r7, #12]
    float rf = asinf(xf);                    /*  radians                  */
 8003332:	ed97 0a03 	vldr	s0, [r7, #12]
 8003336:	f006 fae7 	bl	8009908 <asinf>
 800333a:	ed87 0a02 	vstr	s0, [r7, #8]
    return q16_from_float(rf);               /*  back to Q16.16           */
 800333e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003342:	f7ff ffaf 	bl	80032a4 <q16_from_float>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <atan2_16>:

/*----- reference atan2:  returns radians in Q16.16 ---------------------*/
int32_t atan2_16(int32_t y_q16, int32_t x_q16)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    float yf = q16_to_float(y_q16);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffc8 	bl	80032f0 <q16_to_float>
 8003360:	ed87 0a05 	vstr	s0, [r7, #20]
    float xf = q16_to_float(x_q16);
 8003364:	6838      	ldr	r0, [r7, #0]
 8003366:	f7ff ffc3 	bl	80032f0 <q16_to_float>
 800336a:	ed87 0a04 	vstr	s0, [r7, #16]
    float rf = atan2f(yf, xf);               /*  radians                  */
 800336e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003372:	ed97 0a05 	vldr	s0, [r7, #20]
 8003376:	f006 faf9 	bl	800996c <atan2f>
 800337a:	ed87 0a03 	vstr	s0, [r7, #12]
    return q16_from_float(rf);
 800337e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003382:	f7ff ff8f 	bl	80032a4 <q16_from_float>
 8003386:	4603      	mov	r3, r0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <rot2eulerZYX>:

// In triad.c
void rot2eulerZYX(const Matrix3x3* R, Vector3D* angles) {
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    // 1. Correct pitch calculation (remove negation)
    int32_t rzx = R->z.x;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24

    // 2. Proper clamping
    rzx = (rzx < convert(-1)) ? convert(-1) : (rzx > convert(1)) ? convert(1) : rzx;
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f7fd f9fe 	bl	80007a4 <convert>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	4293      	cmp	r3, r2
 80033ae:	da05      	bge.n	80033bc <rot2eulerZYX+0x2c>
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f7fd f9f6 	bl	80007a4 <convert>
 80033b8:	4603      	mov	r3, r0
 80033ba:	e00c      	b.n	80033d6 <rot2eulerZYX+0x46>
 80033bc:	2001      	movs	r0, #1
 80033be:	f7fd f9f1 	bl	80007a4 <convert>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	4293      	cmp	r3, r2
 80033c8:	dd04      	ble.n	80033d4 <rot2eulerZYX+0x44>
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7fd f9ea 	bl	80007a4 <convert>
 80033d0:	4603      	mov	r3, r0
 80033d2:	e000      	b.n	80033d6 <rot2eulerZYX+0x46>
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24

    // 3. Use LUT-based asin for accuracy
    int32_t pitch_rad = -asin16(rzx);
 80033d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033da:	f7ff ffa1 	bl	8003320 <asin16>
 80033de:	4603      	mov	r3, r0
 80033e0:	425b      	negs	r3, r3
 80033e2:	623b      	str	r3, [r7, #32]

    int32_t cos_pitch = cosrad(pitch_rad);
 80033e4:	6a38      	ldr	r0, [r7, #32]
 80033e6:	f7fd ff9f 	bl	8001328 <cosrad>
 80033ea:	61f8      	str	r0, [r7, #28]
    int32_t rad2deg = FIX16_DIV(convert(180), PI16);
 80033ec:	20b4      	movs	r0, #180	; 0xb4
 80033ee:	f7fd f9d9 	bl	80007a4 <convert>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033fa:	1415      	asrs	r5, r2, #16
 80033fc:	0414      	lsls	r4, r2, #16
 80033fe:	4a76      	ldr	r2, [pc, #472]	; (80035d8 <rot2eulerZYX+0x248>)
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fc ff72 	bl	80002f0 <__aeabi_ldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
    int32_t pitch_deg = FIX16_MULT(pitch_rad, rad2deg);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	4618      	mov	r0, r3
 8003418:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	461a      	mov	r2, r3
 8003420:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003424:	fb02 f501 	mul.w	r5, r2, r1
 8003428:	fb00 f403 	mul.w	r4, r0, r3
 800342c:	442c      	add	r4, r5
 800342e:	fba0 2302 	umull	r2, r3, r0, r2
 8003432:	18e1      	adds	r1, r4, r3
 8003434:	460b      	mov	r3, r1
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0c10      	lsrs	r0, r2, #16
 8003440:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003444:	1419      	asrs	r1, r3, #16
 8003446:	4603      	mov	r3, r0
 8003448:	617b      	str	r3, [r7, #20]

    int32_t roll_deg = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t yaw_deg = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28

    // 4. Optimized gimbal lock detection
    #define GIMBAL_THRESHOLD 30  // 0.001 in 16.16 (1 << 16)/1000 ≈ 65
    if (abs(cos_pitch) > GIMBAL_THRESHOLD) {
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	bfb8      	it	lt
 8003458:	425b      	neglt	r3, r3
 800345a:	2b1e      	cmp	r3, #30
 800345c:	dd48      	ble.n	80034f0 <rot2eulerZYX+0x160>
        // 5. Use LUT-based atan2 with corrected arguments
        int32_t roll_rad = atan2_16(R->z.y, R->z.z);  // Standard ZYX formula
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f7ff ff71 	bl	8003350 <atan2_16>
 800346e:	60f8      	str	r0, [r7, #12]
        int32_t yaw_rad = atan2_16(R->y.x, R->x.x);   // Standard ZYX formula
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f7ff ff68 	bl	8003350 <atan2_16>
 8003480:	60b8      	str	r0, [r7, #8]

        roll_deg = FIX16_MULT(roll_rad, rad2deg);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4618      	mov	r0, r3
 8003486:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	461a      	mov	r2, r3
 800348e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003492:	fb02 f501 	mul.w	r5, r2, r1
 8003496:	fb00 f403 	mul.w	r4, r0, r3
 800349a:	442c      	add	r4, r5
 800349c:	fba0 2302 	umull	r2, r3, r0, r2
 80034a0:	18e1      	adds	r1, r4, r3
 80034a2:	460b      	mov	r3, r1
 80034a4:	f04f 0000 	mov.w	r0, #0
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	0c10      	lsrs	r0, r2, #16
 80034ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80034b2:	1419      	asrs	r1, r3, #16
 80034b4:	4603      	mov	r3, r0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        yaw_deg = FIX16_MULT(yaw_rad, rad2deg);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	461a      	mov	r2, r3
 80034c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034c8:	fb02 f501 	mul.w	r5, r2, r1
 80034cc:	fb00 f403 	mul.w	r4, r0, r3
 80034d0:	442c      	add	r4, r5
 80034d2:	fba0 2302 	umull	r2, r3, r0, r2
 80034d6:	18e1      	adds	r1, r4, r3
 80034d8:	460b      	mov	r3, r1
 80034da:	f04f 0000 	mov.w	r0, #0
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	0c10      	lsrs	r0, r2, #16
 80034e4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80034e8:	1419      	asrs	r1, r3, #16
 80034ea:	4603      	mov	r3, r0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ee:	e026      	b.n	800353e <rot2eulerZYX+0x1ae>
    } else {
        // 6. Correct gimbal lock handling
        int32_t yaw_rad = atan2_16(-R->x.y, R->y.y);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	425a      	negs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7ff ff27 	bl	8003350 <atan2_16>
 8003502:	6138      	str	r0, [r7, #16]
        yaw_deg = FIX16_MULT(yaw_rad, rad2deg);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4618      	mov	r0, r3
 8003508:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	461a      	mov	r2, r3
 8003510:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003514:	fb02 f501 	mul.w	r5, r2, r1
 8003518:	fb00 f403 	mul.w	r4, r0, r3
 800351c:	442c      	add	r4, r5
 800351e:	fba0 2302 	umull	r2, r3, r0, r2
 8003522:	18e1      	adds	r1, r4, r3
 8003524:	460b      	mov	r3, r1
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0c10      	lsrs	r0, r2, #16
 8003530:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003534:	1419      	asrs	r1, r3, #16
 8003536:	4603      	mov	r3, r0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
        // Set roll to 0 during gimbal lock (standard approach)
        roll_deg = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c

    // 7. Efficient angle wrapping
    #define ANGLE_180 (180 << 16)
    #define ANGLE_360 (360 << 16)

    roll_deg %= ANGLE_360;
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	4a26      	ldr	r2, [pc, #152]	; (80035dc <rot2eulerZYX+0x24c>)
 8003542:	fb82 1203 	smull	r1, r2, r2, r3
 8003546:	441a      	add	r2, r3
 8003548:	1611      	asrs	r1, r2, #24
 800354a:	17da      	asrs	r2, r3, #31
 800354c:	1a8a      	subs	r2, r1, r2
 800354e:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 8003552:	fb01 f202 	mul.w	r2, r1, r2
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
    roll_deg = (roll_deg > ANGLE_180) ? roll_deg - ANGLE_360 :
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8003560:	dd03      	ble.n	800356a <rot2eulerZYX+0x1da>
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 8003568:	e008      	b.n	800357c <rot2eulerZYX+0x1ec>
              (roll_deg < -ANGLE_180) ? roll_deg + ANGLE_360 : roll_deg;
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 8003570:	da03      	bge.n	800357a <rot2eulerZYX+0x1ea>
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 8003578:	e000      	b.n	800357c <rot2eulerZYX+0x1ec>
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    roll_deg = (roll_deg > ANGLE_180) ? roll_deg - ANGLE_360 :
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c

    yaw_deg %= ANGLE_360;
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <rot2eulerZYX+0x24c>)
 8003582:	fb82 1203 	smull	r1, r2, r2, r3
 8003586:	441a      	add	r2, r3
 8003588:	1611      	asrs	r1, r2, #24
 800358a:	17da      	asrs	r2, r3, #31
 800358c:	1a8a      	subs	r2, r1, r2
 800358e:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 8003592:	fb01 f202 	mul.w	r2, r1, r2
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
    yaw_deg = (yaw_deg > ANGLE_180) ? yaw_deg - ANGLE_360 :
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80035a0:	dd03      	ble.n	80035aa <rot2eulerZYX+0x21a>
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 80035a8:	e008      	b.n	80035bc <rot2eulerZYX+0x22c>
             (yaw_deg < -ANGLE_180) ? yaw_deg + ANGLE_360 : yaw_deg;
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 80035b0:	da03      	bge.n	80035ba <rot2eulerZYX+0x22a>
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 80035b8:	e000      	b.n	80035bc <rot2eulerZYX+0x22c>
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    yaw_deg = (yaw_deg > ANGLE_180) ? yaw_deg - ANGLE_360 :
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28

    angles->x = roll_deg;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c2:	601a      	str	r2, [r3, #0]
    angles->y = pitch_deg;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]
    angles->z = yaw_deg;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ce:	609a      	str	r2, [r3, #8]

}
 80035d0:	bf00      	nop
 80035d2:	3730      	adds	r7, #48	; 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bdb0      	pop	{r4, r5, r7, pc}
 80035d8:	0003243f 	.word	0x0003243f
 80035dc:	b60b60b7 	.word	0xb60b60b7

080035e0 <dot>:
#include <vector.h>
#include <fixp.h>

//////////////////Vector////////////////////////////////////////////

int32_t dot(Vector3D a, Vector3D b) {
 80035e0:	b082      	sub	sp, #8
 80035e2:	b4f0      	push	{r4, r5, r6, r7}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	1d3c      	adds	r4, r7, #4
 80035ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
    return Mult(a.x, b.x) + Mult(a.y, b.y) + Mult(a.z, b.z);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	461a      	mov	r2, r3
 80035fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003600:	fb02 f501 	mul.w	r5, r2, r1
 8003604:	fb00 f403 	mul.w	r4, r0, r3
 8003608:	442c      	add	r4, r5
 800360a:	fba0 2302 	umull	r2, r3, r0, r2
 800360e:	18e1      	adds	r1, r4, r3
 8003610:	460b      	mov	r3, r1
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	0c10      	lsrs	r0, r2, #16
 800361c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003620:	1419      	asrs	r1, r3, #16
 8003622:	4606      	mov	r6, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	461a      	mov	r2, r3
 8003630:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003634:	fb02 f501 	mul.w	r5, r2, r1
 8003638:	fb00 f403 	mul.w	r4, r0, r3
 800363c:	442c      	add	r4, r5
 800363e:	fba0 2302 	umull	r2, r3, r0, r2
 8003642:	18e1      	adds	r1, r4, r3
 8003644:	460b      	mov	r3, r1
 8003646:	f04f 0000 	mov.w	r0, #0
 800364a:	f04f 0100 	mov.w	r1, #0
 800364e:	0c10      	lsrs	r0, r2, #16
 8003650:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003654:	1419      	asrs	r1, r3, #16
 8003656:	4603      	mov	r3, r0
 8003658:	18f4      	adds	r4, r6, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4618      	mov	r0, r3
 800365e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	461a      	mov	r2, r3
 8003666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800366a:	fb02 f601 	mul.w	r6, r2, r1
 800366e:	fb00 f503 	mul.w	r5, r0, r3
 8003672:	4435      	add	r5, r6
 8003674:	fba0 2302 	umull	r2, r3, r0, r2
 8003678:	18e9      	adds	r1, r5, r3
 800367a:	460b      	mov	r3, r1
 800367c:	f04f 0000 	mov.w	r0, #0
 8003680:	f04f 0100 	mov.w	r1, #0
 8003684:	0c10      	lsrs	r0, r2, #16
 8003686:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800368a:	1419      	asrs	r1, r3, #16
 800368c:	4603      	mov	r3, r0
 800368e:	4423      	add	r3, r4
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bcf0      	pop	{r4, r5, r6, r7}
 8003698:	b002      	add	sp, #8
 800369a:	4770      	bx	lr

0800369c <cross>:

Vector3D cross(Vector3D a, Vector3D b){
 800369c:	b4f0      	push	{r4, r5, r6, r7}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	4638      	mov	r0, r7
 80036a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D c;
	c.x = Mult(a.y,b.z) - Mult(a.z,b.y);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4618      	mov	r0, r3
 80036ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	461a      	mov	r2, r3
 80036b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036ba:	fb02 f501 	mul.w	r5, r2, r1
 80036be:	fb00 f403 	mul.w	r4, r0, r3
 80036c2:	442c      	add	r4, r5
 80036c4:	fba0 2302 	umull	r2, r3, r0, r2
 80036c8:	18e1      	adds	r1, r4, r3
 80036ca:	460b      	mov	r3, r1
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	0c10      	lsrs	r0, r2, #16
 80036d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80036da:	1419      	asrs	r1, r3, #16
 80036dc:	4606      	mov	r6, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	461a      	mov	r2, r3
 80036ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036ee:	fb02 f501 	mul.w	r5, r2, r1
 80036f2:	fb00 f403 	mul.w	r4, r0, r3
 80036f6:	442c      	add	r4, r5
 80036f8:	fba0 2302 	umull	r2, r3, r0, r2
 80036fc:	18e1      	adds	r1, r4, r3
 80036fe:	460b      	mov	r3, r1
 8003700:	f04f 0000 	mov.w	r0, #0
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	0c10      	lsrs	r0, r2, #16
 800370a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800370e:	1419      	asrs	r1, r3, #16
 8003710:	4603      	mov	r3, r0
 8003712:	1af3      	subs	r3, r6, r3
 8003714:	617b      	str	r3, [r7, #20]
	c.y = Mult(a.z,b.x) - Mult(a.x,b.z);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	461a      	mov	r2, r3
 8003722:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003726:	fb02 f501 	mul.w	r5, r2, r1
 800372a:	fb00 f403 	mul.w	r4, r0, r3
 800372e:	442c      	add	r4, r5
 8003730:	fba0 2302 	umull	r2, r3, r0, r2
 8003734:	18e1      	adds	r1, r4, r3
 8003736:	460b      	mov	r3, r1
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0c10      	lsrs	r0, r2, #16
 8003742:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003746:	1419      	asrs	r1, r3, #16
 8003748:	4606      	mov	r6, r0
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	461a      	mov	r2, r3
 8003756:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800375a:	fb02 f501 	mul.w	r5, r2, r1
 800375e:	fb00 f403 	mul.w	r4, r0, r3
 8003762:	442c      	add	r4, r5
 8003764:	fba0 2302 	umull	r2, r3, r0, r2
 8003768:	18e1      	adds	r1, r4, r3
 800376a:	460b      	mov	r3, r1
 800376c:	f04f 0000 	mov.w	r0, #0
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	0c10      	lsrs	r0, r2, #16
 8003776:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800377a:	1419      	asrs	r1, r3, #16
 800377c:	4603      	mov	r3, r0
 800377e:	1af3      	subs	r3, r6, r3
 8003780:	61bb      	str	r3, [r7, #24]
	c.z = Mult(a.x,b.y) - Mult(a.y,b.z);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	461a      	mov	r2, r3
 800378e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003792:	fb02 f501 	mul.w	r5, r2, r1
 8003796:	fb00 f403 	mul.w	r4, r0, r3
 800379a:	442c      	add	r4, r5
 800379c:	fba0 2302 	umull	r2, r3, r0, r2
 80037a0:	18e1      	adds	r1, r4, r3
 80037a2:	460b      	mov	r3, r1
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0c10      	lsrs	r0, r2, #16
 80037ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80037b2:	1419      	asrs	r1, r3, #16
 80037b4:	4606      	mov	r6, r0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	461a      	mov	r2, r3
 80037c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037c6:	fb02 f501 	mul.w	r5, r2, r1
 80037ca:	fb00 f403 	mul.w	r4, r0, r3
 80037ce:	442c      	add	r4, r5
 80037d0:	fba0 2302 	umull	r2, r3, r0, r2
 80037d4:	18e1      	adds	r1, r4, r3
 80037d6:	460b      	mov	r3, r1
 80037d8:	f04f 0000 	mov.w	r0, #0
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	0c10      	lsrs	r0, r2, #16
 80037e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80037e6:	1419      	asrs	r1, r3, #16
 80037e8:	4603      	mov	r3, r0
 80037ea:	1af3      	subs	r3, r6, r3
 80037ec:	61fb      	str	r3, [r7, #28]
	return c;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	461c      	mov	r4, r3
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bcf0      	pop	{r4, r5, r6, r7}
 8003806:	4770      	bx	lr

08003808 <norm>:

Vector3D subtract_vector(Vector3D a, Vector3D b){
	return add_vector(a, scale_vector(b, convert(-1)));
}

int32_t norm(Vector3D a){ //find norm
 8003808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return sqrt(Mult(a.x, a.x) + Mult(a.y, a.y) + Mult(a.z, a.z));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	461a      	mov	r2, r3
 8003820:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003824:	fb02 f501 	mul.w	r5, r2, r1
 8003828:	fb00 f403 	mul.w	r4, r0, r3
 800382c:	442c      	add	r4, r5
 800382e:	fba0 2302 	umull	r2, r3, r0, r2
 8003832:	18e1      	adds	r1, r4, r3
 8003834:	460b      	mov	r3, r1
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0c10      	lsrs	r0, r2, #16
 8003840:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003844:	1419      	asrs	r1, r3, #16
 8003846:	4606      	mov	r6, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4618      	mov	r0, r3
 800384c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	461a      	mov	r2, r3
 8003854:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003858:	fb02 f501 	mul.w	r5, r2, r1
 800385c:	fb00 f403 	mul.w	r4, r0, r3
 8003860:	442c      	add	r4, r5
 8003862:	fba0 2302 	umull	r2, r3, r0, r2
 8003866:	18e1      	adds	r1, r4, r3
 8003868:	460b      	mov	r3, r1
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0c10      	lsrs	r0, r2, #16
 8003874:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003878:	1419      	asrs	r1, r3, #16
 800387a:	4603      	mov	r3, r0
 800387c:	18f4      	adds	r4, r6, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4618      	mov	r0, r3
 8003882:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	461a      	mov	r2, r3
 800388a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800388e:	fb02 f601 	mul.w	r6, r2, r1
 8003892:	fb00 f503 	mul.w	r5, r0, r3
 8003896:	4435      	add	r5, r6
 8003898:	fba0 2302 	umull	r2, r3, r0, r2
 800389c:	18e9      	adds	r1, r5, r3
 800389e:	460b      	mov	r3, r1
 80038a0:	f04f 0000 	mov.w	r0, #0
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	0c10      	lsrs	r0, r2, #16
 80038aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80038ae:	1419      	asrs	r1, r3, #16
 80038b0:	4603      	mov	r3, r0
 80038b2:	4423      	add	r3, r4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc fee7 	bl	8000688 <squareroot>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038c4 <create_matrix_from_vectors>:
    matrix.y.x = b; matrix.y.y = e; matrix.y.z = h;
    matrix.z.x = c; matrix.z.y = f; matrix.z.z = i;
    return matrix;
}

Matrix3x3 create_matrix_from_vectors(Vector3D a, Vector3D b, Vector3D c) {
 80038c4:	b4b0      	push	{r4, r5, r7}
 80038c6:	b08f      	sub	sp, #60	; 0x3c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4638      	mov	r0, r7
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Matrix3x3 matrix;
    matrix.x = a;
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	463a      	mov	r2, r7
 80038d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.y = b;
 80038de:	f107 0320 	add.w	r3, r7, #32
 80038e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80038e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.z = c;
 80038ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80038f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80038f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return matrix;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	461d      	mov	r5, r3
 80038fe:	f107 0414 	add.w	r4, r7, #20
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	602b      	str	r3, [r5, #0]
}
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	373c      	adds	r7, #60	; 0x3c
 8003912:	46bd      	mov	sp, r7
 8003914:	bcb0      	pop	{r4, r5, r7}
 8003916:	4770      	bx	lr

08003918 <transpose>:

Matrix3x3 transpose(Matrix3x3 a){
 8003918:	b084      	sub	sp, #16
 800391a:	b4b0      	push	{r4, r5, r7}
 800391c:	b095      	sub	sp, #84	; 0x54
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;

	a_vect1.x = a.x.x;
 800392a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
	a_vect1.y = a.y.x;
 800392e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003930:	64bb      	str	r3, [r7, #72]	; 0x48
	a_vect1.z = a.z.x;
 8003932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c

	a_vect2.x = a.x.y;
 8003936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
	a_vect2.y = a.y.y;
 800393a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
	a_vect2.z = a.z.y;
 800393e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003942:	643b      	str	r3, [r7, #64]	; 0x40

	a_vect3.x = a.x.z;
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
	a_vect3.y = a.y.z;
 8003948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
	a_vect3.z = a.z.z;
 800394c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003950:	637b      	str	r3, [r7, #52]	; 0x34

	Matrix3x3 b; // b er brugt til at gemme data
	b.x = a_vect1;
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800395a:	ca07      	ldmia	r2, {r0, r1, r2}
 800395c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.y = a_vect2;
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003968:	ca07      	ldmia	r2, {r0, r1, r2}
 800396a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.z = a_vect3;
 800396e:	f107 0320 	add.w	r3, r7, #32
 8003972:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003976:	ca07      	ldmia	r2, {r0, r1, r2}
 8003978:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	return b;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	461d      	mov	r5, r3
 8003980:	f107 0408 	add.w	r4, r7, #8
 8003984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800398a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	602b      	str	r3, [r5, #0]
}
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	3754      	adds	r7, #84	; 0x54
 8003994:	46bd      	mov	sp, r7
 8003996:	bcb0      	pop	{r4, r5, r7}
 8003998:	b004      	add	sp, #16
 800399a:	4770      	bx	lr

0800399c <MMult>:

Matrix3x3 MMult(Matrix3x3 a, Matrix3x3 b){ //Matrix mult
 800399c:	b084      	sub	sp, #16
 800399e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a0:	b0a5      	sub	sp, #148	; 0x94
 80039a2:	af06      	add	r7, sp, #24
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80039aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D b_vect1;
	Vector3D b_vect2;
	Vector3D b_vect3;
	b_vect1 = b.x;
 80039ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039b2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80039b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect2 = b.y;
 80039bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039c0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80039c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80039c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect3 = b.z;
 80039ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ce:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80039d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80039d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	////a////
	a = transpose(a);
 80039d8:	f107 0694 	add.w	r6, r7, #148	; 0x94
 80039dc:	466d      	mov	r5, sp
 80039de:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80039e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f4:	4630      	mov	r0, r6
 80039f6:	f7ff ff8f 	bl	8003918 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 80039fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039fe:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 8003a08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a0c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 8003a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a1a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//////calc
	Matrix3x3 svar;
	svar.x.x = dot(a_vect1, b_vect1);
 8003a24:	466a      	mov	r2, sp
 8003a26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a2e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a3a:	f7ff fdd1 	bl	80035e0 <dot>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	60fb      	str	r3, [r7, #12]
	svar.y.x = dot(a_vect1, b_vect2);
 8003a42:	466a      	mov	r2, sp
 8003a44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a58:	f7ff fdc2 	bl	80035e0 <dot>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	61bb      	str	r3, [r7, #24]
	svar.z.x = dot(a_vect1, b_vect3);
 8003a60:	466a      	mov	r2, sp
 8003a62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a76:	f7ff fdb3 	bl	80035e0 <dot>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24

	svar.x.y = dot(a_vect2, b_vect1);
 8003a7e:	466a      	mov	r2, sp
 8003a80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a88:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a94:	f7ff fda4 	bl	80035e0 <dot>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	613b      	str	r3, [r7, #16]
	svar.y.y = dot(a_vect2, b_vect2);
 8003a9c:	466a      	mov	r2, sp
 8003a9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aa6:	e882 0003 	stmia.w	r2, {r0, r1}
 8003aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ab2:	f7ff fd95 	bl	80035e0 <dot>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	61fb      	str	r3, [r7, #28]
	svar.z.y = dot(a_vect2, b_vect3);
 8003aba:	466a      	mov	r2, sp
 8003abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ac0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ac4:	e882 0003 	stmia.w	r2, {r0, r1}
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ace:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ad0:	f7ff fd86 	bl	80035e0 <dot>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28

	svar.x.z = dot(a_vect3, b_vect1);
 8003ad8:	466a      	mov	r2, sp
 8003ada:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ade:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ae2:	e882 0003 	stmia.w	r2, {r0, r1}
 8003ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aee:	f7ff fd77 	bl	80035e0 <dot>
 8003af2:	4603      	mov	r3, r0
 8003af4:	617b      	str	r3, [r7, #20]
	svar.y.z = dot(a_vect3, b_vect2);
 8003af6:	466a      	mov	r2, sp
 8003af8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003afc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b00:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b0c:	f7ff fd68 	bl	80035e0 <dot>
 8003b10:	4603      	mov	r3, r0
 8003b12:	623b      	str	r3, [r7, #32]
	svar.z.z = dot(a_vect3, b_vect3);
 8003b14:	466a      	mov	r2, sp
 8003b16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b1e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b2a:	f7ff fd59 	bl	80035e0 <dot>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c

	return svar;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	461d      	mov	r5, r3
 8003b36:	f107 040c 	add.w	r4, r7, #12
 8003b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	602b      	str	r3, [r5, #0]
}
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	377c      	adds	r7, #124	; 0x7c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003b50:	b004      	add	sp, #16
 8003b52:	4770      	bx	lr

08003b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b54:	480d      	ldr	r0, [pc, #52]	; (8003b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b58:	f7ff f900 	bl	8002d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b5c:	480c      	ldr	r0, [pc, #48]	; (8003b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b5e:	490d      	ldr	r1, [pc, #52]	; (8003b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <LoopForever+0xe>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b64:	e002      	b.n	8003b6c <LoopCopyDataInit>

08003b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6a:	3304      	adds	r3, #4

08003b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b70:	d3f9      	bcc.n	8003b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b74:	4c0a      	ldr	r4, [pc, #40]	; (8003ba0 <LoopForever+0x16>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b78:	e001      	b.n	8003b7e <LoopFillZerobss>

08003b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7c:	3204      	adds	r2, #4

08003b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b80:	d3fb      	bcc.n	8003b7a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003b82:	f004 fb87 	bl	8008294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b86:	f7fe fba3 	bl	80022d0 <main>

08003b8a <LoopForever>:

LoopForever:
    b LoopForever
 8003b8a:	e7fe      	b.n	8003b8a <LoopForever>
  ldr   r0, =_estack
 8003b8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b94:	20000a34 	.word	0x20000a34
  ldr r2, =_sidata
 8003b98:	0800b2f4 	.word	0x0800b2f4
  ldr r2, =_sbss
 8003b9c:	20000a34 	.word	0x20000a34
  ldr r4, =_ebss
 8003ba0:	200010f4 	.word	0x200010f4

08003ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ba4:	e7fe      	b.n	8003ba4 <ADC1_2_IRQHandler>

08003ba6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	f000 f95b 	bl	8003e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bb6:	200f      	movs	r0, #15
 8003bb8:	f000 f80e 	bl	8003bd8 <HAL_InitTick>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	71fb      	strb	r3, [r7, #7]
 8003bc6:	e001      	b.n	8003bcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bc8:	f7fe feae 	bl	8002928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bcc:	79fb      	ldrb	r3, [r7, #7]

}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003be4:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_InitTick+0x68>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d022      	beq.n	8003c32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bec:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_InitTick+0x6c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_InitTick+0x68>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f966 	bl	8003ed2 <HAL_SYSTICK_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	d809      	bhi.n	8003c26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c12:	2200      	movs	r2, #0
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1a:	f000 f932 	bl	8003e82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <HAL_InitTick+0x70>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	e007      	b.n	8003c36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
 8003c2a:	e004      	b.n	8003c36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e001      	b.n	8003c36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200009c8 	.word	0x200009c8
 8003c44:	200009c0 	.word	0x200009c0
 8003c48:	200009c4 	.word	0x200009c4

08003c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_IncTick+0x1c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_IncTick+0x20>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4413      	add	r3, r2
 8003c5a:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_IncTick+0x1c>)
 8003c5c:	6013      	str	r3, [r2, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	200010e0 	.word	0x200010e0
 8003c6c:	200009c8 	.word	0x200009c8

08003c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return uwTick;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_GetTick+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	200010e0 	.word	0x200010e0

08003c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c90:	f7ff ffee 	bl	8003c70 <HAL_GetTick>
 8003c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d004      	beq.n	8003cac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_Delay+0x40>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cac:	bf00      	nop
 8003cae:	f7ff ffdf 	bl	8003c70 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d8f7      	bhi.n	8003cae <HAL_Delay+0x26>
  {
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200009c8 	.word	0x200009c8

08003ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	60d3      	str	r3, [r2, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <__NVIC_GetPriorityGrouping+0x18>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	f003 0307 	and.w	r3, r3, #7
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db0b      	blt.n	8003d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4907      	ldr	r1, [pc, #28]	; (8003d68 <__NVIC_EnableIRQ+0x38>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2001      	movs	r0, #1
 8003d52:	fa00 f202 	lsl.w	r2, r0, r2
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	e000e100 	.word	0xe000e100

08003d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db0a      	blt.n	8003d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	490c      	ldr	r1, [pc, #48]	; (8003db8 <__NVIC_SetPriority+0x4c>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	0112      	lsls	r2, r2, #4
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d94:	e00a      	b.n	8003dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4908      	ldr	r1, [pc, #32]	; (8003dbc <__NVIC_SetPriority+0x50>)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3b04      	subs	r3, #4
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	440b      	add	r3, r1
 8003daa:	761a      	strb	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f1c3 0307 	rsb	r3, r3, #7
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	bf28      	it	cs
 8003dde:	2304      	movcs	r3, #4
 8003de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d902      	bls.n	8003df0 <NVIC_EncodePriority+0x30>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3b03      	subs	r3, #3
 8003dee:	e000      	b.n	8003df2 <NVIC_EncodePriority+0x32>
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	401a      	ands	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e08:	f04f 31ff 	mov.w	r1, #4294967295
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43d9      	mvns	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	4313      	orrs	r3, r2
         );
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e38:	d301      	bcc.n	8003e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00f      	b.n	8003e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <SysTick_Config+0x40>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e46:	210f      	movs	r1, #15
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	f7ff ff8e 	bl	8003d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <SysTick_Config+0x40>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <SysTick_Config+0x40>)
 8003e58:	2207      	movs	r2, #7
 8003e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	e000e010 	.word	0xe000e010

08003e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff29 	bl	8003ccc <__NVIC_SetPriorityGrouping>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e90:	f7ff ff40 	bl	8003d14 <__NVIC_GetPriorityGrouping>
 8003e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff90 	bl	8003dc0 <NVIC_EncodePriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5f 	bl	8003d6c <__NVIC_SetPriority>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff33 	bl	8003d30 <__NVIC_EnableIRQ>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffa4 	bl	8003e28 <SysTick_Config>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d005      	beq.n	8003f0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2204      	movs	r2, #4
 8003f06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e037      	b.n	8003f7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 020e 	bic.w	r2, r2, #14
 8003f1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 021f 	and.w	r2, r3, #31
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00c      	beq.n	8003f7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e047      	b.n	8004060 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 020e 	bic.w	r2, r2, #14
 8003fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f202 	lsl.w	r2, r1, r2
 8004012:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800401c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800403e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
    }
  }
  return status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800407a:	e15a      	b.n	8004332 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 814c 	beq.w	800432c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d005      	beq.n	80040ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d130      	bne.n	800410e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040e2:	2201      	movs	r2, #1
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f003 0201 	and.w	r2, r3, #1
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d017      	beq.n	800414a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d123      	bne.n	800419e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	08da      	lsrs	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3208      	adds	r2, #8
 800415e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	08da      	lsrs	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3208      	adds	r2, #8
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0203 	and.w	r2, r3, #3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a6 	beq.w	800432c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e0:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <HAL_GPIO_Init+0x2e4>)
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <HAL_GPIO_Init+0x2e4>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6613      	str	r3, [r2, #96]	; 0x60
 80041ec:	4b58      	ldr	r3, [pc, #352]	; (8004350 <HAL_GPIO_Init+0x2e4>)
 80041ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041f8:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_GPIO_Init+0x2e8>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	3302      	adds	r3, #2
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	220f      	movs	r2, #15
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004222:	d01f      	beq.n	8004264 <HAL_GPIO_Init+0x1f8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a4c      	ldr	r2, [pc, #304]	; (8004358 <HAL_GPIO_Init+0x2ec>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d019      	beq.n	8004260 <HAL_GPIO_Init+0x1f4>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a4b      	ldr	r2, [pc, #300]	; (800435c <HAL_GPIO_Init+0x2f0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <HAL_GPIO_Init+0x1f0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <HAL_GPIO_Init+0x2f4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00d      	beq.n	8004258 <HAL_GPIO_Init+0x1ec>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a49      	ldr	r2, [pc, #292]	; (8004364 <HAL_GPIO_Init+0x2f8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d007      	beq.n	8004254 <HAL_GPIO_Init+0x1e8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a48      	ldr	r2, [pc, #288]	; (8004368 <HAL_GPIO_Init+0x2fc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_GPIO_Init+0x1e4>
 800424c:	2305      	movs	r3, #5
 800424e:	e00a      	b.n	8004266 <HAL_GPIO_Init+0x1fa>
 8004250:	2306      	movs	r3, #6
 8004252:	e008      	b.n	8004266 <HAL_GPIO_Init+0x1fa>
 8004254:	2304      	movs	r3, #4
 8004256:	e006      	b.n	8004266 <HAL_GPIO_Init+0x1fa>
 8004258:	2303      	movs	r3, #3
 800425a:	e004      	b.n	8004266 <HAL_GPIO_Init+0x1fa>
 800425c:	2302      	movs	r3, #2
 800425e:	e002      	b.n	8004266 <HAL_GPIO_Init+0x1fa>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_GPIO_Init+0x1fa>
 8004264:	2300      	movs	r3, #0
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	f002 0203 	and.w	r2, r2, #3
 800426c:	0092      	lsls	r2, r2, #2
 800426e:	4093      	lsls	r3, r2
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004276:	4937      	ldr	r1, [pc, #220]	; (8004354 <HAL_GPIO_Init+0x2e8>)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004284:	4b39      	ldr	r3, [pc, #228]	; (800436c <HAL_GPIO_Init+0x300>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43db      	mvns	r3, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042a8:	4a30      	ldr	r2, [pc, #192]	; (800436c <HAL_GPIO_Init+0x300>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <HAL_GPIO_Init+0x300>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_GPIO_Init+0x300>)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042d8:	4b24      	ldr	r3, [pc, #144]	; (800436c <HAL_GPIO_Init+0x300>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042fc:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HAL_GPIO_Init+0x300>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_GPIO_Init+0x300>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004326:	4a11      	ldr	r2, [pc, #68]	; (800436c <HAL_GPIO_Init+0x300>)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3301      	adds	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	f47f ae9d 	bne.w	800407c <HAL_GPIO_Init+0x10>
  }
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40021000 	.word	0x40021000
 8004354:	40010000 	.word	0x40010000
 8004358:	48000400 	.word	0x48000400
 800435c:	48000800 	.word	0x48000800
 8004360:	48000c00 	.word	0x48000c00
 8004364:	48001000 	.word	0x48001000
 8004368:	48001400 	.word	0x48001400
 800436c:	40010400 	.word	0x40010400

08004370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	807b      	strh	r3, [r7, #2]
 800437c:	4613      	mov	r3, r2
 800437e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004380:	787b      	ldrb	r3, [r7, #1]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800438c:	e002      	b.n	8004394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e08d      	b.n	80044ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe fad2 	bl	8002970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	; 0x24
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	e006      	b.n	8004428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d108      	bne.n	8004442 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	e007      	b.n	8004452 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
 80044e8:	4613      	mov	r3, r2
 80044ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	f040 80fd 	bne.w	80046f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x30>
 8004504:	2302      	movs	r3, #2
 8004506:	e0f6      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x21e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004510:	f7ff fbae 	bl	8003c70 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 faf6 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0e1      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2221      	movs	r2, #33	; 0x21
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2210      	movs	r2, #16
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	893a      	ldrh	r2, [r7, #8]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2bff      	cmp	r3, #255	; 0xff
 8004562:	d906      	bls.n	8004572 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800456a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e007      	b.n	8004582 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800457c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004580:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d024      	beq.n	80045d4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	8979      	ldrh	r1, [r7, #10]
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_I2C_Master_Transmit+0x228>)
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fcf1 	bl	8004fb4 <I2C_TransferConfig>
 80045d2:	e066      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	8979      	ldrh	r1, [r7, #10]
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_I2C_Master_Transmit+0x228>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fce6 	bl	8004fb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045e8:	e05b      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	6a39      	ldr	r1, [r7, #32]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fae9 	bl	8004bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e07b      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d034      	beq.n	80046a2 <HAL_I2C_Master_Transmit+0x1ca>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d130      	bne.n	80046a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2200      	movs	r2, #0
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa62 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e04d      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2bff      	cmp	r3, #255	; 0xff
 8004662:	d90e      	bls.n	8004682 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	b2da      	uxtb	r2, r3
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	2300      	movs	r3, #0
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fc9a 	bl	8004fb4 <I2C_TransferConfig>
 8004680:	e00f      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	b2da      	uxtb	r2, r3
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fc89 	bl	8004fb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d19e      	bne.n	80045ea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	6a39      	ldr	r1, [r7, #32]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 facf 	bl	8004c54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01a      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2220      	movs	r2, #32
 80046c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_I2C_Master_Transmit+0x22c>)
 80046d4:	400b      	ands	r3, r1
 80046d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	80002000 	.word	0x80002000
 8004704:	fe00e800 	.word	0xfe00e800

08004708 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	461a      	mov	r2, r3
 8004714:	460b      	mov	r3, r1
 8004716:	817b      	strh	r3, [r7, #10]
 8004718:	4613      	mov	r3, r2
 800471a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	f040 80db 	bne.w	80048e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_I2C_Master_Receive+0x30>
 8004734:	2302      	movs	r3, #2
 8004736:	e0d4      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004740:	f7ff fa96 	bl	8003c70 <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	2319      	movs	r3, #25
 800474c:	2201      	movs	r2, #1
 800474e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9de 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0bf      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2222      	movs	r2, #34	; 0x22
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2210      	movs	r2, #16
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	893a      	ldrh	r2, [r7, #8]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2bff      	cmp	r3, #255	; 0xff
 8004792:	d90e      	bls.n	80047b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	22ff      	movs	r2, #255	; 0xff
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	8979      	ldrh	r1, [r7, #10]
 80047a2:	4b52      	ldr	r3, [pc, #328]	; (80048ec <HAL_I2C_Master_Receive+0x1e4>)
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fc02 	bl	8004fb4 <I2C_TransferConfig>
 80047b0:	e06d      	b.n	800488e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	8979      	ldrh	r1, [r7, #10]
 80047c4:	4b49      	ldr	r3, [pc, #292]	; (80048ec <HAL_I2C_Master_Receive+0x1e4>)
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fbf1 	bl	8004fb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047d2:	e05c      	b.n	800488e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	6a39      	ldr	r1, [r7, #32]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fa7f 	bl	8004cdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e07c      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d034      	beq.n	800488e <HAL_I2C_Master_Receive+0x186>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d130      	bne.n	800488e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2200      	movs	r2, #0
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f96c 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e04d      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2bff      	cmp	r3, #255	; 0xff
 800484e:	d90e      	bls.n	800486e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	22ff      	movs	r2, #255	; 0xff
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	b2da      	uxtb	r2, r3
 800485c:	8979      	ldrh	r1, [r7, #10]
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fba4 	bl	8004fb4 <I2C_TransferConfig>
 800486c:	e00f      	b.n	800488e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	b2da      	uxtb	r2, r3
 800487e:	8979      	ldrh	r1, [r7, #10]
 8004880:	2300      	movs	r3, #0
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fb93 	bl	8004fb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d19d      	bne.n	80047d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6a39      	ldr	r1, [r7, #32]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f9d9 	bl	8004c54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e01a      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2220      	movs	r2, #32
 80048b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_I2C_Master_Receive+0x1e8>)
 80048c0:	400b      	ands	r3, r1
 80048c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	80002400 	.word	0x80002400
 80048f0:	fe00e800 	.word	0xfe00e800

080048f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	460b      	mov	r3, r1
 8004902:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b20      	cmp	r3, #32
 8004912:	f040 80d6 	bne.w	8004ac2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	d101      	bne.n	800492a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
 8004928:	e0cc      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2C_IsDeviceReady+0x44>
 8004934:	2302      	movs	r3, #2
 8004936:	e0c5      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2224      	movs	r2, #36	; 0x24
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d107      	bne.n	8004966 <HAL_I2C_IsDeviceReady+0x72>
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004964:	e006      	b.n	8004974 <HAL_I2C_IsDeviceReady+0x80>
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004970:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800497a:	f7ff f979 	bl	8003c70 <HAL_GetTick>
 800497e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b20      	cmp	r3, #32
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049ac:	e034      	b.n	8004a18 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d01a      	beq.n	80049ec <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7ff f95b 	bl	8003c70 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <HAL_I2C_IsDeviceReady+0xd8>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e06b      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <HAL_I2C_IsDeviceReady+0x130>
 8004a1e:	7fbb      	ldrb	r3, [r7, #30]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0c4      	beq.n	80049ae <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d01a      	beq.n	8004a68 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2120      	movs	r1, #32
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f869 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e03b      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2220      	movs	r2, #32
 8004a52:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e02d      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2120      	movs	r1, #32
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f84e 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e020      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2210      	movs	r2, #16
 8004a88:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	3301      	adds	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f63f af56 	bhi.w	800494e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d103      	bne.n	8004aea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d007      	beq.n	8004b08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	619a      	str	r2, [r3, #24]
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b24:	e03b      	b.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f962 	bl	8004df4 <I2C_IsErrorOccurred>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e041      	b.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d02d      	beq.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b42:	f7ff f895 	bl	8003c70 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d122      	bne.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d113      	bne.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e00f      	b.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d0b4      	beq.n	8004b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bd2:	e033      	b.n	8004c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f90b 	bl	8004df4 <I2C_IsErrorOccurred>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e031      	b.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d025      	beq.n	8004c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7ff f83e 	bl	8003c70 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11a      	bne.n	8004c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d013      	beq.n	8004c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d1c4      	bne.n	8004bd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c60:	e02f      	b.n	8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f8c4 	bl	8004df4 <I2C_IsErrorOccurred>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e02d      	b.n	8004cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fe fffb 	bl	8003c70 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11a      	bne.n	8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d013      	beq.n	8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e007      	b.n	8004cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d1c8      	bne.n	8004c62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004cec:	e071      	b.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f87e 	bl	8004df4 <I2C_IsErrorOccurred>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d13b      	bne.n	8004d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d138      	bne.n	8004d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d105      	bne.n	8004d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d121      	bne.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2220      	movs	r2, #32
 8004d52:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004d60:	400b      	ands	r3, r1
 8004d62:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
 8004d80:	e002      	b.n	8004d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004d88:	f7fe ff72 	bl	8003c70 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d302      	bcc.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d119      	bne.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d116      	bne.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00f      	beq.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d002      	beq.n	8004de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d083      	beq.n	8004cee <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	fe00e800 	.word	0xfe00e800

08004df4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d068      	beq.n	8004ef2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2210      	movs	r2, #16
 8004e26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e28:	e049      	b.n	8004ebe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d045      	beq.n	8004ebe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fe ff1d 	bl	8003c70 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_IsErrorOccurred+0x54>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d13a      	bne.n	8004ebe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6a:	d121      	bne.n	8004eb0 <I2C_IsErrorOccurred+0xbc>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e72:	d01d      	beq.n	8004eb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d01a      	beq.n	8004eb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e8a:	f7fe fef1 	bl	8003c70 <HAL_GetTick>
 8004e8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e90:	e00e      	b.n	8004eb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e92:	f7fe feed 	bl	8003c70 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b19      	cmp	r3, #25
 8004e9e:	d907      	bls.n	8004eb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	f043 0320 	orr.w	r3, r3, #32
 8004ea6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004eae:	e006      	b.n	8004ebe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d1e9      	bne.n	8004e92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d003      	beq.n	8004ed4 <I2C_IsErrorOccurred+0xe0>
 8004ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0aa      	beq.n	8004e2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f043 0308 	orr.w	r3, r3, #8
 8004f2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f043 0302 	orr.w	r3, r3, #2
 8004f4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01c      	beq.n	8004fa2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff fdaf 	bl	8004acc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <I2C_IsErrorOccurred+0x1bc>)
 8004f7a:	400b      	ands	r3, r1
 8004f7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3728      	adds	r7, #40	; 0x28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	fe00e800 	.word	0xfe00e800

08004fb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fcc:	7a7b      	ldrb	r3, [r7, #9]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	0d5b      	lsrs	r3, r3, #21
 8004fee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <I2C_TransferConfig+0x60>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	ea02 0103 	and.w	r1, r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	03ff63ff 	.word	0x03ff63ff

08005018 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b20      	cmp	r3, #32
 800502c:	d138      	bne.n	80050a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005038:	2302      	movs	r3, #2
 800503a:	e032      	b.n	80050a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2224      	movs	r2, #36	; 0x24
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800506a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d139      	bne.n	8005138 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e033      	b.n	800513a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2224      	movs	r2, #36	; 0x24
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005100:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d141      	bne.n	80051da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005156:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005162:	d131      	bne.n	80051c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005164:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516a:	4a46      	ldr	r2, [pc, #280]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005174:	4b43      	ldr	r3, [pc, #268]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800517c:	4a41      	ldr	r2, [pc, #260]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005182:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005184:	4b40      	ldr	r3, [pc, #256]	; (8005288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2232      	movs	r2, #50	; 0x32
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	4a3f      	ldr	r2, [pc, #252]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	0c9b      	lsrs	r3, r3, #18
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800519a:	e002      	b.n	80051a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ae:	d102      	bne.n	80051b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f2      	bne.n	800519c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051b6:	4b33      	ldr	r3, [pc, #204]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c2:	d158      	bne.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e057      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051c8:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ce:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051d8:	e04d      	b.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d141      	bne.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051e2:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d131      	bne.n	8005254 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f6:	4a23      	ldr	r2, [pc, #140]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005200:	4b20      	ldr	r3, [pc, #128]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005208:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800520e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2232      	movs	r2, #50	; 0x32
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	4a1c      	ldr	r2, [pc, #112]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	0c9b      	lsrs	r3, r3, #18
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005226:	e002      	b.n	800522e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3b01      	subs	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523a:	d102      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f2      	bne.n	8005228 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524e:	d112      	bne.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e011      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525a:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005264:	e007      	b.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800526e:	4a05      	ldr	r2, [pc, #20]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005274:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40007000 	.word	0x40007000
 8005288:	200009c0 	.word	0x200009c0
 800528c:	431bde83 	.word	0x431bde83

08005290 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4a04      	ldr	r2, [pc, #16]	; (80052ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800529a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800529e:	6093      	str	r3, [r2, #8]
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40007000 	.word	0x40007000

080052b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e301      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d075      	beq.n	80053ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ce:	4ba3      	ldr	r3, [pc, #652]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d8:	4ba0      	ldr	r3, [pc, #640]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	d102      	bne.n	80052ee <HAL_RCC_OscConfig+0x3e>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_OscConfig+0x44>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d10b      	bne.n	800530c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	4b99      	ldr	r3, [pc, #612]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d05b      	beq.n	80053b8 <HAL_RCC_OscConfig+0x108>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d157      	bne.n	80053b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e2dc      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d106      	bne.n	8005324 <HAL_RCC_OscConfig+0x74>
 8005316:	4b91      	ldr	r3, [pc, #580]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a90      	ldr	r2, [pc, #576]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e01d      	b.n	8005360 <HAL_RCC_OscConfig+0xb0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x98>
 800532e:	4b8b      	ldr	r3, [pc, #556]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a8a      	ldr	r2, [pc, #552]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a87      	ldr	r2, [pc, #540]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0xb0>
 8005348:	4b84      	ldr	r3, [pc, #528]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a83      	ldr	r2, [pc, #524]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800534e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a80      	ldr	r2, [pc, #512]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800535a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800535e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fe fc82 	bl	8003c70 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005370:	f7fe fc7e 	bl	8003c70 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e2a1      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005382:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0xc0>
 800538e:	e014      	b.n	80053ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fe fc6e 	bl	8003c70 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005398:	f7fe fc6a 	bl	8003c70 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e28d      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053aa:	4b6c      	ldr	r3, [pc, #432]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0xe8>
 80053b6:	e000      	b.n	80053ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d075      	beq.n	80054b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c6:	4b65      	ldr	r3, [pc, #404]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d0:	4b62      	ldr	r3, [pc, #392]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	d102      	bne.n	80053e6 <HAL_RCC_OscConfig+0x136>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d002      	beq.n	80053ec <HAL_RCC_OscConfig+0x13c>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d11f      	bne.n	800542c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ec:	4b5b      	ldr	r3, [pc, #364]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_RCC_OscConfig+0x154>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e260      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b55      	ldr	r3, [pc, #340]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	4952      	ldr	r1, [pc, #328]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005418:	4b51      	ldr	r3, [pc, #324]	; (8005560 <HAL_RCC_OscConfig+0x2b0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fbdb 	bl	8003bd8 <HAL_InitTick>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d043      	beq.n	80054b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e24c      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d023      	beq.n	800547c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005434:	4b49      	ldr	r3, [pc, #292]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a48      	ldr	r2, [pc, #288]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800543a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fe fc16 	bl	8003c70 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005448:	f7fe fc12 	bl	8003c70 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e235      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800545a:	4b40      	ldr	r3, [pc, #256]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005466:	4b3d      	ldr	r3, [pc, #244]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	061b      	lsls	r3, r3, #24
 8005474:	4939      	ldr	r1, [pc, #228]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
 800547a:	e01a      	b.n	80054b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547c:	4b37      	ldr	r3, [pc, #220]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a36      	ldr	r2, [pc, #216]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005488:	f7fe fbf2 	bl	8003c70 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005490:	f7fe fbee 	bl	8003c70 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e211      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a2:	4b2e      	ldr	r3, [pc, #184]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x1e0>
 80054ae:	e000      	b.n	80054b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d03c      	beq.n	8005538 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01c      	beq.n	8005500 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c6:	4b25      	ldr	r3, [pc, #148]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054cc:	4a23      	ldr	r2, [pc, #140]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d6:	f7fe fbcb 	bl	8003c70 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054de:	f7fe fbc7 	bl	8003c70 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e1ea      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f0:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ef      	beq.n	80054de <HAL_RCC_OscConfig+0x22e>
 80054fe:	e01b      	b.n	8005538 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005506:	4a15      	ldr	r2, [pc, #84]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7fe fbae 	bl	8003c70 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005518:	f7fe fbaa 	bl	8003c70 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e1cd      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800552c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ef      	bne.n	8005518 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80ab 	beq.w	800569c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005546:	2300      	movs	r3, #0
 8005548:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_RCC_OscConfig+0x2b4>
 8005556:	2301      	movs	r3, #1
 8005558:	e005      	b.n	8005566 <HAL_RCC_OscConfig+0x2b6>
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	200009c4 	.word	0x200009c4
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556a:	4bad      	ldr	r3, [pc, #692]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	4aac      	ldr	r2, [pc, #688]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005574:	6593      	str	r3, [r2, #88]	; 0x58
 8005576:	4baa      	ldr	r3, [pc, #680]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005582:	2301      	movs	r3, #1
 8005584:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005586:	4ba7      	ldr	r3, [pc, #668]	; (8005824 <HAL_RCC_OscConfig+0x574>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d118      	bne.n	80055c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005592:	4ba4      	ldr	r3, [pc, #656]	; (8005824 <HAL_RCC_OscConfig+0x574>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4aa3      	ldr	r2, [pc, #652]	; (8005824 <HAL_RCC_OscConfig+0x574>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559e:	f7fe fb67 	bl	8003c70 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fe fb63 	bl	8003c70 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e186      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055b8:	4b9a      	ldr	r3, [pc, #616]	; (8005824 <HAL_RCC_OscConfig+0x574>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d108      	bne.n	80055de <HAL_RCC_OscConfig+0x32e>
 80055cc:	4b94      	ldr	r3, [pc, #592]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	4a93      	ldr	r2, [pc, #588]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055dc:	e024      	b.n	8005628 <HAL_RCC_OscConfig+0x378>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d110      	bne.n	8005608 <HAL_RCC_OscConfig+0x358>
 80055e6:	4b8e      	ldr	r3, [pc, #568]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	4a8c      	ldr	r2, [pc, #560]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055f6:	4b8a      	ldr	r3, [pc, #552]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	4a88      	ldr	r2, [pc, #544]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005606:	e00f      	b.n	8005628 <HAL_RCC_OscConfig+0x378>
 8005608:	4b85      	ldr	r3, [pc, #532]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	4a84      	ldr	r2, [pc, #528]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005618:	4b81      	ldr	r3, [pc, #516]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	4a80      	ldr	r2, [pc, #512]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005620:	f023 0304 	bic.w	r3, r3, #4
 8005624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d016      	beq.n	800565e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fe fb1e 	bl	8003c70 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005636:	e00a      	b.n	800564e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005638:	f7fe fb1a 	bl	8003c70 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	; 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e13b      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800564e:	4b74      	ldr	r3, [pc, #464]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0ed      	beq.n	8005638 <HAL_RCC_OscConfig+0x388>
 800565c:	e015      	b.n	800568a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565e:	f7fe fb07 	bl	8003c70 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005664:	e00a      	b.n	800567c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005666:	f7fe fb03 	bl	8003c70 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	f241 3288 	movw	r2, #5000	; 0x1388
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e124      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800567c:	4b68      	ldr	r3, [pc, #416]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1ed      	bne.n	8005666 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800568a:	7ffb      	ldrb	r3, [r7, #31]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d105      	bne.n	800569c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005690:	4b63      	ldr	r3, [pc, #396]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005694:	4a62      	ldr	r2, [pc, #392]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d03c      	beq.n	8005722 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01c      	beq.n	80056ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056b0:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80056b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056b6:	4a5a      	ldr	r2, [pc, #360]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fe fad6 	bl	8003c70 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c8:	f7fe fad2 	bl	8003c70 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0f5      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056da:	4b51      	ldr	r3, [pc, #324]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80056dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ef      	beq.n	80056c8 <HAL_RCC_OscConfig+0x418>
 80056e8:	e01b      	b.n	8005722 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ea:	4b4d      	ldr	r3, [pc, #308]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80056ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f0:	4a4b      	ldr	r2, [pc, #300]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fa:	f7fe fab9 	bl	8003c70 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005702:	f7fe fab5 	bl	8003c70 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e0d8      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1ef      	bne.n	8005702 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80cc 	beq.w	80058c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800572c:	4b3c      	ldr	r3, [pc, #240]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	2b0c      	cmp	r3, #12
 8005736:	f000 8086 	beq.w	8005846 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d15a      	bne.n	80057f8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005742:	4b37      	ldr	r3, [pc, #220]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a36      	ldr	r2, [pc, #216]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fe fa8f 	bl	8003c70 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005756:	f7fe fa8b 	bl	8003c70 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0ae      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005768:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <HAL_RCC_OscConfig+0x578>)
 800577a:	4013      	ands	r3, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6a11      	ldr	r1, [r2, #32]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005784:	3a01      	subs	r2, #1
 8005786:	0112      	lsls	r2, r2, #4
 8005788:	4311      	orrs	r1, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800578e:	0212      	lsls	r2, r2, #8
 8005790:	4311      	orrs	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005796:	0852      	lsrs	r2, r2, #1
 8005798:	3a01      	subs	r2, #1
 800579a:	0552      	lsls	r2, r2, #21
 800579c:	4311      	orrs	r1, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057a2:	0852      	lsrs	r2, r2, #1
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0652      	lsls	r2, r2, #25
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057ae:	06d2      	lsls	r2, r2, #27
 80057b0:	430a      	orrs	r2, r1
 80057b2:	491b      	ldr	r1, [pc, #108]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c4:	4b16      	ldr	r3, [pc, #88]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fe fa4e 	bl	8003c70 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fe fa4a 	bl	8003c70 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e06d      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0x528>
 80057f6:	e065      	b.n	80058c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a08      	ldr	r2, [pc, #32]	; (8005820 <HAL_RCC_OscConfig+0x570>)
 80057fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fe fa34 	bl	8003c70 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580a:	e00f      	b.n	800582c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580c:	f7fe fa30 	bl	8003c70 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d908      	bls.n	800582c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e053      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
 8005828:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800582c:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <HAL_RCC_OscConfig+0x620>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e9      	bne.n	800580c <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_RCC_OscConfig+0x620>)
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	4924      	ldr	r1, [pc, #144]	; (80058d0 <HAL_RCC_OscConfig+0x620>)
 800583e:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <HAL_RCC_OscConfig+0x624>)
 8005840:	4013      	ands	r3, r2
 8005842:	60cb      	str	r3, [r1, #12]
 8005844:	e03e      	b.n	80058c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e039      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005852:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <HAL_RCC_OscConfig+0x620>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 0203 	and.w	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	429a      	cmp	r2, r3
 8005864:	d12c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	3b01      	subs	r3, #1
 8005872:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d123      	bne.n	80058c0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d11b      	bne.n	80058c0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d113      	bne.n	80058c0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	3b01      	subs	r3, #1
 80058a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d109      	bne.n	80058c0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	3b01      	subs	r3, #1
 80058ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	feeefffc 	.word	0xfeeefffc

080058d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e11e      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058f0:	4b91      	ldr	r3, [pc, #580]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d910      	bls.n	8005920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b8e      	ldr	r3, [pc, #568]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f023 020f 	bic.w	r2, r3, #15
 8005906:	498c      	ldr	r1, [pc, #560]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	4313      	orrs	r3, r2
 800590c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590e:	4b8a      	ldr	r3, [pc, #552]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d001      	beq.n	8005920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e106      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d073      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d129      	bne.n	8005988 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005934:	4b81      	ldr	r3, [pc, #516]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0f4      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005944:	f000 f99e 	bl	8005c84 <RCC_GetSysClockFreqFromPLLSource>
 8005948:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <HAL_RCC_ClockConfig+0x268>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d93f      	bls.n	80059d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005952:	4b7a      	ldr	r3, [pc, #488]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005966:	2b00      	cmp	r3, #0
 8005968:	d033      	beq.n	80059d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800596e:	2b00      	cmp	r3, #0
 8005970:	d12f      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005972:	4b72      	ldr	r3, [pc, #456]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	4a70      	ldr	r2, [pc, #448]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 800597c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005980:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e024      	b.n	80059d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005990:	4b6a      	ldr	r3, [pc, #424]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0c6      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a0:	4b66      	ldr	r3, [pc, #408]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0be      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059b0:	f000 f8ce 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4a61      	ldr	r2, [pc, #388]	; (8005b40 <HAL_RCC_ClockConfig+0x268>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d909      	bls.n	80059d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059be:	4b5f      	ldr	r3, [pc, #380]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c6:	4a5d      	ldr	r2, [pc, #372]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 80059c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059d2:	4b5a      	ldr	r3, [pc, #360]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f023 0203 	bic.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4957      	ldr	r1, [pc, #348]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e4:	f7fe f944 	bl	8003c70 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ec:	f7fe f940 	bl	8003c70 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e095      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	4b4e      	ldr	r3, [pc, #312]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 020c 	and.w	r2, r3, #12
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1eb      	bne.n	80059ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d023      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a2c:	4b43      	ldr	r3, [pc, #268]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a42      	ldr	r2, [pc, #264]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a44:	4b3d      	ldr	r3, [pc, #244]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a4c:	4a3b      	ldr	r2, [pc, #236]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a54:	4b39      	ldr	r3, [pc, #228]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4936      	ldr	r1, [pc, #216]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b80      	cmp	r3, #128	; 0x80
 8005a6c:	d105      	bne.n	8005a7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a6e:	4b33      	ldr	r3, [pc, #204]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	4a32      	ldr	r2, [pc, #200]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a7a:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d21d      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a88:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f023 020f 	bic.w	r2, r3, #15
 8005a90:	4929      	ldr	r1, [pc, #164]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a98:	f7fe f8ea 	bl	8003c70 <HAL_GetTick>
 8005a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa0:	f7fe f8e6 	bl	8003c70 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e03b      	b.n	8005b2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <HAL_RCC_ClockConfig+0x260>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1ed      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4917      	ldr	r1, [pc, #92]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490f      	ldr	r1, [pc, #60]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b02:	f000 f825 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <HAL_RCC_ClockConfig+0x264>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490c      	ldr	r1, [pc, #48]	; (8005b44 <HAL_RCC_ClockConfig+0x26c>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <HAL_RCC_ClockConfig+0x270>)
 8005b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <HAL_RCC_ClockConfig+0x274>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe f856 	bl	8003bd8 <HAL_InitTick>
 8005b2c:	4603      	mov	r3, r0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40022000 	.word	0x40022000
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	04c4b400 	.word	0x04c4b400
 8005b44:	0800b120 	.word	0x0800b120
 8005b48:	200009c0 	.word	0x200009c0
 8005b4c:	200009c4 	.word	0x200009c4

08005b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b56:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d102      	bne.n	8005b68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	e047      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 030c 	and.w	r3, r3, #12
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d102      	bne.n	8005b7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b74:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	e03e      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b7a:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d136      	bne.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ba4:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bae:	68d2      	ldr	r2, [r2, #12]
 8005bb0:	0a12      	lsrs	r2, r2, #8
 8005bb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	617b      	str	r3, [r7, #20]
      break;
 8005bbc:	e00c      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bbe:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc6:	4a10      	ldr	r2, [pc, #64]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc8:	68d2      	ldr	r2, [r2, #12]
 8005bca:	0a12      	lsrs	r2, r2, #8
 8005bcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bd0:	fb02 f303 	mul.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
      break;
 8005bd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	0e5b      	lsrs	r3, r3, #25
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	3301      	adds	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	e001      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bf8:	693b      	ldr	r3, [r7, #16]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	00f42400 	.word	0x00f42400
 8005c10:	007a1200 	.word	0x007a1200

08005c14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	200009c0 	.word	0x200009c0

08005c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c30:	f7ff fff0 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4904      	ldr	r1, [pc, #16]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	0800b130 	.word	0x0800b130

08005c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c5c:	f7ff ffda 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	0adb      	lsrs	r3, r3, #11
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	4904      	ldr	r1, [pc, #16]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c6e:	5ccb      	ldrb	r3, [r1, r3]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	0800b130 	.word	0x0800b130

08005c84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d10c      	bne.n	8005cc2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cb2:	68d2      	ldr	r2, [r2, #12]
 8005cb4:	0a12      	lsrs	r2, r2, #8
 8005cb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	617b      	str	r3, [r7, #20]
    break;
 8005cc0:	e00c      	b.n	8005cdc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ccc:	68d2      	ldr	r2, [r2, #12]
 8005cce:	0a12      	lsrs	r2, r2, #8
 8005cd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
    break;
 8005cda:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	0e5b      	lsrs	r3, r3, #25
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cf6:	687b      	ldr	r3, [r7, #4]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40021000 	.word	0x40021000
 8005d08:	007a1200 	.word	0x007a1200
 8005d0c:	00f42400 	.word	0x00f42400

08005d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d18:	2300      	movs	r3, #0
 8005d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8098 	beq.w	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d32:	4b43      	ldr	r3, [pc, #268]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10d      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3e:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	4a3f      	ldr	r2, [pc, #252]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6593      	str	r3, [r2, #88]	; 0x58
 8005d4a:	4b3d      	ldr	r3, [pc, #244]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d56:	2301      	movs	r3, #1
 8005d58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d5a:	4b3a      	ldr	r3, [pc, #232]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a39      	ldr	r2, [pc, #228]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d66:	f7fd ff83 	bl	8003c70 <HAL_GetTick>
 8005d6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d6c:	e009      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fd ff7f 	bl	8003c70 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d902      	bls.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	74fb      	strb	r3, [r7, #19]
        break;
 8005d80:	e005      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d82:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ef      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d8e:	7cfb      	ldrb	r3, [r7, #19]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d159      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d94:	4b2a      	ldr	r3, [pc, #168]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01e      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d019      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005db0:	4b23      	ldr	r3, [pc, #140]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dbc:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d016      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fd ff3f 	bl	8003c70 <HAL_GetTick>
 8005df2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df4:	e00b      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df6:	f7fd ff3b 	bl	8003c70 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d902      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ec      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e1c:	7cfb      	ldrb	r3, [r7, #19]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e22:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	4903      	ldr	r1, [pc, #12]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e38:	e008      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e3a:	7cfb      	ldrb	r3, [r7, #19]
 8005e3c:	74bb      	strb	r3, [r7, #18]
 8005e3e:	e005      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e4c:	7c7b      	ldrb	r3, [r7, #17]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d105      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e52:	4ba6      	ldr	r3, [pc, #664]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	4aa5      	ldr	r2, [pc, #660]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e6a:	4ba0      	ldr	r3, [pc, #640]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f023 0203 	bic.w	r2, r3, #3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	499c      	ldr	r1, [pc, #624]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e8c:	4b97      	ldr	r3, [pc, #604]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f023 020c 	bic.w	r2, r3, #12
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4994      	ldr	r1, [pc, #592]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005eae:	4b8f      	ldr	r3, [pc, #572]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	498b      	ldr	r1, [pc, #556]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ed0:	4b86      	ldr	r3, [pc, #536]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	4983      	ldr	r1, [pc, #524]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ef2:	4b7e      	ldr	r3, [pc, #504]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	497a      	ldr	r1, [pc, #488]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f14:	4b75      	ldr	r3, [pc, #468]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	4972      	ldr	r1, [pc, #456]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f36:	4b6d      	ldr	r3, [pc, #436]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4969      	ldr	r1, [pc, #420]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f58:	4b64      	ldr	r3, [pc, #400]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	4961      	ldr	r1, [pc, #388]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f7a:	4b5c      	ldr	r3, [pc, #368]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	4958      	ldr	r1, [pc, #352]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d015      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f9c:	4b53      	ldr	r3, [pc, #332]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	4950      	ldr	r1, [pc, #320]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fba:	d105      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fbc:	4b4b      	ldr	r3, [pc, #300]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	4a4a      	ldr	r2, [pc, #296]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fd4:	4b45      	ldr	r3, [pc, #276]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	4942      	ldr	r1, [pc, #264]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ff2:	d105      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ff4:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800600c:	4b37      	ldr	r3, [pc, #220]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006012:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	4934      	ldr	r1, [pc, #208]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800602a:	d105      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800602c:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006036:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d015      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006044:	4b29      	ldr	r3, [pc, #164]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	4926      	ldr	r1, [pc, #152]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006062:	d105      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a20      	ldr	r2, [pc, #128]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800606e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800607c:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	4918      	ldr	r1, [pc, #96]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800609a:	d105      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a12      	ldr	r2, [pc, #72]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d015      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	490a      	ldr	r1, [pc, #40]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d2:	d105      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000

080060f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e042      	b.n	8006188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fc fca3 	bl	8002a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2224      	movs	r2, #36	; 0x24
 800611e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fee2 	bl	8006f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc43 	bl	80069cc <UART_SetConfig>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e01b      	b.n	8006188 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800615e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800616e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 ff61 	bl	8007048 <UART_CheckIdleState>
 8006186:	4603      	mov	r3, r0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d17b      	bne.n	80062a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_UART_Transmit+0x26>
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e074      	b.n	80062a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2221      	movs	r2, #33	; 0x21
 80061c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ca:	f7fd fd51 	bl	8003c70 <HAL_GetTick>
 80061ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e8:	d108      	bne.n	80061fc <HAL_UART_Transmit+0x6c>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e003      	b.n	8006204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006204:	e030      	b.n	8006268 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 ffc3 	bl	800719c <UART_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e03d      	b.n	80062a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800623c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3302      	adds	r3, #2
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e007      	b.n	8006256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1c8      	bne.n	8006206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	2140      	movs	r1, #64	; 0x40
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 ff8c 	bl	800719c <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e006      	b.n	80062a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d137      	bne.n	8006334 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_UART_Receive_IT+0x24>
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e030      	b.n	8006336 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_UART_Receive_IT+0x94>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01f      	beq.n	8006324 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d018      	beq.n	8006324 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	61bb      	str	r3, [r7, #24]
   return(result);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	461a      	mov	r2, r3
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 ffa4 	bl	8007278 <UART_Start_Receive_IT>
 8006330:	4603      	mov	r3, r0
 8006332:	e000      	b.n	8006336 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3728      	adds	r7, #40	; 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40008000 	.word	0x40008000

08006344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b0ba      	sub	sp, #232	; 0xe8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800636a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800636e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006372:	4013      	ands	r3, r2
 8006374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11b      	bne.n	80063b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d015      	beq.n	80063b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 82e3 	beq.w	8006974 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
      }
      return;
 80063b6:	e2dd      	b.n	8006974 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8123 	beq.w	8006608 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80063c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80063c6:	4b8d      	ldr	r3, [pc, #564]	; (80065fc <HAL_UART_IRQHandler+0x2b8>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063d2:	4b8b      	ldr	r3, [pc, #556]	; (8006600 <HAL_UART_IRQHandler+0x2bc>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8116 	beq.w	8006608 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0xc8>
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2201      	movs	r2, #1
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0xf8>
 8006418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2202      	movs	r2, #2
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006432:	f043 0204 	orr.w	r2, r3, #4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d011      	beq.n	800646c <HAL_UART_IRQHandler+0x128>
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2204      	movs	r2, #4
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f043 0202 	orr.w	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d017      	beq.n	80064a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006488:	4b5c      	ldr	r3, [pc, #368]	; (80065fc <HAL_UART_IRQHandler+0x2b8>)
 800648a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649e:	f043 0208 	orr.w	r2, r3, #8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d012      	beq.n	80064da <HAL_UART_IRQHandler+0x196>
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00c      	beq.n	80064da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8249 	beq.w	8006978 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d005      	beq.n	800653e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800653a:	2b00      	cmp	r3, #0
 800653c:	d054      	beq.n	80065e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 ffbc 	bl	80074bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d146      	bne.n	80065e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800657e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800658a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1d9      	bne.n	8006552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d017      	beq.n	80065d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ae:	4a15      	ldr	r2, [pc, #84]	; (8006604 <HAL_UART_IRQHandler+0x2c0>)
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd fcef 	bl	8003f9c <HAL_DMA_Abort_IT>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d019      	beq.n	80065f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80065d2:	4610      	mov	r0, r2
 80065d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d6:	e00f      	b.n	80065f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f9e1 	bl	80069a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065de:	e00b      	b.n	80065f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9dd 	bl	80069a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e6:	e007      	b.n	80065f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f9d9 	bl	80069a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80065f6:	e1bf      	b.n	8006978 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	bf00      	nop
    return;
 80065fa:	e1bd      	b.n	8006978 <HAL_UART_IRQHandler+0x634>
 80065fc:	10000001 	.word	0x10000001
 8006600:	04000120 	.word	0x04000120
 8006604:	08007589 	.word	0x08007589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	2b01      	cmp	r3, #1
 800660e:	f040 8153 	bne.w	80068b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 814c 	beq.w	80068b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8145 	beq.w	80068b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2210      	movs	r2, #16
 8006634:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	f040 80bb 	bne.w	80067bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 818f 	beq.w	800697c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006668:	429a      	cmp	r2, r3
 800666a:	f080 8187 	bcs.w	800697c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 8087 	bne.w	800679a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1da      	bne.n	800668c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006702:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800670c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e1      	bne.n	80066d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006736:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006738:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800673c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e3      	bne.n	8006712 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006768:	f023 0310 	bic.w	r3, r3, #16
 800676c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800677a:	65bb      	str	r3, [r7, #88]	; 0x58
 800677c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e4      	bne.n	8006758 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd fba8 	bl	8003eea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8fd 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ba:	e0df      	b.n	800697c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80d1 	beq.w	8006980 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80067de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80cc 	beq.w	8006980 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800680a:	647b      	str	r3, [r7, #68]	; 0x44
 800680c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e4      	bne.n	80067e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	623b      	str	r3, [r7, #32]
   return(result);
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006846:	633a      	str	r2, [r7, #48]	; 0x30
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800684c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e1      	bne.n	800681e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	60fb      	str	r3, [r7, #12]
   return(result);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0310 	bic.w	r3, r3, #16
 8006882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	69b9      	ldr	r1, [r7, #24]
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	617b      	str	r3, [r7, #20]
   return(result);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e4      	bne.n	800686e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f87f 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068b6:	e063      	b.n	8006980 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00e      	beq.n	80068e2 <HAL_UART_IRQHandler+0x59e>
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fbb2 	bl	8008044 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068e0:	e051      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d014      	beq.n	8006918 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	2b00      	cmp	r3, #0
 800690c:	d03a      	beq.n	8006984 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
    }
    return;
 8006916:	e035      	b.n	8006984 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <HAL_UART_IRQHandler+0x5f4>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fe3f 	bl	80075b4 <UART_EndTransmit_IT>
    return;
 8006936:	e026      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <HAL_UART_IRQHandler+0x614>
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fb8b 	bl	800806c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006956:	e016      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <HAL_UART_IRQHandler+0x642>
 8006964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006968:	2b00      	cmp	r3, #0
 800696a:	da0c      	bge.n	8006986 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fb73 	bl	8008058 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006972:	e008      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
      return;
 8006974:	bf00      	nop
 8006976:	e006      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
    return;
 8006978:	bf00      	nop
 800697a:	e004      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
      return;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
      return;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_UART_IRQHandler+0x642>
    return;
 8006984:	bf00      	nop
  }
}
 8006986:	37e8      	adds	r7, #232	; 0xe8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	b5b0      	push	{r4, r5, r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4baf      	ldr	r3, [pc, #700]	; (8006cb4 <UART_SetConfig+0x2e8>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	69f9      	ldr	r1, [r7, #28]
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4aa4      	ldr	r2, [pc, #656]	; (8006cb8 <UART_SetConfig+0x2ec>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	69f9      	ldr	r1, [r7, #28]
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	f023 010f 	bic.w	r1, r3, #15
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a95      	ldr	r2, [pc, #596]	; (8006cbc <UART_SetConfig+0x2f0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d120      	bne.n	8006aae <UART_SetConfig+0xe2>
 8006a6c:	4b94      	ldr	r3, [pc, #592]	; (8006cc0 <UART_SetConfig+0x2f4>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d816      	bhi.n	8006aa8 <UART_SetConfig+0xdc>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0xb4>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006a91 	.word	0x08006a91
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006a97 	.word	0x08006a97
 8006a8c:	08006aa3 	.word	0x08006aa3
 8006a90:	2301      	movs	r3, #1
 8006a92:	76fb      	strb	r3, [r7, #27]
 8006a94:	e0bc      	b.n	8006c10 <UART_SetConfig+0x244>
 8006a96:	2302      	movs	r3, #2
 8006a98:	76fb      	strb	r3, [r7, #27]
 8006a9a:	e0b9      	b.n	8006c10 <UART_SetConfig+0x244>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	76fb      	strb	r3, [r7, #27]
 8006aa0:	e0b6      	b.n	8006c10 <UART_SetConfig+0x244>
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	76fb      	strb	r3, [r7, #27]
 8006aa6:	e0b3      	b.n	8006c10 <UART_SetConfig+0x244>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	76fb      	strb	r3, [r7, #27]
 8006aac:	e0b0      	b.n	8006c10 <UART_SetConfig+0x244>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a84      	ldr	r2, [pc, #528]	; (8006cc4 <UART_SetConfig+0x2f8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d132      	bne.n	8006b1e <UART_SetConfig+0x152>
 8006ab8:	4b81      	ldr	r3, [pc, #516]	; (8006cc0 <UART_SetConfig+0x2f4>)
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d828      	bhi.n	8006b18 <UART_SetConfig+0x14c>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <UART_SetConfig+0x100>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b01 	.word	0x08006b01
 8006ad0:	08006b19 	.word	0x08006b19
 8006ad4:	08006b19 	.word	0x08006b19
 8006ad8:	08006b19 	.word	0x08006b19
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b19 	.word	0x08006b19
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b19 	.word	0x08006b19
 8006aec:	08006b07 	.word	0x08006b07
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b13 	.word	0x08006b13
 8006b00:	2300      	movs	r3, #0
 8006b02:	76fb      	strb	r3, [r7, #27]
 8006b04:	e084      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b06:	2302      	movs	r3, #2
 8006b08:	76fb      	strb	r3, [r7, #27]
 8006b0a:	e081      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	76fb      	strb	r3, [r7, #27]
 8006b10:	e07e      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b12:	2308      	movs	r3, #8
 8006b14:	76fb      	strb	r3, [r7, #27]
 8006b16:	e07b      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	76fb      	strb	r3, [r7, #27]
 8006b1c:	e078      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a69      	ldr	r2, [pc, #420]	; (8006cc8 <UART_SetConfig+0x2fc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d120      	bne.n	8006b6a <UART_SetConfig+0x19e>
 8006b28:	4b65      	ldr	r3, [pc, #404]	; (8006cc0 <UART_SetConfig+0x2f4>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b32:	2b30      	cmp	r3, #48	; 0x30
 8006b34:	d013      	beq.n	8006b5e <UART_SetConfig+0x192>
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	d814      	bhi.n	8006b64 <UART_SetConfig+0x198>
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d009      	beq.n	8006b52 <UART_SetConfig+0x186>
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d810      	bhi.n	8006b64 <UART_SetConfig+0x198>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <UART_SetConfig+0x180>
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d006      	beq.n	8006b58 <UART_SetConfig+0x18c>
 8006b4a:	e00b      	b.n	8006b64 <UART_SetConfig+0x198>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	76fb      	strb	r3, [r7, #27]
 8006b50:	e05e      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b52:	2302      	movs	r3, #2
 8006b54:	76fb      	strb	r3, [r7, #27]
 8006b56:	e05b      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	76fb      	strb	r3, [r7, #27]
 8006b5c:	e058      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	76fb      	strb	r3, [r7, #27]
 8006b62:	e055      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b64:	2310      	movs	r3, #16
 8006b66:	76fb      	strb	r3, [r7, #27]
 8006b68:	e052      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a57      	ldr	r2, [pc, #348]	; (8006ccc <UART_SetConfig+0x300>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d120      	bne.n	8006bb6 <UART_SetConfig+0x1ea>
 8006b74:	4b52      	ldr	r3, [pc, #328]	; (8006cc0 <UART_SetConfig+0x2f4>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b80:	d013      	beq.n	8006baa <UART_SetConfig+0x1de>
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d814      	bhi.n	8006bb0 <UART_SetConfig+0x1e4>
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d009      	beq.n	8006b9e <UART_SetConfig+0x1d2>
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d810      	bhi.n	8006bb0 <UART_SetConfig+0x1e4>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1cc>
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d006      	beq.n	8006ba4 <UART_SetConfig+0x1d8>
 8006b96:	e00b      	b.n	8006bb0 <UART_SetConfig+0x1e4>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	76fb      	strb	r3, [r7, #27]
 8006b9c:	e038      	b.n	8006c10 <UART_SetConfig+0x244>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	76fb      	strb	r3, [r7, #27]
 8006ba2:	e035      	b.n	8006c10 <UART_SetConfig+0x244>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	76fb      	strb	r3, [r7, #27]
 8006ba8:	e032      	b.n	8006c10 <UART_SetConfig+0x244>
 8006baa:	2308      	movs	r3, #8
 8006bac:	76fb      	strb	r3, [r7, #27]
 8006bae:	e02f      	b.n	8006c10 <UART_SetConfig+0x244>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	76fb      	strb	r3, [r7, #27]
 8006bb4:	e02c      	b.n	8006c10 <UART_SetConfig+0x244>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <UART_SetConfig+0x2ec>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d125      	bne.n	8006c0c <UART_SetConfig+0x240>
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <UART_SetConfig+0x2f4>)
 8006bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bce:	d017      	beq.n	8006c00 <UART_SetConfig+0x234>
 8006bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd4:	d817      	bhi.n	8006c06 <UART_SetConfig+0x23a>
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bda:	d00b      	beq.n	8006bf4 <UART_SetConfig+0x228>
 8006bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be0:	d811      	bhi.n	8006c06 <UART_SetConfig+0x23a>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <UART_SetConfig+0x222>
 8006be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bea:	d006      	beq.n	8006bfa <UART_SetConfig+0x22e>
 8006bec:	e00b      	b.n	8006c06 <UART_SetConfig+0x23a>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	76fb      	strb	r3, [r7, #27]
 8006bf2:	e00d      	b.n	8006c10 <UART_SetConfig+0x244>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	76fb      	strb	r3, [r7, #27]
 8006bf8:	e00a      	b.n	8006c10 <UART_SetConfig+0x244>
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	76fb      	strb	r3, [r7, #27]
 8006bfe:	e007      	b.n	8006c10 <UART_SetConfig+0x244>
 8006c00:	2308      	movs	r3, #8
 8006c02:	76fb      	strb	r3, [r7, #27]
 8006c04:	e004      	b.n	8006c10 <UART_SetConfig+0x244>
 8006c06:	2310      	movs	r3, #16
 8006c08:	76fb      	strb	r3, [r7, #27]
 8006c0a:	e001      	b.n	8006c10 <UART_SetConfig+0x244>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a28      	ldr	r2, [pc, #160]	; (8006cb8 <UART_SetConfig+0x2ec>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	f040 809e 	bne.w	8006d58 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c1c:	7efb      	ldrb	r3, [r7, #27]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d823      	bhi.n	8006c6a <UART_SetConfig+0x29e>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x25c>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c6b 	.word	0x08006c6b
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c6b 	.word	0x08006c6b
 8006c38:	08006c5b 	.word	0x08006c5b
 8006c3c:	08006c6b 	.word	0x08006c6b
 8006c40:	08006c6b 	.word	0x08006c6b
 8006c44:	08006c6b 	.word	0x08006c6b
 8006c48:	08006c63 	.word	0x08006c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fe ffee 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8006c50:	6178      	str	r0, [r7, #20]
        break;
 8006c52:	e00f      	b.n	8006c74 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <UART_SetConfig+0x304>)
 8006c56:	617b      	str	r3, [r7, #20]
        break;
 8006c58:	e00c      	b.n	8006c74 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5a:	f7fe ff79 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8006c5e:	6178      	str	r0, [r7, #20]
        break;
 8006c60:	e008      	b.n	8006c74 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c66:	617b      	str	r3, [r7, #20]
        break;
 8006c68:	e004      	b.n	8006c74 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	76bb      	strb	r3, [r7, #26]
        break;
 8006c72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 812c 	beq.w	8006ed4 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <UART_SetConfig+0x308>)
 8006c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c86:	461a      	mov	r2, r3
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c8e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d305      	bcc.n	8006cac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d915      	bls.n	8006cd8 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	76bb      	strb	r3, [r7, #26]
 8006cb0:	e110      	b.n	8006ed4 <UART_SetConfig+0x508>
 8006cb2:	bf00      	nop
 8006cb4:	cfff69f3 	.word	0xcfff69f3
 8006cb8:	40008000 	.word	0x40008000
 8006cbc:	40013800 	.word	0x40013800
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40004400 	.word	0x40004400
 8006cc8:	40004800 	.word	0x40004800
 8006ccc:	40004c00 	.word	0x40004c00
 8006cd0:	00f42400 	.word	0x00f42400
 8006cd4:	0800b138 	.word	0x0800b138
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	4a85      	ldr	r2, [pc, #532]	; (8006efc <UART_SetConfig+0x530>)
 8006ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	f7f9 fb4e 	bl	8000390 <__aeabi_uldivmod>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	020b      	lsls	r3, r1, #8
 8006d06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d0a:	0202      	lsls	r2, r0, #8
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	6849      	ldr	r1, [r1, #4]
 8006d10:	0849      	lsrs	r1, r1, #1
 8006d12:	4608      	mov	r0, r1
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	1814      	adds	r4, r2, r0
 8006d1a:	eb43 0501 	adc.w	r5, r3, r1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	4620      	mov	r0, r4
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	f7f9 fb30 	bl	8000390 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4613      	mov	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d3e:	d308      	bcc.n	8006d52 <UART_SetConfig+0x386>
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d46:	d204      	bcs.n	8006d52 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e0c0      	b.n	8006ed4 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	76bb      	strb	r3, [r7, #26]
 8006d56:	e0bd      	b.n	8006ed4 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d60:	d164      	bne.n	8006e2c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006d62:	7efb      	ldrb	r3, [r7, #27]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d828      	bhi.n	8006dba <UART_SetConfig+0x3ee>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0x3a4>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006dbb 	.word	0x08006dbb
 8006d80:	08006dab 	.word	0x08006dab
 8006d84:	08006dbb 	.word	0x08006dbb
 8006d88:	08006dbb 	.word	0x08006dbb
 8006d8c:	08006dbb 	.word	0x08006dbb
 8006d90:	08006db3 	.word	0x08006db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d94:	f7fe ff4a 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8006d98:	6178      	str	r0, [r7, #20]
        break;
 8006d9a:	e013      	b.n	8006dc4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9c:	f7fe ff5c 	bl	8005c58 <HAL_RCC_GetPCLK2Freq>
 8006da0:	6178      	str	r0, [r7, #20]
        break;
 8006da2:	e00f      	b.n	8006dc4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da4:	4b56      	ldr	r3, [pc, #344]	; (8006f00 <UART_SetConfig+0x534>)
 8006da6:	617b      	str	r3, [r7, #20]
        break;
 8006da8:	e00c      	b.n	8006dc4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006daa:	f7fe fed1 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8006dae:	6178      	str	r0, [r7, #20]
        break;
 8006db0:	e008      	b.n	8006dc4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db6:	617b      	str	r3, [r7, #20]
        break;
 8006db8:	e004      	b.n	8006dc4 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	76bb      	strb	r3, [r7, #26]
        break;
 8006dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8084 	beq.w	8006ed4 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	4a4a      	ldr	r2, [pc, #296]	; (8006efc <UART_SetConfig+0x530>)
 8006dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dde:	005a      	lsls	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	441a      	add	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b0f      	cmp	r3, #15
 8006df6:	d916      	bls.n	8006e26 <UART_SetConfig+0x45a>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfe:	d212      	bcs.n	8006e26 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f023 030f 	bic.w	r3, r3, #15
 8006e08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	89fa      	ldrh	r2, [r7, #14]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	e056      	b.n	8006ed4 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	76bb      	strb	r3, [r7, #26]
 8006e2a:	e053      	b.n	8006ed4 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e2c:	7efb      	ldrb	r3, [r7, #27]
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d827      	bhi.n	8006e82 <UART_SetConfig+0x4b6>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x46c>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e65 	.word	0x08006e65
 8006e40:	08006e6d 	.word	0x08006e6d
 8006e44:	08006e83 	.word	0x08006e83
 8006e48:	08006e73 	.word	0x08006e73
 8006e4c:	08006e83 	.word	0x08006e83
 8006e50:	08006e83 	.word	0x08006e83
 8006e54:	08006e83 	.word	0x08006e83
 8006e58:	08006e7b 	.word	0x08006e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e5c:	f7fe fee6 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 8006e60:	6178      	str	r0, [r7, #20]
        break;
 8006e62:	e013      	b.n	8006e8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fe fef8 	bl	8005c58 <HAL_RCC_GetPCLK2Freq>
 8006e68:	6178      	str	r0, [r7, #20]
        break;
 8006e6a:	e00f      	b.n	8006e8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <UART_SetConfig+0x534>)
 8006e6e:	617b      	str	r3, [r7, #20]
        break;
 8006e70:	e00c      	b.n	8006e8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e72:	f7fe fe6d 	bl	8005b50 <HAL_RCC_GetSysClockFreq>
 8006e76:	6178      	str	r0, [r7, #20]
        break;
 8006e78:	e008      	b.n	8006e8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7e:	617b      	str	r3, [r7, #20]
        break;
 8006e80:	e004      	b.n	8006e8c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	76bb      	strb	r3, [r7, #26]
        break;
 8006e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	4a19      	ldr	r2, [pc, #100]	; (8006efc <UART_SetConfig+0x530>)
 8006e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	441a      	add	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d909      	bls.n	8006ed0 <UART_SetConfig+0x504>
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec2:	d205      	bcs.n	8006ed0 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	e001      	b.n	8006ed4 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ef0:	7ebb      	ldrb	r3, [r7, #26]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8006efa:	bf00      	nop
 8006efc:	0800b138 	.word	0x0800b138
 8006f00:	00f42400 	.word	0x00f42400

08006f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01a      	beq.n	800701a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007002:	d10a      	bne.n	800701a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b098      	sub	sp, #96	; 0x60
 800704c:	af02      	add	r7, sp, #8
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007058:	f7fc fe0a 	bl	8003c70 <HAL_GetTick>
 800705c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b08      	cmp	r3, #8
 800706a:	d12f      	bne.n	80070cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800706c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007074:	2200      	movs	r2, #0
 8007076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f88e 	bl	800719c <UART_WaitOnFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d022      	beq.n	80070cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800709a:	653b      	str	r3, [r7, #80]	; 0x50
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	647b      	str	r3, [r7, #68]	; 0x44
 80070a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e063      	b.n	8007194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d149      	bne.n	800716e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e2:	2200      	movs	r2, #0
 80070e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f857 	bl	800719c <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d03c      	beq.n	800716e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	623b      	str	r3, [r7, #32]
   return(result);
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007108:	64fb      	str	r3, [r7, #76]	; 0x4c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007112:	633b      	str	r3, [r7, #48]	; 0x30
 8007114:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	60fb      	str	r3, [r7, #12]
   return(result);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	64bb      	str	r3, [r7, #72]	; 0x48
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007146:	61fa      	str	r2, [r7, #28]
 8007148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	69b9      	ldr	r1, [r7, #24]
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	617b      	str	r3, [r7, #20]
   return(result);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e5      	bne.n	8007126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e012      	b.n	8007194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3758      	adds	r7, #88	; 0x58
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	4613      	mov	r3, r2
 80071aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ac:	e04f      	b.n	800724e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d04b      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b6:	f7fc fd5b 	bl	8003c70 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d302      	bcc.n	80071cc <UART_WaitOnFlagUntilTimeout+0x30>
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e04e      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d037      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b80      	cmp	r3, #128	; 0x80
 80071e2:	d034      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d031      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d110      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2208      	movs	r2, #8
 80071fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 f95b 	bl	80074bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2208      	movs	r2, #8
 800720a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e029      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007228:	d111      	bne.n	800724e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f941 	bl	80074bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e00f      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4013      	ands	r3, r2
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	bf0c      	ite	eq
 800725e:	2301      	moveq	r3, #1
 8007260:	2300      	movne	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	429a      	cmp	r2, r3
 800726a:	d0a0      	beq.n	80071ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007278:	b480      	push	{r7}
 800727a:	b0a3      	sub	sp, #140	; 0x8c
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d10e      	bne.n	80072ca <UART_Start_Receive_IT+0x52>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <UART_Start_Receive_IT+0x48>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072be:	e02d      	b.n	800731c <UART_Start_Receive_IT+0xa4>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072c8:	e028      	b.n	800731c <UART_Start_Receive_IT+0xa4>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10d      	bne.n	80072ee <UART_Start_Receive_IT+0x76>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <UART_Start_Receive_IT+0x6c>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22ff      	movs	r2, #255	; 0xff
 80072de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072e2:	e01b      	b.n	800731c <UART_Start_Receive_IT+0xa4>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	227f      	movs	r2, #127	; 0x7f
 80072e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072ec:	e016      	b.n	800731c <UART_Start_Receive_IT+0xa4>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072f6:	d10d      	bne.n	8007314 <UART_Start_Receive_IT+0x9c>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <UART_Start_Receive_IT+0x92>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	227f      	movs	r2, #127	; 0x7f
 8007304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007308:	e008      	b.n	800731c <UART_Start_Receive_IT+0xa4>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	223f      	movs	r2, #63	; 0x3f
 800730e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007312:	e003      	b.n	800731c <UART_Start_Receive_IT+0xa4>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2222      	movs	r2, #34	; 0x22
 8007328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800733c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007350:	673a      	str	r2, [r7, #112]	; 0x70
 8007352:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007356:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800735e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e3      	bne.n	800732c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736c:	d14f      	bne.n	800740e <UART_Start_Receive_IT+0x196>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007374:	88fa      	ldrh	r2, [r7, #6]
 8007376:	429a      	cmp	r2, r3
 8007378:	d349      	bcc.n	800740e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007382:	d107      	bne.n	8007394 <UART_Start_Receive_IT+0x11c>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a47      	ldr	r2, [pc, #284]	; (80074ac <UART_Start_Receive_IT+0x234>)
 8007390:	675a      	str	r2, [r3, #116]	; 0x74
 8007392:	e002      	b.n	800739a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a46      	ldr	r2, [pc, #280]	; (80074b0 <UART_Start_Receive_IT+0x238>)
 8007398:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01a      	beq.n	80073d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e4      	bne.n	80073a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80073fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_Start_Receive_IT+0x160>
 800740c:	e046      	b.n	800749c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	d107      	bne.n	8007428 <UART_Start_Receive_IT+0x1b0>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4a24      	ldr	r2, [pc, #144]	; (80074b4 <UART_Start_Receive_IT+0x23c>)
 8007424:	675a      	str	r2, [r3, #116]	; 0x74
 8007426:	e002      	b.n	800742e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <UART_Start_Receive_IT+0x240>)
 800742c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d019      	beq.n	800746a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800744a:	677b      	str	r3, [r7, #116]	; 0x74
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
 8007456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800745a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <UART_Start_Receive_IT+0x1be>
 8007468:	e018      	b.n	800749c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	613b      	str	r3, [r7, #16]
   return(result);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f043 0320 	orr.w	r3, r3, #32
 800747e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	69f9      	ldr	r1, [r7, #28]
 800748e:	6a3a      	ldr	r2, [r7, #32]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	61bb      	str	r3, [r7, #24]
   return(result);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	378c      	adds	r7, #140	; 0x8c
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	08007cdd 	.word	0x08007cdd
 80074b0:	0800797d 	.word	0x0800797d
 80074b4:	080077c5 	.word	0x080077c5
 80074b8:	0800760d 	.word	0x0800760d

080074bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b095      	sub	sp, #84	; 0x54
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e2:	643b      	str	r3, [r7, #64]	; 0x40
 80074e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e6      	bne.n	80074c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3308      	adds	r3, #8
 80074fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	61fb      	str	r3, [r7, #28]
   return(result);
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	64bb      	str	r3, [r7, #72]	; 0x48
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e3      	bne.n	80074f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d118      	bne.n	8007568 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60bb      	str	r3, [r7, #8]
   return(result);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	647b      	str	r3, [r7, #68]	; 0x44
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	613b      	str	r3, [r7, #16]
   return(result);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e6      	bne.n	8007536 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800757c:	bf00      	nop
 800757e:	3754      	adds	r7, #84	; 0x54
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff f9fa 	bl	80069a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6979      	ldr	r1, [r7, #20]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	613b      	str	r3, [r7, #16]
   return(result);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e6      	bne.n	80075bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff f9c5 	bl	800698c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007602:	bf00      	nop
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b09c      	sub	sp, #112	; 0x70
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800761a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007624:	2b22      	cmp	r3, #34	; 0x22
 8007626:	f040 80be 	bne.w	80077a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007634:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007638:	b2d9      	uxtb	r1, r3
 800763a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800763e:	b2da      	uxtb	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007644:	400a      	ands	r2, r1
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 80a1 	bne.w	80077b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007688:	66bb      	str	r3, [r7, #104]	; 0x68
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007692:	65bb      	str	r3, [r7, #88]	; 0x58
 8007694:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	667b      	str	r3, [r7, #100]	; 0x64
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076c6:	647a      	str	r2, [r7, #68]	; 0x44
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e5      	bne.n	80076a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a33      	ldr	r2, [pc, #204]	; (80077c0 <UART_RxISR_8BIT+0x1b4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d01f      	beq.n	8007738 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d018      	beq.n	8007738 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	623b      	str	r3, [r7, #32]
   return(result);
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800771a:	663b      	str	r3, [r7, #96]	; 0x60
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007724:	633b      	str	r3, [r7, #48]	; 0x30
 8007726:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800772a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d12e      	bne.n	800779e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	60fb      	str	r3, [r7, #12]
   return(result);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0310 	bic.w	r3, r3, #16
 800775a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	69b9      	ldr	r1, [r7, #24]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	617b      	str	r3, [r7, #20]
   return(result);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d103      	bne.n	800778e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff f90c 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800779c:	e00b      	b.n	80077b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fb f89e 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 80077a4:	e007      	b.n	80077b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0208 	orr.w	r2, r2, #8
 80077b4:	619a      	str	r2, [r3, #24]
}
 80077b6:	bf00      	nop
 80077b8:	3770      	adds	r7, #112	; 0x70
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40008000 	.word	0x40008000

080077c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b09c      	sub	sp, #112	; 0x70
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077dc:	2b22      	cmp	r3, #34	; 0x22
 80077de:	f040 80be 	bne.w	800795e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80077f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80077f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80077fa:	4013      	ands	r3, r2
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007800:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 80a1 	bne.w	800796e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800783a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800783c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007840:	667b      	str	r3, [r7, #100]	; 0x64
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784a:	657b      	str	r3, [r7, #84]	; 0x54
 800784c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	663b      	str	r3, [r7, #96]	; 0x60
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800787e:	643a      	str	r2, [r7, #64]	; 0x40
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a33      	ldr	r2, [pc, #204]	; (8007978 <UART_RxISR_16BIT+0x1b4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01f      	beq.n	80078f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d12e      	bne.n	8007956 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	60bb      	str	r3, [r7, #8]
   return(result);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	65bb      	str	r3, [r7, #88]	; 0x58
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6979      	ldr	r1, [r7, #20]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	613b      	str	r3, [r7, #16]
   return(result);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b10      	cmp	r3, #16
 800793c:	d103      	bne.n	8007946 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2210      	movs	r2, #16
 8007944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff f830 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007954:	e00b      	b.n	800796e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa ffc2 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 800795c:	e007      	b.n	800796e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0208 	orr.w	r2, r2, #8
 800796c:	619a      	str	r2, [r3, #24]
}
 800796e:	bf00      	nop
 8007970:	3770      	adds	r7, #112	; 0x70
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40008000 	.word	0x40008000

0800797c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0ac      	sub	sp, #176	; 0xb0
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800798a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b2:	2b22      	cmp	r3, #34	; 0x22
 80079b4:	f040 8182 	bne.w	8007cbc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079c2:	e125      	b.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80079d2:	b2d9      	uxtb	r1, r3
 80079d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	400a      	ands	r2, r1
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d053      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2201      	movs	r2, #1
 8007a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2202      	movs	r2, #2
 8007a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d011      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9c:	f043 0202 	orr.w	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe ff75 	bl	80069a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 80a2 	bne.w	8007c10 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007af0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007af4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e4      	bne.n	8007acc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b2a:	66ba      	str	r2, [r7, #104]	; 0x68
 8007b2c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007b30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e1      	bne.n	8007b02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a5f      	ldr	r2, [pc, #380]	; (8007cd4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d021      	beq.n	8007ba0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01a      	beq.n	8007ba0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8007b8e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e4      	bne.n	8007b6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d130      	bne.n	8007c0a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f023 0310 	bic.w	r3, r3, #16
 8007bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e4      	bne.n	8007bae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d103      	bne.n	8007bfa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fe fed6 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
 8007c08:	e002      	b.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa fe68 	bl	80028e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c10:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d006      	beq.n	8007c26 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f47f aecf 	bne.w	80079c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d049      	beq.n	8007ccc <UART_RxISR_8BIT_FIFOEN+0x350>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c3e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d242      	bcs.n	8007ccc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3308      	adds	r3, #8
 8007c66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e3      	bne.n	8007c46 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007c82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f043 0320 	orr.w	r3, r3, #32
 8007c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6979      	ldr	r1, [r7, #20]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e4      	bne.n	8007c84 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cba:	e007      	b.n	8007ccc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0208 	orr.w	r2, r2, #8
 8007cca:	619a      	str	r2, [r3, #24]
}
 8007ccc:	bf00      	nop
 8007cce:	37b0      	adds	r7, #176	; 0xb0
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40008000 	.word	0x40008000
 8007cd8:	0800760d 	.word	0x0800760d

08007cdc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b0ae      	sub	sp, #184	; 0xb8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d12:	2b22      	cmp	r3, #34	; 0x22
 8007d14:	f040 8186 	bne.w	8008024 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d1e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d22:	e129      	b.n	8007f78 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d36:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007d3a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007d3e:	4013      	ands	r3, r2
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4c:	1c9a      	adds	r2, r3, #2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d053      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2201      	movs	r2, #1
 8007d98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da0:	f043 0201 	orr.w	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd0:	f043 0204 	orr.w	r2, r3, #4
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d011      	beq.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2204      	movs	r2, #4
 8007df8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e00:	f043 0202 	orr.w	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fe fdc3 	bl	80069a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 80a4 	bne.w	8007f78 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e56:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e2      	bne.n	8007e30 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007e92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e1      	bne.n	8007e6a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a5f      	ldr	r2, [pc, #380]	; (800803c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d021      	beq.n	8007f08 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01a      	beq.n	8007f08 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ef4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ef6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e4      	bne.n	8007ed2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d130      	bne.n	8007f72 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f26:	f023 0310 	bic.w	r3, r3, #16
 8007f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f38:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e4      	bne.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d103      	bne.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fe fd22 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
 8007f70:	e002      	b.n	8007f78 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fa fcb4 	bl	80028e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d006      	beq.n	8007f8e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f47f aecb 	bne.w	8007d24 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f94:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d049      	beq.n	8008034 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fa6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d242      	bcs.n	8008034 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e3      	bne.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007fea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f043 0320 	orr.w	r3, r3, #32
 8008000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	69b9      	ldr	r1, [r7, #24]
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	617b      	str	r3, [r7, #20]
   return(result);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e4      	bne.n	8007fec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008022:	e007      	b.n	8008034 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0208 	orr.w	r2, r2, #8
 8008032:	619a      	str	r2, [r3, #24]
}
 8008034:	bf00      	nop
 8008036:	37b8      	adds	r7, #184	; 0xb8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40008000 	.word	0x40008000
 8008040:	080077c5 	.word	0x080077c5

08008044 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_UARTEx_DisableFifoMode+0x16>
 8008092:	2302      	movs	r3, #2
 8008094:	e027      	b.n	80080e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2224      	movs	r2, #36	; 0x24
 80080a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0201 	bic.w	r2, r2, #1
 80080bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008106:	2302      	movs	r3, #2
 8008108:	e02d      	b.n	8008166 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2224      	movs	r2, #36	; 0x24
 8008116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f850 	bl	80081ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008182:	2302      	movs	r3, #2
 8008184:	e02d      	b.n	80081e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2224      	movs	r2, #36	; 0x24
 8008192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f812 	bl	80081ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d108      	bne.n	800820e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800820c:	e031      	b.n	8008272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800820e:	2308      	movs	r3, #8
 8008210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008212:	2308      	movs	r3, #8
 8008214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0e5b      	lsrs	r3, r3, #25
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	0f5b      	lsrs	r3, r3, #29
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	7b3a      	ldrb	r2, [r7, #12]
 800823a:	4911      	ldr	r1, [pc, #68]	; (8008280 <UARTEx_SetNbDataToProcess+0x94>)
 800823c:	5c8a      	ldrb	r2, [r1, r2]
 800823e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008242:	7b3a      	ldrb	r2, [r7, #12]
 8008244:	490f      	ldr	r1, [pc, #60]	; (8008284 <UARTEx_SetNbDataToProcess+0x98>)
 8008246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008248:	fb93 f3f2 	sdiv	r3, r3, r2
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	7b7a      	ldrb	r2, [r7, #13]
 8008258:	4909      	ldr	r1, [pc, #36]	; (8008280 <UARTEx_SetNbDataToProcess+0x94>)
 800825a:	5c8a      	ldrb	r2, [r1, r2]
 800825c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008260:	7b7a      	ldrb	r2, [r7, #13]
 8008262:	4908      	ldr	r1, [pc, #32]	; (8008284 <UARTEx_SetNbDataToProcess+0x98>)
 8008264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008266:	fb93 f3f2 	sdiv	r3, r3, r2
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	0800b150 	.word	0x0800b150
 8008284:	0800b158 	.word	0x0800b158

08008288 <__errno>:
 8008288:	4b01      	ldr	r3, [pc, #4]	; (8008290 <__errno+0x8>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	200009cc 	.word	0x200009cc

08008294 <__libc_init_array>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	4d0d      	ldr	r5, [pc, #52]	; (80082cc <__libc_init_array+0x38>)
 8008298:	4c0d      	ldr	r4, [pc, #52]	; (80082d0 <__libc_init_array+0x3c>)
 800829a:	1b64      	subs	r4, r4, r5
 800829c:	10a4      	asrs	r4, r4, #2
 800829e:	2600      	movs	r6, #0
 80082a0:	42a6      	cmp	r6, r4
 80082a2:	d109      	bne.n	80082b8 <__libc_init_array+0x24>
 80082a4:	4d0b      	ldr	r5, [pc, #44]	; (80082d4 <__libc_init_array+0x40>)
 80082a6:	4c0c      	ldr	r4, [pc, #48]	; (80082d8 <__libc_init_array+0x44>)
 80082a8:	f001 fdce 	bl	8009e48 <_init>
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	2600      	movs	r6, #0
 80082b2:	42a6      	cmp	r6, r4
 80082b4:	d105      	bne.n	80082c2 <__libc_init_array+0x2e>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082bc:	4798      	blx	r3
 80082be:	3601      	adds	r6, #1
 80082c0:	e7ee      	b.n	80082a0 <__libc_init_array+0xc>
 80082c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c6:	4798      	blx	r3
 80082c8:	3601      	adds	r6, #1
 80082ca:	e7f2      	b.n	80082b2 <__libc_init_array+0x1e>
 80082cc:	0800b2ec 	.word	0x0800b2ec
 80082d0:	0800b2ec 	.word	0x0800b2ec
 80082d4:	0800b2ec 	.word	0x0800b2ec
 80082d8:	0800b2f0 	.word	0x0800b2f0

080082dc <memset>:
 80082dc:	4402      	add	r2, r0
 80082de:	4603      	mov	r3, r0
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d100      	bne.n	80082e6 <memset+0xa>
 80082e4:	4770      	bx	lr
 80082e6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ea:	e7f9      	b.n	80082e0 <memset+0x4>

080082ec <iprintf>:
 80082ec:	b40f      	push	{r0, r1, r2, r3}
 80082ee:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <iprintf+0x2c>)
 80082f0:	b513      	push	{r0, r1, r4, lr}
 80082f2:	681c      	ldr	r4, [r3, #0]
 80082f4:	b124      	cbz	r4, 8008300 <iprintf+0x14>
 80082f6:	69a3      	ldr	r3, [r4, #24]
 80082f8:	b913      	cbnz	r3, 8008300 <iprintf+0x14>
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fb40 	bl	8008980 <__sinit>
 8008300:	ab05      	add	r3, sp, #20
 8008302:	9a04      	ldr	r2, [sp, #16]
 8008304:	68a1      	ldr	r1, [r4, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fe87 	bl	800901c <_vfiprintf_r>
 800830e:	b002      	add	sp, #8
 8008310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008314:	b004      	add	sp, #16
 8008316:	4770      	bx	lr
 8008318:	200009cc 	.word	0x200009cc

0800831c <putchar>:
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <putchar+0x28>)
 800831e:	b513      	push	{r0, r1, r4, lr}
 8008320:	681c      	ldr	r4, [r3, #0]
 8008322:	4601      	mov	r1, r0
 8008324:	b134      	cbz	r4, 8008334 <putchar+0x18>
 8008326:	69a3      	ldr	r3, [r4, #24]
 8008328:	b923      	cbnz	r3, 8008334 <putchar+0x18>
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	4620      	mov	r0, r4
 800832e:	f000 fb27 	bl	8008980 <__sinit>
 8008332:	9901      	ldr	r1, [sp, #4]
 8008334:	68a2      	ldr	r2, [r4, #8]
 8008336:	4620      	mov	r0, r4
 8008338:	b002      	add	sp, #8
 800833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833e:	f001 b931 	b.w	80095a4 <_putc_r>
 8008342:	bf00      	nop
 8008344:	200009cc 	.word	0x200009cc

08008348 <_puts_r>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	460e      	mov	r6, r1
 800834c:	4605      	mov	r5, r0
 800834e:	b118      	cbz	r0, 8008358 <_puts_r+0x10>
 8008350:	6983      	ldr	r3, [r0, #24]
 8008352:	b90b      	cbnz	r3, 8008358 <_puts_r+0x10>
 8008354:	f000 fb14 	bl	8008980 <__sinit>
 8008358:	69ab      	ldr	r3, [r5, #24]
 800835a:	68ac      	ldr	r4, [r5, #8]
 800835c:	b913      	cbnz	r3, 8008364 <_puts_r+0x1c>
 800835e:	4628      	mov	r0, r5
 8008360:	f000 fb0e 	bl	8008980 <__sinit>
 8008364:	4b2c      	ldr	r3, [pc, #176]	; (8008418 <_puts_r+0xd0>)
 8008366:	429c      	cmp	r4, r3
 8008368:	d120      	bne.n	80083ac <_puts_r+0x64>
 800836a:	686c      	ldr	r4, [r5, #4]
 800836c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800836e:	07db      	lsls	r3, r3, #31
 8008370:	d405      	bmi.n	800837e <_puts_r+0x36>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	0598      	lsls	r0, r3, #22
 8008376:	d402      	bmi.n	800837e <_puts_r+0x36>
 8008378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837a:	f000 fbb1 	bl	8008ae0 <__retarget_lock_acquire_recursive>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	0719      	lsls	r1, r3, #28
 8008382:	d51d      	bpl.n	80083c0 <_puts_r+0x78>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	b1db      	cbz	r3, 80083c0 <_puts_r+0x78>
 8008388:	3e01      	subs	r6, #1
 800838a:	68a3      	ldr	r3, [r4, #8]
 800838c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008390:	3b01      	subs	r3, #1
 8008392:	60a3      	str	r3, [r4, #8]
 8008394:	bb39      	cbnz	r1, 80083e6 <_puts_r+0x9e>
 8008396:	2b00      	cmp	r3, #0
 8008398:	da38      	bge.n	800840c <_puts_r+0xc4>
 800839a:	4622      	mov	r2, r4
 800839c:	210a      	movs	r1, #10
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f8f6 	bl	8008590 <__swbuf_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d011      	beq.n	80083cc <_puts_r+0x84>
 80083a8:	250a      	movs	r5, #10
 80083aa:	e011      	b.n	80083d0 <_puts_r+0x88>
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <_puts_r+0xd4>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d101      	bne.n	80083b6 <_puts_r+0x6e>
 80083b2:	68ac      	ldr	r4, [r5, #8]
 80083b4:	e7da      	b.n	800836c <_puts_r+0x24>
 80083b6:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <_puts_r+0xd8>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	bf08      	it	eq
 80083bc:	68ec      	ldreq	r4, [r5, #12]
 80083be:	e7d5      	b.n	800836c <_puts_r+0x24>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f936 	bl	8008634 <__swsetup_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0dd      	beq.n	8008388 <_puts_r+0x40>
 80083cc:	f04f 35ff 	mov.w	r5, #4294967295
 80083d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d2:	07da      	lsls	r2, r3, #31
 80083d4:	d405      	bmi.n	80083e2 <_puts_r+0x9a>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	059b      	lsls	r3, r3, #22
 80083da:	d402      	bmi.n	80083e2 <_puts_r+0x9a>
 80083dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083de:	f000 fb80 	bl	8008ae2 <__retarget_lock_release_recursive>
 80083e2:	4628      	mov	r0, r5
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da04      	bge.n	80083f4 <_puts_r+0xac>
 80083ea:	69a2      	ldr	r2, [r4, #24]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	dc06      	bgt.n	80083fe <_puts_r+0xb6>
 80083f0:	290a      	cmp	r1, #10
 80083f2:	d004      	beq.n	80083fe <_puts_r+0xb6>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	6022      	str	r2, [r4, #0]
 80083fa:	7019      	strb	r1, [r3, #0]
 80083fc:	e7c5      	b.n	800838a <_puts_r+0x42>
 80083fe:	4622      	mov	r2, r4
 8008400:	4628      	mov	r0, r5
 8008402:	f000 f8c5 	bl	8008590 <__swbuf_r>
 8008406:	3001      	adds	r0, #1
 8008408:	d1bf      	bne.n	800838a <_puts_r+0x42>
 800840a:	e7df      	b.n	80083cc <_puts_r+0x84>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	250a      	movs	r5, #10
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	701d      	strb	r5, [r3, #0]
 8008416:	e7db      	b.n	80083d0 <_puts_r+0x88>
 8008418:	0800b238 	.word	0x0800b238
 800841c:	0800b258 	.word	0x0800b258
 8008420:	0800b218 	.word	0x0800b218

08008424 <puts>:
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <puts+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f7ff bf8d 	b.w	8008348 <_puts_r>
 800842e:	bf00      	nop
 8008430:	200009cc 	.word	0x200009cc

08008434 <siprintf>:
 8008434:	b40e      	push	{r1, r2, r3}
 8008436:	b500      	push	{lr}
 8008438:	b09c      	sub	sp, #112	; 0x70
 800843a:	ab1d      	add	r3, sp, #116	; 0x74
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	9006      	str	r0, [sp, #24]
 8008440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008444:	4809      	ldr	r0, [pc, #36]	; (800846c <siprintf+0x38>)
 8008446:	9107      	str	r1, [sp, #28]
 8008448:	9104      	str	r1, [sp, #16]
 800844a:	4909      	ldr	r1, [pc, #36]	; (8008470 <siprintf+0x3c>)
 800844c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008450:	9105      	str	r1, [sp, #20]
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	a902      	add	r1, sp, #8
 8008458:	f000 fcb6 	bl	8008dc8 <_svfiprintf_r>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	b01c      	add	sp, #112	; 0x70
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	200009cc 	.word	0x200009cc
 8008470:	ffff0208 	.word	0xffff0208

08008474 <strcpy>:
 8008474:	4603      	mov	r3, r0
 8008476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800847a:	f803 2b01 	strb.w	r2, [r3], #1
 800847e:	2a00      	cmp	r2, #0
 8008480:	d1f9      	bne.n	8008476 <strcpy+0x2>
 8008482:	4770      	bx	lr

08008484 <strncpy>:
 8008484:	b510      	push	{r4, lr}
 8008486:	3901      	subs	r1, #1
 8008488:	4603      	mov	r3, r0
 800848a:	b132      	cbz	r2, 800849a <strncpy+0x16>
 800848c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008490:	f803 4b01 	strb.w	r4, [r3], #1
 8008494:	3a01      	subs	r2, #1
 8008496:	2c00      	cmp	r4, #0
 8008498:	d1f7      	bne.n	800848a <strncpy+0x6>
 800849a:	441a      	add	r2, r3
 800849c:	2100      	movs	r1, #0
 800849e:	4293      	cmp	r3, r2
 80084a0:	d100      	bne.n	80084a4 <strncpy+0x20>
 80084a2:	bd10      	pop	{r4, pc}
 80084a4:	f803 1b01 	strb.w	r1, [r3], #1
 80084a8:	e7f9      	b.n	800849e <strncpy+0x1a>

080084aa <strstr>:
 80084aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ac:	780c      	ldrb	r4, [r1, #0]
 80084ae:	b164      	cbz	r4, 80084ca <strstr+0x20>
 80084b0:	4603      	mov	r3, r0
 80084b2:	781a      	ldrb	r2, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	1c5e      	adds	r6, r3, #1
 80084b8:	b90a      	cbnz	r2, 80084be <strstr+0x14>
 80084ba:	4610      	mov	r0, r2
 80084bc:	e005      	b.n	80084ca <strstr+0x20>
 80084be:	4294      	cmp	r4, r2
 80084c0:	d108      	bne.n	80084d4 <strstr+0x2a>
 80084c2:	460d      	mov	r5, r1
 80084c4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80084c8:	b902      	cbnz	r2, 80084cc <strstr+0x22>
 80084ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084cc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80084d0:	4297      	cmp	r7, r2
 80084d2:	d0f7      	beq.n	80084c4 <strstr+0x1a>
 80084d4:	4633      	mov	r3, r6
 80084d6:	e7ec      	b.n	80084b2 <strstr+0x8>

080084d8 <strtok>:
 80084d8:	4b16      	ldr	r3, [pc, #88]	; (8008534 <strtok+0x5c>)
 80084da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084dc:	681e      	ldr	r6, [r3, #0]
 80084de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80084e0:	4605      	mov	r5, r0
 80084e2:	b9fc      	cbnz	r4, 8008524 <strtok+0x4c>
 80084e4:	2050      	movs	r0, #80	; 0x50
 80084e6:	9101      	str	r1, [sp, #4]
 80084e8:	f000 fb60 	bl	8008bac <malloc>
 80084ec:	9901      	ldr	r1, [sp, #4]
 80084ee:	65b0      	str	r0, [r6, #88]	; 0x58
 80084f0:	4602      	mov	r2, r0
 80084f2:	b920      	cbnz	r0, 80084fe <strtok+0x26>
 80084f4:	4b10      	ldr	r3, [pc, #64]	; (8008538 <strtok+0x60>)
 80084f6:	4811      	ldr	r0, [pc, #68]	; (800853c <strtok+0x64>)
 80084f8:	2157      	movs	r1, #87	; 0x57
 80084fa:	f000 f909 	bl	8008710 <__assert_func>
 80084fe:	e9c0 4400 	strd	r4, r4, [r0]
 8008502:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008506:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800850a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800850e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008512:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008516:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800851a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800851e:	6184      	str	r4, [r0, #24]
 8008520:	7704      	strb	r4, [r0, #28]
 8008522:	6244      	str	r4, [r0, #36]	; 0x24
 8008524:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008526:	2301      	movs	r3, #1
 8008528:	4628      	mov	r0, r5
 800852a:	b002      	add	sp, #8
 800852c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008530:	f000 b806 	b.w	8008540 <__strtok_r>
 8008534:	200009cc 	.word	0x200009cc
 8008538:	0800b164 	.word	0x0800b164
 800853c:	0800b17b 	.word	0x0800b17b

08008540 <__strtok_r>:
 8008540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008542:	b908      	cbnz	r0, 8008548 <__strtok_r+0x8>
 8008544:	6810      	ldr	r0, [r2, #0]
 8008546:	b188      	cbz	r0, 800856c <__strtok_r+0x2c>
 8008548:	4604      	mov	r4, r0
 800854a:	4620      	mov	r0, r4
 800854c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008550:	460f      	mov	r7, r1
 8008552:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008556:	b91e      	cbnz	r6, 8008560 <__strtok_r+0x20>
 8008558:	b965      	cbnz	r5, 8008574 <__strtok_r+0x34>
 800855a:	6015      	str	r5, [r2, #0]
 800855c:	4628      	mov	r0, r5
 800855e:	e005      	b.n	800856c <__strtok_r+0x2c>
 8008560:	42b5      	cmp	r5, r6
 8008562:	d1f6      	bne.n	8008552 <__strtok_r+0x12>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1f0      	bne.n	800854a <__strtok_r+0xa>
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	7003      	strb	r3, [r0, #0]
 800856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800856e:	461c      	mov	r4, r3
 8008570:	e00c      	b.n	800858c <__strtok_r+0x4c>
 8008572:	b915      	cbnz	r5, 800857a <__strtok_r+0x3a>
 8008574:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008578:	460e      	mov	r6, r1
 800857a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800857e:	42ab      	cmp	r3, r5
 8008580:	d1f7      	bne.n	8008572 <__strtok_r+0x32>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f3      	beq.n	800856e <__strtok_r+0x2e>
 8008586:	2300      	movs	r3, #0
 8008588:	f804 3c01 	strb.w	r3, [r4, #-1]
 800858c:	6014      	str	r4, [r2, #0]
 800858e:	e7ed      	b.n	800856c <__strtok_r+0x2c>

08008590 <__swbuf_r>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	460e      	mov	r6, r1
 8008594:	4614      	mov	r4, r2
 8008596:	4605      	mov	r5, r0
 8008598:	b118      	cbz	r0, 80085a2 <__swbuf_r+0x12>
 800859a:	6983      	ldr	r3, [r0, #24]
 800859c:	b90b      	cbnz	r3, 80085a2 <__swbuf_r+0x12>
 800859e:	f000 f9ef 	bl	8008980 <__sinit>
 80085a2:	4b21      	ldr	r3, [pc, #132]	; (8008628 <__swbuf_r+0x98>)
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d12b      	bne.n	8008600 <__swbuf_r+0x70>
 80085a8:	686c      	ldr	r4, [r5, #4]
 80085aa:	69a3      	ldr	r3, [r4, #24]
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	071a      	lsls	r2, r3, #28
 80085b2:	d52f      	bpl.n	8008614 <__swbuf_r+0x84>
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	b36b      	cbz	r3, 8008614 <__swbuf_r+0x84>
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	6820      	ldr	r0, [r4, #0]
 80085bc:	1ac0      	subs	r0, r0, r3
 80085be:	6963      	ldr	r3, [r4, #20]
 80085c0:	b2f6      	uxtb	r6, r6
 80085c2:	4283      	cmp	r3, r0
 80085c4:	4637      	mov	r7, r6
 80085c6:	dc04      	bgt.n	80085d2 <__swbuf_r+0x42>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 f944 	bl	8008858 <_fflush_r>
 80085d0:	bb30      	cbnz	r0, 8008620 <__swbuf_r+0x90>
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	60a3      	str	r3, [r4, #8]
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	6022      	str	r2, [r4, #0]
 80085de:	701e      	strb	r6, [r3, #0]
 80085e0:	6963      	ldr	r3, [r4, #20]
 80085e2:	3001      	adds	r0, #1
 80085e4:	4283      	cmp	r3, r0
 80085e6:	d004      	beq.n	80085f2 <__swbuf_r+0x62>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	07db      	lsls	r3, r3, #31
 80085ec:	d506      	bpl.n	80085fc <__swbuf_r+0x6c>
 80085ee:	2e0a      	cmp	r6, #10
 80085f0:	d104      	bne.n	80085fc <__swbuf_r+0x6c>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 f92f 	bl	8008858 <_fflush_r>
 80085fa:	b988      	cbnz	r0, 8008620 <__swbuf_r+0x90>
 80085fc:	4638      	mov	r0, r7
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <__swbuf_r+0x9c>)
 8008602:	429c      	cmp	r4, r3
 8008604:	d101      	bne.n	800860a <__swbuf_r+0x7a>
 8008606:	68ac      	ldr	r4, [r5, #8]
 8008608:	e7cf      	b.n	80085aa <__swbuf_r+0x1a>
 800860a:	4b09      	ldr	r3, [pc, #36]	; (8008630 <__swbuf_r+0xa0>)
 800860c:	429c      	cmp	r4, r3
 800860e:	bf08      	it	eq
 8008610:	68ec      	ldreq	r4, [r5, #12]
 8008612:	e7ca      	b.n	80085aa <__swbuf_r+0x1a>
 8008614:	4621      	mov	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f80c 	bl	8008634 <__swsetup_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0cb      	beq.n	80085b8 <__swbuf_r+0x28>
 8008620:	f04f 37ff 	mov.w	r7, #4294967295
 8008624:	e7ea      	b.n	80085fc <__swbuf_r+0x6c>
 8008626:	bf00      	nop
 8008628:	0800b238 	.word	0x0800b238
 800862c:	0800b258 	.word	0x0800b258
 8008630:	0800b218 	.word	0x0800b218

08008634 <__swsetup_r>:
 8008634:	4b32      	ldr	r3, [pc, #200]	; (8008700 <__swsetup_r+0xcc>)
 8008636:	b570      	push	{r4, r5, r6, lr}
 8008638:	681d      	ldr	r5, [r3, #0]
 800863a:	4606      	mov	r6, r0
 800863c:	460c      	mov	r4, r1
 800863e:	b125      	cbz	r5, 800864a <__swsetup_r+0x16>
 8008640:	69ab      	ldr	r3, [r5, #24]
 8008642:	b913      	cbnz	r3, 800864a <__swsetup_r+0x16>
 8008644:	4628      	mov	r0, r5
 8008646:	f000 f99b 	bl	8008980 <__sinit>
 800864a:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <__swsetup_r+0xd0>)
 800864c:	429c      	cmp	r4, r3
 800864e:	d10f      	bne.n	8008670 <__swsetup_r+0x3c>
 8008650:	686c      	ldr	r4, [r5, #4]
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008658:	0719      	lsls	r1, r3, #28
 800865a:	d42c      	bmi.n	80086b6 <__swsetup_r+0x82>
 800865c:	06dd      	lsls	r5, r3, #27
 800865e:	d411      	bmi.n	8008684 <__swsetup_r+0x50>
 8008660:	2309      	movs	r3, #9
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	e03e      	b.n	80086ee <__swsetup_r+0xba>
 8008670:	4b25      	ldr	r3, [pc, #148]	; (8008708 <__swsetup_r+0xd4>)
 8008672:	429c      	cmp	r4, r3
 8008674:	d101      	bne.n	800867a <__swsetup_r+0x46>
 8008676:	68ac      	ldr	r4, [r5, #8]
 8008678:	e7eb      	b.n	8008652 <__swsetup_r+0x1e>
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <__swsetup_r+0xd8>)
 800867c:	429c      	cmp	r4, r3
 800867e:	bf08      	it	eq
 8008680:	68ec      	ldreq	r4, [r5, #12]
 8008682:	e7e6      	b.n	8008652 <__swsetup_r+0x1e>
 8008684:	0758      	lsls	r0, r3, #29
 8008686:	d512      	bpl.n	80086ae <__swsetup_r+0x7a>
 8008688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800868a:	b141      	cbz	r1, 800869e <__swsetup_r+0x6a>
 800868c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008690:	4299      	cmp	r1, r3
 8008692:	d002      	beq.n	800869a <__swsetup_r+0x66>
 8008694:	4630      	mov	r0, r6
 8008696:	f000 fa91 	bl	8008bbc <_free_r>
 800869a:	2300      	movs	r3, #0
 800869c:	6363      	str	r3, [r4, #52]	; 0x34
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	2300      	movs	r3, #0
 80086a8:	6063      	str	r3, [r4, #4]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	f043 0308 	orr.w	r3, r3, #8
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	b94b      	cbnz	r3, 80086ce <__swsetup_r+0x9a>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c4:	d003      	beq.n	80086ce <__swsetup_r+0x9a>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4630      	mov	r0, r6
 80086ca:	f000 fa2f 	bl	8008b2c <__smakebuf_r>
 80086ce:	89a0      	ldrh	r0, [r4, #12]
 80086d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086d4:	f010 0301 	ands.w	r3, r0, #1
 80086d8:	d00a      	beq.n	80086f0 <__swsetup_r+0xbc>
 80086da:	2300      	movs	r3, #0
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	6963      	ldr	r3, [r4, #20]
 80086e0:	425b      	negs	r3, r3
 80086e2:	61a3      	str	r3, [r4, #24]
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	b943      	cbnz	r3, 80086fa <__swsetup_r+0xc6>
 80086e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086ec:	d1ba      	bne.n	8008664 <__swsetup_r+0x30>
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	0781      	lsls	r1, r0, #30
 80086f2:	bf58      	it	pl
 80086f4:	6963      	ldrpl	r3, [r4, #20]
 80086f6:	60a3      	str	r3, [r4, #8]
 80086f8:	e7f4      	b.n	80086e4 <__swsetup_r+0xb0>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e7f7      	b.n	80086ee <__swsetup_r+0xba>
 80086fe:	bf00      	nop
 8008700:	200009cc 	.word	0x200009cc
 8008704:	0800b238 	.word	0x0800b238
 8008708:	0800b258 	.word	0x0800b258
 800870c:	0800b218 	.word	0x0800b218

08008710 <__assert_func>:
 8008710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008712:	4614      	mov	r4, r2
 8008714:	461a      	mov	r2, r3
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <__assert_func+0x2c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4605      	mov	r5, r0
 800871c:	68d8      	ldr	r0, [r3, #12]
 800871e:	b14c      	cbz	r4, 8008734 <__assert_func+0x24>
 8008720:	4b07      	ldr	r3, [pc, #28]	; (8008740 <__assert_func+0x30>)
 8008722:	9100      	str	r1, [sp, #0]
 8008724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008728:	4906      	ldr	r1, [pc, #24]	; (8008744 <__assert_func+0x34>)
 800872a:	462b      	mov	r3, r5
 800872c:	f000 f9a6 	bl	8008a7c <fiprintf>
 8008730:	f000 ffe6 	bl	8009700 <abort>
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <__assert_func+0x38>)
 8008736:	461c      	mov	r4, r3
 8008738:	e7f3      	b.n	8008722 <__assert_func+0x12>
 800873a:	bf00      	nop
 800873c:	200009cc 	.word	0x200009cc
 8008740:	0800b1dc 	.word	0x0800b1dc
 8008744:	0800b1e9 	.word	0x0800b1e9
 8008748:	0800b217 	.word	0x0800b217

0800874c <__sflush_r>:
 800874c:	898a      	ldrh	r2, [r1, #12]
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	4605      	mov	r5, r0
 8008754:	0710      	lsls	r0, r2, #28
 8008756:	460c      	mov	r4, r1
 8008758:	d458      	bmi.n	800880c <__sflush_r+0xc0>
 800875a:	684b      	ldr	r3, [r1, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	dc05      	bgt.n	800876c <__sflush_r+0x20>
 8008760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	dc02      	bgt.n	800876c <__sflush_r+0x20>
 8008766:	2000      	movs	r0, #0
 8008768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800876e:	2e00      	cmp	r6, #0
 8008770:	d0f9      	beq.n	8008766 <__sflush_r+0x1a>
 8008772:	2300      	movs	r3, #0
 8008774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008778:	682f      	ldr	r7, [r5, #0]
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	d032      	beq.n	80087e4 <__sflush_r+0x98>
 800877e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	075a      	lsls	r2, r3, #29
 8008784:	d505      	bpl.n	8008792 <__sflush_r+0x46>
 8008786:	6863      	ldr	r3, [r4, #4]
 8008788:	1ac0      	subs	r0, r0, r3
 800878a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800878c:	b10b      	cbz	r3, 8008792 <__sflush_r+0x46>
 800878e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008790:	1ac0      	subs	r0, r0, r3
 8008792:	2300      	movs	r3, #0
 8008794:	4602      	mov	r2, r0
 8008796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008798:	6a21      	ldr	r1, [r4, #32]
 800879a:	4628      	mov	r0, r5
 800879c:	47b0      	blx	r6
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	d106      	bne.n	80087b2 <__sflush_r+0x66>
 80087a4:	6829      	ldr	r1, [r5, #0]
 80087a6:	291d      	cmp	r1, #29
 80087a8:	d82c      	bhi.n	8008804 <__sflush_r+0xb8>
 80087aa:	4a2a      	ldr	r2, [pc, #168]	; (8008854 <__sflush_r+0x108>)
 80087ac:	40ca      	lsrs	r2, r1
 80087ae:	07d6      	lsls	r6, r2, #31
 80087b0:	d528      	bpl.n	8008804 <__sflush_r+0xb8>
 80087b2:	2200      	movs	r2, #0
 80087b4:	6062      	str	r2, [r4, #4]
 80087b6:	04d9      	lsls	r1, r3, #19
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	d504      	bpl.n	80087c8 <__sflush_r+0x7c>
 80087be:	1c42      	adds	r2, r0, #1
 80087c0:	d101      	bne.n	80087c6 <__sflush_r+0x7a>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	b903      	cbnz	r3, 80087c8 <__sflush_r+0x7c>
 80087c6:	6560      	str	r0, [r4, #84]	; 0x54
 80087c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ca:	602f      	str	r7, [r5, #0]
 80087cc:	2900      	cmp	r1, #0
 80087ce:	d0ca      	beq.n	8008766 <__sflush_r+0x1a>
 80087d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d4:	4299      	cmp	r1, r3
 80087d6:	d002      	beq.n	80087de <__sflush_r+0x92>
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f9ef 	bl	8008bbc <_free_r>
 80087de:	2000      	movs	r0, #0
 80087e0:	6360      	str	r0, [r4, #52]	; 0x34
 80087e2:	e7c1      	b.n	8008768 <__sflush_r+0x1c>
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	2301      	movs	r3, #1
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b0      	blx	r6
 80087ec:	1c41      	adds	r1, r0, #1
 80087ee:	d1c7      	bne.n	8008780 <__sflush_r+0x34>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0c4      	beq.n	8008780 <__sflush_r+0x34>
 80087f6:	2b1d      	cmp	r3, #29
 80087f8:	d001      	beq.n	80087fe <__sflush_r+0xb2>
 80087fa:	2b16      	cmp	r3, #22
 80087fc:	d101      	bne.n	8008802 <__sflush_r+0xb6>
 80087fe:	602f      	str	r7, [r5, #0]
 8008800:	e7b1      	b.n	8008766 <__sflush_r+0x1a>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7ad      	b.n	8008768 <__sflush_r+0x1c>
 800880c:	690f      	ldr	r7, [r1, #16]
 800880e:	2f00      	cmp	r7, #0
 8008810:	d0a9      	beq.n	8008766 <__sflush_r+0x1a>
 8008812:	0793      	lsls	r3, r2, #30
 8008814:	680e      	ldr	r6, [r1, #0]
 8008816:	bf08      	it	eq
 8008818:	694b      	ldreq	r3, [r1, #20]
 800881a:	600f      	str	r7, [r1, #0]
 800881c:	bf18      	it	ne
 800881e:	2300      	movne	r3, #0
 8008820:	eba6 0807 	sub.w	r8, r6, r7
 8008824:	608b      	str	r3, [r1, #8]
 8008826:	f1b8 0f00 	cmp.w	r8, #0
 800882a:	dd9c      	ble.n	8008766 <__sflush_r+0x1a>
 800882c:	6a21      	ldr	r1, [r4, #32]
 800882e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008830:	4643      	mov	r3, r8
 8008832:	463a      	mov	r2, r7
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	2800      	cmp	r0, #0
 800883a:	dc06      	bgt.n	800884a <__sflush_r+0xfe>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	f04f 30ff 	mov.w	r0, #4294967295
 8008848:	e78e      	b.n	8008768 <__sflush_r+0x1c>
 800884a:	4407      	add	r7, r0
 800884c:	eba8 0800 	sub.w	r8, r8, r0
 8008850:	e7e9      	b.n	8008826 <__sflush_r+0xda>
 8008852:	bf00      	nop
 8008854:	20400001 	.word	0x20400001

08008858 <_fflush_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	690b      	ldr	r3, [r1, #16]
 800885c:	4605      	mov	r5, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b913      	cbnz	r3, 8008868 <_fflush_r+0x10>
 8008862:	2500      	movs	r5, #0
 8008864:	4628      	mov	r0, r5
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	b118      	cbz	r0, 8008872 <_fflush_r+0x1a>
 800886a:	6983      	ldr	r3, [r0, #24]
 800886c:	b90b      	cbnz	r3, 8008872 <_fflush_r+0x1a>
 800886e:	f000 f887 	bl	8008980 <__sinit>
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <_fflush_r+0x6c>)
 8008874:	429c      	cmp	r4, r3
 8008876:	d11b      	bne.n	80088b0 <_fflush_r+0x58>
 8008878:	686c      	ldr	r4, [r5, #4]
 800887a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0ef      	beq.n	8008862 <_fflush_r+0xa>
 8008882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008884:	07d0      	lsls	r0, r2, #31
 8008886:	d404      	bmi.n	8008892 <_fflush_r+0x3a>
 8008888:	0599      	lsls	r1, r3, #22
 800888a:	d402      	bmi.n	8008892 <_fflush_r+0x3a>
 800888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888e:	f000 f927 	bl	8008ae0 <__retarget_lock_acquire_recursive>
 8008892:	4628      	mov	r0, r5
 8008894:	4621      	mov	r1, r4
 8008896:	f7ff ff59 	bl	800874c <__sflush_r>
 800889a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800889c:	07da      	lsls	r2, r3, #31
 800889e:	4605      	mov	r5, r0
 80088a0:	d4e0      	bmi.n	8008864 <_fflush_r+0xc>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	059b      	lsls	r3, r3, #22
 80088a6:	d4dd      	bmi.n	8008864 <_fflush_r+0xc>
 80088a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088aa:	f000 f91a 	bl	8008ae2 <__retarget_lock_release_recursive>
 80088ae:	e7d9      	b.n	8008864 <_fflush_r+0xc>
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <_fflush_r+0x70>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d101      	bne.n	80088ba <_fflush_r+0x62>
 80088b6:	68ac      	ldr	r4, [r5, #8]
 80088b8:	e7df      	b.n	800887a <_fflush_r+0x22>
 80088ba:	4b04      	ldr	r3, [pc, #16]	; (80088cc <_fflush_r+0x74>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	bf08      	it	eq
 80088c0:	68ec      	ldreq	r4, [r5, #12]
 80088c2:	e7da      	b.n	800887a <_fflush_r+0x22>
 80088c4:	0800b238 	.word	0x0800b238
 80088c8:	0800b258 	.word	0x0800b258
 80088cc:	0800b218 	.word	0x0800b218

080088d0 <std>:
 80088d0:	2300      	movs	r3, #0
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
 80088d6:	e9c0 3300 	strd	r3, r3, [r0]
 80088da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088de:	6083      	str	r3, [r0, #8]
 80088e0:	8181      	strh	r1, [r0, #12]
 80088e2:	6643      	str	r3, [r0, #100]	; 0x64
 80088e4:	81c2      	strh	r2, [r0, #14]
 80088e6:	6183      	str	r3, [r0, #24]
 80088e8:	4619      	mov	r1, r3
 80088ea:	2208      	movs	r2, #8
 80088ec:	305c      	adds	r0, #92	; 0x5c
 80088ee:	f7ff fcf5 	bl	80082dc <memset>
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <std+0x38>)
 80088f4:	6263      	str	r3, [r4, #36]	; 0x24
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <std+0x3c>)
 80088f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <std+0x40>)
 80088fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <std+0x44>)
 8008900:	6224      	str	r4, [r4, #32]
 8008902:	6323      	str	r3, [r4, #48]	; 0x30
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	08009655 	.word	0x08009655
 800890c:	08009677 	.word	0x08009677
 8008910:	080096af 	.word	0x080096af
 8008914:	080096d3 	.word	0x080096d3

08008918 <_cleanup_r>:
 8008918:	4901      	ldr	r1, [pc, #4]	; (8008920 <_cleanup_r+0x8>)
 800891a:	f000 b8c1 	b.w	8008aa0 <_fwalk_reent>
 800891e:	bf00      	nop
 8008920:	08008859 	.word	0x08008859

08008924 <__sfmoreglue>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	1e4a      	subs	r2, r1, #1
 8008928:	2568      	movs	r5, #104	; 0x68
 800892a:	4355      	muls	r5, r2
 800892c:	460e      	mov	r6, r1
 800892e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008932:	f000 f993 	bl	8008c5c <_malloc_r>
 8008936:	4604      	mov	r4, r0
 8008938:	b140      	cbz	r0, 800894c <__sfmoreglue+0x28>
 800893a:	2100      	movs	r1, #0
 800893c:	e9c0 1600 	strd	r1, r6, [r0]
 8008940:	300c      	adds	r0, #12
 8008942:	60a0      	str	r0, [r4, #8]
 8008944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008948:	f7ff fcc8 	bl	80082dc <memset>
 800894c:	4620      	mov	r0, r4
 800894e:	bd70      	pop	{r4, r5, r6, pc}

08008950 <__sfp_lock_acquire>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sfp_lock_acquire+0x8>)
 8008952:	f000 b8c5 	b.w	8008ae0 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	200010ec 	.word	0x200010ec

0800895c <__sfp_lock_release>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__sfp_lock_release+0x8>)
 800895e:	f000 b8c0 	b.w	8008ae2 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	200010ec 	.word	0x200010ec

08008968 <__sinit_lock_acquire>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__sinit_lock_acquire+0x8>)
 800896a:	f000 b8b9 	b.w	8008ae0 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	200010e7 	.word	0x200010e7

08008974 <__sinit_lock_release>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__sinit_lock_release+0x8>)
 8008976:	f000 b8b4 	b.w	8008ae2 <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	200010e7 	.word	0x200010e7

08008980 <__sinit>:
 8008980:	b510      	push	{r4, lr}
 8008982:	4604      	mov	r4, r0
 8008984:	f7ff fff0 	bl	8008968 <__sinit_lock_acquire>
 8008988:	69a3      	ldr	r3, [r4, #24]
 800898a:	b11b      	cbz	r3, 8008994 <__sinit+0x14>
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	f7ff bff0 	b.w	8008974 <__sinit_lock_release>
 8008994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008998:	6523      	str	r3, [r4, #80]	; 0x50
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <__sinit+0x68>)
 800899c:	4a13      	ldr	r2, [pc, #76]	; (80089ec <__sinit+0x6c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	bf04      	itt	eq
 80089a6:	2301      	moveq	r3, #1
 80089a8:	61a3      	streq	r3, [r4, #24]
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 f820 	bl	80089f0 <__sfp>
 80089b0:	6060      	str	r0, [r4, #4]
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f81c 	bl	80089f0 <__sfp>
 80089b8:	60a0      	str	r0, [r4, #8]
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f818 	bl	80089f0 <__sfp>
 80089c0:	2200      	movs	r2, #0
 80089c2:	60e0      	str	r0, [r4, #12]
 80089c4:	2104      	movs	r1, #4
 80089c6:	6860      	ldr	r0, [r4, #4]
 80089c8:	f7ff ff82 	bl	80088d0 <std>
 80089cc:	68a0      	ldr	r0, [r4, #8]
 80089ce:	2201      	movs	r2, #1
 80089d0:	2109      	movs	r1, #9
 80089d2:	f7ff ff7d 	bl	80088d0 <std>
 80089d6:	68e0      	ldr	r0, [r4, #12]
 80089d8:	2202      	movs	r2, #2
 80089da:	2112      	movs	r1, #18
 80089dc:	f7ff ff78 	bl	80088d0 <std>
 80089e0:	2301      	movs	r3, #1
 80089e2:	61a3      	str	r3, [r4, #24]
 80089e4:	e7d2      	b.n	800898c <__sinit+0xc>
 80089e6:	bf00      	nop
 80089e8:	0800b160 	.word	0x0800b160
 80089ec:	08008919 	.word	0x08008919

080089f0 <__sfp>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	4607      	mov	r7, r0
 80089f4:	f7ff ffac 	bl	8008950 <__sfp_lock_acquire>
 80089f8:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <__sfp+0x84>)
 80089fa:	681e      	ldr	r6, [r3, #0]
 80089fc:	69b3      	ldr	r3, [r6, #24]
 80089fe:	b913      	cbnz	r3, 8008a06 <__sfp+0x16>
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ffbd 	bl	8008980 <__sinit>
 8008a06:	3648      	adds	r6, #72	; 0x48
 8008a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	d503      	bpl.n	8008a18 <__sfp+0x28>
 8008a10:	6833      	ldr	r3, [r6, #0]
 8008a12:	b30b      	cbz	r3, 8008a58 <__sfp+0x68>
 8008a14:	6836      	ldr	r6, [r6, #0]
 8008a16:	e7f7      	b.n	8008a08 <__sfp+0x18>
 8008a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a1c:	b9d5      	cbnz	r5, 8008a54 <__sfp+0x64>
 8008a1e:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <__sfp+0x88>)
 8008a20:	60e3      	str	r3, [r4, #12]
 8008a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a26:	6665      	str	r5, [r4, #100]	; 0x64
 8008a28:	f000 f859 	bl	8008ade <__retarget_lock_init_recursive>
 8008a2c:	f7ff ff96 	bl	800895c <__sfp_lock_release>
 8008a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a38:	6025      	str	r5, [r4, #0]
 8008a3a:	61a5      	str	r5, [r4, #24]
 8008a3c:	2208      	movs	r2, #8
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a44:	f7ff fc4a 	bl	80082dc <memset>
 8008a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a50:	4620      	mov	r0, r4
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	3468      	adds	r4, #104	; 0x68
 8008a56:	e7d9      	b.n	8008a0c <__sfp+0x1c>
 8008a58:	2104      	movs	r1, #4
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f7ff ff62 	bl	8008924 <__sfmoreglue>
 8008a60:	4604      	mov	r4, r0
 8008a62:	6030      	str	r0, [r6, #0]
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d1d5      	bne.n	8008a14 <__sfp+0x24>
 8008a68:	f7ff ff78 	bl	800895c <__sfp_lock_release>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	e7ee      	b.n	8008a50 <__sfp+0x60>
 8008a72:	bf00      	nop
 8008a74:	0800b160 	.word	0x0800b160
 8008a78:	ffff0001 	.word	0xffff0001

08008a7c <fiprintf>:
 8008a7c:	b40e      	push	{r1, r2, r3}
 8008a7e:	b503      	push	{r0, r1, lr}
 8008a80:	4601      	mov	r1, r0
 8008a82:	ab03      	add	r3, sp, #12
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <fiprintf+0x20>)
 8008a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	f000 fac5 	bl	800901c <_vfiprintf_r>
 8008a92:	b002      	add	sp, #8
 8008a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a98:	b003      	add	sp, #12
 8008a9a:	4770      	bx	lr
 8008a9c:	200009cc 	.word	0x200009cc

08008aa0 <_fwalk_reent>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	4688      	mov	r8, r1
 8008aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008aac:	2700      	movs	r7, #0
 8008aae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ab2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ab6:	d505      	bpl.n	8008ac4 <_fwalk_reent+0x24>
 8008ab8:	6824      	ldr	r4, [r4, #0]
 8008aba:	2c00      	cmp	r4, #0
 8008abc:	d1f7      	bne.n	8008aae <_fwalk_reent+0xe>
 8008abe:	4638      	mov	r0, r7
 8008ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac4:	89ab      	ldrh	r3, [r5, #12]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d907      	bls.n	8008ada <_fwalk_reent+0x3a>
 8008aca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	d003      	beq.n	8008ada <_fwalk_reent+0x3a>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	47c0      	blx	r8
 8008ad8:	4307      	orrs	r7, r0
 8008ada:	3568      	adds	r5, #104	; 0x68
 8008adc:	e7e9      	b.n	8008ab2 <_fwalk_reent+0x12>

08008ade <__retarget_lock_init_recursive>:
 8008ade:	4770      	bx	lr

08008ae0 <__retarget_lock_acquire_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_release_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <__swhatbuf_r>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	460e      	mov	r6, r1
 8008ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aec:	2900      	cmp	r1, #0
 8008aee:	b096      	sub	sp, #88	; 0x58
 8008af0:	4614      	mov	r4, r2
 8008af2:	461d      	mov	r5, r3
 8008af4:	da07      	bge.n	8008b06 <__swhatbuf_r+0x22>
 8008af6:	2300      	movs	r3, #0
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	89b3      	ldrh	r3, [r6, #12]
 8008afc:	061a      	lsls	r2, r3, #24
 8008afe:	d410      	bmi.n	8008b22 <__swhatbuf_r+0x3e>
 8008b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b04:	e00e      	b.n	8008b24 <__swhatbuf_r+0x40>
 8008b06:	466a      	mov	r2, sp
 8008b08:	f000 fe12 	bl	8009730 <_fstat_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	dbf2      	blt.n	8008af6 <__swhatbuf_r+0x12>
 8008b10:	9a01      	ldr	r2, [sp, #4]
 8008b12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b1a:	425a      	negs	r2, r3
 8008b1c:	415a      	adcs	r2, r3
 8008b1e:	602a      	str	r2, [r5, #0]
 8008b20:	e7ee      	b.n	8008b00 <__swhatbuf_r+0x1c>
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	2000      	movs	r0, #0
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	b016      	add	sp, #88	; 0x58
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}

08008b2c <__smakebuf_r>:
 8008b2c:	898b      	ldrh	r3, [r1, #12]
 8008b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b30:	079d      	lsls	r5, r3, #30
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	d507      	bpl.n	8008b48 <__smakebuf_r+0x1c>
 8008b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	2301      	movs	r3, #1
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	b002      	add	sp, #8
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	ab01      	add	r3, sp, #4
 8008b4a:	466a      	mov	r2, sp
 8008b4c:	f7ff ffca 	bl	8008ae4 <__swhatbuf_r>
 8008b50:	9900      	ldr	r1, [sp, #0]
 8008b52:	4605      	mov	r5, r0
 8008b54:	4630      	mov	r0, r6
 8008b56:	f000 f881 	bl	8008c5c <_malloc_r>
 8008b5a:	b948      	cbnz	r0, 8008b70 <__smakebuf_r+0x44>
 8008b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b60:	059a      	lsls	r2, r3, #22
 8008b62:	d4ef      	bmi.n	8008b44 <__smakebuf_r+0x18>
 8008b64:	f023 0303 	bic.w	r3, r3, #3
 8008b68:	f043 0302 	orr.w	r3, r3, #2
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	e7e3      	b.n	8008b38 <__smakebuf_r+0xc>
 8008b70:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <__smakebuf_r+0x7c>)
 8008b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	6020      	str	r0, [r4, #0]
 8008b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	9b00      	ldr	r3, [sp, #0]
 8008b80:	6163      	str	r3, [r4, #20]
 8008b82:	9b01      	ldr	r3, [sp, #4]
 8008b84:	6120      	str	r0, [r4, #16]
 8008b86:	b15b      	cbz	r3, 8008ba0 <__smakebuf_r+0x74>
 8008b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f000 fde1 	bl	8009754 <_isatty_r>
 8008b92:	b128      	cbz	r0, 8008ba0 <__smakebuf_r+0x74>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	f043 0301 	orr.w	r3, r3, #1
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	89a0      	ldrh	r0, [r4, #12]
 8008ba2:	4305      	orrs	r5, r0
 8008ba4:	81a5      	strh	r5, [r4, #12]
 8008ba6:	e7cd      	b.n	8008b44 <__smakebuf_r+0x18>
 8008ba8:	08008919 	.word	0x08008919

08008bac <malloc>:
 8008bac:	4b02      	ldr	r3, [pc, #8]	; (8008bb8 <malloc+0xc>)
 8008bae:	4601      	mov	r1, r0
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f000 b853 	b.w	8008c5c <_malloc_r>
 8008bb6:	bf00      	nop
 8008bb8:	200009cc 	.word	0x200009cc

08008bbc <_free_r>:
 8008bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bbe:	2900      	cmp	r1, #0
 8008bc0:	d048      	beq.n	8008c54 <_free_r+0x98>
 8008bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc6:	9001      	str	r0, [sp, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f1a1 0404 	sub.w	r4, r1, #4
 8008bce:	bfb8      	it	lt
 8008bd0:	18e4      	addlt	r4, r4, r3
 8008bd2:	f000 fe09 	bl	80097e8 <__malloc_lock>
 8008bd6:	4a20      	ldr	r2, [pc, #128]	; (8008c58 <_free_r+0x9c>)
 8008bd8:	9801      	ldr	r0, [sp, #4]
 8008bda:	6813      	ldr	r3, [r2, #0]
 8008bdc:	4615      	mov	r5, r2
 8008bde:	b933      	cbnz	r3, 8008bee <_free_r+0x32>
 8008be0:	6063      	str	r3, [r4, #4]
 8008be2:	6014      	str	r4, [r2, #0]
 8008be4:	b003      	add	sp, #12
 8008be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bea:	f000 be03 	b.w	80097f4 <__malloc_unlock>
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	d90b      	bls.n	8008c0a <_free_r+0x4e>
 8008bf2:	6821      	ldr	r1, [r4, #0]
 8008bf4:	1862      	adds	r2, r4, r1
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	bf04      	itt	eq
 8008bfa:	681a      	ldreq	r2, [r3, #0]
 8008bfc:	685b      	ldreq	r3, [r3, #4]
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	bf04      	itt	eq
 8008c02:	1852      	addeq	r2, r2, r1
 8008c04:	6022      	streq	r2, [r4, #0]
 8008c06:	602c      	str	r4, [r5, #0]
 8008c08:	e7ec      	b.n	8008be4 <_free_r+0x28>
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	b10b      	cbz	r3, 8008c14 <_free_r+0x58>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d9fa      	bls.n	8008c0a <_free_r+0x4e>
 8008c14:	6811      	ldr	r1, [r2, #0]
 8008c16:	1855      	adds	r5, r2, r1
 8008c18:	42a5      	cmp	r5, r4
 8008c1a:	d10b      	bne.n	8008c34 <_free_r+0x78>
 8008c1c:	6824      	ldr	r4, [r4, #0]
 8008c1e:	4421      	add	r1, r4
 8008c20:	1854      	adds	r4, r2, r1
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	d1dd      	bne.n	8008be4 <_free_r+0x28>
 8008c28:	681c      	ldr	r4, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	6053      	str	r3, [r2, #4]
 8008c2e:	4421      	add	r1, r4
 8008c30:	6011      	str	r1, [r2, #0]
 8008c32:	e7d7      	b.n	8008be4 <_free_r+0x28>
 8008c34:	d902      	bls.n	8008c3c <_free_r+0x80>
 8008c36:	230c      	movs	r3, #12
 8008c38:	6003      	str	r3, [r0, #0]
 8008c3a:	e7d3      	b.n	8008be4 <_free_r+0x28>
 8008c3c:	6825      	ldr	r5, [r4, #0]
 8008c3e:	1961      	adds	r1, r4, r5
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf04      	itt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	6063      	str	r3, [r4, #4]
 8008c4a:	bf04      	itt	eq
 8008c4c:	1949      	addeq	r1, r1, r5
 8008c4e:	6021      	streq	r1, [r4, #0]
 8008c50:	6054      	str	r4, [r2, #4]
 8008c52:	e7c7      	b.n	8008be4 <_free_r+0x28>
 8008c54:	b003      	add	sp, #12
 8008c56:	bd30      	pop	{r4, r5, pc}
 8008c58:	20000e5c 	.word	0x20000e5c

08008c5c <_malloc_r>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	1ccd      	adds	r5, r1, #3
 8008c60:	f025 0503 	bic.w	r5, r5, #3
 8008c64:	3508      	adds	r5, #8
 8008c66:	2d0c      	cmp	r5, #12
 8008c68:	bf38      	it	cc
 8008c6a:	250c      	movcc	r5, #12
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	4606      	mov	r6, r0
 8008c70:	db01      	blt.n	8008c76 <_malloc_r+0x1a>
 8008c72:	42a9      	cmp	r1, r5
 8008c74:	d903      	bls.n	8008c7e <_malloc_r+0x22>
 8008c76:	230c      	movs	r3, #12
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7e:	f000 fdb3 	bl	80097e8 <__malloc_lock>
 8008c82:	4921      	ldr	r1, [pc, #132]	; (8008d08 <_malloc_r+0xac>)
 8008c84:	680a      	ldr	r2, [r1, #0]
 8008c86:	4614      	mov	r4, r2
 8008c88:	b99c      	cbnz	r4, 8008cb2 <_malloc_r+0x56>
 8008c8a:	4f20      	ldr	r7, [pc, #128]	; (8008d0c <_malloc_r+0xb0>)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	b923      	cbnz	r3, 8008c9a <_malloc_r+0x3e>
 8008c90:	4621      	mov	r1, r4
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 fcce 	bl	8009634 <_sbrk_r>
 8008c98:	6038      	str	r0, [r7, #0]
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f000 fcc9 	bl	8009634 <_sbrk_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d123      	bne.n	8008cee <_malloc_r+0x92>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	6033      	str	r3, [r6, #0]
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 fda2 	bl	80097f4 <__malloc_unlock>
 8008cb0:	e7e3      	b.n	8008c7a <_malloc_r+0x1e>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	1b5b      	subs	r3, r3, r5
 8008cb6:	d417      	bmi.n	8008ce8 <_malloc_r+0x8c>
 8008cb8:	2b0b      	cmp	r3, #11
 8008cba:	d903      	bls.n	8008cc4 <_malloc_r+0x68>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	441c      	add	r4, r3
 8008cc0:	6025      	str	r5, [r4, #0]
 8008cc2:	e004      	b.n	8008cce <_malloc_r+0x72>
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	42a2      	cmp	r2, r4
 8008cc8:	bf0c      	ite	eq
 8008cca:	600b      	streq	r3, [r1, #0]
 8008ccc:	6053      	strne	r3, [r2, #4]
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f000 fd90 	bl	80097f4 <__malloc_unlock>
 8008cd4:	f104 000b 	add.w	r0, r4, #11
 8008cd8:	1d23      	adds	r3, r4, #4
 8008cda:	f020 0007 	bic.w	r0, r0, #7
 8008cde:	1ac2      	subs	r2, r0, r3
 8008ce0:	d0cc      	beq.n	8008c7c <_malloc_r+0x20>
 8008ce2:	1a1b      	subs	r3, r3, r0
 8008ce4:	50a3      	str	r3, [r4, r2]
 8008ce6:	e7c9      	b.n	8008c7c <_malloc_r+0x20>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	6864      	ldr	r4, [r4, #4]
 8008cec:	e7cc      	b.n	8008c88 <_malloc_r+0x2c>
 8008cee:	1cc4      	adds	r4, r0, #3
 8008cf0:	f024 0403 	bic.w	r4, r4, #3
 8008cf4:	42a0      	cmp	r0, r4
 8008cf6:	d0e3      	beq.n	8008cc0 <_malloc_r+0x64>
 8008cf8:	1a21      	subs	r1, r4, r0
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f000 fc9a 	bl	8009634 <_sbrk_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d1dd      	bne.n	8008cc0 <_malloc_r+0x64>
 8008d04:	e7cf      	b.n	8008ca6 <_malloc_r+0x4a>
 8008d06:	bf00      	nop
 8008d08:	20000e5c 	.word	0x20000e5c
 8008d0c:	20000e60 	.word	0x20000e60

08008d10 <__ssputs_r>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	688e      	ldr	r6, [r1, #8]
 8008d16:	429e      	cmp	r6, r3
 8008d18:	4682      	mov	sl, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	4690      	mov	r8, r2
 8008d1e:	461f      	mov	r7, r3
 8008d20:	d838      	bhi.n	8008d94 <__ssputs_r+0x84>
 8008d22:	898a      	ldrh	r2, [r1, #12]
 8008d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d28:	d032      	beq.n	8008d90 <__ssputs_r+0x80>
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	6909      	ldr	r1, [r1, #16]
 8008d2e:	eba5 0901 	sub.w	r9, r5, r1
 8008d32:	6965      	ldr	r5, [r4, #20]
 8008d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	444b      	add	r3, r9
 8008d40:	106d      	asrs	r5, r5, #1
 8008d42:	429d      	cmp	r5, r3
 8008d44:	bf38      	it	cc
 8008d46:	461d      	movcc	r5, r3
 8008d48:	0553      	lsls	r3, r2, #21
 8008d4a:	d531      	bpl.n	8008db0 <__ssputs_r+0xa0>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7ff ff85 	bl	8008c5c <_malloc_r>
 8008d52:	4606      	mov	r6, r0
 8008d54:	b950      	cbnz	r0, 8008d6c <__ssputs_r+0x5c>
 8008d56:	230c      	movs	r3, #12
 8008d58:	f8ca 3000 	str.w	r3, [sl]
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6c:	6921      	ldr	r1, [r4, #16]
 8008d6e:	464a      	mov	r2, r9
 8008d70:	f000 fd12 	bl	8009798 <memcpy>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	6126      	str	r6, [r4, #16]
 8008d82:	6165      	str	r5, [r4, #20]
 8008d84:	444e      	add	r6, r9
 8008d86:	eba5 0509 	sub.w	r5, r5, r9
 8008d8a:	6026      	str	r6, [r4, #0]
 8008d8c:	60a5      	str	r5, [r4, #8]
 8008d8e:	463e      	mov	r6, r7
 8008d90:	42be      	cmp	r6, r7
 8008d92:	d900      	bls.n	8008d96 <__ssputs_r+0x86>
 8008d94:	463e      	mov	r6, r7
 8008d96:	4632      	mov	r2, r6
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	f000 fd0a 	bl	80097b4 <memmove>
 8008da0:	68a3      	ldr	r3, [r4, #8]
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	1b9b      	subs	r3, r3, r6
 8008da6:	4432      	add	r2, r6
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	2000      	movs	r0, #0
 8008dae:	e7db      	b.n	8008d68 <__ssputs_r+0x58>
 8008db0:	462a      	mov	r2, r5
 8008db2:	f000 fd25 	bl	8009800 <_realloc_r>
 8008db6:	4606      	mov	r6, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d1e1      	bne.n	8008d80 <__ssputs_r+0x70>
 8008dbc:	6921      	ldr	r1, [r4, #16]
 8008dbe:	4650      	mov	r0, sl
 8008dc0:	f7ff fefc 	bl	8008bbc <_free_r>
 8008dc4:	e7c7      	b.n	8008d56 <__ssputs_r+0x46>
	...

08008dc8 <_svfiprintf_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	4698      	mov	r8, r3
 8008dce:	898b      	ldrh	r3, [r1, #12]
 8008dd0:	061b      	lsls	r3, r3, #24
 8008dd2:	b09d      	sub	sp, #116	; 0x74
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	4614      	mov	r4, r2
 8008dda:	d50e      	bpl.n	8008dfa <_svfiprintf_r+0x32>
 8008ddc:	690b      	ldr	r3, [r1, #16]
 8008dde:	b963      	cbnz	r3, 8008dfa <_svfiprintf_r+0x32>
 8008de0:	2140      	movs	r1, #64	; 0x40
 8008de2:	f7ff ff3b 	bl	8008c5c <_malloc_r>
 8008de6:	6028      	str	r0, [r5, #0]
 8008de8:	6128      	str	r0, [r5, #16]
 8008dea:	b920      	cbnz	r0, 8008df6 <_svfiprintf_r+0x2e>
 8008dec:	230c      	movs	r3, #12
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e0d1      	b.n	8008f9a <_svfiprintf_r+0x1d2>
 8008df6:	2340      	movs	r3, #64	; 0x40
 8008df8:	616b      	str	r3, [r5, #20]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfe:	2320      	movs	r3, #32
 8008e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e08:	2330      	movs	r3, #48	; 0x30
 8008e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fb4 <_svfiprintf_r+0x1ec>
 8008e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e12:	f04f 0901 	mov.w	r9, #1
 8008e16:	4623      	mov	r3, r4
 8008e18:	469a      	mov	sl, r3
 8008e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e1e:	b10a      	cbz	r2, 8008e24 <_svfiprintf_r+0x5c>
 8008e20:	2a25      	cmp	r2, #37	; 0x25
 8008e22:	d1f9      	bne.n	8008e18 <_svfiprintf_r+0x50>
 8008e24:	ebba 0b04 	subs.w	fp, sl, r4
 8008e28:	d00b      	beq.n	8008e42 <_svfiprintf_r+0x7a>
 8008e2a:	465b      	mov	r3, fp
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4638      	mov	r0, r7
 8008e32:	f7ff ff6d 	bl	8008d10 <__ssputs_r>
 8008e36:	3001      	adds	r0, #1
 8008e38:	f000 80aa 	beq.w	8008f90 <_svfiprintf_r+0x1c8>
 8008e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e3e:	445a      	add	r2, fp
 8008e40:	9209      	str	r2, [sp, #36]	; 0x24
 8008e42:	f89a 3000 	ldrb.w	r3, [sl]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 80a2 	beq.w	8008f90 <_svfiprintf_r+0x1c8>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e56:	f10a 0a01 	add.w	sl, sl, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e62:	931a      	str	r3, [sp, #104]	; 0x68
 8008e64:	4654      	mov	r4, sl
 8008e66:	2205      	movs	r2, #5
 8008e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6c:	4851      	ldr	r0, [pc, #324]	; (8008fb4 <_svfiprintf_r+0x1ec>)
 8008e6e:	f7f7 f9ef 	bl	8000250 <memchr>
 8008e72:	9a04      	ldr	r2, [sp, #16]
 8008e74:	b9d8      	cbnz	r0, 8008eae <_svfiprintf_r+0xe6>
 8008e76:	06d0      	lsls	r0, r2, #27
 8008e78:	bf44      	itt	mi
 8008e7a:	2320      	movmi	r3, #32
 8008e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e80:	0711      	lsls	r1, r2, #28
 8008e82:	bf44      	itt	mi
 8008e84:	232b      	movmi	r3, #43	; 0x2b
 8008e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e90:	d015      	beq.n	8008ebe <_svfiprintf_r+0xf6>
 8008e92:	9a07      	ldr	r2, [sp, #28]
 8008e94:	4654      	mov	r4, sl
 8008e96:	2000      	movs	r0, #0
 8008e98:	f04f 0c0a 	mov.w	ip, #10
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ea2:	3b30      	subs	r3, #48	; 0x30
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	d94e      	bls.n	8008f46 <_svfiprintf_r+0x17e>
 8008ea8:	b1b0      	cbz	r0, 8008ed8 <_svfiprintf_r+0x110>
 8008eaa:	9207      	str	r2, [sp, #28]
 8008eac:	e014      	b.n	8008ed8 <_svfiprintf_r+0x110>
 8008eae:	eba0 0308 	sub.w	r3, r0, r8
 8008eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	46a2      	mov	sl, r4
 8008ebc:	e7d2      	b.n	8008e64 <_svfiprintf_r+0x9c>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	1d19      	adds	r1, r3, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	9103      	str	r1, [sp, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfbb      	ittet	lt
 8008eca:	425b      	neglt	r3, r3
 8008ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ed0:	9307      	strge	r3, [sp, #28]
 8008ed2:	9307      	strlt	r3, [sp, #28]
 8008ed4:	bfb8      	it	lt
 8008ed6:	9204      	strlt	r2, [sp, #16]
 8008ed8:	7823      	ldrb	r3, [r4, #0]
 8008eda:	2b2e      	cmp	r3, #46	; 0x2e
 8008edc:	d10c      	bne.n	8008ef8 <_svfiprintf_r+0x130>
 8008ede:	7863      	ldrb	r3, [r4, #1]
 8008ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ee2:	d135      	bne.n	8008f50 <_svfiprintf_r+0x188>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	1d1a      	adds	r2, r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	9203      	str	r2, [sp, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfb8      	it	lt
 8008ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ef4:	3402      	adds	r4, #2
 8008ef6:	9305      	str	r3, [sp, #20]
 8008ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fc4 <_svfiprintf_r+0x1fc>
 8008efc:	7821      	ldrb	r1, [r4, #0]
 8008efe:	2203      	movs	r2, #3
 8008f00:	4650      	mov	r0, sl
 8008f02:	f7f7 f9a5 	bl	8000250 <memchr>
 8008f06:	b140      	cbz	r0, 8008f1a <_svfiprintf_r+0x152>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	eba0 000a 	sub.w	r0, r0, sl
 8008f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	4303      	orrs	r3, r0
 8008f16:	3401      	adds	r4, #1
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1e:	4826      	ldr	r0, [pc, #152]	; (8008fb8 <_svfiprintf_r+0x1f0>)
 8008f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f24:	2206      	movs	r2, #6
 8008f26:	f7f7 f993 	bl	8000250 <memchr>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d038      	beq.n	8008fa0 <_svfiprintf_r+0x1d8>
 8008f2e:	4b23      	ldr	r3, [pc, #140]	; (8008fbc <_svfiprintf_r+0x1f4>)
 8008f30:	bb1b      	cbnz	r3, 8008f7a <_svfiprintf_r+0x1b2>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	3307      	adds	r3, #7
 8008f36:	f023 0307 	bic.w	r3, r3, #7
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	9303      	str	r3, [sp, #12]
 8008f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f40:	4433      	add	r3, r6
 8008f42:	9309      	str	r3, [sp, #36]	; 0x24
 8008f44:	e767      	b.n	8008e16 <_svfiprintf_r+0x4e>
 8008f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	e7a5      	b.n	8008e9c <_svfiprintf_r+0xd4>
 8008f50:	2300      	movs	r3, #0
 8008f52:	3401      	adds	r4, #1
 8008f54:	9305      	str	r3, [sp, #20]
 8008f56:	4619      	mov	r1, r3
 8008f58:	f04f 0c0a 	mov.w	ip, #10
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f62:	3a30      	subs	r2, #48	; 0x30
 8008f64:	2a09      	cmp	r2, #9
 8008f66:	d903      	bls.n	8008f70 <_svfiprintf_r+0x1a8>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0c5      	beq.n	8008ef8 <_svfiprintf_r+0x130>
 8008f6c:	9105      	str	r1, [sp, #20]
 8008f6e:	e7c3      	b.n	8008ef8 <_svfiprintf_r+0x130>
 8008f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f74:	4604      	mov	r4, r0
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7f0      	b.n	8008f5c <_svfiprintf_r+0x194>
 8008f7a:	ab03      	add	r3, sp, #12
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	462a      	mov	r2, r5
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <_svfiprintf_r+0x1f8>)
 8008f82:	a904      	add	r1, sp, #16
 8008f84:	4638      	mov	r0, r7
 8008f86:	f3af 8000 	nop.w
 8008f8a:	1c42      	adds	r2, r0, #1
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	d1d6      	bne.n	8008f3e <_svfiprintf_r+0x176>
 8008f90:	89ab      	ldrh	r3, [r5, #12]
 8008f92:	065b      	lsls	r3, r3, #25
 8008f94:	f53f af2c 	bmi.w	8008df0 <_svfiprintf_r+0x28>
 8008f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f9a:	b01d      	add	sp, #116	; 0x74
 8008f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <_svfiprintf_r+0x1f8>)
 8008fa8:	a904      	add	r1, sp, #16
 8008faa:	4638      	mov	r0, r7
 8008fac:	f000 f9d4 	bl	8009358 <_printf_i>
 8008fb0:	e7eb      	b.n	8008f8a <_svfiprintf_r+0x1c2>
 8008fb2:	bf00      	nop
 8008fb4:	0800b278 	.word	0x0800b278
 8008fb8:	0800b282 	.word	0x0800b282
 8008fbc:	00000000 	.word	0x00000000
 8008fc0:	08008d11 	.word	0x08008d11
 8008fc4:	0800b27e 	.word	0x0800b27e

08008fc8 <__sfputc_r>:
 8008fc8:	6893      	ldr	r3, [r2, #8]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	b410      	push	{r4}
 8008fd0:	6093      	str	r3, [r2, #8]
 8008fd2:	da08      	bge.n	8008fe6 <__sfputc_r+0x1e>
 8008fd4:	6994      	ldr	r4, [r2, #24]
 8008fd6:	42a3      	cmp	r3, r4
 8008fd8:	db01      	blt.n	8008fde <__sfputc_r+0x16>
 8008fda:	290a      	cmp	r1, #10
 8008fdc:	d103      	bne.n	8008fe6 <__sfputc_r+0x1e>
 8008fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe2:	f7ff bad5 	b.w	8008590 <__swbuf_r>
 8008fe6:	6813      	ldr	r3, [r2, #0]
 8008fe8:	1c58      	adds	r0, r3, #1
 8008fea:	6010      	str	r0, [r2, #0]
 8008fec:	7019      	strb	r1, [r3, #0]
 8008fee:	4608      	mov	r0, r1
 8008ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <__sfputs_r>:
 8008ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	18d5      	adds	r5, r2, r3
 8009000:	42ac      	cmp	r4, r5
 8009002:	d101      	bne.n	8009008 <__sfputs_r+0x12>
 8009004:	2000      	movs	r0, #0
 8009006:	e007      	b.n	8009018 <__sfputs_r+0x22>
 8009008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900c:	463a      	mov	r2, r7
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ffda 	bl	8008fc8 <__sfputc_r>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d1f3      	bne.n	8009000 <__sfputs_r+0xa>
 8009018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800901c <_vfiprintf_r>:
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	460d      	mov	r5, r1
 8009022:	b09d      	sub	sp, #116	; 0x74
 8009024:	4614      	mov	r4, r2
 8009026:	4698      	mov	r8, r3
 8009028:	4606      	mov	r6, r0
 800902a:	b118      	cbz	r0, 8009034 <_vfiprintf_r+0x18>
 800902c:	6983      	ldr	r3, [r0, #24]
 800902e:	b90b      	cbnz	r3, 8009034 <_vfiprintf_r+0x18>
 8009030:	f7ff fca6 	bl	8008980 <__sinit>
 8009034:	4b89      	ldr	r3, [pc, #548]	; (800925c <_vfiprintf_r+0x240>)
 8009036:	429d      	cmp	r5, r3
 8009038:	d11b      	bne.n	8009072 <_vfiprintf_r+0x56>
 800903a:	6875      	ldr	r5, [r6, #4]
 800903c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800903e:	07d9      	lsls	r1, r3, #31
 8009040:	d405      	bmi.n	800904e <_vfiprintf_r+0x32>
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	059a      	lsls	r2, r3, #22
 8009046:	d402      	bmi.n	800904e <_vfiprintf_r+0x32>
 8009048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800904a:	f7ff fd49 	bl	8008ae0 <__retarget_lock_acquire_recursive>
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	071b      	lsls	r3, r3, #28
 8009052:	d501      	bpl.n	8009058 <_vfiprintf_r+0x3c>
 8009054:	692b      	ldr	r3, [r5, #16]
 8009056:	b9eb      	cbnz	r3, 8009094 <_vfiprintf_r+0x78>
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff faea 	bl	8008634 <__swsetup_r>
 8009060:	b1c0      	cbz	r0, 8009094 <_vfiprintf_r+0x78>
 8009062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009064:	07dc      	lsls	r4, r3, #31
 8009066:	d50e      	bpl.n	8009086 <_vfiprintf_r+0x6a>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	b01d      	add	sp, #116	; 0x74
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	4b7b      	ldr	r3, [pc, #492]	; (8009260 <_vfiprintf_r+0x244>)
 8009074:	429d      	cmp	r5, r3
 8009076:	d101      	bne.n	800907c <_vfiprintf_r+0x60>
 8009078:	68b5      	ldr	r5, [r6, #8]
 800907a:	e7df      	b.n	800903c <_vfiprintf_r+0x20>
 800907c:	4b79      	ldr	r3, [pc, #484]	; (8009264 <_vfiprintf_r+0x248>)
 800907e:	429d      	cmp	r5, r3
 8009080:	bf08      	it	eq
 8009082:	68f5      	ldreq	r5, [r6, #12]
 8009084:	e7da      	b.n	800903c <_vfiprintf_r+0x20>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	0598      	lsls	r0, r3, #22
 800908a:	d4ed      	bmi.n	8009068 <_vfiprintf_r+0x4c>
 800908c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800908e:	f7ff fd28 	bl	8008ae2 <__retarget_lock_release_recursive>
 8009092:	e7e9      	b.n	8009068 <_vfiprintf_r+0x4c>
 8009094:	2300      	movs	r3, #0
 8009096:	9309      	str	r3, [sp, #36]	; 0x24
 8009098:	2320      	movs	r3, #32
 800909a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800909e:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a2:	2330      	movs	r3, #48	; 0x30
 80090a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009268 <_vfiprintf_r+0x24c>
 80090a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090ac:	f04f 0901 	mov.w	r9, #1
 80090b0:	4623      	mov	r3, r4
 80090b2:	469a      	mov	sl, r3
 80090b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b8:	b10a      	cbz	r2, 80090be <_vfiprintf_r+0xa2>
 80090ba:	2a25      	cmp	r2, #37	; 0x25
 80090bc:	d1f9      	bne.n	80090b2 <_vfiprintf_r+0x96>
 80090be:	ebba 0b04 	subs.w	fp, sl, r4
 80090c2:	d00b      	beq.n	80090dc <_vfiprintf_r+0xc0>
 80090c4:	465b      	mov	r3, fp
 80090c6:	4622      	mov	r2, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff ff93 	bl	8008ff6 <__sfputs_r>
 80090d0:	3001      	adds	r0, #1
 80090d2:	f000 80aa 	beq.w	800922a <_vfiprintf_r+0x20e>
 80090d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d8:	445a      	add	r2, fp
 80090da:	9209      	str	r2, [sp, #36]	; 0x24
 80090dc:	f89a 3000 	ldrb.w	r3, [sl]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 80a2 	beq.w	800922a <_vfiprintf_r+0x20e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f0:	f10a 0a01 	add.w	sl, sl, #1
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	9307      	str	r3, [sp, #28]
 80090f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090fc:	931a      	str	r3, [sp, #104]	; 0x68
 80090fe:	4654      	mov	r4, sl
 8009100:	2205      	movs	r2, #5
 8009102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009106:	4858      	ldr	r0, [pc, #352]	; (8009268 <_vfiprintf_r+0x24c>)
 8009108:	f7f7 f8a2 	bl	8000250 <memchr>
 800910c:	9a04      	ldr	r2, [sp, #16]
 800910e:	b9d8      	cbnz	r0, 8009148 <_vfiprintf_r+0x12c>
 8009110:	06d1      	lsls	r1, r2, #27
 8009112:	bf44      	itt	mi
 8009114:	2320      	movmi	r3, #32
 8009116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911a:	0713      	lsls	r3, r2, #28
 800911c:	bf44      	itt	mi
 800911e:	232b      	movmi	r3, #43	; 0x2b
 8009120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009124:	f89a 3000 	ldrb.w	r3, [sl]
 8009128:	2b2a      	cmp	r3, #42	; 0x2a
 800912a:	d015      	beq.n	8009158 <_vfiprintf_r+0x13c>
 800912c:	9a07      	ldr	r2, [sp, #28]
 800912e:	4654      	mov	r4, sl
 8009130:	2000      	movs	r0, #0
 8009132:	f04f 0c0a 	mov.w	ip, #10
 8009136:	4621      	mov	r1, r4
 8009138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800913c:	3b30      	subs	r3, #48	; 0x30
 800913e:	2b09      	cmp	r3, #9
 8009140:	d94e      	bls.n	80091e0 <_vfiprintf_r+0x1c4>
 8009142:	b1b0      	cbz	r0, 8009172 <_vfiprintf_r+0x156>
 8009144:	9207      	str	r2, [sp, #28]
 8009146:	e014      	b.n	8009172 <_vfiprintf_r+0x156>
 8009148:	eba0 0308 	sub.w	r3, r0, r8
 800914c:	fa09 f303 	lsl.w	r3, r9, r3
 8009150:	4313      	orrs	r3, r2
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	46a2      	mov	sl, r4
 8009156:	e7d2      	b.n	80090fe <_vfiprintf_r+0xe2>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	1d19      	adds	r1, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9103      	str	r1, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfbb      	ittet	lt
 8009164:	425b      	neglt	r3, r3
 8009166:	f042 0202 	orrlt.w	r2, r2, #2
 800916a:	9307      	strge	r3, [sp, #28]
 800916c:	9307      	strlt	r3, [sp, #28]
 800916e:	bfb8      	it	lt
 8009170:	9204      	strlt	r2, [sp, #16]
 8009172:	7823      	ldrb	r3, [r4, #0]
 8009174:	2b2e      	cmp	r3, #46	; 0x2e
 8009176:	d10c      	bne.n	8009192 <_vfiprintf_r+0x176>
 8009178:	7863      	ldrb	r3, [r4, #1]
 800917a:	2b2a      	cmp	r3, #42	; 0x2a
 800917c:	d135      	bne.n	80091ea <_vfiprintf_r+0x1ce>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	1d1a      	adds	r2, r3, #4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	9203      	str	r2, [sp, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	f04f 33ff 	movlt.w	r3, #4294967295
 800918e:	3402      	adds	r4, #2
 8009190:	9305      	str	r3, [sp, #20]
 8009192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009278 <_vfiprintf_r+0x25c>
 8009196:	7821      	ldrb	r1, [r4, #0]
 8009198:	2203      	movs	r2, #3
 800919a:	4650      	mov	r0, sl
 800919c:	f7f7 f858 	bl	8000250 <memchr>
 80091a0:	b140      	cbz	r0, 80091b4 <_vfiprintf_r+0x198>
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	eba0 000a 	sub.w	r0, r0, sl
 80091a8:	fa03 f000 	lsl.w	r0, r3, r0
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	4303      	orrs	r3, r0
 80091b0:	3401      	adds	r4, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b8:	482c      	ldr	r0, [pc, #176]	; (800926c <_vfiprintf_r+0x250>)
 80091ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091be:	2206      	movs	r2, #6
 80091c0:	f7f7 f846 	bl	8000250 <memchr>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d03f      	beq.n	8009248 <_vfiprintf_r+0x22c>
 80091c8:	4b29      	ldr	r3, [pc, #164]	; (8009270 <_vfiprintf_r+0x254>)
 80091ca:	bb1b      	cbnz	r3, 8009214 <_vfiprintf_r+0x1f8>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	3307      	adds	r3, #7
 80091d0:	f023 0307 	bic.w	r3, r3, #7
 80091d4:	3308      	adds	r3, #8
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	443b      	add	r3, r7
 80091dc:	9309      	str	r3, [sp, #36]	; 0x24
 80091de:	e767      	b.n	80090b0 <_vfiprintf_r+0x94>
 80091e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e4:	460c      	mov	r4, r1
 80091e6:	2001      	movs	r0, #1
 80091e8:	e7a5      	b.n	8009136 <_vfiprintf_r+0x11a>
 80091ea:	2300      	movs	r3, #0
 80091ec:	3401      	adds	r4, #1
 80091ee:	9305      	str	r3, [sp, #20]
 80091f0:	4619      	mov	r1, r3
 80091f2:	f04f 0c0a 	mov.w	ip, #10
 80091f6:	4620      	mov	r0, r4
 80091f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fc:	3a30      	subs	r2, #48	; 0x30
 80091fe:	2a09      	cmp	r2, #9
 8009200:	d903      	bls.n	800920a <_vfiprintf_r+0x1ee>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0c5      	beq.n	8009192 <_vfiprintf_r+0x176>
 8009206:	9105      	str	r1, [sp, #20]
 8009208:	e7c3      	b.n	8009192 <_vfiprintf_r+0x176>
 800920a:	fb0c 2101 	mla	r1, ip, r1, r2
 800920e:	4604      	mov	r4, r0
 8009210:	2301      	movs	r3, #1
 8009212:	e7f0      	b.n	80091f6 <_vfiprintf_r+0x1da>
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4b16      	ldr	r3, [pc, #88]	; (8009274 <_vfiprintf_r+0x258>)
 800921c:	a904      	add	r1, sp, #16
 800921e:	4630      	mov	r0, r6
 8009220:	f3af 8000 	nop.w
 8009224:	4607      	mov	r7, r0
 8009226:	1c78      	adds	r0, r7, #1
 8009228:	d1d6      	bne.n	80091d8 <_vfiprintf_r+0x1bc>
 800922a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800922c:	07d9      	lsls	r1, r3, #31
 800922e:	d405      	bmi.n	800923c <_vfiprintf_r+0x220>
 8009230:	89ab      	ldrh	r3, [r5, #12]
 8009232:	059a      	lsls	r2, r3, #22
 8009234:	d402      	bmi.n	800923c <_vfiprintf_r+0x220>
 8009236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009238:	f7ff fc53 	bl	8008ae2 <__retarget_lock_release_recursive>
 800923c:	89ab      	ldrh	r3, [r5, #12]
 800923e:	065b      	lsls	r3, r3, #25
 8009240:	f53f af12 	bmi.w	8009068 <_vfiprintf_r+0x4c>
 8009244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009246:	e711      	b.n	800906c <_vfiprintf_r+0x50>
 8009248:	ab03      	add	r3, sp, #12
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	462a      	mov	r2, r5
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <_vfiprintf_r+0x258>)
 8009250:	a904      	add	r1, sp, #16
 8009252:	4630      	mov	r0, r6
 8009254:	f000 f880 	bl	8009358 <_printf_i>
 8009258:	e7e4      	b.n	8009224 <_vfiprintf_r+0x208>
 800925a:	bf00      	nop
 800925c:	0800b238 	.word	0x0800b238
 8009260:	0800b258 	.word	0x0800b258
 8009264:	0800b218 	.word	0x0800b218
 8009268:	0800b278 	.word	0x0800b278
 800926c:	0800b282 	.word	0x0800b282
 8009270:	00000000 	.word	0x00000000
 8009274:	08008ff7 	.word	0x08008ff7
 8009278:	0800b27e 	.word	0x0800b27e

0800927c <_printf_common>:
 800927c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009280:	4616      	mov	r6, r2
 8009282:	4699      	mov	r9, r3
 8009284:	688a      	ldr	r2, [r1, #8]
 8009286:	690b      	ldr	r3, [r1, #16]
 8009288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800928c:	4293      	cmp	r3, r2
 800928e:	bfb8      	it	lt
 8009290:	4613      	movlt	r3, r2
 8009292:	6033      	str	r3, [r6, #0]
 8009294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009298:	4607      	mov	r7, r0
 800929a:	460c      	mov	r4, r1
 800929c:	b10a      	cbz	r2, 80092a2 <_printf_common+0x26>
 800929e:	3301      	adds	r3, #1
 80092a0:	6033      	str	r3, [r6, #0]
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	0699      	lsls	r1, r3, #26
 80092a6:	bf42      	ittt	mi
 80092a8:	6833      	ldrmi	r3, [r6, #0]
 80092aa:	3302      	addmi	r3, #2
 80092ac:	6033      	strmi	r3, [r6, #0]
 80092ae:	6825      	ldr	r5, [r4, #0]
 80092b0:	f015 0506 	ands.w	r5, r5, #6
 80092b4:	d106      	bne.n	80092c4 <_printf_common+0x48>
 80092b6:	f104 0a19 	add.w	sl, r4, #25
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	6832      	ldr	r2, [r6, #0]
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dc26      	bgt.n	8009312 <_printf_common+0x96>
 80092c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092c8:	1e13      	subs	r3, r2, #0
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	bf18      	it	ne
 80092ce:	2301      	movne	r3, #1
 80092d0:	0692      	lsls	r2, r2, #26
 80092d2:	d42b      	bmi.n	800932c <_printf_common+0xb0>
 80092d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092d8:	4649      	mov	r1, r9
 80092da:	4638      	mov	r0, r7
 80092dc:	47c0      	blx	r8
 80092de:	3001      	adds	r0, #1
 80092e0:	d01e      	beq.n	8009320 <_printf_common+0xa4>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	68e5      	ldr	r5, [r4, #12]
 80092e6:	6832      	ldr	r2, [r6, #0]
 80092e8:	f003 0306 	and.w	r3, r3, #6
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	bf08      	it	eq
 80092f0:	1aad      	subeq	r5, r5, r2
 80092f2:	68a3      	ldr	r3, [r4, #8]
 80092f4:	6922      	ldr	r2, [r4, #16]
 80092f6:	bf0c      	ite	eq
 80092f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092fc:	2500      	movne	r5, #0
 80092fe:	4293      	cmp	r3, r2
 8009300:	bfc4      	itt	gt
 8009302:	1a9b      	subgt	r3, r3, r2
 8009304:	18ed      	addgt	r5, r5, r3
 8009306:	2600      	movs	r6, #0
 8009308:	341a      	adds	r4, #26
 800930a:	42b5      	cmp	r5, r6
 800930c:	d11a      	bne.n	8009344 <_printf_common+0xc8>
 800930e:	2000      	movs	r0, #0
 8009310:	e008      	b.n	8009324 <_printf_common+0xa8>
 8009312:	2301      	movs	r3, #1
 8009314:	4652      	mov	r2, sl
 8009316:	4649      	mov	r1, r9
 8009318:	4638      	mov	r0, r7
 800931a:	47c0      	blx	r8
 800931c:	3001      	adds	r0, #1
 800931e:	d103      	bne.n	8009328 <_printf_common+0xac>
 8009320:	f04f 30ff 	mov.w	r0, #4294967295
 8009324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009328:	3501      	adds	r5, #1
 800932a:	e7c6      	b.n	80092ba <_printf_common+0x3e>
 800932c:	18e1      	adds	r1, r4, r3
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	2030      	movs	r0, #48	; 0x30
 8009332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009336:	4422      	add	r2, r4
 8009338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800933c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009340:	3302      	adds	r3, #2
 8009342:	e7c7      	b.n	80092d4 <_printf_common+0x58>
 8009344:	2301      	movs	r3, #1
 8009346:	4622      	mov	r2, r4
 8009348:	4649      	mov	r1, r9
 800934a:	4638      	mov	r0, r7
 800934c:	47c0      	blx	r8
 800934e:	3001      	adds	r0, #1
 8009350:	d0e6      	beq.n	8009320 <_printf_common+0xa4>
 8009352:	3601      	adds	r6, #1
 8009354:	e7d9      	b.n	800930a <_printf_common+0x8e>
	...

08009358 <_printf_i>:
 8009358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800935c:	460c      	mov	r4, r1
 800935e:	4691      	mov	r9, r2
 8009360:	7e27      	ldrb	r7, [r4, #24]
 8009362:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009364:	2f78      	cmp	r7, #120	; 0x78
 8009366:	4680      	mov	r8, r0
 8009368:	469a      	mov	sl, r3
 800936a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800936e:	d807      	bhi.n	8009380 <_printf_i+0x28>
 8009370:	2f62      	cmp	r7, #98	; 0x62
 8009372:	d80a      	bhi.n	800938a <_printf_i+0x32>
 8009374:	2f00      	cmp	r7, #0
 8009376:	f000 80d8 	beq.w	800952a <_printf_i+0x1d2>
 800937a:	2f58      	cmp	r7, #88	; 0x58
 800937c:	f000 80a3 	beq.w	80094c6 <_printf_i+0x16e>
 8009380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009388:	e03a      	b.n	8009400 <_printf_i+0xa8>
 800938a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800938e:	2b15      	cmp	r3, #21
 8009390:	d8f6      	bhi.n	8009380 <_printf_i+0x28>
 8009392:	a001      	add	r0, pc, #4	; (adr r0, 8009398 <_printf_i+0x40>)
 8009394:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009398:	080093f1 	.word	0x080093f1
 800939c:	08009405 	.word	0x08009405
 80093a0:	08009381 	.word	0x08009381
 80093a4:	08009381 	.word	0x08009381
 80093a8:	08009381 	.word	0x08009381
 80093ac:	08009381 	.word	0x08009381
 80093b0:	08009405 	.word	0x08009405
 80093b4:	08009381 	.word	0x08009381
 80093b8:	08009381 	.word	0x08009381
 80093bc:	08009381 	.word	0x08009381
 80093c0:	08009381 	.word	0x08009381
 80093c4:	08009511 	.word	0x08009511
 80093c8:	08009435 	.word	0x08009435
 80093cc:	080094f3 	.word	0x080094f3
 80093d0:	08009381 	.word	0x08009381
 80093d4:	08009381 	.word	0x08009381
 80093d8:	08009533 	.word	0x08009533
 80093dc:	08009381 	.word	0x08009381
 80093e0:	08009435 	.word	0x08009435
 80093e4:	08009381 	.word	0x08009381
 80093e8:	08009381 	.word	0x08009381
 80093ec:	080094fb 	.word	0x080094fb
 80093f0:	680b      	ldr	r3, [r1, #0]
 80093f2:	1d1a      	adds	r2, r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	600a      	str	r2, [r1, #0]
 80093f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009400:	2301      	movs	r3, #1
 8009402:	e0a3      	b.n	800954c <_printf_i+0x1f4>
 8009404:	6825      	ldr	r5, [r4, #0]
 8009406:	6808      	ldr	r0, [r1, #0]
 8009408:	062e      	lsls	r6, r5, #24
 800940a:	f100 0304 	add.w	r3, r0, #4
 800940e:	d50a      	bpl.n	8009426 <_printf_i+0xce>
 8009410:	6805      	ldr	r5, [r0, #0]
 8009412:	600b      	str	r3, [r1, #0]
 8009414:	2d00      	cmp	r5, #0
 8009416:	da03      	bge.n	8009420 <_printf_i+0xc8>
 8009418:	232d      	movs	r3, #45	; 0x2d
 800941a:	426d      	negs	r5, r5
 800941c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009420:	485e      	ldr	r0, [pc, #376]	; (800959c <_printf_i+0x244>)
 8009422:	230a      	movs	r3, #10
 8009424:	e019      	b.n	800945a <_printf_i+0x102>
 8009426:	f015 0f40 	tst.w	r5, #64	; 0x40
 800942a:	6805      	ldr	r5, [r0, #0]
 800942c:	600b      	str	r3, [r1, #0]
 800942e:	bf18      	it	ne
 8009430:	b22d      	sxthne	r5, r5
 8009432:	e7ef      	b.n	8009414 <_printf_i+0xbc>
 8009434:	680b      	ldr	r3, [r1, #0]
 8009436:	6825      	ldr	r5, [r4, #0]
 8009438:	1d18      	adds	r0, r3, #4
 800943a:	6008      	str	r0, [r1, #0]
 800943c:	0628      	lsls	r0, r5, #24
 800943e:	d501      	bpl.n	8009444 <_printf_i+0xec>
 8009440:	681d      	ldr	r5, [r3, #0]
 8009442:	e002      	b.n	800944a <_printf_i+0xf2>
 8009444:	0669      	lsls	r1, r5, #25
 8009446:	d5fb      	bpl.n	8009440 <_printf_i+0xe8>
 8009448:	881d      	ldrh	r5, [r3, #0]
 800944a:	4854      	ldr	r0, [pc, #336]	; (800959c <_printf_i+0x244>)
 800944c:	2f6f      	cmp	r7, #111	; 0x6f
 800944e:	bf0c      	ite	eq
 8009450:	2308      	moveq	r3, #8
 8009452:	230a      	movne	r3, #10
 8009454:	2100      	movs	r1, #0
 8009456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800945a:	6866      	ldr	r6, [r4, #4]
 800945c:	60a6      	str	r6, [r4, #8]
 800945e:	2e00      	cmp	r6, #0
 8009460:	bfa2      	ittt	ge
 8009462:	6821      	ldrge	r1, [r4, #0]
 8009464:	f021 0104 	bicge.w	r1, r1, #4
 8009468:	6021      	strge	r1, [r4, #0]
 800946a:	b90d      	cbnz	r5, 8009470 <_printf_i+0x118>
 800946c:	2e00      	cmp	r6, #0
 800946e:	d04d      	beq.n	800950c <_printf_i+0x1b4>
 8009470:	4616      	mov	r6, r2
 8009472:	fbb5 f1f3 	udiv	r1, r5, r3
 8009476:	fb03 5711 	mls	r7, r3, r1, r5
 800947a:	5dc7      	ldrb	r7, [r0, r7]
 800947c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009480:	462f      	mov	r7, r5
 8009482:	42bb      	cmp	r3, r7
 8009484:	460d      	mov	r5, r1
 8009486:	d9f4      	bls.n	8009472 <_printf_i+0x11a>
 8009488:	2b08      	cmp	r3, #8
 800948a:	d10b      	bne.n	80094a4 <_printf_i+0x14c>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07df      	lsls	r7, r3, #31
 8009490:	d508      	bpl.n	80094a4 <_printf_i+0x14c>
 8009492:	6923      	ldr	r3, [r4, #16]
 8009494:	6861      	ldr	r1, [r4, #4]
 8009496:	4299      	cmp	r1, r3
 8009498:	bfde      	ittt	le
 800949a:	2330      	movle	r3, #48	; 0x30
 800949c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094a4:	1b92      	subs	r2, r2, r6
 80094a6:	6122      	str	r2, [r4, #16]
 80094a8:	f8cd a000 	str.w	sl, [sp]
 80094ac:	464b      	mov	r3, r9
 80094ae:	aa03      	add	r2, sp, #12
 80094b0:	4621      	mov	r1, r4
 80094b2:	4640      	mov	r0, r8
 80094b4:	f7ff fee2 	bl	800927c <_printf_common>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d14c      	bne.n	8009556 <_printf_i+0x1fe>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b004      	add	sp, #16
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	4835      	ldr	r0, [pc, #212]	; (800959c <_printf_i+0x244>)
 80094c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	680e      	ldr	r6, [r1, #0]
 80094d0:	061f      	lsls	r7, r3, #24
 80094d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80094d6:	600e      	str	r6, [r1, #0]
 80094d8:	d514      	bpl.n	8009504 <_printf_i+0x1ac>
 80094da:	07d9      	lsls	r1, r3, #31
 80094dc:	bf44      	itt	mi
 80094de:	f043 0320 	orrmi.w	r3, r3, #32
 80094e2:	6023      	strmi	r3, [r4, #0]
 80094e4:	b91d      	cbnz	r5, 80094ee <_printf_i+0x196>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	f023 0320 	bic.w	r3, r3, #32
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	2310      	movs	r3, #16
 80094f0:	e7b0      	b.n	8009454 <_printf_i+0xfc>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	f043 0320 	orr.w	r3, r3, #32
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	2378      	movs	r3, #120	; 0x78
 80094fc:	4828      	ldr	r0, [pc, #160]	; (80095a0 <_printf_i+0x248>)
 80094fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009502:	e7e3      	b.n	80094cc <_printf_i+0x174>
 8009504:	065e      	lsls	r6, r3, #25
 8009506:	bf48      	it	mi
 8009508:	b2ad      	uxthmi	r5, r5
 800950a:	e7e6      	b.n	80094da <_printf_i+0x182>
 800950c:	4616      	mov	r6, r2
 800950e:	e7bb      	b.n	8009488 <_printf_i+0x130>
 8009510:	680b      	ldr	r3, [r1, #0]
 8009512:	6826      	ldr	r6, [r4, #0]
 8009514:	6960      	ldr	r0, [r4, #20]
 8009516:	1d1d      	adds	r5, r3, #4
 8009518:	600d      	str	r5, [r1, #0]
 800951a:	0635      	lsls	r5, r6, #24
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	d501      	bpl.n	8009524 <_printf_i+0x1cc>
 8009520:	6018      	str	r0, [r3, #0]
 8009522:	e002      	b.n	800952a <_printf_i+0x1d2>
 8009524:	0671      	lsls	r1, r6, #25
 8009526:	d5fb      	bpl.n	8009520 <_printf_i+0x1c8>
 8009528:	8018      	strh	r0, [r3, #0]
 800952a:	2300      	movs	r3, #0
 800952c:	6123      	str	r3, [r4, #16]
 800952e:	4616      	mov	r6, r2
 8009530:	e7ba      	b.n	80094a8 <_printf_i+0x150>
 8009532:	680b      	ldr	r3, [r1, #0]
 8009534:	1d1a      	adds	r2, r3, #4
 8009536:	600a      	str	r2, [r1, #0]
 8009538:	681e      	ldr	r6, [r3, #0]
 800953a:	6862      	ldr	r2, [r4, #4]
 800953c:	2100      	movs	r1, #0
 800953e:	4630      	mov	r0, r6
 8009540:	f7f6 fe86 	bl	8000250 <memchr>
 8009544:	b108      	cbz	r0, 800954a <_printf_i+0x1f2>
 8009546:	1b80      	subs	r0, r0, r6
 8009548:	6060      	str	r0, [r4, #4]
 800954a:	6863      	ldr	r3, [r4, #4]
 800954c:	6123      	str	r3, [r4, #16]
 800954e:	2300      	movs	r3, #0
 8009550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009554:	e7a8      	b.n	80094a8 <_printf_i+0x150>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	4632      	mov	r2, r6
 800955a:	4649      	mov	r1, r9
 800955c:	4640      	mov	r0, r8
 800955e:	47d0      	blx	sl
 8009560:	3001      	adds	r0, #1
 8009562:	d0ab      	beq.n	80094bc <_printf_i+0x164>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	079b      	lsls	r3, r3, #30
 8009568:	d413      	bmi.n	8009592 <_printf_i+0x23a>
 800956a:	68e0      	ldr	r0, [r4, #12]
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	4298      	cmp	r0, r3
 8009570:	bfb8      	it	lt
 8009572:	4618      	movlt	r0, r3
 8009574:	e7a4      	b.n	80094c0 <_printf_i+0x168>
 8009576:	2301      	movs	r3, #1
 8009578:	4632      	mov	r2, r6
 800957a:	4649      	mov	r1, r9
 800957c:	4640      	mov	r0, r8
 800957e:	47d0      	blx	sl
 8009580:	3001      	adds	r0, #1
 8009582:	d09b      	beq.n	80094bc <_printf_i+0x164>
 8009584:	3501      	adds	r5, #1
 8009586:	68e3      	ldr	r3, [r4, #12]
 8009588:	9903      	ldr	r1, [sp, #12]
 800958a:	1a5b      	subs	r3, r3, r1
 800958c:	42ab      	cmp	r3, r5
 800958e:	dcf2      	bgt.n	8009576 <_printf_i+0x21e>
 8009590:	e7eb      	b.n	800956a <_printf_i+0x212>
 8009592:	2500      	movs	r5, #0
 8009594:	f104 0619 	add.w	r6, r4, #25
 8009598:	e7f5      	b.n	8009586 <_printf_i+0x22e>
 800959a:	bf00      	nop
 800959c:	0800b289 	.word	0x0800b289
 80095a0:	0800b29a 	.word	0x0800b29a

080095a4 <_putc_r>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	460d      	mov	r5, r1
 80095a8:	4614      	mov	r4, r2
 80095aa:	4606      	mov	r6, r0
 80095ac:	b118      	cbz	r0, 80095b6 <_putc_r+0x12>
 80095ae:	6983      	ldr	r3, [r0, #24]
 80095b0:	b90b      	cbnz	r3, 80095b6 <_putc_r+0x12>
 80095b2:	f7ff f9e5 	bl	8008980 <__sinit>
 80095b6:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <_putc_r+0x84>)
 80095b8:	429c      	cmp	r4, r3
 80095ba:	d124      	bne.n	8009606 <_putc_r+0x62>
 80095bc:	6874      	ldr	r4, [r6, #4]
 80095be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095c0:	07d8      	lsls	r0, r3, #31
 80095c2:	d405      	bmi.n	80095d0 <_putc_r+0x2c>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	0599      	lsls	r1, r3, #22
 80095c8:	d402      	bmi.n	80095d0 <_putc_r+0x2c>
 80095ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095cc:	f7ff fa88 	bl	8008ae0 <__retarget_lock_acquire_recursive>
 80095d0:	68a3      	ldr	r3, [r4, #8]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	60a3      	str	r3, [r4, #8]
 80095d8:	da05      	bge.n	80095e6 <_putc_r+0x42>
 80095da:	69a2      	ldr	r2, [r4, #24]
 80095dc:	4293      	cmp	r3, r2
 80095de:	db1c      	blt.n	800961a <_putc_r+0x76>
 80095e0:	b2eb      	uxtb	r3, r5
 80095e2:	2b0a      	cmp	r3, #10
 80095e4:	d019      	beq.n	800961a <_putc_r+0x76>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	6022      	str	r2, [r4, #0]
 80095ec:	701d      	strb	r5, [r3, #0]
 80095ee:	b2ed      	uxtb	r5, r5
 80095f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095f2:	07da      	lsls	r2, r3, #31
 80095f4:	d405      	bmi.n	8009602 <_putc_r+0x5e>
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	059b      	lsls	r3, r3, #22
 80095fa:	d402      	bmi.n	8009602 <_putc_r+0x5e>
 80095fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fe:	f7ff fa70 	bl	8008ae2 <__retarget_lock_release_recursive>
 8009602:	4628      	mov	r0, r5
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <_putc_r+0x88>)
 8009608:	429c      	cmp	r4, r3
 800960a:	d101      	bne.n	8009610 <_putc_r+0x6c>
 800960c:	68b4      	ldr	r4, [r6, #8]
 800960e:	e7d6      	b.n	80095be <_putc_r+0x1a>
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <_putc_r+0x8c>)
 8009612:	429c      	cmp	r4, r3
 8009614:	bf08      	it	eq
 8009616:	68f4      	ldreq	r4, [r6, #12]
 8009618:	e7d1      	b.n	80095be <_putc_r+0x1a>
 800961a:	4629      	mov	r1, r5
 800961c:	4622      	mov	r2, r4
 800961e:	4630      	mov	r0, r6
 8009620:	f7fe ffb6 	bl	8008590 <__swbuf_r>
 8009624:	4605      	mov	r5, r0
 8009626:	e7e3      	b.n	80095f0 <_putc_r+0x4c>
 8009628:	0800b238 	.word	0x0800b238
 800962c:	0800b258 	.word	0x0800b258
 8009630:	0800b218 	.word	0x0800b218

08009634 <_sbrk_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d06      	ldr	r5, [pc, #24]	; (8009650 <_sbrk_r+0x1c>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f9 fb56 	bl	8002cf0 <_sbrk>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_sbrk_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_sbrk_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	200010f0 	.word	0x200010f0

08009654 <__sread>:
 8009654:	b510      	push	{r4, lr}
 8009656:	460c      	mov	r4, r1
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	f000 f8f6 	bl	800984c <_read_r>
 8009660:	2800      	cmp	r0, #0
 8009662:	bfab      	itete	ge
 8009664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009666:	89a3      	ldrhlt	r3, [r4, #12]
 8009668:	181b      	addge	r3, r3, r0
 800966a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800966e:	bfac      	ite	ge
 8009670:	6563      	strge	r3, [r4, #84]	; 0x54
 8009672:	81a3      	strhlt	r3, [r4, #12]
 8009674:	bd10      	pop	{r4, pc}

08009676 <__swrite>:
 8009676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	461f      	mov	r7, r3
 800967c:	898b      	ldrh	r3, [r1, #12]
 800967e:	05db      	lsls	r3, r3, #23
 8009680:	4605      	mov	r5, r0
 8009682:	460c      	mov	r4, r1
 8009684:	4616      	mov	r6, r2
 8009686:	d505      	bpl.n	8009694 <__swrite+0x1e>
 8009688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968c:	2302      	movs	r3, #2
 800968e:	2200      	movs	r2, #0
 8009690:	f000 f870 	bl	8009774 <_lseek_r>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	4632      	mov	r2, r6
 80096a2:	463b      	mov	r3, r7
 80096a4:	4628      	mov	r0, r5
 80096a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096aa:	f000 b817 	b.w	80096dc <_write_r>

080096ae <__sseek>:
 80096ae:	b510      	push	{r4, lr}
 80096b0:	460c      	mov	r4, r1
 80096b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b6:	f000 f85d 	bl	8009774 <_lseek_r>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	bf15      	itete	ne
 80096c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80096c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096ca:	81a3      	strheq	r3, [r4, #12]
 80096cc:	bf18      	it	ne
 80096ce:	81a3      	strhne	r3, [r4, #12]
 80096d0:	bd10      	pop	{r4, pc}

080096d2 <__sclose>:
 80096d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d6:	f000 b81b 	b.w	8009710 <_close_r>
	...

080096dc <_write_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d07      	ldr	r5, [pc, #28]	; (80096fc <_write_r+0x20>)
 80096e0:	4604      	mov	r4, r0
 80096e2:	4608      	mov	r0, r1
 80096e4:	4611      	mov	r1, r2
 80096e6:	2200      	movs	r2, #0
 80096e8:	602a      	str	r2, [r5, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f7f9 f8e2 	bl	80028b4 <_write>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_write_r+0x1e>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_write_r+0x1e>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	200010f0 	.word	0x200010f0

08009700 <abort>:
 8009700:	b508      	push	{r3, lr}
 8009702:	2006      	movs	r0, #6
 8009704:	f000 f8dc 	bl	80098c0 <raise>
 8009708:	2001      	movs	r0, #1
 800970a:	f7f9 fa95 	bl	8002c38 <_exit>
	...

08009710 <_close_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_close_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f9 fab3 	bl	8002c86 <_close>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_close_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_close_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	200010f0 	.word	0x200010f0

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	; (8009750 <_fstat_r+0x20>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f9 faae 	bl	8002c9e <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	200010f0 	.word	0x200010f0

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	; (8009770 <_isatty_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f9 faad 	bl	8002cbe <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	200010f0 	.word	0x200010f0

08009774 <_lseek_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d07      	ldr	r5, [pc, #28]	; (8009794 <_lseek_r+0x20>)
 8009778:	4604      	mov	r4, r0
 800977a:	4608      	mov	r0, r1
 800977c:	4611      	mov	r1, r2
 800977e:	2200      	movs	r2, #0
 8009780:	602a      	str	r2, [r5, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f7f9 faa6 	bl	8002cd4 <_lseek>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_lseek_r+0x1e>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_lseek_r+0x1e>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	200010f0 	.word	0x200010f0

08009798 <memcpy>:
 8009798:	440a      	add	r2, r1
 800979a:	4291      	cmp	r1, r2
 800979c:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a0:	d100      	bne.n	80097a4 <memcpy+0xc>
 80097a2:	4770      	bx	lr
 80097a4:	b510      	push	{r4, lr}
 80097a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ae:	4291      	cmp	r1, r2
 80097b0:	d1f9      	bne.n	80097a6 <memcpy+0xe>
 80097b2:	bd10      	pop	{r4, pc}

080097b4 <memmove>:
 80097b4:	4288      	cmp	r0, r1
 80097b6:	b510      	push	{r4, lr}
 80097b8:	eb01 0402 	add.w	r4, r1, r2
 80097bc:	d902      	bls.n	80097c4 <memmove+0x10>
 80097be:	4284      	cmp	r4, r0
 80097c0:	4623      	mov	r3, r4
 80097c2:	d807      	bhi.n	80097d4 <memmove+0x20>
 80097c4:	1e43      	subs	r3, r0, #1
 80097c6:	42a1      	cmp	r1, r4
 80097c8:	d008      	beq.n	80097dc <memmove+0x28>
 80097ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097d2:	e7f8      	b.n	80097c6 <memmove+0x12>
 80097d4:	4402      	add	r2, r0
 80097d6:	4601      	mov	r1, r0
 80097d8:	428a      	cmp	r2, r1
 80097da:	d100      	bne.n	80097de <memmove+0x2a>
 80097dc:	bd10      	pop	{r4, pc}
 80097de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097e6:	e7f7      	b.n	80097d8 <memmove+0x24>

080097e8 <__malloc_lock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_lock+0x8>)
 80097ea:	f7ff b979 	b.w	8008ae0 <__retarget_lock_acquire_recursive>
 80097ee:	bf00      	nop
 80097f0:	200010e8 	.word	0x200010e8

080097f4 <__malloc_unlock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_unlock+0x8>)
 80097f6:	f7ff b974 	b.w	8008ae2 <__retarget_lock_release_recursive>
 80097fa:	bf00      	nop
 80097fc:	200010e8 	.word	0x200010e8

08009800 <_realloc_r>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	4607      	mov	r7, r0
 8009804:	4614      	mov	r4, r2
 8009806:	460e      	mov	r6, r1
 8009808:	b921      	cbnz	r1, 8009814 <_realloc_r+0x14>
 800980a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800980e:	4611      	mov	r1, r2
 8009810:	f7ff ba24 	b.w	8008c5c <_malloc_r>
 8009814:	b922      	cbnz	r2, 8009820 <_realloc_r+0x20>
 8009816:	f7ff f9d1 	bl	8008bbc <_free_r>
 800981a:	4625      	mov	r5, r4
 800981c:	4628      	mov	r0, r5
 800981e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009820:	f000 f86a 	bl	80098f8 <_malloc_usable_size_r>
 8009824:	42a0      	cmp	r0, r4
 8009826:	d20f      	bcs.n	8009848 <_realloc_r+0x48>
 8009828:	4621      	mov	r1, r4
 800982a:	4638      	mov	r0, r7
 800982c:	f7ff fa16 	bl	8008c5c <_malloc_r>
 8009830:	4605      	mov	r5, r0
 8009832:	2800      	cmp	r0, #0
 8009834:	d0f2      	beq.n	800981c <_realloc_r+0x1c>
 8009836:	4631      	mov	r1, r6
 8009838:	4622      	mov	r2, r4
 800983a:	f7ff ffad 	bl	8009798 <memcpy>
 800983e:	4631      	mov	r1, r6
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff f9bb 	bl	8008bbc <_free_r>
 8009846:	e7e9      	b.n	800981c <_realloc_r+0x1c>
 8009848:	4635      	mov	r5, r6
 800984a:	e7e7      	b.n	800981c <_realloc_r+0x1c>

0800984c <_read_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d07      	ldr	r5, [pc, #28]	; (800986c <_read_r+0x20>)
 8009850:	4604      	mov	r4, r0
 8009852:	4608      	mov	r0, r1
 8009854:	4611      	mov	r1, r2
 8009856:	2200      	movs	r2, #0
 8009858:	602a      	str	r2, [r5, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	f7f9 f9f6 	bl	8002c4c <_read>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_read_r+0x1e>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_read_r+0x1e>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	200010f0 	.word	0x200010f0

08009870 <_raise_r>:
 8009870:	291f      	cmp	r1, #31
 8009872:	b538      	push	{r3, r4, r5, lr}
 8009874:	4604      	mov	r4, r0
 8009876:	460d      	mov	r5, r1
 8009878:	d904      	bls.n	8009884 <_raise_r+0x14>
 800987a:	2316      	movs	r3, #22
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009886:	b112      	cbz	r2, 800988e <_raise_r+0x1e>
 8009888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800988c:	b94b      	cbnz	r3, 80098a2 <_raise_r+0x32>
 800988e:	4620      	mov	r0, r4
 8009890:	f000 f830 	bl	80098f4 <_getpid_r>
 8009894:	462a      	mov	r2, r5
 8009896:	4601      	mov	r1, r0
 8009898:	4620      	mov	r0, r4
 800989a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989e:	f000 b817 	b.w	80098d0 <_kill_r>
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d00a      	beq.n	80098bc <_raise_r+0x4c>
 80098a6:	1c59      	adds	r1, r3, #1
 80098a8:	d103      	bne.n	80098b2 <_raise_r+0x42>
 80098aa:	2316      	movs	r3, #22
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	2001      	movs	r0, #1
 80098b0:	e7e7      	b.n	8009882 <_raise_r+0x12>
 80098b2:	2400      	movs	r4, #0
 80098b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098b8:	4628      	mov	r0, r5
 80098ba:	4798      	blx	r3
 80098bc:	2000      	movs	r0, #0
 80098be:	e7e0      	b.n	8009882 <_raise_r+0x12>

080098c0 <raise>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <raise+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7ff bfd3 	b.w	8009870 <_raise_r>
 80098ca:	bf00      	nop
 80098cc:	200009cc 	.word	0x200009cc

080098d0 <_kill_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d07      	ldr	r5, [pc, #28]	; (80098f0 <_kill_r+0x20>)
 80098d4:	2300      	movs	r3, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	f7f9 f99b 	bl	8002c18 <_kill>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	d102      	bne.n	80098ec <_kill_r+0x1c>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	b103      	cbz	r3, 80098ec <_kill_r+0x1c>
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	bd38      	pop	{r3, r4, r5, pc}
 80098ee:	bf00      	nop
 80098f0:	200010f0 	.word	0x200010f0

080098f4 <_getpid_r>:
 80098f4:	f7f9 b988 	b.w	8002c08 <_getpid>

080098f8 <_malloc_usable_size_r>:
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f18      	subs	r0, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbc      	itt	lt
 8009902:	580b      	ldrlt	r3, [r1, r0]
 8009904:	18c0      	addlt	r0, r0, r3
 8009906:	4770      	bx	lr

08009908 <asinf>:
 8009908:	b508      	push	{r3, lr}
 800990a:	ed2d 8b02 	vpush	{d8}
 800990e:	eeb0 8a40 	vmov.f32	s16, s0
 8009912:	f000 f82d 	bl	8009970 <__ieee754_asinf>
 8009916:	4b13      	ldr	r3, [pc, #76]	; (8009964 <asinf+0x5c>)
 8009918:	f993 3000 	ldrsb.w	r3, [r3]
 800991c:	3301      	adds	r3, #1
 800991e:	eef0 8a40 	vmov.f32	s17, s0
 8009922:	d01a      	beq.n	800995a <asinf+0x52>
 8009924:	eeb4 8a48 	vcmp.f32	s16, s16
 8009928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992c:	d615      	bvs.n	800995a <asinf+0x52>
 800992e:	eeb0 0a48 	vmov.f32	s0, s16
 8009932:	f000 fa7b 	bl	8009e2c <fabsf>
 8009936:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800993a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009942:	dd0a      	ble.n	800995a <asinf+0x52>
 8009944:	f7fe fca0 	bl	8008288 <__errno>
 8009948:	ecbd 8b02 	vpop	{d8}
 800994c:	2321      	movs	r3, #33	; 0x21
 800994e:	6003      	str	r3, [r0, #0]
 8009950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009954:	4804      	ldr	r0, [pc, #16]	; (8009968 <asinf+0x60>)
 8009956:	f000 ba71 	b.w	8009e3c <nanf>
 800995a:	eeb0 0a68 	vmov.f32	s0, s17
 800995e:	ecbd 8b02 	vpop	{d8}
 8009962:	bd08      	pop	{r3, pc}
 8009964:	20000a30 	.word	0x20000a30
 8009968:	0800b217 	.word	0x0800b217

0800996c <atan2f>:
 800996c:	f000 b8e6 	b.w	8009b3c <__ieee754_atan2f>

08009970 <__ieee754_asinf>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	ee10 5a10 	vmov	r5, s0
 8009976:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800997a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800997e:	ed2d 8b04 	vpush	{d8-d9}
 8009982:	d10c      	bne.n	800999e <__ieee754_asinf+0x2e>
 8009984:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8009afc <__ieee754_asinf+0x18c>
 8009988:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8009b00 <__ieee754_asinf+0x190>
 800998c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009990:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009994:	eeb0 0a67 	vmov.f32	s0, s15
 8009998:	ecbd 8b04 	vpop	{d8-d9}
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	dd04      	ble.n	80099aa <__ieee754_asinf+0x3a>
 80099a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80099a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80099a8:	e7f6      	b.n	8009998 <__ieee754_asinf+0x28>
 80099aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80099ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80099b2:	da0b      	bge.n	80099cc <__ieee754_asinf+0x5c>
 80099b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80099b8:	da52      	bge.n	8009a60 <__ieee754_asinf+0xf0>
 80099ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8009b04 <__ieee754_asinf+0x194>
 80099be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80099c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	dce5      	bgt.n	8009998 <__ieee754_asinf+0x28>
 80099cc:	f000 fa2e 	bl	8009e2c <fabsf>
 80099d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80099d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80099d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80099dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8009b08 <__ieee754_asinf+0x198>
 80099e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009b0c <__ieee754_asinf+0x19c>
 80099e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8009b10 <__ieee754_asinf+0x1a0>
 80099e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80099ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8009b14 <__ieee754_asinf+0x1a4>
 80099f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80099f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009b18 <__ieee754_asinf+0x1a8>
 80099f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80099fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 8009b1c <__ieee754_asinf+0x1ac>
 8009a00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009a04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009b20 <__ieee754_asinf+0x1b0>
 8009a08:	eea7 9a88 	vfma.f32	s18, s15, s16
 8009a0c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8009b24 <__ieee754_asinf+0x1b4>
 8009a10:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009a14:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009b28 <__ieee754_asinf+0x1b8>
 8009a18:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009a1c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009b2c <__ieee754_asinf+0x1bc>
 8009a20:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009a24:	eeb0 0a48 	vmov.f32	s0, s16
 8009a28:	eee7 8a88 	vfma.f32	s17, s15, s16
 8009a2c:	f000 f926 	bl	8009c7c <__ieee754_sqrtf>
 8009a30:	4b3f      	ldr	r3, [pc, #252]	; (8009b30 <__ieee754_asinf+0x1c0>)
 8009a32:	ee29 9a08 	vmul.f32	s18, s18, s16
 8009a36:	429c      	cmp	r4, r3
 8009a38:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009a3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009a40:	dd3d      	ble.n	8009abe <__ieee754_asinf+0x14e>
 8009a42:	eea0 0a06 	vfma.f32	s0, s0, s12
 8009a46:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8009b34 <__ieee754_asinf+0x1c4>
 8009a4a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8009a4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009b00 <__ieee754_asinf+0x190>
 8009a52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	bfd8      	it	le
 8009a5a:	eeb1 0a40 	vnegle.f32	s0, s0
 8009a5e:	e79b      	b.n	8009998 <__ieee754_asinf+0x28>
 8009a60:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009a64:	eddf 6a28 	vldr	s13, [pc, #160]	; 8009b08 <__ieee754_asinf+0x198>
 8009a68:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009b0c <__ieee754_asinf+0x19c>
 8009a6c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8009b20 <__ieee754_asinf+0x1b0>
 8009a70:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009a74:	eddf 6a27 	vldr	s13, [pc, #156]	; 8009b14 <__ieee754_asinf+0x1a4>
 8009a78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009a7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009b18 <__ieee754_asinf+0x1a8>
 8009a80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a84:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009b1c <__ieee754_asinf+0x1ac>
 8009a88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009a8c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009b10 <__ieee754_asinf+0x1a0>
 8009a90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a94:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009b24 <__ieee754_asinf+0x1b4>
 8009a98:	eee7 6a86 	vfma.f32	s13, s15, s12
 8009a9c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8009b28 <__ieee754_asinf+0x1b8>
 8009aa0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8009aa4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009b2c <__ieee754_asinf+0x1bc>
 8009aa8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ab0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8009ab4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8009ab8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8009abc:	e76c      	b.n	8009998 <__ieee754_asinf+0x28>
 8009abe:	ee10 3a10 	vmov	r3, s0
 8009ac2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009ac6:	f023 030f 	bic.w	r3, r3, #15
 8009aca:	ee07 3a10 	vmov	s14, r3
 8009ace:	eea7 8a47 	vfms.f32	s16, s14, s14
 8009ad2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009ad6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ada:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8009ade:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009afc <__ieee754_asinf+0x18c>
 8009ae2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8009ae6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8009aea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009b38 <__ieee754_asinf+0x1c8>
 8009aee:	eeb0 6a40 	vmov.f32	s12, s0
 8009af2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009af6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009afa:	e7aa      	b.n	8009a52 <__ieee754_asinf+0xe2>
 8009afc:	b33bbd2e 	.word	0xb33bbd2e
 8009b00:	3fc90fdb 	.word	0x3fc90fdb
 8009b04:	7149f2ca 	.word	0x7149f2ca
 8009b08:	3811ef08 	.word	0x3811ef08
 8009b0c:	3a4f7f04 	.word	0x3a4f7f04
 8009b10:	3e2aaaab 	.word	0x3e2aaaab
 8009b14:	bd241146 	.word	0xbd241146
 8009b18:	3e4e0aa8 	.word	0x3e4e0aa8
 8009b1c:	bea6b090 	.word	0xbea6b090
 8009b20:	3d9dc62e 	.word	0x3d9dc62e
 8009b24:	bf303361 	.word	0xbf303361
 8009b28:	4001572d 	.word	0x4001572d
 8009b2c:	c019d139 	.word	0xc019d139
 8009b30:	3f799999 	.word	0x3f799999
 8009b34:	333bbd2e 	.word	0x333bbd2e
 8009b38:	3f490fdb 	.word	0x3f490fdb

08009b3c <__ieee754_atan2f>:
 8009b3c:	ee10 2a90 	vmov	r2, s1
 8009b40:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009b44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	eef0 7a40 	vmov.f32	s15, s0
 8009b4e:	dc06      	bgt.n	8009b5e <__ieee754_atan2f+0x22>
 8009b50:	ee10 0a10 	vmov	r0, s0
 8009b54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009b58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b5c:	dd04      	ble.n	8009b68 <__ieee754_atan2f+0x2c>
 8009b5e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009b62:	eeb0 0a67 	vmov.f32	s0, s15
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009b6c:	d103      	bne.n	8009b76 <__ieee754_atan2f+0x3a>
 8009b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b72:	f000 b887 	b.w	8009c84 <atanf>
 8009b76:	1794      	asrs	r4, r2, #30
 8009b78:	f004 0402 	and.w	r4, r4, #2
 8009b7c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009b80:	b943      	cbnz	r3, 8009b94 <__ieee754_atan2f+0x58>
 8009b82:	2c02      	cmp	r4, #2
 8009b84:	d05e      	beq.n	8009c44 <__ieee754_atan2f+0x108>
 8009b86:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009c58 <__ieee754_atan2f+0x11c>
 8009b8a:	2c03      	cmp	r4, #3
 8009b8c:	bf08      	it	eq
 8009b8e:	eef0 7a47 	vmoveq.f32	s15, s14
 8009b92:	e7e6      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009b94:	b941      	cbnz	r1, 8009ba8 <__ieee754_atan2f+0x6c>
 8009b96:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009c5c <__ieee754_atan2f+0x120>
 8009b9a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009c60 <__ieee754_atan2f+0x124>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	bfb8      	it	lt
 8009ba2:	eef0 7a40 	vmovlt.f32	s15, s0
 8009ba6:	e7dc      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009ba8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009bac:	d110      	bne.n	8009bd0 <__ieee754_atan2f+0x94>
 8009bae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009bb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bb6:	d107      	bne.n	8009bc8 <__ieee754_atan2f+0x8c>
 8009bb8:	2c02      	cmp	r4, #2
 8009bba:	d846      	bhi.n	8009c4a <__ieee754_atan2f+0x10e>
 8009bbc:	4b29      	ldr	r3, [pc, #164]	; (8009c64 <__ieee754_atan2f+0x128>)
 8009bbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bc2:	edd4 7a00 	vldr	s15, [r4]
 8009bc6:	e7cc      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009bc8:	2c02      	cmp	r4, #2
 8009bca:	d841      	bhi.n	8009c50 <__ieee754_atan2f+0x114>
 8009bcc:	4b26      	ldr	r3, [pc, #152]	; (8009c68 <__ieee754_atan2f+0x12c>)
 8009bce:	e7f6      	b.n	8009bbe <__ieee754_atan2f+0x82>
 8009bd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009bd4:	d0df      	beq.n	8009b96 <__ieee754_atan2f+0x5a>
 8009bd6:	1a5b      	subs	r3, r3, r1
 8009bd8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009bdc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009be0:	da1a      	bge.n	8009c18 <__ieee754_atan2f+0xdc>
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	da01      	bge.n	8009bea <__ieee754_atan2f+0xae>
 8009be6:	313c      	adds	r1, #60	; 0x3c
 8009be8:	db19      	blt.n	8009c1e <__ieee754_atan2f+0xe2>
 8009bea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009bee:	f000 f91d 	bl	8009e2c <fabsf>
 8009bf2:	f000 f847 	bl	8009c84 <atanf>
 8009bf6:	eef0 7a40 	vmov.f32	s15, s0
 8009bfa:	2c01      	cmp	r4, #1
 8009bfc:	d012      	beq.n	8009c24 <__ieee754_atan2f+0xe8>
 8009bfe:	2c02      	cmp	r4, #2
 8009c00:	d017      	beq.n	8009c32 <__ieee754_atan2f+0xf6>
 8009c02:	2c00      	cmp	r4, #0
 8009c04:	d0ad      	beq.n	8009b62 <__ieee754_atan2f+0x26>
 8009c06:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009c6c <__ieee754_atan2f+0x130>
 8009c0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009c0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009c70 <__ieee754_atan2f+0x134>
 8009c12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009c16:	e7a4      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009c18:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009c5c <__ieee754_atan2f+0x120>
 8009c1c:	e7ed      	b.n	8009bfa <__ieee754_atan2f+0xbe>
 8009c1e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009c74 <__ieee754_atan2f+0x138>
 8009c22:	e7ea      	b.n	8009bfa <__ieee754_atan2f+0xbe>
 8009c24:	ee17 3a90 	vmov	r3, s15
 8009c28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	e797      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009c32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009c6c <__ieee754_atan2f+0x130>
 8009c36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009c3a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009c70 <__ieee754_atan2f+0x134>
 8009c3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009c42:	e78e      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009c44:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009c70 <__ieee754_atan2f+0x134>
 8009c48:	e78b      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009c4a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009c78 <__ieee754_atan2f+0x13c>
 8009c4e:	e788      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009c50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009c74 <__ieee754_atan2f+0x138>
 8009c54:	e785      	b.n	8009b62 <__ieee754_atan2f+0x26>
 8009c56:	bf00      	nop
 8009c58:	c0490fdb 	.word	0xc0490fdb
 8009c5c:	3fc90fdb 	.word	0x3fc90fdb
 8009c60:	bfc90fdb 	.word	0xbfc90fdb
 8009c64:	0800b2ac 	.word	0x0800b2ac
 8009c68:	0800b2b8 	.word	0x0800b2b8
 8009c6c:	33bbbd2e 	.word	0x33bbbd2e
 8009c70:	40490fdb 	.word	0x40490fdb
 8009c74:	00000000 	.word	0x00000000
 8009c78:	3f490fdb 	.word	0x3f490fdb

08009c7c <__ieee754_sqrtf>:
 8009c7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009c80:	4770      	bx	lr
	...

08009c84 <atanf>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	ee10 5a10 	vmov	r5, s0
 8009c8a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009c8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009c92:	eef0 7a40 	vmov.f32	s15, s0
 8009c96:	db10      	blt.n	8009cba <atanf+0x36>
 8009c98:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009c9c:	dd04      	ble.n	8009ca8 <atanf+0x24>
 8009c9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009de0 <atanf+0x15c>
 8009cac:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009de4 <atanf+0x160>
 8009cb0:	2d00      	cmp	r5, #0
 8009cb2:	bfd8      	it	le
 8009cb4:	eef0 7a40 	vmovle.f32	s15, s0
 8009cb8:	e7f3      	b.n	8009ca2 <atanf+0x1e>
 8009cba:	4b4b      	ldr	r3, [pc, #300]	; (8009de8 <atanf+0x164>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	dc10      	bgt.n	8009ce2 <atanf+0x5e>
 8009cc0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009cc4:	da0a      	bge.n	8009cdc <atanf+0x58>
 8009cc6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009dec <atanf+0x168>
 8009cca:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cda:	dce2      	bgt.n	8009ca2 <atanf+0x1e>
 8009cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce0:	e013      	b.n	8009d0a <atanf+0x86>
 8009ce2:	f000 f8a3 	bl	8009e2c <fabsf>
 8009ce6:	4b42      	ldr	r3, [pc, #264]	; (8009df0 <atanf+0x16c>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	dc4f      	bgt.n	8009d8c <atanf+0x108>
 8009cec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009cf0:	429c      	cmp	r4, r3
 8009cf2:	dc41      	bgt.n	8009d78 <atanf+0xf4>
 8009cf4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009cf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009cfc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009d00:	2300      	movs	r3, #0
 8009d02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009d10:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009df4 <atanf+0x170>
 8009d14:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009df8 <atanf+0x174>
 8009d18:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009dfc <atanf+0x178>
 8009d1c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009e00 <atanf+0x17c>
 8009d20:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009d24:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009d28:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009e04 <atanf+0x180>
 8009d2c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009d30:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8009e08 <atanf+0x184>
 8009d34:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009d38:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e0c <atanf+0x188>
 8009d3c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009d40:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8009e10 <atanf+0x18c>
 8009d44:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009d48:	eddf 5a32 	vldr	s11, [pc, #200]	; 8009e14 <atanf+0x190>
 8009d4c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8009d50:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009e18 <atanf+0x194>
 8009d54:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009d58:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009e1c <atanf+0x198>
 8009d5c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009d60:	eea5 0a87 	vfma.f32	s0, s11, s14
 8009d64:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009d68:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009d6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d70:	d121      	bne.n	8009db6 <atanf+0x132>
 8009d72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009d76:	e794      	b.n	8009ca2 <atanf+0x1e>
 8009d78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009d7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d84:	2301      	movs	r3, #1
 8009d86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d8a:	e7be      	b.n	8009d0a <atanf+0x86>
 8009d8c:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <atanf+0x19c>)
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	dc0b      	bgt.n	8009daa <atanf+0x126>
 8009d92:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009d9e:	2302      	movs	r3, #2
 8009da0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da8:	e7af      	b.n	8009d0a <atanf+0x86>
 8009daa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009dae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009db2:	2303      	movs	r3, #3
 8009db4:	e7a9      	b.n	8009d0a <atanf+0x86>
 8009db6:	4a1b      	ldr	r2, [pc, #108]	; (8009e24 <atanf+0x1a0>)
 8009db8:	491b      	ldr	r1, [pc, #108]	; (8009e28 <atanf+0x1a4>)
 8009dba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009dbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009dc2:	ed93 7a00 	vldr	s14, [r3]
 8009dc6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009dca:	2d00      	cmp	r5, #0
 8009dcc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009dd0:	ed92 0a00 	vldr	s0, [r2]
 8009dd4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009dd8:	bfb8      	it	lt
 8009dda:	eef1 7a67 	vneglt.f32	s15, s15
 8009dde:	e760      	b.n	8009ca2 <atanf+0x1e>
 8009de0:	3fc90fdb 	.word	0x3fc90fdb
 8009de4:	bfc90fdb 	.word	0xbfc90fdb
 8009de8:	3edfffff 	.word	0x3edfffff
 8009dec:	7149f2ca 	.word	0x7149f2ca
 8009df0:	3f97ffff 	.word	0x3f97ffff
 8009df4:	3c8569d7 	.word	0x3c8569d7
 8009df8:	3d4bda59 	.word	0x3d4bda59
 8009dfc:	bd15a221 	.word	0xbd15a221
 8009e00:	be4ccccd 	.word	0xbe4ccccd
 8009e04:	3d886b35 	.word	0x3d886b35
 8009e08:	3dba2e6e 	.word	0x3dba2e6e
 8009e0c:	3e124925 	.word	0x3e124925
 8009e10:	3eaaaaab 	.word	0x3eaaaaab
 8009e14:	bd6ef16b 	.word	0xbd6ef16b
 8009e18:	bd9d8795 	.word	0xbd9d8795
 8009e1c:	bde38e38 	.word	0xbde38e38
 8009e20:	401bffff 	.word	0x401bffff
 8009e24:	0800b2c4 	.word	0x0800b2c4
 8009e28:	0800b2d4 	.word	0x0800b2d4

08009e2c <fabsf>:
 8009e2c:	ee10 3a10 	vmov	r3, s0
 8009e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e34:	ee00 3a10 	vmov	s0, r3
 8009e38:	4770      	bx	lr
	...

08009e3c <nanf>:
 8009e3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e44 <nanf+0x8>
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	7fc00000 	.word	0x7fc00000

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
