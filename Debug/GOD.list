
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  080091d0  080091d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a410  0800a410  00020a4c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a418  0800a418  00020a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a4c  20000000  0800a420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000a50  0800ae6c  00020a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c88  0800ae6c  00020c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c12d  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380b  00000000  00000000  0003cba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00041410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064d  00000000  00000000  00042300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015de4  00000000  00000000  0006294d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd82d  00000000  00000000  00078731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed8  00000000  00000000  00135fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a50 	.word	0x20000a50
 80001fc:	00000000 	.word	0x00000000
 8000200:	080091b8 	.word	0x080091b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a54 	.word	0x20000a54
 800021c:	080091b8 	.word	0x080091b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9b9 	b.w	8000654 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f844 	bl	80006f0 <convert>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000670:	1415      	asrs	r5, r2, #16
 8000672:	0414      	lsls	r4, r2, #16
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f000 f83b 	bl	80006f0 <convert>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000682:	4620      	mov	r0, r4
 8000684:	4629      	mov	r1, r5
 8000686:	f7ff fe1b 	bl	80002c0 <__aeabi_ldivmod>
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	4613      	mov	r3, r2
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bdb0      	pop	{r4, r5, r7, pc}

08000698 <printFix>:

void printFix(int32_t i) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da05      	bge.n	80006b2 <printFix+0x1a>
            printf("-");
 80006a6:	202d      	movs	r0, #45	; 0x2d
 80006a8:	f007 f910 	bl	80078cc <putchar>
            i = ~i + 1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	425b      	negs	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1419      	asrs	r1, r3, #16
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	461a      	mov	r2, r3
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <printFix+0x3c>)
 80006c8:	f007 f8e8 	bl	800789c <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	080091d0 	.word	0x080091d0

080006d8 <expand>:

int32_t expand(int32_t i) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	009b      	lsls	r3, r3, #2
   }
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <convert>:

int32_t convert(int32_t i) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	041b      	lsls	r3, r3, #16
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <inconvert>:

int32_t inconvert(int32_t i) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000716:	141b      	asrs	r3, r3, #16
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <I2C_Scan+0x58>)
 800072e:	f007 f951 	bl	80079d4 <puts>

    for (i = 1; i < 128; i++) {
 8000732:	2301      	movs	r3, #1
 8000734:	73fb      	strb	r3, [r7, #15]
 8000736:	e015      	b.n	8000764 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b29b      	uxth	r3, r3
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b299      	uxth	r1, r3
 8000740:	230a      	movs	r3, #10
 8000742:	2201      	movs	r2, #1
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f004 fa2b 	bl	8004ba0 <HAL_I2C_IsDeviceReady>
 800074a:	4603      	mov	r3, r0
 800074c:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d104      	bne.n	800075e <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4619      	mov	r1, r3
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <I2C_Scan+0x5c>)
 800075a:	f007 f89f 	bl	800789c <iprintf>
    for (i = 1; i < 128; i++) {
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3301      	adds	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	dae5      	bge.n	8000738 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <I2C_Scan+0x60>)
 800076e:	f007 f931 	bl	80079d4 <puts>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	080091dc 	.word	0x080091dc
 8000780:	080091f4 	.word	0x080091f4
 8000784:	0800921c 	.word	0x0800921c

08000788 <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2102      	movs	r1, #2
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f003 ff42 	bl	800461c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f003 fbcb 	bl	8003f34 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2102      	movs	r1, #2
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f003 ff39 	bl	800461c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f003 fbc2 	bl	8003f34 <HAL_Delay>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2110      	movs	r1, #16
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f003 ff25 	bl	800461c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2120      	movs	r1, #32
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f003 ff19 	bl	800461c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f003 ff0d 	bl	800461c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	2108      	movs	r1, #8
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <LCD_Send4Bits+0x70>)
 8000814:	f003 ff02 	bl	800461c <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000818:	f7ff ffb6 	bl	8000788 <LCD_EnablePulse>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	48000400 	.word	0x48000400

08000828 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2101      	movs	r1, #1
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f003 feef 	bl	800461c <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffb5 	bl	80007b4 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 030f 	and.w	r3, r3, #15
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ffae 	bl	80007b4 <LCD_Send4Bits>
    HAL_Delay(2);
 8000858:	2002      	movs	r0, #2
 800085a:	f003 fb6b 	bl	8003f34 <HAL_Delay>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <LCD_SendChar>:

void LCD_SendChar(char c) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2101      	movs	r1, #1
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f003 fed0 	bl	800461c <HAL_GPIO_WritePin>
    LCD_Send4Bits(c >> 4);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff96 	bl	80007b4 <LCD_Send4Bits>
    LCD_Send4Bits(c & 0x0F);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff8f 	bl	80007b4 <LCD_Send4Bits>
    HAL_Delay(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f003 fb4c 	bl	8003f34 <HAL_Delay>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <LCD_SendString>:

void LCD_SendString(char* str) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    while (*str) {
 80008ac:	e006      	b.n	80008bc <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffd5 	bl	8000866 <LCD_SendChar>
    while (*str) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f4      	bne.n	80008ae <LCD_SendString+0xa>
    }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	460a      	mov	r2, r1
 80008d8:	71fb      	strb	r3, [r7, #7]
 80008da:	4613      	mov	r3, r2
 80008dc:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <LCD_SetCursor+0x1a>
 80008e4:	2200      	movs	r2, #0
 80008e6:	e000      	b.n	80008ea <LCD_SetCursor+0x1c>
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	4413      	add	r3, r2
 80008ee:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | addr);
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff95 	bl	8000828 <LCD_SendCommand>
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <LCD_Init>:

void LCD_Init(void) {
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 800090a:	2028      	movs	r0, #40	; 0x28
 800090c:	f003 fb12 	bl	8003f34 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff4f 	bl	80007b4 <LCD_Send4Bits>
 8000916:	2005      	movs	r0, #5
 8000918:	f003 fb0c 	bl	8003f34 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 800091c:	2003      	movs	r0, #3
 800091e:	f7ff ff49 	bl	80007b4 <LCD_Send4Bits>
 8000922:	2001      	movs	r0, #1
 8000924:	f003 fb06 	bl	8003f34 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000928:	2003      	movs	r0, #3
 800092a:	f7ff ff43 	bl	80007b4 <LCD_Send4Bits>
 800092e:	2001      	movs	r0, #1
 8000930:	f003 fb00 	bl	8003f34 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff ff3d 	bl	80007b4 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 800093a:	2028      	movs	r0, #40	; 0x28
 800093c:	f7ff ff74 	bl	8000828 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8000940:	200c      	movs	r0, #12
 8000942:	f7ff ff71 	bl	8000828 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 8000946:	2006      	movs	r0, #6
 8000948:	f7ff ff6e 	bl	8000828 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff ff6b 	bl	8000828 <LCD_SendCommand>
    HAL_Delay(2);
 8000952:	2002      	movs	r0, #2
 8000954:	f003 faee 	bl	8003f34 <HAL_Delay>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <LCD_PrintInt>:

void LCD_PrintInt(int32_t value) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    if (value == 0) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <LCD_PrintInt+0x16>
        LCD_SendString("0    ");
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <LCD_PrintInt+0x34>)
 800096c:	f7ff ff9a 	bl	80008a4 <LCD_SendString>
 8000970:	e00b      	b.n	800098a <LCD_PrintInt+0x2e>
        return;
    }
    char buffer[12];
    sprintf(buffer, "%ld  ", (long)value);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4906      	ldr	r1, [pc, #24]	; (8000994 <LCD_PrintInt+0x38>)
 800097a:	4618      	mov	r0, r3
 800097c:	f007 f832 	bl	80079e4 <siprintf>
    LCD_SendString(buffer);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff8d 	bl	80008a4 <LCD_SendString>
}
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0800922c 	.word	0x0800922c
 8000994:	08009234 	.word	0x08009234

08000998 <LCD_PrintAngle>:

void LCD_PrintAngle(int32_t angle) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    //angle = inconvert(angle);  // Convert to integer degrees

    if (angle < 0) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	da05      	bge.n	80009b2 <LCD_PrintAngle+0x1a>
        LCD_SendChar('-');
 80009a6:	202d      	movs	r0, #45	; 0x2d
 80009a8:	f7ff ff5d 	bl	8000866 <LCD_SendChar>
        angle = -angle;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	425b      	negs	r3, r3
 80009b0:	607b      	str	r3, [r7, #4]
    }
    LCD_PrintInt(angle);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffd2 	bl	800095c <LCD_PrintInt>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <lsmCtrlReg>:
#include "lsm9ds1.h"
#include "fixp.h"
#include "main.h"
#include "vector.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 80009c8:	f240 5322 	movw	r3, #1314	; 0x522
 80009cc:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 80009ce:	f107 021c 	add.w	r2, r7, #28
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2302      	movs	r3, #2
 80009da:	21d6      	movs	r1, #214	; 0xd6
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f003 fed1 	bl	8004784 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f003 faa6 	bl	8003f34 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 80009e8:	f246 0320 	movw	r3, #24608	; 0x6020
 80009ec:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 80009ee:	f107 0218 	add.w	r2, r7, #24
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2302      	movs	r3, #2
 80009fa:	21d6      	movs	r1, #214	; 0xd6
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f003 fec1 	bl	8004784 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f003 fa96 	bl	8003f34 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 8000a08:	f247 0320 	movw	r3, #28704	; 0x7020
 8000a0c:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8000a0e:	f107 0214 	add.w	r2, r7, #20
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	213c      	movs	r1, #60	; 0x3c
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f003 feb1 	bl	8004784 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a22:	200a      	movs	r0, #10
 8000a24:	f003 fa86 	bl	8003f34 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8000a28:	2322      	movs	r3, #34	; 0x22
 8000a2a:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8000a2c:	f107 0210 	add.w	r2, r7, #16
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2302      	movs	r3, #2
 8000a38:	213c      	movs	r1, #60	; 0x3c
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f003 fea2 	bl	8004784 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a40:	200a      	movs	r0, #10
 8000a42:	f003 fa77 	bl	8003f34 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8000a46:	f640 4323 	movw	r3, #3107	; 0xc23
 8000a4a:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8000a4c:	f107 020c 	add.w	r2, r7, #12
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2302      	movs	r3, #2
 8000a58:	213c      	movs	r1, #60	; 0x3c
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f003 fe92 	bl	8004784 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f003 fa67 	bl	8003f34 <HAL_Delay>
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <lsmAccRead>:
	};

	return out;
}

Vector3D lsmAccRead(I2C_HandleTypeDef*handle) {
 8000a6e:	b590      	push	{r4, r7, lr}
 8000a70:	b08d      	sub	sp, #52	; 0x34
 8000a72:	af02      	add	r7, sp, #8
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, OUT_X_L_M, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c3, LSM9DS1_MAG_ADDRESS << 1 | 0x01, buffer, sizeof(buffer), HAL_MAX_DELAY);
	printf("%d\n", buffer);
	*/

	uint8_t reg1 = OUT_X_XL | 0x80; // Enable auto-increment
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data1[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, &reg1, 1, HAL_MAX_DELAY);
 8000a7e:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	21d6      	movs	r1, #214	; 0xd6
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f003 fe79 	bl	8004784 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_ACC_ADDRESS << 1) | 0x01, data1, 6, HAL_MAX_DELAY);
 8000a92:	f107 0218 	add.w	r2, r7, #24
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	21d7      	movs	r1, #215	; 0xd7
 8000aa0:	6838      	ldr	r0, [r7, #0]
 8000aa2:	f003 ff87 	bl	80049b4 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t acc_x = (int16_t)(data1[1] << 8 | data1[0]);
 8000aa6:	7e7b      	ldrb	r3, [r7, #25]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	7e3b      	ldrb	r3, [r7, #24]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t acc_y = (int16_t)(data1[3] << 8 | data1[2]);
 8000ab4:	7efb      	ldrb	r3, [r7, #27]
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	b21a      	sxth	r2, r3
 8000aba:	7ebb      	ldrb	r3, [r7, #26]
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t acc_z = (int16_t)(data1[5] << 8 | data1[4]);
 8000ac2:	7f7b      	ldrb	r3, [r7, #29]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	7f3b      	ldrb	r3, [r7, #28]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {acc_x, acc_y, acc_z};
 8000ad0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ae0:	617b      	str	r3, [r7, #20]
	return output;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	372c      	adds	r7, #44	; 0x2c
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}

08000afa <lsmMagRead>:

Vector3D lsmMagRead(I2C_HandleTypeDef*handle) {
 8000afa:	b590      	push	{r4, r7, lr}
 8000afc:	b08d      	sub	sp, #52	; 0x34
 8000afe:	af02      	add	r7, sp, #8
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	uint8_t reg2 = OUT_X_L_M | 0x80; // Enable auto-increment
 8000b04:	23a8      	movs	r3, #168	; 0xa8
 8000b06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data2[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, &reg2, 1, HAL_MAX_DELAY);
 8000b0a:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2301      	movs	r3, #1
 8000b16:	213c      	movs	r1, #60	; 0x3c
 8000b18:	6838      	ldr	r0, [r7, #0]
 8000b1a:	f003 fe33 	bl	8004784 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_MAG_ADDRESS << 1) | 0x01, data2, 6, HAL_MAX_DELAY);
 8000b1e:	f107 0218 	add.w	r2, r7, #24
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2306      	movs	r3, #6
 8000b2a:	213d      	movs	r1, #61	; 0x3d
 8000b2c:	6838      	ldr	r0, [r7, #0]
 8000b2e:	f003 ff41 	bl	80049b4 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t mag_x = (int16_t)(data2[1] << 8 | data2[0]);
 8000b32:	7e7b      	ldrb	r3, [r7, #25]
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	7e3b      	ldrb	r3, [r7, #24]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t mag_y = (int16_t)(data2[3] << 8 | data2[2]);
 8000b40:	7efb      	ldrb	r3, [r7, #27]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	7ebb      	ldrb	r3, [r7, #26]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t mag_z = (int16_t)(data2[5] << 8 | data2[4]);
 8000b4e:	7f7b      	ldrb	r3, [r7, #29]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	7f3b      	ldrb	r3, [r7, #28]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {mag_x, mag_y, mag_z};
 8000b5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000b6c:	617b      	str	r3, [r7, #20]
	return output;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	461c      	mov	r4, r3
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	372c      	adds	r7, #44	; 0x2c
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd90      	pop	{r4, r7, pc}
	...

08000b88 <readSensorsAndAverage>:

static int64_t  acc_sum_x = 0, acc_sum_y = 0, acc_sum_z = 0;
static int64_t  mag_sum_x = 0, mag_sum_y = 0, mag_sum_z = 0;

void readSensorsAndAverage(Vector3D* acc_avg, Vector3D* mag_avg, I2C_HandleTypeDef hi2c3)
{
 8000b88:	b082      	sub	sp, #8
 8000b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b8e:	b0bb      	sub	sp, #236	; 0xec
 8000b90:	af0a      	add	r7, sp, #40	; 0x28
 8000b92:	6578      	str	r0, [r7, #84]	; 0x54
 8000b94:	6539      	str	r1, [r7, #80]	; 0x50
 8000b96:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000b9a:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix3x3 softIron = create_matrix(
 8000b9e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000ba2:	4bc7      	ldr	r3, [pc, #796]	; (8000ec0 <readSensorsAndAverage+0x338>)
 8000ba4:	9305      	str	r3, [sp, #20]
 8000ba6:	f240 332d 	movw	r3, #813	; 0x32d
 8000baa:	9304      	str	r3, [sp, #16]
 8000bac:	4bc5      	ldr	r3, [pc, #788]	; (8000ec4 <readSensorsAndAverage+0x33c>)
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	f240 332d 	movw	r3, #813	; 0x32d
 8000bb4:	9302      	str	r3, [sp, #8]
 8000bb6:	4bc4      	ldr	r3, [pc, #784]	; (8000ec8 <readSensorsAndAverage+0x340>)
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	f641 0373 	movw	r3, #6259	; 0x1873
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	4bc0      	ldr	r3, [pc, #768]	; (8000ec4 <readSensorsAndAverage+0x33c>)
 8000bc2:	f641 0273 	movw	r2, #6259	; 0x1873
 8000bc6:	f24e 11ff 	movw	r1, #57855	; 0xe1ff
 8000bca:	f002 fda3 	bl	8003714 <create_matrix>
			57855,   6259, -1016,     /* row 0 */
			6259,    73662, 813,     /* row 1 */
			-1016,   813, 66696      /* row 2 */
	);
    /* 1. fresh raw sensor counts --------------------------------------- */
    Vector3D acc_raw = lsmAccRead(&hi2c3);     /* ±16 384 cnt ≈ 1 g   */
 8000bce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bd2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff49 	bl	8000a6e <lsmAccRead>
    Vector3D mraw    = lsmMagRead(&hi2c3);     /* ±32 768 cnt        */
 8000bdc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000be0:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff88 	bl	8000afa <lsmMagRead>
    mag_raw.x =  mraw.y + 2637; //+ 2897;    +Ymag → +Xbody
    mag_raw.y = -mraw.x + 3352;//2486.0; //+ 3352;   /* –Xmag → +Ybody
    mag_raw.z =  mraw.z + 3376; //+ 3200;    Zmag →  Zbody
    */

	mag_raw.x =  convert(mraw.x) - convert(2832 + 54); //+ 2897;   /* +Ymag → +Xbody */
 8000bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fd7e 	bl	80006f0 <convert>
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	f640 3046 	movw	r0, #2886	; 0xb46
 8000bfa:	f7ff fd79 	bl	80006f0 <convert>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	1ae3      	subs	r3, r4, r3
 8000c02:	677b      	str	r3, [r7, #116]	; 0x74
    mag_raw.y =  convert(mraw.y) + convert(3259 - 192); //2486.0; //+ 3352;   /* –Xmag → +Ybody */
 8000c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd71 	bl	80006f0 <convert>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f640 30fb 	movw	r0, #3067	; 0xbfb
 8000c14:	f7ff fd6c 	bl	80006f0 <convert>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4423      	add	r3, r4
 8000c1c:	67bb      	str	r3, [r7, #120]	; 0x78
	mag_raw.z =  convert(mraw.z) + convert(4243 - 80); //+ 3200;   /*  Zmag →  Zbody */
 8000c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd64 	bl	80006f0 <convert>
 8000c28:	4604      	mov	r4, r0
 8000c2a:	f241 0043 	movw	r0, #4163	; 0x1043
 8000c2e:	f7ff fd5f 	bl	80006f0 <convert>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4423      	add	r3, r4
 8000c36:	67fb      	str	r3, [r7, #124]	; 0x7c

	mag_raw = MVMult(softIron, mag_raw);
 8000c38:	f107 0674 	add.w	r6, r7, #116	; 0x74
 8000c3c:	ac06      	add	r4, sp, #24
 8000c3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c4a:	466d      	mov	r5, sp
 8000c4c:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c62:	4630      	mov	r0, r6
 8000c64:	f002 fec6 	bl	80039f4 <MVMult>

	/* 5. push *m_soft* into the FIFO instead of the raw reading ----------- */

    acc_raw.x = acc_raw.x + 376;
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    acc_raw.y = acc_raw.y + 282;
 8000c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c78:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8000c7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    acc_raw.z = acc_raw.z - 738;
 8000c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c84:	f2a3 23e2 	subw	r3, r3, #738	; 0x2e2
 8000c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* 3. promote to Q16.16  (raw × 4  ==  << 2) ------------------------ */
    Vector3D acc_q16 = { acc_raw.x,
 8000c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c90:	66bb      	str	r3, [r7, #104]	; 0x68
                         acc_raw.y,
 8000c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    Vector3D acc_q16 = { acc_raw.x,
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
                         acc_raw.z};
 8000c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    Vector3D acc_q16 = { acc_raw.x,
 8000c9c:	673b      	str	r3, [r7, #112]	; 0x70

    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ca0:	141b      	asrs	r3, r3, #16
 8000ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
                         mag_raw.y>>16,
 8000ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ca6:	141b      	asrs	r3, r3, #16
    Vector3D mag_q16 = { mag_raw.x>>16,
 8000ca8:	663b      	str	r3, [r7, #96]	; 0x60
                         mag_raw.z>>16};
 8000caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cac:	141b      	asrs	r3, r3, #16
    Vector3D mag_q16 = { mag_raw.x>>16,
 8000cae:	667b      	str	r3, [r7, #100]	; 0x64

    /* 4. drop oldest sample if FIFO full ------------------------------ */
    if (buf_filled == AVG_LEN) {
 8000cb0:	4b86      	ldr	r3, [pc, #536]	; (8000ecc <readSensorsAndAverage+0x344>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	f040 809a 	bne.w	8000dee <readSensorsAndAverage+0x266>
        acc_sum_x -= acc_buf[buf_pos].x;
 8000cba:	4b85      	ldr	r3, [pc, #532]	; (8000ed0 <readSensorsAndAverage+0x348>)
 8000cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc0:	4b84      	ldr	r3, [pc, #528]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4c84      	ldr	r4, [pc, #528]	; (8000ed8 <readSensorsAndAverage+0x350>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4423      	add	r3, r4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cda:	ebb0 0802 	subs.w	r8, r0, r2
 8000cde:	eb61 0903 	sbc.w	r9, r1, r3
 8000ce2:	4b7b      	ldr	r3, [pc, #492]	; (8000ed0 <readSensorsAndAverage+0x348>)
 8000ce4:	e9c3 8900 	strd	r8, r9, [r3]
        acc_sum_y -= acc_buf[buf_pos].y;
 8000ce8:	4b7c      	ldr	r3, [pc, #496]	; (8000edc <readSensorsAndAverage+0x354>)
 8000cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cee:	4b79      	ldr	r3, [pc, #484]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4c78      	ldr	r4, [pc, #480]	; (8000ed8 <readSensorsAndAverage+0x350>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4423      	add	r3, r4
 8000d00:	3304      	adds	r3, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d0a:	ebb0 0a02 	subs.w	sl, r0, r2
 8000d0e:	eb61 0b03 	sbc.w	fp, r1, r3
 8000d12:	4b72      	ldr	r3, [pc, #456]	; (8000edc <readSensorsAndAverage+0x354>)
 8000d14:	e9c3 ab00 	strd	sl, fp, [r3]
        acc_sum_z -= acc_buf[buf_pos].z;
 8000d18:	4b71      	ldr	r3, [pc, #452]	; (8000ee0 <readSensorsAndAverage+0x358>)
 8000d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d1e:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4c6c      	ldr	r4, [pc, #432]	; (8000ed8 <readSensorsAndAverage+0x350>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4423      	add	r3, r4
 8000d30:	3308      	adds	r3, #8
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d3a:	1a84      	subs	r4, r0, r2
 8000d3c:	64bc      	str	r4, [r7, #72]	; 0x48
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d44:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <readSensorsAndAverage+0x358>)
 8000d46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8000d4a:	e9c3 1200 	strd	r1, r2, [r3]

        mag_sum_x -= mag_buf[buf_pos].x;
 8000d4e:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <readSensorsAndAverage+0x35c>)
 8000d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d54:	4b5f      	ldr	r3, [pc, #380]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4c63      	ldr	r4, [pc, #396]	; (8000ee8 <readSensorsAndAverage+0x360>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4423      	add	r3, r4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d6e:	1a84      	subs	r4, r0, r2
 8000d70:	643c      	str	r4, [r7, #64]	; 0x40
 8000d72:	eb61 0303 	sbc.w	r3, r1, r3
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
 8000d78:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <readSensorsAndAverage+0x35c>)
 8000d7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000d7e:	e9c3 1200 	strd	r1, r2, [r3]
        mag_sum_y -= mag_buf[buf_pos].y;
 8000d82:	4b5a      	ldr	r3, [pc, #360]	; (8000eec <readSensorsAndAverage+0x364>)
 8000d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d88:	4b52      	ldr	r3, [pc, #328]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4c56      	ldr	r4, [pc, #344]	; (8000ee8 <readSensorsAndAverage+0x360>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4423      	add	r3, r4
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000da4:	1a84      	subs	r4, r0, r2
 8000da6:	63bc      	str	r4, [r7, #56]	; 0x38
 8000da8:	eb61 0303 	sbc.w	r3, r1, r3
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dae:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <readSensorsAndAverage+0x364>)
 8000db0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000db4:	e9c3 1200 	strd	r1, r2, [r3]
        mag_sum_z -= mag_buf[buf_pos].z;
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <readSensorsAndAverage+0x368>)
 8000dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4c48      	ldr	r4, [pc, #288]	; (8000ee8 <readSensorsAndAverage+0x360>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4423      	add	r3, r4
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000dda:	1a84      	subs	r4, r0, r2
 8000ddc:	633c      	str	r4, [r7, #48]	; 0x30
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
 8000de4:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <readSensorsAndAverage+0x368>)
 8000de6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000dea:	e9c3 1200 	strd	r1, r2, [r3]
    }

    /* 5. store new sample & update sums -------------------------------- */
    acc_buf[buf_pos] = acc_q16;
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4938      	ldr	r1, [pc, #224]	; (8000ed8 <readSensorsAndAverage+0x350>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	440b      	add	r3, r1
 8000e00:	461c      	mov	r4, r3
 8000e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    mag_buf[buf_pos] = mag_q16;
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <readSensorsAndAverage+0x34c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4934      	ldr	r1, [pc, #208]	; (8000ee8 <readSensorsAndAverage+0x360>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	461c      	mov	r4, r3
 8000e22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    acc_sum_x += acc_q16.x;  acc_sum_y += acc_q16.y;  acc_sum_z += acc_q16.z;
 8000e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e30:	4618      	mov	r0, r3
 8000e32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <readSensorsAndAverage+0x348>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	1884      	adds	r4, r0, r2
 8000e3e:	62bc      	str	r4, [r7, #40]	; 0x28
 8000e40:	eb41 0303 	adc.w	r3, r1, r3
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <readSensorsAndAverage+0x348>)
 8000e48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000e4c:	e9c3 1200 	strd	r1, r2, [r3]
 8000e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e52:	4618      	mov	r0, r3
 8000e54:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <readSensorsAndAverage+0x354>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	1884      	adds	r4, r0, r2
 8000e60:	623c      	str	r4, [r7, #32]
 8000e62:	eb41 0303 	adc.w	r3, r1, r3
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <readSensorsAndAverage+0x354>)
 8000e6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000e6e:	e9c3 1200 	strd	r1, r2, [r3]
 8000e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e74:	4618      	mov	r0, r3
 8000e76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <readSensorsAndAverage+0x358>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	1884      	adds	r4, r0, r2
 8000e82:	61bc      	str	r4, [r7, #24]
 8000e84:	eb41 0303 	adc.w	r3, r1, r3
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <readSensorsAndAverage+0x358>)
 8000e8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000e90:	e9c3 1200 	strd	r1, r2, [r3]
    mag_sum_x += mag_q16.x;  mag_sum_y += mag_q16.y;  mag_sum_z += mag_q16.z;
 8000e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e96:	4618      	mov	r0, r3
 8000e98:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <readSensorsAndAverage+0x35c>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	1884      	adds	r4, r0, r2
 8000ea4:	613c      	str	r4, [r7, #16]
 8000ea6:	eb41 0303 	adc.w	r3, r1, r3
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <readSensorsAndAverage+0x35c>)
 8000eae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000eb2:	e9c3 1200 	strd	r1, r2, [r3]
 8000eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eb8:	4618      	mov	r0, r3
 8000eba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000ebe:	e019      	b.n	8000ef4 <readSensorsAndAverage+0x36c>
 8000ec0:	00010488 	.word	0x00010488
 8000ec4:	fffffc08 	.word	0xfffffc08
 8000ec8:	00011fbe 	.word	0x00011fbe
 8000ecc:	20000ab5 	.word	0x20000ab5
 8000ed0:	20000ab8 	.word	0x20000ab8
 8000ed4:	20000ab4 	.word	0x20000ab4
 8000ed8:	20000a6c 	.word	0x20000a6c
 8000edc:	20000ac0 	.word	0x20000ac0
 8000ee0:	20000ac8 	.word	0x20000ac8
 8000ee4:	20000ad0 	.word	0x20000ad0
 8000ee8:	20000a90 	.word	0x20000a90
 8000eec:	20000ad8 	.word	0x20000ad8
 8000ef0:	20000ae0 	.word	0x20000ae0
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <readSensorsAndAverage+0x498>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	1884      	adds	r4, r0, r2
 8000efc:	60bc      	str	r4, [r7, #8]
 8000efe:	eb41 0303 	adc.w	r3, r1, r3
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b46      	ldr	r3, [pc, #280]	; (8001020 <readSensorsAndAverage+0x498>)
 8000f06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f0a:	e9c3 1200 	strd	r1, r2, [r3]
 8000f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f10:	4618      	mov	r0, r3
 8000f12:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000f16:	4b43      	ldr	r3, [pc, #268]	; (8001024 <readSensorsAndAverage+0x49c>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	1884      	adds	r4, r0, r2
 8000f1e:	603c      	str	r4, [r7, #0]
 8000f20:	eb41 0303 	adc.w	r3, r1, r3
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <readSensorsAndAverage+0x49c>)
 8000f28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f2c:	e9c3 1200 	strd	r1, r2, [r3]

    /* 6. advance circular index --------------------------------------- */
    buf_pos = (buf_pos + 1) % AVG_LEN;
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <readSensorsAndAverage+0x4a0>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <readSensorsAndAverage+0x4a4>)
 8000f38:	fb83 3102 	smull	r3, r1, r3, r2
 8000f3c:	17d3      	asrs	r3, r2, #31
 8000f3e:	1ac9      	subs	r1, r1, r3
 8000f40:	460b      	mov	r3, r1
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	440b      	add	r3, r1
 8000f46:	1ad1      	subs	r1, r2, r3
 8000f48:	b2ca      	uxtb	r2, r1
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <readSensorsAndAverage+0x4a0>)
 8000f4c:	701a      	strb	r2, [r3, #0]
    if (buf_filled < AVG_LEN) buf_filled++;
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <readSensorsAndAverage+0x4a8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d805      	bhi.n	8000f62 <readSensorsAndAverage+0x3da>
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <readSensorsAndAverage+0x4a8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <readSensorsAndAverage+0x4a8>)
 8000f60:	701a      	strb	r2, [r3, #0]

    /* 7. return running mean ------------------------------------------ */
    int32_t div = buf_filled;           /* 1 … 5 */
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <readSensorsAndAverage+0x4a8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    acc_avg->x = (int32_t)(acc_sum_x / div);
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <readSensorsAndAverage+0x4ac>)
 8000f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f74:	461a      	mov	r2, r3
 8000f76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f7a:	f7ff f9a1 	bl	80002c0 <__aeabi_ldivmod>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f84:	601a      	str	r2, [r3, #0]
    acc_avg->y = (int32_t)(acc_sum_y / div);
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <readSensorsAndAverage+0x4b0>)
 8000f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f90:	461a      	mov	r2, r3
 8000f92:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f96:	f7ff f993 	bl	80002c0 <__aeabi_ldivmod>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa0:	605a      	str	r2, [r3, #4]
    acc_avg->z = (int32_t)(acc_sum_z / div);
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <readSensorsAndAverage+0x4b4>)
 8000fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fac:	461a      	mov	r2, r3
 8000fae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fb2:	f7ff f985 	bl	80002c0 <__aeabi_ldivmod>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbc:	609a      	str	r2, [r3, #8]

    mag_avg->x = (int32_t)(mag_sum_x / div);
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <readSensorsAndAverage+0x4b8>)
 8000fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fc8:	461a      	mov	r2, r3
 8000fca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fce:	f7ff f977 	bl	80002c0 <__aeabi_ldivmod>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd8:	601a      	str	r2, [r3, #0]
    mag_avg->y = (int32_t)(mag_sum_y / div);
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <readSensorsAndAverage+0x498>)
 8000fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fea:	f7ff f969 	bl	80002c0 <__aeabi_ldivmod>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ff4:	605a      	str	r2, [r3, #4]
    mag_avg->z = (int32_t)(mag_sum_z / div);
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <readSensorsAndAverage+0x49c>)
 8000ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001000:	461a      	mov	r2, r3
 8001002:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001006:	f7ff f95b 	bl	80002c0 <__aeabi_ldivmod>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001010:	609a      	str	r2, [r3, #8]
}
 8001012:	bf00      	nop
 8001014:	37c4      	adds	r7, #196	; 0xc4
 8001016:	46bd      	mov	sp, r7
 8001018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800101c:	b002      	add	sp, #8
 800101e:	4770      	bx	lr
 8001020:	20000ad8 	.word	0x20000ad8
 8001024:	20000ae0 	.word	0x20000ae0
 8001028:	20000ab4 	.word	0x20000ab4
 800102c:	55555556 	.word	0x55555556
 8001030:	20000ab5 	.word	0x20000ab5
 8001034:	20000ab8 	.word	0x20000ab8
 8001038:	20000ac0 	.word	0x20000ac0
 800103c:	20000ac8 	.word	0x20000ac8
 8001040:	20000ad0 	.word	0x20000ad0

08001044 <sinus>:
const int32_t atan_lut[512] = { -51472, -51343, -51214, -51085, -50955, -50824, -50693, -50562, -50430, -50297, -50164, -50030, -49896, -49761, -49626, -49491, -49354, -49217, -49080, -48942, -48804, -48665, -48525, -48385, -48245, -48104, -47962, -47820, -47677, -47534, -47390, -47245, -47100, -46955, -46808, -46662, -46514, -46367, -46218, -46069, -45919, -45769, -45619, -45467, -45315, -45163, -45010, -44856, -44702, -44547, -44392, -44235, -44079, -43922, -43764, -43605, -43446, -43287, -43126, -42965, -42804, -42642, -42479, -42316, -42152, -41987, -41822, -41656, -41490, -41323, -41155, -40987, -40818, -40649, -40479, -40308, -40136, -39964, -39792, -39618, -39444, -39270, -39094, -38919, -38742, -38565, -38387, -38209, -38030, -37850, -37670, -37489, -37307, -37125, -36942, -36758, -36574, -36389, -36203, -36017, -35830, -35643, -35455, -35266, -35076, -34886, -34696, -34504, -34312, -34119, -33926, -33732, -33537, -33342, -33146, -32949, -32752, -32554, -32356, -32156, -31957, -31756, -31555, -31353, -31151, -30947, -30744, -30539, -30334, -30129, -29922, -29715, -29508, -29299, -29091, -28881, -28671, -28460, -28249, -28037, -27824, -27611, -27397, -27182, -26967, -26751, -26535, -26318, -26100, -25882, -25663, -25444, -25224, -25003, -24782, -24560, -24338, -24115, -23891, -23667, -23442, -23217, -22991, -22764, -22537, -22310, -22081, -21853, -21623, -21394, -21163, -20932, -20701, -20469, -20236, -20003, -19770, -19535, -19301, -19066, -18830, -18594, -18357, -18120, -17882, -17644, -17406, -17167, -16927, -16687, -16447, -16206, -15964, -15723, -15480, -15238, -14995, -14751, -14507, -14263, -14018, -13773, -13527, -13281, -13035, -12788, -12541, -12294, -12046, -11798, -11550, -11301, -11052, -10802, -10553, -10303, -10052, -9802, -9551, -9299, -9048, -8796, -8544, -8292, -8039, -7786, -7533, -7280, -7027, -6773, -6519, -6265, -6011, -5756, -5502, -5247, -4992, -4737, -4482, -4226, -3971, -3715, -3460, -3204, -2948, -2692, -2436, -2179, -1923, -1667, -1411, -1154, -898, -641, -385, -128, 128, 385, 641, 898, 1154, 1411, 1667, 1923, 2179, 2436, 2692, 2948, 3204, 3460, 3715, 3971, 4226, 4482, 4737, 4992, 5247, 5502, 5756, 6011, 6265, 6519, 6773, 7027, 7280, 7533, 7786, 8039, 8292, 8544, 8796, 9048, 9299, 9551, 9802, 10052, 10303, 10553, 10802, 11052, 11301, 11550, 11798, 12046, 12294, 12541, 12788, 13035, 13281, 13527, 13773, 14018, 14263, 14507, 14751, 14995, 15238, 15480, 15723, 15964, 16206, 16447, 16687, 16927, 17167, 17406, 17644, 17882, 18120, 18357, 18594, 18830, 19066, 19301, 19535, 19770, 20003, 20236, 20469, 20701, 20932, 21163, 21394, 21623, 21853, 22081, 22310, 22537, 22764, 22991, 23217, 23442, 23667, 23891, 24115, 24338, 24560, 24782, 25003, 25224, 25444, 25663, 25882, 26100, 26318, 26535, 26751, 26967, 27182, 27397, 27611, 27824, 28037, 28249, 28460, 28671, 28881, 29091, 29299, 29508, 29715, 29922, 30129, 30334, 30539, 30744, 30947, 31151, 31353, 31555, 31756, 31957, 32156, 32356, 32554, 32752, 32949, 33146, 33342, 33537, 33732, 33926, 34119, 34312, 34504, 34696, 34886, 35076, 35266, 35455, 35643, 35830, 36017, 36203, 36389, 36574, 36758, 36942, 37125, 37307, 37489, 37670, 37850, 38030, 38209, 38387, 38565, 38742, 38919, 39094, 39270, 39444, 39618, 39792, 39964, 40136, 40308, 40479, 40649, 40818, 40987, 41155, 41323, 41490, 41656, 41822, 41987, 42152, 42316, 42479, 42642, 42804, 42965, 43126, 43287, 43446, 43605, 43764, 43922, 44079, 44235, 44392, 44547, 44702, 44856, 45010, 45163, 45315, 45467, 45619, 45769, 45919, 46069, 46218, 46367, 46514, 46662, 46808, 46955, 47100, 47245, 47390, 47534, 47677, 47820, 47962, 48104, 48245, 48385, 48525, 48665, 48804, 48942, 49080, 49217, 49354, 49491, 49626, 49761, 49896, 50030, 50164, 50297, 50430, 50562, 50693, 50824, 50955, 51085, 51214, 51343, 51472 };
const int32_t asin_lut[512] = { -102944, -97149, -94746, -92901, -91343, -89970, -88727, -87583, -86517, -85515, -84566, -83662, -82798, -81969, -81170, -80398, -79651, -78926, -78221, -77535, -76867, -76214, -75575, -74951, -74339, -73740, -73151, -72573, -72006, -71447, -70898, -70357, -69824, -69299, -68782, -68271, -67767, -67270, -66778, -66293, -65813, -65339, -64870, -64406, -63947, -63493, -63043, -62597, -62156, -61719, -61286, -60857, -60431, -60009, -59591, -59176, -58764, -58355, -57950, -57548, -57148, -56752, -56358, -55967, -55579, -55193, -54810, -54429, -54051, -53675, -53301, -52929, -52560, -52193, -51828, -51465, -51104, -50745, -50388, -50032, -49679, -49327, -48977, -48629, -48283, -47938, -47595, -47253, -46913, -46575, -46238, -45902, -45568, -45235, -44904, -44574, -44245, -43918, -43592, -43267, -42944, -42622, -42301, -41981, -41662, -41344, -41028, -40713, -40398, -40085, -39773, -39462, -39152, -38842, -38534, -38227, -37921, -37616, -37311, -37008, -36705, -36403, -36102, -35802, -35503, -35205, -34907, -34611, -34315, -34019, -33725, -33431, -33138, -32846, -32554, -32264, -31973, -31684, -31395, -31107, -30819, -30533, -30246, -29961, -29676, -29391, -29108, -28824, -28542, -28260, -27978, -27697, -27417, -27137, -26857, -26579, -26300, -26022, -25745, -25468, -25192, -24916, -24640, -24365, -24091, -23817, -23543, -23270, -22997, -22725, -22453, -22181, -21910, -21639, -21369, -21099, -20829, -20560, -20291, -20022, -19754, -19486, -19218, -18951, -18684, -18417, -18151, -17885, -17619, -17354, -17089, -16824, -16560, -16295, -16031, -15768, -15504, -15241, -14978, -14715, -14453, -14191, -13929, -13667, -13405, -13144, -12883, -12622, -12361, -12101, -11840, -11580, -11320, -11060, -10801, -10541, -10282, -10023, -9764, -9505, -9247, -8988, -8730, -8472, -8213, -7956, -7698, -7440, -7182, -6925, -6667, -6410, -6153, -5896, -5639, -5382, -5125, -4868, -4612, -4355, -4099, -3842, -3586, -3329, -3073, -2817, -2561, -2304, -2048, -1792, -1536, -1280, -1024, -768, -512, -256, 0, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2561, 2817, 3073, 3329, 3586, 3842, 4099, 4355, 4612, 4868, 5125, 5382, 5639, 5896, 6153, 6410, 6667, 6925, 7182, 7440, 7698, 7956, 8213, 8472, 8730, 8988, 9247, 9505, 9764, 10023, 10282, 10541, 10801, 11060, 11320, 11580, 11840, 12101, 12361, 12622, 12883, 13144, 13405, 13667, 13929, 14191, 14453, 14715, 14978, 15241, 15504, 15768, 16031, 16295, 16560, 16824, 17089, 17354, 17619, 17885, 18151, 18417, 18684, 18951, 19218, 19486, 19754, 20022, 20291, 20560, 20829, 21099, 21369, 21639, 21910, 22181, 22453, 22725, 22997, 23270, 23543, 23817, 24091, 24365, 24640, 24916, 25192, 25468, 25745, 26022, 26300, 26579, 26857, 27137, 27417, 27697, 27978, 28260, 28542, 28824, 29108, 29391, 29676, 29961, 30246, 30533, 30819, 31107, 31395, 31684, 31973, 32264, 32554, 32846, 33138, 33431, 33725, 34019, 34315, 34611, 34907, 35205, 35503, 35802, 36102, 36403, 36705, 37008, 37311, 37616, 37921, 38227, 38534, 38842, 39152, 39462, 39773, 40085, 40398, 40713, 41028, 41344, 41662, 41981, 42301, 42622, 42944, 43267, 43592, 43918, 44245, 44574, 44904, 45235, 45568, 45902, 46238, 46575, 46913, 47253, 47595, 47938, 48283, 48629, 48977, 49327, 49679, 50032, 50388, 50745, 51104, 51465, 51828, 52193, 52560, 52929, 53301, 53675, 54051, 54429, 54810, 55193, 55579, 55967, 56358, 56752, 57148, 57548, 57950, 58355, 58764, 59176, 59591, 60009, 60431, 60857, 61286, 61719, 62156, 62597, 63043, 63493, 63947, 64406, 64870, 65339, 65813, 66293, 66778, 67270, 67767, 68271, 68782, 69299, 69824, 70357, 70898, 71447, 72006, 72573, 73151, 73740, 74339, 74951, 75575, 76214, 76867, 77535, 78221, 78926, 79651, 80398, 81170, 81969, 82798, 83662, 84566, 85515, 86517, 87583, 88727, 89970, 91343, 92901, 94746, 97149};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 800104c:	e003      	b.n	8001056 <sinus+0x12>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	dbf8      	blt.n	800104e <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	425a      	negs	r2, r3
 8001060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001064:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001068:	bf58      	it	pl
 800106a:	4253      	negpl	r3, r2
 800106c:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <sinus+0x44>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001076:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fb2d 	bl	80006d8 <expand>
 800107e:	4603      	mov	r3, r0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	080092f0 	.word	0x080092f0

0800108c <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800109a:	425a      	negs	r2, r3
 800109c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80010a4:	bf58      	it	pl
 80010a6:	4253      	negpl	r3, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffcb 	bl	8001044 <sinus>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 80010b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 80010c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010c6:	f7ff fb13 	bl	80006f0 <convert>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80010d2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80010d6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fb08 	bl	80006f0 <convert>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461c      	mov	r4, r3
 80010e4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80010e8:	4622      	mov	r2, r4
 80010ea:	462b      	mov	r3, r5
 80010ec:	1891      	adds	r1, r2, r2
 80010ee:	6039      	str	r1, [r7, #0]
 80010f0:	415b      	adcs	r3, r3
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f8:	1912      	adds	r2, r2, r4
 80010fa:	eb45 0303 	adc.w	r3, r5, r3
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	f04f 0100 	mov.w	r1, #0
 8001106:	0199      	lsls	r1, r3, #6
 8001108:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800110c:	0190      	lsls	r0, r2, #6
 800110e:	1812      	adds	r2, r2, r0
 8001110:	eb41 0303 	adc.w	r3, r1, r3
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	f04f 0100 	mov.w	r1, #0
 800111c:	0159      	lsls	r1, r3, #5
 800111e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001122:	0150      	lsls	r0, r2, #5
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	1b12      	subs	r2, r2, r4
 800112a:	eb63 0305 	sbc.w	r3, r3, r5
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	f04f 0100 	mov.w	r1, #0
 8001136:	0159      	lsls	r1, r3, #5
 8001138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800113c:	0150      	lsls	r0, r2, #5
 800113e:	eb12 0800 	adds.w	r8, r2, r0
 8001142:	eb43 0901 	adc.w	r9, r3, r1
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001152:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001156:	ea4f 4329 	mov.w	r3, r9, asr #16
 800115a:	4613      	mov	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001162:	4650      	mov	r0, sl
 8001164:	4659      	mov	r1, fp
 8001166:	f7ff f8ab 	bl	80002c0 <__aeabi_ldivmod>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4613      	mov	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4618      	mov	r0, r3
 8001176:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	461a      	mov	r2, r3
 800117e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001182:	fb02 f501 	mul.w	r5, r2, r1
 8001186:	fb00 f403 	mul.w	r4, r0, r3
 800118a:	442c      	add	r4, r5
 800118c:	fba0 2302 	umull	r2, r3, r0, r2
 8001190:	18e1      	adds	r1, r4, r3
 8001192:	460b      	mov	r3, r1
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	f04f 0100 	mov.w	r1, #0
 800119c:	0c10      	lsrs	r0, r2, #16
 800119e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011a2:	1419      	asrs	r1, r3, #16
 80011a4:	4603      	mov	r3, r0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff faae 	bl	8000708 <inconvert>
 80011ac:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 80011ae:	6938      	ldr	r0, [r7, #16]
 80011b0:	f7ff ff48 	bl	8001044 <sinus>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080011c0 <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 80011c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 80011ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011ce:	f7ff fa8f 	bl	80006f0 <convert>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011da:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80011de:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff fa84 	bl	80006f0 <convert>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461c      	mov	r4, r3
 80011ec:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80011f0:	4622      	mov	r2, r4
 80011f2:	462b      	mov	r3, r5
 80011f4:	1891      	adds	r1, r2, r2
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	415b      	adcs	r3, r3
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001200:	1912      	adds	r2, r2, r4
 8001202:	eb45 0303 	adc.w	r3, r5, r3
 8001206:	f04f 0000 	mov.w	r0, #0
 800120a:	f04f 0100 	mov.w	r1, #0
 800120e:	0199      	lsls	r1, r3, #6
 8001210:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001214:	0190      	lsls	r0, r2, #6
 8001216:	1812      	adds	r2, r2, r0
 8001218:	eb41 0303 	adc.w	r3, r1, r3
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	0159      	lsls	r1, r3, #5
 8001226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800122a:	0150      	lsls	r0, r2, #5
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	1b12      	subs	r2, r2, r4
 8001232:	eb63 0305 	sbc.w	r3, r3, r5
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	f04f 0100 	mov.w	r1, #0
 800123e:	0159      	lsls	r1, r3, #5
 8001240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001244:	0150      	lsls	r0, r2, #5
 8001246:	eb12 0800 	adds.w	r8, r2, r0
 800124a:	eb43 0901 	adc.w	r9, r3, r1
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	ea4f 4218 	mov.w	r2, r8, lsr #16
 800125a:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 800125e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001262:	4613      	mov	r3, r2
 8001264:	461a      	mov	r2, r3
 8001266:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800126a:	4650      	mov	r0, sl
 800126c:	4659      	mov	r1, fp
 800126e:	f7ff f827 	bl	80002c0 <__aeabi_ldivmod>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4613      	mov	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4618      	mov	r0, r3
 800127e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	461a      	mov	r2, r3
 8001286:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800128a:	fb02 f501 	mul.w	r5, r2, r1
 800128e:	fb00 f403 	mul.w	r4, r0, r3
 8001292:	442c      	add	r4, r5
 8001294:	fba0 2302 	umull	r2, r3, r0, r2
 8001298:	18e1      	adds	r1, r4, r3
 800129a:	460b      	mov	r3, r1
 800129c:	f04f 0000 	mov.w	r0, #0
 80012a0:	f04f 0100 	mov.w	r1, #0
 80012a4:	0c10      	lsrs	r0, r2, #16
 80012a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012aa:	1419      	asrs	r1, r3, #16
 80012ac:	4603      	mov	r3, r0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fa2a 	bl	8000708 <inconvert>
 80012b4:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 80012b6:	6938      	ldr	r0, [r7, #16]
 80012b8:	f7ff fee8 	bl	800108c <cosinus>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012c8 <normalizeTheta>:

int32_t HVs[104] = {
0x00000000, 0xFFEACCCD, 0x00000000, 0xFFD8AE14, 0xFFF663D7, 0x00000000, 0x00112666, 0xFFF74A3D, 0xFFF9AE14, 0x00000000, 0x00096B85, 0x0003E8F6, 0x000AAB85, 0xFFFFC7AE, 0x00000000, 0xFFFCF333, 0x000B87AE, 0x000968F6, 0x00086E14, 0xFFFFA666, 0x00000000, 0xFFF2C51F, 0xFFE5199A, 0xFFFE028F, 0xFFFDD1EC, 0xFFFF87AE, 0x0001028F, 0x00000000, 0x0018D47B, 0x0008B0A4, 0x00020CCD, 0x0003B333, 0xFFFB0F5C, 0xFFFFC28F, 0x00002148, 0x00000000, 0xFFF2970A, 0x00059C29, 0x000C6E14, 0x000AB0A4, 0x00017AE1, 0xFFFDF0A4, 0x00010000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

int32_t normalizeTheta(int32_t theta) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    int32_t result;
    if ((theta > -1) && (theta<1)) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db05      	blt.n	80012e2 <normalizeTheta+0x1a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dc02      	bgt.n	80012e2 <normalizeTheta+0x1a>
        result = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e00c      	b.n	80012fc <normalizeTheta+0x34>
    }
    else {
    	if ((theta < ((180 << 16) + 1)) && (theta > ((179 << 16) + 65535))) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80012e8:	dc06      	bgt.n	80012f8 <normalizeTheta+0x30>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80012f0:	db02      	blt.n	80012f8 <normalizeTheta+0x30>
            result = (179<<16)+65535;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <normalizeTheta+0x44>)
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e001      	b.n	80012fc <normalizeTheta+0x34>
        }
        else {
            result = theta;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
        }
    }
    return result;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	00b3ffff 	.word	0x00b3ffff

08001310 <toRad>:

int32_t toRad(int32_t angledeg) {
 8001310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
    return DIV(MULT(angledeg,PI),180<<16);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	461c      	mov	r4, r3
 800131e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001322:	4622      	mov	r2, r4
 8001324:	462b      	mov	r3, r5
 8001326:	1891      	adds	r1, r2, r2
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	415b      	adcs	r3, r3
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001332:	1912      	adds	r2, r2, r4
 8001334:	eb45 0303 	adc.w	r3, r5, r3
 8001338:	f04f 0000 	mov.w	r0, #0
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	0199      	lsls	r1, r3, #6
 8001342:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001346:	0190      	lsls	r0, r2, #6
 8001348:	1812      	adds	r2, r2, r0
 800134a:	eb41 0303 	adc.w	r3, r1, r3
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	0159      	lsls	r1, r3, #5
 8001358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800135c:	0150      	lsls	r0, r2, #5
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	1b12      	subs	r2, r2, r4
 8001364:	eb63 0305 	sbc.w	r3, r3, r5
 8001368:	f04f 0000 	mov.w	r0, #0
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	0159      	lsls	r1, r3, #5
 8001372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001376:	0150      	lsls	r0, r2, #5
 8001378:	eb12 0800 	adds.w	r8, r2, r0
 800137c:	eb43 0901 	adc.w	r9, r3, r1
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	ea4f 4218 	mov.w	r2, r8, lsr #16
 800138c:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001390:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001394:	4613      	mov	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800139c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80013a0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80013a4:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	4650      	mov	r0, sl
 80013ae:	4659      	mov	r1, fp
 80013b0:	f7fe ff86 	bl	80002c0 <__aeabi_ldivmod>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4613      	mov	r3, r2
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013c4 <magnet>:

void magnet(int32_t r, int32_t theta, int32_t phi, int32_t days, int32_t buffer[3]) {
 80013c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c8:	b0b9      	sub	sp, #228	; 0xe4
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80013d0:	637a      	str	r2, [r7, #52]	; 0x34
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
 80013d4:	466b      	mov	r3, sp
 80013d6:	60bb      	str	r3, [r7, #8]
	 * Input2: 16.16 latitude in degrees, where 0 is equator, 90 is north pole and -90 is south pole
	 * Input3: 16.16 longitude in degrees, ranging from -180 to 180, where 0 is the prime meridian
	 * Input4: 16.16 decimal days since 2000
	 * Input5: 3-array of int32_t to be changed to Br, Bt and Bp respectively, in Rasmus units
	 */
	printf("Theta input: ");
 80013d8:	4892      	ldr	r0, [pc, #584]	; (8001624 <magnet+0x260>)
 80013da:	f006 fa5f 	bl	800789c <iprintf>
	printFix(theta);
 80013de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013e0:	f7ff f95a 	bl	8000698 <printFix>
	printf("\r\n");
 80013e4:	4890      	ldr	r0, [pc, #576]	; (8001628 <magnet+0x264>)
 80013e6:	f006 faf5 	bl	80079d4 <puts>

	printf("Phi input: ");
 80013ea:	4890      	ldr	r0, [pc, #576]	; (800162c <magnet+0x268>)
 80013ec:	f006 fa56 	bl	800789c <iprintf>
	printFix(phi);
 80013f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013f2:	f7ff f951 	bl	8000698 <printFix>
	printf("\r\n");
 80013f6:	488c      	ldr	r0, [pc, #560]	; (8001628 <magnet+0x264>)
 80013f8:	f006 faec 	bl	80079d4 <puts>

	printf("Normalized theta: ");
 80013fc:	488c      	ldr	r0, [pc, #560]	; (8001630 <magnet+0x26c>)
 80013fe:	f006 fa4d 	bl	800789c <iprintf>
    theta = normalizeTheta(theta);
 8001402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001404:	f7ff ff60 	bl	80012c8 <normalizeTheta>
 8001408:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 800140a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800140c:	f7ff f944 	bl	8000698 <printFix>
    printf("\r\n");
 8001410:	4885      	ldr	r0, [pc, #532]	; (8001628 <magnet+0x264>)
 8001412:	f006 fadf 	bl	80079d4 <puts>

    printf("Theta radians: ");
 8001416:	4887      	ldr	r0, [pc, #540]	; (8001634 <magnet+0x270>)
 8001418:	f006 fa40 	bl	800789c <iprintf>
    theta = toRad(5898240-theta);
 800141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800141e:	f5c3 03b4 	rsb	r3, r3, #5898240	; 0x5a0000
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff74 	bl	8001310 <toRad>
 8001428:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 800142a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800142c:	f7ff f934 	bl	8000698 <printFix>
    printf("\r\n");
 8001430:	487d      	ldr	r0, [pc, #500]	; (8001628 <magnet+0x264>)
 8001432:	f006 facf 	bl	80079d4 <puts>

    printf("Phi radians: ");
 8001436:	4880      	ldr	r0, [pc, #512]	; (8001638 <magnet+0x274>)
 8001438:	f006 fa30 	bl	800789c <iprintf>
    phi = toRad(phi);
 800143c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800143e:	f7ff ff67 	bl	8001310 <toRad>
 8001442:	6378      	str	r0, [r7, #52]	; 0x34
    printFix(phi);
 8001444:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001446:	f7ff f927 	bl	8000698 <printFix>
    printf("\r\n");
 800144a:	4877      	ldr	r0, [pc, #476]	; (8001628 <magnet+0x264>)
 800144c:	f006 fac2 	bl	80079d4 <puts>
    int32_t a = 417542963;
 8001450:	4b7a      	ldr	r3, [pc, #488]	; (800163c <magnet+0x278>)
 8001452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int Nmodel = 13; // hard code
 8001456:	230d      	movs	r3, #13
 8001458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int Nmax = Nmodel * (Nmodel + 3 ) / 2;
 800145c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001460:	3303      	adds	r3, #3
 8001462:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	0fda      	lsrs	r2, r3, #31
 800146c:	4413      	add	r3, r2
 800146e:	105b      	asrs	r3, r3, #1
 8001470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    int32_t g[Nmodel][Nmodel+1];
 8001474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001478:	f103 0c01 	add.w	ip, r3, #1
 800147c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8001480:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001488:	4663      	mov	r3, ip
 800148a:	461a      	mov	r2, r3
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	f04f 0000 	mov.w	r0, #0
 8001494:	f04f 0100 	mov.w	r1, #0
 8001498:	0159      	lsls	r1, r3, #5
 800149a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149e:	0150      	lsls	r0, r2, #5
 80014a0:	4663      	mov	r3, ip
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4633      	mov	r3, r6
 80014a8:	3b01      	subs	r3, #1
 80014aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014ae:	4663      	mov	r3, ip
 80014b0:	4618      	mov	r0, r3
 80014b2:	f04f 0100 	mov.w	r1, #0
 80014b6:	4633      	mov	r3, r6
 80014b8:	461a      	mov	r2, r3
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	fb02 f501 	mul.w	r5, r2, r1
 80014c2:	fb00 f403 	mul.w	r4, r0, r3
 80014c6:	442c      	add	r4, r5
 80014c8:	fba0 0102 	umull	r0, r1, r0, r2
 80014cc:	1863      	adds	r3, r4, r1
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	014b      	lsls	r3, r1, #5
 80014da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014de:	0142      	lsls	r2, r0, #5
 80014e0:	4663      	mov	r3, ip
 80014e2:	4618      	mov	r0, r3
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	4633      	mov	r3, r6
 80014ea:	461a      	mov	r2, r3
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	fb02 f501 	mul.w	r5, r2, r1
 80014f4:	fb00 f403 	mul.w	r4, r0, r3
 80014f8:	442c      	add	r4, r5
 80014fa:	fba0 0102 	umull	r0, r1, r0, r2
 80014fe:	1863      	adds	r3, r4, r1
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	014b      	lsls	r3, r1, #5
 800150c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001510:	0142      	lsls	r2, r0, #5
 8001512:	4662      	mov	r2, ip
 8001514:	607e      	str	r6, [r7, #4]
 8001516:	4633      	mov	r3, r6
 8001518:	fb03 f302 	mul.w	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	3307      	adds	r3, #7
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	ebad 0d03 	sub.w	sp, sp, r3
 8001528:	466b      	mov	r3, sp
 800152a:	3303      	adds	r3, #3
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t h[Nmodel][Nmodel+1];
 8001534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001538:	1c5e      	adds	r6, r3, #1
 800153a:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800153e:	1e73      	subs	r3, r6, #1
 8001540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001544:	4633      	mov	r3, r6
 8001546:	461a      	mov	r2, r3
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	0159      	lsls	r1, r3, #5
 8001556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800155a:	0150      	lsls	r0, r2, #5
 800155c:	4633      	mov	r3, r6
 800155e:	009a      	lsls	r2, r3, #2
 8001560:	60fa      	str	r2, [r7, #12]
 8001562:	4622      	mov	r2, r4
 8001564:	1e53      	subs	r3, r2, #1
 8001566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800156a:	4633      	mov	r3, r6
 800156c:	4618      	mov	r0, r3
 800156e:	f04f 0100 	mov.w	r1, #0
 8001572:	613c      	str	r4, [r7, #16]
 8001574:	4623      	mov	r3, r4
 8001576:	461a      	mov	r2, r3
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	fb02 f501 	mul.w	r5, r2, r1
 8001580:	fb00 f403 	mul.w	r4, r0, r3
 8001584:	442c      	add	r4, r5
 8001586:	fba0 0102 	umull	r0, r1, r0, r2
 800158a:	1863      	adds	r3, r4, r1
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	014b      	lsls	r3, r1, #5
 8001598:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800159c:	0142      	lsls	r2, r0, #5
 800159e:	4633      	mov	r3, r6
 80015a0:	4618      	mov	r0, r3
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	461a      	mov	r2, r3
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	fb02 f501 	mul.w	r5, r2, r1
 80015b2:	fb00 f403 	mul.w	r4, r0, r3
 80015b6:	442c      	add	r4, r5
 80015b8:	fba0 0102 	umull	r0, r1, r0, r2
 80015bc:	1863      	adds	r3, r4, r1
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	014b      	lsls	r3, r1, #5
 80015ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015ce:	0142      	lsls	r2, r0, #5
 80015d0:	4632      	mov	r2, r6
 80015d2:	693c      	ldr	r4, [r7, #16]
 80015d4:	4623      	mov	r3, r4
 80015d6:	fb03 f302 	mul.w	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	3307      	adds	r3, #7
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	ebad 0d03 	sub.w	sp, sp, r3
 80015e6:	466b      	mov	r3, sp
 80015e8:	3303      	adds	r3, #3
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(g, 0, sizeof(g));
 80015f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80015f4:	4662      	mov	r2, ip
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	fb03 f302 	mul.w	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	461a      	mov	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f006 f943 	bl	800788c <memset>
    memset(h, 0, sizeof(h));
 8001606:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001608:	4632      	mov	r2, r6
 800160a:	4623      	mov	r3, r4
 800160c:	fb03 f302 	mul.w	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	461a      	mov	r2, r3
 8001614:	2100      	movs	r1, #0
 8001616:	f006 f939 	bl	800788c <memset>


    int i;
    for (i = 0; i < Nmax; i++) { // 0 to 103
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001620:	e0a8      	b.n	8001774 <magnet+0x3b0>
 8001622:	bf00      	nop
 8001624:	0800923c 	.word	0x0800923c
 8001628:	0800924c 	.word	0x0800924c
 800162c:	08009250 	.word	0x08009250
 8001630:	0800925c 	.word	0x0800925c
 8001634:	08009270 	.word	0x08009270
 8001638:	08009280 	.word	0x08009280
 800163c:	18e33333 	.word	0x18e33333
        g[Ns[i]-1][Ms[i]] = (Gs[i] + MULT(GVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2; // 360 til 16.16
 8001640:	4adc      	ldr	r2, [pc, #880]	; (80019b4 <magnet+0x5f0>)
 8001642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001646:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800164a:	4adb      	ldr	r2, [pc, #876]	; (80019b8 <magnet+0x5f4>)
 800164c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	461c      	mov	r4, r3
 8001656:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	461a      	mov	r2, r3
 800165e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001662:	ea4f 4922 	mov.w	r9, r2, asr #16
 8001666:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800166a:	4ad4      	ldr	r2, [pc, #848]	; (80019bc <magnet+0x5f8>)
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	4640      	mov	r0, r8
 8001672:	4649      	mov	r1, r9
 8001674:	f7fe fe24 	bl	80002c0 <__aeabi_ldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	461a      	mov	r2, r3
 8001680:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001684:	fb02 f005 	mul.w	r0, r2, r5
 8001688:	fb04 f103 	mul.w	r1, r4, r3
 800168c:	4401      	add	r1, r0
 800168e:	fba4 2302 	umull	r2, r3, r4, r2
 8001692:	4419      	add	r1, r3
 8001694:	460b      	mov	r3, r1
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0c10      	lsrs	r0, r2, #16
 80016a0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80016a4:	1419      	asrs	r1, r3, #16
 80016a6:	4603      	mov	r3, r0
 80016a8:	4433      	add	r3, r6
 80016aa:	1c99      	adds	r1, r3, #2
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	089d      	lsrs	r5, r3, #2
 80016b0:	4ac3      	ldr	r2, [pc, #780]	; (80019c0 <magnet+0x5fc>)
 80016b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	1e5c      	subs	r4, r3, #1
 80016bc:	4ac1      	ldr	r2, [pc, #772]	; (80019c4 <magnet+0x600>)
 80016be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c6:	1089      	asrs	r1, r1, #2
 80016c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80016cc:	fb04 f305 	mul.w	r3, r4, r5
 80016d0:	4403      	add	r3, r0
 80016d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        h[Ns[i]-1][Ms[i]] = (Hs[i] + MULT(HVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2;
 80016d6:	4abc      	ldr	r2, [pc, #752]	; (80019c8 <magnet+0x604>)
 80016d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016dc:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80016e0:	4aba      	ldr	r2, [pc, #744]	; (80019cc <magnet+0x608>)
 80016e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	461c      	mov	r4, r3
 80016ec:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80016f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f2:	461a      	mov	r2, r3
 80016f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80016fc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001700:	4aae      	ldr	r2, [pc, #696]	; (80019bc <magnet+0x5f8>)
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	4650      	mov	r0, sl
 8001708:	4659      	mov	r1, fp
 800170a:	f7fe fdd9 	bl	80002c0 <__aeabi_ldivmod>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4613      	mov	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800171a:	fb02 f005 	mul.w	r0, r2, r5
 800171e:	fb04 f103 	mul.w	r1, r4, r3
 8001722:	4401      	add	r1, r0
 8001724:	fba4 2302 	umull	r2, r3, r4, r2
 8001728:	4419      	add	r1, r3
 800172a:	460b      	mov	r3, r1
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	0c10      	lsrs	r0, r2, #16
 8001736:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800173a:	1419      	asrs	r1, r3, #16
 800173c:	4603      	mov	r3, r0
 800173e:	4433      	add	r3, r6
 8001740:	1c99      	adds	r1, r3, #2
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	089d      	lsrs	r5, r3, #2
 8001746:	4a9e      	ldr	r2, [pc, #632]	; (80019c0 <magnet+0x5fc>)
 8001748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	1e5c      	subs	r4, r3, #1
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <magnet+0x600>)
 8001754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800175c:	1089      	asrs	r1, r1, #2
 800175e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001760:	fb04 f305 	mul.w	r3, r4, r5
 8001764:	4403      	add	r3, r0
 8001766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < Nmax; i++) { // 0 to 103
 800176a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001774:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001778:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800177c:	429a      	cmp	r2, r3
 800177e:	f6ff af5f 	blt.w	8001640 <magnet+0x27c>
    }

    int32_t Bt = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int32_t Br = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int32_t Bp = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    int32_t P11 = 1<<16;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    int32_t P10 = 1<<16;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int32_t dP11 = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t dP10 = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    int32_t K;

    int16_t m;
    int16_t n;

    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80017b6:	f000 bc99 	b.w	80020ec <magnet+0xd28>
        for (n = 1; n <= Nmodel; n++) {
 80017ba:	2301      	movs	r3, #1
 80017bc:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80017c0:	f000 bc86 	b.w	80020d0 <magnet+0xd0c>
            if ( m <= n ) {
 80017c4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80017c8:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f300 8478 	bgt.w	80020c2 <magnet+0xcfe>
                if (m == n) {
 80017d2:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80017d6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80017da:	429a      	cmp	r2, r3
 80017dc:	d175      	bne.n	80018ca <magnet+0x506>
                    P2 = MULT(sinrad(theta), P11);
 80017de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017e0:	f7ff fc6a 	bl	80010b8 <sinrad>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017f0:	461a      	mov	r2, r3
 80017f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017f6:	fb02 f501 	mul.w	r5, r2, r1
 80017fa:	fb00 f403 	mul.w	r4, r0, r3
 80017fe:	442c      	add	r4, r5
 8001800:	fba0 2302 	umull	r2, r3, r0, r2
 8001804:	18e1      	adds	r1, r4, r3
 8001806:	460b      	mov	r3, r1
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	f04f 0100 	mov.w	r1, #0
 8001810:	0c10      	lsrs	r0, r2, #16
 8001812:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001816:	1419      	asrs	r1, r3, #16
 8001818:	4603      	mov	r3, r0
 800181a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    dP2 = MULT(sinrad(theta), dP11) + MULT(cosrad(theta), P11);
 800181e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001820:	f7ff fc4a 	bl	80010b8 <sinrad>
 8001824:	4603      	mov	r3, r0
 8001826:	4618      	mov	r0, r3
 8001828:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800182c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001830:	461a      	mov	r2, r3
 8001832:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001836:	fb02 f501 	mul.w	r5, r2, r1
 800183a:	fb00 f403 	mul.w	r4, r0, r3
 800183e:	442c      	add	r4, r5
 8001840:	fba0 2302 	umull	r2, r3, r0, r2
 8001844:	18e1      	adds	r1, r4, r3
 8001846:	460b      	mov	r3, r1
 8001848:	f04f 0000 	mov.w	r0, #0
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	0c10      	lsrs	r0, r2, #16
 8001852:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001856:	1419      	asrs	r1, r3, #16
 8001858:	4606      	mov	r6, r0
 800185a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800185c:	f7ff fcb0 	bl	80011c0 <cosrad>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001868:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800186c:	4608      	mov	r0, r1
 800186e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001872:	fb00 f503 	mul.w	r5, r0, r3
 8001876:	fb02 f401 	mul.w	r4, r2, r1
 800187a:	442c      	add	r4, r5
 800187c:	fba2 2300 	umull	r2, r3, r2, r0
 8001880:	18e1      	adds	r1, r4, r3
 8001882:	460b      	mov	r3, r1
 8001884:	f04f 0000 	mov.w	r0, #0
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	0c10      	lsrs	r0, r2, #16
 800188e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001892:	1419      	asrs	r1, r3, #16
 8001894:	4603      	mov	r3, r0
 8001896:	4433      	add	r3, r6
 8001898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    P11 = P2;
 800189c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    P10 = P11;
 80018a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80018a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    P20 = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    dP11 = dP2;
 80018b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    dP10 = dP11;
 80018ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    dP20 = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018c8:	e1b1      	b.n	8001c2e <magnet+0x86a>
                } else {
                    if (n == 1) {
 80018ca:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d17e      	bne.n	80019d0 <magnet+0x60c>
                        P2 = MULT(cosrad(theta), P10);
 80018d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d4:	f7ff fc74 	bl	80011c0 <cosrad>
 80018d8:	4603      	mov	r3, r0
 80018da:	4618      	mov	r0, r3
 80018dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80018e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018e4:	461a      	mov	r2, r3
 80018e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018ea:	fb02 f501 	mul.w	r5, r2, r1
 80018ee:	fb00 f403 	mul.w	r4, r0, r3
 80018f2:	442c      	add	r4, r5
 80018f4:	fba0 2302 	umull	r2, r3, r0, r2
 80018f8:	18e1      	adds	r1, r4, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	0c10      	lsrs	r0, r2, #16
 8001906:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800190a:	1419      	asrs	r1, r3, #16
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10);
 8001912:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001914:	f7ff fc54 	bl	80011c0 <cosrad>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001924:	461a      	mov	r2, r3
 8001926:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800192a:	fb02 f501 	mul.w	r5, r2, r1
 800192e:	fb00 f403 	mul.w	r4, r0, r3
 8001932:	442c      	add	r4, r5
 8001934:	fba0 2302 	umull	r2, r3, r0, r2
 8001938:	18e1      	adds	r1, r4, r3
 800193a:	460b      	mov	r3, r1
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	0c10      	lsrs	r0, r2, #16
 8001946:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800194a:	1419      	asrs	r1, r3, #16
 800194c:	4606      	mov	r6, r0
 800194e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001950:	f7ff fbb2 	bl	80010b8 <sinrad>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800195c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001960:	4608      	mov	r0, r1
 8001962:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001966:	fb00 f503 	mul.w	r5, r0, r3
 800196a:	fb02 f401 	mul.w	r4, r2, r1
 800196e:	442c      	add	r4, r5
 8001970:	fba2 2300 	umull	r2, r3, r2, r0
 8001974:	18e1      	adds	r1, r4, r3
 8001976:	460b      	mov	r3, r1
 8001978:	f04f 0000 	mov.w	r0, #0
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	0c10      	lsrs	r0, r2, #16
 8001982:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001986:	1419      	asrs	r1, r3, #16
 8001988:	4603      	mov	r3, r0
 800198a:	1af3      	subs	r3, r6, r3
 800198c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800199c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 80019a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 80019a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80019b0:	e13d      	b.n	8001c2e <magnet+0x86a>
 80019b2:	bf00      	nop
 80019b4:	20000340 	.word	0x20000340
 80019b8:	200004e0 	.word	0x200004e0
 80019bc:	016d0000 	.word	0x016d0000
 80019c0:	20000000 	.word	0x20000000
 80019c4:	200001a0 	.word	0x200001a0
 80019c8:	20000680 	.word	0x20000680
 80019cc:	20000820 	.word	0x20000820
                    } else {
                    	int32_t nm1 = convert(n-1);           // 16.16
 80019d0:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fe8a 	bl	80006f0 <convert>
 80019dc:	67b8      	str	r0, [r7, #120]	; 0x78
                    	int32_t mfix = convert(m);
 80019de:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fe84 	bl	80006f0 <convert>
 80019e8:	6778      	str	r0, [r7, #116]	; 0x74
                    	int32_t num  = FIX16_MULT(nm1,nm1) - FIX16_MULT(mfix,mfix);
 80019ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ec:	4618      	mov	r0, r3
 80019ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80019f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019f4:	461a      	mov	r2, r3
 80019f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019fa:	fb02 f501 	mul.w	r5, r2, r1
 80019fe:	fb00 f403 	mul.w	r4, r0, r3
 8001a02:	442c      	add	r4, r5
 8001a04:	fba0 2302 	umull	r2, r3, r0, r2
 8001a08:	18e1      	adds	r1, r4, r3
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	f04f 0000 	mov.w	r0, #0
 8001a10:	f04f 0100 	mov.w	r1, #0
 8001a14:	0c10      	lsrs	r0, r2, #16
 8001a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a1a:	1419      	asrs	r1, r3, #16
 8001a1c:	4606      	mov	r6, r0
 8001a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a20:	461a      	mov	r2, r3
 8001a22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a26:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a28:	4608      	mov	r0, r1
 8001a2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001a2e:	fb00 f503 	mul.w	r5, r0, r3
 8001a32:	fb02 f401 	mul.w	r4, r2, r1
 8001a36:	442c      	add	r4, r5
 8001a38:	fba2 2300 	umull	r2, r3, r2, r0
 8001a3c:	18e1      	adds	r1, r4, r3
 8001a3e:	460b      	mov	r3, r1
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	0c10      	lsrs	r0, r2, #16
 8001a4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a4e:	1419      	asrs	r1, r3, #16
 8001a50:	4603      	mov	r3, r0
 8001a52:	1af3      	subs	r3, r6, r3
 8001a54:	673b      	str	r3, [r7, #112]	; 0x70
                    	int32_t den  = FIX16_MULT(convert(2*n)-convert(1),
 8001a56:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fe47 	bl	80006f0 <convert>
 8001a62:	4604      	mov	r4, r0
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7fe fe43 	bl	80006f0 <convert>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	1ae3      	subs	r3, r4, r3
 8001a6e:	461c      	mov	r4, r3
 8001a70:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001a74:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fe38 	bl	80006f0 <convert>
 8001a80:	4606      	mov	r6, r0
 8001a82:	2003      	movs	r0, #3
 8001a84:	f7fe fe34 	bl	80006f0 <convert>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	1af3      	subs	r3, r6, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a92:	fb02 f005 	mul.w	r0, r2, r5
 8001a96:	fb04 f103 	mul.w	r1, r4, r3
 8001a9a:	4401      	add	r1, r0
 8001a9c:	fba4 2302 	umull	r2, r3, r4, r2
 8001aa0:	4419      	add	r1, r3
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0c10      	lsrs	r0, r2, #16
 8001aae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ab2:	1419      	asrs	r1, r3, #16
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
                    	                          convert(2*n)-convert(3));
                    	K = FIX16_DIV(num, den);
 8001ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aba:	461a      	mov	r2, r3
 8001abc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ac0:	1411      	asrs	r1, r2, #16
 8001ac2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001ac4:	0413      	lsls	r3, r2, #16
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aca:	461a      	mov	r2, r3
 8001acc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ad0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ad4:	f7fe fbf4 	bl	80002c0 <__aeabi_ldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	66bb      	str	r3, [r7, #104]	; 0x68
                    	P2 = MULT(cosrad(theta), P10) - MULT(K, P20);
 8001ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ae2:	f7ff fb6d 	bl	80011c0 <cosrad>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001af2:	461a      	mov	r2, r3
 8001af4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001af8:	fb02 f501 	mul.w	r5, r2, r1
 8001afc:	fb00 f403 	mul.w	r4, r0, r3
 8001b00:	442c      	add	r4, r5
 8001b02:	fba0 2302 	umull	r2, r3, r0, r2
 8001b06:	18e1      	adds	r1, r4, r3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	0c10      	lsrs	r0, r2, #16
 8001b14:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b18:	1419      	asrs	r1, r3, #16
 8001b1a:	4606      	mov	r6, r0
 8001b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1e:	461a      	mov	r2, r3
 8001b20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001b28:	4608      	mov	r0, r1
 8001b2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b2e:	fb00 f503 	mul.w	r5, r0, r3
 8001b32:	fb02 f401 	mul.w	r4, r2, r1
 8001b36:	442c      	add	r4, r5
 8001b38:	fba2 2300 	umull	r2, r3, r2, r0
 8001b3c:	18e1      	adds	r1, r4, r3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	0c10      	lsrs	r0, r2, #16
 8001b4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b4e:	1419      	asrs	r1, r3, #16
 8001b50:	4603      	mov	r3, r0
 8001b52:	1af3      	subs	r3, r6, r3
 8001b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10) - MULT(K, dP20);
 8001b58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b5a:	f7ff fb31 	bl	80011c0 <cosrad>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b70:	fb02 f501 	mul.w	r5, r2, r1
 8001b74:	fb00 f403 	mul.w	r4, r0, r3
 8001b78:	442c      	add	r4, r5
 8001b7a:	fba0 2302 	umull	r2, r3, r0, r2
 8001b7e:	18e1      	adds	r1, r4, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	0c10      	lsrs	r0, r2, #16
 8001b8c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b90:	1419      	asrs	r1, r3, #16
 8001b92:	4606      	mov	r6, r0
 8001b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b96:	f7ff fa8f 	bl	80010b8 <sinrad>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ba2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001ba6:	4608      	mov	r0, r1
 8001ba8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001bac:	fb00 f503 	mul.w	r5, r0, r3
 8001bb0:	fb02 f401 	mul.w	r4, r2, r1
 8001bb4:	442c      	add	r4, r5
 8001bb6:	fba2 2300 	umull	r2, r3, r2, r0
 8001bba:	18e1      	adds	r1, r4, r3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	0c10      	lsrs	r0, r2, #16
 8001bc8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001bcc:	1419      	asrs	r1, r3, #16
 8001bce:	4603      	mov	r3, r0
 8001bd0:	1af6      	subs	r6, r6, r3
 8001bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001bda:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001bde:	4608      	mov	r0, r1
 8001be0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001be4:	fb00 f503 	mul.w	r5, r0, r3
 8001be8:	fb02 f401 	mul.w	r4, r2, r1
 8001bec:	442c      	add	r4, r5
 8001bee:	fba2 2300 	umull	r2, r3, r2, r0
 8001bf2:	18e1      	adds	r1, r4, r3
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	f04f 0000 	mov.w	r0, #0
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	0c10      	lsrs	r0, r2, #16
 8001c00:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c04:	1419      	asrs	r1, r3, #16
 8001c06:	4603      	mov	r3, r0
 8001c08:	1af3      	subs	r3, r6, r3
 8001c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001c16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    }
                }
                // Precompute repeated terms
                int32_t ar_pow = POW(DIV(a, r), (n + 2)<<16);
 8001c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c32:	461a      	mov	r2, r3
 8001c34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c38:	1411      	asrs	r1, r2, #16
 8001c3a:	6279      	str	r1, [r7, #36]	; 0x24
 8001c3c:	0413      	lsls	r3, r2, #16
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c42:	461a      	mov	r2, r3
 8001c44:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c4c:	f7fe fb38 	bl	80002c0 <__aeabi_ldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4613      	mov	r3, r2
 8001c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c62:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001c66:	3302      	adds	r3, #2
 8001c68:	041b      	lsls	r3, r3, #16
 8001c6a:	141b      	asrs	r3, r3, #16
 8001c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	da5c      	bge.n	8001d32 <magnet+0x96e>
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c86:	461a      	mov	r2, r3
 8001c88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	f04f 0101 	mov.w	r1, #1
 8001c94:	f7fe fb14 	bl	80002c0 <__aeabi_ldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ca2:	e046      	b.n	8001d32 <magnet+0x96e>
 8001ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01d      	beq.n	8001cec <magnet+0x928>
 8001cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cc4:	fb02 f501 	mul.w	r5, r2, r1
 8001cc8:	fb00 f403 	mul.w	r4, r0, r3
 8001ccc:	442c      	add	r4, r5
 8001cce:	fba0 2302 	umull	r2, r3, r0, r2
 8001cd2:	18e1      	adds	r1, r4, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0c10      	lsrs	r0, r2, #16
 8001ce0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ce4:	1419      	asrs	r1, r3, #16
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d00:	fb02 f501 	mul.w	r5, r2, r1
 8001d04:	fb00 f403 	mul.w	r4, r0, r3
 8001d08:	442c      	add	r4, r5
 8001d0a:	fba0 2302 	umull	r2, r3, r0, r2
 8001d0e:	18e1      	adds	r1, r4, r3
 8001d10:	460b      	mov	r3, r1
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0c10      	lsrs	r0, r2, #16
 8001d1c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d20:	1419      	asrs	r1, r3, #16
 8001d22:	4603      	mov	r3, r0
 8001d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d2c:	105b      	asrs	r3, r3, #1
 8001d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1b4      	bne.n	8001ca4 <magnet+0x8e0>
 8001d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d3e:	667b      	str	r3, [r7, #100]	; 0x64
                int32_t mphi = MULT(m<<16, phi);
 8001d40:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	4618      	mov	r0, r3
 8001d48:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	461a      	mov	r2, r3
 8001d50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d54:	fb02 f501 	mul.w	r5, r2, r1
 8001d58:	fb00 f403 	mul.w	r4, r0, r3
 8001d5c:	442c      	add	r4, r5
 8001d5e:	fba0 2302 	umull	r2, r3, r0, r2
 8001d62:	18e1      	adds	r1, r4, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	0c10      	lsrs	r0, r2, #16
 8001d70:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d74:	1419      	asrs	r1, r3, #16
 8001d76:	4603      	mov	r3, r0
 8001d78:	663b      	str	r3, [r7, #96]	; 0x60
                int32_t cos_mphi = cosrad(mphi);
 8001d7a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d7c:	f7ff fa20 	bl	80011c0 <cosrad>
 8001d80:	65f8      	str	r0, [r7, #92]	; 0x5c
                int32_t sin_mphi = sinrad(mphi);
 8001d82:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d84:	f7ff f998 	bl	80010b8 <sinrad>
 8001d88:	65b8      	str	r0, [r7, #88]	; 0x58

                int32_t gnm = g[n - 1][m];
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0899      	lsrs	r1, r3, #2
 8001d8e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9c:	fb00 f101 	mul.w	r1, r0, r1
 8001da0:	440a      	add	r2, r1
 8001da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da6:	657b      	str	r3, [r7, #84]	; 0x54
                int32_t hnm = h[n - 1][m];
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0899      	lsrs	r1, r3, #2
 8001dac:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001db8:	fb00 f101 	mul.w	r1, r0, r1
 8001dbc:	440a      	add	r2, r1
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	653b      	str	r3, [r7, #80]	; 0x50

                int32_t gcos = MULT(gnm, cos_mphi);
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dce:	461a      	mov	r2, r3
 8001dd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001dd4:	fb02 f501 	mul.w	r5, r2, r1
 8001dd8:	fb00 f403 	mul.w	r4, r0, r3
 8001ddc:	442c      	add	r4, r5
 8001dde:	fba0 2302 	umull	r2, r3, r0, r2
 8001de2:	18e1      	adds	r1, r4, r3
 8001de4:	460b      	mov	r3, r1
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	0c10      	lsrs	r0, r2, #16
 8001df0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001df4:	1419      	asrs	r1, r3, #16
 8001df6:	4603      	mov	r3, r0
 8001df8:	64fb      	str	r3, [r7, #76]	; 0x4c
                int32_t hsin = MULT(hnm, sin_mphi);
 8001dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e04:	461a      	mov	r2, r3
 8001e06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e0a:	fb02 f501 	mul.w	r5, r2, r1
 8001e0e:	fb00 f403 	mul.w	r4, r0, r3
 8001e12:	442c      	add	r4, r5
 8001e14:	fba0 2302 	umull	r2, r3, r0, r2
 8001e18:	18e1      	adds	r1, r4, r3
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	0c10      	lsrs	r0, r2, #16
 8001e26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e2a:	1419      	asrs	r1, r3, #16
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
                int32_t gsin = MULT(gnm, sin_mphi);
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	4618      	mov	r0, r3
 8001e34:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e40:	fb02 f501 	mul.w	r5, r2, r1
 8001e44:	fb00 f403 	mul.w	r4, r0, r3
 8001e48:	442c      	add	r4, r5
 8001e4a:	fba0 2302 	umull	r2, r3, r0, r2
 8001e4e:	18e1      	adds	r1, r4, r3
 8001e50:	460b      	mov	r3, r1
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	0c10      	lsrs	r0, r2, #16
 8001e5c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e60:	1419      	asrs	r1, r3, #16
 8001e62:	4603      	mov	r3, r0
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
                int32_t hcos = MULT(hnm, cos_mphi);
 8001e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e68:	4618      	mov	r0, r3
 8001e6a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e70:	461a      	mov	r2, r3
 8001e72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e76:	fb02 f501 	mul.w	r5, r2, r1
 8001e7a:	fb00 f403 	mul.w	r4, r0, r3
 8001e7e:	442c      	add	r4, r5
 8001e80:	fba0 2302 	umull	r2, r3, r0, r2
 8001e84:	18e1      	adds	r1, r4, r3
 8001e86:	460b      	mov	r3, r1
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0c10      	lsrs	r0, r2, #16
 8001e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e96:	1419      	asrs	r1, r3, #16
 8001e98:	4603      	mov	r3, r0
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40

                // Magnetic field component updates
                Br = Br + MULT(MULT(ar_pow, (n + 1)<<16), MULT((gcos + hsin), P2));
 8001e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ea4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	461a      	mov	r2, r3
 8001eae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001eb2:	fb02 f501 	mul.w	r5, r2, r1
 8001eb6:	fb00 f403 	mul.w	r4, r0, r3
 8001eba:	442c      	add	r4, r5
 8001ebc:	fba0 2302 	umull	r2, r3, r0, r2
 8001ec0:	18e1      	adds	r1, r4, r3
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	0c10      	lsrs	r0, r2, #16
 8001ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ed2:	1419      	asrs	r1, r3, #16
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8001edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eec:	461a      	mov	r2, r3
 8001eee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ef2:	fb02 f501 	mul.w	r5, r2, r1
 8001ef6:	fb00 f403 	mul.w	r4, r0, r3
 8001efa:	442c      	add	r4, r5
 8001efc:	fba0 0102 	umull	r0, r1, r0, r2
 8001f00:	1863      	adds	r3, r4, r1
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	0c02      	lsrs	r2, r0, #16
 8001f0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f12:	140b      	asrs	r3, r1, #16
 8001f14:	4613      	mov	r3, r2
 8001f16:	461a      	mov	r2, r3
 8001f18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f1c:	fb02 f009 	mul.w	r0, r2, r9
 8001f20:	fb08 f103 	mul.w	r1, r8, r3
 8001f24:	4401      	add	r1, r0
 8001f26:	fba8 2302 	umull	r2, r3, r8, r2
 8001f2a:	4419      	add	r1, r3
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	0c10      	lsrs	r0, r2, #16
 8001f38:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f3c:	1419      	asrs	r1, r3, #16
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f44:	4413      	add	r3, r2
 8001f46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                Bt = Bt + MULT(MULT(ar_pow, 1<<16), MULT((gcos + hsin), dP2));
 8001f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	040b      	lsls	r3, r1, #16
 8001f5c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001f60:	0402      	lsls	r2, r0, #16
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	0c10      	lsrs	r0, r2, #16
 8001f6c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f70:	1419      	asrs	r1, r3, #16
 8001f72:	4603      	mov	r3, r0
 8001f74:	4698      	mov	r8, r3
 8001f76:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8001f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7e:	4413      	add	r3, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f90:	fb02 f501 	mul.w	r5, r2, r1
 8001f94:	fb00 f403 	mul.w	r4, r0, r3
 8001f98:	442c      	add	r4, r5
 8001f9a:	fba0 0102 	umull	r0, r1, r0, r2
 8001f9e:	1863      	adds	r3, r4, r1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	0c02      	lsrs	r2, r0, #16
 8001fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fb0:	140b      	asrs	r3, r1, #16
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fba:	fb02 f009 	mul.w	r0, r2, r9
 8001fbe:	fb08 f103 	mul.w	r1, r8, r3
 8001fc2:	4401      	add	r1, r0
 8001fc4:	fba8 2302 	umull	r2, r3, r8, r2
 8001fc8:	4419      	add	r1, r3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	0c10      	lsrs	r0, r2, #16
 8001fd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fda:	1419      	asrs	r1, r3, #16
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                Bp = Bp + MULT(MULT(ar_pow, 1<<16), MULT(MULT(convert(m), (-gsin + hcos)), P2));
 8001fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fea:	4618      	mov	r0, r3
 8001fec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	040b      	lsls	r3, r1, #16
 8001ffa:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001ffe:	0402      	lsls	r2, r0, #16
 8002000:	f04f 0000 	mov.w	r0, #0
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	0c10      	lsrs	r0, r2, #16
 800200a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800200e:	1419      	asrs	r1, r3, #16
 8002010:	4603      	mov	r3, r0
 8002012:	4698      	mov	r8, r3
 8002014:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002018:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fb67 	bl	80006f0 <convert>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800202a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	461a      	mov	r2, r3
 8002032:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002036:	fb02 f501 	mul.w	r5, r2, r1
 800203a:	fb00 f403 	mul.w	r4, r0, r3
 800203e:	442c      	add	r4, r5
 8002040:	fba0 0102 	umull	r0, r1, r0, r2
 8002044:	1863      	adds	r3, r4, r1
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	0c02      	lsrs	r2, r0, #16
 8002052:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002056:	140b      	asrs	r3, r1, #16
 8002058:	4613      	mov	r3, r2
 800205a:	4618      	mov	r0, r3
 800205c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002064:	461a      	mov	r2, r3
 8002066:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800206a:	fb02 f501 	mul.w	r5, r2, r1
 800206e:	fb00 f403 	mul.w	r4, r0, r3
 8002072:	442c      	add	r4, r5
 8002074:	fba0 0102 	umull	r0, r1, r0, r2
 8002078:	1863      	adds	r3, r4, r1
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	0c02      	lsrs	r2, r0, #16
 8002086:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800208a:	140b      	asrs	r3, r1, #16
 800208c:	4613      	mov	r3, r2
 800208e:	461a      	mov	r2, r3
 8002090:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002094:	fb02 f009 	mul.w	r0, r2, r9
 8002098:	fb08 f103 	mul.w	r1, r8, r3
 800209c:	4401      	add	r1, r0
 800209e:	fba8 2302 	umull	r2, r3, r8, r2
 80020a2:	4419      	add	r1, r3
 80020a4:	460b      	mov	r3, r1
 80020a6:	f04f 0000 	mov.w	r0, #0
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	0c10      	lsrs	r0, r2, #16
 80020b0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020b4:	1419      	asrs	r1, r3, #16
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020bc:	4413      	add	r3, r2
 80020be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        for (n = 1; n <= Nmodel; n++) {
 80020c2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80020d0:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80020d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020d8:	429a      	cmp	r2, r3
 80020da:	f6bf ab73 	bge.w	80017c4 <magnet+0x400>
    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 80020de:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80020ec:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80020f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f6bf ab60 	bge.w	80017ba <magnet+0x3f6>
            }
        }
    }
    Bt = -Bt;
 80020fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020fe:	425b      	negs	r3, r3
 8002100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    Bp = -DIV(Bp, sinrad(theta));
 8002104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002108:	461a      	mov	r2, r3
 800210a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800210e:	1411      	asrs	r1, r2, #16
 8002110:	61f9      	str	r1, [r7, #28]
 8002112:	0413      	lsls	r3, r2, #16
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002118:	f7fe ffce 	bl	80010b8 <sinrad>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002124:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002128:	f7fe f8ca 	bl	80002c0 <__aeabi_ldivmod>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4613      	mov	r3, r2
 8002132:	425b      	negs	r3, r3
 8002134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    buffer[0] = Bt;
 8002138:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800213c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002140:	601a      	str	r2, [r3, #0]
    buffer[1] = Bp;
 8002142:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002146:	3304      	adds	r3, #4
 8002148:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800214c:	601a      	str	r2, [r3, #0]
    buffer[2] = Br;
 800214e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002152:	3308      	adds	r3, #8
 8002154:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 800215e:	bf00      	nop
 8002160:	37e4      	adds	r7, #228	; 0xe4
 8002162:	46bd      	mov	sp, r7
 8002164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002168 <main>:




int main(void)
{
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	b0db      	sub	sp, #364	; 0x16c
 800216c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216e:	f001 fe70 	bl	8003e52 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002172:	f000 f9f9 	bl	8002568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002176:	f000 fb0f 	bl	8002798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800217a:	f000 fac1 	bl	8002700 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800217e:	f000 fa73 	bl	8002668 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002182:	f000 fa31 	bl	80025e8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 8002186:	4821      	ldr	r0, [pc, #132]	; (800220c <main+0xa4>)
 8002188:	f7fe fc1a 	bl	80009c0 <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 800218c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  HAL_Delay(5);
 800219a:	2005      	movs	r0, #5
 800219c:	f001 feca 	bl	8003f34 <HAL_Delay>
  //HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
  LCD_Init();
 80021a0:	f7fe fbb1 	bl	8000906 <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 80021a4:	4819      	ldr	r0, [pc, #100]	; (800220c <main+0xa4>)
 80021a6:	f7fe fabd 	bl	8000724 <I2C_Scan>

int32_t r = REarth16km + Rational(2,10); // Earth's radius in fixed point 16.16 format
 80021aa:	210a      	movs	r1, #10
 80021ac:	2002      	movs	r0, #2
 80021ae:	f7fe fa53 	bl	8000658 <Rational>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <main+0xa8>)
 80021b6:	4413      	add	r3, r2
 80021b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
printf("r : ");
 80021bc:	4815      	ldr	r0, [pc, #84]	; (8002214 <main+0xac>)
 80021be:	f005 fb6d 	bl	800789c <iprintf>
printFix(r);
 80021c2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80021c6:	f7fe fa67 	bl	8000698 <printFix>
printf("\r\n");
 80021ca:	4813      	ldr	r0, [pc, #76]	; (8002218 <main+0xb0>)
 80021cc:	f005 fc02 	bl	80079d4 <puts>
int32_t phi = convert(56);
 80021d0:	2038      	movs	r0, #56	; 0x38
 80021d2:	f7fe fa8d 	bl	80006f0 <convert>
 80021d6:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
int32_t theta = convert(12);
 80021da:	200c      	movs	r0, #12
 80021dc:	f7fe fa88 	bl	80006f0 <convert>
 80021e0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
int32_t days = 24510000;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <main+0xb4>)
 80021e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
int32_t vector[3];
magnet(r, theta, phi, days, vector);
 80021ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80021f4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80021f8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80021fc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002200:	f7ff f8e0 	bl	80013c4 <magnet>
int i;
for (i=0; i<3; i++) {
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800220a:	e021      	b.n	8002250 <main+0xe8>
 800220c:	20000af4 	.word	0x20000af4
 8002210:	18e33333 	.word	0x18e33333
 8002214:	08009290 	.word	0x08009290
 8002218:	08009298 	.word	0x08009298
 800221c:	0175fe30 	.word	0x0175fe30
	printf("Res %i: ", i);
 8002220:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002224:	48c1      	ldr	r0, [pc, #772]	; (800252c <main+0x3c4>)
 8002226:	f005 fb39 	bl	800789c <iprintf>
	printFix(vector[i]);
 800222a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002234:	4413      	add	r3, r2
 8002236:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fa2c 	bl	8000698 <printFix>
	printf("\r\n");
 8002240:	48bb      	ldr	r0, [pc, #748]	; (8002530 <main+0x3c8>)
 8002242:	f005 fbc7 	bl	80079d4 <puts>
for (i=0; i<3; i++) {
 8002246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800224a:	3301      	adds	r3, #1
 800224c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002254:	2b02      	cmp	r3, #2
 8002256:	dde3      	ble.n	8002220 <main+0xb8>
	    			-(convert(3)>>5),    // East
					-(convert(166)>>5)}; //down
*/

//rigtig igrf fra NOAA, gør at lortet virker, 1/4 nT er enheden
Vector3D M2 = {     (17056<<14),  // North
 8002258:	4ab6      	ldr	r2, [pc, #728]	; (8002534 <main+0x3cc>)
 800225a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800225e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					-(1464<<14),    // East
  					-(47628<<14)}; //down

M2 = rotateZ14(&M2, convert(90));
 8002264:	205a      	movs	r0, #90	; 0x5a
 8002266:	f7fe fa43 	bl	80006f0 <convert>
 800226a:	4602      	mov	r2, r0
 800226c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002270:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fd0b 	bl	8003c90 <rotateZ14>
 800227a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800227e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002282:	ca07      	ldmia	r2, {r0, r1, r2}
 8002284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
/*
Vector3D M2 = {     (vector[0]>>8),  // North
					(vector[1]>>8),    // East
  					-(vector[2]>>8)}; //down
*/
Vector3D g2 = { 0, 0, 17000};
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002294:	f244 2368 	movw	r3, #17000	; 0x4268
 8002298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4



	LCD_SetCursor(0, 0);
 800229c:	2100      	movs	r1, #0
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fb15 	bl	80008ce <LCD_SetCursor>
    LCD_SendString("Roll");
 80022a4:	48a4      	ldr	r0, [pc, #656]	; (8002538 <main+0x3d0>)
 80022a6:	f7fe fafd 	bl	80008a4 <LCD_SendString>
    LCD_SetCursor(0, 6);
 80022aa:	2106      	movs	r1, #6
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fb0e 	bl	80008ce <LCD_SetCursor>
    LCD_SendString("Pitch");
 80022b2:	48a2      	ldr	r0, [pc, #648]	; (800253c <main+0x3d4>)
 80022b4:	f7fe faf6 	bl	80008a4 <LCD_SendString>
    LCD_SetCursor(0, 12);
 80022b8:	210c      	movs	r1, #12
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7fe fb07 	bl	80008ce <LCD_SetCursor>
    LCD_SendString("Yaw");
 80022c0:	489f      	ldr	r0, [pc, #636]	; (8002540 <main+0x3d8>)
 80022c2:	f7fe faef 	bl	80008a4 <LCD_SendString>

i = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
//Vector3D magdata;
//Vector3D accdata;
Vector3D degrot;
Matrix3x3 rot;
Vector3D accdata = {0, 0, convert(1)}; // gravity straight down
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe fa09 	bl	80006f0 <convert>
 80022de:	4603      	mov	r3, r0
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
Vector3D magdata = {convert(1), 0, 0};  // magnetic north along X
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7fe fa03 	bl	80006f0 <convert>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
Matrix3x3 Rnb;
Vector3D mag_raw;
Vector3D acc_avg = {0, 0, convert(1)};
 80022fc:	2300      	movs	r3, #0
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002300:	2300      	movs	r3, #0
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002304:	2001      	movs	r0, #1
 8002306:	f7fe f9f3 	bl	80006f0 <convert>
 800230a:	4603      	mov	r3, r0
 800230c:	653b      	str	r3, [r7, #80]	; 0x50
Vector3D mag_avg = {convert(1), 0, 0};
 800230e:	2001      	movs	r0, #1
 8002310:	f7fe f9ee 	bl	80006f0 <convert>
 8002314:	4603      	mov	r3, r0
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002318:	2300      	movs	r3, #0
 800231a:	643b      	str	r3, [r7, #64]	; 0x40
 800231c:	2300      	movs	r3, #0
 800231e:	647b      	str	r3, [r7, #68]	; 0x44

  while (1)
  {
	  accdata = lsmAccRead(&hi2c3);
 8002320:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002324:	4987      	ldr	r1, [pc, #540]	; (8002544 <main+0x3dc>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fba1 	bl	8000a6e <lsmAccRead>

	  //printf("\n acc: %ld, %ld, %ld \n",accdata.x,accdata.y, accdata.z);
	  //printf("mag: %ld, %ld, %ld \n",magdata.x,magdata.y, magdata.z);


	  readSensorsAndAverage(&acc_avg, &mag_avg, hi2c3);
 800232c:	4c85      	ldr	r4, [pc, #532]	; (8002544 <main+0x3dc>)
 800232e:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8002332:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8002336:	4668      	mov	r0, sp
 8002338:	f104 0308 	add.w	r3, r4, #8
 800233c:	224c      	movs	r2, #76	; 0x4c
 800233e:	4619      	mov	r1, r3
 8002340:	f005 fa96 	bl	8007870 <memcpy>
 8002344:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002348:	4631      	mov	r1, r6
 800234a:	4628      	mov	r0, r5
 800234c:	f7fe fc1c 	bl	8000b88 <readSensorsAndAverage>
	  triad(mag_avg,acc_avg,M2,g2, &rot);
 8002350:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002354:	9308      	str	r3, [sp, #32]
 8002356:	ac05      	add	r4, sp, #20
 8002358:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800235c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002364:	ac02      	add	r4, sp, #8
 8002366:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800236a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800236e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002372:	466a      	mov	r2, sp
 8002374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002378:	e893 0003 	ldmia.w	r3, {r0, r1}
 800237c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002382:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002386:	ca07      	ldmia	r2, {r0, r1, r2}
 8002388:	f000 fc80 	bl	8002c8c <triad>
	  Rnb = transpose(rot);
 800238c:	463e      	mov	r6, r7
 800238e:	466d      	mov	r5, sp
 8002390:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239c:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a6:	4630      	mov	r0, r6
 80023a8:	f001 fa06 	bl	80037b8 <transpose>
 80023ac:	463b      	mov	r3, r7
 80023ae:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80023b2:	461d      	mov	r5, r3
 80023b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	6023      	str	r3, [r4, #0]
	  rot2eulerZYX(&Rnb,&degrot);
 80023c0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80023c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 ff66 	bl	800329c <rot2eulerZYX>
	  //printf("%ld,%ld,%ld\n", acc_avg.x, acc_avg.y, acc_avg.z);

	  //HAL_Delay(5);

	  //////////////////////////////////LCD deg print//////////////////
	  LCD_SetCursor(1, 0);
 80023d0:	2100      	movs	r1, #0
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7fe fa7b 	bl	80008ce <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.x));
 80023d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f993 	bl	8000708 <inconvert>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fad7 	bl	8000998 <LCD_PrintAngle>
	  HAL_Delay(5); //vigtigt der skal være delay ellers virker det ikke at rykke cursor
 80023ea:	2005      	movs	r0, #5
 80023ec:	f001 fda2 	bl	8003f34 <HAL_Delay>

	  LCD_SetCursor(1, 6);
 80023f0:	2106      	movs	r1, #6
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7fe fa6b 	bl	80008ce <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.y));
 80023f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f983 	bl	8000708 <inconvert>
 8002402:	4603      	mov	r3, r0
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fac7 	bl	8000998 <LCD_PrintAngle>
	  HAL_Delay(5);
 800240a:	2005      	movs	r0, #5
 800240c:	f001 fd92 	bl	8003f34 <HAL_Delay>

	  LCD_SetCursor(1, 12);
 8002410:	210c      	movs	r1, #12
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fa5b 	bl	80008ce <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.z));
 8002418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f973 	bl	8000708 <inconvert>
 8002422:	4603      	mov	r3, r0
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fab7 	bl	8000998 <LCD_PrintAngle>
	  HAL_Delay(5);
 800242a:	2005      	movs	r0, #5
 800242c:	f001 fd82 	bl	8003f34 <HAL_Delay>
	  //////////////////////////////////LCD deg print end//////////////
	  static int32_t max_x = INT32_MIN, max_y = INT32_MIN, max_z = INT32_MIN;
	  static int32_t min_x = INT32_MAX, min_y = INT32_MAX, min_z = INT32_MAX;

	  /* bit1 = new-max, bit0 = new-min  -> 00 / 01 / 10 / 11 */
	  uint8_t fx = 0, fy = 0, fz = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111

	  if (mag_avg.x > max_x) { max_x = mag_avg.x; fx |= 0b10; }
 8002442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002444:	4b40      	ldr	r3, [pc, #256]	; (8002548 <main+0x3e0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	dd08      	ble.n	800245e <main+0x2f6>
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	4a3e      	ldr	r2, [pc, #248]	; (8002548 <main+0x3e0>)
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (mag_avg.x < min_x) { min_x = mag_avg.x; fx |= 0b01; }
 800245e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <main+0x3e4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	da08      	bge.n	800247a <main+0x312>
 8002468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246a:	4a38      	ldr	r2, [pc, #224]	; (800254c <main+0x3e4>)
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	  if (mag_avg.y > max_y) { max_y = mag_avg.y; fy |= 0b10; }
 800247a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <main+0x3e8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	dd08      	ble.n	8002496 <main+0x32e>
 8002484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002486:	4a32      	ldr	r2, [pc, #200]	; (8002550 <main+0x3e8>)
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
	  if (mag_avg.y < min_y) { min_y = mag_avg.y; fy |= 0b01; }
 8002496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <main+0x3ec>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	da08      	bge.n	80024b2 <main+0x34a>
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <main+0x3ec>)
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

	  if (mag_avg.z > max_z) { max_z = mag_avg.z; fz |= 0b10; }
 80024b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <main+0x3f0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dd08      	ble.n	80024ce <main+0x366>
 80024bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024be:	4a26      	ldr	r2, [pc, #152]	; (8002558 <main+0x3f0>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
	  if (mag_avg.z < min_z) { min_z = mag_avg.z; fz |= 0b01; }
 80024ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <main+0x3f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	da08      	bge.n	80024ea <main+0x382>
 80024d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024da:	4a20      	ldr	r2, [pc, #128]	; (800255c <main+0x3f4>)
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
	  /* printable strings for each 2-bit flag value */
	  static const char* const flag_txt[4] = {"00","01","10","11"};

	  /* -------------- CSV log line ----------------------------------------- */
	  printf("%ld,%ld,%ld,%s,%s,%s\r\n",
	         (long)mag_avg.x, (long)mag_avg.y, (long)mag_avg.z,
 80024ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024ec:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80024ee:	6c7d      	ldr	r5, [r7, #68]	; 0x44
	  printf("%ld,%ld,%ld,%s,%s,%s\r\n",
 80024f0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80024f4:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <main+0x3f8>)
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 80024fe:	4918      	ldr	r1, [pc, #96]	; (8002560 <main+0x3f8>)
 8002500:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002504:	f897 1111 	ldrb.w	r1, [r7, #273]	; 0x111
 8002508:	4e15      	ldr	r6, [pc, #84]	; (8002560 <main+0x3f8>)
 800250a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800250e:	9102      	str	r1, [sp, #8]
 8002510:	9201      	str	r2, [sp, #4]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	462b      	mov	r3, r5
 8002516:	4622      	mov	r2, r4
 8002518:	4601      	mov	r1, r0
 800251a:	4812      	ldr	r0, [pc, #72]	; (8002564 <main+0x3fc>)
 800251c:	f005 f9be 	bl	800789c <iprintf>
	         flag_txt[fx], flag_txt[fy], flag_txt[fz]);

	  //process_uart_data(&uart_rx_buf, &GPS);
	  //HAL_Delay(5);
	  i++;
 8002520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002524:	3301      	adds	r3, #1
 8002526:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  {
 800252a:	e6f9      	b.n	8002320 <main+0x1b8>
 800252c:	0800929c 	.word	0x0800929c
 8002530:	08009298 	.word	0x08009298
 8002534:	080092d4 	.word	0x080092d4
 8002538:	080092a8 	.word	0x080092a8
 800253c:	080092b0 	.word	0x080092b0
 8002540:	080092b8 	.word	0x080092b8
 8002544:	20000af4 	.word	0x20000af4
 8002548:	200009c0 	.word	0x200009c0
 800254c:	200009c4 	.word	0x200009c4
 8002550:	200009c8 	.word	0x200009c8
 8002554:	200009cc 	.word	0x200009cc
 8002558:	200009d0 	.word	0x200009d0
 800255c:	200009d4 	.word	0x200009d4
 8002560:	0800a2f0 	.word	0x0800a2f0
 8002564:	080092bc 	.word	0x080092bc

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	; 0x50
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0318 	add.w	r3, r7, #24
 8002572:	2238      	movs	r2, #56	; 0x38
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f005 f988 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800258a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800258e:	f002 ff31 	bl	80053f4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002592:	2302      	movs	r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800259c:	2340      	movs	r3, #64	; 0x40
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a4:	f107 0318 	add.w	r3, r7, #24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 ffd7 	bl	800555c <HAL_RCC_OscConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80025b4:	f000 f95a 	bl	800286c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b8:	230f      	movs	r3, #15
 80025ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025bc:	2301      	movs	r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 fad7 	bl	8005b84 <HAL_RCC_ClockConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80025dc:	f000 f946 	bl	800286c <Error_Handler>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3750      	adds	r7, #80	; 0x50
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_I2C3_Init+0x74>)
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <MX_I2C3_Init+0x78>)
 80025f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <MX_I2C3_Init+0x74>)
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <MX_I2C3_Init+0x7c>)
 80025f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <MX_I2C3_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <MX_I2C3_Init+0x74>)
 8002600:	2201      	movs	r2, #1
 8002602:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <MX_I2C3_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <MX_I2C3_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <MX_I2C3_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_I2C3_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_I2C3_Init+0x74>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002622:	480e      	ldr	r0, [pc, #56]	; (800265c <MX_I2C3_Init+0x74>)
 8002624:	f002 f812 	bl	800464c <HAL_I2C_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800262e:	f000 f91d 	bl	800286c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002632:	2100      	movs	r1, #0
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <MX_I2C3_Init+0x74>)
 8002636:	f002 fe45 	bl	80052c4 <HAL_I2CEx_ConfigAnalogFilter>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002640:	f000 f914 	bl	800286c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002644:	2100      	movs	r1, #0
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_I2C3_Init+0x74>)
 8002648:	f002 fe87 	bl	800535a <HAL_I2CEx_ConfigDigitalFilter>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002652:	f000 f90b 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000af4 	.word	0x20000af4
 8002660:	40007800 	.word	0x40007800
 8002664:	0010061a 	.word	0x0010061a

08002668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 800266e:	4a23      	ldr	r2, [pc, #140]	; (80026fc <MX_USART1_UART_Init+0x94>)
 8002670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 8002674:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800267a:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 800268e:	220c      	movs	r2, #12
 8002690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026b0:	4811      	ldr	r0, [pc, #68]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026b2:	f003 fe73 	bl	800639c <HAL_UART_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80026bc:	f000 f8d6 	bl	800286c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026c0:	2100      	movs	r1, #0
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026c4:	f004 ffdf 	bl	8007686 <HAL_UARTEx_SetTxFifoThreshold>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026ce:	f000 f8cd 	bl	800286c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026d2:	2100      	movs	r1, #0
 80026d4:	4808      	ldr	r0, [pc, #32]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026d6:	f005 f814 	bl	8007702 <HAL_UARTEx_SetRxFifoThreshold>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026e0:	f000 f8c4 	bl	800286c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <MX_USART1_UART_Init+0x90>)
 80026e6:	f004 ff95 	bl	8007614 <HAL_UARTEx_DisableFifoMode>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026f0:	f000 f8bc 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000b4c 	.word	0x20000b4c
 80026fc:	40013800 	.word	0x40013800

08002700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002706:	4a23      	ldr	r2, [pc, #140]	; (8002794 <MX_USART2_UART_Init+0x94>)
 8002708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002748:	4811      	ldr	r0, [pc, #68]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800274a:	f003 fe27 	bl	800639c <HAL_UART_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002754:	f000 f88a 	bl	800286c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002758:	2100      	movs	r1, #0
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800275c:	f004 ff93 	bl	8007686 <HAL_UARTEx_SetTxFifoThreshold>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002766:	f000 f881 	bl	800286c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276a:	2100      	movs	r1, #0
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800276e:	f004 ffc8 	bl	8007702 <HAL_UARTEx_SetRxFifoThreshold>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002778:	f000 f878 	bl	800286c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800277e:	f004 ff49 	bl	8007614 <HAL_UARTEx_DisableFifoMode>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002788:	f000 f870 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000be0 	.word	0x20000be0
 8002794:	40004400 	.word	0x40004400

08002798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <MX_GPIO_Init+0xa0>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	4a21      	ldr	r2, [pc, #132]	; (8002838 <MX_GPIO_Init+0xa0>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <MX_GPIO_Init+0xa0>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <MX_GPIO_Init+0xa0>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <MX_GPIO_Init+0xa0>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MX_GPIO_Init+0xa0>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80027de:	2200      	movs	r2, #0
 80027e0:	2173      	movs	r1, #115	; 0x73
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e6:	f001 ff19 	bl	800461c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2108      	movs	r1, #8
 80027ee:	4813      	ldr	r0, [pc, #76]	; (800283c <MX_GPIO_Init+0xa4>)
 80027f0:	f001 ff14 	bl	800461c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80027f4:	2373      	movs	r3, #115	; 0x73
 80027f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f001 fd83 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002812:	2308      	movs	r3, #8
 8002814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4619      	mov	r1, r3
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <MX_GPIO_Init+0xa4>)
 800282a:	f001 fd75 	bl	8004318 <HAL_GPIO_Init>

}
 800282e:	bf00      	nop
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	48000400 	.word	0x48000400

08002840 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	b29a      	uxth	r2, r3
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	4804      	ldr	r0, [pc, #16]	; (8002868 <_write+0x28>)
 8002858:	f003 fdf0 	bl	800643c <HAL_UART_Transmit>
    return len;
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000be0 	.word	0x20000be0

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_MspInit+0x44>)
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_MspInit+0x44>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6613      	str	r3, [r2, #96]	; 0x60
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_MspInit+0x44>)
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_MspInit+0x44>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_MspInit+0x44>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_MspInit+0x44>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028ae:	f002 fe45 	bl	800553c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b09c      	sub	sp, #112	; 0x70
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028d8:	f107 0318 	add.w	r3, r7, #24
 80028dc:	2244      	movs	r2, #68	; 0x44
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 ffd3 	bl	800788c <memset>
  if(hi2c->Instance==I2C3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <HAL_I2C_MspInit+0xe4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d154      	bne.n	800299a <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80028f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fa:	f107 0318 	add.w	r3, r7, #24
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 fb5c 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800290a:	f7ff ffaf 	bl	800286c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800293e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002942:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002944:	2312      	movs	r3, #18
 8002946:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002950:	2302      	movs	r3, #2
 8002952:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800295e:	f001 fcdb 	bl	8004318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002962:	2320      	movs	r3, #32
 8002964:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002966:	2312      	movs	r3, #18
 8002968:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002972:	2308      	movs	r3, #8
 8002974:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800297a:	4619      	mov	r1, r3
 800297c:	480b      	ldr	r0, [pc, #44]	; (80029ac <HAL_I2C_MspInit+0xec>)
 800297e:	f001 fccb 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_I2C_MspInit+0xe8>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3770      	adds	r7, #112	; 0x70
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40007800 	.word	0x40007800
 80029a8:	40021000 	.word	0x40021000
 80029ac:	48000400 	.word	0x48000400

080029b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b09c      	sub	sp, #112	; 0x70
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	2244      	movs	r2, #68	; 0x44
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 ff5b 	bl	800788c <memset>
  if(huart->Instance==USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a42      	ldr	r2, [pc, #264]	; (8002ae4 <HAL_UART_MspInit+0x134>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d140      	bne.n	8002a62 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e8:	f107 0318 	add.w	r3, r7, #24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fae5 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029f8:	f7ff ff38 	bl	800286c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	4a39      	ldr	r2, [pc, #228]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a06:	6613      	str	r3, [r2, #96]	; 0x60
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f001 fc64 	bl	8004318 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2025      	movs	r0, #37	; 0x25
 8002a56:	f001 fb6a 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a5a:	2025      	movs	r0, #37	; 0x25
 8002a5c:	f001 fb81 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a60:	e03b      	b.n	8002ada <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_UART_MspInit+0x13c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d136      	bne.n	8002ada <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a74:	f107 0318 	add.w	r3, r7, #24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fa9f 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002a84:	f7ff fef2 	bl	800286c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_UART_MspInit+0x138>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ab8:	230c      	movs	r3, #12
 8002aba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f001 fc1f 	bl	8004318 <HAL_GPIO_Init>
}
 8002ada:	bf00      	nop
 8002adc:	3770      	adds	r7, #112	; 0x70
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40004400 	.word	0x40004400

08002af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <NMI_Handler+0x4>

08002af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <HardFault_Handler+0x4>

08002afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <MemManage_Handler+0x4>

08002b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <BusFault_Handler+0x4>

08002b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <UsageFault_Handler+0x4>

08002b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3c:	f001 f9dc 	bl	8003ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USART1_IRQHandler+0x10>)
 8002b4a:	f003 fd05 	bl	8006558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000b4c 	.word	0x20000b4c

08002b58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e00a      	b.n	8002b80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b6a:	f3af 8000 	nop.w
 8002b6e:	4601      	mov	r1, r0
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	60ba      	str	r2, [r7, #8]
 8002b76:	b2ca      	uxtb	r2, r1
 8002b78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dbf0      	blt.n	8002b6a <_read+0x12>
	}

return len;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bba:	605a      	str	r2, [r3, #4]
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_isatty>:

int _isatty(int file)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f004 fdf6 	bl	800781c <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20008000 	.word	0x20008000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	20000ae8 	.word	0x20000ae8
 8002c64:	20000c88 	.word	0x20000c88

08002c68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <SystemInit+0x20>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <SystemInit+0x20>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <triad>:
#include <luts.h>
#define PI16 205887
#define norm(a) norm_q16(a)


void triad(Vector3D B1, Vector3D g1, Vector3D B2, Vector3D g2, Matrix3x3* result){
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c92:	b0f5      	sub	sp, #468	; 0x1d4
 8002c94:	af10      	add	r7, sp, #64	; 0x40
 8002c96:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c9e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	// Normalisér alle vektorerne
	int32_t nB1 = norm(B1);
 8002ca2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002caa:	f000 ffab 	bl	8003c04 <norm_q16>
 8002cae:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
	int32_t ng1 = norm(g1);
 8002cb2:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cba:	f000 ffa3 	bl	8003c04 <norm_q16>
 8002cbe:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
	int32_t nB2 = norm(B2);
 8002cc2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cca:	f000 ff9b 	bl	8003c04 <norm_q16>
 8002cce:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	int32_t ng2 = norm(g2);
 8002cd2:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8002cd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cda:	f000 ff93 	bl	8003c04 <norm_q16>
 8002cde:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180

	B1.x = FIX16_DIV(B1.x, nB1);
 8002ce2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002cee:	ea4f 4922 	mov.w	r9, r2, asr #16
 8002cf2:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8002cf6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d00:	4640      	mov	r0, r8
 8002d02:	4649      	mov	r1, r9
 8002d04:	f7fd fadc 	bl	80002c0 <__aeabi_ldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d10:	601a      	str	r2, [r3, #0]
	B1.y = FIX16_DIV(B1.y, nB1);
 8002d12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d1e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002d22:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002d26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d30:	4650      	mov	r0, sl
 8002d32:	4659      	mov	r1, fp
 8002d34:	f7fd fac4 	bl	80002c0 <__aeabi_ldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d40:	605a      	str	r2, [r3, #4]
	B1.z = FIX16_DIV(B1.z, nB1);
 8002d42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d4e:	1416      	asrs	r6, r2, #16
 8002d50:	0415      	lsls	r5, r2, #16
 8002d52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d56:	461a      	mov	r2, r3
 8002d58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	4631      	mov	r1, r6
 8002d60:	f7fd faae 	bl	80002c0 <__aeabi_ldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d6c:	609a      	str	r2, [r3, #8]

	g1.x = FIX16_DIV(g1.x, ng1);
 8002d6e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002d72:	461a      	mov	r2, r3
 8002d74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d78:	1411      	asrs	r1, r2, #16
 8002d7a:	6779      	str	r1, [r7, #116]	; 0x74
 8002d7c:	0413      	lsls	r3, r2, #16
 8002d7e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d80:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d84:	461a      	mov	r2, r3
 8002d86:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d8a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002d8e:	f7fd fa97 	bl	80002c0 <__aeabi_ldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4613      	mov	r3, r2
 8002d98:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	g1.y = FIX16_DIV(g1.y, ng1);
 8002d9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002da0:	461a      	mov	r2, r3
 8002da2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002da6:	1411      	asrs	r1, r2, #16
 8002da8:	66f9      	str	r1, [r7, #108]	; 0x6c
 8002daa:	0413      	lsls	r3, r2, #16
 8002dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002db2:	461a      	mov	r2, r3
 8002db4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002db8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dbc:	f7fd fa80 	bl	80002c0 <__aeabi_ldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	g1.z = FIX16_DIV(g1.z, ng1);
 8002dca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002dce:	461a      	mov	r2, r3
 8002dd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dd4:	1411      	asrs	r1, r2, #16
 8002dd6:	6679      	str	r1, [r7, #100]	; 0x64
 8002dd8:	0413      	lsls	r3, r2, #16
 8002dda:	663b      	str	r3, [r7, #96]	; 0x60
 8002ddc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002de0:	461a      	mov	r2, r3
 8002de2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002de6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002dea:	f7fd fa69 	bl	80002c0 <__aeabi_ldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4613      	mov	r3, r2
 8002df4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	B2.x = FIX16_DIV(B2.x, nB2);
 8002df8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e02:	1411      	asrs	r1, r2, #16
 8002e04:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002e06:	0413      	lsls	r3, r2, #16
 8002e08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e0a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e0e:	461a      	mov	r2, r3
 8002e10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e14:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e18:	f7fd fa52 	bl	80002c0 <__aeabi_ldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	B2.y = FIX16_DIV(B2.y, nB2);
 8002e26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e30:	1411      	asrs	r1, r2, #16
 8002e32:	6579      	str	r1, [r7, #84]	; 0x54
 8002e34:	0413      	lsls	r3, r2, #16
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
 8002e38:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e46:	f7fd fa3b 	bl	80002c0 <__aeabi_ldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	B2.z = FIX16_DIV(B2.z, nB2);
 8002e54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e5e:	1411      	asrs	r1, r2, #16
 8002e60:	64f9      	str	r1, [r7, #76]	; 0x4c
 8002e62:	0413      	lsls	r3, r2, #16
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e70:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e74:	f7fd fa24 	bl	80002c0 <__aeabi_ldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	g2.x = FIX16_DIV(g2.x, ng2);
 8002e82:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002e86:	461a      	mov	r2, r3
 8002e88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e8c:	1411      	asrs	r1, r2, #16
 8002e8e:	6479      	str	r1, [r7, #68]	; 0x44
 8002e90:	0413      	lsls	r3, r2, #16
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40
 8002e94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e98:	461a      	mov	r2, r3
 8002e9a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002ea2:	f7fd fa0d 	bl	80002c0 <__aeabi_ldivmod>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4613      	mov	r3, r2
 8002eac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	g2.y = FIX16_DIV(g2.y, ng2);
 8002eb0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002eba:	1411      	asrs	r1, r2, #16
 8002ebc:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002ebe:	0413      	lsls	r3, r2, #16
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ecc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ed0:	f7fd f9f6 	bl	80002c0 <__aeabi_ldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	g2.z = FIX16_DIV(g2.z, ng2);
 8002ede:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ee8:	1411      	asrs	r1, r2, #16
 8002eea:	6379      	str	r1, [r7, #52]	; 0x34
 8002eec:	0413      	lsls	r3, r2, #16
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002efa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002efe:	f7fd f9df 	bl	80002c0 <__aeabi_ldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4613      	mov	r3, r2
 8002f08:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	Vector3D u1;
	Vector3D u2;
	Vector3D u3;

	t1 = B1;
 8002f0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f10:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8002f14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	u1 = B2;
 8002f1c:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8002f20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	Vector3D B1xg1 = cross(B1, g1);
 8002f2c:	f507 7692 	add.w	r6, r7, #292	; 0x124
 8002f30:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8002f34:	466c      	mov	r4, sp
 8002f36:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002f3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f42:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002f46:	4630      	mov	r0, r6
 8002f48:	f000 fb2e 	bl	80035a8 <cross>

	int32_t nB1g1 = norm(B1xg1);
 8002f4c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002f50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f54:	f000 fe56 	bl	8003c04 <norm_q16>
 8002f58:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	t2.x = FIX16_DIV(B1xg1.x, nB1g1);
 8002f5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f60:	461a      	mov	r2, r3
 8002f62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f66:	1411      	asrs	r1, r2, #16
 8002f68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f6a:	0413      	lsls	r3, r2, #16
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002f72:	461a      	mov	r2, r3
 8002f74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f7c:	f7fd f9a0 	bl	80002c0 <__aeabi_ldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4613      	mov	r3, r2
 8002f86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	t2.y = FIX16_DIV(B1xg1.y, nB1g1);
 8002f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f8e:	461a      	mov	r2, r3
 8002f90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f94:	1411      	asrs	r1, r2, #16
 8002f96:	6279      	str	r1, [r7, #36]	; 0x24
 8002f98:	0413      	lsls	r3, r2, #16
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002faa:	f7fd f989 	bl	80002c0 <__aeabi_ldivmod>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	t2.z = FIX16_DIV(B1xg1.z, nB1g1);
 8002fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fc2:	1411      	asrs	r1, r2, #16
 8002fc4:	61f9      	str	r1, [r7, #28]
 8002fc6:	0413      	lsls	r3, r2, #16
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002fce:	461a      	mov	r2, r3
 8002fd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd8:	f7fd f972 	bl	80002c0 <__aeabi_ldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	t3 = cross(t1, t2);
 8002fe6:	f507 75aa 	add.w	r5, r7, #340	; 0x154
 8002fea:	466c      	mov	r4, sp
 8002fec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ff0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ff8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 fad2 	bl	80035a8 <cross>

	Vector3D B2xg2 = cross(B2, g2);
 8003004:	f507 758c 	add.w	r5, r7, #280	; 0x118
 8003008:	466c      	mov	r4, sp
 800300a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800300e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003016:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800301a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800301c:	4628      	mov	r0, r5
 800301e:	f000 fac3 	bl	80035a8 <cross>

	int32_t nB2g2 = norm(B2xg2);
 8003022:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800302a:	f000 fdeb 	bl	8003c04 <norm_q16>
 800302e:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
	u2.x = FIX16_DIV(B2xg2.x, nB2g2);
 8003032:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003036:	461a      	mov	r2, r3
 8003038:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800303c:	1411      	asrs	r1, r2, #16
 800303e:	6179      	str	r1, [r7, #20]
 8003040:	0413      	lsls	r3, r2, #16
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003048:	461a      	mov	r2, r3
 800304a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800304e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003052:	f7fd f935 	bl	80002c0 <__aeabi_ldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	u2.y = FIX16_DIV(B2xg2.y, nB2g2);
 8003060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003064:	461a      	mov	r2, r3
 8003066:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800306a:	1411      	asrs	r1, r2, #16
 800306c:	60f9      	str	r1, [r7, #12]
 800306e:	0413      	lsls	r3, r2, #16
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003076:	461a      	mov	r2, r3
 8003078:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800307c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003080:	f7fd f91e 	bl	80002c0 <__aeabi_ldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	u2.z = FIX16_DIV(B2xg2.z, nB2g2);
 800308e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003092:	461a      	mov	r2, r3
 8003094:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003098:	1411      	asrs	r1, r2, #16
 800309a:	6079      	str	r1, [r7, #4]
 800309c:	0413      	lsls	r3, r2, #16
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80030a4:	461a      	mov	r2, r3
 80030a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030ae:	f7fd f907 	bl	80002c0 <__aeabi_ldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4613      	mov	r3, r2
 80030b8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	u3 = cross(u1, u2);
 80030bc:	f507 7598 	add.w	r5, r7, #304	; 0x130
 80030c0:	466c      	mov	r4, sp
 80030c2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80030c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80030d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 fa67 	bl	80035a8 <cross>

	Matrix3x3 U = create_matrix_from_vectors(u1, u2, u3);
 80030da:	f107 05f4 	add.w	r5, r7, #244	; 0xf4
 80030de:	ac03      	add	r4, sp, #12
 80030e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030ec:	466c      	mov	r4, sp
 80030ee:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80030f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80030fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003100:	4628      	mov	r0, r5
 8003102:	f000 fb2f 	bl	8003764 <create_matrix_from_vectors>
	Matrix3x3 T = create_matrix_from_vectors(t1, t2, t3);
 8003106:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 800310a:	ac03      	add	r4, sp, #12
 800310c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003110:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003114:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003118:	466c      	mov	r4, sp
 800311a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800311e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003126:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800312a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312c:	4628      	mov	r0, r5
 800312e:	f000 fb19 	bl	8003764 <create_matrix_from_vectors>

	Matrix3x3 C;
	Matrix3x3 Tt = transpose(T);
 8003132:	f107 0688 	add.w	r6, r7, #136	; 0x88
 8003136:	466d      	mov	r5, sp
 8003138:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 800313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003144:	e885 0003 	stmia.w	r5, {r0, r1}
 8003148:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800314c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314e:	4630      	mov	r0, r6
 8003150:	f000 fb32 	bl	80037b8 <transpose>

	C = MMult(U,Tt);
 8003154:	f107 06ac 	add.w	r6, r7, #172	; 0xac
 8003158:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800315c:	ac06      	add	r4, sp, #24
 800315e:	461d      	mov	r5, r3
 8003160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	466d      	mov	r5, sp
 800316e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8003172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003176:	e894 0003 	ldmia.w	r4, {r0, r1}
 800317a:	e885 0003 	stmia.w	r5, {r0, r1}
 800317e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003184:	4630      	mov	r0, r6
 8003186:	f000 fb59 	bl	800383c <MMult>
	*result = C;
 800318a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800318e:	461d      	mov	r5, r3
 8003190:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	602b      	str	r3, [r5, #0]
}
 80031a0:	bf00      	nop
 80031a2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80031a6:	46bd      	mov	sp, r7
 80031a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	b002      	add	sp, #8
 80031ae:	4770      	bx	lr

080031b0 <q16_from_float>:
#define Q16_SHIFT   16
#define Q16_ONE     (1 << Q16_SHIFT)

/*----- helpers: float ⟷ Q16.16 ----------------------------------------*/
int32_t q16_from_float(float f)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int32_t)(f * (float)Q16_ONE + (f >= 0 ? 0.5f : -0.5f));
 80031ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80031be:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80031f8 <q16_from_float+0x48>
 80031c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80031ca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80031ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d2:	db02      	blt.n	80031da <q16_from_float+0x2a>
 80031d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031d8:	e001      	b.n	80031de <q16_from_float+0x2e>
 80031da:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80031de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e6:	ee17 3a90 	vmov	r3, s15
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	47800000 	.word	0x47800000

080031fc <q16_to_float>:
static inline float q16_to_float(int32_t q)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    return (float)q / (float)Q16_ONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003228 <q16_to_float+0x2c>
 8003212:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003216:	eef0 7a66 	vmov.f32	s15, s13
}
 800321a:	eeb0 0a67 	vmov.f32	s0, s15
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	47800000 	.word	0x47800000

0800322c <asin16>:

/*----- reference asin:  returns radians in Q16.16 ----------------------*/
int32_t asin16(int32_t x_q16)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    float xf = q16_to_float(x_q16);          /*  -1 … +1                  */
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe1 	bl	80031fc <q16_to_float>
 800323a:	ed87 0a03 	vstr	s0, [r7, #12]
    float rf = asinf(xf);                    /*  radians                  */
 800323e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003242:	f005 fd19 	bl	8008c78 <asinf>
 8003246:	ed87 0a02 	vstr	s0, [r7, #8]
    return q16_from_float(rf);               /*  back to Q16.16           */
 800324a:	ed97 0a02 	vldr	s0, [r7, #8]
 800324e:	f7ff ffaf 	bl	80031b0 <q16_from_float>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <atan2_16>:

/*----- reference atan2:  returns radians in Q16.16 ---------------------*/
int32_t atan2_16(int32_t y_q16, int32_t x_q16)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    float yf = q16_to_float(y_q16);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffc8 	bl	80031fc <q16_to_float>
 800326c:	ed87 0a05 	vstr	s0, [r7, #20]
    float xf = q16_to_float(x_q16);
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f7ff ffc3 	bl	80031fc <q16_to_float>
 8003276:	ed87 0a04 	vstr	s0, [r7, #16]
    float rf = atan2f(yf, xf);               /*  radians                  */
 800327a:	edd7 0a04 	vldr	s1, [r7, #16]
 800327e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003282:	f005 fd2b 	bl	8008cdc <atan2f>
 8003286:	ed87 0a03 	vstr	s0, [r7, #12]
    return q16_from_float(rf);
 800328a:	ed97 0a03 	vldr	s0, [r7, #12]
 800328e:	f7ff ff8f 	bl	80031b0 <q16_from_float>
 8003292:	4603      	mov	r3, r0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <rot2eulerZYX>:

// In triad.c
void rot2eulerZYX(const Matrix3x3* R, Vector3D* angles) {
 800329c:	b5b0      	push	{r4, r5, r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    // 1. Correct pitch calculation (remove negation)
    int32_t rzx = R->z.x;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24

    // 2. Proper clamping
    rzx = (rzx < convert(-1)) ? convert(-1) : (rzx > convert(1)) ? convert(1) : rzx;
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7fd fa1e 	bl	80006f0 <convert>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	4293      	cmp	r3, r2
 80032ba:	da05      	bge.n	80032c8 <rot2eulerZYX+0x2c>
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f7fd fa16 	bl	80006f0 <convert>
 80032c4:	4603      	mov	r3, r0
 80032c6:	e00c      	b.n	80032e2 <rot2eulerZYX+0x46>
 80032c8:	2001      	movs	r0, #1
 80032ca:	f7fd fa11 	bl	80006f0 <convert>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	4293      	cmp	r3, r2
 80032d4:	dd04      	ble.n	80032e0 <rot2eulerZYX+0x44>
 80032d6:	2001      	movs	r0, #1
 80032d8:	f7fd fa0a 	bl	80006f0 <convert>
 80032dc:	4603      	mov	r3, r0
 80032de:	e000      	b.n	80032e2 <rot2eulerZYX+0x46>
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24

    // 3. Use LUT-based asin for accuracy
    int32_t pitch_rad = -asin16(rzx);
 80032e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e6:	f7ff ffa1 	bl	800322c <asin16>
 80032ea:	4603      	mov	r3, r0
 80032ec:	425b      	negs	r3, r3
 80032ee:	623b      	str	r3, [r7, #32]

    int32_t cos_pitch = cosrad(pitch_rad);
 80032f0:	6a38      	ldr	r0, [r7, #32]
 80032f2:	f7fd ff65 	bl	80011c0 <cosrad>
 80032f6:	61f8      	str	r0, [r7, #28]
    int32_t rad2deg = FIX16_DIV(convert(180), PI16);
 80032f8:	20b4      	movs	r0, #180	; 0xb4
 80032fa:	f7fd f9f9 	bl	80006f0 <convert>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003306:	1415      	asrs	r5, r2, #16
 8003308:	0414      	lsls	r4, r2, #16
 800330a:	4a76      	ldr	r2, [pc, #472]	; (80034e4 <rot2eulerZYX+0x248>)
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	4620      	mov	r0, r4
 8003312:	4629      	mov	r1, r5
 8003314:	f7fc ffd4 	bl	80002c0 <__aeabi_ldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
    int32_t pitch_deg = FIX16_MULT(pitch_rad, rad2deg);
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	4618      	mov	r0, r3
 8003324:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	461a      	mov	r2, r3
 800332c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003330:	fb02 f501 	mul.w	r5, r2, r1
 8003334:	fb00 f403 	mul.w	r4, r0, r3
 8003338:	442c      	add	r4, r5
 800333a:	fba0 2302 	umull	r2, r3, r0, r2
 800333e:	18e1      	adds	r1, r4, r3
 8003340:	460b      	mov	r3, r1
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	0c10      	lsrs	r0, r2, #16
 800334c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003350:	1419      	asrs	r1, r3, #16
 8003352:	4603      	mov	r3, r0
 8003354:	617b      	str	r3, [r7, #20]

    int32_t roll_deg = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t yaw_deg = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28

    // 4. Optimized gimbal lock detection
    #define GIMBAL_THRESHOLD 30  // 0.001 in 16.16 (1 << 16)/1000 ≈ 65
    if (abs(cos_pitch) > GIMBAL_THRESHOLD) {
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	bfb8      	it	lt
 8003364:	425b      	neglt	r3, r3
 8003366:	2b1e      	cmp	r3, #30
 8003368:	dd48      	ble.n	80033fc <rot2eulerZYX+0x160>
        // 5. Use LUT-based atan2 with corrected arguments
        int32_t roll_rad = atan2_16(R->z.y, R->z.z);  // Standard ZYX formula
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f7ff ff71 	bl	800325c <atan2_16>
 800337a:	60f8      	str	r0, [r7, #12]
        int32_t yaw_rad = atan2_16(R->y.x, R->x.x);   // Standard ZYX formula
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7ff ff68 	bl	800325c <atan2_16>
 800338c:	60b8      	str	r0, [r7, #8]

        roll_deg = FIX16_MULT(roll_rad, rad2deg);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4618      	mov	r0, r3
 8003392:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	461a      	mov	r2, r3
 800339a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800339e:	fb02 f501 	mul.w	r5, r2, r1
 80033a2:	fb00 f403 	mul.w	r4, r0, r3
 80033a6:	442c      	add	r4, r5
 80033a8:	fba0 2302 	umull	r2, r3, r0, r2
 80033ac:	18e1      	adds	r1, r4, r3
 80033ae:	460b      	mov	r3, r1
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0c10      	lsrs	r0, r2, #16
 80033ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80033be:	1419      	asrs	r1, r3, #16
 80033c0:	4603      	mov	r3, r0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        yaw_deg = FIX16_MULT(yaw_rad, rad2deg);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	461a      	mov	r2, r3
 80033d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033d4:	fb02 f501 	mul.w	r5, r2, r1
 80033d8:	fb00 f403 	mul.w	r4, r0, r3
 80033dc:	442c      	add	r4, r5
 80033de:	fba0 2302 	umull	r2, r3, r0, r2
 80033e2:	18e1      	adds	r1, r4, r3
 80033e4:	460b      	mov	r3, r1
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0c10      	lsrs	r0, r2, #16
 80033f0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80033f4:	1419      	asrs	r1, r3, #16
 80033f6:	4603      	mov	r3, r0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	e026      	b.n	800344a <rot2eulerZYX+0x1ae>
    } else {
        // 6. Correct gimbal lock handling
        int32_t yaw_rad = atan2_16(-R->x.y, R->y.y);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	425a      	negs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f7ff ff27 	bl	800325c <atan2_16>
 800340e:	6138      	str	r0, [r7, #16]
        yaw_deg = FIX16_MULT(yaw_rad, rad2deg);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4618      	mov	r0, r3
 8003414:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	461a      	mov	r2, r3
 800341c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003420:	fb02 f501 	mul.w	r5, r2, r1
 8003424:	fb00 f403 	mul.w	r4, r0, r3
 8003428:	442c      	add	r4, r5
 800342a:	fba0 2302 	umull	r2, r3, r0, r2
 800342e:	18e1      	adds	r1, r4, r3
 8003430:	460b      	mov	r3, r1
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	0c10      	lsrs	r0, r2, #16
 800343c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003440:	1419      	asrs	r1, r3, #16
 8003442:	4603      	mov	r3, r0
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
        // Set roll to 0 during gimbal lock (standard approach)
        roll_deg = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c

    // 7. Efficient angle wrapping
    #define ANGLE_180 (180 << 16)
    #define ANGLE_360 (360 << 16)

    roll_deg %= ANGLE_360;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <rot2eulerZYX+0x24c>)
 800344e:	fb82 1203 	smull	r1, r2, r2, r3
 8003452:	441a      	add	r2, r3
 8003454:	1611      	asrs	r1, r2, #24
 8003456:	17da      	asrs	r2, r3, #31
 8003458:	1a8a      	subs	r2, r1, r2
 800345a:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 800345e:	fb01 f202 	mul.w	r2, r1, r2
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
    roll_deg = (roll_deg > ANGLE_180) ? roll_deg - ANGLE_360 :
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 800346c:	dd03      	ble.n	8003476 <rot2eulerZYX+0x1da>
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 8003474:	e008      	b.n	8003488 <rot2eulerZYX+0x1ec>
              (roll_deg < -ANGLE_180) ? roll_deg + ANGLE_360 : roll_deg;
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 800347c:	da03      	bge.n	8003486 <rot2eulerZYX+0x1ea>
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 8003484:	e000      	b.n	8003488 <rot2eulerZYX+0x1ec>
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    roll_deg = (roll_deg > ANGLE_180) ? roll_deg - ANGLE_360 :
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c

    yaw_deg %= ANGLE_360;
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <rot2eulerZYX+0x24c>)
 800348e:	fb82 1203 	smull	r1, r2, r2, r3
 8003492:	441a      	add	r2, r3
 8003494:	1611      	asrs	r1, r2, #24
 8003496:	17da      	asrs	r2, r3, #31
 8003498:	1a8a      	subs	r2, r1, r2
 800349a:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 800349e:	fb01 f202 	mul.w	r2, r1, r2
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
    yaw_deg = (yaw_deg > ANGLE_180) ? yaw_deg - ANGLE_360 :
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80034ac:	dd03      	ble.n	80034b6 <rot2eulerZYX+0x21a>
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 80034b4:	e008      	b.n	80034c8 <rot2eulerZYX+0x22c>
             (yaw_deg < -ANGLE_180) ? yaw_deg + ANGLE_360 : yaw_deg;
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 80034bc:	da03      	bge.n	80034c6 <rot2eulerZYX+0x22a>
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 80034c4:	e000      	b.n	80034c8 <rot2eulerZYX+0x22c>
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    yaw_deg = (yaw_deg > ANGLE_180) ? yaw_deg - ANGLE_360 :
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28

    angles->x = roll_deg;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ce:	601a      	str	r2, [r3, #0]
    angles->y = pitch_deg;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	605a      	str	r2, [r3, #4]
    angles->z = yaw_deg;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034da:	609a      	str	r2, [r3, #8]

}
 80034dc:	bf00      	nop
 80034de:	3730      	adds	r7, #48	; 0x30
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bdb0      	pop	{r4, r5, r7, pc}
 80034e4:	0003243f 	.word	0x0003243f
 80034e8:	b60b60b7 	.word	0xb60b60b7

080034ec <dot>:
#include <fixp.h>
#include "luts.h"

//////////////////Vector////////////////////////////////////////////

int32_t dot(Vector3D a, Vector3D b) {
 80034ec:	b082      	sub	sp, #8
 80034ee:	b4f0      	push	{r4, r5, r6, r7}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	1d3c      	adds	r4, r7, #4
 80034f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    return Mult(a.x, b.x) + Mult(a.y, b.y) + Mult(a.z, b.z);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	461a      	mov	r2, r3
 8003508:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800350c:	fb02 f501 	mul.w	r5, r2, r1
 8003510:	fb00 f403 	mul.w	r4, r0, r3
 8003514:	442c      	add	r4, r5
 8003516:	fba0 2302 	umull	r2, r3, r0, r2
 800351a:	18e1      	adds	r1, r4, r3
 800351c:	460b      	mov	r3, r1
 800351e:	f04f 0000 	mov.w	r0, #0
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	0c10      	lsrs	r0, r2, #16
 8003528:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800352c:	1419      	asrs	r1, r3, #16
 800352e:	4606      	mov	r6, r0
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	461a      	mov	r2, r3
 800353c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003540:	fb02 f501 	mul.w	r5, r2, r1
 8003544:	fb00 f403 	mul.w	r4, r0, r3
 8003548:	442c      	add	r4, r5
 800354a:	fba0 2302 	umull	r2, r3, r0, r2
 800354e:	18e1      	adds	r1, r4, r3
 8003550:	460b      	mov	r3, r1
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	0c10      	lsrs	r0, r2, #16
 800355c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003560:	1419      	asrs	r1, r3, #16
 8003562:	4603      	mov	r3, r0
 8003564:	18f4      	adds	r4, r6, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4618      	mov	r0, r3
 800356a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	461a      	mov	r2, r3
 8003572:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003576:	fb02 f601 	mul.w	r6, r2, r1
 800357a:	fb00 f503 	mul.w	r5, r0, r3
 800357e:	4435      	add	r5, r6
 8003580:	fba0 2302 	umull	r2, r3, r0, r2
 8003584:	18e9      	adds	r1, r5, r3
 8003586:	460b      	mov	r3, r1
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0c10      	lsrs	r0, r2, #16
 8003592:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003596:	1419      	asrs	r1, r3, #16
 8003598:	4603      	mov	r3, r0
 800359a:	4423      	add	r3, r4
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bcf0      	pop	{r4, r5, r6, r7}
 80035a4:	b002      	add	sp, #8
 80035a6:	4770      	bx	lr

080035a8 <cross>:

Vector3D cross(Vector3D a, Vector3D b){
 80035a8:	b4f0      	push	{r4, r5, r6, r7}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4638      	mov	r0, r7
 80035b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D c;
	c.x = Mult(a.y,b.z) - Mult(a.z,b.y);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4618      	mov	r0, r3
 80035ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	461a      	mov	r2, r3
 80035c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035c6:	fb02 f501 	mul.w	r5, r2, r1
 80035ca:	fb00 f403 	mul.w	r4, r0, r3
 80035ce:	442c      	add	r4, r5
 80035d0:	fba0 2302 	umull	r2, r3, r0, r2
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	460b      	mov	r3, r1
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	0c10      	lsrs	r0, r2, #16
 80035e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035e6:	1419      	asrs	r1, r3, #16
 80035e8:	4606      	mov	r6, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	461a      	mov	r2, r3
 80035f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035fa:	fb02 f501 	mul.w	r5, r2, r1
 80035fe:	fb00 f403 	mul.w	r4, r0, r3
 8003602:	442c      	add	r4, r5
 8003604:	fba0 2302 	umull	r2, r3, r0, r2
 8003608:	18e1      	adds	r1, r4, r3
 800360a:	460b      	mov	r3, r1
 800360c:	f04f 0000 	mov.w	r0, #0
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	0c10      	lsrs	r0, r2, #16
 8003616:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800361a:	1419      	asrs	r1, r3, #16
 800361c:	4603      	mov	r3, r0
 800361e:	1af3      	subs	r3, r6, r3
 8003620:	617b      	str	r3, [r7, #20]
	c.y = Mult(a.z,b.x) - Mult(a.x,b.z);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4618      	mov	r0, r3
 8003626:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	461a      	mov	r2, r3
 800362e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003632:	fb02 f501 	mul.w	r5, r2, r1
 8003636:	fb00 f403 	mul.w	r4, r0, r3
 800363a:	442c      	add	r4, r5
 800363c:	fba0 2302 	umull	r2, r3, r0, r2
 8003640:	18e1      	adds	r1, r4, r3
 8003642:	460b      	mov	r3, r1
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	0c10      	lsrs	r0, r2, #16
 800364e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003652:	1419      	asrs	r1, r3, #16
 8003654:	4606      	mov	r6, r0
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	461a      	mov	r2, r3
 8003662:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003666:	fb02 f501 	mul.w	r5, r2, r1
 800366a:	fb00 f403 	mul.w	r4, r0, r3
 800366e:	442c      	add	r4, r5
 8003670:	fba0 2302 	umull	r2, r3, r0, r2
 8003674:	18e1      	adds	r1, r4, r3
 8003676:	460b      	mov	r3, r1
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0c10      	lsrs	r0, r2, #16
 8003682:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003686:	1419      	asrs	r1, r3, #16
 8003688:	4603      	mov	r3, r0
 800368a:	1af3      	subs	r3, r6, r3
 800368c:	61bb      	str	r3, [r7, #24]
	c.z = Mult(a.x,b.y) - Mult(a.y,b.x);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	461a      	mov	r2, r3
 800369a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800369e:	fb02 f501 	mul.w	r5, r2, r1
 80036a2:	fb00 f403 	mul.w	r4, r0, r3
 80036a6:	442c      	add	r4, r5
 80036a8:	fba0 2302 	umull	r2, r3, r0, r2
 80036ac:	18e1      	adds	r1, r4, r3
 80036ae:	460b      	mov	r3, r1
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	0c10      	lsrs	r0, r2, #16
 80036ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80036be:	1419      	asrs	r1, r3, #16
 80036c0:	4606      	mov	r6, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4618      	mov	r0, r3
 80036c6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	461a      	mov	r2, r3
 80036ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036d2:	fb02 f501 	mul.w	r5, r2, r1
 80036d6:	fb00 f403 	mul.w	r4, r0, r3
 80036da:	442c      	add	r4, r5
 80036dc:	fba0 2302 	umull	r2, r3, r0, r2
 80036e0:	18e1      	adds	r1, r4, r3
 80036e2:	460b      	mov	r3, r1
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	0c10      	lsrs	r0, r2, #16
 80036ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80036f2:	1419      	asrs	r1, r3, #16
 80036f4:	4603      	mov	r3, r0
 80036f6:	1af3      	subs	r3, r6, r3
 80036f8:	61fb      	str	r3, [r7, #28]
	return c;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	461c      	mov	r4, r3
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <create_matrix>:

//////////////////Matrix////////////////////////////////////////////

Matrix3x3 create_matrix(int32_t a, int32_t b, int32_t c,
                        int32_t d, int32_t e, int32_t f,
                        int32_t g, int32_t h, int32_t i) {
 8003714:	b4b0      	push	{r4, r5, r7}
 8003716:	b08f      	sub	sp, #60	; 0x3c
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
    Matrix3x3 matrix;
    matrix.x.x = a; matrix.x.y = d; matrix.x.z = g;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372c:	61fb      	str	r3, [r7, #28]
    matrix.y.x = b; matrix.y.y = e; matrix.y.z = h;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	623b      	str	r3, [r7, #32]
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
    matrix.z.x = c; matrix.z.y = f; matrix.z.z = i;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
    return matrix;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	461d      	mov	r5, r3
 800374a:	f107 0414 	add.w	r4, r7, #20
 800374e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	602b      	str	r3, [r5, #0]
}
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	373c      	adds	r7, #60	; 0x3c
 800375e:	46bd      	mov	sp, r7
 8003760:	bcb0      	pop	{r4, r5, r7}
 8003762:	4770      	bx	lr

08003764 <create_matrix_from_vectors>:

Matrix3x3 create_matrix_from_vectors(Vector3D a, Vector3D b, Vector3D c) {
 8003764:	b4b0      	push	{r4, r5, r7}
 8003766:	b08f      	sub	sp, #60	; 0x3c
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4638      	mov	r0, r7
 800376e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Matrix3x3 matrix;
    matrix.x = a;
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	463a      	mov	r2, r7
 8003778:	ca07      	ldmia	r2, {r0, r1, r2}
 800377a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.y = b;
 800377e:	f107 0320 	add.w	r3, r7, #32
 8003782:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003786:	ca07      	ldmia	r2, {r0, r1, r2}
 8003788:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.z = c;
 800378c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003790:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003794:	ca07      	ldmia	r2, {r0, r1, r2}
 8003796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return matrix;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	461d      	mov	r5, r3
 800379e:	f107 0414 	add.w	r4, r7, #20
 80037a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	602b      	str	r3, [r5, #0]
}
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	373c      	adds	r7, #60	; 0x3c
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bcb0      	pop	{r4, r5, r7}
 80037b6:	4770      	bx	lr

080037b8 <transpose>:

Matrix3x3 transpose(Matrix3x3 a){
 80037b8:	b084      	sub	sp, #16
 80037ba:	b4b0      	push	{r4, r5, r7}
 80037bc:	b095      	sub	sp, #84	; 0x54
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80037c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;

	a_vect1.x = a.x.x;
 80037ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
	a_vect1.y = a.y.x;
 80037ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
	a_vect1.z = a.z.x;
 80037d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037d4:	64fb      	str	r3, [r7, #76]	; 0x4c

	a_vect2.x = a.x.y;
 80037d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
	a_vect2.y = a.y.y;
 80037da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	a_vect2.z = a.z.y;
 80037de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40

	a_vect3.x = a.x.z;
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	a_vect3.y = a.y.z;
 80037e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
	a_vect3.z = a.z.z;
 80037ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34

	Matrix3x3 b; // b er brugt til at gemme data
	b.x = a_vect1;
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80037fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80037fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.y = a_vect2;
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003808:	ca07      	ldmia	r2, {r0, r1, r2}
 800380a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.z = a_vect3;
 800380e:	f107 0320 	add.w	r3, r7, #32
 8003812:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003816:	ca07      	ldmia	r2, {r0, r1, r2}
 8003818:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	return b;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	461d      	mov	r5, r3
 8003820:	f107 0408 	add.w	r4, r7, #8
 8003824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	602b      	str	r3, [r5, #0]
}
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	3754      	adds	r7, #84	; 0x54
 8003834:	46bd      	mov	sp, r7
 8003836:	bcb0      	pop	{r4, r5, r7}
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr

0800383c <MMult>:

Matrix3x3 MMult(Matrix3x3 a, Matrix3x3 b){ //Matrix mult
 800383c:	b084      	sub	sp, #16
 800383e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003840:	b0a5      	sub	sp, #148	; 0x94
 8003842:	af06      	add	r7, sp, #24
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800384a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D b_vect1;
	Vector3D b_vect2;
	Vector3D b_vect3;
	b_vect1 = b.x;
 800384e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003852:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003856:	ca07      	ldmia	r2, {r0, r1, r2}
 8003858:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect2 = b.y;
 800385c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003860:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003864:	ca07      	ldmia	r2, {r0, r1, r2}
 8003866:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect3 = b.z;
 800386a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800386e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003872:	ca07      	ldmia	r2, {r0, r1, r2}
 8003874:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	////a////
	a = transpose(a);
 8003878:	f107 0694 	add.w	r6, r7, #148	; 0x94
 800387c:	466d      	mov	r5, sp
 800387e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8003882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388a:	e885 0003 	stmia.w	r5, {r0, r1}
 800388e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff ff8f 	bl	80037b8 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 800389a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800389e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80038a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80038a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 80038a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038ac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80038b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80038b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 80038b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ba:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80038be:	ca07      	ldmia	r2, {r0, r1, r2}
 80038c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//////calc
	Matrix3x3 svar;
	svar.x.x = dot(a_vect1, b_vect1);
 80038c4:	466a      	mov	r2, sp
 80038c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038ce:	e882 0003 	stmia.w	r2, {r0, r1}
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038da:	f7ff fe07 	bl	80034ec <dot>
 80038de:	4603      	mov	r3, r0
 80038e0:	60fb      	str	r3, [r7, #12]
	svar.y.x = dot(a_vect1, b_vect2);
 80038e2:	466a      	mov	r2, sp
 80038e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80038f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80038f8:	f7ff fdf8 	bl	80034ec <dot>
 80038fc:	4603      	mov	r3, r0
 80038fe:	61bb      	str	r3, [r7, #24]
	svar.z.x = dot(a_vect1, b_vect3);
 8003900:	466a      	mov	r2, sp
 8003902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003906:	e893 0003 	ldmia.w	r3, {r0, r1}
 800390a:	e882 0003 	stmia.w	r2, {r0, r1}
 800390e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003910:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003914:	ca07      	ldmia	r2, {r0, r1, r2}
 8003916:	f7ff fde9 	bl	80034ec <dot>
 800391a:	4603      	mov	r3, r0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24

	svar.x.y = dot(a_vect2, b_vect1);
 800391e:	466a      	mov	r2, sp
 8003920:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003928:	e882 0003 	stmia.w	r2, {r0, r1}
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003932:	ca07      	ldmia	r2, {r0, r1, r2}
 8003934:	f7ff fdda 	bl	80034ec <dot>
 8003938:	4603      	mov	r3, r0
 800393a:	613b      	str	r3, [r7, #16]
	svar.y.y = dot(a_vect2, b_vect2);
 800393c:	466a      	mov	r2, sp
 800393e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003942:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003946:	e882 0003 	stmia.w	r2, {r0, r1}
 800394a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800394c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003950:	ca07      	ldmia	r2, {r0, r1, r2}
 8003952:	f7ff fdcb 	bl	80034ec <dot>
 8003956:	4603      	mov	r3, r0
 8003958:	61fb      	str	r3, [r7, #28]
	svar.z.y = dot(a_vect2, b_vect3);
 800395a:	466a      	mov	r2, sp
 800395c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003960:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003964:	e882 0003 	stmia.w	r2, {r0, r1}
 8003968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800396e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003970:	f7ff fdbc 	bl	80034ec <dot>
 8003974:	4603      	mov	r3, r0
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28

	svar.x.z = dot(a_vect3, b_vect1);
 8003978:	466a      	mov	r2, sp
 800397a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800397e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003982:	e882 0003 	stmia.w	r2, {r0, r1}
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800398c:	ca07      	ldmia	r2, {r0, r1, r2}
 800398e:	f7ff fdad 	bl	80034ec <dot>
 8003992:	4603      	mov	r3, r0
 8003994:	617b      	str	r3, [r7, #20]
	svar.y.z = dot(a_vect3, b_vect2);
 8003996:	466a      	mov	r2, sp
 8003998:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800399c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80039a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ac:	f7ff fd9e 	bl	80034ec <dot>
 80039b0:	4603      	mov	r3, r0
 80039b2:	623b      	str	r3, [r7, #32]
	svar.z.z = dot(a_vect3, b_vect3);
 80039b4:	466a      	mov	r2, sp
 80039b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039be:	e882 0003 	stmia.w	r2, {r0, r1}
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ca:	f7ff fd8f 	bl	80034ec <dot>
 80039ce:	4603      	mov	r3, r0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	return svar;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	461d      	mov	r5, r3
 80039d6:	f107 040c 	add.w	r4, r7, #12
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	602b      	str	r3, [r5, #0]
}
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	377c      	adds	r7, #124	; 0x7c
 80039ea:	46bd      	mov	sp, r7
 80039ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80039f0:	b004      	add	sp, #16
 80039f2:	4770      	bx	lr

080039f4 <MVMult>:

Vector3D MVMult(Matrix3x3 a, Vector3D b){
 80039f4:	b084      	sub	sp, #16
 80039f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f8:	b095      	sub	sp, #84	; 0x54
 80039fa:	af06      	add	r7, sp, #24
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	a = transpose(a);
 8003a06:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8003a0a:	466d      	mov	r5, sp
 8003a0c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7ff fec8 	bl	80037b8 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 8003a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003a30:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 8003a36:	f107 0320 	add.w	r3, r7, #32
 8003a3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003a4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	Vector3D c;
	c.x = dot(a_vect1, b);
 8003a52:	466a      	mov	r2, sp
 8003a54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a68:	f7ff fd40 	bl	80034ec <dot>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60bb      	str	r3, [r7, #8]
	c.y = dot(a_vect2, b);
 8003a70:	466a      	mov	r2, sp
 8003a72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a7a:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a80:	f107 0220 	add.w	r2, r7, #32
 8003a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a86:	f7ff fd31 	bl	80034ec <dot>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	60fb      	str	r3, [r7, #12]
	c.z = dot(a_vect3, b);
 8003a8e:	466a      	mov	r2, sp
 8003a90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a98:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9e:	f107 0214 	add.w	r2, r7, #20
 8003aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa4:	f7ff fd22 	bl	80034ec <dot>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	613b      	str	r3, [r7, #16]
	return c;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	461c      	mov	r4, r3
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	373c      	adds	r7, #60	; 0x3c
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003ac6:	b004      	add	sp, #16
 8003ac8:	4770      	bx	lr

08003aca <SquareRaw>:
    printf("(%ld, %ld, %ld)\n", a.x.y, a.y.y, a.z.y);
    printf("(%ld, %ld, %ld)\n", a.x.z, a.y.z, a.z.z);
}

// raw square in Q32.32
static inline int64_t SquareRaw(int32_t A) {
 8003aca:	b4b0      	push	{r4, r5, r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
    return (int64_t)A * (int64_t)A;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	461a      	mov	r2, r3
 8003ade:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003ae2:	fb02 f501 	mul.w	r5, r2, r1
 8003ae6:	fb00 f403 	mul.w	r4, r0, r3
 8003aea:	442c      	add	r4, r5
 8003aec:	fba0 2302 	umull	r2, r3, r0, r2
 8003af0:	18e1      	adds	r1, r4, r3
 8003af2:	460b      	mov	r3, r1
}
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bcb0      	pop	{r4, r5, r7}
 8003afe:	4770      	bx	lr

08003b00 <isqrt_u64>:

// integer sqrt of a 64bit value
static inline uint32_t isqrt_u64(uint64_t x) {
 8003b00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b04:	b08a      	sub	sp, #40	; 0x28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	e9c7 0102 	strd	r0, r1, [r7, #8]
    uint64_t op = x;
 8003b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b10:	e9c7 2308 	strd	r2, r3, [r7, #32]
    uint64_t res = 0;
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // highest power-of-4 <= 2^62
    uint64_t one = (uint64_t)1 << 62;
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (one > op) one >>= 2;
 8003b2c:	e00b      	b.n	8003b46 <isqrt_u64+0x46>
 8003b2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	0882      	lsrs	r2, r0, #2
 8003b3c:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003b40:	088b      	lsrs	r3, r1, #2
 8003b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b4e:	4299      	cmp	r1, r3
 8003b50:	bf08      	it	eq
 8003b52:	4290      	cmpeq	r0, r2
 8003b54:	d3eb      	bcc.n	8003b2e <isqrt_u64+0x2e>
    while (one) {
 8003b56:	e04a      	b.n	8003bee <isqrt_u64+0xee>
        if (op >= res + one) {
 8003b58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b60:	eb10 0802 	adds.w	r8, r0, r2
 8003b64:	eb41 0903 	adc.w	r9, r1, r3
 8003b68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b6c:	454b      	cmp	r3, r9
 8003b6e:	bf08      	it	eq
 8003b70:	4542      	cmpeq	r2, r8
 8003b72:	d324      	bcc.n	8003bbe <isqrt_u64+0xbe>
            op  -= res + one;
 8003b74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b7c:	1884      	adds	r4, r0, r2
 8003b7e:	eb41 0503 	adc.w	r5, r1, r3
 8003b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b86:	ebb2 0a04 	subs.w	sl, r2, r4
 8003b8a:	eb63 0b05 	sbc.w	fp, r3, r5
 8003b8e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
            res  = (res >> 1) + one;
 8003b92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	0842      	lsrs	r2, r0, #1
 8003ba0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003ba4:	084b      	lsrs	r3, r1, #1
 8003ba6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003baa:	1886      	adds	r6, r0, r2
 8003bac:	603e      	str	r6, [r7, #0]
 8003bae:	eb41 0303 	adc.w	r3, r1, r3
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003bbc:	e00b      	b.n	8003bd6 <isqrt_u64+0xd6>
        } else {
            res >>= 1;
 8003bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	0842      	lsrs	r2, r0, #1
 8003bcc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003bd0:	084b      	lsrs	r3, r1, #1
 8003bd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        one >>= 2;
 8003bd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	0882      	lsrs	r2, r0, #2
 8003be4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003be8:	088b      	lsrs	r3, r1, #2
 8003bea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (one) {
 8003bee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d1b0      	bne.n	8003b58 <isqrt_u64+0x58>
    }
    return (uint32_t)res;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3728      	adds	r7, #40	; 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c02:	4770      	bx	lr

08003c04 <norm_q16>:

// Q16.16 vector norm
int32_t norm_q16(Vector3D a) {
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint64_t sum = 0;
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sum += (uint64_t)SquareRaw(a.x);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff52 	bl	8003aca <SquareRaw>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c32:	eb12 0a00 	adds.w	sl, r2, r0
 8003c36:	eb43 0b01 	adc.w	fp, r3, r1
 8003c3a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    sum += (uint64_t)SquareRaw(a.y);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff42 	bl	8003aca <SquareRaw>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c52:	eb12 0800 	adds.w	r8, r2, r0
 8003c56:	eb43 0901 	adc.w	r9, r3, r1
 8003c5a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    sum += (uint64_t)SquareRaw(a.z);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff32 	bl	8003aca <SquareRaw>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c72:	1814      	adds	r4, r2, r0
 8003c74:	eb43 0501 	adc.w	r5, r3, r1
 8003c78:	e9c7 4504 	strd	r4, r5, [r7, #16]
    // sum // Q32.32
    // sqrt(sum) gives Q16.16 directly
    return (int32_t)isqrt_u64(sum);
 8003c7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c80:	f7ff ff3e 	bl	8003b00 <isqrt_u64>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c90 <rotateZ14>:
 *    v14          : pointer to input vector (Q18.14)
 *    headingDegQ16: desired rotation in degrees, Q16.16
 *  returns        : rotated vector, still Q18.14
 * ===================================================================*/
Vector3D rotateZ14(const Vector3D *v14, int32_t headingDegQ16)
{
 8003c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c94:	b095      	sub	sp, #84	; 0x54
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
    /* 1. angle → radians (Q16.16) ------------------------------------ */
    int32_t radQ16 = FIX16_MULT(headingDegQ16, DEG2RAD_Q16);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003ca6:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8003caa:	461a      	mov	r2, r3
 8003cac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003cb0:	fb02 fc01 	mul.w	ip, r2, r1
 8003cb4:	fb00 f603 	mul.w	r6, r0, r3
 8003cb8:	4466      	add	r6, ip
 8003cba:	fba0 2302 	umull	r2, r3, r0, r2
 8003cbe:	18f1      	adds	r1, r6, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0c10      	lsrs	r0, r2, #16
 8003ccc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003cd0:	1419      	asrs	r1, r3, #16
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* 2. lookup / compute cos & sin  (Q16.16) ------------------------ */
    int32_t c =  cosrad(radQ16);    /* cos θ */
 8003cd6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003cd8:	f7fd fa72 	bl	80011c0 <cosrad>
 8003cdc:	64b8      	str	r0, [r7, #72]	; 0x48
    int32_t s =  sinrad(radQ16);     /* sin θ */
 8003cde:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003ce0:	f7fd f9ea 	bl	80010b8 <sinrad>
 8003ce4:	6478      	str	r0, [r7, #68]	; 0x44

    /* 3. rotate the horizontal part  --------------------------------- */
    /*    x' =  x·c – y·s                                              */
    /*    y' =  x·s + y·c                                              */
    /*    z  unchanged                                                 */
    int64_t xc = (int64_t)v14->x * c;      /* Q18.14 × Q16.16 → Q34.30 */
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003cf8:	fb02 fc01 	mul.w	ip, r2, r1
 8003cfc:	fb00 f603 	mul.w	r6, r0, r3
 8003d00:	4466      	add	r6, ip
 8003d02:	fba0 2302 	umull	r2, r3, r0, r2
 8003d06:	18f1      	adds	r1, r6, r3
 8003d08:	460b      	mov	r3, r1
 8003d0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003d0e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    int64_t ys = (int64_t)v14->y * s;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4618      	mov	r0, r3
 8003d18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1e:	461a      	mov	r2, r3
 8003d20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d24:	fb02 fc01 	mul.w	ip, r2, r1
 8003d28:	fb00 f603 	mul.w	r6, r0, r3
 8003d2c:	4466      	add	r6, ip
 8003d2e:	fba0 2302 	umull	r2, r3, r0, r2
 8003d32:	18f1      	adds	r1, r6, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003d3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int64_t xs = (int64_t)v14->x * s;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d50:	fb02 fc01 	mul.w	ip, r2, r1
 8003d54:	fb00 f603 	mul.w	r6, r0, r3
 8003d58:	4466      	add	r6, ip
 8003d5a:	fba0 2302 	umull	r2, r3, r0, r2
 8003d5e:	18f1      	adds	r1, r6, r3
 8003d60:	460b      	mov	r3, r1
 8003d62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003d66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    int64_t yc = (int64_t)v14->y * c;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	461a      	mov	r2, r3
 8003d78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d7c:	fb02 fc01 	mul.w	ip, r2, r1
 8003d80:	fb00 f603 	mul.w	r6, r0, r3
 8003d84:	4466      	add	r6, ip
 8003d86:	fba0 2302 	umull	r2, r3, r0, r2
 8003d8a:	18f1      	adds	r1, r6, r3
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003d92:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Vector3D out;
    out.x = (int32_t)((xc - ys) >> 16);    /* back to Q18.14 */
 8003d96:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003d9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d9e:	ebb0 0802 	subs.w	r8, r0, r2
 8003da2:	eb61 0903 	sbc.w	r9, r1, r3
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003db2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8003db6:	ea4f 4329 	mov.w	r3, r9, asr #16
 8003dba:	4613      	mov	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    out.y = (int32_t)((xs + yc) >> 16);
 8003dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc6:	1884      	adds	r4, r0, r2
 8003dc8:	eb41 0503 	adc.w	r5, r1, r3
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	0c22      	lsrs	r2, r4, #16
 8003dd6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003dda:	142b      	asrs	r3, r5, #16
 8003ddc:	4613      	mov	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
    out.z = v14->z;                        /* Z untouched    */
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	61fb      	str	r3, [r7, #28]
    return out;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	461c      	mov	r4, r3
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	3754      	adds	r7, #84	; 0x54
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e00:	480d      	ldr	r0, [pc, #52]	; (8003e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e04:	f7fe ff30 	bl	8002c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e08:	480c      	ldr	r0, [pc, #48]	; (8003e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e0a:	490d      	ldr	r1, [pc, #52]	; (8003e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <LoopForever+0xe>)
  movs r3, #0
 8003e0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e10:	e002      	b.n	8003e18 <LoopCopyDataInit>

08003e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e16:	3304      	adds	r3, #4

08003e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e1c:	d3f9      	bcc.n	8003e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e20:	4c0a      	ldr	r4, [pc, #40]	; (8003e4c <LoopForever+0x16>)
  movs r3, #0
 8003e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e24:	e001      	b.n	8003e2a <LoopFillZerobss>

08003e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e28:	3204      	adds	r2, #4

08003e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e2c:	d3fb      	bcc.n	8003e26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003e2e:	f003 fcfb 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e32:	f7fe f999 	bl	8002168 <main>

08003e36 <LoopForever>:

LoopForever:
    b LoopForever
 8003e36:	e7fe      	b.n	8003e36 <LoopForever>
  ldr   r0, =_estack
 8003e38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e40:	20000a4c 	.word	0x20000a4c
  ldr r2, =_sidata
 8003e44:	0800a420 	.word	0x0800a420
  ldr r2, =_sbss
 8003e48:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 8003e4c:	20000c88 	.word	0x20000c88

08003e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e50:	e7fe      	b.n	8003e50 <ADC1_2_IRQHandler>

08003e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	f000 f95b 	bl	8004118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e62:	200f      	movs	r0, #15
 8003e64:	f000 f80e 	bl	8003e84 <HAL_InitTick>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	71fb      	strb	r3, [r7, #7]
 8003e72:	e001      	b.n	8003e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e74:	f7fe fd00 	bl	8002878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e78:	79fb      	ldrb	r3, [r7, #7]

}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_InitTick+0x68>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d022      	beq.n	8003ede <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_InitTick+0x6c>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_InitTick+0x68>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f966 	bl	800417e <HAL_SYSTICK_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	d809      	bhi.n	8003ed2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec6:	f000 f932 	bl	800412e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_InitTick+0x70>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e007      	b.n	8003ee2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	e004      	b.n	8003ee2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e001      	b.n	8003ee2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200009e0 	.word	0x200009e0
 8003ef0:	200009d8 	.word	0x200009d8
 8003ef4:	200009dc 	.word	0x200009dc

08003ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_IncTick+0x1c>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_IncTick+0x20>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a03      	ldr	r2, [pc, #12]	; (8003f14 <HAL_IncTick+0x1c>)
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	20000c74 	.word	0x20000c74
 8003f18:	200009e0 	.word	0x200009e0

08003f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_GetTick+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000c74 	.word	0x20000c74

08003f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7ff ffee 	bl	8003f1c <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d004      	beq.n	8003f58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_Delay+0x40>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f58:	bf00      	nop
 8003f5a:	f7ff ffdf 	bl	8003f1c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d8f7      	bhi.n	8003f5a <HAL_Delay+0x26>
  {
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200009e0 	.word	0x200009e0

08003f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f94:	4013      	ands	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003faa:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <__NVIC_SetPriorityGrouping+0x44>)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	60d3      	str	r3, [r2, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	f003 0307 	and.w	r3, r3, #7
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db0b      	blt.n	8004006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	4907      	ldr	r1, [pc, #28]	; (8004014 <__NVIC_EnableIRQ+0x38>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000e100 	.word	0xe000e100

08004018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	6039      	str	r1, [r7, #0]
 8004022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	db0a      	blt.n	8004042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	490c      	ldr	r1, [pc, #48]	; (8004064 <__NVIC_SetPriority+0x4c>)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	0112      	lsls	r2, r2, #4
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	440b      	add	r3, r1
 800403c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004040:	e00a      	b.n	8004058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <__NVIC_SetPriority+0x50>)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3b04      	subs	r3, #4
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	440b      	add	r3, r1
 8004056:	761a      	strb	r2, [r3, #24]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000e100 	.word	0xe000e100
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	2b04      	cmp	r3, #4
 8004088:	bf28      	it	cs
 800408a:	2304      	movcs	r3, #4
 800408c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3304      	adds	r3, #4
 8004092:	2b06      	cmp	r3, #6
 8004094:	d902      	bls.n	800409c <NVIC_EncodePriority+0x30>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3b03      	subs	r3, #3
 800409a:	e000      	b.n	800409e <NVIC_EncodePriority+0x32>
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	401a      	ands	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	43d9      	mvns	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	4313      	orrs	r3, r2
         );
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e4:	d301      	bcc.n	80040ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040e6:	2301      	movs	r3, #1
 80040e8:	e00f      	b.n	800410a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <SysTick_Config+0x40>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040f2:	210f      	movs	r1, #15
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	f7ff ff8e 	bl	8004018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <SysTick_Config+0x40>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <SysTick_Config+0x40>)
 8004104:	2207      	movs	r2, #7
 8004106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	e000e010 	.word	0xe000e010

08004118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff29 	bl	8003f78 <__NVIC_SetPriorityGrouping>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800413c:	f7ff ff40 	bl	8003fc0 <__NVIC_GetPriorityGrouping>
 8004140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ff90 	bl	800406c <NVIC_EncodePriority>
 800414c:	4602      	mov	r2, r0
 800414e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff5f 	bl	8004018 <__NVIC_SetPriority>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff33 	bl	8003fdc <__NVIC_EnableIRQ>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ffa4 	bl	80040d4 <SysTick_Config>
 800418c:	4603      	mov	r3, r0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d005      	beq.n	80041ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2204      	movs	r2, #4
 80041b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e037      	b.n	800422a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 020e 	bic.w	r2, r2, #14
 80041c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004206:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00c      	beq.n	800422a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004228:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d00d      	beq.n	800427c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2204      	movs	r2, #4
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e047      	b.n	800430c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020e 	bic.w	r2, r2, #14
 800428a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f202 	lsl.w	r2, r1, r2
 80042be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
    }
  }
  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004326:	e15a      	b.n	80045de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 814c 	beq.w	80045d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d005      	beq.n	8004358 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004354:	2b02      	cmp	r3, #2
 8004356:	d130      	bne.n	80043ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800438e:	2201      	movs	r2, #1
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f003 0201 	and.w	r2, r3, #1
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d017      	beq.n	80043f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d123      	bne.n	800444a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	220f      	movs	r2, #15
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	6939      	ldr	r1, [r7, #16]
 8004446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	2203      	movs	r2, #3
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0203 	and.w	r2, r3, #3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80a6 	beq.w	80045d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448c:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <HAL_GPIO_Init+0x2e4>)
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	4a5a      	ldr	r2, [pc, #360]	; (80045fc <HAL_GPIO_Init+0x2e4>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6613      	str	r3, [r2, #96]	; 0x60
 8004498:	4b58      	ldr	r3, [pc, #352]	; (80045fc <HAL_GPIO_Init+0x2e4>)
 800449a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044a4:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	3302      	adds	r3, #2
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	220f      	movs	r2, #15
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044ce:	d01f      	beq.n	8004510 <HAL_GPIO_Init+0x1f8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a4c      	ldr	r2, [pc, #304]	; (8004604 <HAL_GPIO_Init+0x2ec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d019      	beq.n	800450c <HAL_GPIO_Init+0x1f4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <HAL_GPIO_Init+0x2f0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <HAL_GPIO_Init+0x1f0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a4a      	ldr	r2, [pc, #296]	; (800460c <HAL_GPIO_Init+0x2f4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00d      	beq.n	8004504 <HAL_GPIO_Init+0x1ec>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a49      	ldr	r2, [pc, #292]	; (8004610 <HAL_GPIO_Init+0x2f8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d007      	beq.n	8004500 <HAL_GPIO_Init+0x1e8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a48      	ldr	r2, [pc, #288]	; (8004614 <HAL_GPIO_Init+0x2fc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_GPIO_Init+0x1e4>
 80044f8:	2305      	movs	r3, #5
 80044fa:	e00a      	b.n	8004512 <HAL_GPIO_Init+0x1fa>
 80044fc:	2306      	movs	r3, #6
 80044fe:	e008      	b.n	8004512 <HAL_GPIO_Init+0x1fa>
 8004500:	2304      	movs	r3, #4
 8004502:	e006      	b.n	8004512 <HAL_GPIO_Init+0x1fa>
 8004504:	2303      	movs	r3, #3
 8004506:	e004      	b.n	8004512 <HAL_GPIO_Init+0x1fa>
 8004508:	2302      	movs	r3, #2
 800450a:	e002      	b.n	8004512 <HAL_GPIO_Init+0x1fa>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_GPIO_Init+0x1fa>
 8004510:	2300      	movs	r3, #0
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	f002 0203 	and.w	r2, r2, #3
 8004518:	0092      	lsls	r2, r2, #2
 800451a:	4093      	lsls	r3, r2
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004522:	4937      	ldr	r1, [pc, #220]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	3302      	adds	r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004530:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_GPIO_Init+0x300>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004554:	4a30      	ldr	r2, [pc, #192]	; (8004618 <HAL_GPIO_Init+0x300>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800455a:	4b2f      	ldr	r3, [pc, #188]	; (8004618 <HAL_GPIO_Init+0x300>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800457e:	4a26      	ldr	r2, [pc, #152]	; (8004618 <HAL_GPIO_Init+0x300>)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004584:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_GPIO_Init+0x300>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_GPIO_Init+0x300>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_GPIO_Init+0x300>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045d2:	4a11      	ldr	r2, [pc, #68]	; (8004618 <HAL_GPIO_Init+0x300>)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f ae9d 	bne.w	8004328 <HAL_GPIO_Init+0x10>
  }
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40021000 	.word	0x40021000
 8004600:	40010000 	.word	0x40010000
 8004604:	48000400 	.word	0x48000400
 8004608:	48000800 	.word	0x48000800
 800460c:	48000c00 	.word	0x48000c00
 8004610:	48001000 	.word	0x48001000
 8004614:	48001400 	.word	0x48001400
 8004618:	40010400 	.word	0x40010400

0800461c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
 8004628:	4613      	mov	r3, r2
 800462a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800462c:	787b      	ldrb	r3, [r7, #1]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004632:	887a      	ldrh	r2, [r7, #2]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004638:	e002      	b.n	8004640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e08d      	b.n	800477a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fe f924 	bl	80028c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800469c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e006      	b.n	80046d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d108      	bne.n	80046ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	e007      	b.n	80046fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800470c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	461a      	mov	r2, r3
 8004790:	460b      	mov	r3, r1
 8004792:	817b      	strh	r3, [r7, #10]
 8004794:	4613      	mov	r3, r2
 8004796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	f040 80fd 	bne.w	80049a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_I2C_Master_Transmit+0x30>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0f6      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x21e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047bc:	f7ff fbae 	bl	8003f1c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	2319      	movs	r3, #25
 80047c8:	2201      	movs	r2, #1
 80047ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 faf6 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0e1      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2210      	movs	r2, #16
 80047ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	893a      	ldrh	r2, [r7, #8]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	2bff      	cmp	r3, #255	; 0xff
 800480e:	d906      	bls.n	800481e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	22ff      	movs	r2, #255	; 0xff
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e007      	b.n	800482e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d024      	beq.n	8004880 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3301      	adds	r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	4b4e      	ldr	r3, [pc, #312]	; (80049ac <HAL_I2C_Master_Transmit+0x228>)
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fcf1 	bl	8005260 <I2C_TransferConfig>
 800487e:	e066      	b.n	800494e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	b2da      	uxtb	r2, r3
 8004886:	8979      	ldrh	r1, [r7, #10]
 8004888:	4b48      	ldr	r3, [pc, #288]	; (80049ac <HAL_I2C_Master_Transmit+0x228>)
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fce6 	bl	8005260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004894:	e05b      	b.n	800494e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	6a39      	ldr	r1, [r7, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fae9 	bl	8004e72 <I2C_WaitOnTXISFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07b      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d034      	beq.n	800494e <HAL_I2C_Master_Transmit+0x1ca>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d130      	bne.n	800494e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fa62 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e04d      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	2bff      	cmp	r3, #255	; 0xff
 800490e:	d90e      	bls.n	800492e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	22ff      	movs	r2, #255	; 0xff
 8004914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	b2da      	uxtb	r2, r3
 800491c:	8979      	ldrh	r1, [r7, #10]
 800491e:	2300      	movs	r3, #0
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fc9a 	bl	8005260 <I2C_TransferConfig>
 800492c:	e00f      	b.n	800494e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	b2da      	uxtb	r2, r3
 800493e:	8979      	ldrh	r1, [r7, #10]
 8004940:	2300      	movs	r3, #0
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fc89 	bl	8005260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d19e      	bne.n	8004896 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	6a39      	ldr	r1, [r7, #32]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 facf 	bl	8004f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e01a      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <HAL_I2C_Master_Transmit+0x22c>)
 8004980:	400b      	ands	r3, r1
 8004982:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	80002000 	.word	0x80002000
 80049b0:	fe00e800 	.word	0xfe00e800

080049b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	461a      	mov	r2, r3
 80049c0:	460b      	mov	r3, r1
 80049c2:	817b      	strh	r3, [r7, #10]
 80049c4:	4613      	mov	r3, r2
 80049c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	f040 80db 	bne.w	8004b8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_I2C_Master_Receive+0x30>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e0d4      	b.n	8004b8e <HAL_I2C_Master_Receive+0x1da>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ec:	f7ff fa96 	bl	8003f1c <HAL_GetTick>
 80049f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	2319      	movs	r3, #25
 80049f8:	2201      	movs	r2, #1
 80049fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f9de 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0bf      	b.n	8004b8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2222      	movs	r2, #34	; 0x22
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2210      	movs	r2, #16
 8004a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	893a      	ldrh	r2, [r7, #8]
 8004a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2bff      	cmp	r3, #255	; 0xff
 8004a3e:	d90e      	bls.n	8004a5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	8979      	ldrh	r1, [r7, #10]
 8004a4e:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_I2C_Master_Receive+0x1e4>)
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fc02 	bl	8005260 <I2C_TransferConfig>
 8004a5c:	e06d      	b.n	8004b3a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	8979      	ldrh	r1, [r7, #10]
 8004a70:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <HAL_I2C_Master_Receive+0x1e4>)
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fbf1 	bl	8005260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004a7e:	e05c      	b.n	8004b3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	6a39      	ldr	r1, [r7, #32]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fa7f 	bl	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e07c      	b.n	8004b8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d034      	beq.n	8004b3a <HAL_I2C_Master_Receive+0x186>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d130      	bne.n	8004b3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2180      	movs	r1, #128	; 0x80
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f96c 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e04d      	b.n	8004b8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2bff      	cmp	r3, #255	; 0xff
 8004afa:	d90e      	bls.n	8004b1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	8979      	ldrh	r1, [r7, #10]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fba4 	bl	8005260 <I2C_TransferConfig>
 8004b18:	e00f      	b.n	8004b3a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	8979      	ldrh	r1, [r7, #10]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fb93 	bl	8005260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d19d      	bne.n	8004a80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	6a39      	ldr	r1, [r7, #32]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f9d9 	bl	8004f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e01a      	b.n	8004b8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_I2C_Master_Receive+0x1e8>)
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	80002400 	.word	0x80002400
 8004b9c:	fe00e800 	.word	0xfe00e800

08004ba0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	; 0x28
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	460b      	mov	r3, r1
 8004bae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	f040 80d6 	bne.w	8004d6e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e0cc      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_I2C_IsDeviceReady+0x44>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e0c5      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d107      	bne.n	8004c12 <HAL_I2C_IsDeviceReady+0x72>
 8004c02:	897b      	ldrh	r3, [r7, #10]
 8004c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c10:	e006      	b.n	8004c20 <HAL_I2C_IsDeviceReady+0x80>
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c26:	f7ff f979 	bl	8003f1c <HAL_GetTick>
 8004c2a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c58:	e034      	b.n	8004cc4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d01a      	beq.n	8004c98 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c62:	f7ff f95b 	bl	8003f1c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d302      	bcc.n	8004c78 <HAL_I2C_IsDeviceReady+0xd8>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e06b      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cc4:	7ffb      	ldrb	r3, [r7, #31]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <HAL_I2C_IsDeviceReady+0x130>
 8004cca:	7fbb      	ldrb	r3, [r7, #30]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0c4      	beq.n	8004c5a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d01a      	beq.n	8004d14 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f869 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e03b      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e02d      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2120      	movs	r1, #32
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f84e 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e020      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	3301      	adds	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	f63f af56 	bhi.w	8004bfa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d103      	bne.n	8004d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d007      	beq.n	8004db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	619a      	str	r2, [r3, #24]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd0:	e03b      	b.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f962 	bl	80050a0 <I2C_IsErrorOccurred>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e041      	b.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d02d      	beq.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7ff f895 	bl	8003f1c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d122      	bne.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d113      	bne.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e00f      	b.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d0b4      	beq.n	8004dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e7e:	e033      	b.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f90b 	bl	80050a0 <I2C_IsErrorOccurred>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e031      	b.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d025      	beq.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7ff f83e 	bl	8003f1c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11a      	bne.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d013      	beq.n	8004ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e007      	b.n	8004ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d1c4      	bne.n	8004e80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f0c:	e02f      	b.n	8004f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f8c4 	bl	80050a0 <I2C_IsErrorOccurred>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e02d      	b.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7fe fffb 	bl	8003f1c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11a      	bne.n	8004f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d013      	beq.n	8004f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e007      	b.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d1c8      	bne.n	8004f0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f98:	e071      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f87e 	bl	80050a0 <I2C_IsErrorOccurred>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d13b      	bne.n	8005034 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d138      	bne.n	8005034 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d105      	bne.n	8004fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d121      	bne.n	800502e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800500c:	400b      	ands	r3, r1
 800500e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
 800502c:	e002      	b.n	8005034 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005034:	f7fe ff72 	bl	8003f1c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d119      	bne.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d116      	bne.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d00f      	beq.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b04      	cmp	r3, #4
 800508a:	d002      	beq.n	8005092 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d083      	beq.n	8004f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	fe00e800 	.word	0xfe00e800

080050a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d068      	beq.n	800519e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2210      	movs	r2, #16
 80050d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050d4:	e049      	b.n	800516a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d045      	beq.n	800516a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fe ff1d 	bl	8003f1c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_IsErrorOccurred+0x54>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d13a      	bne.n	800516a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005116:	d121      	bne.n	800515c <I2C_IsErrorOccurred+0xbc>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800511e:	d01d      	beq.n	800515c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b20      	cmp	r3, #32
 8005124:	d01a      	beq.n	800515c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005136:	f7fe fef1 	bl	8003f1c <HAL_GetTick>
 800513a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800513c:	e00e      	b.n	800515c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800513e:	f7fe feed 	bl	8003f1c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b19      	cmp	r3, #25
 800514a:	d907      	bls.n	800515c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800515a:	e006      	b.n	800516a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d1e9      	bne.n	800513e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b20      	cmp	r3, #32
 8005176:	d003      	beq.n	8005180 <I2C_IsErrorOccurred+0xe0>
 8005178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0aa      	beq.n	80050d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2220      	movs	r2, #32
 800518e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f043 0308 	orr.w	r3, r3, #8
 80051d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01c      	beq.n	800524e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fdaf 	bl	8004d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <I2C_IsErrorOccurred+0x1bc>)
 8005226:	400b      	ands	r3, r1
 8005228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	431a      	orrs	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800524e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005252:	4618      	mov	r0, r3
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	fe00e800 	.word	0xfe00e800

08005260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	4613      	mov	r3, r2
 8005270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005278:	7a7b      	ldrb	r3, [r7, #9]
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	4313      	orrs	r3, r2
 800528a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	0d5b      	lsrs	r3, r3, #21
 800529a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800529e:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <I2C_TransferConfig+0x60>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	43db      	mvns	r3, r3
 80052a4:	ea02 0103 	and.w	r1, r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	03ff63ff 	.word	0x03ff63ff

080052c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d138      	bne.n	800534c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e032      	b.n	800534e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	; 0x24
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	d139      	bne.n	80053e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800537a:	2302      	movs	r3, #2
 800537c:	e033      	b.n	80053e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2224      	movs	r2, #36	; 0x24
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d141      	bne.n	8005486 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005402:	4b4b      	ldr	r3, [pc, #300]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d131      	bne.n	8005474 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005410:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005416:	4a46      	ldr	r2, [pc, #280]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005420:	4b43      	ldr	r3, [pc, #268]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005428:	4a41      	ldr	r2, [pc, #260]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800542e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005430:	4b40      	ldr	r3, [pc, #256]	; (8005534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2232      	movs	r2, #50	; 0x32
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	0c9b      	lsrs	r3, r3, #18
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005446:	e002      	b.n	800544e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3b01      	subs	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800544e:	4b38      	ldr	r3, [pc, #224]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545a:	d102      	bne.n	8005462 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f2      	bne.n	8005448 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005462:	4b33      	ldr	r3, [pc, #204]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546e:	d158      	bne.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e057      	b.n	8005524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	4a2d      	ldr	r2, [pc, #180]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005484:	e04d      	b.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548c:	d141      	bne.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800548e:	4b28      	ldr	r3, [pc, #160]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d131      	bne.n	8005500 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a2:	4a23      	ldr	r2, [pc, #140]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ac:	4b20      	ldr	r3, [pc, #128]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054b4:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054bc:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2232      	movs	r2, #50	; 0x32
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	0c9b      	lsrs	r3, r3, #18
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054d2:	e002      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d102      	bne.n	80054ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f2      	bne.n	80054d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fa:	d112      	bne.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e011      	b.n	8005524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005510:	e007      	b.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800551a:	4a05      	ldr	r2, [pc, #20]	; (8005530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005520:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40007000 	.word	0x40007000
 8005534:	200009d8 	.word	0x200009d8
 8005538:	431bde83 	.word	0x431bde83

0800553c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a04      	ldr	r2, [pc, #16]	; (8005558 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800554a:	6093      	str	r3, [r2, #8]
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40007000 	.word	0x40007000

0800555c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e301      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d075      	beq.n	8005666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557a:	4ba3      	ldr	r3, [pc, #652]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005584:	4ba0      	ldr	r3, [pc, #640]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d102      	bne.n	800559a <HAL_RCC_OscConfig+0x3e>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d002      	beq.n	80055a0 <HAL_RCC_OscConfig+0x44>
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d10b      	bne.n	80055b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a0:	4b99      	ldr	r3, [pc, #612]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d05b      	beq.n	8005664 <HAL_RCC_OscConfig+0x108>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d157      	bne.n	8005664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e2dc      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	d106      	bne.n	80055d0 <HAL_RCC_OscConfig+0x74>
 80055c2:	4b91      	ldr	r3, [pc, #580]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a90      	ldr	r2, [pc, #576]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e01d      	b.n	800560c <HAL_RCC_OscConfig+0xb0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x98>
 80055da:	4b8b      	ldr	r3, [pc, #556]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a8a      	ldr	r2, [pc, #552]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a87      	ldr	r2, [pc, #540]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e00b      	b.n	800560c <HAL_RCC_OscConfig+0xb0>
 80055f4:	4b84      	ldr	r3, [pc, #528]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a83      	ldr	r2, [pc, #524]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b81      	ldr	r3, [pc, #516]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a80      	ldr	r2, [pc, #512]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d013      	beq.n	800563c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fe fc82 	bl	8003f1c <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800561c:	f7fe fc7e 	bl	8003f1c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e2a1      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800562e:	4b76      	ldr	r3, [pc, #472]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0xc0>
 800563a:	e014      	b.n	8005666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fe fc6e 	bl	8003f1c <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005644:	f7fe fc6a 	bl	8003f1c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	; 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e28d      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005656:	4b6c      	ldr	r3, [pc, #432]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0xe8>
 8005662:	e000      	b.n	8005666 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d075      	beq.n	800575e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005672:	4b65      	ldr	r3, [pc, #404]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800567c:	4b62      	ldr	r3, [pc, #392]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d102      	bne.n	8005692 <HAL_RCC_OscConfig+0x136>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d002      	beq.n	8005698 <HAL_RCC_OscConfig+0x13c>
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d11f      	bne.n	80056d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005698:	4b5b      	ldr	r3, [pc, #364]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_OscConfig+0x154>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e260      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b0:	4b55      	ldr	r3, [pc, #340]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	4952      	ldr	r1, [pc, #328]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056c4:	4b51      	ldr	r3, [pc, #324]	; (800580c <HAL_RCC_OscConfig+0x2b0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe fbdb 	bl	8003e84 <HAL_InitTick>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d043      	beq.n	800575c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e24c      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d023      	beq.n	8005728 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e0:	4b49      	ldr	r3, [pc, #292]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a48      	ldr	r2, [pc, #288]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fe fc16 	bl	8003f1c <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f4:	f7fe fc12 	bl	8003f1c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e235      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005706:	4b40      	ldr	r3, [pc, #256]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005712:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	061b      	lsls	r3, r3, #24
 8005720:	4939      	ldr	r1, [pc, #228]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	4313      	orrs	r3, r2
 8005724:	604b      	str	r3, [r1, #4]
 8005726:	e01a      	b.n	800575e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005728:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a36      	ldr	r2, [pc, #216]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800572e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fe fbf2 	bl	8003f1c <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573c:	f7fe fbee 	bl	8003f1c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e211      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800574e:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x1e0>
 800575a:	e000      	b.n	800575e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d03c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01c      	beq.n	80057ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005772:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 8005774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005778:	4a23      	ldr	r2, [pc, #140]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005782:	f7fe fbcb 	bl	8003f1c <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578a:	f7fe fbc7 	bl	8003f1c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e1ea      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800579c:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0ef      	beq.n	800578a <HAL_RCC_OscConfig+0x22e>
 80057aa:	e01b      	b.n	80057e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ac:	4b16      	ldr	r3, [pc, #88]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80057ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fe fbae 	bl	8003f1c <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fe fbaa 	bl	8003f1c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1cd      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ef      	bne.n	80057c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80ab 	beq.w	8005948 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057f2:	2300      	movs	r3, #0
 80057f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057f6:	4b04      	ldr	r3, [pc, #16]	; (8005808 <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_RCC_OscConfig+0x2b4>
 8005802:	2301      	movs	r3, #1
 8005804:	e005      	b.n	8005812 <HAL_RCC_OscConfig+0x2b6>
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	200009dc 	.word	0x200009dc
 8005810:	2300      	movs	r3, #0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005816:	4bad      	ldr	r3, [pc, #692]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	4aac      	ldr	r2, [pc, #688]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005820:	6593      	str	r3, [r2, #88]	; 0x58
 8005822:	4baa      	ldr	r3, [pc, #680]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800582e:	2301      	movs	r3, #1
 8005830:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005832:	4ba7      	ldr	r3, [pc, #668]	; (8005ad0 <HAL_RCC_OscConfig+0x574>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d118      	bne.n	8005870 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800583e:	4ba4      	ldr	r3, [pc, #656]	; (8005ad0 <HAL_RCC_OscConfig+0x574>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4aa3      	ldr	r2, [pc, #652]	; (8005ad0 <HAL_RCC_OscConfig+0x574>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584a:	f7fe fb67 	bl	8003f1c <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005852:	f7fe fb63 	bl	8003f1c <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e186      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005864:	4b9a      	ldr	r3, [pc, #616]	; (8005ad0 <HAL_RCC_OscConfig+0x574>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d108      	bne.n	800588a <HAL_RCC_OscConfig+0x32e>
 8005878:	4b94      	ldr	r3, [pc, #592]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	4a93      	ldr	r2, [pc, #588]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005888:	e024      	b.n	80058d4 <HAL_RCC_OscConfig+0x378>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b05      	cmp	r3, #5
 8005890:	d110      	bne.n	80058b4 <HAL_RCC_OscConfig+0x358>
 8005892:	4b8e      	ldr	r3, [pc, #568]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	4a8c      	ldr	r2, [pc, #560]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800589a:	f043 0304 	orr.w	r3, r3, #4
 800589e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a2:	4b8a      	ldr	r3, [pc, #552]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a8:	4a88      	ldr	r2, [pc, #544]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b2:	e00f      	b.n	80058d4 <HAL_RCC_OscConfig+0x378>
 80058b4:	4b85      	ldr	r3, [pc, #532]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	4a84      	ldr	r2, [pc, #528]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c4:	4b81      	ldr	r3, [pc, #516]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ca:	4a80      	ldr	r2, [pc, #512]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058cc:	f023 0304 	bic.w	r3, r3, #4
 80058d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d016      	beq.n	800590a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fe fb1e 	bl	8003f1c <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fe fb1a 	bl	8003f1c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e13b      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	4b74      	ldr	r3, [pc, #464]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0ed      	beq.n	80058e4 <HAL_RCC_OscConfig+0x388>
 8005908:	e015      	b.n	8005936 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fe fb07 	bl	8003f1c <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005910:	e00a      	b.n	8005928 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fe fb03 	bl	8003f1c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e124      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005928:	4b68      	ldr	r3, [pc, #416]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ed      	bne.n	8005912 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005936:	7ffb      	ldrb	r3, [r7, #31]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d105      	bne.n	8005948 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593c:	4b63      	ldr	r3, [pc, #396]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	4a62      	ldr	r2, [pc, #392]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005946:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d03c      	beq.n	80059ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01c      	beq.n	8005996 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800595c:	4b5b      	ldr	r3, [pc, #364]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800595e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005962:	4a5a      	ldr	r2, [pc, #360]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596c:	f7fe fad6 	bl	8003f1c <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005974:	f7fe fad2 	bl	8003f1c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0f5      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005986:	4b51      	ldr	r3, [pc, #324]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ef      	beq.n	8005974 <HAL_RCC_OscConfig+0x418>
 8005994:	e01b      	b.n	80059ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005996:	4b4d      	ldr	r3, [pc, #308]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fe fab9 	bl	8003f1c <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ae:	f7fe fab5 	bl	8003f1c <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e0d8      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059c0:	4b42      	ldr	r3, [pc, #264]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80059c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1ef      	bne.n	80059ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80cc 	beq.w	8005b70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059d8:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 030c 	and.w	r3, r3, #12
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	f000 8086 	beq.w	8005af2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d15a      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ee:	4b37      	ldr	r3, [pc, #220]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a36      	ldr	r2, [pc, #216]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 80059f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fa:	f7fe fa8f 	bl	8003f1c <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fe fa8b 	bl	8003f1c <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0ae      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a14:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_RCC_OscConfig+0x578>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6a11      	ldr	r1, [r2, #32]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a30:	3a01      	subs	r2, #1
 8005a32:	0112      	lsls	r2, r2, #4
 8005a34:	4311      	orrs	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a3a:	0212      	lsls	r2, r2, #8
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a42:	0852      	lsrs	r2, r2, #1
 8005a44:	3a01      	subs	r2, #1
 8005a46:	0552      	lsls	r2, r2, #21
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a4e:	0852      	lsrs	r2, r2, #1
 8005a50:	3a01      	subs	r2, #1
 8005a52:	0652      	lsls	r2, r2, #25
 8005a54:	4311      	orrs	r1, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a5a:	06d2      	lsls	r2, r2, #27
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	491b      	ldr	r1, [pc, #108]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a15      	ldr	r2, [pc, #84]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fe fa4e 	bl	8003f1c <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a84:	f7fe fa4a 	bl	8003f1c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e06d      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a96:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x528>
 8005aa2:	e065      	b.n	8005b70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <HAL_RCC_OscConfig+0x570>)
 8005aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fe fa34 	bl	8003f1c <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab6:	e00f      	b.n	8005ad8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fe fa30 	bl	8003f1c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d908      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e053      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40007000 	.word	0x40007000
 8005ad4:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad8:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_RCC_OscConfig+0x620>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e9      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005ae4:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <HAL_RCC_OscConfig+0x620>)
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	4924      	ldr	r1, [pc, #144]	; (8005b7c <HAL_RCC_OscConfig+0x620>)
 8005aea:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_OscConfig+0x624>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60cb      	str	r3, [r1, #12]
 8005af0:	e03e      	b.n	8005b70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e039      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005afe:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <HAL_RCC_OscConfig+0x620>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f003 0203 	and.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d12c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d123      	bne.n	8005b6c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d11b      	bne.n	8005b6c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d113      	bne.n	8005b6c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	3b01      	subs	r3, #1
 8005b52:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d109      	bne.n	8005b6c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	3b01      	subs	r3, #1
 8005b66:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	feeefffc 	.word	0xfeeefffc

08005b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e11e      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b9c:	4b91      	ldr	r3, [pc, #580]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d910      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005baa:	4b8e      	ldr	r3, [pc, #568]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 020f 	bic.w	r2, r3, #15
 8005bb2:	498c      	ldr	r1, [pc, #560]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b8a      	ldr	r3, [pc, #552]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e106      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d073      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d129      	bne.n	8005c34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be0:	4b81      	ldr	r3, [pc, #516]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0f4      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005bf0:	f000 f99e 	bl	8005f30 <RCC_GetSysClockFreqFromPLLSource>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4a7c      	ldr	r2, [pc, #496]	; (8005dec <HAL_RCC_ClockConfig+0x268>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d93f      	bls.n	8005c7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bfe:	4b7a      	ldr	r3, [pc, #488]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d033      	beq.n	8005c7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d12f      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c1e:	4b72      	ldr	r3, [pc, #456]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c26:	4a70      	ldr	r2, [pc, #448]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e024      	b.n	8005c7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3c:	4b6a      	ldr	r3, [pc, #424]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0c6      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c4c:	4b66      	ldr	r3, [pc, #408]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0be      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c5c:	f000 f8ce 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4a61      	ldr	r2, [pc, #388]	; (8005dec <HAL_RCC_ClockConfig+0x268>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d909      	bls.n	8005c7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c6a:	4b5f      	ldr	r3, [pc, #380]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c72:	4a5d      	ldr	r2, [pc, #372]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c7e:	4b5a      	ldr	r3, [pc, #360]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 0203 	bic.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4957      	ldr	r1, [pc, #348]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c90:	f7fe f944 	bl	8003f1c <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fe f940 	bl	8003f1c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e095      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	4b4e      	ldr	r3, [pc, #312]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 020c 	and.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1eb      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d023      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cd8:	4b43      	ldr	r3, [pc, #268]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4a42      	ldr	r2, [pc, #264]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005cde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ce2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005cf0:	4b3d      	ldr	r3, [pc, #244]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cf8:	4a3b      	ldr	r2, [pc, #236]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d00:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4936      	ldr	r1, [pc, #216]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b80      	cmp	r3, #128	; 0x80
 8005d18:	d105      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d1a:	4b33      	ldr	r3, [pc, #204]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4a32      	ldr	r2, [pc, #200]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d26:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d21d      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d34:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 020f 	bic.w	r2, r3, #15
 8005d3c:	4929      	ldr	r1, [pc, #164]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d44:	f7fe f8ea 	bl	8003f1c <HAL_GetTick>
 8005d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fe f8e6 	bl	8003f1c <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e03b      	b.n	8005dda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <HAL_RCC_ClockConfig+0x260>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d1ed      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4917      	ldr	r1, [pc, #92]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9a:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	490f      	ldr	r1, [pc, #60]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dae:	f000 f825 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <HAL_RCC_ClockConfig+0x264>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	490c      	ldr	r1, [pc, #48]	; (8005df0 <HAL_RCC_ClockConfig+0x26c>)
 8005dc0:	5ccb      	ldrb	r3, [r1, r3]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <HAL_RCC_ClockConfig+0x270>)
 8005dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_RCC_ClockConfig+0x274>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe f856 	bl	8003e84 <HAL_InitTick>
 8005dd8:	4603      	mov	r3, r0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40022000 	.word	0x40022000
 8005de8:	40021000 	.word	0x40021000
 8005dec:	04c4b400 	.word	0x04c4b400
 8005df0:	0800a300 	.word	0x0800a300
 8005df4:	200009d8 	.word	0x200009d8
 8005df8:	200009dc 	.word	0x200009dc

08005dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e02:	4b2c      	ldr	r3, [pc, #176]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d102      	bne.n	8005e14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	e047      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e14:	4b27      	ldr	r3, [pc, #156]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 030c 	and.w	r3, r3, #12
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d102      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e20:	4b26      	ldr	r3, [pc, #152]	; (8005ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	e03e      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e26:	4b23      	ldr	r3, [pc, #140]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	d136      	bne.n	8005ea0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e32:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	3301      	adds	r3, #1
 8005e48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d10c      	bne.n	8005e6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e5a:	68d2      	ldr	r2, [r2, #12]
 8005e5c:	0a12      	lsrs	r2, r2, #8
 8005e5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	617b      	str	r3, [r7, #20]
      break;
 8005e68:	e00c      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e74:	68d2      	ldr	r2, [r2, #12]
 8005e76:	0a12      	lsrs	r2, r2, #8
 8005e78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
      break;
 8005e82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	0e5b      	lsrs	r3, r3, #25
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	3301      	adds	r3, #1
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e001      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ea4:	693b      	ldr	r3, [r7, #16]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	00f42400 	.word	0x00f42400
 8005ebc:	007a1200 	.word	0x007a1200

08005ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ec4:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	200009d8 	.word	0x200009d8

08005ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005edc:	f7ff fff0 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	4904      	ldr	r1, [pc, #16]	; (8005f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eee:	5ccb      	ldrb	r3, [r1, r3]
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40021000 	.word	0x40021000
 8005f00:	0800a310 	.word	0x0800a310

08005f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f08:	f7ff ffda 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0adb      	lsrs	r3, r3, #11
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4904      	ldr	r1, [pc, #16]	; (8005f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0800a310 	.word	0x0800a310

08005f30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f40:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d10c      	bne.n	8005f6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	4a14      	ldr	r2, [pc, #80]	; (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f5e:	68d2      	ldr	r2, [r2, #12]
 8005f60:	0a12      	lsrs	r2, r2, #8
 8005f62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	617b      	str	r3, [r7, #20]
    break;
 8005f6c:	e00c      	b.n	8005f88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	4a0e      	ldr	r2, [pc, #56]	; (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f78:	68d2      	ldr	r2, [r2, #12]
 8005f7a:	0a12      	lsrs	r2, r2, #8
 8005f7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
    break;
 8005f86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	0e5b      	lsrs	r3, r3, #25
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	3301      	adds	r3, #1
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fa2:	687b      	ldr	r3, [r7, #4]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	007a1200 	.word	0x007a1200
 8005fb8:	00f42400 	.word	0x00f42400

08005fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fc8:	2300      	movs	r3, #0
 8005fca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8098 	beq.w	800610a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fde:	4b43      	ldr	r3, [pc, #268]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fea:	4b40      	ldr	r3, [pc, #256]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	4a3f      	ldr	r2, [pc, #252]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff6:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006002:	2301      	movs	r3, #1
 8006004:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006006:	4b3a      	ldr	r3, [pc, #232]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a39      	ldr	r2, [pc, #228]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800600c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006012:	f7fd ff83 	bl	8003f1c <HAL_GetTick>
 8006016:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006018:	e009      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601a:	f7fd ff7f 	bl	8003f1c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d902      	bls.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	74fb      	strb	r3, [r7, #19]
        break;
 800602c:	e005      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800602e:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0ef      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800603a:	7cfb      	ldrb	r3, [r7, #19]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d159      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006040:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01e      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	d019      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800605c:	4b23      	ldr	r3, [pc, #140]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006068:	4b20      	ldr	r3, [pc, #128]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606e:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006078:	4b1c      	ldr	r3, [pc, #112]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fd ff3f 	bl	8003f1c <HAL_GetTick>
 800609e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a0:	e00b      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a2:	f7fd ff3b 	bl	8003f1c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d902      	bls.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	74fb      	strb	r3, [r7, #19]
            break;
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0ec      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060c8:	7cfb      	ldrb	r3, [r7, #19]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060e4:	e008      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060e6:	7cfb      	ldrb	r3, [r7, #19]
 80060e8:	74bb      	strb	r3, [r7, #18]
 80060ea:	e005      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060f8:	7c7b      	ldrb	r3, [r7, #17]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d105      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060fe:	4ba6      	ldr	r3, [pc, #664]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006102:	4aa5      	ldr	r2, [pc, #660]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006108:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006116:	4ba0      	ldr	r3, [pc, #640]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f023 0203 	bic.w	r2, r3, #3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	499c      	ldr	r1, [pc, #624]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006138:	4b97      	ldr	r3, [pc, #604]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f023 020c 	bic.w	r2, r3, #12
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4994      	ldr	r1, [pc, #592]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800615a:	4b8f      	ldr	r3, [pc, #572]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	498b      	ldr	r1, [pc, #556]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800617c:	4b86      	ldr	r3, [pc, #536]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	4983      	ldr	r1, [pc, #524]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800619e:	4b7e      	ldr	r3, [pc, #504]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	497a      	ldr	r1, [pc, #488]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061c0:	4b75      	ldr	r3, [pc, #468]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	4972      	ldr	r1, [pc, #456]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061e2:	4b6d      	ldr	r3, [pc, #436]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	4969      	ldr	r1, [pc, #420]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006204:	4b64      	ldr	r3, [pc, #400]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	4961      	ldr	r1, [pc, #388]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006226:	4b5c      	ldr	r3, [pc, #368]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	4958      	ldr	r1, [pc, #352]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d015      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006248:	4b53      	ldr	r3, [pc, #332]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	4950      	ldr	r1, [pc, #320]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d105      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006268:	4b4b      	ldr	r3, [pc, #300]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a4a      	ldr	r2, [pc, #296]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006272:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627c:	2b00      	cmp	r3, #0
 800627e:	d015      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006280:	4b45      	ldr	r3, [pc, #276]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4942      	ldr	r1, [pc, #264]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a0:	4b3d      	ldr	r3, [pc, #244]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d015      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062b8:	4b37      	ldr	r3, [pc, #220]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	4934      	ldr	r1, [pc, #208]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062d6:	d105      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d8:	4b2f      	ldr	r3, [pc, #188]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a2e      	ldr	r2, [pc, #184]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062f0:	4b29      	ldr	r3, [pc, #164]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	4926      	ldr	r1, [pc, #152]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006310:	4b21      	ldr	r3, [pc, #132]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a20      	ldr	r2, [pc, #128]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800631a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	4918      	ldr	r1, [pc, #96]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a12      	ldr	r2, [pc, #72]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	490a      	ldr	r1, [pc, #40]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800638c:	7cbb      	ldrb	r3, [r7, #18]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000

0800639c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e042      	b.n	8006434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fc faf5 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	; 0x24
 80063ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fe96 	bl	8007118 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fbf7 	bl	8006be0 <UART_SetConfig>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e01b      	b.n	8006434 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 ff15 	bl	800725c <UART_CheckIdleState>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	; 0x28
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	2b20      	cmp	r3, #32
 8006454:	d17b      	bne.n	800654e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_Transmit+0x26>
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e074      	b.n	8006550 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2221      	movs	r2, #33	; 0x21
 8006472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006476:	f7fd fd51 	bl	8003f1c <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x6c>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b0:	e030      	b.n	8006514 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 ff77 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e03d      	b.n	8006550 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3302      	adds	r3, #2
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e007      	b.n	8006502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1c8      	bne.n	80064b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2200      	movs	r2, #0
 8006528:	2140      	movs	r1, #64	; 0x40
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 ff40 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e006      	b.n	8006550 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800654e:	2302      	movs	r3, #2
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b0ba      	sub	sp, #232	; 0xe8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800657e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006582:	f640 030f 	movw	r3, #2063	; 0x80f
 8006586:	4013      	ands	r3, r2
 8006588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800658c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11b      	bne.n	80065cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d015      	beq.n	80065cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d105      	bne.n	80065b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 82e3 	beq.w	8006b88 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
      }
      return;
 80065ca:	e2dd      	b.n	8006b88 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8123 	beq.w	800681c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065da:	4b8d      	ldr	r3, [pc, #564]	; (8006810 <HAL_UART_IRQHandler+0x2b8>)
 80065dc:	4013      	ands	r3, r2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065e6:	4b8b      	ldr	r3, [pc, #556]	; (8006814 <HAL_UART_IRQHandler+0x2bc>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8116 	beq.w	800681c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_UART_IRQHandler+0xc8>
 80065fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2201      	movs	r2, #1
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f043 0201 	orr.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0xf8>
 800662c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2202      	movs	r2, #2
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <HAL_UART_IRQHandler+0x128>
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2204      	movs	r2, #4
 800666e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f043 0202 	orr.w	r2, r3, #2
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d017      	beq.n	80066bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006698:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800669c:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <HAL_UART_IRQHandler+0x2b8>)
 800669e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2208      	movs	r2, #8
 80066aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	f043 0208 	orr.w	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d012      	beq.n	80066ee <HAL_UART_IRQHandler+0x196>
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e4:	f043 0220 	orr.w	r2, r3, #32
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8249 	beq.w	8006b8c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d013      	beq.n	800672e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800674a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800674e:	2b00      	cmp	r3, #0
 8006750:	d054      	beq.n	80067fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fe99 	bl	800748a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d146      	bne.n	80067f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800677c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3308      	adds	r3, #8
 800678e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800679e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1d9      	bne.n	8006766 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d017      	beq.n	80067ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <HAL_UART_IRQHandler+0x2c0>)
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fd fd3b 	bl	8004248 <HAL_DMA_Abort_IT>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d019      	beq.n	800680c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80067e6:	4610      	mov	r0, r2
 80067e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ea:	e00f      	b.n	800680c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f9e1 	bl	8006bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f2:	e00b      	b.n	800680c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9dd 	bl	8006bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fa:	e007      	b.n	800680c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f9d9 	bl	8006bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800680a:	e1bf      	b.n	8006b8c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	bf00      	nop
    return;
 800680e:	e1bd      	b.n	8006b8c <HAL_UART_IRQHandler+0x634>
 8006810:	10000001 	.word	0x10000001
 8006814:	04000120 	.word	0x04000120
 8006818:	08007557 	.word	0x08007557

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006820:	2b01      	cmp	r3, #1
 8006822:	f040 8153 	bne.w	8006acc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 0310 	and.w	r3, r3, #16
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 814c 	beq.w	8006acc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8145 	beq.w	8006acc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2210      	movs	r2, #16
 8006848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	f040 80bb 	bne.w	80069d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 818f 	beq.w	8006b90 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800687c:	429a      	cmp	r2, r3
 800687e:	f080 8187 	bcs.w	8006b90 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	f040 8087 	bne.w	80069ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1da      	bne.n	80068a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800690e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006912:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006916:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e1      	bne.n	80068ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800693c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800694a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800694c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006950:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e3      	bne.n	8006926 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800697a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800697c:	f023 0310 	bic.w	r3, r3, #16
 8006980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800698e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006990:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800699c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e4      	bne.n	800696c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fd fbf4 	bl	8004196 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f8fd 	bl	8006bc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ce:	e0df      	b.n	8006b90 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80d1 	beq.w	8006b94 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80069f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80cc 	beq.w	8006b94 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e4      	bne.n	80069fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	623b      	str	r3, [r7, #32]
   return(result);
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a5a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e1      	bne.n	8006a32 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0310 	bic.w	r3, r3, #16
 8006a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e4      	bne.n	8006a82 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f87f 	bl	8006bc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aca:	e063      	b.n	8006b94 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <HAL_UART_IRQHandler+0x59e>
 8006ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fd72 	bl	80075d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006af4:	e051      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d014      	beq.n	8006b2c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d03a      	beq.n	8006b98 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
    }
    return;
 8006b2a:	e035      	b.n	8006b98 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <HAL_UART_IRQHandler+0x5f4>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fd1c 	bl	8007582 <UART_EndTransmit_IT>
    return;
 8006b4a:	e026      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_UART_IRQHandler+0x614>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd4b 	bl	8007600 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b6a:	e016      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d010      	beq.n	8006b9a <HAL_UART_IRQHandler+0x642>
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da0c      	bge.n	8006b9a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fd33 	bl	80075ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b86:	e008      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
      return;
 8006b88:	bf00      	nop
 8006b8a:	e006      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
    return;
 8006b8c:	bf00      	nop
 8006b8e:	e004      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
      return;
 8006b90:	bf00      	nop
 8006b92:	e002      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
      return;
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <HAL_UART_IRQHandler+0x642>
    return;
 8006b98:	bf00      	nop
  }
}
 8006b9a:	37e8      	adds	r7, #232	; 0xe8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be0:	b5b0      	push	{r4, r5, r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4baf      	ldr	r3, [pc, #700]	; (8006ec8 <UART_SetConfig+0x2e8>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	69f9      	ldr	r1, [r7, #28]
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4aa4      	ldr	r2, [pc, #656]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	69f9      	ldr	r1, [r7, #28]
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f023 010f 	bic.w	r1, r3, #15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a95      	ldr	r2, [pc, #596]	; (8006ed0 <UART_SetConfig+0x2f0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d120      	bne.n	8006cc2 <UART_SetConfig+0xe2>
 8006c80:	4b94      	ldr	r3, [pc, #592]	; (8006ed4 <UART_SetConfig+0x2f4>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d816      	bhi.n	8006cbc <UART_SetConfig+0xdc>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0xb4>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006cb1 	.word	0x08006cb1
 8006c9c:	08006cab 	.word	0x08006cab
 8006ca0:	08006cb7 	.word	0x08006cb7
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	76fb      	strb	r3, [r7, #27]
 8006ca8:	e0bc      	b.n	8006e24 <UART_SetConfig+0x244>
 8006caa:	2302      	movs	r3, #2
 8006cac:	76fb      	strb	r3, [r7, #27]
 8006cae:	e0b9      	b.n	8006e24 <UART_SetConfig+0x244>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	76fb      	strb	r3, [r7, #27]
 8006cb4:	e0b6      	b.n	8006e24 <UART_SetConfig+0x244>
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	76fb      	strb	r3, [r7, #27]
 8006cba:	e0b3      	b.n	8006e24 <UART_SetConfig+0x244>
 8006cbc:	2310      	movs	r3, #16
 8006cbe:	76fb      	strb	r3, [r7, #27]
 8006cc0:	e0b0      	b.n	8006e24 <UART_SetConfig+0x244>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a84      	ldr	r2, [pc, #528]	; (8006ed8 <UART_SetConfig+0x2f8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d132      	bne.n	8006d32 <UART_SetConfig+0x152>
 8006ccc:	4b81      	ldr	r3, [pc, #516]	; (8006ed4 <UART_SetConfig+0x2f4>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	2b0c      	cmp	r3, #12
 8006cd8:	d828      	bhi.n	8006d2c <UART_SetConfig+0x14c>
 8006cda:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <UART_SetConfig+0x100>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006d15 	.word	0x08006d15
 8006ce4:	08006d2d 	.word	0x08006d2d
 8006ce8:	08006d2d 	.word	0x08006d2d
 8006cec:	08006d2d 	.word	0x08006d2d
 8006cf0:	08006d21 	.word	0x08006d21
 8006cf4:	08006d2d 	.word	0x08006d2d
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d1b 	.word	0x08006d1b
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d2d 	.word	0x08006d2d
 8006d10:	08006d27 	.word	0x08006d27
 8006d14:	2300      	movs	r3, #0
 8006d16:	76fb      	strb	r3, [r7, #27]
 8006d18:	e084      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	76fb      	strb	r3, [r7, #27]
 8006d1e:	e081      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d20:	2304      	movs	r3, #4
 8006d22:	76fb      	strb	r3, [r7, #27]
 8006d24:	e07e      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d26:	2308      	movs	r3, #8
 8006d28:	76fb      	strb	r3, [r7, #27]
 8006d2a:	e07b      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	76fb      	strb	r3, [r7, #27]
 8006d30:	e078      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a69      	ldr	r2, [pc, #420]	; (8006edc <UART_SetConfig+0x2fc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d120      	bne.n	8006d7e <UART_SetConfig+0x19e>
 8006d3c:	4b65      	ldr	r3, [pc, #404]	; (8006ed4 <UART_SetConfig+0x2f4>)
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d46:	2b30      	cmp	r3, #48	; 0x30
 8006d48:	d013      	beq.n	8006d72 <UART_SetConfig+0x192>
 8006d4a:	2b30      	cmp	r3, #48	; 0x30
 8006d4c:	d814      	bhi.n	8006d78 <UART_SetConfig+0x198>
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d009      	beq.n	8006d66 <UART_SetConfig+0x186>
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d810      	bhi.n	8006d78 <UART_SetConfig+0x198>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <UART_SetConfig+0x180>
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d006      	beq.n	8006d6c <UART_SetConfig+0x18c>
 8006d5e:	e00b      	b.n	8006d78 <UART_SetConfig+0x198>
 8006d60:	2300      	movs	r3, #0
 8006d62:	76fb      	strb	r3, [r7, #27]
 8006d64:	e05e      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d66:	2302      	movs	r3, #2
 8006d68:	76fb      	strb	r3, [r7, #27]
 8006d6a:	e05b      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	76fb      	strb	r3, [r7, #27]
 8006d70:	e058      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d72:	2308      	movs	r3, #8
 8006d74:	76fb      	strb	r3, [r7, #27]
 8006d76:	e055      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d78:	2310      	movs	r3, #16
 8006d7a:	76fb      	strb	r3, [r7, #27]
 8006d7c:	e052      	b.n	8006e24 <UART_SetConfig+0x244>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a57      	ldr	r2, [pc, #348]	; (8006ee0 <UART_SetConfig+0x300>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d120      	bne.n	8006dca <UART_SetConfig+0x1ea>
 8006d88:	4b52      	ldr	r3, [pc, #328]	; (8006ed4 <UART_SetConfig+0x2f4>)
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d92:	2bc0      	cmp	r3, #192	; 0xc0
 8006d94:	d013      	beq.n	8006dbe <UART_SetConfig+0x1de>
 8006d96:	2bc0      	cmp	r3, #192	; 0xc0
 8006d98:	d814      	bhi.n	8006dc4 <UART_SetConfig+0x1e4>
 8006d9a:	2b80      	cmp	r3, #128	; 0x80
 8006d9c:	d009      	beq.n	8006db2 <UART_SetConfig+0x1d2>
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d810      	bhi.n	8006dc4 <UART_SetConfig+0x1e4>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <UART_SetConfig+0x1cc>
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d006      	beq.n	8006db8 <UART_SetConfig+0x1d8>
 8006daa:	e00b      	b.n	8006dc4 <UART_SetConfig+0x1e4>
 8006dac:	2300      	movs	r3, #0
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	e038      	b.n	8006e24 <UART_SetConfig+0x244>
 8006db2:	2302      	movs	r3, #2
 8006db4:	76fb      	strb	r3, [r7, #27]
 8006db6:	e035      	b.n	8006e24 <UART_SetConfig+0x244>
 8006db8:	2304      	movs	r3, #4
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e032      	b.n	8006e24 <UART_SetConfig+0x244>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	76fb      	strb	r3, [r7, #27]
 8006dc2:	e02f      	b.n	8006e24 <UART_SetConfig+0x244>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	e02c      	b.n	8006e24 <UART_SetConfig+0x244>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a3f      	ldr	r2, [pc, #252]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d125      	bne.n	8006e20 <UART_SetConfig+0x240>
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <UART_SetConfig+0x2f4>)
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006de2:	d017      	beq.n	8006e14 <UART_SetConfig+0x234>
 8006de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006de8:	d817      	bhi.n	8006e1a <UART_SetConfig+0x23a>
 8006dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dee:	d00b      	beq.n	8006e08 <UART_SetConfig+0x228>
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df4:	d811      	bhi.n	8006e1a <UART_SetConfig+0x23a>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <UART_SetConfig+0x222>
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfe:	d006      	beq.n	8006e0e <UART_SetConfig+0x22e>
 8006e00:	e00b      	b.n	8006e1a <UART_SetConfig+0x23a>
 8006e02:	2300      	movs	r3, #0
 8006e04:	76fb      	strb	r3, [r7, #27]
 8006e06:	e00d      	b.n	8006e24 <UART_SetConfig+0x244>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	76fb      	strb	r3, [r7, #27]
 8006e0c:	e00a      	b.n	8006e24 <UART_SetConfig+0x244>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	76fb      	strb	r3, [r7, #27]
 8006e12:	e007      	b.n	8006e24 <UART_SetConfig+0x244>
 8006e14:	2308      	movs	r3, #8
 8006e16:	76fb      	strb	r3, [r7, #27]
 8006e18:	e004      	b.n	8006e24 <UART_SetConfig+0x244>
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	76fb      	strb	r3, [r7, #27]
 8006e1e:	e001      	b.n	8006e24 <UART_SetConfig+0x244>
 8006e20:	2310      	movs	r3, #16
 8006e22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a28      	ldr	r2, [pc, #160]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f040 809e 	bne.w	8006f6c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e30:	7efb      	ldrb	r3, [r7, #27]
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d823      	bhi.n	8006e7e <UART_SetConfig+0x29e>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x25c>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e6f 	.word	0x08006e6f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e7f 	.word	0x08006e7f
 8006e58:	08006e7f 	.word	0x08006e7f
 8006e5c:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7ff f83a 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8006e64:	6178      	str	r0, [r7, #20]
        break;
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <UART_SetConfig+0x304>)
 8006e6a:	617b      	str	r3, [r7, #20]
        break;
 8006e6c:	e00c      	b.n	8006e88 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fe ffc5 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8006e72:	6178      	str	r0, [r7, #20]
        break;
 8006e74:	e008      	b.n	8006e88 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	617b      	str	r3, [r7, #20]
        break;
 8006e7c:	e004      	b.n	8006e88 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	76bb      	strb	r3, [r7, #26]
        break;
 8006e86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 812c 	beq.w	80070e8 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <UART_SetConfig+0x308>)
 8006e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d305      	bcc.n	8006ec0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d915      	bls.n	8006eec <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	76bb      	strb	r3, [r7, #26]
 8006ec4:	e110      	b.n	80070e8 <UART_SetConfig+0x508>
 8006ec6:	bf00      	nop
 8006ec8:	cfff69f3 	.word	0xcfff69f3
 8006ecc:	40008000 	.word	0x40008000
 8006ed0:	40013800 	.word	0x40013800
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	40004400 	.word	0x40004400
 8006edc:	40004800 	.word	0x40004800
 8006ee0:	40004c00 	.word	0x40004c00
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	0800a318 	.word	0x0800a318
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f04f 0100 	mov.w	r1, #0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	4a85      	ldr	r2, [pc, #532]	; (8007110 <UART_SetConfig+0x530>)
 8006efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	f7f9 fa2c 	bl	8000360 <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	020b      	lsls	r3, r1, #8
 8006f1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f1e:	0202      	lsls	r2, r0, #8
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	6849      	ldr	r1, [r1, #4]
 8006f24:	0849      	lsrs	r1, r1, #1
 8006f26:	4608      	mov	r0, r1
 8006f28:	f04f 0100 	mov.w	r1, #0
 8006f2c:	1814      	adds	r4, r2, r0
 8006f2e:	eb43 0501 	adc.w	r5, r3, r1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7f9 fa0e 	bl	8000360 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4613      	mov	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f52:	d308      	bcc.n	8006f66 <UART_SetConfig+0x386>
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5a:	d204      	bcs.n	8006f66 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	60da      	str	r2, [r3, #12]
 8006f64:	e0c0      	b.n	80070e8 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	76bb      	strb	r3, [r7, #26]
 8006f6a:	e0bd      	b.n	80070e8 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f74:	d164      	bne.n	8007040 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006f76:	7efb      	ldrb	r3, [r7, #27]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d828      	bhi.n	8006fce <UART_SetConfig+0x3ee>
 8006f7c:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <UART_SetConfig+0x3a4>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	08006fcf 	.word	0x08006fcf
 8006f94:	08006fbf 	.word	0x08006fbf
 8006f98:	08006fcf 	.word	0x08006fcf
 8006f9c:	08006fcf 	.word	0x08006fcf
 8006fa0:	08006fcf 	.word	0x08006fcf
 8006fa4:	08006fc7 	.word	0x08006fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fe ff96 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8006fac:	6178      	str	r0, [r7, #20]
        break;
 8006fae:	e013      	b.n	8006fd8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fb0:	f7fe ffa8 	bl	8005f04 <HAL_RCC_GetPCLK2Freq>
 8006fb4:	6178      	str	r0, [r7, #20]
        break;
 8006fb6:	e00f      	b.n	8006fd8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb8:	4b56      	ldr	r3, [pc, #344]	; (8007114 <UART_SetConfig+0x534>)
 8006fba:	617b      	str	r3, [r7, #20]
        break;
 8006fbc:	e00c      	b.n	8006fd8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fbe:	f7fe ff1d 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8006fc2:	6178      	str	r0, [r7, #20]
        break;
 8006fc4:	e008      	b.n	8006fd8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fca:	617b      	str	r3, [r7, #20]
        break;
 8006fcc:	e004      	b.n	8006fd8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	76bb      	strb	r3, [r7, #26]
        break;
 8006fd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8084 	beq.w	80070e8 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	4a4a      	ldr	r2, [pc, #296]	; (8007110 <UART_SetConfig+0x530>)
 8006fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fea:	461a      	mov	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ff2:	005a      	lsls	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b0f      	cmp	r3, #15
 800700a:	d916      	bls.n	800703a <UART_SetConfig+0x45a>
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d212      	bcs.n	800703a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f023 030f 	bic.w	r3, r3, #15
 800701c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	b29b      	uxth	r3, r3
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	b29a      	uxth	r2, r3
 800702a:	89fb      	ldrh	r3, [r7, #14]
 800702c:	4313      	orrs	r3, r2
 800702e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	89fa      	ldrh	r2, [r7, #14]
 8007036:	60da      	str	r2, [r3, #12]
 8007038:	e056      	b.n	80070e8 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	76bb      	strb	r3, [r7, #26]
 800703e:	e053      	b.n	80070e8 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007040:	7efb      	ldrb	r3, [r7, #27]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d827      	bhi.n	8007096 <UART_SetConfig+0x4b6>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x46c>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fe ff32 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8007074:	6178      	str	r0, [r7, #20]
        break;
 8007076:	e013      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fe ff44 	bl	8005f04 <HAL_RCC_GetPCLK2Freq>
 800707c:	6178      	str	r0, [r7, #20]
        break;
 800707e:	e00f      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b24      	ldr	r3, [pc, #144]	; (8007114 <UART_SetConfig+0x534>)
 8007082:	617b      	str	r3, [r7, #20]
        break;
 8007084:	e00c      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fe feb9 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 800708a:	6178      	str	r0, [r7, #20]
        break;
 800708c:	e008      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	617b      	str	r3, [r7, #20]
        break;
 8007094:	e004      	b.n	80070a0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	76bb      	strb	r3, [r7, #26]
        break;
 800709e:	bf00      	nop
    }

    if (pclk != 0U)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d020      	beq.n	80070e8 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	4a19      	ldr	r2, [pc, #100]	; (8007110 <UART_SetConfig+0x530>)
 80070ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b0:	461a      	mov	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	441a      	add	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b0f      	cmp	r3, #15
 80070ce:	d909      	bls.n	80070e4 <UART_SetConfig+0x504>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d6:	d205      	bcs.n	80070e4 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e001      	b.n	80070e8 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007104:	7ebb      	ldrb	r3, [r7, #26]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bdb0      	pop	{r4, r5, r7, pc}
 800710e:	bf00      	nop
 8007110:	0800a318 	.word	0x0800a318
 8007114:	00f42400 	.word	0x00f42400

08007118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007216:	d10a      	bne.n	800722e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b098      	sub	sp, #96	; 0x60
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800726c:	f7fc fe56 	bl	8003f1c <HAL_GetTick>
 8007270:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d12f      	bne.n	80072e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007288:	2200      	movs	r2, #0
 800728a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f88e 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d022      	beq.n	80072e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ae:	653b      	str	r3, [r7, #80]	; 0x50
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b8:	647b      	str	r3, [r7, #68]	; 0x44
 80072ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e063      	b.n	80073a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d149      	bne.n	8007382 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	2200      	movs	r2, #0
 80072f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f857 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d03c      	beq.n	8007382 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	623b      	str	r3, [r7, #32]
   return(result);
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800731c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	633b      	str	r3, [r7, #48]	; 0x30
 8007328:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	60fb      	str	r3, [r7, #12]
   return(result);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	64bb      	str	r3, [r7, #72]	; 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800735a:	61fa      	str	r2, [r7, #28]
 800735c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	617b      	str	r3, [r7, #20]
   return(result);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e012      	b.n	80073a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3758      	adds	r7, #88	; 0x58
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	4613      	mov	r3, r2
 80073be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c0:	e04f      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d04b      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ca:	f7fc fda7 	bl	8003f1c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d302      	bcc.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e04e      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d037      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d034      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b40      	cmp	r3, #64	; 0x40
 80073fc:	d031      	beq.n	8007462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b08      	cmp	r3, #8
 800740a:	d110      	bne.n	800742e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f838 	bl	800748a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2208      	movs	r2, #8
 800741e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e029      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743c:	d111      	bne.n	8007462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f81e 	bl	800748a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e00f      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	bf0c      	ite	eq
 8007472:	2301      	moveq	r3, #1
 8007474:	2300      	movne	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	429a      	cmp	r2, r3
 800747e:	d0a0      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748a:	b480      	push	{r7}
 800748c:	b095      	sub	sp, #84	; 0x54
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
 80074b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074da:	f023 0301 	bic.w	r3, r3, #1
 80074de:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e3      	bne.n	80074c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d118      	bne.n	8007536 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	60bb      	str	r3, [r7, #8]
   return(result);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0310 	bic.w	r3, r3, #16
 8007518:	647b      	str	r3, [r7, #68]	; 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	613b      	str	r3, [r7, #16]
   return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e6      	bne.n	8007504 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	675a      	str	r2, [r3, #116]	; 0x74
}
 800754a:	bf00      	nop
 800754c:	3754      	adds	r7, #84	; 0x54
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fb1d 	bl	8006bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b088      	sub	sp, #32
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	60bb      	str	r3, [r7, #8]
   return(result);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6979      	ldr	r1, [r7, #20]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	613b      	str	r3, [r7, #16]
   return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff fae8 	bl	8006ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d0:	bf00      	nop
 80075d2:	3720      	adds	r7, #32
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_UARTEx_DisableFifoMode+0x16>
 8007626:	2302      	movs	r3, #2
 8007628:	e027      	b.n	800767a <HAL_UARTEx_DisableFifoMode+0x66>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2224      	movs	r2, #36	; 0x24
 8007636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0201 	bic.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800769a:	2302      	movs	r3, #2
 800769c:	e02d      	b.n	80076fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2224      	movs	r2, #36	; 0x24
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0201 	bic.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f850 	bl	8007780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007716:	2302      	movs	r3, #2
 8007718:	e02d      	b.n	8007776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2224      	movs	r2, #36	; 0x24
 8007726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f812 	bl	8007780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800778c:	2b00      	cmp	r3, #0
 800778e:	d108      	bne.n	80077a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077a0:	e031      	b.n	8007806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077a2:	2308      	movs	r3, #8
 80077a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077a6:	2308      	movs	r3, #8
 80077a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	0e5b      	lsrs	r3, r3, #25
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	0f5b      	lsrs	r3, r3, #29
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	7b3a      	ldrb	r2, [r7, #12]
 80077ce:	4911      	ldr	r1, [pc, #68]	; (8007814 <UARTEx_SetNbDataToProcess+0x94>)
 80077d0:	5c8a      	ldrb	r2, [r1, r2]
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077d6:	7b3a      	ldrb	r2, [r7, #12]
 80077d8:	490f      	ldr	r1, [pc, #60]	; (8007818 <UARTEx_SetNbDataToProcess+0x98>)
 80077da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	7b7a      	ldrb	r2, [r7, #13]
 80077ec:	4909      	ldr	r1, [pc, #36]	; (8007814 <UARTEx_SetNbDataToProcess+0x94>)
 80077ee:	5c8a      	ldrb	r2, [r1, r2]
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077f4:	7b7a      	ldrb	r2, [r7, #13]
 80077f6:	4908      	ldr	r1, [pc, #32]	; (8007818 <UARTEx_SetNbDataToProcess+0x98>)
 80077f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	0800a330 	.word	0x0800a330
 8007818:	0800a338 	.word	0x0800a338

0800781c <__errno>:
 800781c:	4b01      	ldr	r3, [pc, #4]	; (8007824 <__errno+0x8>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	200009e4 	.word	0x200009e4

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	; (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	; (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	; (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	; (800786c <__libc_init_array+0x44>)
 800783c:	f001 fcbc 	bl	80091b8 <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	0800a418 	.word	0x0800a418
 8007864:	0800a418 	.word	0x0800a418
 8007868:	0800a418 	.word	0x0800a418
 800786c:	0800a41c 	.word	0x0800a41c

08007870 <memcpy>:
 8007870:	440a      	add	r2, r1
 8007872:	4291      	cmp	r1, r2
 8007874:	f100 33ff 	add.w	r3, r0, #4294967295
 8007878:	d100      	bne.n	800787c <memcpy+0xc>
 800787a:	4770      	bx	lr
 800787c:	b510      	push	{r4, lr}
 800787e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007886:	4291      	cmp	r1, r2
 8007888:	d1f9      	bne.n	800787e <memcpy+0xe>
 800788a:	bd10      	pop	{r4, pc}

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <iprintf>:
 800789c:	b40f      	push	{r0, r1, r2, r3}
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <iprintf+0x2c>)
 80078a0:	b513      	push	{r0, r1, r4, lr}
 80078a2:	681c      	ldr	r4, [r3, #0]
 80078a4:	b124      	cbz	r4, 80078b0 <iprintf+0x14>
 80078a6:	69a3      	ldr	r3, [r4, #24]
 80078a8:	b913      	cbnz	r3, 80078b0 <iprintf+0x14>
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fa94 	bl	8007dd8 <__sinit>
 80078b0:	ab05      	add	r3, sp, #20
 80078b2:	9a04      	ldr	r2, [sp, #16]
 80078b4:	68a1      	ldr	r1, [r4, #8]
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 fdc1 	bl	8008440 <_vfiprintf_r>
 80078be:	b002      	add	sp, #8
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	b004      	add	sp, #16
 80078c6:	4770      	bx	lr
 80078c8:	200009e4 	.word	0x200009e4

080078cc <putchar>:
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <putchar+0x28>)
 80078ce:	b513      	push	{r0, r1, r4, lr}
 80078d0:	681c      	ldr	r4, [r3, #0]
 80078d2:	4601      	mov	r1, r0
 80078d4:	b134      	cbz	r4, 80078e4 <putchar+0x18>
 80078d6:	69a3      	ldr	r3, [r4, #24]
 80078d8:	b923      	cbnz	r3, 80078e4 <putchar+0x18>
 80078da:	9001      	str	r0, [sp, #4]
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fa7b 	bl	8007dd8 <__sinit>
 80078e2:	9901      	ldr	r1, [sp, #4]
 80078e4:	68a2      	ldr	r2, [r4, #8]
 80078e6:	4620      	mov	r0, r4
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ee:	f001 b86b 	b.w	80089c8 <_putc_r>
 80078f2:	bf00      	nop
 80078f4:	200009e4 	.word	0x200009e4

080078f8 <_puts_r>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	460e      	mov	r6, r1
 80078fc:	4605      	mov	r5, r0
 80078fe:	b118      	cbz	r0, 8007908 <_puts_r+0x10>
 8007900:	6983      	ldr	r3, [r0, #24]
 8007902:	b90b      	cbnz	r3, 8007908 <_puts_r+0x10>
 8007904:	f000 fa68 	bl	8007dd8 <__sinit>
 8007908:	69ab      	ldr	r3, [r5, #24]
 800790a:	68ac      	ldr	r4, [r5, #8]
 800790c:	b913      	cbnz	r3, 8007914 <_puts_r+0x1c>
 800790e:	4628      	mov	r0, r5
 8007910:	f000 fa62 	bl	8007dd8 <__sinit>
 8007914:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <_puts_r+0xd0>)
 8007916:	429c      	cmp	r4, r3
 8007918:	d120      	bne.n	800795c <_puts_r+0x64>
 800791a:	686c      	ldr	r4, [r5, #4]
 800791c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800791e:	07db      	lsls	r3, r3, #31
 8007920:	d405      	bmi.n	800792e <_puts_r+0x36>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	0598      	lsls	r0, r3, #22
 8007926:	d402      	bmi.n	800792e <_puts_r+0x36>
 8007928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800792a:	f000 faf3 	bl	8007f14 <__retarget_lock_acquire_recursive>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	0719      	lsls	r1, r3, #28
 8007932:	d51d      	bpl.n	8007970 <_puts_r+0x78>
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	b1db      	cbz	r3, 8007970 <_puts_r+0x78>
 8007938:	3e01      	subs	r6, #1
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007940:	3b01      	subs	r3, #1
 8007942:	60a3      	str	r3, [r4, #8]
 8007944:	bb39      	cbnz	r1, 8007996 <_puts_r+0x9e>
 8007946:	2b00      	cmp	r3, #0
 8007948:	da38      	bge.n	80079bc <_puts_r+0xc4>
 800794a:	4622      	mov	r2, r4
 800794c:	210a      	movs	r1, #10
 800794e:	4628      	mov	r0, r5
 8007950:	f000 f868 	bl	8007a24 <__swbuf_r>
 8007954:	3001      	adds	r0, #1
 8007956:	d011      	beq.n	800797c <_puts_r+0x84>
 8007958:	250a      	movs	r5, #10
 800795a:	e011      	b.n	8007980 <_puts_r+0x88>
 800795c:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <_puts_r+0xd4>)
 800795e:	429c      	cmp	r4, r3
 8007960:	d101      	bne.n	8007966 <_puts_r+0x6e>
 8007962:	68ac      	ldr	r4, [r5, #8]
 8007964:	e7da      	b.n	800791c <_puts_r+0x24>
 8007966:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <_puts_r+0xd8>)
 8007968:	429c      	cmp	r4, r3
 800796a:	bf08      	it	eq
 800796c:	68ec      	ldreq	r4, [r5, #12]
 800796e:	e7d5      	b.n	800791c <_puts_r+0x24>
 8007970:	4621      	mov	r1, r4
 8007972:	4628      	mov	r0, r5
 8007974:	f000 f8a8 	bl	8007ac8 <__swsetup_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	d0dd      	beq.n	8007938 <_puts_r+0x40>
 800797c:	f04f 35ff 	mov.w	r5, #4294967295
 8007980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007982:	07da      	lsls	r2, r3, #31
 8007984:	d405      	bmi.n	8007992 <_puts_r+0x9a>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	059b      	lsls	r3, r3, #22
 800798a:	d402      	bmi.n	8007992 <_puts_r+0x9a>
 800798c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798e:	f000 fac2 	bl	8007f16 <__retarget_lock_release_recursive>
 8007992:	4628      	mov	r0, r5
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	2b00      	cmp	r3, #0
 8007998:	da04      	bge.n	80079a4 <_puts_r+0xac>
 800799a:	69a2      	ldr	r2, [r4, #24]
 800799c:	429a      	cmp	r2, r3
 800799e:	dc06      	bgt.n	80079ae <_puts_r+0xb6>
 80079a0:	290a      	cmp	r1, #10
 80079a2:	d004      	beq.n	80079ae <_puts_r+0xb6>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	7019      	strb	r1, [r3, #0]
 80079ac:	e7c5      	b.n	800793a <_puts_r+0x42>
 80079ae:	4622      	mov	r2, r4
 80079b0:	4628      	mov	r0, r5
 80079b2:	f000 f837 	bl	8007a24 <__swbuf_r>
 80079b6:	3001      	adds	r0, #1
 80079b8:	d1bf      	bne.n	800793a <_puts_r+0x42>
 80079ba:	e7df      	b.n	800797c <_puts_r+0x84>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	250a      	movs	r5, #10
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	6022      	str	r2, [r4, #0]
 80079c4:	701d      	strb	r5, [r3, #0]
 80079c6:	e7db      	b.n	8007980 <_puts_r+0x88>
 80079c8:	0800a364 	.word	0x0800a364
 80079cc:	0800a384 	.word	0x0800a384
 80079d0:	0800a344 	.word	0x0800a344

080079d4 <puts>:
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <puts+0xc>)
 80079d6:	4601      	mov	r1, r0
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	f7ff bf8d 	b.w	80078f8 <_puts_r>
 80079de:	bf00      	nop
 80079e0:	200009e4 	.word	0x200009e4

080079e4 <siprintf>:
 80079e4:	b40e      	push	{r1, r2, r3}
 80079e6:	b500      	push	{lr}
 80079e8:	b09c      	sub	sp, #112	; 0x70
 80079ea:	ab1d      	add	r3, sp, #116	; 0x74
 80079ec:	9002      	str	r0, [sp, #8]
 80079ee:	9006      	str	r0, [sp, #24]
 80079f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079f4:	4809      	ldr	r0, [pc, #36]	; (8007a1c <siprintf+0x38>)
 80079f6:	9107      	str	r1, [sp, #28]
 80079f8:	9104      	str	r1, [sp, #16]
 80079fa:	4909      	ldr	r1, [pc, #36]	; (8007a20 <siprintf+0x3c>)
 80079fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a00:	9105      	str	r1, [sp, #20]
 8007a02:	6800      	ldr	r0, [r0, #0]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	a902      	add	r1, sp, #8
 8007a08:	f000 fbf0 	bl	80081ec <_svfiprintf_r>
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	b01c      	add	sp, #112	; 0x70
 8007a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a18:	b003      	add	sp, #12
 8007a1a:	4770      	bx	lr
 8007a1c:	200009e4 	.word	0x200009e4
 8007a20:	ffff0208 	.word	0xffff0208

08007a24 <__swbuf_r>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	460e      	mov	r6, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	b118      	cbz	r0, 8007a36 <__swbuf_r+0x12>
 8007a2e:	6983      	ldr	r3, [r0, #24]
 8007a30:	b90b      	cbnz	r3, 8007a36 <__swbuf_r+0x12>
 8007a32:	f000 f9d1 	bl	8007dd8 <__sinit>
 8007a36:	4b21      	ldr	r3, [pc, #132]	; (8007abc <__swbuf_r+0x98>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	d12b      	bne.n	8007a94 <__swbuf_r+0x70>
 8007a3c:	686c      	ldr	r4, [r5, #4]
 8007a3e:	69a3      	ldr	r3, [r4, #24]
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	071a      	lsls	r2, r3, #28
 8007a46:	d52f      	bpl.n	8007aa8 <__swbuf_r+0x84>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	b36b      	cbz	r3, 8007aa8 <__swbuf_r+0x84>
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	6820      	ldr	r0, [r4, #0]
 8007a50:	1ac0      	subs	r0, r0, r3
 8007a52:	6963      	ldr	r3, [r4, #20]
 8007a54:	b2f6      	uxtb	r6, r6
 8007a56:	4283      	cmp	r3, r0
 8007a58:	4637      	mov	r7, r6
 8007a5a:	dc04      	bgt.n	8007a66 <__swbuf_r+0x42>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 f926 	bl	8007cb0 <_fflush_r>
 8007a64:	bb30      	cbnz	r0, 8007ab4 <__swbuf_r+0x90>
 8007a66:	68a3      	ldr	r3, [r4, #8]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	60a3      	str	r3, [r4, #8]
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	701e      	strb	r6, [r3, #0]
 8007a74:	6963      	ldr	r3, [r4, #20]
 8007a76:	3001      	adds	r0, #1
 8007a78:	4283      	cmp	r3, r0
 8007a7a:	d004      	beq.n	8007a86 <__swbuf_r+0x62>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	07db      	lsls	r3, r3, #31
 8007a80:	d506      	bpl.n	8007a90 <__swbuf_r+0x6c>
 8007a82:	2e0a      	cmp	r6, #10
 8007a84:	d104      	bne.n	8007a90 <__swbuf_r+0x6c>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 f911 	bl	8007cb0 <_fflush_r>
 8007a8e:	b988      	cbnz	r0, 8007ab4 <__swbuf_r+0x90>
 8007a90:	4638      	mov	r0, r7
 8007a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <__swbuf_r+0x9c>)
 8007a96:	429c      	cmp	r4, r3
 8007a98:	d101      	bne.n	8007a9e <__swbuf_r+0x7a>
 8007a9a:	68ac      	ldr	r4, [r5, #8]
 8007a9c:	e7cf      	b.n	8007a3e <__swbuf_r+0x1a>
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <__swbuf_r+0xa0>)
 8007aa0:	429c      	cmp	r4, r3
 8007aa2:	bf08      	it	eq
 8007aa4:	68ec      	ldreq	r4, [r5, #12]
 8007aa6:	e7ca      	b.n	8007a3e <__swbuf_r+0x1a>
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 f80c 	bl	8007ac8 <__swsetup_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d0cb      	beq.n	8007a4c <__swbuf_r+0x28>
 8007ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ab8:	e7ea      	b.n	8007a90 <__swbuf_r+0x6c>
 8007aba:	bf00      	nop
 8007abc:	0800a364 	.word	0x0800a364
 8007ac0:	0800a384 	.word	0x0800a384
 8007ac4:	0800a344 	.word	0x0800a344

08007ac8 <__swsetup_r>:
 8007ac8:	4b32      	ldr	r3, [pc, #200]	; (8007b94 <__swsetup_r+0xcc>)
 8007aca:	b570      	push	{r4, r5, r6, lr}
 8007acc:	681d      	ldr	r5, [r3, #0]
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	b125      	cbz	r5, 8007ade <__swsetup_r+0x16>
 8007ad4:	69ab      	ldr	r3, [r5, #24]
 8007ad6:	b913      	cbnz	r3, 8007ade <__swsetup_r+0x16>
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 f97d 	bl	8007dd8 <__sinit>
 8007ade:	4b2e      	ldr	r3, [pc, #184]	; (8007b98 <__swsetup_r+0xd0>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	d10f      	bne.n	8007b04 <__swsetup_r+0x3c>
 8007ae4:	686c      	ldr	r4, [r5, #4]
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aec:	0719      	lsls	r1, r3, #28
 8007aee:	d42c      	bmi.n	8007b4a <__swsetup_r+0x82>
 8007af0:	06dd      	lsls	r5, r3, #27
 8007af2:	d411      	bmi.n	8007b18 <__swsetup_r+0x50>
 8007af4:	2309      	movs	r3, #9
 8007af6:	6033      	str	r3, [r6, #0]
 8007af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	e03e      	b.n	8007b82 <__swsetup_r+0xba>
 8007b04:	4b25      	ldr	r3, [pc, #148]	; (8007b9c <__swsetup_r+0xd4>)
 8007b06:	429c      	cmp	r4, r3
 8007b08:	d101      	bne.n	8007b0e <__swsetup_r+0x46>
 8007b0a:	68ac      	ldr	r4, [r5, #8]
 8007b0c:	e7eb      	b.n	8007ae6 <__swsetup_r+0x1e>
 8007b0e:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <__swsetup_r+0xd8>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	bf08      	it	eq
 8007b14:	68ec      	ldreq	r4, [r5, #12]
 8007b16:	e7e6      	b.n	8007ae6 <__swsetup_r+0x1e>
 8007b18:	0758      	lsls	r0, r3, #29
 8007b1a:	d512      	bpl.n	8007b42 <__swsetup_r+0x7a>
 8007b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1e:	b141      	cbz	r1, 8007b32 <__swsetup_r+0x6a>
 8007b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b24:	4299      	cmp	r1, r3
 8007b26:	d002      	beq.n	8007b2e <__swsetup_r+0x66>
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f000 fa59 	bl	8007fe0 <_free_r>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6363      	str	r3, [r4, #52]	; 0x34
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	f043 0308 	orr.w	r3, r3, #8
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	b94b      	cbnz	r3, 8007b62 <__swsetup_r+0x9a>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b58:	d003      	beq.n	8007b62 <__swsetup_r+0x9a>
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f9ff 	bl	8007f60 <__smakebuf_r>
 8007b62:	89a0      	ldrh	r0, [r4, #12]
 8007b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b68:	f010 0301 	ands.w	r3, r0, #1
 8007b6c:	d00a      	beq.n	8007b84 <__swsetup_r+0xbc>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60a3      	str	r3, [r4, #8]
 8007b72:	6963      	ldr	r3, [r4, #20]
 8007b74:	425b      	negs	r3, r3
 8007b76:	61a3      	str	r3, [r4, #24]
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	b943      	cbnz	r3, 8007b8e <__swsetup_r+0xc6>
 8007b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b80:	d1ba      	bne.n	8007af8 <__swsetup_r+0x30>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	0781      	lsls	r1, r0, #30
 8007b86:	bf58      	it	pl
 8007b88:	6963      	ldrpl	r3, [r4, #20]
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	e7f4      	b.n	8007b78 <__swsetup_r+0xb0>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e7f7      	b.n	8007b82 <__swsetup_r+0xba>
 8007b92:	bf00      	nop
 8007b94:	200009e4 	.word	0x200009e4
 8007b98:	0800a364 	.word	0x0800a364
 8007b9c:	0800a384 	.word	0x0800a384
 8007ba0:	0800a344 	.word	0x0800a344

08007ba4 <__sflush_r>:
 8007ba4:	898a      	ldrh	r2, [r1, #12]
 8007ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007baa:	4605      	mov	r5, r0
 8007bac:	0710      	lsls	r0, r2, #28
 8007bae:	460c      	mov	r4, r1
 8007bb0:	d458      	bmi.n	8007c64 <__sflush_r+0xc0>
 8007bb2:	684b      	ldr	r3, [r1, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dc05      	bgt.n	8007bc4 <__sflush_r+0x20>
 8007bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	dc02      	bgt.n	8007bc4 <__sflush_r+0x20>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bc6:	2e00      	cmp	r6, #0
 8007bc8:	d0f9      	beq.n	8007bbe <__sflush_r+0x1a>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bd0:	682f      	ldr	r7, [r5, #0]
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	d032      	beq.n	8007c3c <__sflush_r+0x98>
 8007bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	075a      	lsls	r2, r3, #29
 8007bdc:	d505      	bpl.n	8007bea <__sflush_r+0x46>
 8007bde:	6863      	ldr	r3, [r4, #4]
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007be4:	b10b      	cbz	r3, 8007bea <__sflush_r+0x46>
 8007be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be8:	1ac0      	subs	r0, r0, r3
 8007bea:	2300      	movs	r3, #0
 8007bec:	4602      	mov	r2, r0
 8007bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bf0:	6a21      	ldr	r1, [r4, #32]
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	47b0      	blx	r6
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	d106      	bne.n	8007c0a <__sflush_r+0x66>
 8007bfc:	6829      	ldr	r1, [r5, #0]
 8007bfe:	291d      	cmp	r1, #29
 8007c00:	d82c      	bhi.n	8007c5c <__sflush_r+0xb8>
 8007c02:	4a2a      	ldr	r2, [pc, #168]	; (8007cac <__sflush_r+0x108>)
 8007c04:	40ca      	lsrs	r2, r1
 8007c06:	07d6      	lsls	r6, r2, #31
 8007c08:	d528      	bpl.n	8007c5c <__sflush_r+0xb8>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	6062      	str	r2, [r4, #4]
 8007c0e:	04d9      	lsls	r1, r3, #19
 8007c10:	6922      	ldr	r2, [r4, #16]
 8007c12:	6022      	str	r2, [r4, #0]
 8007c14:	d504      	bpl.n	8007c20 <__sflush_r+0x7c>
 8007c16:	1c42      	adds	r2, r0, #1
 8007c18:	d101      	bne.n	8007c1e <__sflush_r+0x7a>
 8007c1a:	682b      	ldr	r3, [r5, #0]
 8007c1c:	b903      	cbnz	r3, 8007c20 <__sflush_r+0x7c>
 8007c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c22:	602f      	str	r7, [r5, #0]
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d0ca      	beq.n	8007bbe <__sflush_r+0x1a>
 8007c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	d002      	beq.n	8007c36 <__sflush_r+0x92>
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 f9d5 	bl	8007fe0 <_free_r>
 8007c36:	2000      	movs	r0, #0
 8007c38:	6360      	str	r0, [r4, #52]	; 0x34
 8007c3a:	e7c1      	b.n	8007bc0 <__sflush_r+0x1c>
 8007c3c:	6a21      	ldr	r1, [r4, #32]
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b0      	blx	r6
 8007c44:	1c41      	adds	r1, r0, #1
 8007c46:	d1c7      	bne.n	8007bd8 <__sflush_r+0x34>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c4      	beq.n	8007bd8 <__sflush_r+0x34>
 8007c4e:	2b1d      	cmp	r3, #29
 8007c50:	d001      	beq.n	8007c56 <__sflush_r+0xb2>
 8007c52:	2b16      	cmp	r3, #22
 8007c54:	d101      	bne.n	8007c5a <__sflush_r+0xb6>
 8007c56:	602f      	str	r7, [r5, #0]
 8007c58:	e7b1      	b.n	8007bbe <__sflush_r+0x1a>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	e7ad      	b.n	8007bc0 <__sflush_r+0x1c>
 8007c64:	690f      	ldr	r7, [r1, #16]
 8007c66:	2f00      	cmp	r7, #0
 8007c68:	d0a9      	beq.n	8007bbe <__sflush_r+0x1a>
 8007c6a:	0793      	lsls	r3, r2, #30
 8007c6c:	680e      	ldr	r6, [r1, #0]
 8007c6e:	bf08      	it	eq
 8007c70:	694b      	ldreq	r3, [r1, #20]
 8007c72:	600f      	str	r7, [r1, #0]
 8007c74:	bf18      	it	ne
 8007c76:	2300      	movne	r3, #0
 8007c78:	eba6 0807 	sub.w	r8, r6, r7
 8007c7c:	608b      	str	r3, [r1, #8]
 8007c7e:	f1b8 0f00 	cmp.w	r8, #0
 8007c82:	dd9c      	ble.n	8007bbe <__sflush_r+0x1a>
 8007c84:	6a21      	ldr	r1, [r4, #32]
 8007c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c88:	4643      	mov	r3, r8
 8007c8a:	463a      	mov	r2, r7
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b0      	blx	r6
 8007c90:	2800      	cmp	r0, #0
 8007c92:	dc06      	bgt.n	8007ca2 <__sflush_r+0xfe>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	e78e      	b.n	8007bc0 <__sflush_r+0x1c>
 8007ca2:	4407      	add	r7, r0
 8007ca4:	eba8 0800 	sub.w	r8, r8, r0
 8007ca8:	e7e9      	b.n	8007c7e <__sflush_r+0xda>
 8007caa:	bf00      	nop
 8007cac:	20400001 	.word	0x20400001

08007cb0 <_fflush_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	690b      	ldr	r3, [r1, #16]
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	b913      	cbnz	r3, 8007cc0 <_fflush_r+0x10>
 8007cba:	2500      	movs	r5, #0
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	b118      	cbz	r0, 8007cca <_fflush_r+0x1a>
 8007cc2:	6983      	ldr	r3, [r0, #24]
 8007cc4:	b90b      	cbnz	r3, 8007cca <_fflush_r+0x1a>
 8007cc6:	f000 f887 	bl	8007dd8 <__sinit>
 8007cca:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <_fflush_r+0x6c>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	d11b      	bne.n	8007d08 <_fflush_r+0x58>
 8007cd0:	686c      	ldr	r4, [r5, #4]
 8007cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0ef      	beq.n	8007cba <_fflush_r+0xa>
 8007cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cdc:	07d0      	lsls	r0, r2, #31
 8007cde:	d404      	bmi.n	8007cea <_fflush_r+0x3a>
 8007ce0:	0599      	lsls	r1, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_fflush_r+0x3a>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce6:	f000 f915 	bl	8007f14 <__retarget_lock_acquire_recursive>
 8007cea:	4628      	mov	r0, r5
 8007cec:	4621      	mov	r1, r4
 8007cee:	f7ff ff59 	bl	8007ba4 <__sflush_r>
 8007cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cf4:	07da      	lsls	r2, r3, #31
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	d4e0      	bmi.n	8007cbc <_fflush_r+0xc>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	059b      	lsls	r3, r3, #22
 8007cfe:	d4dd      	bmi.n	8007cbc <_fflush_r+0xc>
 8007d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d02:	f000 f908 	bl	8007f16 <__retarget_lock_release_recursive>
 8007d06:	e7d9      	b.n	8007cbc <_fflush_r+0xc>
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <_fflush_r+0x70>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	d101      	bne.n	8007d12 <_fflush_r+0x62>
 8007d0e:	68ac      	ldr	r4, [r5, #8]
 8007d10:	e7df      	b.n	8007cd2 <_fflush_r+0x22>
 8007d12:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <_fflush_r+0x74>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	bf08      	it	eq
 8007d18:	68ec      	ldreq	r4, [r5, #12]
 8007d1a:	e7da      	b.n	8007cd2 <_fflush_r+0x22>
 8007d1c:	0800a364 	.word	0x0800a364
 8007d20:	0800a384 	.word	0x0800a384
 8007d24:	0800a344 	.word	0x0800a344

08007d28 <std>:
 8007d28:	2300      	movs	r3, #0
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d36:	6083      	str	r3, [r0, #8]
 8007d38:	8181      	strh	r1, [r0, #12]
 8007d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d3c:	81c2      	strh	r2, [r0, #14]
 8007d3e:	6183      	str	r3, [r0, #24]
 8007d40:	4619      	mov	r1, r3
 8007d42:	2208      	movs	r2, #8
 8007d44:	305c      	adds	r0, #92	; 0x5c
 8007d46:	f7ff fda1 	bl	800788c <memset>
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <std+0x38>)
 8007d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d4e:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <std+0x3c>)
 8007d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d52:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <std+0x40>)
 8007d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <std+0x44>)
 8007d58:	6224      	str	r4, [r4, #32]
 8007d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	08008a79 	.word	0x08008a79
 8007d64:	08008a9b 	.word	0x08008a9b
 8007d68:	08008ad3 	.word	0x08008ad3
 8007d6c:	08008af7 	.word	0x08008af7

08007d70 <_cleanup_r>:
 8007d70:	4901      	ldr	r1, [pc, #4]	; (8007d78 <_cleanup_r+0x8>)
 8007d72:	f000 b8af 	b.w	8007ed4 <_fwalk_reent>
 8007d76:	bf00      	nop
 8007d78:	08007cb1 	.word	0x08007cb1

08007d7c <__sfmoreglue>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	1e4a      	subs	r2, r1, #1
 8007d80:	2568      	movs	r5, #104	; 0x68
 8007d82:	4355      	muls	r5, r2
 8007d84:	460e      	mov	r6, r1
 8007d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d8a:	f000 f979 	bl	8008080 <_malloc_r>
 8007d8e:	4604      	mov	r4, r0
 8007d90:	b140      	cbz	r0, 8007da4 <__sfmoreglue+0x28>
 8007d92:	2100      	movs	r1, #0
 8007d94:	e9c0 1600 	strd	r1, r6, [r0]
 8007d98:	300c      	adds	r0, #12
 8007d9a:	60a0      	str	r0, [r4, #8]
 8007d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007da0:	f7ff fd74 	bl	800788c <memset>
 8007da4:	4620      	mov	r0, r4
 8007da6:	bd70      	pop	{r4, r5, r6, pc}

08007da8 <__sfp_lock_acquire>:
 8007da8:	4801      	ldr	r0, [pc, #4]	; (8007db0 <__sfp_lock_acquire+0x8>)
 8007daa:	f000 b8b3 	b.w	8007f14 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	20000c80 	.word	0x20000c80

08007db4 <__sfp_lock_release>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_release+0x8>)
 8007db6:	f000 b8ae 	b.w	8007f16 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000c80 	.word	0x20000c80

08007dc0 <__sinit_lock_acquire>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	; (8007dc8 <__sinit_lock_acquire+0x8>)
 8007dc2:	f000 b8a7 	b.w	8007f14 <__retarget_lock_acquire_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20000c7b 	.word	0x20000c7b

08007dcc <__sinit_lock_release>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__sinit_lock_release+0x8>)
 8007dce:	f000 b8a2 	b.w	8007f16 <__retarget_lock_release_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	20000c7b 	.word	0x20000c7b

08007dd8 <__sinit>:
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	4604      	mov	r4, r0
 8007ddc:	f7ff fff0 	bl	8007dc0 <__sinit_lock_acquire>
 8007de0:	69a3      	ldr	r3, [r4, #24]
 8007de2:	b11b      	cbz	r3, 8007dec <__sinit+0x14>
 8007de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de8:	f7ff bff0 	b.w	8007dcc <__sinit_lock_release>
 8007dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007df0:	6523      	str	r3, [r4, #80]	; 0x50
 8007df2:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <__sinit+0x68>)
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <__sinit+0x6c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	bf04      	itt	eq
 8007dfe:	2301      	moveq	r3, #1
 8007e00:	61a3      	streq	r3, [r4, #24]
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 f820 	bl	8007e48 <__sfp>
 8007e08:	6060      	str	r0, [r4, #4]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 f81c 	bl	8007e48 <__sfp>
 8007e10:	60a0      	str	r0, [r4, #8]
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 f818 	bl	8007e48 <__sfp>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	60e0      	str	r0, [r4, #12]
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	6860      	ldr	r0, [r4, #4]
 8007e20:	f7ff ff82 	bl	8007d28 <std>
 8007e24:	68a0      	ldr	r0, [r4, #8]
 8007e26:	2201      	movs	r2, #1
 8007e28:	2109      	movs	r1, #9
 8007e2a:	f7ff ff7d 	bl	8007d28 <std>
 8007e2e:	68e0      	ldr	r0, [r4, #12]
 8007e30:	2202      	movs	r2, #2
 8007e32:	2112      	movs	r1, #18
 8007e34:	f7ff ff78 	bl	8007d28 <std>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61a3      	str	r3, [r4, #24]
 8007e3c:	e7d2      	b.n	8007de4 <__sinit+0xc>
 8007e3e:	bf00      	nop
 8007e40:	0800a340 	.word	0x0800a340
 8007e44:	08007d71 	.word	0x08007d71

08007e48 <__sfp>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	f7ff ffac 	bl	8007da8 <__sfp_lock_acquire>
 8007e50:	4b1e      	ldr	r3, [pc, #120]	; (8007ecc <__sfp+0x84>)
 8007e52:	681e      	ldr	r6, [r3, #0]
 8007e54:	69b3      	ldr	r3, [r6, #24]
 8007e56:	b913      	cbnz	r3, 8007e5e <__sfp+0x16>
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff ffbd 	bl	8007dd8 <__sinit>
 8007e5e:	3648      	adds	r6, #72	; 0x48
 8007e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	d503      	bpl.n	8007e70 <__sfp+0x28>
 8007e68:	6833      	ldr	r3, [r6, #0]
 8007e6a:	b30b      	cbz	r3, 8007eb0 <__sfp+0x68>
 8007e6c:	6836      	ldr	r6, [r6, #0]
 8007e6e:	e7f7      	b.n	8007e60 <__sfp+0x18>
 8007e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e74:	b9d5      	cbnz	r5, 8007eac <__sfp+0x64>
 8007e76:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <__sfp+0x88>)
 8007e78:	60e3      	str	r3, [r4, #12]
 8007e7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8007e80:	f000 f847 	bl	8007f12 <__retarget_lock_init_recursive>
 8007e84:	f7ff ff96 	bl	8007db4 <__sfp_lock_release>
 8007e88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e90:	6025      	str	r5, [r4, #0]
 8007e92:	61a5      	str	r5, [r4, #24]
 8007e94:	2208      	movs	r2, #8
 8007e96:	4629      	mov	r1, r5
 8007e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e9c:	f7ff fcf6 	bl	800788c <memset>
 8007ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eac:	3468      	adds	r4, #104	; 0x68
 8007eae:	e7d9      	b.n	8007e64 <__sfp+0x1c>
 8007eb0:	2104      	movs	r1, #4
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	f7ff ff62 	bl	8007d7c <__sfmoreglue>
 8007eb8:	4604      	mov	r4, r0
 8007eba:	6030      	str	r0, [r6, #0]
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d1d5      	bne.n	8007e6c <__sfp+0x24>
 8007ec0:	f7ff ff78 	bl	8007db4 <__sfp_lock_release>
 8007ec4:	230c      	movs	r3, #12
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	e7ee      	b.n	8007ea8 <__sfp+0x60>
 8007eca:	bf00      	nop
 8007ecc:	0800a340 	.word	0x0800a340
 8007ed0:	ffff0001 	.word	0xffff0001

08007ed4 <_fwalk_reent>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	4606      	mov	r6, r0
 8007eda:	4688      	mov	r8, r1
 8007edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ee0:	2700      	movs	r7, #0
 8007ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8007eea:	d505      	bpl.n	8007ef8 <_fwalk_reent+0x24>
 8007eec:	6824      	ldr	r4, [r4, #0]
 8007eee:	2c00      	cmp	r4, #0
 8007ef0:	d1f7      	bne.n	8007ee2 <_fwalk_reent+0xe>
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef8:	89ab      	ldrh	r3, [r5, #12]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d907      	bls.n	8007f0e <_fwalk_reent+0x3a>
 8007efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f02:	3301      	adds	r3, #1
 8007f04:	d003      	beq.n	8007f0e <_fwalk_reent+0x3a>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	47c0      	blx	r8
 8007f0c:	4307      	orrs	r7, r0
 8007f0e:	3568      	adds	r5, #104	; 0x68
 8007f10:	e7e9      	b.n	8007ee6 <_fwalk_reent+0x12>

08007f12 <__retarget_lock_init_recursive>:
 8007f12:	4770      	bx	lr

08007f14 <__retarget_lock_acquire_recursive>:
 8007f14:	4770      	bx	lr

08007f16 <__retarget_lock_release_recursive>:
 8007f16:	4770      	bx	lr

08007f18 <__swhatbuf_r>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	460e      	mov	r6, r1
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	2900      	cmp	r1, #0
 8007f22:	b096      	sub	sp, #88	; 0x58
 8007f24:	4614      	mov	r4, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	da07      	bge.n	8007f3a <__swhatbuf_r+0x22>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	89b3      	ldrh	r3, [r6, #12]
 8007f30:	061a      	lsls	r2, r3, #24
 8007f32:	d410      	bmi.n	8007f56 <__swhatbuf_r+0x3e>
 8007f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f38:	e00e      	b.n	8007f58 <__swhatbuf_r+0x40>
 8007f3a:	466a      	mov	r2, sp
 8007f3c:	f000 fe02 	bl	8008b44 <_fstat_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	dbf2      	blt.n	8007f2a <__swhatbuf_r+0x12>
 8007f44:	9a01      	ldr	r2, [sp, #4]
 8007f46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f4e:	425a      	negs	r2, r3
 8007f50:	415a      	adcs	r2, r3
 8007f52:	602a      	str	r2, [r5, #0]
 8007f54:	e7ee      	b.n	8007f34 <__swhatbuf_r+0x1c>
 8007f56:	2340      	movs	r3, #64	; 0x40
 8007f58:	2000      	movs	r0, #0
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	b016      	add	sp, #88	; 0x58
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}

08007f60 <__smakebuf_r>:
 8007f60:	898b      	ldrh	r3, [r1, #12]
 8007f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f64:	079d      	lsls	r5, r3, #30
 8007f66:	4606      	mov	r6, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	d507      	bpl.n	8007f7c <__smakebuf_r+0x1c>
 8007f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	2301      	movs	r3, #1
 8007f76:	6163      	str	r3, [r4, #20]
 8007f78:	b002      	add	sp, #8
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	ab01      	add	r3, sp, #4
 8007f7e:	466a      	mov	r2, sp
 8007f80:	f7ff ffca 	bl	8007f18 <__swhatbuf_r>
 8007f84:	9900      	ldr	r1, [sp, #0]
 8007f86:	4605      	mov	r5, r0
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f000 f879 	bl	8008080 <_malloc_r>
 8007f8e:	b948      	cbnz	r0, 8007fa4 <__smakebuf_r+0x44>
 8007f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f94:	059a      	lsls	r2, r3, #22
 8007f96:	d4ef      	bmi.n	8007f78 <__smakebuf_r+0x18>
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	81a3      	strh	r3, [r4, #12]
 8007fa2:	e7e3      	b.n	8007f6c <__smakebuf_r+0xc>
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <__smakebuf_r+0x7c>)
 8007fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	6020      	str	r0, [r4, #0]
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	6163      	str	r3, [r4, #20]
 8007fb6:	9b01      	ldr	r3, [sp, #4]
 8007fb8:	6120      	str	r0, [r4, #16]
 8007fba:	b15b      	cbz	r3, 8007fd4 <__smakebuf_r+0x74>
 8007fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f000 fdd1 	bl	8008b68 <_isatty_r>
 8007fc6:	b128      	cbz	r0, 8007fd4 <__smakebuf_r+0x74>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f023 0303 	bic.w	r3, r3, #3
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	89a0      	ldrh	r0, [r4, #12]
 8007fd6:	4305      	orrs	r5, r0
 8007fd8:	81a5      	strh	r5, [r4, #12]
 8007fda:	e7cd      	b.n	8007f78 <__smakebuf_r+0x18>
 8007fdc:	08007d71 	.word	0x08007d71

08007fe0 <_free_r>:
 8007fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d048      	beq.n	8008078 <_free_r+0x98>
 8007fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fea:	9001      	str	r0, [sp, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f1a1 0404 	sub.w	r4, r1, #4
 8007ff2:	bfb8      	it	lt
 8007ff4:	18e4      	addlt	r4, r4, r3
 8007ff6:	f000 fdf3 	bl	8008be0 <__malloc_lock>
 8007ffa:	4a20      	ldr	r2, [pc, #128]	; (800807c <_free_r+0x9c>)
 8007ffc:	9801      	ldr	r0, [sp, #4]
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	4615      	mov	r5, r2
 8008002:	b933      	cbnz	r3, 8008012 <_free_r+0x32>
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6014      	str	r4, [r2, #0]
 8008008:	b003      	add	sp, #12
 800800a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800800e:	f000 bded 	b.w	8008bec <__malloc_unlock>
 8008012:	42a3      	cmp	r3, r4
 8008014:	d90b      	bls.n	800802e <_free_r+0x4e>
 8008016:	6821      	ldr	r1, [r4, #0]
 8008018:	1862      	adds	r2, r4, r1
 800801a:	4293      	cmp	r3, r2
 800801c:	bf04      	itt	eq
 800801e:	681a      	ldreq	r2, [r3, #0]
 8008020:	685b      	ldreq	r3, [r3, #4]
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	bf04      	itt	eq
 8008026:	1852      	addeq	r2, r2, r1
 8008028:	6022      	streq	r2, [r4, #0]
 800802a:	602c      	str	r4, [r5, #0]
 800802c:	e7ec      	b.n	8008008 <_free_r+0x28>
 800802e:	461a      	mov	r2, r3
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	b10b      	cbz	r3, 8008038 <_free_r+0x58>
 8008034:	42a3      	cmp	r3, r4
 8008036:	d9fa      	bls.n	800802e <_free_r+0x4e>
 8008038:	6811      	ldr	r1, [r2, #0]
 800803a:	1855      	adds	r5, r2, r1
 800803c:	42a5      	cmp	r5, r4
 800803e:	d10b      	bne.n	8008058 <_free_r+0x78>
 8008040:	6824      	ldr	r4, [r4, #0]
 8008042:	4421      	add	r1, r4
 8008044:	1854      	adds	r4, r2, r1
 8008046:	42a3      	cmp	r3, r4
 8008048:	6011      	str	r1, [r2, #0]
 800804a:	d1dd      	bne.n	8008008 <_free_r+0x28>
 800804c:	681c      	ldr	r4, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	6053      	str	r3, [r2, #4]
 8008052:	4421      	add	r1, r4
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	e7d7      	b.n	8008008 <_free_r+0x28>
 8008058:	d902      	bls.n	8008060 <_free_r+0x80>
 800805a:	230c      	movs	r3, #12
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	e7d3      	b.n	8008008 <_free_r+0x28>
 8008060:	6825      	ldr	r5, [r4, #0]
 8008062:	1961      	adds	r1, r4, r5
 8008064:	428b      	cmp	r3, r1
 8008066:	bf04      	itt	eq
 8008068:	6819      	ldreq	r1, [r3, #0]
 800806a:	685b      	ldreq	r3, [r3, #4]
 800806c:	6063      	str	r3, [r4, #4]
 800806e:	bf04      	itt	eq
 8008070:	1949      	addeq	r1, r1, r5
 8008072:	6021      	streq	r1, [r4, #0]
 8008074:	6054      	str	r4, [r2, #4]
 8008076:	e7c7      	b.n	8008008 <_free_r+0x28>
 8008078:	b003      	add	sp, #12
 800807a:	bd30      	pop	{r4, r5, pc}
 800807c:	20000aec 	.word	0x20000aec

08008080 <_malloc_r>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	1ccd      	adds	r5, r1, #3
 8008084:	f025 0503 	bic.w	r5, r5, #3
 8008088:	3508      	adds	r5, #8
 800808a:	2d0c      	cmp	r5, #12
 800808c:	bf38      	it	cc
 800808e:	250c      	movcc	r5, #12
 8008090:	2d00      	cmp	r5, #0
 8008092:	4606      	mov	r6, r0
 8008094:	db01      	blt.n	800809a <_malloc_r+0x1a>
 8008096:	42a9      	cmp	r1, r5
 8008098:	d903      	bls.n	80080a2 <_malloc_r+0x22>
 800809a:	230c      	movs	r3, #12
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	2000      	movs	r0, #0
 80080a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a2:	f000 fd9d 	bl	8008be0 <__malloc_lock>
 80080a6:	4921      	ldr	r1, [pc, #132]	; (800812c <_malloc_r+0xac>)
 80080a8:	680a      	ldr	r2, [r1, #0]
 80080aa:	4614      	mov	r4, r2
 80080ac:	b99c      	cbnz	r4, 80080d6 <_malloc_r+0x56>
 80080ae:	4f20      	ldr	r7, [pc, #128]	; (8008130 <_malloc_r+0xb0>)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	b923      	cbnz	r3, 80080be <_malloc_r+0x3e>
 80080b4:	4621      	mov	r1, r4
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 fcce 	bl	8008a58 <_sbrk_r>
 80080bc:	6038      	str	r0, [r7, #0]
 80080be:	4629      	mov	r1, r5
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 fcc9 	bl	8008a58 <_sbrk_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d123      	bne.n	8008112 <_malloc_r+0x92>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6033      	str	r3, [r6, #0]
 80080ce:	4630      	mov	r0, r6
 80080d0:	f000 fd8c 	bl	8008bec <__malloc_unlock>
 80080d4:	e7e3      	b.n	800809e <_malloc_r+0x1e>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	1b5b      	subs	r3, r3, r5
 80080da:	d417      	bmi.n	800810c <_malloc_r+0x8c>
 80080dc:	2b0b      	cmp	r3, #11
 80080de:	d903      	bls.n	80080e8 <_malloc_r+0x68>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	441c      	add	r4, r3
 80080e4:	6025      	str	r5, [r4, #0]
 80080e6:	e004      	b.n	80080f2 <_malloc_r+0x72>
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	42a2      	cmp	r2, r4
 80080ec:	bf0c      	ite	eq
 80080ee:	600b      	streq	r3, [r1, #0]
 80080f0:	6053      	strne	r3, [r2, #4]
 80080f2:	4630      	mov	r0, r6
 80080f4:	f000 fd7a 	bl	8008bec <__malloc_unlock>
 80080f8:	f104 000b 	add.w	r0, r4, #11
 80080fc:	1d23      	adds	r3, r4, #4
 80080fe:	f020 0007 	bic.w	r0, r0, #7
 8008102:	1ac2      	subs	r2, r0, r3
 8008104:	d0cc      	beq.n	80080a0 <_malloc_r+0x20>
 8008106:	1a1b      	subs	r3, r3, r0
 8008108:	50a3      	str	r3, [r4, r2]
 800810a:	e7c9      	b.n	80080a0 <_malloc_r+0x20>
 800810c:	4622      	mov	r2, r4
 800810e:	6864      	ldr	r4, [r4, #4]
 8008110:	e7cc      	b.n	80080ac <_malloc_r+0x2c>
 8008112:	1cc4      	adds	r4, r0, #3
 8008114:	f024 0403 	bic.w	r4, r4, #3
 8008118:	42a0      	cmp	r0, r4
 800811a:	d0e3      	beq.n	80080e4 <_malloc_r+0x64>
 800811c:	1a21      	subs	r1, r4, r0
 800811e:	4630      	mov	r0, r6
 8008120:	f000 fc9a 	bl	8008a58 <_sbrk_r>
 8008124:	3001      	adds	r0, #1
 8008126:	d1dd      	bne.n	80080e4 <_malloc_r+0x64>
 8008128:	e7cf      	b.n	80080ca <_malloc_r+0x4a>
 800812a:	bf00      	nop
 800812c:	20000aec 	.word	0x20000aec
 8008130:	20000af0 	.word	0x20000af0

08008134 <__ssputs_r>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	688e      	ldr	r6, [r1, #8]
 800813a:	429e      	cmp	r6, r3
 800813c:	4682      	mov	sl, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4690      	mov	r8, r2
 8008142:	461f      	mov	r7, r3
 8008144:	d838      	bhi.n	80081b8 <__ssputs_r+0x84>
 8008146:	898a      	ldrh	r2, [r1, #12]
 8008148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800814c:	d032      	beq.n	80081b4 <__ssputs_r+0x80>
 800814e:	6825      	ldr	r5, [r4, #0]
 8008150:	6909      	ldr	r1, [r1, #16]
 8008152:	eba5 0901 	sub.w	r9, r5, r1
 8008156:	6965      	ldr	r5, [r4, #20]
 8008158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800815c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008160:	3301      	adds	r3, #1
 8008162:	444b      	add	r3, r9
 8008164:	106d      	asrs	r5, r5, #1
 8008166:	429d      	cmp	r5, r3
 8008168:	bf38      	it	cc
 800816a:	461d      	movcc	r5, r3
 800816c:	0553      	lsls	r3, r2, #21
 800816e:	d531      	bpl.n	80081d4 <__ssputs_r+0xa0>
 8008170:	4629      	mov	r1, r5
 8008172:	f7ff ff85 	bl	8008080 <_malloc_r>
 8008176:	4606      	mov	r6, r0
 8008178:	b950      	cbnz	r0, 8008190 <__ssputs_r+0x5c>
 800817a:	230c      	movs	r3, #12
 800817c:	f8ca 3000 	str.w	r3, [sl]
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	6921      	ldr	r1, [r4, #16]
 8008192:	464a      	mov	r2, r9
 8008194:	f7ff fb6c 	bl	8007870 <memcpy>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800819e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	6126      	str	r6, [r4, #16]
 80081a6:	6165      	str	r5, [r4, #20]
 80081a8:	444e      	add	r6, r9
 80081aa:	eba5 0509 	sub.w	r5, r5, r9
 80081ae:	6026      	str	r6, [r4, #0]
 80081b0:	60a5      	str	r5, [r4, #8]
 80081b2:	463e      	mov	r6, r7
 80081b4:	42be      	cmp	r6, r7
 80081b6:	d900      	bls.n	80081ba <__ssputs_r+0x86>
 80081b8:	463e      	mov	r6, r7
 80081ba:	4632      	mov	r2, r6
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	4641      	mov	r1, r8
 80081c0:	f000 fcf4 	bl	8008bac <memmove>
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	4432      	add	r2, r6
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	6022      	str	r2, [r4, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e7db      	b.n	800818c <__ssputs_r+0x58>
 80081d4:	462a      	mov	r2, r5
 80081d6:	f000 fd0f 	bl	8008bf8 <_realloc_r>
 80081da:	4606      	mov	r6, r0
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1e1      	bne.n	80081a4 <__ssputs_r+0x70>
 80081e0:	6921      	ldr	r1, [r4, #16]
 80081e2:	4650      	mov	r0, sl
 80081e4:	f7ff fefc 	bl	8007fe0 <_free_r>
 80081e8:	e7c7      	b.n	800817a <__ssputs_r+0x46>
	...

080081ec <_svfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	4698      	mov	r8, r3
 80081f2:	898b      	ldrh	r3, [r1, #12]
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	b09d      	sub	sp, #116	; 0x74
 80081f8:	4607      	mov	r7, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	d50e      	bpl.n	800821e <_svfiprintf_r+0x32>
 8008200:	690b      	ldr	r3, [r1, #16]
 8008202:	b963      	cbnz	r3, 800821e <_svfiprintf_r+0x32>
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	f7ff ff3b 	bl	8008080 <_malloc_r>
 800820a:	6028      	str	r0, [r5, #0]
 800820c:	6128      	str	r0, [r5, #16]
 800820e:	b920      	cbnz	r0, 800821a <_svfiprintf_r+0x2e>
 8008210:	230c      	movs	r3, #12
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e0d1      	b.n	80083be <_svfiprintf_r+0x1d2>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	616b      	str	r3, [r5, #20]
 800821e:	2300      	movs	r3, #0
 8008220:	9309      	str	r3, [sp, #36]	; 0x24
 8008222:	2320      	movs	r3, #32
 8008224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008228:	f8cd 800c 	str.w	r8, [sp, #12]
 800822c:	2330      	movs	r3, #48	; 0x30
 800822e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083d8 <_svfiprintf_r+0x1ec>
 8008232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008236:	f04f 0901 	mov.w	r9, #1
 800823a:	4623      	mov	r3, r4
 800823c:	469a      	mov	sl, r3
 800823e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008242:	b10a      	cbz	r2, 8008248 <_svfiprintf_r+0x5c>
 8008244:	2a25      	cmp	r2, #37	; 0x25
 8008246:	d1f9      	bne.n	800823c <_svfiprintf_r+0x50>
 8008248:	ebba 0b04 	subs.w	fp, sl, r4
 800824c:	d00b      	beq.n	8008266 <_svfiprintf_r+0x7a>
 800824e:	465b      	mov	r3, fp
 8008250:	4622      	mov	r2, r4
 8008252:	4629      	mov	r1, r5
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff ff6d 	bl	8008134 <__ssputs_r>
 800825a:	3001      	adds	r0, #1
 800825c:	f000 80aa 	beq.w	80083b4 <_svfiprintf_r+0x1c8>
 8008260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008262:	445a      	add	r2, fp
 8008264:	9209      	str	r2, [sp, #36]	; 0x24
 8008266:	f89a 3000 	ldrb.w	r3, [sl]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 80a2 	beq.w	80083b4 <_svfiprintf_r+0x1c8>
 8008270:	2300      	movs	r3, #0
 8008272:	f04f 32ff 	mov.w	r2, #4294967295
 8008276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827a:	f10a 0a01 	add.w	sl, sl, #1
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9307      	str	r3, [sp, #28]
 8008282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008286:	931a      	str	r3, [sp, #104]	; 0x68
 8008288:	4654      	mov	r4, sl
 800828a:	2205      	movs	r2, #5
 800828c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008290:	4851      	ldr	r0, [pc, #324]	; (80083d8 <_svfiprintf_r+0x1ec>)
 8008292:	f7f7 ffc5 	bl	8000220 <memchr>
 8008296:	9a04      	ldr	r2, [sp, #16]
 8008298:	b9d8      	cbnz	r0, 80082d2 <_svfiprintf_r+0xe6>
 800829a:	06d0      	lsls	r0, r2, #27
 800829c:	bf44      	itt	mi
 800829e:	2320      	movmi	r3, #32
 80082a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a4:	0711      	lsls	r1, r2, #28
 80082a6:	bf44      	itt	mi
 80082a8:	232b      	movmi	r3, #43	; 0x2b
 80082aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ae:	f89a 3000 	ldrb.w	r3, [sl]
 80082b2:	2b2a      	cmp	r3, #42	; 0x2a
 80082b4:	d015      	beq.n	80082e2 <_svfiprintf_r+0xf6>
 80082b6:	9a07      	ldr	r2, [sp, #28]
 80082b8:	4654      	mov	r4, sl
 80082ba:	2000      	movs	r0, #0
 80082bc:	f04f 0c0a 	mov.w	ip, #10
 80082c0:	4621      	mov	r1, r4
 80082c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c6:	3b30      	subs	r3, #48	; 0x30
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d94e      	bls.n	800836a <_svfiprintf_r+0x17e>
 80082cc:	b1b0      	cbz	r0, 80082fc <_svfiprintf_r+0x110>
 80082ce:	9207      	str	r2, [sp, #28]
 80082d0:	e014      	b.n	80082fc <_svfiprintf_r+0x110>
 80082d2:	eba0 0308 	sub.w	r3, r0, r8
 80082d6:	fa09 f303 	lsl.w	r3, r9, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	46a2      	mov	sl, r4
 80082e0:	e7d2      	b.n	8008288 <_svfiprintf_r+0x9c>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	1d19      	adds	r1, r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	9103      	str	r1, [sp, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfbb      	ittet	lt
 80082ee:	425b      	neglt	r3, r3
 80082f0:	f042 0202 	orrlt.w	r2, r2, #2
 80082f4:	9307      	strge	r3, [sp, #28]
 80082f6:	9307      	strlt	r3, [sp, #28]
 80082f8:	bfb8      	it	lt
 80082fa:	9204      	strlt	r2, [sp, #16]
 80082fc:	7823      	ldrb	r3, [r4, #0]
 80082fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008300:	d10c      	bne.n	800831c <_svfiprintf_r+0x130>
 8008302:	7863      	ldrb	r3, [r4, #1]
 8008304:	2b2a      	cmp	r3, #42	; 0x2a
 8008306:	d135      	bne.n	8008374 <_svfiprintf_r+0x188>
 8008308:	9b03      	ldr	r3, [sp, #12]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	9203      	str	r2, [sp, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfb8      	it	lt
 8008314:	f04f 33ff 	movlt.w	r3, #4294967295
 8008318:	3402      	adds	r4, #2
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083e8 <_svfiprintf_r+0x1fc>
 8008320:	7821      	ldrb	r1, [r4, #0]
 8008322:	2203      	movs	r2, #3
 8008324:	4650      	mov	r0, sl
 8008326:	f7f7 ff7b 	bl	8000220 <memchr>
 800832a:	b140      	cbz	r0, 800833e <_svfiprintf_r+0x152>
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	eba0 000a 	sub.w	r0, r0, sl
 8008332:	fa03 f000 	lsl.w	r0, r3, r0
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	4303      	orrs	r3, r0
 800833a:	3401      	adds	r4, #1
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	4826      	ldr	r0, [pc, #152]	; (80083dc <_svfiprintf_r+0x1f0>)
 8008344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008348:	2206      	movs	r2, #6
 800834a:	f7f7 ff69 	bl	8000220 <memchr>
 800834e:	2800      	cmp	r0, #0
 8008350:	d038      	beq.n	80083c4 <_svfiprintf_r+0x1d8>
 8008352:	4b23      	ldr	r3, [pc, #140]	; (80083e0 <_svfiprintf_r+0x1f4>)
 8008354:	bb1b      	cbnz	r3, 800839e <_svfiprintf_r+0x1b2>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	3307      	adds	r3, #7
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	3308      	adds	r3, #8
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008364:	4433      	add	r3, r6
 8008366:	9309      	str	r3, [sp, #36]	; 0x24
 8008368:	e767      	b.n	800823a <_svfiprintf_r+0x4e>
 800836a:	fb0c 3202 	mla	r2, ip, r2, r3
 800836e:	460c      	mov	r4, r1
 8008370:	2001      	movs	r0, #1
 8008372:	e7a5      	b.n	80082c0 <_svfiprintf_r+0xd4>
 8008374:	2300      	movs	r3, #0
 8008376:	3401      	adds	r4, #1
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	4619      	mov	r1, r3
 800837c:	f04f 0c0a 	mov.w	ip, #10
 8008380:	4620      	mov	r0, r4
 8008382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008386:	3a30      	subs	r2, #48	; 0x30
 8008388:	2a09      	cmp	r2, #9
 800838a:	d903      	bls.n	8008394 <_svfiprintf_r+0x1a8>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0c5      	beq.n	800831c <_svfiprintf_r+0x130>
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	e7c3      	b.n	800831c <_svfiprintf_r+0x130>
 8008394:	fb0c 2101 	mla	r1, ip, r1, r2
 8008398:	4604      	mov	r4, r0
 800839a:	2301      	movs	r3, #1
 800839c:	e7f0      	b.n	8008380 <_svfiprintf_r+0x194>
 800839e:	ab03      	add	r3, sp, #12
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	462a      	mov	r2, r5
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <_svfiprintf_r+0x1f8>)
 80083a6:	a904      	add	r1, sp, #16
 80083a8:	4638      	mov	r0, r7
 80083aa:	f3af 8000 	nop.w
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	4606      	mov	r6, r0
 80083b2:	d1d6      	bne.n	8008362 <_svfiprintf_r+0x176>
 80083b4:	89ab      	ldrh	r3, [r5, #12]
 80083b6:	065b      	lsls	r3, r3, #25
 80083b8:	f53f af2c 	bmi.w	8008214 <_svfiprintf_r+0x28>
 80083bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083be:	b01d      	add	sp, #116	; 0x74
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	ab03      	add	r3, sp, #12
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	462a      	mov	r2, r5
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <_svfiprintf_r+0x1f8>)
 80083cc:	a904      	add	r1, sp, #16
 80083ce:	4638      	mov	r0, r7
 80083d0:	f000 f9d4 	bl	800877c <_printf_i>
 80083d4:	e7eb      	b.n	80083ae <_svfiprintf_r+0x1c2>
 80083d6:	bf00      	nop
 80083d8:	0800a3a4 	.word	0x0800a3a4
 80083dc:	0800a3ae 	.word	0x0800a3ae
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008135 	.word	0x08008135
 80083e8:	0800a3aa 	.word	0x0800a3aa

080083ec <__sfputc_r>:
 80083ec:	6893      	ldr	r3, [r2, #8]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	b410      	push	{r4}
 80083f4:	6093      	str	r3, [r2, #8]
 80083f6:	da08      	bge.n	800840a <__sfputc_r+0x1e>
 80083f8:	6994      	ldr	r4, [r2, #24]
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	db01      	blt.n	8008402 <__sfputc_r+0x16>
 80083fe:	290a      	cmp	r1, #10
 8008400:	d103      	bne.n	800840a <__sfputc_r+0x1e>
 8008402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008406:	f7ff bb0d 	b.w	8007a24 <__swbuf_r>
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	1c58      	adds	r0, r3, #1
 800840e:	6010      	str	r0, [r2, #0]
 8008410:	7019      	strb	r1, [r3, #0]
 8008412:	4608      	mov	r0, r1
 8008414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008418:	4770      	bx	lr

0800841a <__sfputs_r>:
 800841a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
 8008420:	4614      	mov	r4, r2
 8008422:	18d5      	adds	r5, r2, r3
 8008424:	42ac      	cmp	r4, r5
 8008426:	d101      	bne.n	800842c <__sfputs_r+0x12>
 8008428:	2000      	movs	r0, #0
 800842a:	e007      	b.n	800843c <__sfputs_r+0x22>
 800842c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008430:	463a      	mov	r2, r7
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ffda 	bl	80083ec <__sfputc_r>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d1f3      	bne.n	8008424 <__sfputs_r+0xa>
 800843c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008440 <_vfiprintf_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	460d      	mov	r5, r1
 8008446:	b09d      	sub	sp, #116	; 0x74
 8008448:	4614      	mov	r4, r2
 800844a:	4698      	mov	r8, r3
 800844c:	4606      	mov	r6, r0
 800844e:	b118      	cbz	r0, 8008458 <_vfiprintf_r+0x18>
 8008450:	6983      	ldr	r3, [r0, #24]
 8008452:	b90b      	cbnz	r3, 8008458 <_vfiprintf_r+0x18>
 8008454:	f7ff fcc0 	bl	8007dd8 <__sinit>
 8008458:	4b89      	ldr	r3, [pc, #548]	; (8008680 <_vfiprintf_r+0x240>)
 800845a:	429d      	cmp	r5, r3
 800845c:	d11b      	bne.n	8008496 <_vfiprintf_r+0x56>
 800845e:	6875      	ldr	r5, [r6, #4]
 8008460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	d405      	bmi.n	8008472 <_vfiprintf_r+0x32>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	059a      	lsls	r2, r3, #22
 800846a:	d402      	bmi.n	8008472 <_vfiprintf_r+0x32>
 800846c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846e:	f7ff fd51 	bl	8007f14 <__retarget_lock_acquire_recursive>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	071b      	lsls	r3, r3, #28
 8008476:	d501      	bpl.n	800847c <_vfiprintf_r+0x3c>
 8008478:	692b      	ldr	r3, [r5, #16]
 800847a:	b9eb      	cbnz	r3, 80084b8 <_vfiprintf_r+0x78>
 800847c:	4629      	mov	r1, r5
 800847e:	4630      	mov	r0, r6
 8008480:	f7ff fb22 	bl	8007ac8 <__swsetup_r>
 8008484:	b1c0      	cbz	r0, 80084b8 <_vfiprintf_r+0x78>
 8008486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008488:	07dc      	lsls	r4, r3, #31
 800848a:	d50e      	bpl.n	80084aa <_vfiprintf_r+0x6a>
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	b01d      	add	sp, #116	; 0x74
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	4b7b      	ldr	r3, [pc, #492]	; (8008684 <_vfiprintf_r+0x244>)
 8008498:	429d      	cmp	r5, r3
 800849a:	d101      	bne.n	80084a0 <_vfiprintf_r+0x60>
 800849c:	68b5      	ldr	r5, [r6, #8]
 800849e:	e7df      	b.n	8008460 <_vfiprintf_r+0x20>
 80084a0:	4b79      	ldr	r3, [pc, #484]	; (8008688 <_vfiprintf_r+0x248>)
 80084a2:	429d      	cmp	r5, r3
 80084a4:	bf08      	it	eq
 80084a6:	68f5      	ldreq	r5, [r6, #12]
 80084a8:	e7da      	b.n	8008460 <_vfiprintf_r+0x20>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	0598      	lsls	r0, r3, #22
 80084ae:	d4ed      	bmi.n	800848c <_vfiprintf_r+0x4c>
 80084b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084b2:	f7ff fd30 	bl	8007f16 <__retarget_lock_release_recursive>
 80084b6:	e7e9      	b.n	800848c <_vfiprintf_r+0x4c>
 80084b8:	2300      	movs	r3, #0
 80084ba:	9309      	str	r3, [sp, #36]	; 0x24
 80084bc:	2320      	movs	r3, #32
 80084be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80084c6:	2330      	movs	r3, #48	; 0x30
 80084c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800868c <_vfiprintf_r+0x24c>
 80084cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084d0:	f04f 0901 	mov.w	r9, #1
 80084d4:	4623      	mov	r3, r4
 80084d6:	469a      	mov	sl, r3
 80084d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084dc:	b10a      	cbz	r2, 80084e2 <_vfiprintf_r+0xa2>
 80084de:	2a25      	cmp	r2, #37	; 0x25
 80084e0:	d1f9      	bne.n	80084d6 <_vfiprintf_r+0x96>
 80084e2:	ebba 0b04 	subs.w	fp, sl, r4
 80084e6:	d00b      	beq.n	8008500 <_vfiprintf_r+0xc0>
 80084e8:	465b      	mov	r3, fp
 80084ea:	4622      	mov	r2, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	4630      	mov	r0, r6
 80084f0:	f7ff ff93 	bl	800841a <__sfputs_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	f000 80aa 	beq.w	800864e <_vfiprintf_r+0x20e>
 80084fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fc:	445a      	add	r2, fp
 80084fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008500:	f89a 3000 	ldrb.w	r3, [sl]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80a2 	beq.w	800864e <_vfiprintf_r+0x20e>
 800850a:	2300      	movs	r3, #0
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008514:	f10a 0a01 	add.w	sl, sl, #1
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008520:	931a      	str	r3, [sp, #104]	; 0x68
 8008522:	4654      	mov	r4, sl
 8008524:	2205      	movs	r2, #5
 8008526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852a:	4858      	ldr	r0, [pc, #352]	; (800868c <_vfiprintf_r+0x24c>)
 800852c:	f7f7 fe78 	bl	8000220 <memchr>
 8008530:	9a04      	ldr	r2, [sp, #16]
 8008532:	b9d8      	cbnz	r0, 800856c <_vfiprintf_r+0x12c>
 8008534:	06d1      	lsls	r1, r2, #27
 8008536:	bf44      	itt	mi
 8008538:	2320      	movmi	r3, #32
 800853a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800853e:	0713      	lsls	r3, r2, #28
 8008540:	bf44      	itt	mi
 8008542:	232b      	movmi	r3, #43	; 0x2b
 8008544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008548:	f89a 3000 	ldrb.w	r3, [sl]
 800854c:	2b2a      	cmp	r3, #42	; 0x2a
 800854e:	d015      	beq.n	800857c <_vfiprintf_r+0x13c>
 8008550:	9a07      	ldr	r2, [sp, #28]
 8008552:	4654      	mov	r4, sl
 8008554:	2000      	movs	r0, #0
 8008556:	f04f 0c0a 	mov.w	ip, #10
 800855a:	4621      	mov	r1, r4
 800855c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008560:	3b30      	subs	r3, #48	; 0x30
 8008562:	2b09      	cmp	r3, #9
 8008564:	d94e      	bls.n	8008604 <_vfiprintf_r+0x1c4>
 8008566:	b1b0      	cbz	r0, 8008596 <_vfiprintf_r+0x156>
 8008568:	9207      	str	r2, [sp, #28]
 800856a:	e014      	b.n	8008596 <_vfiprintf_r+0x156>
 800856c:	eba0 0308 	sub.w	r3, r0, r8
 8008570:	fa09 f303 	lsl.w	r3, r9, r3
 8008574:	4313      	orrs	r3, r2
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	46a2      	mov	sl, r4
 800857a:	e7d2      	b.n	8008522 <_vfiprintf_r+0xe2>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	1d19      	adds	r1, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9103      	str	r1, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfbb      	ittet	lt
 8008588:	425b      	neglt	r3, r3
 800858a:	f042 0202 	orrlt.w	r2, r2, #2
 800858e:	9307      	strge	r3, [sp, #28]
 8008590:	9307      	strlt	r3, [sp, #28]
 8008592:	bfb8      	it	lt
 8008594:	9204      	strlt	r2, [sp, #16]
 8008596:	7823      	ldrb	r3, [r4, #0]
 8008598:	2b2e      	cmp	r3, #46	; 0x2e
 800859a:	d10c      	bne.n	80085b6 <_vfiprintf_r+0x176>
 800859c:	7863      	ldrb	r3, [r4, #1]
 800859e:	2b2a      	cmp	r3, #42	; 0x2a
 80085a0:	d135      	bne.n	800860e <_vfiprintf_r+0x1ce>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	1d1a      	adds	r2, r3, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	9203      	str	r2, [sp, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bfb8      	it	lt
 80085ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80085b2:	3402      	adds	r4, #2
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800869c <_vfiprintf_r+0x25c>
 80085ba:	7821      	ldrb	r1, [r4, #0]
 80085bc:	2203      	movs	r2, #3
 80085be:	4650      	mov	r0, sl
 80085c0:	f7f7 fe2e 	bl	8000220 <memchr>
 80085c4:	b140      	cbz	r0, 80085d8 <_vfiprintf_r+0x198>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	eba0 000a 	sub.w	r0, r0, sl
 80085cc:	fa03 f000 	lsl.w	r0, r3, r0
 80085d0:	9b04      	ldr	r3, [sp, #16]
 80085d2:	4303      	orrs	r3, r0
 80085d4:	3401      	adds	r4, #1
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085dc:	482c      	ldr	r0, [pc, #176]	; (8008690 <_vfiprintf_r+0x250>)
 80085de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085e2:	2206      	movs	r2, #6
 80085e4:	f7f7 fe1c 	bl	8000220 <memchr>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d03f      	beq.n	800866c <_vfiprintf_r+0x22c>
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <_vfiprintf_r+0x254>)
 80085ee:	bb1b      	cbnz	r3, 8008638 <_vfiprintf_r+0x1f8>
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	3307      	adds	r3, #7
 80085f4:	f023 0307 	bic.w	r3, r3, #7
 80085f8:	3308      	adds	r3, #8
 80085fa:	9303      	str	r3, [sp, #12]
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	443b      	add	r3, r7
 8008600:	9309      	str	r3, [sp, #36]	; 0x24
 8008602:	e767      	b.n	80084d4 <_vfiprintf_r+0x94>
 8008604:	fb0c 3202 	mla	r2, ip, r2, r3
 8008608:	460c      	mov	r4, r1
 800860a:	2001      	movs	r0, #1
 800860c:	e7a5      	b.n	800855a <_vfiprintf_r+0x11a>
 800860e:	2300      	movs	r3, #0
 8008610:	3401      	adds	r4, #1
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	4619      	mov	r1, r3
 8008616:	f04f 0c0a 	mov.w	ip, #10
 800861a:	4620      	mov	r0, r4
 800861c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008620:	3a30      	subs	r2, #48	; 0x30
 8008622:	2a09      	cmp	r2, #9
 8008624:	d903      	bls.n	800862e <_vfiprintf_r+0x1ee>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0c5      	beq.n	80085b6 <_vfiprintf_r+0x176>
 800862a:	9105      	str	r1, [sp, #20]
 800862c:	e7c3      	b.n	80085b6 <_vfiprintf_r+0x176>
 800862e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008632:	4604      	mov	r4, r0
 8008634:	2301      	movs	r3, #1
 8008636:	e7f0      	b.n	800861a <_vfiprintf_r+0x1da>
 8008638:	ab03      	add	r3, sp, #12
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	462a      	mov	r2, r5
 800863e:	4b16      	ldr	r3, [pc, #88]	; (8008698 <_vfiprintf_r+0x258>)
 8008640:	a904      	add	r1, sp, #16
 8008642:	4630      	mov	r0, r6
 8008644:	f3af 8000 	nop.w
 8008648:	4607      	mov	r7, r0
 800864a:	1c78      	adds	r0, r7, #1
 800864c:	d1d6      	bne.n	80085fc <_vfiprintf_r+0x1bc>
 800864e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008650:	07d9      	lsls	r1, r3, #31
 8008652:	d405      	bmi.n	8008660 <_vfiprintf_r+0x220>
 8008654:	89ab      	ldrh	r3, [r5, #12]
 8008656:	059a      	lsls	r2, r3, #22
 8008658:	d402      	bmi.n	8008660 <_vfiprintf_r+0x220>
 800865a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865c:	f7ff fc5b 	bl	8007f16 <__retarget_lock_release_recursive>
 8008660:	89ab      	ldrh	r3, [r5, #12]
 8008662:	065b      	lsls	r3, r3, #25
 8008664:	f53f af12 	bmi.w	800848c <_vfiprintf_r+0x4c>
 8008668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866a:	e711      	b.n	8008490 <_vfiprintf_r+0x50>
 800866c:	ab03      	add	r3, sp, #12
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	462a      	mov	r2, r5
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <_vfiprintf_r+0x258>)
 8008674:	a904      	add	r1, sp, #16
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f880 	bl	800877c <_printf_i>
 800867c:	e7e4      	b.n	8008648 <_vfiprintf_r+0x208>
 800867e:	bf00      	nop
 8008680:	0800a364 	.word	0x0800a364
 8008684:	0800a384 	.word	0x0800a384
 8008688:	0800a344 	.word	0x0800a344
 800868c:	0800a3a4 	.word	0x0800a3a4
 8008690:	0800a3ae 	.word	0x0800a3ae
 8008694:	00000000 	.word	0x00000000
 8008698:	0800841b 	.word	0x0800841b
 800869c:	0800a3aa 	.word	0x0800a3aa

080086a0 <_printf_common>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	4616      	mov	r6, r2
 80086a6:	4699      	mov	r9, r3
 80086a8:	688a      	ldr	r2, [r1, #8]
 80086aa:	690b      	ldr	r3, [r1, #16]
 80086ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bfb8      	it	lt
 80086b4:	4613      	movlt	r3, r2
 80086b6:	6033      	str	r3, [r6, #0]
 80086b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086bc:	4607      	mov	r7, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	b10a      	cbz	r2, 80086c6 <_printf_common+0x26>
 80086c2:	3301      	adds	r3, #1
 80086c4:	6033      	str	r3, [r6, #0]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	0699      	lsls	r1, r3, #26
 80086ca:	bf42      	ittt	mi
 80086cc:	6833      	ldrmi	r3, [r6, #0]
 80086ce:	3302      	addmi	r3, #2
 80086d0:	6033      	strmi	r3, [r6, #0]
 80086d2:	6825      	ldr	r5, [r4, #0]
 80086d4:	f015 0506 	ands.w	r5, r5, #6
 80086d8:	d106      	bne.n	80086e8 <_printf_common+0x48>
 80086da:	f104 0a19 	add.w	sl, r4, #25
 80086de:	68e3      	ldr	r3, [r4, #12]
 80086e0:	6832      	ldr	r2, [r6, #0]
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	dc26      	bgt.n	8008736 <_printf_common+0x96>
 80086e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ec:	1e13      	subs	r3, r2, #0
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	bf18      	it	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	0692      	lsls	r2, r2, #26
 80086f6:	d42b      	bmi.n	8008750 <_printf_common+0xb0>
 80086f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086fc:	4649      	mov	r1, r9
 80086fe:	4638      	mov	r0, r7
 8008700:	47c0      	blx	r8
 8008702:	3001      	adds	r0, #1
 8008704:	d01e      	beq.n	8008744 <_printf_common+0xa4>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	68e5      	ldr	r5, [r4, #12]
 800870a:	6832      	ldr	r2, [r6, #0]
 800870c:	f003 0306 	and.w	r3, r3, #6
 8008710:	2b04      	cmp	r3, #4
 8008712:	bf08      	it	eq
 8008714:	1aad      	subeq	r5, r5, r2
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	6922      	ldr	r2, [r4, #16]
 800871a:	bf0c      	ite	eq
 800871c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008720:	2500      	movne	r5, #0
 8008722:	4293      	cmp	r3, r2
 8008724:	bfc4      	itt	gt
 8008726:	1a9b      	subgt	r3, r3, r2
 8008728:	18ed      	addgt	r5, r5, r3
 800872a:	2600      	movs	r6, #0
 800872c:	341a      	adds	r4, #26
 800872e:	42b5      	cmp	r5, r6
 8008730:	d11a      	bne.n	8008768 <_printf_common+0xc8>
 8008732:	2000      	movs	r0, #0
 8008734:	e008      	b.n	8008748 <_printf_common+0xa8>
 8008736:	2301      	movs	r3, #1
 8008738:	4652      	mov	r2, sl
 800873a:	4649      	mov	r1, r9
 800873c:	4638      	mov	r0, r7
 800873e:	47c0      	blx	r8
 8008740:	3001      	adds	r0, #1
 8008742:	d103      	bne.n	800874c <_printf_common+0xac>
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	3501      	adds	r5, #1
 800874e:	e7c6      	b.n	80086de <_printf_common+0x3e>
 8008750:	18e1      	adds	r1, r4, r3
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	2030      	movs	r0, #48	; 0x30
 8008756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800875a:	4422      	add	r2, r4
 800875c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008764:	3302      	adds	r3, #2
 8008766:	e7c7      	b.n	80086f8 <_printf_common+0x58>
 8008768:	2301      	movs	r3, #1
 800876a:	4622      	mov	r2, r4
 800876c:	4649      	mov	r1, r9
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	3001      	adds	r0, #1
 8008774:	d0e6      	beq.n	8008744 <_printf_common+0xa4>
 8008776:	3601      	adds	r6, #1
 8008778:	e7d9      	b.n	800872e <_printf_common+0x8e>
	...

0800877c <_printf_i>:
 800877c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	460c      	mov	r4, r1
 8008782:	4691      	mov	r9, r2
 8008784:	7e27      	ldrb	r7, [r4, #24]
 8008786:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008788:	2f78      	cmp	r7, #120	; 0x78
 800878a:	4680      	mov	r8, r0
 800878c:	469a      	mov	sl, r3
 800878e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008792:	d807      	bhi.n	80087a4 <_printf_i+0x28>
 8008794:	2f62      	cmp	r7, #98	; 0x62
 8008796:	d80a      	bhi.n	80087ae <_printf_i+0x32>
 8008798:	2f00      	cmp	r7, #0
 800879a:	f000 80d8 	beq.w	800894e <_printf_i+0x1d2>
 800879e:	2f58      	cmp	r7, #88	; 0x58
 80087a0:	f000 80a3 	beq.w	80088ea <_printf_i+0x16e>
 80087a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087ac:	e03a      	b.n	8008824 <_printf_i+0xa8>
 80087ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087b2:	2b15      	cmp	r3, #21
 80087b4:	d8f6      	bhi.n	80087a4 <_printf_i+0x28>
 80087b6:	a001      	add	r0, pc, #4	; (adr r0, 80087bc <_printf_i+0x40>)
 80087b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087bc:	08008815 	.word	0x08008815
 80087c0:	08008829 	.word	0x08008829
 80087c4:	080087a5 	.word	0x080087a5
 80087c8:	080087a5 	.word	0x080087a5
 80087cc:	080087a5 	.word	0x080087a5
 80087d0:	080087a5 	.word	0x080087a5
 80087d4:	08008829 	.word	0x08008829
 80087d8:	080087a5 	.word	0x080087a5
 80087dc:	080087a5 	.word	0x080087a5
 80087e0:	080087a5 	.word	0x080087a5
 80087e4:	080087a5 	.word	0x080087a5
 80087e8:	08008935 	.word	0x08008935
 80087ec:	08008859 	.word	0x08008859
 80087f0:	08008917 	.word	0x08008917
 80087f4:	080087a5 	.word	0x080087a5
 80087f8:	080087a5 	.word	0x080087a5
 80087fc:	08008957 	.word	0x08008957
 8008800:	080087a5 	.word	0x080087a5
 8008804:	08008859 	.word	0x08008859
 8008808:	080087a5 	.word	0x080087a5
 800880c:	080087a5 	.word	0x080087a5
 8008810:	0800891f 	.word	0x0800891f
 8008814:	680b      	ldr	r3, [r1, #0]
 8008816:	1d1a      	adds	r2, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	600a      	str	r2, [r1, #0]
 800881c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008824:	2301      	movs	r3, #1
 8008826:	e0a3      	b.n	8008970 <_printf_i+0x1f4>
 8008828:	6825      	ldr	r5, [r4, #0]
 800882a:	6808      	ldr	r0, [r1, #0]
 800882c:	062e      	lsls	r6, r5, #24
 800882e:	f100 0304 	add.w	r3, r0, #4
 8008832:	d50a      	bpl.n	800884a <_printf_i+0xce>
 8008834:	6805      	ldr	r5, [r0, #0]
 8008836:	600b      	str	r3, [r1, #0]
 8008838:	2d00      	cmp	r5, #0
 800883a:	da03      	bge.n	8008844 <_printf_i+0xc8>
 800883c:	232d      	movs	r3, #45	; 0x2d
 800883e:	426d      	negs	r5, r5
 8008840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008844:	485e      	ldr	r0, [pc, #376]	; (80089c0 <_printf_i+0x244>)
 8008846:	230a      	movs	r3, #10
 8008848:	e019      	b.n	800887e <_printf_i+0x102>
 800884a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800884e:	6805      	ldr	r5, [r0, #0]
 8008850:	600b      	str	r3, [r1, #0]
 8008852:	bf18      	it	ne
 8008854:	b22d      	sxthne	r5, r5
 8008856:	e7ef      	b.n	8008838 <_printf_i+0xbc>
 8008858:	680b      	ldr	r3, [r1, #0]
 800885a:	6825      	ldr	r5, [r4, #0]
 800885c:	1d18      	adds	r0, r3, #4
 800885e:	6008      	str	r0, [r1, #0]
 8008860:	0628      	lsls	r0, r5, #24
 8008862:	d501      	bpl.n	8008868 <_printf_i+0xec>
 8008864:	681d      	ldr	r5, [r3, #0]
 8008866:	e002      	b.n	800886e <_printf_i+0xf2>
 8008868:	0669      	lsls	r1, r5, #25
 800886a:	d5fb      	bpl.n	8008864 <_printf_i+0xe8>
 800886c:	881d      	ldrh	r5, [r3, #0]
 800886e:	4854      	ldr	r0, [pc, #336]	; (80089c0 <_printf_i+0x244>)
 8008870:	2f6f      	cmp	r7, #111	; 0x6f
 8008872:	bf0c      	ite	eq
 8008874:	2308      	moveq	r3, #8
 8008876:	230a      	movne	r3, #10
 8008878:	2100      	movs	r1, #0
 800887a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800887e:	6866      	ldr	r6, [r4, #4]
 8008880:	60a6      	str	r6, [r4, #8]
 8008882:	2e00      	cmp	r6, #0
 8008884:	bfa2      	ittt	ge
 8008886:	6821      	ldrge	r1, [r4, #0]
 8008888:	f021 0104 	bicge.w	r1, r1, #4
 800888c:	6021      	strge	r1, [r4, #0]
 800888e:	b90d      	cbnz	r5, 8008894 <_printf_i+0x118>
 8008890:	2e00      	cmp	r6, #0
 8008892:	d04d      	beq.n	8008930 <_printf_i+0x1b4>
 8008894:	4616      	mov	r6, r2
 8008896:	fbb5 f1f3 	udiv	r1, r5, r3
 800889a:	fb03 5711 	mls	r7, r3, r1, r5
 800889e:	5dc7      	ldrb	r7, [r0, r7]
 80088a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a4:	462f      	mov	r7, r5
 80088a6:	42bb      	cmp	r3, r7
 80088a8:	460d      	mov	r5, r1
 80088aa:	d9f4      	bls.n	8008896 <_printf_i+0x11a>
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	d10b      	bne.n	80088c8 <_printf_i+0x14c>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07df      	lsls	r7, r3, #31
 80088b4:	d508      	bpl.n	80088c8 <_printf_i+0x14c>
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	6861      	ldr	r1, [r4, #4]
 80088ba:	4299      	cmp	r1, r3
 80088bc:	bfde      	ittt	le
 80088be:	2330      	movle	r3, #48	; 0x30
 80088c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c8:	1b92      	subs	r2, r2, r6
 80088ca:	6122      	str	r2, [r4, #16]
 80088cc:	f8cd a000 	str.w	sl, [sp]
 80088d0:	464b      	mov	r3, r9
 80088d2:	aa03      	add	r2, sp, #12
 80088d4:	4621      	mov	r1, r4
 80088d6:	4640      	mov	r0, r8
 80088d8:	f7ff fee2 	bl	80086a0 <_printf_common>
 80088dc:	3001      	adds	r0, #1
 80088de:	d14c      	bne.n	800897a <_printf_i+0x1fe>
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	b004      	add	sp, #16
 80088e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ea:	4835      	ldr	r0, [pc, #212]	; (80089c0 <_printf_i+0x244>)
 80088ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	680e      	ldr	r6, [r1, #0]
 80088f4:	061f      	lsls	r7, r3, #24
 80088f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088fa:	600e      	str	r6, [r1, #0]
 80088fc:	d514      	bpl.n	8008928 <_printf_i+0x1ac>
 80088fe:	07d9      	lsls	r1, r3, #31
 8008900:	bf44      	itt	mi
 8008902:	f043 0320 	orrmi.w	r3, r3, #32
 8008906:	6023      	strmi	r3, [r4, #0]
 8008908:	b91d      	cbnz	r5, 8008912 <_printf_i+0x196>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	f023 0320 	bic.w	r3, r3, #32
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	2310      	movs	r3, #16
 8008914:	e7b0      	b.n	8008878 <_printf_i+0xfc>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	f043 0320 	orr.w	r3, r3, #32
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	2378      	movs	r3, #120	; 0x78
 8008920:	4828      	ldr	r0, [pc, #160]	; (80089c4 <_printf_i+0x248>)
 8008922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008926:	e7e3      	b.n	80088f0 <_printf_i+0x174>
 8008928:	065e      	lsls	r6, r3, #25
 800892a:	bf48      	it	mi
 800892c:	b2ad      	uxthmi	r5, r5
 800892e:	e7e6      	b.n	80088fe <_printf_i+0x182>
 8008930:	4616      	mov	r6, r2
 8008932:	e7bb      	b.n	80088ac <_printf_i+0x130>
 8008934:	680b      	ldr	r3, [r1, #0]
 8008936:	6826      	ldr	r6, [r4, #0]
 8008938:	6960      	ldr	r0, [r4, #20]
 800893a:	1d1d      	adds	r5, r3, #4
 800893c:	600d      	str	r5, [r1, #0]
 800893e:	0635      	lsls	r5, r6, #24
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	d501      	bpl.n	8008948 <_printf_i+0x1cc>
 8008944:	6018      	str	r0, [r3, #0]
 8008946:	e002      	b.n	800894e <_printf_i+0x1d2>
 8008948:	0671      	lsls	r1, r6, #25
 800894a:	d5fb      	bpl.n	8008944 <_printf_i+0x1c8>
 800894c:	8018      	strh	r0, [r3, #0]
 800894e:	2300      	movs	r3, #0
 8008950:	6123      	str	r3, [r4, #16]
 8008952:	4616      	mov	r6, r2
 8008954:	e7ba      	b.n	80088cc <_printf_i+0x150>
 8008956:	680b      	ldr	r3, [r1, #0]
 8008958:	1d1a      	adds	r2, r3, #4
 800895a:	600a      	str	r2, [r1, #0]
 800895c:	681e      	ldr	r6, [r3, #0]
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	2100      	movs	r1, #0
 8008962:	4630      	mov	r0, r6
 8008964:	f7f7 fc5c 	bl	8000220 <memchr>
 8008968:	b108      	cbz	r0, 800896e <_printf_i+0x1f2>
 800896a:	1b80      	subs	r0, r0, r6
 800896c:	6060      	str	r0, [r4, #4]
 800896e:	6863      	ldr	r3, [r4, #4]
 8008970:	6123      	str	r3, [r4, #16]
 8008972:	2300      	movs	r3, #0
 8008974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008978:	e7a8      	b.n	80088cc <_printf_i+0x150>
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	4632      	mov	r2, r6
 800897e:	4649      	mov	r1, r9
 8008980:	4640      	mov	r0, r8
 8008982:	47d0      	blx	sl
 8008984:	3001      	adds	r0, #1
 8008986:	d0ab      	beq.n	80088e0 <_printf_i+0x164>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	079b      	lsls	r3, r3, #30
 800898c:	d413      	bmi.n	80089b6 <_printf_i+0x23a>
 800898e:	68e0      	ldr	r0, [r4, #12]
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	4298      	cmp	r0, r3
 8008994:	bfb8      	it	lt
 8008996:	4618      	movlt	r0, r3
 8008998:	e7a4      	b.n	80088e4 <_printf_i+0x168>
 800899a:	2301      	movs	r3, #1
 800899c:	4632      	mov	r2, r6
 800899e:	4649      	mov	r1, r9
 80089a0:	4640      	mov	r0, r8
 80089a2:	47d0      	blx	sl
 80089a4:	3001      	adds	r0, #1
 80089a6:	d09b      	beq.n	80088e0 <_printf_i+0x164>
 80089a8:	3501      	adds	r5, #1
 80089aa:	68e3      	ldr	r3, [r4, #12]
 80089ac:	9903      	ldr	r1, [sp, #12]
 80089ae:	1a5b      	subs	r3, r3, r1
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	dcf2      	bgt.n	800899a <_printf_i+0x21e>
 80089b4:	e7eb      	b.n	800898e <_printf_i+0x212>
 80089b6:	2500      	movs	r5, #0
 80089b8:	f104 0619 	add.w	r6, r4, #25
 80089bc:	e7f5      	b.n	80089aa <_printf_i+0x22e>
 80089be:	bf00      	nop
 80089c0:	0800a3b5 	.word	0x0800a3b5
 80089c4:	0800a3c6 	.word	0x0800a3c6

080089c8 <_putc_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	460d      	mov	r5, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	4606      	mov	r6, r0
 80089d0:	b118      	cbz	r0, 80089da <_putc_r+0x12>
 80089d2:	6983      	ldr	r3, [r0, #24]
 80089d4:	b90b      	cbnz	r3, 80089da <_putc_r+0x12>
 80089d6:	f7ff f9ff 	bl	8007dd8 <__sinit>
 80089da:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <_putc_r+0x84>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d124      	bne.n	8008a2a <_putc_r+0x62>
 80089e0:	6874      	ldr	r4, [r6, #4]
 80089e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e4:	07d8      	lsls	r0, r3, #31
 80089e6:	d405      	bmi.n	80089f4 <_putc_r+0x2c>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	0599      	lsls	r1, r3, #22
 80089ec:	d402      	bmi.n	80089f4 <_putc_r+0x2c>
 80089ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f0:	f7ff fa90 	bl	8007f14 <__retarget_lock_acquire_recursive>
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	da05      	bge.n	8008a0a <_putc_r+0x42>
 80089fe:	69a2      	ldr	r2, [r4, #24]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	db1c      	blt.n	8008a3e <_putc_r+0x76>
 8008a04:	b2eb      	uxtb	r3, r5
 8008a06:	2b0a      	cmp	r3, #10
 8008a08:	d019      	beq.n	8008a3e <_putc_r+0x76>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	701d      	strb	r5, [r3, #0]
 8008a12:	b2ed      	uxtb	r5, r5
 8008a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a16:	07da      	lsls	r2, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_putc_r+0x5e>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_putc_r+0x5e>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f7ff fa78 	bl	8007f16 <__retarget_lock_release_recursive>
 8008a26:	4628      	mov	r0, r5
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <_putc_r+0x88>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	d101      	bne.n	8008a34 <_putc_r+0x6c>
 8008a30:	68b4      	ldr	r4, [r6, #8]
 8008a32:	e7d6      	b.n	80089e2 <_putc_r+0x1a>
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <_putc_r+0x8c>)
 8008a36:	429c      	cmp	r4, r3
 8008a38:	bf08      	it	eq
 8008a3a:	68f4      	ldreq	r4, [r6, #12]
 8008a3c:	e7d1      	b.n	80089e2 <_putc_r+0x1a>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4622      	mov	r2, r4
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7fe ffee 	bl	8007a24 <__swbuf_r>
 8008a48:	4605      	mov	r5, r0
 8008a4a:	e7e3      	b.n	8008a14 <_putc_r+0x4c>
 8008a4c:	0800a364 	.word	0x0800a364
 8008a50:	0800a384 	.word	0x0800a384
 8008a54:	0800a344 	.word	0x0800a344

08008a58 <_sbrk_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_sbrk_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7fa f8ca 	bl	8002bfc <_sbrk>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_sbrk_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_sbrk_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20000c84 	.word	0x20000c84

08008a78 <__sread>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a80:	f000 f8e0 	bl	8008c44 <_read_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	bfab      	itete	ge
 8008a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a8c:	181b      	addge	r3, r3, r0
 8008a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a92:	bfac      	ite	ge
 8008a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a96:	81a3      	strhlt	r3, [r4, #12]
 8008a98:	bd10      	pop	{r4, pc}

08008a9a <__swrite>:
 8008a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	898b      	ldrh	r3, [r1, #12]
 8008aa2:	05db      	lsls	r3, r3, #23
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	d505      	bpl.n	8008ab8 <__swrite+0x1e>
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f000 f868 	bl	8008b88 <_lseek_r>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	4628      	mov	r0, r5
 8008aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ace:	f000 b817 	b.w	8008b00 <_write_r>

08008ad2 <__sseek>:
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ada:	f000 f855 	bl	8008b88 <_lseek_r>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	bf15      	itete	ne
 8008ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aee:	81a3      	strheq	r3, [r4, #12]
 8008af0:	bf18      	it	ne
 8008af2:	81a3      	strhne	r3, [r4, #12]
 8008af4:	bd10      	pop	{r4, pc}

08008af6 <__sclose>:
 8008af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afa:	f000 b813 	b.w	8008b24 <_close_r>
	...

08008b00 <_write_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d07      	ldr	r5, [pc, #28]	; (8008b20 <_write_r+0x20>)
 8008b04:	4604      	mov	r4, r0
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f7f9 fe96 	bl	8002840 <_write>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_write_r+0x1e>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_write_r+0x1e>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20000c84 	.word	0x20000c84

08008b24 <_close_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d06      	ldr	r5, [pc, #24]	; (8008b40 <_close_r+0x1c>)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7fa f82f 	bl	8002b92 <_close>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_close_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_close_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	20000c84 	.word	0x20000c84

08008b44 <_fstat_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	; (8008b64 <_fstat_r+0x20>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	f7fa f82a 	bl	8002baa <_fstat>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d102      	bne.n	8008b60 <_fstat_r+0x1c>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	b103      	cbz	r3, 8008b60 <_fstat_r+0x1c>
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	20000c84 	.word	0x20000c84

08008b68 <_isatty_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d06      	ldr	r5, [pc, #24]	; (8008b84 <_isatty_r+0x1c>)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4604      	mov	r4, r0
 8008b70:	4608      	mov	r0, r1
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	f7fa f829 	bl	8002bca <_isatty>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_isatty_r+0x1a>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_isatty_r+0x1a>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20000c84 	.word	0x20000c84

08008b88 <_lseek_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	; (8008ba8 <_lseek_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7fa f822 	bl	8002be0 <_lseek>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_lseek_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_lseek_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	20000c84 	.word	0x20000c84

08008bac <memmove>:
 8008bac:	4288      	cmp	r0, r1
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	eb01 0402 	add.w	r4, r1, r2
 8008bb4:	d902      	bls.n	8008bbc <memmove+0x10>
 8008bb6:	4284      	cmp	r4, r0
 8008bb8:	4623      	mov	r3, r4
 8008bba:	d807      	bhi.n	8008bcc <memmove+0x20>
 8008bbc:	1e43      	subs	r3, r0, #1
 8008bbe:	42a1      	cmp	r1, r4
 8008bc0:	d008      	beq.n	8008bd4 <memmove+0x28>
 8008bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bca:	e7f8      	b.n	8008bbe <memmove+0x12>
 8008bcc:	4402      	add	r2, r0
 8008bce:	4601      	mov	r1, r0
 8008bd0:	428a      	cmp	r2, r1
 8008bd2:	d100      	bne.n	8008bd6 <memmove+0x2a>
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bde:	e7f7      	b.n	8008bd0 <memmove+0x24>

08008be0 <__malloc_lock>:
 8008be0:	4801      	ldr	r0, [pc, #4]	; (8008be8 <__malloc_lock+0x8>)
 8008be2:	f7ff b997 	b.w	8007f14 <__retarget_lock_acquire_recursive>
 8008be6:	bf00      	nop
 8008be8:	20000c7c 	.word	0x20000c7c

08008bec <__malloc_unlock>:
 8008bec:	4801      	ldr	r0, [pc, #4]	; (8008bf4 <__malloc_unlock+0x8>)
 8008bee:	f7ff b992 	b.w	8007f16 <__retarget_lock_release_recursive>
 8008bf2:	bf00      	nop
 8008bf4:	20000c7c 	.word	0x20000c7c

08008bf8 <_realloc_r>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	460e      	mov	r6, r1
 8008c00:	b921      	cbnz	r1, 8008c0c <_realloc_r+0x14>
 8008c02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c06:	4611      	mov	r1, r2
 8008c08:	f7ff ba3a 	b.w	8008080 <_malloc_r>
 8008c0c:	b922      	cbnz	r2, 8008c18 <_realloc_r+0x20>
 8008c0e:	f7ff f9e7 	bl	8007fe0 <_free_r>
 8008c12:	4625      	mov	r5, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c18:	f000 f826 	bl	8008c68 <_malloc_usable_size_r>
 8008c1c:	42a0      	cmp	r0, r4
 8008c1e:	d20f      	bcs.n	8008c40 <_realloc_r+0x48>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4638      	mov	r0, r7
 8008c24:	f7ff fa2c 	bl	8008080 <_malloc_r>
 8008c28:	4605      	mov	r5, r0
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0f2      	beq.n	8008c14 <_realloc_r+0x1c>
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4622      	mov	r2, r4
 8008c32:	f7fe fe1d 	bl	8007870 <memcpy>
 8008c36:	4631      	mov	r1, r6
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7ff f9d1 	bl	8007fe0 <_free_r>
 8008c3e:	e7e9      	b.n	8008c14 <_realloc_r+0x1c>
 8008c40:	4635      	mov	r5, r6
 8008c42:	e7e7      	b.n	8008c14 <_realloc_r+0x1c>

08008c44 <_read_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_read_r+0x20>)
 8008c48:	4604      	mov	r4, r0
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7f9 ff80 	bl	8002b58 <_read>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_read_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_read_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000c84 	.word	0x20000c84

08008c68 <_malloc_usable_size_r>:
 8008c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6c:	1f18      	subs	r0, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	bfbc      	itt	lt
 8008c72:	580b      	ldrlt	r3, [r1, r0]
 8008c74:	18c0      	addlt	r0, r0, r3
 8008c76:	4770      	bx	lr

08008c78 <asinf>:
 8008c78:	b508      	push	{r3, lr}
 8008c7a:	ed2d 8b02 	vpush	{d8}
 8008c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8008c82:	f000 f82d 	bl	8008ce0 <__ieee754_asinf>
 8008c86:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <asinf+0x5c>)
 8008c88:	f993 3000 	ldrsb.w	r3, [r3]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	eef0 8a40 	vmov.f32	s17, s0
 8008c92:	d01a      	beq.n	8008cca <asinf+0x52>
 8008c94:	eeb4 8a48 	vcmp.f32	s16, s16
 8008c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9c:	d615      	bvs.n	8008cca <asinf+0x52>
 8008c9e:	eeb0 0a48 	vmov.f32	s0, s16
 8008ca2:	f000 fa7b 	bl	800919c <fabsf>
 8008ca6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008caa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb2:	dd0a      	ble.n	8008cca <asinf+0x52>
 8008cb4:	f7fe fdb2 	bl	800781c <__errno>
 8008cb8:	ecbd 8b02 	vpop	{d8}
 8008cbc:	2321      	movs	r3, #33	; 0x21
 8008cbe:	6003      	str	r3, [r0, #0]
 8008cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008cc4:	4804      	ldr	r0, [pc, #16]	; (8008cd8 <asinf+0x60>)
 8008cc6:	f000 ba71 	b.w	80091ac <nanf>
 8008cca:	eeb0 0a68 	vmov.f32	s0, s17
 8008cce:	ecbd 8b02 	vpop	{d8}
 8008cd2:	bd08      	pop	{r3, pc}
 8008cd4:	20000a48 	.word	0x20000a48
 8008cd8:	0800a3a9 	.word	0x0800a3a9

08008cdc <atan2f>:
 8008cdc:	f000 b8e6 	b.w	8008eac <__ieee754_atan2f>

08008ce0 <__ieee754_asinf>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	ee10 5a10 	vmov	r5, s0
 8008ce6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008cea:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008cee:	ed2d 8b04 	vpush	{d8-d9}
 8008cf2:	d10c      	bne.n	8008d0e <__ieee754_asinf+0x2e>
 8008cf4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008e6c <__ieee754_asinf+0x18c>
 8008cf8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008e70 <__ieee754_asinf+0x190>
 8008cfc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008d00:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008d04:	eeb0 0a67 	vmov.f32	s0, s15
 8008d08:	ecbd 8b04 	vpop	{d8-d9}
 8008d0c:	bd38      	pop	{r3, r4, r5, pc}
 8008d0e:	dd04      	ble.n	8008d1a <__ieee754_asinf+0x3a>
 8008d10:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008d14:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008d18:	e7f6      	b.n	8008d08 <__ieee754_asinf+0x28>
 8008d1a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008d1e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008d22:	da0b      	bge.n	8008d3c <__ieee754_asinf+0x5c>
 8008d24:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008d28:	da52      	bge.n	8008dd0 <__ieee754_asinf+0xf0>
 8008d2a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008e74 <__ieee754_asinf+0x194>
 8008d2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008d32:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	dce5      	bgt.n	8008d08 <__ieee754_asinf+0x28>
 8008d3c:	f000 fa2e 	bl	800919c <fabsf>
 8008d40:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008d44:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008d48:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008d4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008e78 <__ieee754_asinf+0x198>
 8008d50:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008e7c <__ieee754_asinf+0x19c>
 8008d54:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008e80 <__ieee754_asinf+0x1a0>
 8008d58:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008d5c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008e84 <__ieee754_asinf+0x1a4>
 8008d60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008d64:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008e88 <__ieee754_asinf+0x1a8>
 8008d68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008d6c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008e8c <__ieee754_asinf+0x1ac>
 8008d70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008d74:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008e90 <__ieee754_asinf+0x1b0>
 8008d78:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008d7c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008e94 <__ieee754_asinf+0x1b4>
 8008d80:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008d84:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008e98 <__ieee754_asinf+0x1b8>
 8008d88:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008d8c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008e9c <__ieee754_asinf+0x1bc>
 8008d90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008d94:	eeb0 0a48 	vmov.f32	s0, s16
 8008d98:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008d9c:	f000 f926 	bl	8008fec <__ieee754_sqrtf>
 8008da0:	4b3f      	ldr	r3, [pc, #252]	; (8008ea0 <__ieee754_asinf+0x1c0>)
 8008da2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008da6:	429c      	cmp	r4, r3
 8008da8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008db0:	dd3d      	ble.n	8008e2e <__ieee754_asinf+0x14e>
 8008db2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008db6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008ea4 <__ieee754_asinf+0x1c4>
 8008dba:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008dbe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008e70 <__ieee754_asinf+0x190>
 8008dc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	bfd8      	it	le
 8008dca:	eeb1 0a40 	vnegle.f32	s0, s0
 8008dce:	e79b      	b.n	8008d08 <__ieee754_asinf+0x28>
 8008dd0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008dd4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008e78 <__ieee754_asinf+0x198>
 8008dd8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008e7c <__ieee754_asinf+0x19c>
 8008ddc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008e90 <__ieee754_asinf+0x1b0>
 8008de0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008de4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008e84 <__ieee754_asinf+0x1a4>
 8008de8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008dec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008e88 <__ieee754_asinf+0x1a8>
 8008df0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008df4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008e8c <__ieee754_asinf+0x1ac>
 8008df8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008dfc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008e80 <__ieee754_asinf+0x1a0>
 8008e00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008e94 <__ieee754_asinf+0x1b4>
 8008e08:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008e0c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008e98 <__ieee754_asinf+0x1b8>
 8008e10:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008e14:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008e9c <__ieee754_asinf+0x1bc>
 8008e18:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e20:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008e24:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008e28:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008e2c:	e76c      	b.n	8008d08 <__ieee754_asinf+0x28>
 8008e2e:	ee10 3a10 	vmov	r3, s0
 8008e32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008e36:	f023 030f 	bic.w	r3, r3, #15
 8008e3a:	ee07 3a10 	vmov	s14, r3
 8008e3e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008e42:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008e46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e4a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8008e4e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008e6c <__ieee754_asinf+0x18c>
 8008e52:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8008e56:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8008e5a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008ea8 <__ieee754_asinf+0x1c8>
 8008e5e:	eeb0 6a40 	vmov.f32	s12, s0
 8008e62:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008e66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008e6a:	e7aa      	b.n	8008dc2 <__ieee754_asinf+0xe2>
 8008e6c:	b33bbd2e 	.word	0xb33bbd2e
 8008e70:	3fc90fdb 	.word	0x3fc90fdb
 8008e74:	7149f2ca 	.word	0x7149f2ca
 8008e78:	3811ef08 	.word	0x3811ef08
 8008e7c:	3a4f7f04 	.word	0x3a4f7f04
 8008e80:	3e2aaaab 	.word	0x3e2aaaab
 8008e84:	bd241146 	.word	0xbd241146
 8008e88:	3e4e0aa8 	.word	0x3e4e0aa8
 8008e8c:	bea6b090 	.word	0xbea6b090
 8008e90:	3d9dc62e 	.word	0x3d9dc62e
 8008e94:	bf303361 	.word	0xbf303361
 8008e98:	4001572d 	.word	0x4001572d
 8008e9c:	c019d139 	.word	0xc019d139
 8008ea0:	3f799999 	.word	0x3f799999
 8008ea4:	333bbd2e 	.word	0x333bbd2e
 8008ea8:	3f490fdb 	.word	0x3f490fdb

08008eac <__ieee754_atan2f>:
 8008eac:	ee10 2a90 	vmov	r2, s1
 8008eb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008eb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	eef0 7a40 	vmov.f32	s15, s0
 8008ebe:	dc06      	bgt.n	8008ece <__ieee754_atan2f+0x22>
 8008ec0:	ee10 0a10 	vmov	r0, s0
 8008ec4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008ec8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ecc:	dd04      	ble.n	8008ed8 <__ieee754_atan2f+0x2c>
 8008ece:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed6:	bd10      	pop	{r4, pc}
 8008ed8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008edc:	d103      	bne.n	8008ee6 <__ieee754_atan2f+0x3a>
 8008ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee2:	f000 b887 	b.w	8008ff4 <atanf>
 8008ee6:	1794      	asrs	r4, r2, #30
 8008ee8:	f004 0402 	and.w	r4, r4, #2
 8008eec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008ef0:	b943      	cbnz	r3, 8008f04 <__ieee754_atan2f+0x58>
 8008ef2:	2c02      	cmp	r4, #2
 8008ef4:	d05e      	beq.n	8008fb4 <__ieee754_atan2f+0x108>
 8008ef6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008fc8 <__ieee754_atan2f+0x11c>
 8008efa:	2c03      	cmp	r4, #3
 8008efc:	bf08      	it	eq
 8008efe:	eef0 7a47 	vmoveq.f32	s15, s14
 8008f02:	e7e6      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008f04:	b941      	cbnz	r1, 8008f18 <__ieee754_atan2f+0x6c>
 8008f06:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008fcc <__ieee754_atan2f+0x120>
 8008f0a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008fd0 <__ieee754_atan2f+0x124>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	bfb8      	it	lt
 8008f12:	eef0 7a40 	vmovlt.f32	s15, s0
 8008f16:	e7dc      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008f18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008f1c:	d110      	bne.n	8008f40 <__ieee754_atan2f+0x94>
 8008f1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f26:	d107      	bne.n	8008f38 <__ieee754_atan2f+0x8c>
 8008f28:	2c02      	cmp	r4, #2
 8008f2a:	d846      	bhi.n	8008fba <__ieee754_atan2f+0x10e>
 8008f2c:	4b29      	ldr	r3, [pc, #164]	; (8008fd4 <__ieee754_atan2f+0x128>)
 8008f2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f32:	edd4 7a00 	vldr	s15, [r4]
 8008f36:	e7cc      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008f38:	2c02      	cmp	r4, #2
 8008f3a:	d841      	bhi.n	8008fc0 <__ieee754_atan2f+0x114>
 8008f3c:	4b26      	ldr	r3, [pc, #152]	; (8008fd8 <__ieee754_atan2f+0x12c>)
 8008f3e:	e7f6      	b.n	8008f2e <__ieee754_atan2f+0x82>
 8008f40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008f44:	d0df      	beq.n	8008f06 <__ieee754_atan2f+0x5a>
 8008f46:	1a5b      	subs	r3, r3, r1
 8008f48:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008f4c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008f50:	da1a      	bge.n	8008f88 <__ieee754_atan2f+0xdc>
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	da01      	bge.n	8008f5a <__ieee754_atan2f+0xae>
 8008f56:	313c      	adds	r1, #60	; 0x3c
 8008f58:	db19      	blt.n	8008f8e <__ieee754_atan2f+0xe2>
 8008f5a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008f5e:	f000 f91d 	bl	800919c <fabsf>
 8008f62:	f000 f847 	bl	8008ff4 <atanf>
 8008f66:	eef0 7a40 	vmov.f32	s15, s0
 8008f6a:	2c01      	cmp	r4, #1
 8008f6c:	d012      	beq.n	8008f94 <__ieee754_atan2f+0xe8>
 8008f6e:	2c02      	cmp	r4, #2
 8008f70:	d017      	beq.n	8008fa2 <__ieee754_atan2f+0xf6>
 8008f72:	2c00      	cmp	r4, #0
 8008f74:	d0ad      	beq.n	8008ed2 <__ieee754_atan2f+0x26>
 8008f76:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008fdc <__ieee754_atan2f+0x130>
 8008f7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f7e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008fe0 <__ieee754_atan2f+0x134>
 8008f82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008f86:	e7a4      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008f88:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008fcc <__ieee754_atan2f+0x120>
 8008f8c:	e7ed      	b.n	8008f6a <__ieee754_atan2f+0xbe>
 8008f8e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008fe4 <__ieee754_atan2f+0x138>
 8008f92:	e7ea      	b.n	8008f6a <__ieee754_atan2f+0xbe>
 8008f94:	ee17 3a90 	vmov	r3, s15
 8008f98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	e797      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008fa2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008fdc <__ieee754_atan2f+0x130>
 8008fa6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008faa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008fe0 <__ieee754_atan2f+0x134>
 8008fae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008fb2:	e78e      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008fb4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008fe0 <__ieee754_atan2f+0x134>
 8008fb8:	e78b      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008fba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008fe8 <__ieee754_atan2f+0x13c>
 8008fbe:	e788      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008fc0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008fe4 <__ieee754_atan2f+0x138>
 8008fc4:	e785      	b.n	8008ed2 <__ieee754_atan2f+0x26>
 8008fc6:	bf00      	nop
 8008fc8:	c0490fdb 	.word	0xc0490fdb
 8008fcc:	3fc90fdb 	.word	0x3fc90fdb
 8008fd0:	bfc90fdb 	.word	0xbfc90fdb
 8008fd4:	0800a3d8 	.word	0x0800a3d8
 8008fd8:	0800a3e4 	.word	0x0800a3e4
 8008fdc:	33bbbd2e 	.word	0x33bbbd2e
 8008fe0:	40490fdb 	.word	0x40490fdb
 8008fe4:	00000000 	.word	0x00000000
 8008fe8:	3f490fdb 	.word	0x3f490fdb

08008fec <__ieee754_sqrtf>:
 8008fec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008ff0:	4770      	bx	lr
	...

08008ff4 <atanf>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	ee10 5a10 	vmov	r5, s0
 8008ffa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008ffe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009002:	eef0 7a40 	vmov.f32	s15, s0
 8009006:	db10      	blt.n	800902a <atanf+0x36>
 8009008:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800900c:	dd04      	ble.n	8009018 <atanf+0x24>
 800900e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009012:	eeb0 0a67 	vmov.f32	s0, s15
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009150 <atanf+0x15c>
 800901c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009154 <atanf+0x160>
 8009020:	2d00      	cmp	r5, #0
 8009022:	bfd8      	it	le
 8009024:	eef0 7a40 	vmovle.f32	s15, s0
 8009028:	e7f3      	b.n	8009012 <atanf+0x1e>
 800902a:	4b4b      	ldr	r3, [pc, #300]	; (8009158 <atanf+0x164>)
 800902c:	429c      	cmp	r4, r3
 800902e:	dc10      	bgt.n	8009052 <atanf+0x5e>
 8009030:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009034:	da0a      	bge.n	800904c <atanf+0x58>
 8009036:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800915c <atanf+0x168>
 800903a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800903e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009042:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904a:	dce2      	bgt.n	8009012 <atanf+0x1e>
 800904c:	f04f 33ff 	mov.w	r3, #4294967295
 8009050:	e013      	b.n	800907a <atanf+0x86>
 8009052:	f000 f8a3 	bl	800919c <fabsf>
 8009056:	4b42      	ldr	r3, [pc, #264]	; (8009160 <atanf+0x16c>)
 8009058:	429c      	cmp	r4, r3
 800905a:	dc4f      	bgt.n	80090fc <atanf+0x108>
 800905c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009060:	429c      	cmp	r4, r3
 8009062:	dc41      	bgt.n	80090e8 <atanf+0xf4>
 8009064:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009068:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800906c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009070:	2300      	movs	r3, #0
 8009072:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009076:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009080:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009164 <atanf+0x170>
 8009084:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009168 <atanf+0x174>
 8009088:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800916c <atanf+0x178>
 800908c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009170 <atanf+0x17c>
 8009090:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009094:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009098:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009174 <atanf+0x180>
 800909c:	eee6 5a07 	vfma.f32	s11, s12, s14
 80090a0:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8009178 <atanf+0x184>
 80090a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80090a8:	eddf 5a34 	vldr	s11, [pc, #208]	; 800917c <atanf+0x188>
 80090ac:	eee6 5a07 	vfma.f32	s11, s12, s14
 80090b0:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8009180 <atanf+0x18c>
 80090b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80090b8:	eddf 5a32 	vldr	s11, [pc, #200]	; 8009184 <atanf+0x190>
 80090bc:	eee7 5a05 	vfma.f32	s11, s14, s10
 80090c0:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009188 <atanf+0x194>
 80090c4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80090c8:	eddf 5a30 	vldr	s11, [pc, #192]	; 800918c <atanf+0x198>
 80090cc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80090d0:	eea5 0a87 	vfma.f32	s0, s11, s14
 80090d4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80090d8:	eea6 0a26 	vfma.f32	s0, s12, s13
 80090dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80090e0:	d121      	bne.n	8009126 <atanf+0x132>
 80090e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80090e6:	e794      	b.n	8009012 <atanf+0x1e>
 80090e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80090ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 80090f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090f4:	2301      	movs	r3, #1
 80090f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80090fa:	e7be      	b.n	800907a <atanf+0x86>
 80090fc:	4b24      	ldr	r3, [pc, #144]	; (8009190 <atanf+0x19c>)
 80090fe:	429c      	cmp	r4, r3
 8009100:	dc0b      	bgt.n	800911a <atanf+0x126>
 8009102:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800910e:	2302      	movs	r3, #2
 8009110:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009118:	e7af      	b.n	800907a <atanf+0x86>
 800911a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800911e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009122:	2303      	movs	r3, #3
 8009124:	e7a9      	b.n	800907a <atanf+0x86>
 8009126:	4a1b      	ldr	r2, [pc, #108]	; (8009194 <atanf+0x1a0>)
 8009128:	491b      	ldr	r1, [pc, #108]	; (8009198 <atanf+0x1a4>)
 800912a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800912e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009132:	ed93 7a00 	vldr	s14, [r3]
 8009136:	ee30 0a47 	vsub.f32	s0, s0, s14
 800913a:	2d00      	cmp	r5, #0
 800913c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009140:	ed92 0a00 	vldr	s0, [r2]
 8009144:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009148:	bfb8      	it	lt
 800914a:	eef1 7a67 	vneglt.f32	s15, s15
 800914e:	e760      	b.n	8009012 <atanf+0x1e>
 8009150:	3fc90fdb 	.word	0x3fc90fdb
 8009154:	bfc90fdb 	.word	0xbfc90fdb
 8009158:	3edfffff 	.word	0x3edfffff
 800915c:	7149f2ca 	.word	0x7149f2ca
 8009160:	3f97ffff 	.word	0x3f97ffff
 8009164:	3c8569d7 	.word	0x3c8569d7
 8009168:	3d4bda59 	.word	0x3d4bda59
 800916c:	bd15a221 	.word	0xbd15a221
 8009170:	be4ccccd 	.word	0xbe4ccccd
 8009174:	3d886b35 	.word	0x3d886b35
 8009178:	3dba2e6e 	.word	0x3dba2e6e
 800917c:	3e124925 	.word	0x3e124925
 8009180:	3eaaaaab 	.word	0x3eaaaaab
 8009184:	bd6ef16b 	.word	0xbd6ef16b
 8009188:	bd9d8795 	.word	0xbd9d8795
 800918c:	bde38e38 	.word	0xbde38e38
 8009190:	401bffff 	.word	0x401bffff
 8009194:	0800a3f0 	.word	0x0800a3f0
 8009198:	0800a400 	.word	0x0800a400

0800919c <fabsf>:
 800919c:	ee10 3a10 	vmov	r3, s0
 80091a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091a4:	ee00 3a10 	vmov	s0, r3
 80091a8:	4770      	bx	lr
	...

080091ac <nanf>:
 80091ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80091b4 <nanf+0x8>
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	7fc00000 	.word	0x7fc00000

080091b8 <_init>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr

080091c4 <_fini>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr
