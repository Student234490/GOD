
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002248  0800d3d0  0800d3d0  0001d3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f618  0800f618  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f620  0800f620  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f624  0800f624  0001f624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200001e0  0800f808  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800f808  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a83a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003538  00000000  00000000  0003aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0003df88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe65  00000000  00000000  0003fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152bc  00000000  00000000  0005fc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc6f7  00000000  00000000  00074ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001315f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  00131644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d3b4 	.word	0x0800d3b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800d3b4 	.word	0x0800d3b4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_ldivmod>:
 8000cf8:	b97b      	cbnz	r3, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfa:	b972      	cbnz	r2, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bfbe      	ittt	lt
 8000d00:	2000      	movlt	r0, #0
 8000d02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d06:	e006      	blt.n	8000d16 <__aeabi_ldivmod+0x1e>
 8000d08:	bf08      	it	eq
 8000d0a:	2800      	cmpeq	r0, #0
 8000d0c:	bf1c      	itt	ne
 8000d0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d12:	f04f 30ff 	movne.w	r0, #4294967295
 8000d16:	f000 b9ef 	b.w	80010f8 <__aeabi_idiv0>
 8000d1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d22:	2900      	cmp	r1, #0
 8000d24:	db09      	blt.n	8000d3a <__aeabi_ldivmod+0x42>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db1a      	blt.n	8000d60 <__aeabi_ldivmod+0x68>
 8000d2a:	f000 f883 	bl	8000e34 <__udivmoddi4>
 8000d2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d36:	b004      	add	sp, #16
 8000d38:	4770      	bx	lr
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db1b      	blt.n	8000d7c <__aeabi_ldivmod+0x84>
 8000d44:	f000 f876 	bl	8000e34 <__udivmoddi4>
 8000d48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d50:	b004      	add	sp, #16
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	4252      	negs	r2, r2
 8000d5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d5e:	4770      	bx	lr
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	f000 f865 	bl	8000e34 <__udivmoddi4>
 8000d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d72:	b004      	add	sp, #16
 8000d74:	4240      	negs	r0, r0
 8000d76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7a:	4770      	bx	lr
 8000d7c:	4252      	negs	r2, r2
 8000d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d82:	f000 f857 	bl	8000e34 <__udivmoddi4>
 8000d86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d8e:	b004      	add	sp, #16
 8000d90:	4252      	negs	r2, r2
 8000d92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_uldivmod>:
 8000d98:	b953      	cbnz	r3, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9a:	b94a      	cbnz	r2, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	bf08      	it	eq
 8000da0:	2800      	cmpeq	r0, #0
 8000da2:	bf1c      	itt	ne
 8000da4:	f04f 31ff 	movne.w	r1, #4294967295
 8000da8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dac:	f000 b9a4 	b.w	80010f8 <__aeabi_idiv0>
 8000db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db8:	f000 f83c 	bl	8000e34 <__udivmoddi4>
 8000dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc4:	b004      	add	sp, #16
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_d2lz>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	460d      	mov	r5, r1
 8000dd2:	f7ff febb 	bl	8000b4c <__aeabi_dcmplt>
 8000dd6:	b928      	cbnz	r0, 8000de4 <__aeabi_d2lz+0x1c>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	4629      	mov	r1, r5
 8000ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000de0:	f000 b80a 	b.w	8000df8 <__aeabi_d2ulz>
 8000de4:	4620      	mov	r0, r4
 8000de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dea:	f000 f805 	bl	8000df8 <__aeabi_d2ulz>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
 8000df6:	bf00      	nop

08000df8 <__aeabi_d2ulz>:
 8000df8:	b5d0      	push	{r4, r6, r7, lr}
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__aeabi_d2ulz+0x34>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4606      	mov	r6, r0
 8000e00:	460f      	mov	r7, r1
 8000e02:	f7ff fc31 	bl	8000668 <__aeabi_dmul>
 8000e06:	f7ff ff07 	bl	8000c18 <__aeabi_d2uiz>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	f7ff fbb2 	bl	8000574 <__aeabi_ui2d>
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <__aeabi_d2ulz+0x38>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f7ff fc28 	bl	8000668 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	4639      	mov	r1, r7
 8000e20:	f7ff fa6a 	bl	80002f8 <__aeabi_dsub>
 8000e24:	f7ff fef8 	bl	8000c18 <__aeabi_d2uiz>
 8000e28:	4621      	mov	r1, r4
 8000e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e2c:	3df00000 	.word	0x3df00000
 8000e30:	41f00000 	.word	0x41f00000

08000e34 <__udivmoddi4>:
 8000e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	9d08      	ldr	r5, [sp, #32]
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8083 	bne.w	8000f4a <__udivmoddi4+0x116>
 8000e44:	428a      	cmp	r2, r1
 8000e46:	4617      	mov	r7, r2
 8000e48:	d947      	bls.n	8000eda <__udivmoddi4+0xa6>
 8000e4a:	fab2 f282 	clz	r2, r2
 8000e4e:	b142      	cbz	r2, 8000e62 <__udivmoddi4+0x2e>
 8000e50:	f1c2 0020 	rsb	r0, r2, #32
 8000e54:	fa24 f000 	lsr.w	r0, r4, r0
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	4097      	lsls	r7, r2
 8000e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e60:	4094      	lsls	r4, r2
 8000e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e66:	0c23      	lsrs	r3, r4, #16
 8000e68:	fbbc f6f8 	udiv	r6, ip, r8
 8000e6c:	fa1f fe87 	uxth.w	lr, r7
 8000e70:	fb08 c116 	mls	r1, r8, r6, ip
 8000e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e78:	fb06 f10e 	mul.w	r1, r6, lr
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x60>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e86:	f080 8119 	bcs.w	80010bc <__udivmoddi4+0x288>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 8116 	bls.w	80010bc <__udivmoddi4+0x288>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x8c>
 8000eac:	193c      	adds	r4, r7, r4
 8000eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb2:	f080 8105 	bcs.w	80010c0 <__udivmoddi4+0x28c>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	f240 8102 	bls.w	80010c0 <__udivmoddi4+0x28c>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	2600      	movs	r6, #0
 8000eca:	b11d      	cbz	r5, 8000ed4 <__udivmoddi4+0xa0>
 8000ecc:	40d4      	lsrs	r4, r2
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	b902      	cbnz	r2, 8000ede <__udivmoddi4+0xaa>
 8000edc:	deff      	udf	#255	; 0xff
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d150      	bne.n	8000f88 <__udivmoddi4+0x154>
 8000ee6:	1bcb      	subs	r3, r1, r7
 8000ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eec:	fa1f f887 	uxth.w	r8, r7
 8000ef0:	2601      	movs	r6, #1
 8000ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ef6:	0c21      	lsrs	r1, r4, #16
 8000ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb08 f30c 	mul.w	r3, r8, ip
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0xe4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0xe2>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	f200 80e9 	bhi.w	80010e8 <__udivmoddi4+0x2b4>
 8000f16:	4684      	mov	ip, r0
 8000f18:	1ac9      	subs	r1, r1, r3
 8000f1a:	b2a3      	uxth	r3, r4
 8000f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f28:	fb08 f800 	mul.w	r8, r8, r0
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d907      	bls.n	8000f40 <__udivmoddi4+0x10c>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x10a>
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	f200 80d9 	bhi.w	80010f0 <__udivmoddi4+0x2bc>
 8000f3e:	4618      	mov	r0, r3
 8000f40:	eba4 0408 	sub.w	r4, r4, r8
 8000f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f48:	e7bf      	b.n	8000eca <__udivmoddi4+0x96>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d909      	bls.n	8000f62 <__udivmoddi4+0x12e>
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	f000 80b1 	beq.w	80010b6 <__udivmoddi4+0x282>
 8000f54:	2600      	movs	r6, #0
 8000f56:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	4631      	mov	r1, r6
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	fab3 f683 	clz	r6, r3
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d14a      	bne.n	8001000 <__udivmoddi4+0x1cc>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d302      	bcc.n	8000f74 <__udivmoddi4+0x140>
 8000f6e:	4282      	cmp	r2, r0
 8000f70:	f200 80b8 	bhi.w	80010e4 <__udivmoddi4+0x2b0>
 8000f74:	1a84      	subs	r4, r0, r2
 8000f76:	eb61 0103 	sbc.w	r1, r1, r3
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	468c      	mov	ip, r1
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d0a8      	beq.n	8000ed4 <__udivmoddi4+0xa0>
 8000f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f86:	e7a5      	b.n	8000ed4 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f90:	4097      	lsls	r7, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	40d9      	lsrs	r1, r3
 8000f9c:	4330      	orrs	r0, r6
 8000f9e:	0c03      	lsrs	r3, r0, #16
 8000fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fa4:	fa1f f887 	uxth.w	r8, r7
 8000fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb0:	fb06 f108 	mul.w	r1, r6, r8
 8000fb4:	4299      	cmp	r1, r3
 8000fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000fba:	d909      	bls.n	8000fd0 <__udivmoddi4+0x19c>
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fc2:	f080 808d 	bcs.w	80010e0 <__udivmoddi4+0x2ac>
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	f240 808a 	bls.w	80010e0 <__udivmoddi4+0x2ac>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	443b      	add	r3, r7
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b281      	uxth	r1, r0
 8000fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe0:	fb00 f308 	mul.w	r3, r0, r8
 8000fe4:	428b      	cmp	r3, r1
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0x1c4>
 8000fe8:	1879      	adds	r1, r7, r1
 8000fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fee:	d273      	bcs.n	80010d8 <__udivmoddi4+0x2a4>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d971      	bls.n	80010d8 <__udivmoddi4+0x2a4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	4439      	add	r1, r7
 8000ff8:	1acb      	subs	r3, r1, r3
 8000ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ffe:	e778      	b.n	8000ef2 <__udivmoddi4+0xbe>
 8001000:	f1c6 0c20 	rsb	ip, r6, #32
 8001004:	fa03 f406 	lsl.w	r4, r3, r6
 8001008:	fa22 f30c 	lsr.w	r3, r2, ip
 800100c:	431c      	orrs	r4, r3
 800100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001012:	fa01 f306 	lsl.w	r3, r1, r6
 8001016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800101a:	fa21 f10c 	lsr.w	r1, r1, ip
 800101e:	431f      	orrs	r7, r3
 8001020:	0c3b      	lsrs	r3, r7, #16
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fa1f f884 	uxth.w	r8, r4
 800102a:	fb0e 1119 	mls	r1, lr, r9, r1
 800102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001032:	fb09 fa08 	mul.w	sl, r9, r8
 8001036:	458a      	cmp	sl, r1
 8001038:	fa02 f206 	lsl.w	r2, r2, r6
 800103c:	fa00 f306 	lsl.w	r3, r0, r6
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x220>
 8001042:	1861      	adds	r1, r4, r1
 8001044:	f109 30ff 	add.w	r0, r9, #4294967295
 8001048:	d248      	bcs.n	80010dc <__udivmoddi4+0x2a8>
 800104a:	458a      	cmp	sl, r1
 800104c:	d946      	bls.n	80010dc <__udivmoddi4+0x2a8>
 800104e:	f1a9 0902 	sub.w	r9, r9, #2
 8001052:	4421      	add	r1, r4
 8001054:	eba1 010a 	sub.w	r1, r1, sl
 8001058:	b2bf      	uxth	r7, r7
 800105a:	fbb1 f0fe 	udiv	r0, r1, lr
 800105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001066:	fb00 f808 	mul.w	r8, r0, r8
 800106a:	45b8      	cmp	r8, r7
 800106c:	d907      	bls.n	800107e <__udivmoddi4+0x24a>
 800106e:	19e7      	adds	r7, r4, r7
 8001070:	f100 31ff 	add.w	r1, r0, #4294967295
 8001074:	d22e      	bcs.n	80010d4 <__udivmoddi4+0x2a0>
 8001076:	45b8      	cmp	r8, r7
 8001078:	d92c      	bls.n	80010d4 <__udivmoddi4+0x2a0>
 800107a:	3802      	subs	r0, #2
 800107c:	4427      	add	r7, r4
 800107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001082:	eba7 0708 	sub.w	r7, r7, r8
 8001086:	fba0 8902 	umull	r8, r9, r0, r2
 800108a:	454f      	cmp	r7, r9
 800108c:	46c6      	mov	lr, r8
 800108e:	4649      	mov	r1, r9
 8001090:	d31a      	bcc.n	80010c8 <__udivmoddi4+0x294>
 8001092:	d017      	beq.n	80010c4 <__udivmoddi4+0x290>
 8001094:	b15d      	cbz	r5, 80010ae <__udivmoddi4+0x27a>
 8001096:	ebb3 020e 	subs.w	r2, r3, lr
 800109a:	eb67 0701 	sbc.w	r7, r7, r1
 800109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010a2:	40f2      	lsrs	r2, r6
 80010a4:	ea4c 0202 	orr.w	r2, ip, r2
 80010a8:	40f7      	lsrs	r7, r6
 80010aa:	e9c5 2700 	strd	r2, r7, [r5]
 80010ae:	2600      	movs	r6, #0
 80010b0:	4631      	mov	r1, r6
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	462e      	mov	r6, r5
 80010b8:	4628      	mov	r0, r5
 80010ba:	e70b      	b.n	8000ed4 <__udivmoddi4+0xa0>
 80010bc:	4606      	mov	r6, r0
 80010be:	e6e9      	b.n	8000e94 <__udivmoddi4+0x60>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6fd      	b.n	8000ec0 <__udivmoddi4+0x8c>
 80010c4:	4543      	cmp	r3, r8
 80010c6:	d2e5      	bcs.n	8001094 <__udivmoddi4+0x260>
 80010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80010cc:	eb69 0104 	sbc.w	r1, r9, r4
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7df      	b.n	8001094 <__udivmoddi4+0x260>
 80010d4:	4608      	mov	r0, r1
 80010d6:	e7d2      	b.n	800107e <__udivmoddi4+0x24a>
 80010d8:	4660      	mov	r0, ip
 80010da:	e78d      	b.n	8000ff8 <__udivmoddi4+0x1c4>
 80010dc:	4681      	mov	r9, r0
 80010de:	e7b9      	b.n	8001054 <__udivmoddi4+0x220>
 80010e0:	4666      	mov	r6, ip
 80010e2:	e775      	b.n	8000fd0 <__udivmoddi4+0x19c>
 80010e4:	4630      	mov	r0, r6
 80010e6:	e74a      	b.n	8000f7e <__udivmoddi4+0x14a>
 80010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010ec:	4439      	add	r1, r7
 80010ee:	e713      	b.n	8000f18 <__udivmoddi4+0xe4>
 80010f0:	3802      	subs	r0, #2
 80010f2:	443c      	add	r4, r7
 80010f4:	e724      	b.n	8000f40 <__udivmoddi4+0x10c>
 80010f6:	bf00      	nop

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f844 	bl	8001194 <convert>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001114:	1415      	asrs	r5, r2, #16
 8001116:	0414      	lsls	r4, r2, #16
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f000 f83b 	bl	8001194 <convert>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001126:	4620      	mov	r0, r4
 8001128:	4629      	mov	r1, r5
 800112a:	f7ff fde5 	bl	8000cf8 <__aeabi_ldivmod>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4613      	mov	r3, r2
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <printFix>:

void printFix(int32_t i) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da05      	bge.n	8001156 <printFix+0x1a>
            printf("-");
 800114a:	202d      	movs	r0, #45	; 0x2d
 800114c:	f007 fc7a 	bl	8008a44 <putchar>
            i = ~i + 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	425b      	negs	r3, r3
 8001154:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1419      	asrs	r1, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	461a      	mov	r2, r3
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <printFix+0x3c>)
 800116c:	f007 fc52 	bl	8008a14 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800d3d0 	.word	0x0800d3d0

0800117c <expand>:

int32_t expand(int32_t i) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	009b      	lsls	r3, r3, #2
   }
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <convert>:

int32_t convert(int32_t i) {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	041b      	lsls	r3, r3, #16
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <inconvert>:

int32_t inconvert(int32_t i) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011ba:	141b      	asrs	r3, r3, #16
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3301      	adds	r3, #1
 80011de:	425a      	negs	r2, r3
 80011e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011e8:	bf58      	it	pl
 80011ea:	4253      	negpl	r3, r2
 80011ec:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	89fa      	ldrh	r2, [r7, #14]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d00c      	beq.n	8001216 <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001202:	b29b      	uxth	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	78fa      	ldrb	r2, [r7, #3]
 800120a:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	89fa      	ldrh	r2, [r7, #14]
 8001210:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 8001214:	e002      	b.n	800121c <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <RingBuffer_Write+0x5c>)
 8001218:	f007 fbfc 	bl	8008a14 <iprintf>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	0800d3e0 	.word	0x0800d3e0

08001228 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    int result = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001234:	e015      	b.n	8001262 <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b2f      	cmp	r3, #47	; 0x2f
 800123c:	d90e      	bls.n	800125c <string_to_int+0x34>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b39      	cmp	r3, #57	; 0x39
 8001244:	d80a      	bhi.n	800125c <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3b30      	subs	r3, #48	; 0x30
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
        }
        str++;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e5      	bne.n	8001236 <string_to_int+0xe>
    }
    return result;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <powten>:

int powten(int x) {
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	int i = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dd0f      	ble.n	80012aa <powten+0x32>
		for (int j = 0; j < x; j++) {
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	e008      	b.n	80012a2 <powten+0x2a>
			i *= 10;
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3301      	adds	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbf2      	blt.n	8001290 <powten+0x18>
		}
	}
	return i;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <Altxx>:

int32_t Altxx(char *data) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 80012c0:	4921      	ldr	r1, [pc, #132]	; (8001348 <Altxx+0x90>)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f008 fad0 	bl	8009868 <strtok>
 80012c8:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
	int j = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 80012da:	e01a      	b.n	8001312 <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 80012dc:	69f8      	ldr	r0, [r7, #28]
 80012de:	f7ff ffa3 	bl	8001228 <string_to_int>
 80012e2:	4602      	mov	r2, r0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d104      	bne.n	8001302 <Altxx+0x4a>
 80012f8:	69f8      	ldr	r0, [r7, #28]
 80012fa:	f7fe ff9b 	bl	8000234 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <Altxx+0x90>)
 800130a:	2000      	movs	r0, #0
 800130c:	f008 faac 	bl	8009868 <strtok>
 8001310:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e1      	bne.n	80012dc <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff3a 	bl	8001194 <convert>
 8001320:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 8001322:	68fc      	ldr	r4, [r7, #12]
 8001324:	69b8      	ldr	r0, [r7, #24]
 8001326:	f7ff ffa7 	bl	8001278 <powten>
 800132a:	4603      	mov	r3, r0
 800132c:	4619      	mov	r1, r3
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff fee4 	bl	80010fc <Rational>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 800133c:	693b      	ldr	r3, [r7, #16]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	0800d478 	.word	0x0800d478

0800134c <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <DDmmmmmm+0x90>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	82bb      	strh	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2202      	movs	r2, #2
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f007 fc22 	bl	8008bb8 <strncpy>
    strcpy(mm_str, data + 2);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1c9a      	adds	r2, r3, #2
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f007 fc12 	bl	8008ba8 <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff4d 	bl	8001228 <string_to_int>
 800138e:	4603      	mov	r3, r0
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff45 	bl	8001228 <string_to_int>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	141d      	asrs	r5, r3, #16
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	041c      	lsls	r4, r3, #16
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <DDmmmmmm+0x94>)
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff fc9c 	bl	8000cf8 <__aeabi_ldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4613      	mov	r3, r2
 80013c6:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	4413      	add	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    return cords;
 80013d0:	69bb      	ldr	r3, [r7, #24]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800d47c 	.word	0x0800d47c
 80013e0:	000927c0 	.word	0x000927c0

080013e4 <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2203      	movs	r2, #3
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f007 fbd6 	bl	8008bb8 <strncpy>
	strcpy(mm_str, data + 3);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1cda      	adds	r2, r3, #3
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fbc6 	bl	8008ba8 <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff01 	bl	8001228 <string_to_int>
 8001426:	4603      	mov	r3, r0
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fef9 	bl	8001228 <string_to_int>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800143e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	141d      	asrs	r5, r3, #16
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	041c      	lsls	r4, r3, #16
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <DDDmmmmmm+0x90>)
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
 8001454:	f7ff fc50 	bl	8000cf8 <__aeabi_ldivmod>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4613      	mov	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001464:	4413      	add	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
	return cords;
 8001468:	69bb      	ldr	r3, [r7, #24]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bdb0      	pop	{r4, r5, r7, pc}
 8001472:	bf00      	nop
 8001474:	000927c0 	.word	0x000927c0

08001478 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001488:	b29a      	uxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001490:	b29b      	uxth	r3, r3
 8001492:	429a      	cmp	r2, r3
 8001494:	d101      	bne.n	800149a <RingBuffer_Read+0x22>
        return 0;  // No data
 8001496:	2300      	movs	r3, #0
 8001498:	e019      	b.n	80014ce <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	5c9a      	ldrb	r2, [r3, r2]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	425a      	negs	r2, r3
 80014b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014c0:	bf58      	it	pl
 80014c2:	4253      	negpl	r3, r2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8097 	beq.w	800161e <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 80014f0:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <getGPGGA+0x1c8>)
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fa:	6018      	str	r0, [r3, #0]
 80014fc:	3304      	adds	r3, #4
 80014fe:	8019      	strh	r1, [r3, #0]
 8001500:	3302      	adds	r3, #2
 8001502:	0c0a      	lsrs	r2, r1, #16
 8001504:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f007 fb66 	bl	8008bde <strstr>
 8001512:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80bf 	beq.w	800169a <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 800151c:	69b8      	ldr	r0, [r7, #24]
 800151e:	f7fe fe89 	bl	8000234 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	2b28      	cmp	r3, #40	; 0x28
 8001526:	d973      	bls.n	8001610 <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 8001528:	495f      	ldr	r1, [pc, #380]	; (80016a8 <getGPGGA+0x1cc>)
 800152a:	69b8      	ldr	r0, [r7, #24]
 800152c:	f008 f99c 	bl	8009868 <strtok>
 8001530:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 8001536:	e067      	b.n	8001608 <getGPGGA+0x12c>
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	3b03      	subs	r3, #3
 800153c:	2b07      	cmp	r3, #7
 800153e:	d85a      	bhi.n	80015f6 <getGPGGA+0x11a>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <getGPGGA+0x6c>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	08001569 	.word	0x08001569
 800154c:	08001577 	.word	0x08001577
 8001550:	080015a9 	.word	0x080015a9
 8001554:	080015b7 	.word	0x080015b7
 8001558:	080015f7 	.word	0x080015f7
 800155c:	080015f7 	.word	0x080015f7
 8001560:	080015f7 	.word	0x080015f7
 8001564:	080015e9 	.word	0x080015e9
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8001568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800156a:	f7ff feef 	bl	800134c <DDmmmmmm>
 800156e:	4602      	mov	r2, r0
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	601a      	str	r2, [r3, #0]
							break;
 8001574:	e040      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8001576:	494d      	ldr	r1, [pc, #308]	; (80016ac <getGPGGA+0x1d0>)
 8001578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800157a:	f7fe fe51 	bl	8000220 <strcmp>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800158c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 8001594:	e030      	b.n	80015f8 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	bfb8      	it	lt
 800159e:	425b      	neglt	r3, r3
 80015a0:	425a      	negs	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	601a      	str	r2, [r3, #0]
							break;
 80015a6:	e027      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 80015a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015aa:	f7ff ff1b 	bl	80013e4 <DDDmmmmmm>
 80015ae:	4602      	mov	r2, r0
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	605a      	str	r2, [r3, #4]
							break;
 80015b4:	e020      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 80015b6:	493e      	ldr	r1, [pc, #248]	; (80016b0 <getGPGGA+0x1d4>)
 80015b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ba:	f7fe fe31 	bl	8000220 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 80015d4:	e010      	b.n	80015f8 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	425a      	negs	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	605a      	str	r2, [r3, #4]
							break;
 80015e6:	e007      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 80015e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ea:	f7ff fe65 	bl	80012b8 <Altxx>
 80015ee:	4602      	mov	r2, r0
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	609a      	str	r2, [r3, #8]
							break;
 80015f4:	e000      	b.n	80015f8 <getGPGGA+0x11c>
						}
						default: {
							break;
 80015f6:	bf00      	nop
						}
					}
					i++;
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	3301      	adds	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 80015fe:	492a      	ldr	r1, [pc, #168]	; (80016a8 <getGPGGA+0x1cc>)
 8001600:	2000      	movs	r0, #0
 8001602:	f008 f931 	bl	8009868 <strtok>
 8001606:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d194      	bne.n	8001538 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s \r\n", filter);
		}
	}
}
 800160e:	e044      	b.n	800169a <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 8001610:	4828      	ldr	r0, [pc, #160]	; (80016b4 <getGPGGA+0x1d8>)
 8001612:	f007 fa9b 	bl	8008b4c <puts>
				gps->active = 0;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	731a      	strb	r2, [r3, #12]
}
 800161c:	e03d      	b.n	800169a <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <getGPGGA+0x1dc>)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001628:	6018      	str	r0, [r3, #0]
 800162a:	3304      	adds	r3, #4
 800162c:	8019      	strh	r1, [r3, #0]
 800162e:	3302      	adds	r3, #2
 8001630:	0c0a      	lsrs	r2, r1, #16
 8001632:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f007 facf 	bl	8008bde <strstr>
 8001640:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d028      	beq.n	800169a <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 8001648:	4917      	ldr	r1, [pc, #92]	; (80016a8 <getGPGGA+0x1cc>)
 800164a:	69f8      	ldr	r0, [r7, #28]
 800164c:	f008 f90c 	bl	8009868 <strtok>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8001652:	2301      	movs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8001656:	e01d      	b.n	8001694 <getGPGGA+0x1b8>
				i++;
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	3301      	adds	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 800165e:	4912      	ldr	r1, [pc, #72]	; (80016a8 <getGPGGA+0x1cc>)
 8001660:	2000      	movs	r0, #0
 8001662:	f008 f901 	bl	8009868 <strtok>
 8001666:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d112      	bne.n	8001694 <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <getGPGGA+0x1e0>)
 8001670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001672:	f7fe fdd5 	bl	8000220 <strcmp>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <getGPGGA+0x1ae>
							gps->active = 1;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <getGPGGA+0x1e4>)
 8001684:	f007 fa62 	bl	8008b4c <puts>
 8001688:	e003      	b.n	8001692 <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <getGPGGA+0x1e8>)
 800168e:	f007 f9c1 	bl	8008a14 <iprintf>
						break;
 8001692:	bf00      	nop
			while (tokPtr != NULL) {
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1de      	bne.n	8001658 <getGPGGA+0x17c>
}
 800169a:	bf00      	nop
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800d4dc 	.word	0x0800d4dc
 80016a8:	0800d480 	.word	0x0800d480
 80016ac:	0800d484 	.word	0x0800d484
 80016b0:	0800d488 	.word	0x0800d488
 80016b4:	0800d48c 	.word	0x0800d48c
 80016b8:	0800d4e4 	.word	0x0800d4e4
 80016bc:	0800d4a8 	.word	0x0800d4a8
 80016c0:	0800d4ac 	.word	0x0800d4ac
 80016c4:	0800d4c0 	.word	0x0800d4c0

080016c8 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 80016d2:	e01d      	b.n	8001710 <process_uart_data+0x48>
        if (indx < sizeof(sentence) - 1) {
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <process_uart_data+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2bf8      	cmp	r3, #248	; 0xf8
 80016da:	d807      	bhi.n	80016ec <process_uart_data+0x24>
            sentence[indx++] = c;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <process_uart_data+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	4912      	ldr	r1, [pc, #72]	; (800172c <process_uart_data+0x64>)
 80016e4:	600a      	str	r2, [r1, #0]
 80016e6:	7bf9      	ldrb	r1, [r7, #15]
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <process_uart_data+0x68>)
 80016ea:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d10e      	bne.n	8001710 <process_uart_data+0x48>
            sentence[indx] = '\0';  // Null-terminate the string
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <process_uart_data+0x64>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <process_uart_data+0x68>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	54d1      	strb	r1, [r2, r3]
            printf("Log:   UART Sentence received \r\n");
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <process_uart_data+0x6c>)
 80016fe:	f007 fa25 	bl	8008b4c <puts>
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <process_uart_data+0x68>)
 8001706:	f7ff fee9 	bl	80014dc <getGPGGA>
            indx = 0;  // Reset for next line
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <process_uart_data+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8001710:	f107 030f 	add.w	r3, r7, #15
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff feae 	bl	8001478 <RingBuffer_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1d8      	bne.n	80016d4 <process_uart_data+0xc>
        }
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001fc 	.word	0x200001fc
 8001730:	20000610 	.word	0x20000610
 8001734:	0800d4ec 	.word	0x0800d4ec

08001738 <printGPS>:

void printGPS(GPSRead_t GPS) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	463c      	mov	r4, r7
 8001740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (GPS.active) {
 8001744:	7b3b      	ldrb	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01a      	beq.n	8001780 <printGPS+0x48>
		printf("Active: %i ~ Latitude: ", GPS.active);
 800174a:	7b3b      	ldrb	r3, [r7, #12]
 800174c:	4619      	mov	r1, r3
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <printGPS+0x58>)
 8001750:	f007 f960 	bl	8008a14 <iprintf>
		printFix(GPS.latitude);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fcf0 	bl	800113c <printFix>
		printf("deg ~ Longitude: ");
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <printGPS+0x5c>)
 800175e:	f007 f959 	bl	8008a14 <iprintf>
		printFix(GPS.longitude);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fce9 	bl	800113c <printFix>
		printf("deg ~ Altitude: ");
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <printGPS+0x60>)
 800176c:	f007 f952 	bl	8008a14 <iprintf>
		printFix(GPS.altitude);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fce2 	bl	800113c <printFix>
		printf("m. \r\n");
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <printGPS+0x64>)
 800177a:	f007 f9e7 	bl	8008b4c <puts>
	} else {
		printf("Error: GPS inactive \r\n");
	}
}
 800177e:	e002      	b.n	8001786 <printGPS+0x4e>
		printf("Error: GPS inactive \r\n");
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <printGPS+0x68>)
 8001782:	f007 f9e3 	bl	8008b4c <puts>
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	0800d50c 	.word	0x0800d50c
 8001794:	0800d524 	.word	0x0800d524
 8001798:	0800d538 	.word	0x0800d538
 800179c:	0800d54c 	.word	0x0800d54c
 80017a0:	0800d554 	.word	0x0800d554

080017a4 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <I2C_Scan+0x58>)
 80017ae:	f007 f9cd 	bl	8008b4c <puts>

    for (i = 1; i < 128; i++) {
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e015      	b.n	80017e4 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	b299      	uxth	r1, r3
 80017c0:	230a      	movs	r3, #10
 80017c2:	2201      	movs	r2, #1
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f002 fe3b 	bl	8004440 <HAL_I2C_IsDeviceReady>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <I2C_Scan+0x5c>)
 80017da:	f007 f91b 	bl	8008a14 <iprintf>
    for (i = 1; i < 128; i++) {
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	3301      	adds	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dae5      	bge.n	80017b8 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <I2C_Scan+0x60>)
 80017ee:	f007 f9ad 	bl	8008b4c <puts>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	0800d56c 	.word	0x0800d56c
 8001800:	0800d584 	.word	0x0800d584
 8001804:	0800d5ac 	.word	0x0800d5ac

08001808 <fixed_to_float>:
#include <stdio.h>
#define FIXED_POINT_SCALE (1 << 16)


// Convert 16.16 fixed-point to float
static inline float fixed_to_float(int32_t x) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    return (float)x / FIXED_POINT_SCALE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001834 <fixed_to_float+0x2c>
 800181e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001822:	eef0 7a66 	vmov.f32	s15, s13
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	47800000 	.word	0x47800000

08001838 <float_to_fixed>:

// Convert float to 16.16 fixed-point
static inline int32_t float_to_fixed(float x) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int32_t)(x * FIXED_POINT_SCALE);
 8001842:	edd7 7a01 	vldr	s15, [r7, #4]
 8001846:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001864 <float_to_fixed+0x2c>
 800184a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001852:	ee17 3a90 	vmov	r3, s15
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	47800000 	.word	0x47800000

08001868 <fixed_sin>:

// Function to calculate sine using math.h for a fixed-point input
int32_t fixed_sin(int32_t fixed_angle) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    float angle_float = fixed_to_float(fixed_angle); // Convert to float
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffc9 	bl	8001808 <fixed_to_float>
 8001876:	ed87 0a03 	vstr	s0, [r7, #12]
    float sin_result = sinf(angle_float);            // Use math.h's sine
 800187a:	ed97 0a03 	vldr	s0, [r7, #12]
 800187e:	f00b f82d 	bl	800c8dc <sinf>
 8001882:	ed87 0a02 	vstr	s0, [r7, #8]
    return float_to_fixed(sin_result);               // Convert back to fixed-point
 8001886:	ed97 0a02 	vldr	s0, [r7, #8]
 800188a:	f7ff ffd5 	bl	8001838 <float_to_fixed>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <fixed_cos>:

// Function to calculate sine using math.h for a fixed-point input
int32_t fixed_cos(int32_t fixed_angle) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    float angle_float = fixed_to_float(fixed_angle); // Convert to float
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffb1 	bl	8001808 <fixed_to_float>
 80018a6:	ed87 0a03 	vstr	s0, [r7, #12]
    float sin_result = cosf(angle_float);            // Use math.h's sine
 80018aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ae:	f00a ffd5 	bl	800c85c <cosf>
 80018b2:	ed87 0a02 	vstr	s0, [r7, #8]
    return float_to_fixed(sin_result);               // Convert back to fixed-point
 80018b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80018ba:	f7ff ffbd 	bl	8001838 <float_to_fixed>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <get_years16>:
//static const int32_t wgs84_a = 417997586; // 6378.137
//static const int32_t wgs84_b = 416596119; //wgs84_a * (1 - wgs84_f);

// Decimal years since January 1, IGRF_START_YEAR
int32_t get_years16(const igrf_time_t dt)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b0a0      	sub	sp, #128	; 0x80
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	463b      	mov	r3, r7
 80018d2:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 80018d6:	883b      	ldrh	r3, [r7, #0]
 80018d8:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80018dc:	d916      	bls.n	800190c <get_years16+0x44>
 80018de:	883b      	ldrh	r3, [r7, #0]
 80018e0:	f240 72ed 	movw	r2, #2029	; 0x7ed
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d811      	bhi.n	800190c <get_years16+0x44>
      (dt.month < 1) || (dt.month > 12) ||
 80018e8:	78bb      	ldrb	r3, [r7, #2]
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00e      	beq.n	800190c <get_years16+0x44>
      (dt.month < 1) || (dt.month > 12) ||
 80018ee:	78bb      	ldrb	r3, [r7, #2]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d80b      	bhi.n	800190c <get_years16+0x44>
      (dt.day < 1) || (dt.hour > 23) ||
 80018f4:	78fb      	ldrb	r3, [r7, #3]
      (dt.month < 1) || (dt.month > 12) ||
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <get_years16+0x44>
      (dt.day < 1) || (dt.hour > 23) ||
 80018fa:	793b      	ldrb	r3, [r7, #4]
 80018fc:	2b17      	cmp	r3, #23
 80018fe:	d805      	bhi.n	800190c <get_years16+0x44>
      (dt.minute > 59) || (dt.second > 59))
 8001900:	797b      	ldrb	r3, [r7, #5]
      (dt.day < 1) || (dt.hour > 23) ||
 8001902:	2b3b      	cmp	r3, #59	; 0x3b
 8001904:	d802      	bhi.n	800190c <get_years16+0x44>
      (dt.minute > 59) || (dt.second > 59))
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	2b3b      	cmp	r3, #59	; 0x3b
 800190a:	d902      	bls.n	8001912 <get_years16+0x4a>
  {
    return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	e0c8      	b.n	8001aa4 <get_years16+0x1dc>
  }

  int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001912:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <get_years16+0x1e8>)
 8001914:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001918:	461d      	mov	r5, r3
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001922:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int is_leap = (((dt.year % 4) == 0) && (((dt.year % 100) != 0) || ((dt.year % 400) == 0)));
 800192a:	883b      	ldrh	r3, [r7, #0]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11a      	bne.n	800196c <get_years16+0xa4>
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	4a5e      	ldr	r2, [pc, #376]	; (8001ab4 <get_years16+0x1ec>)
 800193a:	fba2 1203 	umull	r1, r2, r2, r3
 800193e:	0952      	lsrs	r2, r2, #5
 8001940:	2164      	movs	r1, #100	; 0x64
 8001942:	fb01 f202 	mul.w	r2, r1, r2
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	b29b      	uxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <get_years16+0xa0>
 800194e:	883b      	ldrh	r3, [r7, #0]
 8001950:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <get_years16+0x1ec>)
 8001952:	fba2 1203 	umull	r1, r2, r2, r3
 8001956:	09d2      	lsrs	r2, r2, #7
 8001958:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800195c:	fb01 f202 	mul.w	r2, r1, r2
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <get_years16+0xa4>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <get_years16+0xa6>
 800196c:	2300      	movs	r3, #0
 800196e:	67fb      	str	r3, [r7, #124]	; 0x7c

  // Adjust for leap year
  if (is_leap)
 8001970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <get_years16+0xb2>
  {
    days_in_month[1] = 29;
 8001976:	231d      	movs	r3, #29
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
  }

  // Check valid day in the month
  if (dt.day > days_in_month[dt.month - 1])
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	461a      	mov	r2, r3
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	3b01      	subs	r3, #1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001988:	440b      	add	r3, r1
 800198a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800198e:	429a      	cmp	r2, r3
 8001990:	dd02      	ble.n	8001998 <get_years16+0xd0>
  {
    return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e085      	b.n	8001aa4 <get_years16+0x1dc>
  }

  // Days since IGRF_START_YEAR
  int years = dt.year - IGRF_START_YEAR;
 8001998:	883b      	ldrh	r3, [r7, #0]
 800199a:	f2a3 73e9 	subw	r3, r3, #2025	; 0x7e9
 800199e:	67bb      	str	r3, [r7, #120]	; 0x78
  int32_t days_arr[] = {0, 31, 59, 90, 120, 151, 182, 212, 243, 273, 304, 334};
 80019a0:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <get_years16+0x1f0>)
 80019a2:	f107 040c 	add.w	r4, r7, #12
 80019a6:	461d      	mov	r5, r3
 80019a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int32_t days = days_arr[dt.month - 1] + dt.day + (dt.month > 2 ? is_leap : 0);
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019c2:	4413      	add	r3, r2
 80019c4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	441a      	add	r2, r3
 80019cc:	78bb      	ldrb	r3, [r7, #2]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <get_years16+0x10e>
 80019d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019d4:	e000      	b.n	80019d8 <get_years16+0x110>
 80019d6:	2300      	movs	r3, #0
 80019d8:	4413      	add	r3, r2
 80019da:	677b      	str	r3, [r7, #116]	; 0x74
  int32_t hours = (dt.hour << 16) + DIV(dt.minute, 60 << 16) + DIV(dt.second, 3600 << 16);
 80019dc:	793b      	ldrb	r3, [r7, #4]
 80019de:	041c      	lsls	r4, r3, #16
 80019e0:	797b      	ldrb	r3, [r7, #5]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0419      	lsls	r1, r3, #16
 80019f2:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80019f6:	0410      	lsls	r0, r2, #16
 80019f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f7ff f97a 	bl	8000cf8 <__aeabi_ldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	441c      	add	r4, r3
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0419      	lsls	r1, r3, #16
 8001a1e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001a22:	0410      	lsls	r0, r2, #16
 8001a24:	f04f 6261 	mov.w	r2, #235929600	; 0xe100000
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	f7ff f964 	bl	8000cf8 <__aeabi_ldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	4423      	add	r3, r4
 8001a38:	673b      	str	r3, [r7, #112]	; 0x70
  int32_t total_days = is_leap ? 366 : 365;
 8001a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <get_years16+0x17e>
 8001a40:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8001a44:	e001      	b.n	8001a4a <get_years16+0x182>
 8001a46:	f240 136d 	movw	r3, #365	; 0x16d
 8001a4a:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Decimal years
  return (years << 16) + DIV(days << 16,total_days << 16) + DIV(hours,24 << 16);
 8001a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a4e:	041c      	lsls	r4, r3, #16
 8001a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	461a      	mov	r2, r3
 8001a56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a5a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001a5e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	461a      	mov	r2, r3
 8001a68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a6c:	4650      	mov	r0, sl
 8001a6e:	4659      	mov	r1, fp
 8001a70:	f7ff f942 	bl	8000cf8 <__aeabi_ldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	441c      	add	r4, r3
 8001a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a7e:	461a      	mov	r2, r3
 8001a80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a84:	ea4f 4922 	mov.w	r9, r2, asr #16
 8001a88:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8001a8c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	4640      	mov	r0, r8
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7ff f92e 	bl	8000cf8 <__aeabi_ldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	4423      	add	r3, r4
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3780      	adds	r7, #128	; 0x80
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800d5bc 	.word	0x0800d5bc
 8001ab4:	51eb851f 	.word	0x51eb851f
 8001ab8:	0800d5ec 	.word	0x0800d5ec

08001abc <igrf16>:
 * @param f The frame of reference for the input coordinates and the output field values.
 *
 * @return false if the time is out of range; true otherwise.
 */
int igrf16(const igrf_time_t t, const int32_t latitude, const int32_t longitude, const int32_t altitude, igrf_frame_t f, int32_t b[3])
{
 8001abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac0:	b0ef      	sub	sp, #444	; 0x1bc
 8001ac2:	af0e      	add	r7, sp, #56	; 0x38
 8001ac4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ac8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001acc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ad0:	600a      	str	r2, [r1, #0]
 8001ad2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ad6:	6013      	str	r3, [r2, #0]
  const int32_t a = 417542963; // 6371.2;                  // Radius of Earth [km]
 8001ad8:	4bee      	ldr	r3, [pc, #952]	; (8001e94 <igrf16+0x3d8>)
 8001ada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  const int32_t theta = M16_PI_2 - MULT(latitude, D162R); // Colattitude [rad]
 8001ade:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001aea:	4622      	mov	r2, r4
 8001aec:	462b      	mov	r3, r5
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	00d9      	lsls	r1, r3, #3
 8001af8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001afc:	00d0      	lsls	r0, r2, #3
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	1912      	adds	r2, r2, r4
 8001b04:	eb45 0303 	adc.w	r3, r5, r3
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	01d9      	lsls	r1, r3, #7
 8001b12:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8001b16:	01d0      	lsls	r0, r2, #7
 8001b18:	1a80      	subs	r0, r0, r2
 8001b1a:	eb61 0103 	sbc.w	r1, r1, r3
 8001b1e:	eb10 0804 	adds.w	r8, r0, r4
 8001b22:	eb41 0905 	adc.w	r9, r1, r5
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001b32:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001b36:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	f5c3 33c9 	rsb	r3, r3, #102912	; 0x19200
 8001b40:	3320      	adds	r3, #32
 8001b42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  const int32_t phi = MULT(longitude, D162R);            // Longitude [rad]
 8001b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	00cb      	lsls	r3, r1, #3
 8001b60:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b64:	00c2      	lsls	r2, r0, #3
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	1900      	adds	r0, r0, r4
 8001b6c:	eb45 0101 	adc.w	r1, r5, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	01cb      	lsls	r3, r1, #7
 8001b7a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8001b7e:	01c2      	lsls	r2, r0, #7
 8001b80:	1a12      	subs	r2, r2, r0
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	eb12 0a04 	adds.w	sl, r2, r4
 8001b8a:	eb43 0b05 	adc.w	fp, r3, r5
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8001b9a:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001b9e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  int32_t ct = fixed_cos(theta);
 8001ba8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001bac:	f7ff fe74 	bl	8001898 <fixed_cos>
 8001bb0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  int32_t st = fixed_sin(theta);
 8001bb4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001bb8:	f7ff fe56 	bl	8001868 <fixed_sin>
 8001bbc:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  int32_t r = altitude; // Radius
 8001bc0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001bc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    ct = cd * ct - sd * st;
    st = cd * st + sd * temp;
  }*/

  // Avoid singularity on pole
  const int32_t epsilon = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  if (st < epsilon && st > -epsilon)
 8001bce:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	da0a      	bge.n	8001bf0 <igrf16+0x134>
 8001bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bde:	425b      	negs	r3, r3
 8001be0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dd03      	ble.n	8001bf0 <igrf16+0x134>
  {
    st = epsilon;
 8001be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  }

  int32_t years = get_years16(t);
 8001bf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bf8:	f7ff fe66 	bl	80018c8 <get_years16>
 8001bfc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  if (years < 0)
 8001c00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da02      	bge.n	8001c0e <igrf16+0x152>
  {
    return 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f000 bf85 	b.w	8002b18 <igrf16+0x105c>
  }

  // [a] Re-occurring power factors
  // Optimizations [a] and [b] by Alar Leibak.
  int32_t ar_pow[IGRF_DEGREE + 1];
  const int32_t ar = DIV(a, r);
 8001c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c12:	461a      	mov	r2, r3
 8001c14:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c18:	1411      	asrs	r1, r2, #16
 8001c1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001c1c:	0413      	lsls	r3, r2, #16
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c24:	461a      	mov	r2, r3
 8001c26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c2e:	f7ff f863 	bl	8000cf8 <__aeabi_ldivmod>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4613      	mov	r3, r2
 8001c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  ar_pow[0] = MULT(MULT(ar, ar), ar);
 8001c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c40:	4618      	mov	r0, r3
 8001c42:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c50:	fb02 f501 	mul.w	r5, r2, r1
 8001c54:	fb00 f403 	mul.w	r4, r0, r3
 8001c58:	442c      	add	r4, r5
 8001c5a:	fba0 2302 	umull	r2, r3, r0, r2
 8001c5e:	18e1      	adds	r1, r4, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	f04f 0000 	mov.w	r0, #0
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	0c10      	lsrs	r0, r2, #16
 8001c6c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c70:	1419      	asrs	r1, r3, #16
 8001c72:	4603      	mov	r3, r0
 8001c74:	4618      	mov	r0, r3
 8001c76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c7e:	461a      	mov	r2, r3
 8001c80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c84:	fb02 f501 	mul.w	r5, r2, r1
 8001c88:	fb00 f403 	mul.w	r4, r0, r3
 8001c8c:	442c      	add	r4, r5
 8001c8e:	fba0 2302 	umull	r2, r3, r0, r2
 8001c92:	18e1      	adds	r1, r4, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	0c10      	lsrs	r0, r2, #16
 8001ca0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ca4:	1419      	asrs	r1, r3, #16
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8001cb2:	e02f      	b.n	8001d14 <igrf16+0x258>
  {
    ar_pow[i] = MULT(ar_pow[i - 1], ar);
 8001cb4:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cd6:	fb02 f501 	mul.w	r5, r2, r1
 8001cda:	fb00 f403 	mul.w	r4, r0, r3
 8001cde:	442c      	add	r4, r5
 8001ce0:	fba0 2302 	umull	r2, r3, r0, r2
 8001ce4:	18e1      	adds	r1, r4, r3
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	0c10      	lsrs	r0, r2, #16
 8001cf2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cf6:	1419      	asrs	r1, r3, #16
 8001cf8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001d04:	440b      	add	r3, r1
 8001d06:	f843 2cd0 	str.w	r2, [r3, #-208]
  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8001d0a:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8001d14:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001d18:	2b0d      	cmp	r3, #13
 8001d1a:	d9cb      	bls.n	8001cb4 <igrf16+0x1f8>
  }

  // [b] Re-occurring sines and cosines
  int32_t sines[IGRF_DEGREE + 1], cosines[IGRF_DEGREE + 1];
  sines[0] = 0;
 8001d1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
  cosines[0] = 1 << 16;
 8001d24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d2c:	601a      	str	r2, [r3, #0]
  sines[1] = sinrad(phi);
 8001d2e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001d32:	f001 f825 	bl	8002d80 <sinrad>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d3c:	605a      	str	r2, [r3, #4]
  cosines[1] = cosrad(phi);
 8001d3e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001d42:	f001 f8a1 	bl	8002e88 <cosrad>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4c:	605a      	str	r2, [r3, #4]

  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8001d54:	e10c      	b.n	8001f70 <igrf16+0x4b4>
  {
    if (i & 1)
 8001d56:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 809a 	beq.w	8001e98 <igrf16+0x3dc>
    {
      sines[i] = MULT(sines[i - 1], cosines[1]) + MULT(cosines[i - 1], sines[1]);
 8001d64:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d72:	4618      	mov	r0, r3
 8001d74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d84:	fb02 f501 	mul.w	r5, r2, r1
 8001d88:	fb00 f403 	mul.w	r4, r0, r3
 8001d8c:	442c      	add	r4, r5
 8001d8e:	fba0 2302 	umull	r2, r3, r0, r2
 8001d92:	18e1      	adds	r1, r4, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	0c10      	lsrs	r0, r2, #16
 8001da0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001da4:	1419      	asrs	r1, r3, #16
 8001da6:	4606      	mov	r6, r0
 8001da8:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db6:	4618      	mov	r0, r3
 8001db8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001dbc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001dc8:	fb02 f501 	mul.w	r5, r2, r1
 8001dcc:	fb00 f403 	mul.w	r4, r0, r3
 8001dd0:	442c      	add	r4, r5
 8001dd2:	fba0 2302 	umull	r2, r3, r0, r2
 8001dd6:	18e1      	adds	r1, r4, r3
 8001dd8:	460b      	mov	r3, r1
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	0c10      	lsrs	r0, r2, #16
 8001de4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001de8:	1419      	asrs	r1, r3, #16
 8001dea:	4603      	mov	r3, r0
 8001dec:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8001df0:	18f1      	adds	r1, r6, r3
 8001df2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      cosines[i] = MULT(cosines[i - 1], cosines[1]) - MULT(sines[i - 1], sines[1]);
 8001dfa:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	461a      	mov	r2, r3
 8001e16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e1a:	fb02 f501 	mul.w	r5, r2, r1
 8001e1e:	fb00 f403 	mul.w	r4, r0, r3
 8001e22:	442c      	add	r4, r5
 8001e24:	fba0 2302 	umull	r2, r3, r0, r2
 8001e28:	18e1      	adds	r1, r4, r3
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	f04f 0000 	mov.w	r0, #0
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	0c10      	lsrs	r0, r2, #16
 8001e36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e3a:	1419      	asrs	r1, r3, #16
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001e42:	1e5a      	subs	r2, r3, #1
 8001e44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e5e:	fb02 f501 	mul.w	r5, r2, r1
 8001e62:	fb00 f403 	mul.w	r4, r0, r3
 8001e66:	442c      	add	r4, r5
 8001e68:	fba0 2302 	umull	r2, r3, r0, r2
 8001e6c:	18e1      	adds	r1, r4, r3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	0c10      	lsrs	r0, r2, #16
 8001e7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e7e:	1419      	asrs	r1, r3, #16
 8001e80:	4603      	mov	r3, r0
 8001e82:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8001e86:	1af1      	subs	r1, r6, r3
 8001e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001e90:	e069      	b.n	8001f66 <igrf16+0x4aa>
 8001e92:	bf00      	nop
 8001e94:	18e33333 	.word	0x18e33333
    }
    else // even
    {
      sines[i] = MULT(sines[i >> 1] << 1, cosines[i >> 1]);
 8001e98:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4618      	mov	r0, r3
 8001eae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001eb2:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001eca:	fb02 f501 	mul.w	r5, r2, r1
 8001ece:	fb00 f403 	mul.w	r4, r0, r3
 8001ed2:	442c      	add	r4, r5
 8001ed4:	fba0 2302 	umull	r2, r3, r0, r2
 8001ed8:	18e1      	adds	r1, r4, r3
 8001eda:	460b      	mov	r3, r1
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	0c10      	lsrs	r0, r2, #16
 8001ee6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001eea:	1419      	asrs	r1, r3, #16
 8001eec:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      cosines[i] = MULT(cosines[i >> 1] << 1, cosines[i >> 1]) - convert(1);
 8001efa:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f14:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	461a      	mov	r2, r3
 8001f28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f2c:	fb02 f501 	mul.w	r5, r2, r1
 8001f30:	fb00 f403 	mul.w	r4, r0, r3
 8001f34:	442c      	add	r4, r5
 8001f36:	fba0 2302 	umull	r2, r3, r0, r2
 8001f3a:	18e1      	adds	r1, r4, r3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	0c10      	lsrs	r0, r2, #16
 8001f48:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f4c:	1419      	asrs	r1, r3, #16
 8001f4e:	4604      	mov	r4, r0
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff f91f 	bl	8001194 <convert>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8001f5c:	1ae1      	subs	r1, r4, r3
 8001f5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 8001f66:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8001f70:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8001f74:	2b0d      	cmp	r3, #13
 8001f76:	f67f aeee 	bls.w	8001d56 <igrf16+0x29a>
    }
  }

  // Associated Legendre polynomials and its derivative
  int32_t pnm = 0, dpnm = 0; // (n, m)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  int32_t p11 = convert(1), dp11 = 0; // (n, n)
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff f904 	bl	8001194 <convert>
 8001f8c:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  int32_t p10 = convert(1), dp10 = 0; // (n-1, m)
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff f8fc 	bl	8001194 <convert>
 8001f9c:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  int32_t p20 = 0, dp20 = 0; // (n-2, m)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

  // Field components: radial, theta, and phi
  int32_t br = 0, bt = 0, bp = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8001fca:	f000 bd75 	b.w	8002ab8 <igrf16+0xffc>
  {
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8001fd4:	f000 bd66 	b.w	8002aa4 <igrf16+0xfe8>
    {
      if (m <= n)
 8001fd8:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8001fdc:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f200 855a 	bhi.w	8002a9a <igrf16+0xfde>
      {
        if (n == m)
 8001fe6:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8001fea:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d167      	bne.n	80020c2 <igrf16+0x606>
        {
          pnm = MULT(st, p11);
 8001ff2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ffc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002000:	461a      	mov	r2, r3
 8002002:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002006:	fb02 f501 	mul.w	r5, r2, r1
 800200a:	fb00 f403 	mul.w	r4, r0, r3
 800200e:	442c      	add	r4, r5
 8002010:	fba0 2302 	umull	r2, r3, r0, r2
 8002014:	18e1      	adds	r1, r4, r3
 8002016:	460b      	mov	r3, r1
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0c10      	lsrs	r0, r2, #16
 8002022:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002026:	1419      	asrs	r1, r3, #16
 8002028:	4603      	mov	r3, r0
 800202a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
          dpnm = MULT(st, dp11) + MULT(ct, p11);
 800202e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002032:	4618      	mov	r0, r3
 8002034:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002038:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800203c:	461a      	mov	r2, r3
 800203e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002042:	fb02 f501 	mul.w	r5, r2, r1
 8002046:	fb00 f403 	mul.w	r4, r0, r3
 800204a:	442c      	add	r4, r5
 800204c:	fba0 2302 	umull	r2, r3, r0, r2
 8002050:	18e1      	adds	r1, r4, r3
 8002052:	460b      	mov	r3, r1
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f04f 0100 	mov.w	r1, #0
 800205c:	0c10      	lsrs	r0, r2, #16
 800205e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002062:	1419      	asrs	r1, r3, #16
 8002064:	4606      	mov	r6, r0
 8002066:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800206a:	4618      	mov	r0, r3
 800206c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002070:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002074:	461a      	mov	r2, r3
 8002076:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800207a:	fb02 f501 	mul.w	r5, r2, r1
 800207e:	fb00 f403 	mul.w	r4, r0, r3
 8002082:	442c      	add	r4, r5
 8002084:	fba0 2302 	umull	r2, r3, r0, r2
 8002088:	18e1      	adds	r1, r4, r3
 800208a:	460b      	mov	r3, r1
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	0c10      	lsrs	r0, r2, #16
 8002096:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800209a:	1419      	asrs	r1, r3, #16
 800209c:	4603      	mov	r3, r0
 800209e:	4433      	add	r3, r6
 80020a0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

          p11 = pnm; dp11 = dpnm;
 80020a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80020a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80020ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80020b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
          p20 = 0; dp20 = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80020c0:	e207      	b.n	80024d2 <igrf16+0xa16>
        }
        else
        {
          int32_t Knm = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

          if (n > 1)
 80020c8:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	f240 816d 	bls.w	80023ac <igrf16+0x8f0>
          {
            Knm = DIV(
 80020d2:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f85b 	bl	8001194 <convert>
 80020de:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
 80020e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7ff f852 	bl	8001194 <convert>
 80020f0:	4603      	mov	r3, r0
 80020f2:	141b      	asrs	r3, r3, #16
 80020f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80020f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da5c      	bge.n	80021ba <igrf16+0x6fe>
 8002100:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002104:	425b      	negs	r3, r3
 8002106:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800210a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800210e:	461a      	mov	r2, r3
 8002110:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f04f 0101 	mov.w	r1, #1
 800211c:	f7fe fdec 	bl	8000cf8 <__aeabi_ldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800212a:	e046      	b.n	80021ba <igrf16+0x6fe>
 800212c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01d      	beq.n	8002174 <igrf16+0x6b8>
 8002138:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800213c:	4618      	mov	r0, r3
 800213e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002142:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002146:	461a      	mov	r2, r3
 8002148:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800214c:	fb02 f501 	mul.w	r5, r2, r1
 8002150:	fb00 f403 	mul.w	r4, r0, r3
 8002154:	442c      	add	r4, r5
 8002156:	fba0 2302 	umull	r2, r3, r0, r2
 800215a:	18e1      	adds	r1, r4, r3
 800215c:	460b      	mov	r3, r1
 800215e:	f04f 0000 	mov.w	r0, #0
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	0c10      	lsrs	r0, r2, #16
 8002168:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800216c:	1419      	asrs	r1, r3, #16
 800216e:	4603      	mov	r3, r0
 8002170:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002174:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002178:	4618      	mov	r0, r3
 800217a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800217e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002182:	461a      	mov	r2, r3
 8002184:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002188:	fb02 f501 	mul.w	r5, r2, r1
 800218c:	fb00 f403 	mul.w	r4, r0, r3
 8002190:	442c      	add	r4, r5
 8002192:	fba0 2302 	umull	r2, r3, r0, r2
 8002196:	18e1      	adds	r1, r4, r3
 8002198:	460b      	mov	r3, r1
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	0c10      	lsrs	r0, r2, #16
 80021a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80021a8:	1419      	asrs	r1, r3, #16
 80021aa:	4603      	mov	r3, r0
 80021ac:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80021b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021b4:	105b      	asrs	r3, r3, #1
 80021b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80021ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1b4      	bne.n	800212c <igrf16+0x670>
 80021c2:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 80021c6:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ffe2 	bl	8001194 <convert>
 80021d0:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80021dc:	2002      	movs	r0, #2
 80021de:	f7fe ffd9 	bl	8001194 <convert>
 80021e2:	4603      	mov	r3, r0
 80021e4:	141b      	asrs	r3, r3, #16
 80021e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80021ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da5c      	bge.n	80022ac <igrf16+0x7f0>
 80021f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021f6:	425b      	negs	r3, r3
 80021f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80021fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002200:	461a      	mov	r2, r3
 8002202:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002206:	f04f 0000 	mov.w	r0, #0
 800220a:	f04f 0101 	mov.w	r1, #1
 800220e:	f7fe fd73 	bl	8000cf8 <__aeabi_ldivmod>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4613      	mov	r3, r2
 8002218:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800221c:	e046      	b.n	80022ac <igrf16+0x7f0>
 800221e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01d      	beq.n	8002266 <igrf16+0x7aa>
 800222a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800222e:	4618      	mov	r0, r3
 8002230:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002234:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002238:	461a      	mov	r2, r3
 800223a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800223e:	fb02 f601 	mul.w	r6, r2, r1
 8002242:	fb00 f503 	mul.w	r5, r0, r3
 8002246:	4435      	add	r5, r6
 8002248:	fba0 2302 	umull	r2, r3, r0, r2
 800224c:	18e9      	adds	r1, r5, r3
 800224e:	460b      	mov	r3, r1
 8002250:	f04f 0000 	mov.w	r0, #0
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	0c10      	lsrs	r0, r2, #16
 800225a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800225e:	1419      	asrs	r1, r3, #16
 8002260:	4603      	mov	r3, r0
 8002262:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800226a:	4618      	mov	r0, r3
 800226c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002270:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002274:	461a      	mov	r2, r3
 8002276:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800227a:	fb02 f601 	mul.w	r6, r2, r1
 800227e:	fb00 f503 	mul.w	r5, r0, r3
 8002282:	4435      	add	r5, r6
 8002284:	fba0 2302 	umull	r2, r3, r0, r2
 8002288:	18e9      	adds	r1, r5, r3
 800228a:	460b      	mov	r3, r1
 800228c:	f04f 0000 	mov.w	r0, #0
 8002290:	f04f 0100 	mov.w	r1, #0
 8002294:	0c10      	lsrs	r0, r2, #16
 8002296:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800229a:	1419      	asrs	r1, r3, #16
 800229c:	4603      	mov	r3, r0
 800229e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80022a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022a6:	105b      	asrs	r3, r3, #1
 80022a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80022ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1b4      	bne.n	800221e <igrf16+0x762>
 80022b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022b8:	1ae3      	subs	r3, r4, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022c0:	1411      	asrs	r1, r2, #16
 80022c2:	6279      	str	r1, [r7, #36]	; 0x24
 80022c4:	0413      	lsls	r3, r2, #16
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe ff61 	bl	8001194 <convert>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461c      	mov	r4, r3
 80022d6:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80022da:	2002      	movs	r0, #2
 80022dc:	f7fe ff5a 	bl	8001194 <convert>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022e8:	fb02 f005 	mul.w	r0, r2, r5
 80022ec:	fb04 f103 	mul.w	r1, r4, r3
 80022f0:	4401      	add	r1, r0
 80022f2:	fba4 2302 	umull	r2, r3, r4, r2
 80022f6:	4419      	add	r1, r3
 80022f8:	460b      	mov	r3, r1
 80022fa:	f04f 0000 	mov.w	r0, #0
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	0c10      	lsrs	r0, r2, #16
 8002304:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002308:	1419      	asrs	r1, r3, #16
 800230a:	4604      	mov	r4, r0
 800230c:	2001      	movs	r0, #1
 800230e:	f7fe ff41 	bl	8001194 <convert>
 8002312:	4603      	mov	r3, r0
 8002314:	1ae3      	subs	r3, r4, r3
 8002316:	461c      	mov	r4, r3
 8002318:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800231c:	2002      	movs	r0, #2
 800231e:	f7fe ff39 	bl	8001194 <convert>
 8002322:	4603      	mov	r3, r0
 8002324:	4698      	mov	r8, r3
 8002326:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800232a:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe ff30 	bl	8001194 <convert>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800233c:	fb02 f009 	mul.w	r0, r2, r9
 8002340:	fb08 f103 	mul.w	r1, r8, r3
 8002344:	4401      	add	r1, r0
 8002346:	fba8 2302 	umull	r2, r3, r8, r2
 800234a:	4419      	add	r1, r3
 800234c:	460b      	mov	r3, r1
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0c10      	lsrs	r0, r2, #16
 8002358:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800235c:	1419      	asrs	r1, r3, #16
 800235e:	4606      	mov	r6, r0
 8002360:	2003      	movs	r0, #3
 8002362:	f7fe ff17 	bl	8001194 <convert>
 8002366:	4603      	mov	r3, r0
 8002368:	1af3      	subs	r3, r6, r3
 800236a:	461a      	mov	r2, r3
 800236c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002370:	fb02 f005 	mul.w	r0, r2, r5
 8002374:	fb04 f103 	mul.w	r1, r4, r3
 8002378:	4401      	add	r1, r0
 800237a:	fba4 2302 	umull	r2, r3, r4, r2
 800237e:	4419      	add	r1, r3
 8002380:	460b      	mov	r3, r1
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	0c10      	lsrs	r0, r2, #16
 800238c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002390:	1419      	asrs	r1, r3, #16
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800239a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800239e:	f7fe fcab 	bl	8000cf8 <__aeabi_ldivmod>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4613      	mov	r3, r2
 80023a8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
            		POW(convert(n - 1), convert(2)) - POW(convert(m), convert(2)),
					MULT((MULT(convert(n), convert(2)) - convert(1)), MULT(convert(2), convert(n)) - convert(3))
					);
          }

          pnm = MULT(ct, p10) - MULT(Knm,p20);
 80023ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023b0:	4618      	mov	r0, r3
 80023b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80023b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80023ba:	461a      	mov	r2, r3
 80023bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80023c0:	fb02 f501 	mul.w	r5, r2, r1
 80023c4:	fb00 f403 	mul.w	r4, r0, r3
 80023c8:	442c      	add	r4, r5
 80023ca:	fba0 2302 	umull	r2, r3, r0, r2
 80023ce:	18e1      	adds	r1, r4, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	f04f 0000 	mov.w	r0, #0
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	0c10      	lsrs	r0, r2, #16
 80023dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80023e0:	1419      	asrs	r1, r3, #16
 80023e2:	4606      	mov	r6, r0
 80023e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80023e8:	4618      	mov	r0, r3
 80023ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80023ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80023f2:	461a      	mov	r2, r3
 80023f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80023f8:	fb02 f501 	mul.w	r5, r2, r1
 80023fc:	fb00 f403 	mul.w	r4, r0, r3
 8002400:	442c      	add	r4, r5
 8002402:	fba0 2302 	umull	r2, r3, r0, r2
 8002406:	18e1      	adds	r1, r4, r3
 8002408:	460b      	mov	r3, r1
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	0c10      	lsrs	r0, r2, #16
 8002414:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002418:	1419      	asrs	r1, r3, #16
 800241a:	4603      	mov	r3, r0
 800241c:	1af3      	subs	r3, r6, r3
 800241e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
          dpnm = MULT(ct, dp10) - MULT(st, p10) - MULT(Knm, dp20);
 8002422:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002426:	4618      	mov	r0, r3
 8002428:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800242c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002430:	461a      	mov	r2, r3
 8002432:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002436:	fb02 f501 	mul.w	r5, r2, r1
 800243a:	fb00 f403 	mul.w	r4, r0, r3
 800243e:	442c      	add	r4, r5
 8002440:	fba0 2302 	umull	r2, r3, r0, r2
 8002444:	18e1      	adds	r1, r4, r3
 8002446:	460b      	mov	r3, r1
 8002448:	f04f 0000 	mov.w	r0, #0
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	0c10      	lsrs	r0, r2, #16
 8002452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002456:	1419      	asrs	r1, r3, #16
 8002458:	4606      	mov	r6, r0
 800245a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800245e:	4618      	mov	r0, r3
 8002460:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002464:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002468:	461a      	mov	r2, r3
 800246a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800246e:	fb02 f501 	mul.w	r5, r2, r1
 8002472:	fb00 f403 	mul.w	r4, r0, r3
 8002476:	442c      	add	r4, r5
 8002478:	fba0 2302 	umull	r2, r3, r0, r2
 800247c:	18e1      	adds	r1, r4, r3
 800247e:	460b      	mov	r3, r1
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0c10      	lsrs	r0, r2, #16
 800248a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800248e:	1419      	asrs	r1, r3, #16
 8002490:	4603      	mov	r3, r0
 8002492:	1af4      	subs	r4, r6, r3
 8002494:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002498:	4618      	mov	r0, r3
 800249a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800249e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024a2:	461a      	mov	r2, r3
 80024a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80024a8:	fb02 f601 	mul.w	r6, r2, r1
 80024ac:	fb00 f503 	mul.w	r5, r0, r3
 80024b0:	4435      	add	r5, r6
 80024b2:	fba0 2302 	umull	r2, r3, r0, r2
 80024b6:	18e9      	adds	r1, r5, r3
 80024b8:	460b      	mov	r3, r1
 80024ba:	f04f 0000 	mov.w	r0, #0
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	0c10      	lsrs	r0, r2, #16
 80024c4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80024c8:	1419      	asrs	r1, r3, #16
 80024ca:	4603      	mov	r3, r0
 80024cc:	1ae3      	subs	r3, r4, r3
 80024ce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        }

        p20 = p10; dp20 = dp10;
 80024d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80024da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        p10 = pnm; dp10 = dpnm;
 80024e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80024e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80024ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80024ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

        // Linear interpolation of g and h
        const int k = ((n * (n + 1)) >> 1) + m - 1;
 80024f2:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80024f6:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 80024fa:	3201      	adds	r2, #1
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	105a      	asrs	r2, r3, #1
 8002502:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002506:	4413      	add	r3, r2
 8002508:	3b01      	subs	r3, #1
 800250a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        const int32_t g = (g_val16[k] + MULT(g_sv16[k],years)) >> 2;
 800250e:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <igrf16+0xc0c>)
 8002510:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002514:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002518:	4a6c      	ldr	r2, [pc, #432]	; (80026cc <igrf16+0xc10>)
 800251a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	4618      	mov	r0, r3
 8002524:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002528:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800252c:	461a      	mov	r2, r3
 800252e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002532:	fb02 f601 	mul.w	r6, r2, r1
 8002536:	fb00 f503 	mul.w	r5, r0, r3
 800253a:	4435      	add	r5, r6
 800253c:	fba0 2302 	umull	r2, r3, r0, r2
 8002540:	18e9      	adds	r1, r5, r3
 8002542:	460b      	mov	r3, r1
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0c10      	lsrs	r0, r2, #16
 800254e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002552:	1419      	asrs	r1, r3, #16
 8002554:	4603      	mov	r3, r0
 8002556:	4423      	add	r3, r4
 8002558:	109b      	asrs	r3, r3, #2
 800255a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        const int32_t h = (h_val16[k] + MULT(h_sv16[k],years)) >> 2;
 800255e:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <igrf16+0xc14>)
 8002560:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002564:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002568:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <igrf16+0xc18>)
 800256a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	4618      	mov	r0, r3
 8002574:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002578:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800257c:	461a      	mov	r2, r3
 800257e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002582:	fb02 f601 	mul.w	r6, r2, r1
 8002586:	fb00 f503 	mul.w	r5, r0, r3
 800258a:	4435      	add	r5, r6
 800258c:	fba0 2302 	umull	r2, r3, r0, r2
 8002590:	18e9      	adds	r1, r5, r3
 8002592:	460b      	mov	r3, r1
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	0c10      	lsrs	r0, r2, #16
 800259e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80025a2:	1419      	asrs	r1, r3, #16
 80025a4:	4603      	mov	r3, r0
 80025a6:	4423      	add	r3, r4
 80025a8:	109b      	asrs	r3, r3, #2
 80025aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        if (m == 0)
 80025ae:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8090 	bne.w	80026d8 <igrf16+0xc1c>
        {
          const int32_t temp = MULT(ar_pow[n - 1], g);
 80025b8:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80025bc:	3b01      	subs	r3, #1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80025c4:	4413      	add	r3, r2
 80025c6:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80025ca:	4618      	mov	r0, r3
 80025cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80025d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025d4:	461a      	mov	r2, r3
 80025d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80025da:	fb02 f501 	mul.w	r5, r2, r1
 80025de:	fb00 f403 	mul.w	r4, r0, r3
 80025e2:	442c      	add	r4, r5
 80025e4:	fba0 2302 	umull	r2, r3, r0, r2
 80025e8:	18e1      	adds	r1, r4, r3
 80025ea:	460b      	mov	r3, r1
 80025ec:	f04f 0000 	mov.w	r0, #0
 80025f0:	f04f 0100 	mov.w	r1, #0
 80025f4:	0c10      	lsrs	r0, r2, #16
 80025f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80025fa:	1419      	asrs	r1, r3, #16
 80025fc:	4603      	mov	r3, r0
 80025fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
          br += MULT(MULT(temp, convert(n + 1)), pnm);
 8002602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002606:	461c      	mov	r4, r3
 8002608:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800260c:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8002610:	3301      	adds	r3, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fdbe 	bl	8001194 <convert>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002620:	fb02 f005 	mul.w	r0, r2, r5
 8002624:	fb04 f103 	mul.w	r1, r4, r3
 8002628:	4401      	add	r1, r0
 800262a:	fba4 2302 	umull	r2, r3, r4, r2
 800262e:	4419      	add	r1, r3
 8002630:	460b      	mov	r3, r1
 8002632:	f04f 0000 	mov.w	r0, #0
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	0c10      	lsrs	r0, r2, #16
 800263c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002640:	1419      	asrs	r1, r3, #16
 8002642:	4603      	mov	r3, r0
 8002644:	4618      	mov	r0, r3
 8002646:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800264a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800264e:	461a      	mov	r2, r3
 8002650:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002654:	fb02 f501 	mul.w	r5, r2, r1
 8002658:	fb00 f403 	mul.w	r4, r0, r3
 800265c:	442c      	add	r4, r5
 800265e:	fba0 2302 	umull	r2, r3, r0, r2
 8002662:	18e1      	adds	r1, r4, r3
 8002664:	460b      	mov	r3, r1
 8002666:	f04f 0000 	mov.w	r0, #0
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	0c10      	lsrs	r0, r2, #16
 8002670:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002674:	1419      	asrs	r1, r3, #16
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800267c:	4413      	add	r3, r2
 800267e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
          bt -= MULT(temp,dpnm);
 8002682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002686:	4618      	mov	r0, r3
 8002688:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800268c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002690:	461a      	mov	r2, r3
 8002692:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002696:	fb02 f501 	mul.w	r5, r2, r1
 800269a:	fb00 f403 	mul.w	r4, r0, r3
 800269e:	442c      	add	r4, r5
 80026a0:	fba0 2302 	umull	r2, r3, r0, r2
 80026a4:	18e1      	adds	r1, r4, r3
 80026a6:	460b      	mov	r3, r1
 80026a8:	f04f 0000 	mov.w	r0, #0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	0c10      	lsrs	r0, r2, #16
 80026b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80026b6:	1419      	asrs	r1, r3, #16
 80026b8:	4602      	mov	r2, r0
 80026ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026c4:	e17c      	b.n	80029c0 <igrf16+0xf04>
 80026c6:	bf00      	nop
 80026c8:	0800d670 	.word	0x0800d670
 80026cc:	0800d9b0 	.word	0x0800d9b0
 80026d0:	0800d810 	.word	0x0800d810
 80026d4:	0800db50 	.word	0x0800db50
        }
        else
        {
          const int32_t hsin = MULT(h, sines[m]);
 80026d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80026dc:	4618      	mov	r0, r3
 80026de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80026e2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80026e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ee:	461a      	mov	r2, r3
 80026f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80026f4:	fb02 f501 	mul.w	r5, r2, r1
 80026f8:	fb00 f403 	mul.w	r4, r0, r3
 80026fc:	442c      	add	r4, r5
 80026fe:	fba0 2302 	umull	r2, r3, r0, r2
 8002702:	18e1      	adds	r1, r4, r3
 8002704:	460b      	mov	r3, r1
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0c10      	lsrs	r0, r2, #16
 8002710:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002714:	1419      	asrs	r1, r3, #16
 8002716:	4603      	mov	r3, r0
 8002718:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
          const int32_t hcos = MULT(h, cosines[m]);
 800271c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002720:	4618      	mov	r0, r3
 8002722:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002726:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800272a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	461a      	mov	r2, r3
 8002734:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002738:	fb02 f501 	mul.w	r5, r2, r1
 800273c:	fb00 f403 	mul.w	r4, r0, r3
 8002740:	442c      	add	r4, r5
 8002742:	fba0 2302 	umull	r2, r3, r0, r2
 8002746:	18e1      	adds	r1, r4, r3
 8002748:	460b      	mov	r3, r1
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	0c10      	lsrs	r0, r2, #16
 8002754:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002758:	1419      	asrs	r1, r3, #16
 800275a:	4603      	mov	r3, r0
 800275c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          const int32_t gsin = MULT(g, sines[m]);
 8002760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002764:	4618      	mov	r0, r3
 8002766:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800276a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800276e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002776:	461a      	mov	r2, r3
 8002778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800277c:	fb02 f501 	mul.w	r5, r2, r1
 8002780:	fb00 f403 	mul.w	r4, r0, r3
 8002784:	442c      	add	r4, r5
 8002786:	fba0 2302 	umull	r2, r3, r0, r2
 800278a:	18e1      	adds	r1, r4, r3
 800278c:	460b      	mov	r3, r1
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	0c10      	lsrs	r0, r2, #16
 8002798:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800279c:	1419      	asrs	r1, r3, #16
 800279e:	4603      	mov	r3, r0
 80027a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          const int32_t gcos = MULT(g, cosines[m]);
 80027a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027a8:	4618      	mov	r0, r3
 80027aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80027ae:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80027b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027c0:	fb02 f501 	mul.w	r5, r2, r1
 80027c4:	fb00 f403 	mul.w	r4, r0, r3
 80027c8:	442c      	add	r4, r5
 80027ca:	fba0 2302 	umull	r2, r3, r0, r2
 80027ce:	18e1      	adds	r1, r4, r3
 80027d0:	460b      	mov	r3, r1
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	0c10      	lsrs	r0, r2, #16
 80027dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80027e0:	1419      	asrs	r1, r3, #16
 80027e2:	4603      	mov	r3, r0
 80027e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          const int32_t temp = MULT(ar_pow[n - 1], gcos + hsin);
 80027e8:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80027ec:	3b01      	subs	r3, #1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80027f4:	4413      	add	r3, r2
 80027f6:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80027fa:	4618      	mov	r0, r3
 80027fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002800:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002808:	4413      	add	r3, r2
 800280a:	461a      	mov	r2, r3
 800280c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002810:	fb02 f501 	mul.w	r5, r2, r1
 8002814:	fb00 f403 	mul.w	r4, r0, r3
 8002818:	442c      	add	r4, r5
 800281a:	fba0 2302 	umull	r2, r3, r0, r2
 800281e:	18e1      	adds	r1, r4, r3
 8002820:	460b      	mov	r3, r1
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f04f 0100 	mov.w	r1, #0
 800282a:	0c10      	lsrs	r0, r2, #16
 800282c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002830:	1419      	asrs	r1, r3, #16
 8002832:	4603      	mov	r3, r0
 8002834:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

          br += MULT(temp, MULT(convert(n + 1), pnm));
 8002838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800283c:	461c      	mov	r4, r3
 800283e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002842:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8002846:	3301      	adds	r3, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fca3 	bl	8001194 <convert>
 800284e:	4603      	mov	r3, r0
 8002850:	4618      	mov	r0, r3
 8002852:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002856:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800285a:	461a      	mov	r2, r3
 800285c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002860:	fb02 fc01 	mul.w	ip, r2, r1
 8002864:	fb00 f603 	mul.w	r6, r0, r3
 8002868:	4466      	add	r6, ip
 800286a:	fba0 2302 	umull	r2, r3, r0, r2
 800286e:	18f1      	adds	r1, r6, r3
 8002870:	460b      	mov	r3, r1
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	0c10      	lsrs	r0, r2, #16
 800287c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002880:	1419      	asrs	r1, r3, #16
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800288a:	fb02 f005 	mul.w	r0, r2, r5
 800288e:	fb04 f103 	mul.w	r1, r4, r3
 8002892:	4401      	add	r1, r0
 8002894:	fba4 2302 	umull	r2, r3, r4, r2
 8002898:	4419      	add	r1, r3
 800289a:	460b      	mov	r3, r1
 800289c:	f04f 0000 	mov.w	r0, #0
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	0c10      	lsrs	r0, r2, #16
 80028a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80028aa:	1419      	asrs	r1, r3, #16
 80028ac:	4602      	mov	r2, r0
 80028ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028b2:	4413      	add	r3, r2
 80028b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
          bt -= MULT(temp, dpnm);
 80028b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028bc:	4618      	mov	r0, r3
 80028be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028c2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80028c6:	461a      	mov	r2, r3
 80028c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028cc:	fb02 f501 	mul.w	r5, r2, r1
 80028d0:	fb00 f403 	mul.w	r4, r0, r3
 80028d4:	442c      	add	r4, r5
 80028d6:	fba0 2302 	umull	r2, r3, r0, r2
 80028da:	18e1      	adds	r1, r4, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	0c10      	lsrs	r0, r2, #16
 80028e8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80028ec:	1419      	asrs	r1, r3, #16
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
          bp -= MULT(ar_pow[n - 1], MULT(convert(m), MULT((-gsin + hcos), pnm)));
 80028fa:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80028fe:	3b01      	subs	r3, #1
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8002906:	4413      	add	r3, r2
 8002908:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800290c:	461c      	mov	r4, r3
 800290e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002912:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fc3c 	bl	8001194 <convert>
 800291c:	4603      	mov	r3, r0
 800291e:	4698      	mov	r8, r3
 8002920:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002924:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002934:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002938:	461a      	mov	r2, r3
 800293a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800293e:	fb02 fc01 	mul.w	ip, r2, r1
 8002942:	fb00 f603 	mul.w	r6, r0, r3
 8002946:	4466      	add	r6, ip
 8002948:	fba0 2302 	umull	r2, r3, r0, r2
 800294c:	18f1      	adds	r1, r6, r3
 800294e:	460b      	mov	r3, r1
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	0c10      	lsrs	r0, r2, #16
 800295a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800295e:	1419      	asrs	r1, r3, #16
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002968:	fb02 f009 	mul.w	r0, r2, r9
 800296c:	fb08 f103 	mul.w	r1, r8, r3
 8002970:	4401      	add	r1, r0
 8002972:	fba8 2302 	umull	r2, r3, r8, r2
 8002976:	4419      	add	r1, r3
 8002978:	460b      	mov	r3, r1
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	0c10      	lsrs	r0, r2, #16
 8002984:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002988:	1419      	asrs	r1, r3, #16
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002992:	fb02 f005 	mul.w	r0, r2, r5
 8002996:	fb04 f103 	mul.w	r1, r4, r3
 800299a:	4401      	add	r1, r0
 800299c:	fba4 2302 	umull	r2, r3, r4, r2
 80029a0:	4419      	add	r1, r3
 80029a2:	460b      	mov	r3, r1
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0c10      	lsrs	r0, r2, #16
 80029ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80029b2:	1419      	asrs	r1, r3, #16
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        }
        printf("%i,%i,%i,%f,%f,%f,%f,%f,%f,%f\r\n", n, m, k, fixed_to_float(g), fixed_to_float(h), fixed_to_float(pnm),fixed_to_float(dpnm), fixed_to_float(br), fixed_to_float(bt), fixed_to_float(bp));
 80029c0:	f897 614a 	ldrb.w	r6, [r7, #330]	; 0x14a
 80029c4:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80029ce:	f7fe ff1b 	bl	8001808 <fixed_to_float>
 80029d2:	ee10 3a10 	vmov	r3, s0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdee 	bl	80005b8 <__aeabi_f2d>
 80029dc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80029e0:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80029e4:	f7fe ff10 	bl	8001808 <fixed_to_float>
 80029e8:	ee10 3a10 	vmov	r3, s0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fde3 	bl	80005b8 <__aeabi_f2d>
 80029f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029f6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 80029fa:	f7fe ff05 	bl	8001808 <fixed_to_float>
 80029fe:	ee10 3a10 	vmov	r3, s0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fdd8 	bl	80005b8 <__aeabi_f2d>
 8002a08:	e9c7 0100 	strd	r0, r1, [r7]
 8002a0c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8002a10:	f7fe fefa 	bl	8001808 <fixed_to_float>
 8002a14:	ee10 3a10 	vmov	r3, s0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fdcd 	bl	80005b8 <__aeabi_f2d>
 8002a1e:	4682      	mov	sl, r0
 8002a20:	468b      	mov	fp, r1
 8002a22:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8002a26:	f7fe feef 	bl	8001808 <fixed_to_float>
 8002a2a:	ee10 3a10 	vmov	r3, s0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fdc2 	bl	80005b8 <__aeabi_f2d>
 8002a34:	4680      	mov	r8, r0
 8002a36:	4689      	mov	r9, r1
 8002a38:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8002a3c:	f7fe fee4 	bl	8001808 <fixed_to_float>
 8002a40:	ee10 3a10 	vmov	r3, s0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fdb7 	bl	80005b8 <__aeabi_f2d>
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	460d      	mov	r5, r1
 8002a4e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8002a52:	f7fe fed9 	bl	8001808 <fixed_to_float>
 8002a56:	ee10 3a10 	vmov	r3, s0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fdac 	bl	80005b8 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002a68:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002a6c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002a70:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002a74:	ed97 7b00 	vldr	d7, [r7]
 8002a78:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a84:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a88:	ed8d 7b00 	vstr	d7, [sp]
 8002a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a92:	4631      	mov	r1, r6
 8002a94:	4823      	ldr	r0, [pc, #140]	; (8002b24 <igrf16+0x1068>)
 8002a96:	f005 ffbd 	bl	8008a14 <iprintf>
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8002a9a:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8002aa4:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8002aa8:	2b0d      	cmp	r3, #13
 8002aaa:	f67f aa95 	bls.w	8001fd8 <igrf16+0x51c>
  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8002aae:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8002ab8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002abc:	2b0d      	cmp	r3, #13
 8002abe:	f67f aa86 	bls.w	8001fce <igrf16+0x512>
      }
    }
  }

  bp = DIV(bp, st);
 8002ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002acc:	1411      	asrs	r1, r2, #16
 8002ace:	61f9      	str	r1, [r7, #28]
 8002ad0:	0413      	lsls	r3, r2, #16
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002ad8:	461a      	mov	r2, r3
 8002ada:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ade:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ae2:	f7fe f909 	bl	8000cf8 <__aeabi_ldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4613      	mov	r3, r2
 8002aec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  // Geocentric NED
  b[0] = -bt;
 8002af0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002af4:	425a      	negs	r2, r3
 8002af6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002afa:	601a      	str	r2, [r3, #0]
  b[1] = bp;
 8002afc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b00:	3304      	adds	r3, #4
 8002b02:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002b06:	601a      	str	r2, [r3, #0]
  b[2] = -br;
 8002b08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002b12:	4252      	negs	r2, r2
 8002b14:	601a      	str	r2, [r3, #0]

  return 1;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b24:	0800d61c 	.word	0x0800d61c

08002b28 <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2102      	movs	r1, #2
 8002b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b34:	f001 fab8 	bl	80040a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f000 ff41 	bl	80039c0 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2102      	movs	r1, #2
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b46:	f001 faaf 	bl	80040a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f000 ff38 	bl	80039c0 <HAL_Delay>
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	2110      	movs	r1, #16
 8002b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6e:	f001 fa9b 	bl	80040a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2120      	movs	r1, #32
 8002b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b86:	f001 fa8f 	bl	80040a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b9e:	f001 fa83 	bl	80040a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2108      	movs	r1, #8
 8002bb2:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <LCD_Send4Bits+0x70>)
 8002bb4:	f001 fa78 	bl	80040a8 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8002bb8:	f7ff ffb6 	bl	8002b28 <LCD_EnablePulse>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	48000400 	.word	0x48000400

08002bc8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bda:	f001 fa65 	bl	80040a8 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ffb5 	bl	8002b54 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ffae 	bl	8002b54 <LCD_Send4Bits>
    HAL_Delay(2);
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f000 fee1 	bl	80039c0 <HAL_Delay>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <LCD_Init>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
    LCD_SendCommand(0x80 | addr);
}

void LCD_Init(void) {
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 8002c0a:	2028      	movs	r0, #40	; 0x28
 8002c0c:	f000 fed8 	bl	80039c0 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 8002c10:	2003      	movs	r0, #3
 8002c12:	f7ff ff9f 	bl	8002b54 <LCD_Send4Bits>
 8002c16:	2005      	movs	r0, #5
 8002c18:	f000 fed2 	bl	80039c0 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f7ff ff99 	bl	8002b54 <LCD_Send4Bits>
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 fecc 	bl	80039c0 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f7ff ff93 	bl	8002b54 <LCD_Send4Bits>
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f000 fec6 	bl	80039c0 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 8002c34:	2002      	movs	r0, #2
 8002c36:	f7ff ff8d 	bl	8002b54 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8002c3a:	2028      	movs	r0, #40	; 0x28
 8002c3c:	f7ff ffc4 	bl	8002bc8 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8002c40:	200c      	movs	r0, #12
 8002c42:	f7ff ffc1 	bl	8002bc8 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 8002c46:	2006      	movs	r0, #6
 8002c48:	f7ff ffbe 	bl	8002bc8 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7ff ffbb 	bl	8002bc8 <LCD_SendCommand>
    HAL_Delay(2);
 8002c52:	2002      	movs	r0, #2
 8002c54:	f000 feb4 	bl	80039c0 <HAL_Delay>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8002c64:	f240 5322 	movw	r3, #1314	; 0x522
 8002c68:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8002c6a:	f107 021c 	add.w	r2, r7, #28
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2302      	movs	r3, #2
 8002c76:	21d6      	movs	r1, #214	; 0xd6
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f001 fac9 	bl	8004210 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8002c7e:	2064      	movs	r0, #100	; 0x64
 8002c80:	f000 fe9e 	bl	80039c0 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 8002c84:	f246 0320 	movw	r3, #24608	; 0x6020
 8002c88:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 8002c8a:	f107 0218 	add.w	r2, r7, #24
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2302      	movs	r3, #2
 8002c96:	21d6      	movs	r1, #214	; 0xd6
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f001 fab9 	bl	8004210 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f000 fe8e 	bl	80039c0 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 8002ca4:	f247 0320 	movw	r3, #28704	; 0x7020
 8002ca8:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8002caa:	f107 0214 	add.w	r2, r7, #20
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	213c      	movs	r1, #60	; 0x3c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 faa9 	bl	8004210 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8002cbe:	200a      	movs	r0, #10
 8002cc0:	f000 fe7e 	bl	80039c0 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8002cc4:	2322      	movs	r3, #34	; 0x22
 8002cc6:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8002cc8:	f107 0210 	add.w	r2, r7, #16
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	213c      	movs	r1, #60	; 0x3c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 fa9a 	bl	8004210 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f000 fe6f 	bl	80039c0 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8002ce2:	f640 4323 	movw	r3, #3107	; 0xc23
 8002ce6:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8002ce8:	f107 020c 	add.w	r2, r7, #12
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	213c      	movs	r1, #60	; 0x3c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f001 fa8a 	bl	8004210 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8002cfc:	200a      	movs	r0, #10
 8002cfe:	f000 fe5f 	bl	80039c0 <HAL_Delay>
}
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <sinus>:
      -402,   -352,   -302,   -251,   -201,   -151,   -101,    -50,
};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 8002d14:	e003      	b.n	8002d1e <sinus+0x12>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	dbf8      	blt.n	8002d16 <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	425a      	negs	r2, r3
 8002d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002d30:	bf58      	it	pl
 8002d32:	4253      	negpl	r3, r2
 8002d34:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 8002d36:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <sinus+0x44>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d3e:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7fe fa1b 	bl	800117c <expand>
 8002d46:	4603      	mov	r3, r0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	0800dcf0 	.word	0x0800dcf0

08002d54 <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d62:	425a      	negs	r2, r3
 8002d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d68:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002d6c:	bf58      	it	pl
 8002d6e:	4253      	negpl	r3, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ffcb 	bl	8002d0c <sinus>
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8002d8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d8e:	f7fe fa01 	bl	8001194 <convert>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d9a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002d9e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002da2:	2002      	movs	r0, #2
 8002da4:	f7fe f9f6 	bl	8001194 <convert>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461c      	mov	r4, r3
 8002dac:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002db0:	4622      	mov	r2, r4
 8002db2:	462b      	mov	r3, r5
 8002db4:	1891      	adds	r1, r2, r2
 8002db6:	6039      	str	r1, [r7, #0]
 8002db8:	415b      	adcs	r3, r3
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dc0:	1912      	adds	r2, r2, r4
 8002dc2:	eb45 0303 	adc.w	r3, r5, r3
 8002dc6:	f04f 0000 	mov.w	r0, #0
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	0199      	lsls	r1, r3, #6
 8002dd0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002dd4:	0190      	lsls	r0, r2, #6
 8002dd6:	1812      	adds	r2, r2, r0
 8002dd8:	eb41 0303 	adc.w	r3, r1, r3
 8002ddc:	f04f 0000 	mov.w	r0, #0
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	0159      	lsls	r1, r3, #5
 8002de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dea:	0150      	lsls	r0, r2, #5
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	1b12      	subs	r2, r2, r4
 8002df2:	eb63 0305 	sbc.w	r3, r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	eb12 0800 	adds.w	r8, r2, r0
 8002e0a:	eb43 0901 	adc.w	r9, r3, r1
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8002e1a:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8002e1e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8002e22:	4613      	mov	r3, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e2a:	4650      	mov	r0, sl
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	f7fd ff63 	bl	8000cf8 <__aeabi_ldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4613      	mov	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	461a      	mov	r2, r3
 8002e46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e4a:	fb02 f501 	mul.w	r5, r2, r1
 8002e4e:	fb00 f403 	mul.w	r4, r0, r3
 8002e52:	442c      	add	r4, r5
 8002e54:	fba0 2302 	umull	r2, r3, r0, r2
 8002e58:	18e1      	adds	r1, r4, r3
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0c10      	lsrs	r0, r2, #16
 8002e66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e6a:	1419      	asrs	r1, r3, #16
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f99c 	bl	80011ac <inconvert>
 8002e74:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 8002e76:	6938      	ldr	r0, [r7, #16]
 8002e78:	f7ff ff48 	bl	8002d0c <sinus>
 8002e7c:	4603      	mov	r3, r0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e88 <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8002e92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e96:	f7fe f97d 	bl	8001194 <convert>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ea2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002ea6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002eaa:	2002      	movs	r0, #2
 8002eac:	f7fe f972 	bl	8001194 <convert>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461c      	mov	r4, r3
 8002eb4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002eb8:	4622      	mov	r2, r4
 8002eba:	462b      	mov	r3, r5
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	6039      	str	r1, [r7, #0]
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec8:	1912      	adds	r2, r2, r4
 8002eca:	eb45 0303 	adc.w	r3, r5, r3
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0199      	lsls	r1, r3, #6
 8002ed8:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002edc:	0190      	lsls	r0, r2, #6
 8002ede:	1812      	adds	r2, r2, r0
 8002ee0:	eb41 0303 	adc.w	r3, r1, r3
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0159      	lsls	r1, r3, #5
 8002eee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef2:	0150      	lsls	r0, r2, #5
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	1b12      	subs	r2, r2, r4
 8002efa:	eb63 0305 	sbc.w	r3, r3, r5
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	0159      	lsls	r1, r3, #5
 8002f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0c:	0150      	lsls	r0, r2, #5
 8002f0e:	eb12 0800 	adds.w	r8, r2, r0
 8002f12:	eb43 0901 	adc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8002f22:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8002f26:	ea4f 4329 	mov.w	r3, r9, asr #16
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f32:	4650      	mov	r0, sl
 8002f34:	4659      	mov	r1, fp
 8002f36:	f7fd fedf 	bl	8000cf8 <__aeabi_ldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4618      	mov	r0, r3
 8002f46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f52:	fb02 f501 	mul.w	r5, r2, r1
 8002f56:	fb00 f403 	mul.w	r4, r0, r3
 8002f5a:	442c      	add	r4, r5
 8002f5c:	fba0 2302 	umull	r2, r3, r0, r2
 8002f60:	18e1      	adds	r1, r4, r3
 8002f62:	460b      	mov	r3, r1
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	0c10      	lsrs	r0, r2, #16
 8002f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002f72:	1419      	asrs	r1, r3, #16
 8002f74:	4603      	mov	r3, r0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe f918 	bl	80011ac <inconvert>
 8002f7c:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 8002f7e:	6938      	ldr	r0, [r7, #16]
 8002f80:	f7ff fee8 	bl	8002d54 <cosinus>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b094      	sub	sp, #80	; 0x50
 8002f94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f96:	f000 fca2 	bl	80038de <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9a:	f000 f8a5 	bl	80030e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f9e:	f000 f9bb 	bl	8003318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002fa2:	f000 f96d 	bl	8003280 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002fa6:	f000 f91f 	bl	80031e8 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002faa:	f000 f8dd 	bl	8003168 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // lsm setup
  lsmCtrlReg(&hi2c3);
 8002fae:	4843      	ldr	r0, [pc, #268]	; (80030bc <main+0x12c>)
 8002fb0:	f7ff fe54 	bl	8002c5c <lsmCtrlReg>

  // gps setup
  GPSRead_t GPS = {0,0,0,0};
 8002fb4:	f107 0318 	add.w	r3, r7, #24
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
  HAL_Delay(10);
 8002fc2:	200a      	movs	r0, #10
 8002fc4:	f000 fcfc 	bl	80039c0 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	493d      	ldr	r1, [pc, #244]	; (80030c0 <main+0x130>)
 8002fcc:	483d      	ldr	r0, [pc, #244]	; (80030c4 <main+0x134>)
 8002fce:	f002 fe87 	bl	8005ce0 <HAL_UART_Receive_IT>

  // lcd setup
  LCD_Init();
 8002fd2:	f7ff fe18 	bl	8002c06 <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 8002fd6:	4839      	ldr	r0, [pc, #228]	; (80030bc <main+0x12c>)
 8002fd8:	f7fe fbe4 	bl	80017a4 <I2C_Scan>


printf("Running 1616 \r\n");
 8002fdc:	483a      	ldr	r0, [pc, #232]	; (80030c8 <main+0x138>)
 8002fde:	f005 fdb5 	bl	8008b4c <puts>
int32_t r = convert(6200); // Earth's radius in fixed point 16.16 format
 8002fe2:	f641 0038 	movw	r0, #6200	; 0x1838
 8002fe6:	f7fe f8d5 	bl	8001194 <convert>
 8002fea:	6378      	str	r0, [r7, #52]	; 0x34
printf("r : ");
 8002fec:	4837      	ldr	r0, [pc, #220]	; (80030cc <main+0x13c>)
 8002fee:	f005 fd11 	bl	8008a14 <iprintf>
printFix(r);
 8002ff2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ff4:	f7fe f8a2 	bl	800113c <printFix>
printf("\r\n");
 8002ff8:	4835      	ldr	r0, [pc, #212]	; (80030d0 <main+0x140>)
 8002ffa:	f005 fda7 	bl	8008b4c <puts>
int32_t phi16 = convert(45);
 8002ffe:	202d      	movs	r0, #45	; 0x2d
 8003000:	f7fe f8c8 	bl	8001194 <convert>
 8003004:	6338      	str	r0, [r7, #48]	; 0x30
int32_t theta16 = convert(45);
 8003006:	202d      	movs	r0, #45	; 0x2d
 8003008:	f7fe f8c4 	bl	8001194 <convert>
 800300c:	62f8      	str	r0, [r7, #44]	; 0x2c
igrf_time_t time = {.year = 2025, .month = 4, .day = 23, .hour = 0, .minute = 0, .second = 0};
 800300e:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <main+0x144>)
 8003010:	f107 0310 	add.w	r3, r7, #16
 8003014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003018:	e883 0003 	stmia.w	r3, {r0, r1}
int32_t vector[3];
int status = igrf16(time, theta16, phi16, r, IGRF_GEOCENTRIC, vector);
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	2301      	movs	r3, #1
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302c:	f107 0110 	add.w	r1, r7, #16
 8003030:	c903      	ldmia	r1, {r0, r1}
 8003032:	f7fe fd43 	bl	8001abc <igrf16>
 8003036:	62b8      	str	r0, [r7, #40]	; 0x28

printf("%i", status);
 8003038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303a:	4827      	ldr	r0, [pc, #156]	; (80030d8 <main+0x148>)
 800303c:	f005 fcea 	bl	8008a14 <iprintf>
for (int i=0; i<3; i++) {
 8003040:	2300      	movs	r3, #0
 8003042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003044:	e013      	b.n	800306e <main+0xde>
	printf("Res %i: ", i);
 8003046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003048:	4824      	ldr	r0, [pc, #144]	; (80030dc <main+0x14c>)
 800304a:	f005 fce3 	bl	8008a14 <iprintf>
	printFix(vector[i]);
 800304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003056:	4413      	add	r3, r2
 8003058:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe f86d 	bl	800113c <printFix>
	printf("\r\n");
 8003062:	481b      	ldr	r0, [pc, #108]	; (80030d0 <main+0x140>)
 8003064:	f005 fd72 	bl	8008b4c <puts>
for (int i=0; i<3; i++) {
 8003068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306a:	3301      	adds	r3, #1
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	2b02      	cmp	r3, #2
 8003072:	dde8      	ble.n	8003046 <main+0xb6>
    LCD_SendString("Hello STM32!");

    LCD_SetCursor(1, 0);
    LCD_SendString("LCD is working :)");
*/
int i = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38

  while (1)
  {
	  process_uart_data(&uart_rx_buf, &GPS);
 8003078:	f107 0318 	add.w	r3, r7, #24
 800307c:	4619      	mov	r1, r3
 800307e:	4818      	ldr	r0, [pc, #96]	; (80030e0 <main+0x150>)
 8003080:	f7fe fb22 	bl	80016c8 <process_uart_data>
	  HAL_Delay(10);
 8003084:	200a      	movs	r0, #10
 8003086:	f000 fc9b 	bl	80039c0 <HAL_Delay>
	  i++;
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	3301      	adds	r3, #1
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
	  	  if (!(i % 1000)) {
 8003090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <main+0x154>)
 8003094:	fb83 1302 	smull	r1, r3, r3, r2
 8003098:	1199      	asrs	r1, r3, #6
 800309a:	17d3      	asrs	r3, r2, #31
 800309c:	1acb      	subs	r3, r1, r3
 800309e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <main+0xe8>
	  		  i = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
	  		  printGPS(GPS);
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b6:	f7fe fb3f 	bl	8001738 <printGPS>
	  process_uart_data(&uart_rx_buf, &GPS);
 80030ba:	e7dd      	b.n	8003078 <main+0xe8>
 80030bc:	2000070c 	.word	0x2000070c
 80030c0:	20000760 	.word	0x20000760
 80030c4:	20000764 	.word	0x20000764
 80030c8:	0800d63c 	.word	0x0800d63c
 80030cc:	0800d64c 	.word	0x0800d64c
 80030d0:	0800d654 	.word	0x0800d654
 80030d4:	0800d668 	.word	0x0800d668
 80030d8:	0800d658 	.word	0x0800d658
 80030dc:	0800d65c 	.word	0x0800d65c
 80030e0:	20000200 	.word	0x20000200
 80030e4:	10624dd3 	.word	0x10624dd3

080030e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b094      	sub	sp, #80	; 0x50
 80030ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	2238      	movs	r2, #56	; 0x38
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fe0a 	bl	8007d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800310a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800310e:	f001 fd35 	bl	8004b7c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800311c:	2340      	movs	r3, #64	; 0x40
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003120:	2300      	movs	r3, #0
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003124:	f107 0318 	add.w	r3, r7, #24
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fddb 	bl	8004ce4 <HAL_RCC_OscConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003134:	f000 f978 	bl	8003428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003138:	230f      	movs	r3, #15
 800313a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800313c:	2301      	movs	r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f002 f8db 	bl	800530c <HAL_RCC_ClockConfig>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800315c:	f000 f964 	bl	8003428 <Error_Handler>
  }
}
 8003160:	bf00      	nop
 8003162:	3750      	adds	r7, #80	; 0x50
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_I2C3_Init+0x74>)
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <MX_I2C3_Init+0x78>)
 8003170:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_I2C3_Init+0x74>)
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <MX_I2C3_Init+0x7c>)
 8003176:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_I2C3_Init+0x74>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <MX_I2C3_Init+0x74>)
 8003180:	2201      	movs	r2, #1
 8003182:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <MX_I2C3_Init+0x74>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_I2C3_Init+0x74>)
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <MX_I2C3_Init+0x74>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <MX_I2C3_Init+0x74>)
 8003198:	2200      	movs	r2, #0
 800319a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <MX_I2C3_Init+0x74>)
 800319e:	2200      	movs	r2, #0
 80031a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80031a2:	480e      	ldr	r0, [pc, #56]	; (80031dc <MX_I2C3_Init+0x74>)
 80031a4:	f000 ff98 	bl	80040d8 <HAL_I2C_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80031ae:	f000 f93b 	bl	8003428 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031b2:	2100      	movs	r1, #0
 80031b4:	4809      	ldr	r0, [pc, #36]	; (80031dc <MX_I2C3_Init+0x74>)
 80031b6:	f001 fc49 	bl	8004a4c <HAL_I2CEx_ConfigAnalogFilter>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80031c0:	f000 f932 	bl	8003428 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80031c4:	2100      	movs	r1, #0
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <MX_I2C3_Init+0x74>)
 80031c8:	f001 fc8b 	bl	8004ae2 <HAL_I2CEx_ConfigDigitalFilter>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80031d2:	f000 f929 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	2000070c 	.word	0x2000070c
 80031e0:	40007800 	.word	0x40007800
 80031e4:	0010061a 	.word	0x0010061a

080031e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <MX_USART1_UART_Init+0x90>)
 80031ee:	4a23      	ldr	r2, [pc, #140]	; (800327c <MX_USART1_UART_Init+0x94>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <MX_USART1_UART_Init+0x90>)
 80031f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <MX_USART1_UART_Init+0x90>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <MX_USART1_UART_Init+0x90>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b17      	ldr	r3, [pc, #92]	; (8003278 <MX_USART1_UART_Init+0x90>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <MX_USART1_UART_Init+0x90>)
 800322c:	2200      	movs	r2, #0
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003230:	4811      	ldr	r0, [pc, #68]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003232:	f002 fc77 	bl	8005b24 <HAL_UART_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800323c:	f000 f8f4 	bl	8003428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003240:	2100      	movs	r1, #0
 8003242:	480d      	ldr	r0, [pc, #52]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003244:	f004 fc6f 	bl	8007b26 <HAL_UARTEx_SetTxFifoThreshold>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800324e:	f000 f8eb 	bl	8003428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003252:	2100      	movs	r1, #0
 8003254:	4808      	ldr	r0, [pc, #32]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003256:	f004 fca4 	bl	8007ba2 <HAL_UARTEx_SetRxFifoThreshold>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003260:	f000 f8e2 	bl	8003428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <MX_USART1_UART_Init+0x90>)
 8003266:	f004 fc25 	bl	8007ab4 <HAL_UARTEx_DisableFifoMode>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003270:	f000 f8da 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000764 	.word	0x20000764
 800327c:	40013800 	.word	0x40013800

08003280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <MX_USART2_UART_Init+0x90>)
 8003286:	4a23      	ldr	r2, [pc, #140]	; (8003314 <MX_USART2_UART_Init+0x94>)
 8003288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <MX_USART2_UART_Init+0x90>)
 800328c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <MX_USART2_UART_Init+0x90>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <MX_USART2_UART_Init+0x90>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032c8:	4811      	ldr	r0, [pc, #68]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032ca:	f002 fc2b 	bl	8005b24 <HAL_UART_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80032d4:	f000 f8a8 	bl	8003428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d8:	2100      	movs	r1, #0
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032dc:	f004 fc23 	bl	8007b26 <HAL_UARTEx_SetTxFifoThreshold>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80032e6:	f000 f89f 	bl	8003428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ea:	2100      	movs	r1, #0
 80032ec:	4808      	ldr	r0, [pc, #32]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032ee:	f004 fc58 	bl	8007ba2 <HAL_UARTEx_SetRxFifoThreshold>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80032f8:	f000 f896 	bl	8003428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80032fc:	4804      	ldr	r0, [pc, #16]	; (8003310 <MX_USART2_UART_Init+0x90>)
 80032fe:	f004 fbd9 	bl	8007ab4 <HAL_UARTEx_DisableFifoMode>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003308:	f000 f88e 	bl	8003428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200007f8 	.word	0x200007f8
 8003314:	40004400 	.word	0x40004400

08003318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <MX_GPIO_Init+0xa0>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <MX_GPIO_Init+0xa0>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333a:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <MX_GPIO_Init+0xa0>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_GPIO_Init+0xa0>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <MX_GPIO_Init+0xa0>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <MX_GPIO_Init+0xa0>)
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800335e:	2200      	movs	r2, #0
 8003360:	2173      	movs	r1, #115	; 0x73
 8003362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003366:	f000 fe9f 	bl	80040a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800336a:	2200      	movs	r2, #0
 800336c:	2108      	movs	r1, #8
 800336e:	4813      	ldr	r0, [pc, #76]	; (80033bc <MX_GPIO_Init+0xa4>)
 8003370:	f000 fe9a 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8003374:	2373      	movs	r3, #115	; 0x73
 8003376:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003378:	2301      	movs	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003384:	f107 030c 	add.w	r3, r7, #12
 8003388:	4619      	mov	r1, r3
 800338a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800338e:	f000 fd09 	bl	8003da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003392:	2308      	movs	r3, #8
 8003394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	2301      	movs	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	4619      	mov	r1, r3
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <MX_GPIO_Init+0xa4>)
 80033aa:	f000 fcfb 	bl	8003da4 <HAL_GPIO_Init>

}
 80033ae:	bf00      	nop
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	48000400 	.word	0x48000400

080033c0 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4804      	ldr	r0, [pc, #16]	; (80033e8 <_write+0x28>)
 80033d8:	f002 fbf4 	bl	8005bc4 <HAL_UART_Transmit>
    return len;
 80033dc:	687b      	ldr	r3, [r7, #4]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200007f8 	.word	0x200007f8

080033ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_UART_RxCpltCallback+0x30>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10a      	bne.n	8003412 <HAL_UART_RxCpltCallback+0x26>
		//printf("UART Error: ISR=0x%08lX, SR=0x%08lX\r\n", huart->Instance->ISR, huart->Instance->RQR);
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_UART_RxCpltCallback+0x34>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	4808      	ldr	r0, [pc, #32]	; (8003424 <HAL_UART_RxCpltCallback+0x38>)
 8003404:	f7fd fee0 	bl	80011c8 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 8003408:	2201      	movs	r2, #1
 800340a:	4905      	ldr	r1, [pc, #20]	; (8003420 <HAL_UART_RxCpltCallback+0x34>)
 800340c:	4803      	ldr	r0, [pc, #12]	; (800341c <HAL_UART_RxCpltCallback+0x30>)
 800340e:	f002 fc67 	bl	8005ce0 <HAL_UART_Receive_IT>
		 //printf("RX: %c (0x%02X)\r\n", rx_buffer[0], rx_buffer[0]);
	}
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000764 	.word	0x20000764
 8003420:	20000760 	.word	0x20000760
 8003424:	20000200 	.word	0x20000200

08003428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800342c:	b672      	cpsid	i
}
 800342e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003430:	e7fe      	b.n	8003430 <Error_Handler+0x8>
	...

08003434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_MspInit+0x44>)
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_MspInit+0x44>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6613      	str	r3, [r2, #96]	; 0x60
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_MspInit+0x44>)
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_MspInit+0x44>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_MspInit+0x44>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_MspInit+0x44>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800346a:	f001 fc2b 	bl	8004cc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b09c      	sub	sp, #112	; 0x70
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003494:	f107 0318 	add.w	r3, r7, #24
 8003498:	2244      	movs	r2, #68	; 0x44
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f004 fc37 	bl	8007d10 <memset>
  if(hi2c->Instance==I2C3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2e      	ldr	r2, [pc, #184]	; (8003560 <HAL_I2C_MspInit+0xe4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d154      	bne.n	8003556 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80034ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80034b2:	2300      	movs	r3, #0
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b6:	f107 0318 	add.w	r3, r7, #24
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 f942 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80034c6:	f7ff ffaf 	bl	8003428 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d6:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003500:	2312      	movs	r3, #18
 8003502:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800350c:	2302      	movs	r3, #2
 800350e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351a:	f000 fc43 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800351e:	2320      	movs	r3, #32
 8003520:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003522:	2312      	movs	r3, #18
 8003524:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800352e:	2308      	movs	r3, #8
 8003530:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003532:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003536:	4619      	mov	r1, r3
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <HAL_I2C_MspInit+0xec>)
 800353a:	f000 fc33 	bl	8003da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 8003544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_I2C_MspInit+0xe8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003556:	bf00      	nop
 8003558:	3770      	adds	r7, #112	; 0x70
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40007800 	.word	0x40007800
 8003564:	40021000 	.word	0x40021000
 8003568:	48000400 	.word	0x48000400

0800356c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b09c      	sub	sp, #112	; 0x70
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003584:	f107 0318 	add.w	r3, r7, #24
 8003588:	2244      	movs	r2, #68	; 0x44
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fbbf 	bl	8007d10 <memset>
  if(huart->Instance==USART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a42      	ldr	r2, [pc, #264]	; (80036a0 <HAL_UART_MspInit+0x134>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d140      	bne.n	800361e <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800359c:	2301      	movs	r3, #1
 800359e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f002 f8cb 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035b4:	f7ff ff38 	bl	8003428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_UART_MspInit+0x138>)
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_UART_MspInit+0x138>)
 80035be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c2:	6613      	str	r3, [r2, #96]	; 0x60
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_UART_MspInit+0x138>)
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d0:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_UART_MspInit+0x138>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	4a33      	ldr	r2, [pc, #204]	; (80036a4 <HAL_UART_MspInit+0x138>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_UART_MspInit+0x138>)
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035fa:	2307      	movs	r3, #7
 80035fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003602:	4619      	mov	r1, r3
 8003604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003608:	f000 fbcc 	bl	8003da4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	2025      	movs	r0, #37	; 0x25
 8003612:	f000 fad2 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003616:	2025      	movs	r0, #37	; 0x25
 8003618:	f000 fae9 	bl	8003bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800361c:	e03b      	b.n	8003696 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <HAL_UART_MspInit+0x13c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d136      	bne.n	8003696 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003628:	2302      	movs	r3, #2
 800362a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003630:	f107 0318 	add.w	r3, r7, #24
 8003634:	4618      	mov	r0, r3
 8003636:	f002 f885 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003640:	f7ff fef2 	bl	8003428 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_UART_MspInit+0x138>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_UART_MspInit+0x138>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	6593      	str	r3, [r2, #88]	; 0x58
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_UART_MspInit+0x138>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_UART_MspInit+0x138>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <HAL_UART_MspInit+0x138>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_UART_MspInit+0x138>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003674:	230c      	movs	r3, #12
 8003676:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	2300      	movs	r3, #0
 8003682:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003684:	2307      	movs	r3, #7
 8003686:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800368c:	4619      	mov	r1, r3
 800368e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003692:	f000 fb87 	bl	8003da4 <HAL_GPIO_Init>
}
 8003696:	bf00      	nop
 8003698:	3770      	adds	r7, #112	; 0x70
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40004400 	.word	0x40004400

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <NMI_Handler+0x4>

080036b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b6:	e7fe      	b.n	80036b6 <HardFault_Handler+0x4>

080036b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036bc:	e7fe      	b.n	80036bc <MemManage_Handler+0x4>

080036be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c2:	e7fe      	b.n	80036c2 <BusFault_Handler+0x4>

080036c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036c8:	e7fe      	b.n	80036c8 <UsageFault_Handler+0x4>

080036ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036f8:	f000 f944 	bl	8003984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}

08003700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <USART1_IRQHandler+0x10>)
 8003706:	f002 fb37 	bl	8005d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000764 	.word	0x20000764

08003714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
	return 1;
 8003718:	2301      	movs	r3, #1
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <_kill>:

int _kill(int pid, int sig)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800372e:	f004 fac5 	bl	8007cbc <__errno>
 8003732:	4603      	mov	r3, r0
 8003734:	2216      	movs	r2, #22
 8003736:	601a      	str	r2, [r3, #0]
	return -1;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_exit>:

void _exit (int status)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800374c:	f04f 31ff 	mov.w	r1, #4294967295
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ffe7 	bl	8003724 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003756:	e7fe      	b.n	8003756 <_exit+0x12>

08003758 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e00a      	b.n	8003780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800376a:	f3af 8000 	nop.w
 800376e:	4601      	mov	r1, r0
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	60ba      	str	r2, [r7, #8]
 8003776:	b2ca      	uxtb	r2, r1
 8003778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3301      	adds	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	dbf0      	blt.n	800376a <_read+0x12>
	}

return len;
 8003788:	687b      	ldr	r3, [r7, #4]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
	return -1;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ba:	605a      	str	r2, [r3, #4]
	return 0;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <_isatty>:

int _isatty(int file)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	return 1;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
	return 0;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <_sbrk+0x5c>)
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <_sbrk+0x60>)
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <_sbrk+0x64>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <_sbrk+0x64>)
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <_sbrk+0x68>)
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <_sbrk+0x64>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	429a      	cmp	r2, r3
 800382a:	d207      	bcs.n	800383c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800382c:	f004 fa46 	bl	8007cbc <__errno>
 8003830:	4603      	mov	r3, r0
 8003832:	220c      	movs	r2, #12
 8003834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	e009      	b.n	8003850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <_sbrk+0x64>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	4a05      	ldr	r2, [pc, #20]	; (8003860 <_sbrk+0x64>)
 800384c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800384e:	68fb      	ldr	r3, [r7, #12]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20008000 	.word	0x20008000
 800385c:	00000400 	.word	0x00000400
 8003860:	20000604 	.word	0x20000604
 8003864:	200008a0 	.word	0x200008a0

08003868 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <SystemInit+0x20>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <SystemInit+0x20>)
 8003874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800388c:	480d      	ldr	r0, [pc, #52]	; (80038c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800388e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003890:	f7ff ffea 	bl	8003868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003894:	480c      	ldr	r0, [pc, #48]	; (80038c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003896:	490d      	ldr	r1, [pc, #52]	; (80038cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <LoopForever+0xe>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800389c:	e002      	b.n	80038a4 <LoopCopyDataInit>

0800389e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800389e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038a2:	3304      	adds	r3, #4

080038a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a8:	d3f9      	bcc.n	800389e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038ac:	4c0a      	ldr	r4, [pc, #40]	; (80038d8 <LoopForever+0x16>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b0:	e001      	b.n	80038b6 <LoopFillZerobss>

080038b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b4:	3204      	adds	r2, #4

080038b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b8:	d3fb      	bcc.n	80038b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80038ba:	f004 fa05 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038be:	f7ff fb67 	bl	8002f90 <main>

080038c2 <LoopForever>:

LoopForever:
    b LoopForever
 80038c2:	e7fe      	b.n	80038c2 <LoopForever>
  ldr   r0, =_estack
 80038c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80038c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038cc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80038d0:	0800f628 	.word	0x0800f628
  ldr r2, =_sbss
 80038d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80038d8:	200008a0 	.word	0x200008a0

080038dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038dc:	e7fe      	b.n	80038dc <ADC1_2_IRQHandler>

080038de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e8:	2003      	movs	r0, #3
 80038ea:	f000 f95b 	bl	8003ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ee:	200f      	movs	r0, #15
 80038f0:	f000 f80e 	bl	8003910 <HAL_InitTick>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	71fb      	strb	r3, [r7, #7]
 80038fe:	e001      	b.n	8003904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003900:	f7ff fd98 	bl	8003434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003904:	79fb      	ldrb	r3, [r7, #7]

}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_InitTick+0x68>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d022      	beq.n	800396a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_InitTick+0x6c>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_InitTick+0x68>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003930:	fbb1 f3f3 	udiv	r3, r1, r3
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f966 	bl	8003c0a <HAL_SYSTICK_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d809      	bhi.n	800395e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394a:	2200      	movs	r2, #0
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	f04f 30ff 	mov.w	r0, #4294967295
 8003952:	f000 f932 	bl	8003bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_InitTick+0x70>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e007      	b.n	800396e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e004      	b.n	800396e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	e001      	b.n	800396e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000008 	.word	0x20000008
 800397c:	20000000 	.word	0x20000000
 8003980:	20000004 	.word	0x20000004

08003984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_IncTick+0x1c>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_IncTick+0x20>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4413      	add	r3, r2
 8003992:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <HAL_IncTick+0x1c>)
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	2000088c 	.word	0x2000088c
 80039a4:	20000008 	.word	0x20000008

080039a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return uwTick;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_GetTick+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000088c 	.word	0x2000088c

080039c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7ff ffee 	bl	80039a8 <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d004      	beq.n	80039e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_Delay+0x40>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039e4:	bf00      	nop
 80039e6:	f7ff ffdf 	bl	80039a8 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d8f7      	bhi.n	80039e6 <HAL_Delay+0x26>
  {
  }
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000008 	.word	0x20000008

08003a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a36:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	60d3      	str	r3, [r2, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <__NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0307 	and.w	r3, r3, #7
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db0b      	blt.n	8003a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	4907      	ldr	r1, [pc, #28]	; (8003aa0 <__NVIC_EnableIRQ+0x38>)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2001      	movs	r0, #1
 8003a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000e100 	.word	0xe000e100

08003aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	db0a      	blt.n	8003ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	490c      	ldr	r1, [pc, #48]	; (8003af0 <__NVIC_SetPriority+0x4c>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	0112      	lsls	r2, r2, #4
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003acc:	e00a      	b.n	8003ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4908      	ldr	r1, [pc, #32]	; (8003af4 <__NVIC_SetPriority+0x50>)
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	3b04      	subs	r3, #4
 8003adc:	0112      	lsls	r2, r2, #4
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	761a      	strb	r2, [r3, #24]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000e100 	.word	0xe000e100
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f1c3 0307 	rsb	r3, r3, #7
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	bf28      	it	cs
 8003b16:	2304      	movcs	r3, #4
 8003b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d902      	bls.n	8003b28 <NVIC_EncodePriority+0x30>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3b03      	subs	r3, #3
 8003b26:	e000      	b.n	8003b2a <NVIC_EncodePriority+0x32>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b40:	f04f 31ff 	mov.w	r1, #4294967295
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	43d9      	mvns	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	4313      	orrs	r3, r2
         );
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b70:	d301      	bcc.n	8003b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00f      	b.n	8003b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <SysTick_Config+0x40>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b7e:	210f      	movs	r1, #15
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	f7ff ff8e 	bl	8003aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <SysTick_Config+0x40>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <SysTick_Config+0x40>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000e010 	.word	0xe000e010

08003ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff29 	bl	8003a04 <__NVIC_SetPriorityGrouping>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc8:	f7ff ff40 	bl	8003a4c <__NVIC_GetPriorityGrouping>
 8003bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	6978      	ldr	r0, [r7, #20]
 8003bd4:	f7ff ff90 	bl	8003af8 <NVIC_EncodePriority>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff5f 	bl	8003aa4 <__NVIC_SetPriority>
}
 8003be6:	bf00      	nop
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff33 	bl	8003a68 <__NVIC_EnableIRQ>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ffa4 	bl	8003b60 <SysTick_Config>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d005      	beq.n	8003c46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e037      	b.n	8003cb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 020e 	bic.w	r2, r2, #14
 8003c54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f003 021f 	and.w	r2, r3, #31
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f202 	lsl.w	r2, r1, r2
 8003c88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003caa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d00d      	beq.n	8003d08 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e047      	b.n	8003d98 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020e 	bic.w	r2, r2, #14
 8003d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
    }
  }
  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003db2:	e15a      	b.n	800406a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 814c 	beq.w	8004064 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d005      	beq.n	8003de4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d130      	bne.n	8003e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0201 	and.w	r2, r3, #1
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d017      	beq.n	8003e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d123      	bne.n	8003ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3208      	adds	r2, #8
 8003e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	08da      	lsrs	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3208      	adds	r2, #8
 8003ed0:	6939      	ldr	r1, [r7, #16]
 8003ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80a6 	beq.w	8004064 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f18:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <HAL_GPIO_Init+0x2e4>)
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_GPIO_Init+0x2e4>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6613      	str	r3, [r2, #96]	; 0x60
 8003f24:	4b58      	ldr	r3, [pc, #352]	; (8004088 <HAL_GPIO_Init+0x2e4>)
 8003f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f30:	4a56      	ldr	r2, [pc, #344]	; (800408c <HAL_GPIO_Init+0x2e8>)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f5a:	d01f      	beq.n	8003f9c <HAL_GPIO_Init+0x1f8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4c      	ldr	r2, [pc, #304]	; (8004090 <HAL_GPIO_Init+0x2ec>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d019      	beq.n	8003f98 <HAL_GPIO_Init+0x1f4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <HAL_GPIO_Init+0x2f0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_GPIO_Init+0x1f0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a4a      	ldr	r2, [pc, #296]	; (8004098 <HAL_GPIO_Init+0x2f4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00d      	beq.n	8003f90 <HAL_GPIO_Init+0x1ec>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a49      	ldr	r2, [pc, #292]	; (800409c <HAL_GPIO_Init+0x2f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <HAL_GPIO_Init+0x1e8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_GPIO_Init+0x2fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <HAL_GPIO_Init+0x1e4>
 8003f84:	2305      	movs	r3, #5
 8003f86:	e00a      	b.n	8003f9e <HAL_GPIO_Init+0x1fa>
 8003f88:	2306      	movs	r3, #6
 8003f8a:	e008      	b.n	8003f9e <HAL_GPIO_Init+0x1fa>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	e006      	b.n	8003f9e <HAL_GPIO_Init+0x1fa>
 8003f90:	2303      	movs	r3, #3
 8003f92:	e004      	b.n	8003f9e <HAL_GPIO_Init+0x1fa>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e002      	b.n	8003f9e <HAL_GPIO_Init+0x1fa>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_GPIO_Init+0x1fa>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	f002 0203 	and.w	r2, r2, #3
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	4093      	lsls	r3, r2
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fae:	4937      	ldr	r1, [pc, #220]	; (800408c <HAL_GPIO_Init+0x2e8>)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fe0:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800400a:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <HAL_GPIO_Init+0x300>)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_GPIO_Init+0x300>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f ae9d 	bne.w	8003db4 <HAL_GPIO_Init+0x10>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40021000 	.word	0x40021000
 800408c:	40010000 	.word	0x40010000
 8004090:	48000400 	.word	0x48000400
 8004094:	48000800 	.word	0x48000800
 8004098:	48000c00 	.word	0x48000c00
 800409c:	48001000 	.word	0x48001000
 80040a0:	48001400 	.word	0x48001400
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
 80040b4:	4613      	mov	r3, r2
 80040b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b8:	787b      	ldrb	r3, [r7, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e08d      	b.n	8004206 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff f9bc 	bl	800347c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	; 0x24
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004128:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004138:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d107      	bne.n	8004152 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	e006      	b.n	8004160 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800415e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d108      	bne.n	800417a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	e007      	b.n	800418a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004188:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69d9      	ldr	r1, [r3, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1a      	ldr	r2, [r3, #32]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	461a      	mov	r2, r3
 800421c:	460b      	mov	r3, r1
 800421e:	817b      	strh	r3, [r7, #10]
 8004220:	4613      	mov	r3, r2
 8004222:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b20      	cmp	r3, #32
 800422e:	f040 80fd 	bne.w	800442c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_I2C_Master_Transmit+0x30>
 800423c:	2302      	movs	r3, #2
 800423e:	e0f6      	b.n	800442e <HAL_I2C_Master_Transmit+0x21e>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004248:	f7ff fbae 	bl	80039a8 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2319      	movs	r3, #25
 8004254:	2201      	movs	r2, #1
 8004256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa00 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0e1      	b.n	800442e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2221      	movs	r2, #33	; 0x21
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2210      	movs	r2, #16
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	893a      	ldrh	r2, [r7, #8]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2bff      	cmp	r3, #255	; 0xff
 800429a:	d906      	bls.n	80042aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	22ff      	movs	r2, #255	; 0xff
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80042a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e007      	b.n	80042ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80042b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d024      	beq.n	800430c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	8979      	ldrh	r1, [r7, #10]
 80042fe:	4b4e      	ldr	r3, [pc, #312]	; (8004438 <HAL_I2C_Master_Transmit+0x228>)
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fb6f 	bl	80049e8 <I2C_TransferConfig>
 800430a:	e066      	b.n	80043da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	b2da      	uxtb	r2, r3
 8004312:	8979      	ldrh	r1, [r7, #10]
 8004314:	4b48      	ldr	r3, [pc, #288]	; (8004438 <HAL_I2C_Master_Transmit+0x228>)
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fb64 	bl	80049e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004320:	e05b      	b.n	80043da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	6a39      	ldr	r1, [r7, #32]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f9f3 	bl	8004712 <I2C_WaitOnTXISFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e07b      	b.n	800442e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d034      	beq.n	80043da <HAL_I2C_Master_Transmit+0x1ca>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d130      	bne.n	80043da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2200      	movs	r2, #0
 8004380:	2180      	movs	r1, #128	; 0x80
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f96c 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e04d      	b.n	800442e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2bff      	cmp	r3, #255	; 0xff
 800439a:	d90e      	bls.n	80043ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	8979      	ldrh	r1, [r7, #10]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fb18 	bl	80049e8 <I2C_TransferConfig>
 80043b8:	e00f      	b.n	80043da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fb07 	bl	80049e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d19e      	bne.n	8004322 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	6a39      	ldr	r1, [r7, #32]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f9d9 	bl	80047a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e01a      	b.n	800442e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2220      	movs	r2, #32
 80043fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <HAL_I2C_Master_Transmit+0x22c>)
 800440c:	400b      	ands	r3, r1
 800440e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	80002000 	.word	0x80002000
 800443c:	fe00e800 	.word	0xfe00e800

08004440 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	460b      	mov	r3, r1
 800444e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	f040 80d6 	bne.w	800460e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004470:	d101      	bne.n	8004476 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	e0cc      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_I2C_IsDeviceReady+0x44>
 8004480:	2302      	movs	r3, #2
 8004482:	e0c5      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_I2C_IsDeviceReady+0x72>
 80044a2:	897b      	ldrh	r3, [r7, #10]
 80044a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044b0:	e006      	b.n	80044c0 <HAL_I2C_IsDeviceReady+0x80>
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044bc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80044c6:	f7ff fa6f 	bl	80039a8 <HAL_GetTick>
 80044ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80044f8:	e034      	b.n	8004564 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d01a      	beq.n	8004538 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7ff fa51 	bl	80039a8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <HAL_I2C_IsDeviceReady+0xd8>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e06b      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b20      	cmp	r3, #32
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004564:	7ffb      	ldrb	r3, [r7, #31]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_I2C_IsDeviceReady+0x130>
 800456a:	7fbb      	ldrb	r3, [r7, #30]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0c4      	beq.n	80044fa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d01a      	beq.n	80045b4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	2120      	movs	r1, #32
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f869 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e03b      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2220      	movs	r2, #32
 800459e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e02d      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2200      	movs	r2, #0
 80045bc:	2120      	movs	r1, #32
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f84e 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e020      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2210      	movs	r2, #16
 80045d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2220      	movs	r2, #32
 80045dc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	3301      	adds	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f63f af56 	bhi.w	800449a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d007      	beq.n	8004654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	619a      	str	r2, [r3, #24]
  }
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004670:	e03b      	b.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f8d6 	bl	8004828 <I2C_IsErrorOccurred>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e041      	b.n	800470a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d02d      	beq.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468e:	f7ff f98b 	bl	80039a8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d122      	bne.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d113      	bne.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00f      	b.n	800470a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4013      	ands	r3, r2
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	bf0c      	ite	eq
 80046fa:	2301      	moveq	r3, #1
 80046fc:	2300      	movne	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	429a      	cmp	r2, r3
 8004706:	d0b4      	beq.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800471e:	e033      	b.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f87f 	bl	8004828 <I2C_IsErrorOccurred>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e031      	b.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d025      	beq.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7ff f934 	bl	80039a8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11a      	bne.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d013      	beq.n	8004788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e007      	b.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d1c4      	bne.n	8004720 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ac:	e02f      	b.n	800480e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f838 	bl	8004828 <I2C_IsErrorOccurred>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02d      	b.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7ff f8f1 	bl	80039a8 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11a      	bne.n	800480e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d013      	beq.n	800480e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e007      	b.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d1c8      	bne.n	80047ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d068      	beq.n	8004926 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2210      	movs	r2, #16
 800485a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800485c:	e049      	b.n	80048f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d045      	beq.n	80048f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7ff f89f 	bl	80039a8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <I2C_IsErrorOccurred+0x54>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d13a      	bne.n	80048f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800488e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489e:	d121      	bne.n	80048e4 <I2C_IsErrorOccurred+0xbc>
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a6:	d01d      	beq.n	80048e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d01a      	beq.n	80048e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048be:	f7ff f873 	bl	80039a8 <HAL_GetTick>
 80048c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c4:	e00e      	b.n	80048e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048c6:	f7ff f86f 	bl	80039a8 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b19      	cmp	r3, #25
 80048d2:	d907      	bls.n	80048e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f043 0320 	orr.w	r3, r3, #32
 80048da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80048e2:	e006      	b.n	80048f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d1e9      	bne.n	80048c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d003      	beq.n	8004908 <I2C_IsErrorOccurred+0xe0>
 8004900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0aa      	beq.n	800485e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2220      	movs	r2, #32
 8004916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800496a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	f043 0302 	orr.w	r3, r3, #2
 8004982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01c      	beq.n	80049d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff fe3b 	bl	8004618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <I2C_IsErrorOccurred+0x1bc>)
 80049ae:	400b      	ands	r3, r1
 80049b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3728      	adds	r7, #40	; 0x28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	fe00e800 	.word	0xfe00e800

080049e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	4613      	mov	r3, r2
 80049f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a00:	7a7b      	ldrb	r3, [r7, #9]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	0d5b      	lsrs	r3, r3, #21
 8004a22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <I2C_TransferConfig+0x60>)
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	ea02 0103 	and.w	r1, r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	03ff63ff 	.word	0x03ff63ff

08004a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d138      	bne.n	8004ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e032      	b.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2224      	movs	r2, #36	; 0x24
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d139      	bne.n	8004b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e033      	b.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2224      	movs	r2, #36	; 0x24
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d141      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d131      	bne.n	8004bfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b98:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	4a46      	ldr	r2, [pc, #280]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ba8:	4b43      	ldr	r3, [pc, #268]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bb0:	4a41      	ldr	r2, [pc, #260]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bb8:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2232      	movs	r2, #50	; 0x32
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0c9b      	lsrs	r3, r3, #18
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bce:	e002      	b.n	8004bd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd6:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be2:	d102      	bne.n	8004bea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f2      	bne.n	8004bd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bea:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf6:	d158      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e057      	b.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c02:	4a2d      	ldr	r2, [pc, #180]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c0c:	e04d      	b.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d141      	bne.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d131      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2a:	4a23      	ldr	r2, [pc, #140]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2232      	movs	r2, #50	; 0x32
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	0c9b      	lsrs	r3, r3, #18
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5a:	e002      	b.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6e:	d102      	bne.n	8004c76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f2      	bne.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d112      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e011      	b.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c98:	e007      	b.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ca2:	4a05      	ldr	r2, [pc, #20]	; (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ca8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	20000000 	.word	0x20000000
 8004cc0:	431bde83 	.word	0x431bde83

08004cc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cd2:	6093      	str	r3, [r2, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40007000 	.word	0x40007000

08004ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e301      	b.n	80052fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d075      	beq.n	8004dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d02:	4ba3      	ldr	r3, [pc, #652]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d0c:	4ba0      	ldr	r3, [pc, #640]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3e>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d002      	beq.n	8004d28 <HAL_RCC_OscConfig+0x44>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d10b      	bne.n	8004d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d28:	4b99      	ldr	r3, [pc, #612]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d05b      	beq.n	8004dec <HAL_RCC_OscConfig+0x108>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d157      	bne.n	8004dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e2dc      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d106      	bne.n	8004d58 <HAL_RCC_OscConfig+0x74>
 8004d4a:	4b91      	ldr	r3, [pc, #580]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a90      	ldr	r2, [pc, #576]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e01d      	b.n	8004d94 <HAL_RCC_OscConfig+0xb0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x98>
 8004d62:	4b8b      	ldr	r3, [pc, #556]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a8a      	ldr	r2, [pc, #552]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	4b88      	ldr	r3, [pc, #544]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a87      	ldr	r2, [pc, #540]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e00b      	b.n	8004d94 <HAL_RCC_OscConfig+0xb0>
 8004d7c:	4b84      	ldr	r3, [pc, #528]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a83      	ldr	r2, [pc, #524]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4b81      	ldr	r3, [pc, #516]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a80      	ldr	r2, [pc, #512]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fe04 	bl	80039a8 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fe fe00 	bl	80039a8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e2a1      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db6:	4b76      	ldr	r3, [pc, #472]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0xc0>
 8004dc2:	e014      	b.n	8004dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fe fdf0 	bl	80039a8 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fe fdec 	bl	80039a8 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e28d      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dde:	4b6c      	ldr	r3, [pc, #432]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0xe8>
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d075      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfa:	4b65      	ldr	r3, [pc, #404]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e04:	4b62      	ldr	r3, [pc, #392]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	d102      	bne.n	8004e1a <HAL_RCC_OscConfig+0x136>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d002      	beq.n	8004e20 <HAL_RCC_OscConfig+0x13c>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d11f      	bne.n	8004e60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e20:	4b5b      	ldr	r3, [pc, #364]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x154>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e260      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	4952      	ldr	r1, [pc, #328]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e4c:	4b51      	ldr	r3, [pc, #324]	; (8004f94 <HAL_RCC_OscConfig+0x2b0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fd5d 	bl	8003910 <HAL_InitTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d043      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e24c      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e68:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a48      	ldr	r2, [pc, #288]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fe fd98 	bl	80039a8 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fe fd94 	bl	80039a8 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e235      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e8e:	4b40      	ldr	r3, [pc, #256]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9a:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	4939      	ldr	r1, [pc, #228]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
 8004eae:	e01a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb0:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a36      	ldr	r2, [pc, #216]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fd74 	bl	80039a8 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fe fd70 	bl	80039a8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e211      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x1e0>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efa:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f00:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fe fd4d 	bl	80039a8 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fe fd49 	bl	80039a8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1ea      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0ef      	beq.n	8004f12 <HAL_RCC_OscConfig+0x22e>
 8004f32:	e01b      	b.n	8004f6c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f34:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3a:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fe fd30 	bl	80039a8 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fe fd2c 	bl	80039a8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1cd      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ef      	bne.n	8004f4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80ab 	beq.w	80050d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_RCC_OscConfig+0x2b4>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e005      	b.n	8004f9a <HAL_RCC_OscConfig+0x2b6>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	20000004 	.word	0x20000004
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4bad      	ldr	r3, [pc, #692]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	4aac      	ldr	r2, [pc, #688]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8004fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8004faa:	4baa      	ldr	r3, [pc, #680]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fba:	4ba7      	ldr	r3, [pc, #668]	; (8005258 <HAL_RCC_OscConfig+0x574>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d118      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc6:	4ba4      	ldr	r3, [pc, #656]	; (8005258 <HAL_RCC_OscConfig+0x574>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4aa3      	ldr	r2, [pc, #652]	; (8005258 <HAL_RCC_OscConfig+0x574>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd2:	f7fe fce9 	bl	80039a8 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fe fce5 	bl	80039a8 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e186      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	4b9a      	ldr	r3, [pc, #616]	; (8005258 <HAL_RCC_OscConfig+0x574>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <HAL_RCC_OscConfig+0x32e>
 8005000:	4b94      	ldr	r3, [pc, #592]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	4a93      	ldr	r2, [pc, #588]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005010:	e024      	b.n	800505c <HAL_RCC_OscConfig+0x378>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b05      	cmp	r3, #5
 8005018:	d110      	bne.n	800503c <HAL_RCC_OscConfig+0x358>
 800501a:	4b8e      	ldr	r3, [pc, #568]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4a8c      	ldr	r2, [pc, #560]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005022:	f043 0304 	orr.w	r3, r3, #4
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502a:	4b8a      	ldr	r3, [pc, #552]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	4a88      	ldr	r2, [pc, #544]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800503a:	e00f      	b.n	800505c <HAL_RCC_OscConfig+0x378>
 800503c:	4b85      	ldr	r3, [pc, #532]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a84      	ldr	r2, [pc, #528]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800504c:	4b81      	ldr	r3, [pc, #516]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	4a80      	ldr	r2, [pc, #512]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fe fca0 	bl	80039a8 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fe fc9c 	bl	80039a8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e13b      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	4b74      	ldr	r3, [pc, #464]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ed      	beq.n	800506c <HAL_RCC_OscConfig+0x388>
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7fe fc89 	bl	80039a8 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005098:	e00a      	b.n	80050b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fe fc85 	bl	80039a8 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e124      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b0:	4b68      	ldr	r3, [pc, #416]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ed      	bne.n	800509a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	4a62      	ldr	r2, [pc, #392]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d03c      	beq.n	8005156 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01c      	beq.n	800511e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050e4:	4b5b      	ldr	r3, [pc, #364]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ea:	4a5a      	ldr	r2, [pc, #360]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fe fc58 	bl	80039a8 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050fc:	f7fe fc54 	bl	80039a8 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0f5      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800510e:	4b51      	ldr	r3, [pc, #324]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ef      	beq.n	80050fc <HAL_RCC_OscConfig+0x418>
 800511c:	e01b      	b.n	8005156 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800511e:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fe fc3b 	bl	80039a8 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fe fc37 	bl	80039a8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0d8      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800514a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ef      	bne.n	8005136 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80cc 	beq.w	80052f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005160:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b0c      	cmp	r3, #12
 800516a:	f000 8086 	beq.w	800527a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d15a      	bne.n	800522c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b37      	ldr	r3, [pc, #220]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a36      	ldr	r2, [pc, #216]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800517c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fe fc11 	bl	80039a8 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518a:	f7fe fc0d 	bl	80039a8 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e0ae      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a8:	4b2a      	ldr	r3, [pc, #168]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_OscConfig+0x578>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6a11      	ldr	r1, [r2, #32]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051b8:	3a01      	subs	r2, #1
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051c2:	0212      	lsls	r2, r2, #8
 80051c4:	4311      	orrs	r1, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ca:	0852      	lsrs	r2, r2, #1
 80051cc:	3a01      	subs	r2, #1
 80051ce:	0552      	lsls	r2, r2, #21
 80051d0:	4311      	orrs	r1, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d6:	0852      	lsrs	r2, r2, #1
 80051d8:	3a01      	subs	r2, #1
 80051da:	0652      	lsls	r2, r2, #25
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051e2:	06d2      	lsls	r2, r2, #27
 80051e4:	430a      	orrs	r2, r1
 80051e6:	491b      	ldr	r1, [pc, #108]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80051f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051f8:	4b16      	ldr	r3, [pc, #88]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 80051fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fe fbd0 	bl	80039a8 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520c:	f7fe fbcc 	bl	80039a8 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e06d      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x528>
 800522a:	e065      	b.n	80052f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <HAL_RCC_OscConfig+0x570>)
 8005232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fe fbb6 	bl	80039a8 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800523e:	e00f      	b.n	8005260 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005240:	f7fe fbb2 	bl	80039a8 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d908      	bls.n	8005260 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e053      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	40007000 	.word	0x40007000
 800525c:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCC_OscConfig+0x620>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e9      	bne.n	8005240 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_OscConfig+0x620>)
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	4924      	ldr	r1, [pc, #144]	; (8005304 <HAL_RCC_OscConfig+0x620>)
 8005272:	4b25      	ldr	r3, [pc, #148]	; (8005308 <HAL_RCC_OscConfig+0x624>)
 8005274:	4013      	ands	r3, r2
 8005276:	60cb      	str	r3, [r1, #12]
 8005278:	e03e      	b.n	80052f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e039      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005286:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <HAL_RCC_OscConfig+0x620>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f003 0203 	and.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	429a      	cmp	r2, r3
 8005298:	d12c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	3b01      	subs	r3, #1
 80052a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d123      	bne.n	80052f4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d11b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d113      	bne.n	80052f4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	3b01      	subs	r3, #1
 80052da:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d109      	bne.n	80052f4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	3b01      	subs	r3, #1
 80052ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	feeefffc 	.word	0xfeeefffc

0800530c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e11e      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005324:	4b91      	ldr	r3, [pc, #580]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d910      	bls.n	8005354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b8e      	ldr	r3, [pc, #568]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 020f 	bic.w	r2, r3, #15
 800533a:	498c      	ldr	r1, [pc, #560]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b8a      	ldr	r3, [pc, #552]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e106      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d073      	beq.n	8005448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d129      	bne.n	80053bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005368:	4b81      	ldr	r3, [pc, #516]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0f4      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005378:	f000 f99e 	bl	80056b8 <RCC_GetSysClockFreqFromPLLSource>
 800537c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4a7c      	ldr	r2, [pc, #496]	; (8005574 <HAL_RCC_ClockConfig+0x268>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d93f      	bls.n	8005406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005386:	4b7a      	ldr	r3, [pc, #488]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800539a:	2b00      	cmp	r3, #0
 800539c:	d033      	beq.n	8005406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d12f      	bne.n	8005406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053a6:	4b72      	ldr	r3, [pc, #456]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ae:	4a70      	ldr	r2, [pc, #448]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e024      	b.n	8005406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c4:	4b6a      	ldr	r3, [pc, #424]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0c6      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d4:	4b66      	ldr	r3, [pc, #408]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0be      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053e4:	f000 f8ce 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4a61      	ldr	r2, [pc, #388]	; (8005574 <HAL_RCC_ClockConfig+0x268>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d909      	bls.n	8005406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053f2:	4b5f      	ldr	r3, [pc, #380]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fa:	4a5d      	ldr	r2, [pc, #372]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005406:	4b5a      	ldr	r3, [pc, #360]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 0203 	bic.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4957      	ldr	r1, [pc, #348]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005414:	4313      	orrs	r3, r2
 8005416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005418:	f7fe fac6 	bl	80039a8 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	e00a      	b.n	8005436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005420:	f7fe fac2 	bl	80039a8 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e095      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	4b4e      	ldr	r3, [pc, #312]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 020c 	and.w	r2, r3, #12
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	429a      	cmp	r2, r3
 8005446:	d1eb      	bne.n	8005420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d023      	beq.n	800549c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b43      	ldr	r3, [pc, #268]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a42      	ldr	r2, [pc, #264]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800546a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005478:	4b3d      	ldr	r3, [pc, #244]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005480:	4a3b      	ldr	r2, [pc, #236]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b39      	ldr	r3, [pc, #228]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4936      	ldr	r1, [pc, #216]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
 800549a:	e008      	b.n	80054ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d105      	bne.n	80054ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054a2:	4b33      	ldr	r3, [pc, #204]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4a32      	ldr	r2, [pc, #200]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 80054a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d21d      	bcs.n	80054f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 020f 	bic.w	r2, r3, #15
 80054c4:	4929      	ldr	r1, [pc, #164]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054cc:	f7fe fa6c 	bl	80039a8 <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d4:	f7fe fa68 	bl	80039a8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e03b      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b20      	ldr	r3, [pc, #128]	; (800556c <HAL_RCC_ClockConfig+0x260>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d1ed      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4917      	ldr	r1, [pc, #92]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	490f      	ldr	r1, [pc, #60]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005536:	f000 f825 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 800553a:	4602      	mov	r2, r0
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_RCC_ClockConfig+0x264>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	490c      	ldr	r1, [pc, #48]	; (8005578 <HAL_RCC_ClockConfig+0x26c>)
 8005548:	5ccb      	ldrb	r3, [r1, r3]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <HAL_RCC_ClockConfig+0x270>)
 8005554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_RCC_ClockConfig+0x274>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe f9d8 	bl	8003910 <HAL_InitTick>
 8005560:	4603      	mov	r3, r0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40022000 	.word	0x40022000
 8005570:	40021000 	.word	0x40021000
 8005574:	04c4b400 	.word	0x04c4b400
 8005578:	0800ecf0 	.word	0x0800ecf0
 800557c:	20000000 	.word	0x20000000
 8005580:	20000004 	.word	0x20000004

08005584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800558a:	4b2c      	ldr	r3, [pc, #176]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b04      	cmp	r3, #4
 8005594:	d102      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005596:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e047      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800559c:	4b27      	ldr	r3, [pc, #156]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d102      	bne.n	80055ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055a8:	4b26      	ldr	r3, [pc, #152]	; (8005644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	e03e      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d136      	bne.n	8005628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3301      	adds	r3, #1
 80055d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d10c      	bne.n	80055f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d8:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e2:	68d2      	ldr	r2, [r2, #12]
 80055e4:	0a12      	lsrs	r2, r2, #8
 80055e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	617b      	str	r3, [r7, #20]
      break;
 80055f0:	e00c      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f2:	4a13      	ldr	r2, [pc, #76]	; (8005640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fc:	68d2      	ldr	r2, [r2, #12]
 80055fe:	0a12      	lsrs	r2, r2, #8
 8005600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
      break;
 800560a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0e5b      	lsrs	r3, r3, #25
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	3301      	adds	r3, #1
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e001      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800562c:	693b      	ldr	r3, [r7, #16]
}
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	00f42400 	.word	0x00f42400
 8005644:	007a1200 	.word	0x007a1200

08005648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <HAL_RCC_GetHCLKFreq+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000000 	.word	0x20000000

08005660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005664:	f7ff fff0 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4904      	ldr	r1, [pc, #16]	; (8005688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	0800ed00 	.word	0x0800ed00

0800568c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005690:	f7ff ffda 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0adb      	lsrs	r3, r3, #11
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4904      	ldr	r1, [pc, #16]	; (80056b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000
 80056b4:	0800ed00 	.word	0x0800ed00

080056b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d10c      	bne.n	80056f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056e6:	68d2      	ldr	r2, [r2, #12]
 80056e8:	0a12      	lsrs	r2, r2, #8
 80056ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	617b      	str	r3, [r7, #20]
    break;
 80056f4:	e00c      	b.n	8005710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056f6:	4a12      	ldr	r2, [pc, #72]	; (8005740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005700:	68d2      	ldr	r2, [r2, #12]
 8005702:	0a12      	lsrs	r2, r2, #8
 8005704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
    break;
 800570e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0e5b      	lsrs	r3, r3, #25
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	3301      	adds	r3, #1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800572a:	687b      	ldr	r3, [r7, #4]
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40021000 	.word	0x40021000
 800573c:	007a1200 	.word	0x007a1200
 8005740:	00f42400 	.word	0x00f42400

08005744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800574c:	2300      	movs	r3, #0
 800574e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005750:	2300      	movs	r3, #0
 8005752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8098 	beq.w	8005892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005762:	2300      	movs	r3, #0
 8005764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005766:	4b43      	ldr	r3, [pc, #268]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005772:	4b40      	ldr	r3, [pc, #256]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005776:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	6593      	str	r3, [r2, #88]	; 0x58
 800577e:	4b3d      	ldr	r3, [pc, #244]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578a:	2301      	movs	r3, #1
 800578c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800578e:	4b3a      	ldr	r3, [pc, #232]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a39      	ldr	r2, [pc, #228]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800579a:	f7fe f905 	bl	80039a8 <HAL_GetTick>
 800579e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057a0:	e009      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fe f901 	bl	80039a8 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d902      	bls.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	74fb      	strb	r3, [r7, #19]
        break;
 80057b4:	e005      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b6:	4b30      	ldr	r3, [pc, #192]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ef      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057c2:	7cfb      	ldrb	r3, [r7, #19]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d159      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057c8:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01e      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d019      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057e4:	4b23      	ldr	r3, [pc, #140]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057f0:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005800:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005810:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005822:	f7fe f8c1 	bl	80039a8 <HAL_GetTick>
 8005826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005828:	e00b      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fe f8bd 	bl	80039a8 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d902      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	74fb      	strb	r3, [r7, #19]
            break;
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ec      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	4903      	ldr	r1, [pc, #12]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800586c:	e008      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	74bb      	strb	r3, [r7, #18]
 8005872:	e005      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005874:	40021000 	.word	0x40021000
 8005878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	7cfb      	ldrb	r3, [r7, #19]
 800587e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005880:	7c7b      	ldrb	r3, [r7, #17]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d105      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005886:	4ba6      	ldr	r3, [pc, #664]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	4aa5      	ldr	r2, [pc, #660]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800589e:	4ba0      	ldr	r3, [pc, #640]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f023 0203 	bic.w	r2, r3, #3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	499c      	ldr	r1, [pc, #624]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058c0:	4b97      	ldr	r3, [pc, #604]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f023 020c 	bic.w	r2, r3, #12
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	4994      	ldr	r1, [pc, #592]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058e2:	4b8f      	ldr	r3, [pc, #572]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	498b      	ldr	r1, [pc, #556]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005904:	4b86      	ldr	r3, [pc, #536]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4983      	ldr	r1, [pc, #524]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005926:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	497a      	ldr	r1, [pc, #488]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005948:	4b75      	ldr	r3, [pc, #468]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	4972      	ldr	r1, [pc, #456]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800596a:	4b6d      	ldr	r3, [pc, #436]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4969      	ldr	r1, [pc, #420]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800598c:	4b64      	ldr	r3, [pc, #400]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	4961      	ldr	r1, [pc, #388]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ae:	4b5c      	ldr	r3, [pc, #368]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	4958      	ldr	r1, [pc, #352]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d015      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d0:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	4950      	ldr	r1, [pc, #320]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ee:	d105      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a4a      	ldr	r2, [pc, #296]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d015      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	4942      	ldr	r1, [pc, #264]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a26:	d105      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a28:	4b3d      	ldr	r3, [pc, #244]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d015      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a40:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4934      	ldr	r1, [pc, #208]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a5e:	d105      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a60:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4a2e      	ldr	r2, [pc, #184]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a78:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	4926      	ldr	r1, [pc, #152]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a96:	d105      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a98:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a20      	ldr	r2, [pc, #128]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	4918      	ldr	r1, [pc, #96]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ace:	d105      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	490a      	ldr	r1, [pc, #40]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b06:	d105      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b14:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000

08005b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e042      	b.n	8005bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fd fd0f 	bl	800356c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2224      	movs	r2, #36	; 0x24
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fee2 	bl	8006938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fc43 	bl	8006400 <UART_SetConfig>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e01b      	b.n	8005bbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 ff61 	bl	8006a7c <UART_CheckIdleState>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d17b      	bne.n	8005cd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Transmit+0x26>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e074      	b.n	8005cd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2221      	movs	r2, #33	; 0x21
 8005bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfe:	f7fd fed3 	bl	80039a8 <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Transmit+0x6c>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c38:	e030      	b.n	8005c9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2180      	movs	r1, #128	; 0x80
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 ffc3 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e03d      	b.n	8005cd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3302      	adds	r3, #2
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e007      	b.n	8005c8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1c8      	bne.n	8005c3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2140      	movs	r1, #64	; 0x40
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 ff8c 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e006      	b.n	8005cd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d137      	bne.n	8005d68 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Receive_IT+0x24>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e030      	b.n	8005d6a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <HAL_UART_Receive_IT+0x94>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d01f      	beq.n	8005d58 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d018      	beq.n	8005d58 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	613b      	str	r3, [r7, #16]
   return(result);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	6a3a      	ldr	r2, [r7, #32]
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e6      	bne.n	8005d26 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 ffa4 	bl	8006cac <UART_Start_Receive_IT>
 8005d64:	4603      	mov	r3, r0
 8005d66:	e000      	b.n	8005d6a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3728      	adds	r7, #40	; 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40008000 	.word	0x40008000

08005d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b0ba      	sub	sp, #232	; 0xe8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005da6:	4013      	ands	r3, r2
 8005da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11b      	bne.n	8005dec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 82e3 	beq.w	80063a8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
      }
      return;
 8005dea:	e2dd      	b.n	80063a8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8123 	beq.w	800603c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005df6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dfa:	4b8d      	ldr	r3, [pc, #564]	; (8006030 <HAL_UART_IRQHandler+0x2b8>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e06:	4b8b      	ldr	r3, [pc, #556]	; (8006034 <HAL_UART_IRQHandler+0x2bc>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8116 	beq.w	800603c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d011      	beq.n	8005e40 <HAL_UART_IRQHandler+0xc8>
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f043 0201 	orr.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <HAL_UART_IRQHandler+0xf8>
 8005e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x128>
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ebc:	4b5c      	ldr	r3, [pc, #368]	; (8006030 <HAL_UART_IRQHandler+0x2b8>)
 8005ebe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00b      	beq.n	8005edc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f043 0208 	orr.w	r2, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_UART_IRQHandler+0x196>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8249 	beq.w	80063ac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d013      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d054      	beq.n	800601c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 ffbc 	bl	8006ef0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d146      	bne.n	8006014 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1d9      	bne.n	8005f86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe2:	4a15      	ldr	r2, [pc, #84]	; (8006038 <HAL_UART_IRQHandler+0x2c0>)
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fd fe71 	bl	8003cd4 <HAL_DMA_Abort_IT>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d019      	beq.n	800602c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006006:	4610      	mov	r0, r2
 8006008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600a:	e00f      	b.n	800602c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9e1 	bl	80063d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006012:	e00b      	b.n	800602c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9dd 	bl	80063d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601a:	e007      	b.n	800602c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f9d9 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800602a:	e1bf      	b.n	80063ac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	bf00      	nop
    return;
 800602e:	e1bd      	b.n	80063ac <HAL_UART_IRQHandler+0x634>
 8006030:	10000001 	.word	0x10000001
 8006034:	04000120 	.word	0x04000120
 8006038:	08006fbd 	.word	0x08006fbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 8153 	bne.w	80062ec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 814c 	beq.w	80062ec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8145 	beq.w	80062ec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2210      	movs	r2, #16
 8006068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	f040 80bb 	bne.w	80061f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 818f 	beq.w	80063b0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800609c:	429a      	cmp	r2, r3
 800609e:	f080 8187 	bcs.w	80063b0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 8087 	bne.w	80061ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1da      	bne.n	80060c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800611a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800612e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e1      	bne.n	800610a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800616a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800616c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80061b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e4      	bne.n	800618c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fd fd2a 	bl	8003c22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f8fd 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ee:	e0df      	b.n	80063b0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80d1 	beq.w	80063b4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80cc 	beq.w	80063b4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800623e:	647b      	str	r3, [r7, #68]	; 0x44
 8006240:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e4      	bne.n	800621c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	623b      	str	r3, [r7, #32]
   return(result);
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800627a:	633a      	str	r2, [r7, #48]	; 0x30
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e1      	bne.n	8006252 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0310 	bic.w	r3, r3, #16
 80062b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	617b      	str	r3, [r7, #20]
   return(result);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e4      	bne.n	80062a2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f87f 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062ea:	e063      	b.n	80063b4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <HAL_UART_IRQHandler+0x59e>
 80062f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800630c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 fbb2 	bl	8007a78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006314:	e051      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d014      	beq.n	800634c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800632e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	2b00      	cmp	r3, #0
 8006340:	d03a      	beq.n	80063b8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
    }
    return;
 800634a:	e035      	b.n	80063b8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x5f4>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fe3f 	bl	8006fe8 <UART_EndTransmit_IT>
    return;
 800636a:	e026      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <HAL_UART_IRQHandler+0x614>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fb8b 	bl	8007aa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800638a:	e016      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d010      	beq.n	80063ba <HAL_UART_IRQHandler+0x642>
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639c:	2b00      	cmp	r3, #0
 800639e:	da0c      	bge.n	80063ba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fb73 	bl	8007a8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063a6:	e008      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
      return;
 80063a8:	bf00      	nop
 80063aa:	e006      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
    return;
 80063ac:	bf00      	nop
 80063ae:	e004      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
      return;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
      return;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <HAL_UART_IRQHandler+0x642>
    return;
 80063b8:	bf00      	nop
  }
}
 80063ba:	37e8      	adds	r7, #232	; 0xe8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006400:	b5b0      	push	{r4, r5, r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	4313      	orrs	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4baf      	ldr	r3, [pc, #700]	; (80066e8 <UART_SetConfig+0x2e8>)
 800642c:	4013      	ands	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	430b      	orrs	r3, r1
 8006436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4aa4      	ldr	r2, [pc, #656]	; (80066ec <UART_SetConfig+0x2ec>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	4313      	orrs	r3, r2
 8006466:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006472:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6812      	ldr	r2, [r2, #0]
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	430b      	orrs	r3, r1
 800647e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f023 010f 	bic.w	r1, r3, #15
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a95      	ldr	r2, [pc, #596]	; (80066f0 <UART_SetConfig+0x2f0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d120      	bne.n	80064e2 <UART_SetConfig+0xe2>
 80064a0:	4b94      	ldr	r3, [pc, #592]	; (80066f4 <UART_SetConfig+0x2f4>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d816      	bhi.n	80064dc <UART_SetConfig+0xdc>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <UART_SetConfig+0xb4>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064d1 	.word	0x080064d1
 80064bc:	080064cb 	.word	0x080064cb
 80064c0:	080064d7 	.word	0x080064d7
 80064c4:	2301      	movs	r3, #1
 80064c6:	76fb      	strb	r3, [r7, #27]
 80064c8:	e0bc      	b.n	8006644 <UART_SetConfig+0x244>
 80064ca:	2302      	movs	r3, #2
 80064cc:	76fb      	strb	r3, [r7, #27]
 80064ce:	e0b9      	b.n	8006644 <UART_SetConfig+0x244>
 80064d0:	2304      	movs	r3, #4
 80064d2:	76fb      	strb	r3, [r7, #27]
 80064d4:	e0b6      	b.n	8006644 <UART_SetConfig+0x244>
 80064d6:	2308      	movs	r3, #8
 80064d8:	76fb      	strb	r3, [r7, #27]
 80064da:	e0b3      	b.n	8006644 <UART_SetConfig+0x244>
 80064dc:	2310      	movs	r3, #16
 80064de:	76fb      	strb	r3, [r7, #27]
 80064e0:	e0b0      	b.n	8006644 <UART_SetConfig+0x244>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a84      	ldr	r2, [pc, #528]	; (80066f8 <UART_SetConfig+0x2f8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d132      	bne.n	8006552 <UART_SetConfig+0x152>
 80064ec:	4b81      	ldr	r3, [pc, #516]	; (80066f4 <UART_SetConfig+0x2f4>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b0c      	cmp	r3, #12
 80064f8:	d828      	bhi.n	800654c <UART_SetConfig+0x14c>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x100>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006535 	.word	0x08006535
 8006504:	0800654d 	.word	0x0800654d
 8006508:	0800654d 	.word	0x0800654d
 800650c:	0800654d 	.word	0x0800654d
 8006510:	08006541 	.word	0x08006541
 8006514:	0800654d 	.word	0x0800654d
 8006518:	0800654d 	.word	0x0800654d
 800651c:	0800654d 	.word	0x0800654d
 8006520:	0800653b 	.word	0x0800653b
 8006524:	0800654d 	.word	0x0800654d
 8006528:	0800654d 	.word	0x0800654d
 800652c:	0800654d 	.word	0x0800654d
 8006530:	08006547 	.word	0x08006547
 8006534:	2300      	movs	r3, #0
 8006536:	76fb      	strb	r3, [r7, #27]
 8006538:	e084      	b.n	8006644 <UART_SetConfig+0x244>
 800653a:	2302      	movs	r3, #2
 800653c:	76fb      	strb	r3, [r7, #27]
 800653e:	e081      	b.n	8006644 <UART_SetConfig+0x244>
 8006540:	2304      	movs	r3, #4
 8006542:	76fb      	strb	r3, [r7, #27]
 8006544:	e07e      	b.n	8006644 <UART_SetConfig+0x244>
 8006546:	2308      	movs	r3, #8
 8006548:	76fb      	strb	r3, [r7, #27]
 800654a:	e07b      	b.n	8006644 <UART_SetConfig+0x244>
 800654c:	2310      	movs	r3, #16
 800654e:	76fb      	strb	r3, [r7, #27]
 8006550:	e078      	b.n	8006644 <UART_SetConfig+0x244>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a69      	ldr	r2, [pc, #420]	; (80066fc <UART_SetConfig+0x2fc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d120      	bne.n	800659e <UART_SetConfig+0x19e>
 800655c:	4b65      	ldr	r3, [pc, #404]	; (80066f4 <UART_SetConfig+0x2f4>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006562:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006566:	2b30      	cmp	r3, #48	; 0x30
 8006568:	d013      	beq.n	8006592 <UART_SetConfig+0x192>
 800656a:	2b30      	cmp	r3, #48	; 0x30
 800656c:	d814      	bhi.n	8006598 <UART_SetConfig+0x198>
 800656e:	2b20      	cmp	r3, #32
 8006570:	d009      	beq.n	8006586 <UART_SetConfig+0x186>
 8006572:	2b20      	cmp	r3, #32
 8006574:	d810      	bhi.n	8006598 <UART_SetConfig+0x198>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <UART_SetConfig+0x180>
 800657a:	2b10      	cmp	r3, #16
 800657c:	d006      	beq.n	800658c <UART_SetConfig+0x18c>
 800657e:	e00b      	b.n	8006598 <UART_SetConfig+0x198>
 8006580:	2300      	movs	r3, #0
 8006582:	76fb      	strb	r3, [r7, #27]
 8006584:	e05e      	b.n	8006644 <UART_SetConfig+0x244>
 8006586:	2302      	movs	r3, #2
 8006588:	76fb      	strb	r3, [r7, #27]
 800658a:	e05b      	b.n	8006644 <UART_SetConfig+0x244>
 800658c:	2304      	movs	r3, #4
 800658e:	76fb      	strb	r3, [r7, #27]
 8006590:	e058      	b.n	8006644 <UART_SetConfig+0x244>
 8006592:	2308      	movs	r3, #8
 8006594:	76fb      	strb	r3, [r7, #27]
 8006596:	e055      	b.n	8006644 <UART_SetConfig+0x244>
 8006598:	2310      	movs	r3, #16
 800659a:	76fb      	strb	r3, [r7, #27]
 800659c:	e052      	b.n	8006644 <UART_SetConfig+0x244>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a57      	ldr	r2, [pc, #348]	; (8006700 <UART_SetConfig+0x300>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d120      	bne.n	80065ea <UART_SetConfig+0x1ea>
 80065a8:	4b52      	ldr	r3, [pc, #328]	; (80066f4 <UART_SetConfig+0x2f4>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065b2:	2bc0      	cmp	r3, #192	; 0xc0
 80065b4:	d013      	beq.n	80065de <UART_SetConfig+0x1de>
 80065b6:	2bc0      	cmp	r3, #192	; 0xc0
 80065b8:	d814      	bhi.n	80065e4 <UART_SetConfig+0x1e4>
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d009      	beq.n	80065d2 <UART_SetConfig+0x1d2>
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d810      	bhi.n	80065e4 <UART_SetConfig+0x1e4>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <UART_SetConfig+0x1cc>
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d006      	beq.n	80065d8 <UART_SetConfig+0x1d8>
 80065ca:	e00b      	b.n	80065e4 <UART_SetConfig+0x1e4>
 80065cc:	2300      	movs	r3, #0
 80065ce:	76fb      	strb	r3, [r7, #27]
 80065d0:	e038      	b.n	8006644 <UART_SetConfig+0x244>
 80065d2:	2302      	movs	r3, #2
 80065d4:	76fb      	strb	r3, [r7, #27]
 80065d6:	e035      	b.n	8006644 <UART_SetConfig+0x244>
 80065d8:	2304      	movs	r3, #4
 80065da:	76fb      	strb	r3, [r7, #27]
 80065dc:	e032      	b.n	8006644 <UART_SetConfig+0x244>
 80065de:	2308      	movs	r3, #8
 80065e0:	76fb      	strb	r3, [r7, #27]
 80065e2:	e02f      	b.n	8006644 <UART_SetConfig+0x244>
 80065e4:	2310      	movs	r3, #16
 80065e6:	76fb      	strb	r3, [r7, #27]
 80065e8:	e02c      	b.n	8006644 <UART_SetConfig+0x244>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3f      	ldr	r2, [pc, #252]	; (80066ec <UART_SetConfig+0x2ec>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d125      	bne.n	8006640 <UART_SetConfig+0x240>
 80065f4:	4b3f      	ldr	r3, [pc, #252]	; (80066f4 <UART_SetConfig+0x2f4>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006602:	d017      	beq.n	8006634 <UART_SetConfig+0x234>
 8006604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006608:	d817      	bhi.n	800663a <UART_SetConfig+0x23a>
 800660a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660e:	d00b      	beq.n	8006628 <UART_SetConfig+0x228>
 8006610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006614:	d811      	bhi.n	800663a <UART_SetConfig+0x23a>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <UART_SetConfig+0x222>
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d006      	beq.n	800662e <UART_SetConfig+0x22e>
 8006620:	e00b      	b.n	800663a <UART_SetConfig+0x23a>
 8006622:	2300      	movs	r3, #0
 8006624:	76fb      	strb	r3, [r7, #27]
 8006626:	e00d      	b.n	8006644 <UART_SetConfig+0x244>
 8006628:	2302      	movs	r3, #2
 800662a:	76fb      	strb	r3, [r7, #27]
 800662c:	e00a      	b.n	8006644 <UART_SetConfig+0x244>
 800662e:	2304      	movs	r3, #4
 8006630:	76fb      	strb	r3, [r7, #27]
 8006632:	e007      	b.n	8006644 <UART_SetConfig+0x244>
 8006634:	2308      	movs	r3, #8
 8006636:	76fb      	strb	r3, [r7, #27]
 8006638:	e004      	b.n	8006644 <UART_SetConfig+0x244>
 800663a:	2310      	movs	r3, #16
 800663c:	76fb      	strb	r3, [r7, #27]
 800663e:	e001      	b.n	8006644 <UART_SetConfig+0x244>
 8006640:	2310      	movs	r3, #16
 8006642:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a28      	ldr	r2, [pc, #160]	; (80066ec <UART_SetConfig+0x2ec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f040 809e 	bne.w	800678c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006650:	7efb      	ldrb	r3, [r7, #27]
 8006652:	2b08      	cmp	r3, #8
 8006654:	d823      	bhi.n	800669e <UART_SetConfig+0x29e>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0x25c>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006681 	.word	0x08006681
 8006660:	0800669f 	.word	0x0800669f
 8006664:	08006689 	.word	0x08006689
 8006668:	0800669f 	.word	0x0800669f
 800666c:	0800668f 	.word	0x0800668f
 8006670:	0800669f 	.word	0x0800669f
 8006674:	0800669f 	.word	0x0800669f
 8006678:	0800669f 	.word	0x0800669f
 800667c:	08006697 	.word	0x08006697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006680:	f7fe ffee 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8006684:	6178      	str	r0, [r7, #20]
        break;
 8006686:	e00f      	b.n	80066a8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006688:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <UART_SetConfig+0x304>)
 800668a:	617b      	str	r3, [r7, #20]
        break;
 800668c:	e00c      	b.n	80066a8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668e:	f7fe ff79 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8006692:	6178      	str	r0, [r7, #20]
        break;
 8006694:	e008      	b.n	80066a8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669a:	617b      	str	r3, [r7, #20]
        break;
 800669c:	e004      	b.n	80066a8 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	76bb      	strb	r3, [r7, #26]
        break;
 80066a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 812c 	beq.w	8006908 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <UART_SetConfig+0x308>)
 80066b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ba:	461a      	mov	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	4413      	add	r3, r2
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d305      	bcc.n	80066e0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d915      	bls.n	800670c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	76bb      	strb	r3, [r7, #26]
 80066e4:	e110      	b.n	8006908 <UART_SetConfig+0x508>
 80066e6:	bf00      	nop
 80066e8:	cfff69f3 	.word	0xcfff69f3
 80066ec:	40008000 	.word	0x40008000
 80066f0:	40013800 	.word	0x40013800
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40004400 	.word	0x40004400
 80066fc:	40004800 	.word	0x40004800
 8006700:	40004c00 	.word	0x40004c00
 8006704:	00f42400 	.word	0x00f42400
 8006708:	0800ed08 	.word	0x0800ed08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4618      	mov	r0, r3
 8006710:	f04f 0100 	mov.w	r1, #0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	4a85      	ldr	r2, [pc, #532]	; (8006930 <UART_SetConfig+0x530>)
 800671a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671e:	b29a      	uxth	r2, r3
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	f7fa fb38 	bl	8000d98 <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	020b      	lsls	r3, r1, #8
 800673a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800673e:	0202      	lsls	r2, r0, #8
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	6849      	ldr	r1, [r1, #4]
 8006744:	0849      	lsrs	r1, r1, #1
 8006746:	4608      	mov	r0, r1
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	1814      	adds	r4, r2, r0
 800674e:	eb43 0501 	adc.w	r5, r3, r1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	461a      	mov	r2, r3
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7fa fb1a 	bl	8000d98 <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4613      	mov	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006772:	d308      	bcc.n	8006786 <UART_SetConfig+0x386>
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d204      	bcs.n	8006786 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	e0c0      	b.n	8006908 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	76bb      	strb	r3, [r7, #26]
 800678a:	e0bd      	b.n	8006908 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006794:	d164      	bne.n	8006860 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006796:	7efb      	ldrb	r3, [r7, #27]
 8006798:	2b08      	cmp	r3, #8
 800679a:	d828      	bhi.n	80067ee <UART_SetConfig+0x3ee>
 800679c:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x3a4>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067c9 	.word	0x080067c9
 80067a8:	080067d1 	.word	0x080067d1
 80067ac:	080067d9 	.word	0x080067d9
 80067b0:	080067ef 	.word	0x080067ef
 80067b4:	080067df 	.word	0x080067df
 80067b8:	080067ef 	.word	0x080067ef
 80067bc:	080067ef 	.word	0x080067ef
 80067c0:	080067ef 	.word	0x080067ef
 80067c4:	080067e7 	.word	0x080067e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c8:	f7fe ff4a 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 80067cc:	6178      	str	r0, [r7, #20]
        break;
 80067ce:	e013      	b.n	80067f8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fe ff5c 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 80067d4:	6178      	str	r0, [r7, #20]
        break;
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d8:	4b56      	ldr	r3, [pc, #344]	; (8006934 <UART_SetConfig+0x534>)
 80067da:	617b      	str	r3, [r7, #20]
        break;
 80067dc:	e00c      	b.n	80067f8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067de:	f7fe fed1 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80067e2:	6178      	str	r0, [r7, #20]
        break;
 80067e4:	e008      	b.n	80067f8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ea:	617b      	str	r3, [r7, #20]
        break;
 80067ec:	e004      	b.n	80067f8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	76bb      	strb	r3, [r7, #26]
        break;
 80067f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8084 	beq.w	8006908 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	4a4a      	ldr	r2, [pc, #296]	; (8006930 <UART_SetConfig+0x530>)
 8006806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800680a:	461a      	mov	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006812:	005a      	lsls	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	441a      	add	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b0f      	cmp	r3, #15
 800682a:	d916      	bls.n	800685a <UART_SetConfig+0x45a>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006832:	d212      	bcs.n	800685a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f023 030f 	bic.w	r3, r3, #15
 800683c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	b29a      	uxth	r2, r3
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	4313      	orrs	r3, r2
 800684e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	89fa      	ldrh	r2, [r7, #14]
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e056      	b.n	8006908 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	76bb      	strb	r3, [r7, #26]
 800685e:	e053      	b.n	8006908 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006860:	7efb      	ldrb	r3, [r7, #27]
 8006862:	2b08      	cmp	r3, #8
 8006864:	d827      	bhi.n	80068b6 <UART_SetConfig+0x4b6>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x46c>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006891 	.word	0x08006891
 8006870:	08006899 	.word	0x08006899
 8006874:	080068a1 	.word	0x080068a1
 8006878:	080068b7 	.word	0x080068b7
 800687c:	080068a7 	.word	0x080068a7
 8006880:	080068b7 	.word	0x080068b7
 8006884:	080068b7 	.word	0x080068b7
 8006888:	080068b7 	.word	0x080068b7
 800688c:	080068af 	.word	0x080068af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006890:	f7fe fee6 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8006894:	6178      	str	r0, [r7, #20]
        break;
 8006896:	e013      	b.n	80068c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006898:	f7fe fef8 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 800689c:	6178      	str	r0, [r7, #20]
        break;
 800689e:	e00f      	b.n	80068c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <UART_SetConfig+0x534>)
 80068a2:	617b      	str	r3, [r7, #20]
        break;
 80068a4:	e00c      	b.n	80068c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a6:	f7fe fe6d 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80068aa:	6178      	str	r0, [r7, #20]
        break;
 80068ac:	e008      	b.n	80068c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b2:	617b      	str	r3, [r7, #20]
        break;
 80068b4:	e004      	b.n	80068c0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	76bb      	strb	r3, [r7, #26]
        break;
 80068be:	bf00      	nop
    }

    if (pclk != 0U)
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d020      	beq.n	8006908 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	4a19      	ldr	r2, [pc, #100]	; (8006930 <UART_SetConfig+0x530>)
 80068cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d0:	461a      	mov	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	441a      	add	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d909      	bls.n	8006904 <UART_SetConfig+0x504>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f6:	d205      	bcs.n	8006904 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	e001      	b.n	8006908 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006924:	7ebb      	ldrb	r3, [r7, #26]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bdb0      	pop	{r4, r5, r7, pc}
 800692e:	bf00      	nop
 8006930:	0800ed08 	.word	0x0800ed08
 8006934:	00f42400 	.word	0x00f42400

08006938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a36:	d10a      	bne.n	8006a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b098      	sub	sp, #96	; 0x60
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a8c:	f7fc ff8c 	bl	80039a8 <HAL_GetTick>
 8006a90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d12f      	bne.n	8006b00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f88e 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d022      	beq.n	8006b00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ace:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8006ada:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e063      	b.n	8006bc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d149      	bne.n	8006ba2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b16:	2200      	movs	r2, #0
 8006b18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f857 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d03c      	beq.n	8006ba2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	623b      	str	r3, [r7, #32]
   return(result);
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b46:	633b      	str	r3, [r7, #48]	; 0x30
 8006b48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b7a:	61fa      	str	r2, [r7, #28]
 8006b7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	69b9      	ldr	r1, [r7, #24]
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	617b      	str	r3, [r7, #20]
   return(result);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e012      	b.n	8006bc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3758      	adds	r7, #88	; 0x58
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be0:	e04f      	b.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d04b      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bea:	f7fc fedd 	bl	80039a8 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d302      	bcc.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e04e      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d037      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b80      	cmp	r3, #128	; 0x80
 8006c16:	d034      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d031      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d110      	bne.n	8006c4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f95b 	bl	8006ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e029      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5c:	d111      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f941 	bl	8006ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d0a0      	beq.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b0a3      	sub	sp, #140	; 0x8c
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	88fa      	ldrh	r2, [r7, #6]
 8006cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cde:	d10e      	bne.n	8006cfe <UART_Start_Receive_IT+0x52>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <UART_Start_Receive_IT+0x48>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cf2:	e02d      	b.n	8006d50 <UART_Start_Receive_IT+0xa4>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	22ff      	movs	r2, #255	; 0xff
 8006cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cfc:	e028      	b.n	8006d50 <UART_Start_Receive_IT+0xa4>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10d      	bne.n	8006d22 <UART_Start_Receive_IT+0x76>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <UART_Start_Receive_IT+0x6c>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	22ff      	movs	r2, #255	; 0xff
 8006d12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d16:	e01b      	b.n	8006d50 <UART_Start_Receive_IT+0xa4>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	227f      	movs	r2, #127	; 0x7f
 8006d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d20:	e016      	b.n	8006d50 <UART_Start_Receive_IT+0xa4>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d2a:	d10d      	bne.n	8006d48 <UART_Start_Receive_IT+0x9c>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <UART_Start_Receive_IT+0x92>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	227f      	movs	r2, #127	; 0x7f
 8006d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d3c:	e008      	b.n	8006d50 <UART_Start_Receive_IT+0xa4>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	223f      	movs	r2, #63	; 0x3f
 8006d42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d46:	e003      	b.n	8006d50 <UART_Start_Receive_IT+0xa4>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2222      	movs	r2, #34	; 0x22
 8006d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3308      	adds	r3, #8
 8006d66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d84:	673a      	str	r2, [r7, #112]	; 0x70
 8006d86:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006d8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e3      	bne.n	8006d60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da0:	d14f      	bne.n	8006e42 <UART_Start_Receive_IT+0x196>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d349      	bcc.n	8006e42 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	d107      	bne.n	8006dc8 <UART_Start_Receive_IT+0x11c>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a47      	ldr	r2, [pc, #284]	; (8006ee0 <UART_Start_Receive_IT+0x234>)
 8006dc4:	675a      	str	r2, [r3, #116]	; 0x74
 8006dc6:	e002      	b.n	8006dce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a46      	ldr	r2, [pc, #280]	; (8006ee4 <UART_Start_Receive_IT+0x238>)
 8006dcc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01a      	beq.n	8006e0c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dfa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e4      	bne.n	8006dd6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_Start_Receive_IT+0x160>
 8006e40:	e046      	b.n	8006ed0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4a:	d107      	bne.n	8006e5c <UART_Start_Receive_IT+0x1b0>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <UART_Start_Receive_IT+0x23c>)
 8006e58:	675a      	str	r2, [r3, #116]	; 0x74
 8006e5a:	e002      	b.n	8006e62 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a23      	ldr	r2, [pc, #140]	; (8006eec <UART_Start_Receive_IT+0x240>)
 8006e60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d019      	beq.n	8006e9e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e7e:	677b      	str	r3, [r7, #116]	; 0x74
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_Start_Receive_IT+0x1be>
 8006e9c:	e018      	b.n	8006ed0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f043 0320 	orr.w	r3, r3, #32
 8006eb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	6a3a      	ldr	r2, [r7, #32]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	378c      	adds	r7, #140	; 0x8c
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	08007711 	.word	0x08007711
 8006ee4:	080073b1 	.word	0x080073b1
 8006ee8:	080071f9 	.word	0x080071f9
 8006eec:	08007041 	.word	0x08007041

08006ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b095      	sub	sp, #84	; 0x54
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
 8006f18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e3      	bne.n	8006f2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d118      	bne.n	8006f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	613b      	str	r3, [r7, #16]
   return(result);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fb0:	bf00      	nop
 8006fb2:	3754      	adds	r7, #84	; 0x54
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff f9fa 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6979      	ldr	r1, [r7, #20]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	613b      	str	r3, [r7, #16]
   return(result);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e6      	bne.n	8006ff0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff f9c5 	bl	80063c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007036:	bf00      	nop
 8007038:	3720      	adds	r7, #32
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b09c      	sub	sp, #112	; 0x70
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800704e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007058:	2b22      	cmp	r3, #34	; 0x22
 800705a:	f040 80be 	bne.w	80071da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007068:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800706c:	b2d9      	uxtb	r1, r3
 800706e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007072:	b2da      	uxtb	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	400a      	ands	r2, r1
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 80a1 	bne.w	80071ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	667b      	str	r3, [r7, #100]	; 0x64
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070fa:	647a      	str	r2, [r7, #68]	; 0x44
 80070fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a33      	ldr	r2, [pc, #204]	; (80071f4 <UART_RxISR_8BIT+0x1b4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d01f      	beq.n	800716c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d018      	beq.n	800716c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	623b      	str	r3, [r7, #32]
   return(result);
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800714e:	663b      	str	r3, [r7, #96]	; 0x60
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007158:	633b      	str	r3, [r7, #48]	; 0x30
 800715a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800715e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d12e      	bne.n	80071d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60fb      	str	r3, [r7, #12]
   return(result);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	617b      	str	r3, [r7, #20]
   return(result);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e6      	bne.n	800717a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d103      	bne.n	80071c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2210      	movs	r2, #16
 80071c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff f90c 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071d0:	e00b      	b.n	80071ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fc f90a 	bl	80033ec <HAL_UART_RxCpltCallback>
}
 80071d8:	e007      	b.n	80071ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	699a      	ldr	r2, [r3, #24]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0208 	orr.w	r2, r2, #8
 80071e8:	619a      	str	r2, [r3, #24]
}
 80071ea:	bf00      	nop
 80071ec:	3770      	adds	r7, #112	; 0x70
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40008000 	.word	0x40008000

080071f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b09c      	sub	sp, #112	; 0x70
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007206:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007210:	2b22      	cmp	r3, #34	; 0x22
 8007212:	f040 80be 	bne.w	8007392 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007224:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007226:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800722a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800722e:	4013      	ands	r3, r2
 8007230:	b29a      	uxth	r2, r3
 8007232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007234:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	1c9a      	adds	r2, r3, #2
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 80a1 	bne.w	80073a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800726e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007274:	667b      	str	r3, [r7, #100]	; 0x64
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800727e:	657b      	str	r3, [r7, #84]	; 0x54
 8007280:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800728c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e6      	bne.n	8007260 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	663b      	str	r3, [r7, #96]	; 0x60
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072b2:	643a      	str	r2, [r7, #64]	; 0x40
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a33      	ldr	r2, [pc, #204]	; (80073ac <UART_RxISR_16BIT+0x1b4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d01f      	beq.n	8007324 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007312:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e6      	bne.n	80072f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d12e      	bne.n	800738a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 0310 	bic.w	r3, r3, #16
 8007346:	65bb      	str	r3, [r7, #88]	; 0x58
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	613b      	str	r3, [r7, #16]
   return(result);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e6      	bne.n	8007332 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	2b10      	cmp	r3, #16
 8007370:	d103      	bne.n	800737a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2210      	movs	r2, #16
 8007378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff f830 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007388:	e00b      	b.n	80073a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fc f82e 	bl	80033ec <HAL_UART_RxCpltCallback>
}
 8007390:	e007      	b.n	80073a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0208 	orr.w	r2, r2, #8
 80073a0:	619a      	str	r2, [r3, #24]
}
 80073a2:	bf00      	nop
 80073a4:	3770      	adds	r7, #112	; 0x70
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40008000 	.word	0x40008000

080073b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b0ac      	sub	sp, #176	; 0xb0
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e6:	2b22      	cmp	r3, #34	; 0x22
 80073e8:	f040 8182 	bne.w	80076f0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073f6:	e125      	b.n	8007644 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007402:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007406:	b2d9      	uxtb	r1, r3
 8007408:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800740c:	b2da      	uxtb	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007412:	400a      	ands	r2, r1
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d053      	beq.n	80074f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800744a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2201      	movs	r2, #1
 8007468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	f043 0201 	orr.w	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800747a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d011      	beq.n	80074aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2202      	movs	r2, #2
 8007498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a0:	f043 0204 	orr.w	r2, r3, #4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d0:	f043 0202 	orr.w	r2, r3, #2
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fe ff75 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80a2 	bne.w	8007644 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007522:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007524:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007528:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e4      	bne.n	8007500 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800755e:	66ba      	str	r2, [r7, #104]	; 0x68
 8007560:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007564:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800756c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e1      	bne.n	8007536 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a5f      	ldr	r2, [pc, #380]	; (8007708 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d021      	beq.n	80075d4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01a      	beq.n	80075d4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075c0:	657b      	str	r3, [r7, #84]	; 0x54
 80075c2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e4      	bne.n	800759e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d130      	bne.n	800763e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	f023 0310 	bic.w	r3, r3, #16
 80075f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007604:	643b      	str	r3, [r7, #64]	; 0x40
 8007606:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800760a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e4      	bne.n	80075e2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b10      	cmp	r3, #16
 8007624:	d103      	bne.n	800762e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2210      	movs	r2, #16
 800762c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fe fed6 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
 800763c:	e002      	b.n	8007644 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb fed4 	bl	80033ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007644:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800764c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b00      	cmp	r3, #0
 8007656:	f47f aecf 	bne.w	80073f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007660:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007664:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007668:	2b00      	cmp	r3, #0
 800766a:	d049      	beq.n	8007700 <UART_RxISR_8BIT_FIFOEN+0x350>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007672:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007676:	429a      	cmp	r2, r3
 8007678:	d242      	bcs.n	8007700 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3308      	adds	r3, #8
 8007680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	61fb      	str	r3, [r7, #28]
   return(result);
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800769e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e3      	bne.n	800767a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f043 0320 	orr.w	r3, r3, #32
 80076cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	613b      	str	r3, [r7, #16]
   return(result);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e4      	bne.n	80076b8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ee:	e007      	b.n	8007700 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0208 	orr.w	r2, r2, #8
 80076fe:	619a      	str	r2, [r3, #24]
}
 8007700:	bf00      	nop
 8007702:	37b0      	adds	r7, #176	; 0xb0
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40008000 	.word	0x40008000
 800770c:	08007041 	.word	0x08007041

08007710 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b0ae      	sub	sp, #184	; 0xb8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800771e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	2b22      	cmp	r3, #34	; 0x22
 8007748:	f040 8186 	bne.w	8007a58 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007752:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007756:	e129      	b.n	80079ac <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800776a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800776e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007772:	4013      	ands	r3, r2
 8007774:	b29a      	uxth	r2, r3
 8007776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800777a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007780:	1c9a      	adds	r2, r3, #2
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d053      	beq.n	8007856 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d011      	beq.n	80077de <UART_RxISR_16BIT_FIFOEN+0xce>
 80077ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2201      	movs	r2, #1
 80077cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d4:	f043 0201 	orr.w	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d011      	beq.n	800780e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80077ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2202      	movs	r2, #2
 80077fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007804:	f043 0204 	orr.w	r2, r3, #4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800780e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d011      	beq.n	800783e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800781a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2204      	movs	r2, #4
 800782c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007834:	f043 0202 	orr.w	r2, r3, #2
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7fe fdc3 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	f040 80a4 	bne.w	80079ac <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800788a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800788e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e2      	bne.n	8007864 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80078c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e1      	bne.n	800789e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a5f      	ldr	r2, [pc, #380]	; (8007a70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d021      	beq.n	800793c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01a      	beq.n	800793c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800791a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007928:	65bb      	str	r3, [r7, #88]	; 0x58
 800792a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800792e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e4      	bne.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d130      	bne.n	80079a6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	f023 0310 	bic.w	r3, r3, #16
 800795e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800796c:	647b      	str	r3, [r7, #68]	; 0x44
 800796e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800797a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e4      	bne.n	800794a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	2b10      	cmp	r3, #16
 800798c:	d103      	bne.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2210      	movs	r2, #16
 8007994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fe fd22 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
 80079a4:	e002      	b.n	80079ac <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fb fd20 	bl	80033ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079ac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d006      	beq.n	80079c2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80079b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f47f aecb 	bne.w	8007758 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d049      	beq.n	8007a68 <UART_RxISR_16BIT_FIFOEN+0x358>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079da:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80079de:	429a      	cmp	r2, r3
 80079e0:	d242      	bcs.n	8007a68 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	623b      	str	r3, [r7, #32]
   return(result);
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3308      	adds	r3, #8
 8007a02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a06:	633a      	str	r2, [r7, #48]	; 0x30
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e3      	bne.n	80079e2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f043 0320 	orr.w	r3, r3, #32
 8007a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	69b9      	ldr	r1, [r7, #24]
 8007a48:	69fa      	ldr	r2, [r7, #28]
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e4      	bne.n	8007a20 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a56:	e007      	b.n	8007a68 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0208 	orr.w	r2, r2, #8
 8007a66:	619a      	str	r2, [r3, #24]
}
 8007a68:	bf00      	nop
 8007a6a:	37b8      	adds	r7, #184	; 0xb8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40008000 	.word	0x40008000
 8007a74:	080071f9 	.word	0x080071f9

08007a78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UARTEx_DisableFifoMode+0x16>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e027      	b.n	8007b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2224      	movs	r2, #36	; 0x24
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e02d      	b.n	8007b9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2224      	movs	r2, #36	; 0x24
 8007b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f850 	bl	8007c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e02d      	b.n	8007c16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2224      	movs	r2, #36	; 0x24
 8007bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f812 	bl	8007c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d108      	bne.n	8007c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c40:	e031      	b.n	8007ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c42:	2308      	movs	r3, #8
 8007c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c46:	2308      	movs	r3, #8
 8007c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	0e5b      	lsrs	r3, r3, #25
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	0f5b      	lsrs	r3, r3, #29
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	7b3a      	ldrb	r2, [r7, #12]
 8007c6e:	4911      	ldr	r1, [pc, #68]	; (8007cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8007c70:	5c8a      	ldrb	r2, [r1, r2]
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c76:	7b3a      	ldrb	r2, [r7, #12]
 8007c78:	490f      	ldr	r1, [pc, #60]	; (8007cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8007c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	7b7a      	ldrb	r2, [r7, #13]
 8007c8c:	4909      	ldr	r1, [pc, #36]	; (8007cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8007c8e:	5c8a      	ldrb	r2, [r1, r2]
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c94:	7b7a      	ldrb	r2, [r7, #13]
 8007c96:	4908      	ldr	r1, [pc, #32]	; (8007cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8007c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	0800ed20 	.word	0x0800ed20
 8007cb8:	0800ed28 	.word	0x0800ed28

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	; (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	2000000c 	.word	0x2000000c

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	; (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	; (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	; (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	; (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f005 fb6a 	bl	800d3b4 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	0800f620 	.word	0x0800f620
 8007d04:	0800f620 	.word	0x0800f620
 8007d08:	0800f620 	.word	0x0800f620
 8007d0c:	0800f624 	.word	0x0800f624

08007d10 <memset>:
 8007d10:	4402      	add	r2, r0
 8007d12:	4603      	mov	r3, r0
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d100      	bne.n	8007d1a <memset+0xa>
 8007d18:	4770      	bx	lr
 8007d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1e:	e7f9      	b.n	8007d14 <memset+0x4>

08007d20 <__cvt>:
 8007d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	ec55 4b10 	vmov	r4, r5, d0
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	462b      	mov	r3, r5
 8007d30:	bfbb      	ittet	lt
 8007d32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d36:	461d      	movlt	r5, r3
 8007d38:	2300      	movge	r3, #0
 8007d3a:	232d      	movlt	r3, #45	; 0x2d
 8007d3c:	700b      	strb	r3, [r1, #0]
 8007d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d44:	4691      	mov	r9, r2
 8007d46:	f023 0820 	bic.w	r8, r3, #32
 8007d4a:	bfbc      	itt	lt
 8007d4c:	4622      	movlt	r2, r4
 8007d4e:	4614      	movlt	r4, r2
 8007d50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d54:	d005      	beq.n	8007d62 <__cvt+0x42>
 8007d56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d5a:	d100      	bne.n	8007d5e <__cvt+0x3e>
 8007d5c:	3601      	adds	r6, #1
 8007d5e:	2102      	movs	r1, #2
 8007d60:	e000      	b.n	8007d64 <__cvt+0x44>
 8007d62:	2103      	movs	r1, #3
 8007d64:	ab03      	add	r3, sp, #12
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	ab02      	add	r3, sp, #8
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	ec45 4b10 	vmov	d0, r4, r5
 8007d70:	4653      	mov	r3, sl
 8007d72:	4632      	mov	r2, r6
 8007d74:	f001 ffc4 	bl	8009d00 <_dtoa_r>
 8007d78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	d102      	bne.n	8007d86 <__cvt+0x66>
 8007d80:	f019 0f01 	tst.w	r9, #1
 8007d84:	d022      	beq.n	8007dcc <__cvt+0xac>
 8007d86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d8a:	eb07 0906 	add.w	r9, r7, r6
 8007d8e:	d110      	bne.n	8007db2 <__cvt+0x92>
 8007d90:	783b      	ldrb	r3, [r7, #0]
 8007d92:	2b30      	cmp	r3, #48	; 0x30
 8007d94:	d10a      	bne.n	8007dac <__cvt+0x8c>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 fecb 	bl	8000b38 <__aeabi_dcmpeq>
 8007da2:	b918      	cbnz	r0, 8007dac <__cvt+0x8c>
 8007da4:	f1c6 0601 	rsb	r6, r6, #1
 8007da8:	f8ca 6000 	str.w	r6, [sl]
 8007dac:	f8da 3000 	ldr.w	r3, [sl]
 8007db0:	4499      	add	r9, r3
 8007db2:	2200      	movs	r2, #0
 8007db4:	2300      	movs	r3, #0
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 febd 	bl	8000b38 <__aeabi_dcmpeq>
 8007dbe:	b108      	cbz	r0, 8007dc4 <__cvt+0xa4>
 8007dc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dc4:	2230      	movs	r2, #48	; 0x30
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	454b      	cmp	r3, r9
 8007dca:	d307      	bcc.n	8007ddc <__cvt+0xbc>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dd0:	1bdb      	subs	r3, r3, r7
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	b004      	add	sp, #16
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	1c59      	adds	r1, r3, #1
 8007dde:	9103      	str	r1, [sp, #12]
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e7f0      	b.n	8007dc6 <__cvt+0xa6>

08007de4 <__exponent>:
 8007de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007de6:	4603      	mov	r3, r0
 8007de8:	2900      	cmp	r1, #0
 8007dea:	bfb8      	it	lt
 8007dec:	4249      	neglt	r1, r1
 8007dee:	f803 2b02 	strb.w	r2, [r3], #2
 8007df2:	bfb4      	ite	lt
 8007df4:	222d      	movlt	r2, #45	; 0x2d
 8007df6:	222b      	movge	r2, #43	; 0x2b
 8007df8:	2909      	cmp	r1, #9
 8007dfa:	7042      	strb	r2, [r0, #1]
 8007dfc:	dd2a      	ble.n	8007e54 <__exponent+0x70>
 8007dfe:	f10d 0407 	add.w	r4, sp, #7
 8007e02:	46a4      	mov	ip, r4
 8007e04:	270a      	movs	r7, #10
 8007e06:	46a6      	mov	lr, r4
 8007e08:	460a      	mov	r2, r1
 8007e0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e0e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e12:	3530      	adds	r5, #48	; 0x30
 8007e14:	2a63      	cmp	r2, #99	; 0x63
 8007e16:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e1e:	4631      	mov	r1, r6
 8007e20:	dcf1      	bgt.n	8007e06 <__exponent+0x22>
 8007e22:	3130      	adds	r1, #48	; 0x30
 8007e24:	f1ae 0502 	sub.w	r5, lr, #2
 8007e28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e2c:	1c44      	adds	r4, r0, #1
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4561      	cmp	r1, ip
 8007e32:	d30a      	bcc.n	8007e4a <__exponent+0x66>
 8007e34:	f10d 0209 	add.w	r2, sp, #9
 8007e38:	eba2 020e 	sub.w	r2, r2, lr
 8007e3c:	4565      	cmp	r5, ip
 8007e3e:	bf88      	it	hi
 8007e40:	2200      	movhi	r2, #0
 8007e42:	4413      	add	r3, r2
 8007e44:	1a18      	subs	r0, r3, r0
 8007e46:	b003      	add	sp, #12
 8007e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e52:	e7ed      	b.n	8007e30 <__exponent+0x4c>
 8007e54:	2330      	movs	r3, #48	; 0x30
 8007e56:	3130      	adds	r1, #48	; 0x30
 8007e58:	7083      	strb	r3, [r0, #2]
 8007e5a:	70c1      	strb	r1, [r0, #3]
 8007e5c:	1d03      	adds	r3, r0, #4
 8007e5e:	e7f1      	b.n	8007e44 <__exponent+0x60>

08007e60 <_printf_float>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	ed2d 8b02 	vpush	{d8}
 8007e68:	b08d      	sub	sp, #52	; 0x34
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e70:	4616      	mov	r6, r2
 8007e72:	461f      	mov	r7, r3
 8007e74:	4605      	mov	r5, r0
 8007e76:	f003 fa67 	bl	800b348 <_localeconv_r>
 8007e7a:	f8d0 a000 	ldr.w	sl, [r0]
 8007e7e:	4650      	mov	r0, sl
 8007e80:	f7f8 f9d8 	bl	8000234 <strlen>
 8007e84:	2300      	movs	r3, #0
 8007e86:	930a      	str	r3, [sp, #40]	; 0x28
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e94:	3307      	adds	r3, #7
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	f103 0208 	add.w	r2, r3, #8
 8007e9e:	f8c8 2000 	str.w	r2, [r8]
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007eaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007eae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eb2:	9307      	str	r3, [sp, #28]
 8007eb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007eb8:	ee08 0a10 	vmov	s16, r0
 8007ebc:	4b9f      	ldr	r3, [pc, #636]	; (800813c <_printf_float+0x2dc>)
 8007ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	f7f8 fe69 	bl	8000b9c <__aeabi_dcmpun>
 8007eca:	bb88      	cbnz	r0, 8007f30 <_printf_float+0xd0>
 8007ecc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ed0:	4b9a      	ldr	r3, [pc, #616]	; (800813c <_printf_float+0x2dc>)
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed6:	f7f8 fe43 	bl	8000b60 <__aeabi_dcmple>
 8007eda:	bb48      	cbnz	r0, 8007f30 <_printf_float+0xd0>
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe32 	bl	8000b4c <__aeabi_dcmplt>
 8007ee8:	b110      	cbz	r0, 8007ef0 <_printf_float+0x90>
 8007eea:	232d      	movs	r3, #45	; 0x2d
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef0:	4b93      	ldr	r3, [pc, #588]	; (8008140 <_printf_float+0x2e0>)
 8007ef2:	4894      	ldr	r0, [pc, #592]	; (8008144 <_printf_float+0x2e4>)
 8007ef4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ef8:	bf94      	ite	ls
 8007efa:	4698      	movls	r8, r3
 8007efc:	4680      	movhi	r8, r0
 8007efe:	2303      	movs	r3, #3
 8007f00:	6123      	str	r3, [r4, #16]
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	f023 0204 	bic.w	r2, r3, #4
 8007f08:	6022      	str	r2, [r4, #0]
 8007f0a:	f04f 0900 	mov.w	r9, #0
 8007f0e:	9700      	str	r7, [sp, #0]
 8007f10:	4633      	mov	r3, r6
 8007f12:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f9d8 	bl	80082cc <_printf_common>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	f040 8090 	bne.w	8008042 <_printf_float+0x1e2>
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	b00d      	add	sp, #52	; 0x34
 8007f28:	ecbd 8b02 	vpop	{d8}
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	4642      	mov	r2, r8
 8007f32:	464b      	mov	r3, r9
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 fe30 	bl	8000b9c <__aeabi_dcmpun>
 8007f3c:	b140      	cbz	r0, 8007f50 <_printf_float+0xf0>
 8007f3e:	464b      	mov	r3, r9
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bfbc      	itt	lt
 8007f44:	232d      	movlt	r3, #45	; 0x2d
 8007f46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f4a:	487f      	ldr	r0, [pc, #508]	; (8008148 <_printf_float+0x2e8>)
 8007f4c:	4b7f      	ldr	r3, [pc, #508]	; (800814c <_printf_float+0x2ec>)
 8007f4e:	e7d1      	b.n	8007ef4 <_printf_float+0x94>
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f56:	9206      	str	r2, [sp, #24]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	d13f      	bne.n	8007fdc <_printf_float+0x17c>
 8007f5c:	2306      	movs	r3, #6
 8007f5e:	6063      	str	r3, [r4, #4]
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	6861      	ldr	r1, [r4, #4]
 8007f64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	ab0a      	add	r3, sp, #40	; 0x28
 8007f6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f72:	ab09      	add	r3, sp, #36	; 0x24
 8007f74:	ec49 8b10 	vmov	d0, r8, r9
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	6022      	str	r2, [r4, #0]
 8007f7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f80:	4628      	mov	r0, r5
 8007f82:	f7ff fecd 	bl	8007d20 <__cvt>
 8007f86:	9b06      	ldr	r3, [sp, #24]
 8007f88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f8a:	2b47      	cmp	r3, #71	; 0x47
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	d108      	bne.n	8007fa2 <_printf_float+0x142>
 8007f90:	1cc8      	adds	r0, r1, #3
 8007f92:	db02      	blt.n	8007f9a <_printf_float+0x13a>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	4299      	cmp	r1, r3
 8007f98:	dd41      	ble.n	800801e <_printf_float+0x1be>
 8007f9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f9e:	fa5f fb8b 	uxtb.w	fp, fp
 8007fa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fa6:	d820      	bhi.n	8007fea <_printf_float+0x18a>
 8007fa8:	3901      	subs	r1, #1
 8007faa:	465a      	mov	r2, fp
 8007fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8007fb2:	f7ff ff17 	bl	8007de4 <__exponent>
 8007fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb8:	1813      	adds	r3, r2, r0
 8007fba:	2a01      	cmp	r2, #1
 8007fbc:	4681      	mov	r9, r0
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	dc02      	bgt.n	8007fc8 <_printf_float+0x168>
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	07d2      	lsls	r2, r2, #31
 8007fc6:	d501      	bpl.n	8007fcc <_printf_float+0x16c>
 8007fc8:	3301      	adds	r3, #1
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d09c      	beq.n	8007f0e <_printf_float+0xae>
 8007fd4:	232d      	movs	r3, #45	; 0x2d
 8007fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fda:	e798      	b.n	8007f0e <_printf_float+0xae>
 8007fdc:	9a06      	ldr	r2, [sp, #24]
 8007fde:	2a47      	cmp	r2, #71	; 0x47
 8007fe0:	d1be      	bne.n	8007f60 <_printf_float+0x100>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1bc      	bne.n	8007f60 <_printf_float+0x100>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e7b9      	b.n	8007f5e <_printf_float+0xfe>
 8007fea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fee:	d118      	bne.n	8008022 <_printf_float+0x1c2>
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	6863      	ldr	r3, [r4, #4]
 8007ff4:	dd0b      	ble.n	800800e <_printf_float+0x1ae>
 8007ff6:	6121      	str	r1, [r4, #16]
 8007ff8:	b913      	cbnz	r3, 8008000 <_printf_float+0x1a0>
 8007ffa:	6822      	ldr	r2, [r4, #0]
 8007ffc:	07d0      	lsls	r0, r2, #31
 8007ffe:	d502      	bpl.n	8008006 <_printf_float+0x1a6>
 8008000:	3301      	adds	r3, #1
 8008002:	440b      	add	r3, r1
 8008004:	6123      	str	r3, [r4, #16]
 8008006:	65a1      	str	r1, [r4, #88]	; 0x58
 8008008:	f04f 0900 	mov.w	r9, #0
 800800c:	e7de      	b.n	8007fcc <_printf_float+0x16c>
 800800e:	b913      	cbnz	r3, 8008016 <_printf_float+0x1b6>
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	07d2      	lsls	r2, r2, #31
 8008014:	d501      	bpl.n	800801a <_printf_float+0x1ba>
 8008016:	3302      	adds	r3, #2
 8008018:	e7f4      	b.n	8008004 <_printf_float+0x1a4>
 800801a:	2301      	movs	r3, #1
 800801c:	e7f2      	b.n	8008004 <_printf_float+0x1a4>
 800801e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008024:	4299      	cmp	r1, r3
 8008026:	db05      	blt.n	8008034 <_printf_float+0x1d4>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	6121      	str	r1, [r4, #16]
 800802c:	07d8      	lsls	r0, r3, #31
 800802e:	d5ea      	bpl.n	8008006 <_printf_float+0x1a6>
 8008030:	1c4b      	adds	r3, r1, #1
 8008032:	e7e7      	b.n	8008004 <_printf_float+0x1a4>
 8008034:	2900      	cmp	r1, #0
 8008036:	bfd4      	ite	le
 8008038:	f1c1 0202 	rsble	r2, r1, #2
 800803c:	2201      	movgt	r2, #1
 800803e:	4413      	add	r3, r2
 8008040:	e7e0      	b.n	8008004 <_printf_float+0x1a4>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	055a      	lsls	r2, r3, #21
 8008046:	d407      	bmi.n	8008058 <_printf_float+0x1f8>
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	4642      	mov	r2, r8
 800804c:	4631      	mov	r1, r6
 800804e:	4628      	mov	r0, r5
 8008050:	47b8      	blx	r7
 8008052:	3001      	adds	r0, #1
 8008054:	d12c      	bne.n	80080b0 <_printf_float+0x250>
 8008056:	e764      	b.n	8007f22 <_printf_float+0xc2>
 8008058:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800805c:	f240 80e0 	bls.w	8008220 <_printf_float+0x3c0>
 8008060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008064:	2200      	movs	r2, #0
 8008066:	2300      	movs	r3, #0
 8008068:	f7f8 fd66 	bl	8000b38 <__aeabi_dcmpeq>
 800806c:	2800      	cmp	r0, #0
 800806e:	d034      	beq.n	80080da <_printf_float+0x27a>
 8008070:	4a37      	ldr	r2, [pc, #220]	; (8008150 <_printf_float+0x2f0>)
 8008072:	2301      	movs	r3, #1
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f af51 	beq.w	8007f22 <_printf_float+0xc2>
 8008080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008084:	429a      	cmp	r2, r3
 8008086:	db02      	blt.n	800808e <_printf_float+0x22e>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	07d8      	lsls	r0, r3, #31
 800808c:	d510      	bpl.n	80080b0 <_printf_float+0x250>
 800808e:	ee18 3a10 	vmov	r3, s16
 8008092:	4652      	mov	r2, sl
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f af41 	beq.w	8007f22 <_printf_float+0xc2>
 80080a0:	f04f 0800 	mov.w	r8, #0
 80080a4:	f104 091a 	add.w	r9, r4, #26
 80080a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080aa:	3b01      	subs	r3, #1
 80080ac:	4543      	cmp	r3, r8
 80080ae:	dc09      	bgt.n	80080c4 <_printf_float+0x264>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	079b      	lsls	r3, r3, #30
 80080b4:	f100 8105 	bmi.w	80082c2 <_printf_float+0x462>
 80080b8:	68e0      	ldr	r0, [r4, #12]
 80080ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080bc:	4298      	cmp	r0, r3
 80080be:	bfb8      	it	lt
 80080c0:	4618      	movlt	r0, r3
 80080c2:	e730      	b.n	8007f26 <_printf_float+0xc6>
 80080c4:	2301      	movs	r3, #1
 80080c6:	464a      	mov	r2, r9
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af27 	beq.w	8007f22 <_printf_float+0xc2>
 80080d4:	f108 0801 	add.w	r8, r8, #1
 80080d8:	e7e6      	b.n	80080a8 <_printf_float+0x248>
 80080da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dc39      	bgt.n	8008154 <_printf_float+0x2f4>
 80080e0:	4a1b      	ldr	r2, [pc, #108]	; (8008150 <_printf_float+0x2f0>)
 80080e2:	2301      	movs	r3, #1
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f af19 	beq.w	8007f22 <_printf_float+0xc2>
 80080f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080f4:	4313      	orrs	r3, r2
 80080f6:	d102      	bne.n	80080fe <_printf_float+0x29e>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	07d9      	lsls	r1, r3, #31
 80080fc:	d5d8      	bpl.n	80080b0 <_printf_float+0x250>
 80080fe:	ee18 3a10 	vmov	r3, s16
 8008102:	4652      	mov	r2, sl
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f af09 	beq.w	8007f22 <_printf_float+0xc2>
 8008110:	f04f 0900 	mov.w	r9, #0
 8008114:	f104 0a1a 	add.w	sl, r4, #26
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	425b      	negs	r3, r3
 800811c:	454b      	cmp	r3, r9
 800811e:	dc01      	bgt.n	8008124 <_printf_float+0x2c4>
 8008120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008122:	e792      	b.n	800804a <_printf_float+0x1ea>
 8008124:	2301      	movs	r3, #1
 8008126:	4652      	mov	r2, sl
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f aef7 	beq.w	8007f22 <_printf_float+0xc2>
 8008134:	f109 0901 	add.w	r9, r9, #1
 8008138:	e7ee      	b.n	8008118 <_printf_float+0x2b8>
 800813a:	bf00      	nop
 800813c:	7fefffff 	.word	0x7fefffff
 8008140:	0800ed34 	.word	0x0800ed34
 8008144:	0800ed38 	.word	0x0800ed38
 8008148:	0800ed40 	.word	0x0800ed40
 800814c:	0800ed3c 	.word	0x0800ed3c
 8008150:	0800ed44 	.word	0x0800ed44
 8008154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008158:	429a      	cmp	r2, r3
 800815a:	bfa8      	it	ge
 800815c:	461a      	movge	r2, r3
 800815e:	2a00      	cmp	r2, #0
 8008160:	4691      	mov	r9, r2
 8008162:	dc37      	bgt.n	80081d4 <_printf_float+0x374>
 8008164:	f04f 0b00 	mov.w	fp, #0
 8008168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800816c:	f104 021a 	add.w	r2, r4, #26
 8008170:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	eba3 0309 	sub.w	r3, r3, r9
 8008178:	455b      	cmp	r3, fp
 800817a:	dc33      	bgt.n	80081e4 <_printf_float+0x384>
 800817c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008180:	429a      	cmp	r2, r3
 8008182:	db3b      	blt.n	80081fc <_printf_float+0x39c>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	07da      	lsls	r2, r3, #31
 8008188:	d438      	bmi.n	80081fc <_printf_float+0x39c>
 800818a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	eba2 0901 	sub.w	r9, r2, r1
 8008196:	4599      	cmp	r9, r3
 8008198:	bfa8      	it	ge
 800819a:	4699      	movge	r9, r3
 800819c:	f1b9 0f00 	cmp.w	r9, #0
 80081a0:	dc35      	bgt.n	800820e <_printf_float+0x3ae>
 80081a2:	f04f 0800 	mov.w	r8, #0
 80081a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081aa:	f104 0a1a 	add.w	sl, r4, #26
 80081ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	eba3 0309 	sub.w	r3, r3, r9
 80081b8:	4543      	cmp	r3, r8
 80081ba:	f77f af79 	ble.w	80080b0 <_printf_float+0x250>
 80081be:	2301      	movs	r3, #1
 80081c0:	4652      	mov	r2, sl
 80081c2:	4631      	mov	r1, r6
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b8      	blx	r7
 80081c8:	3001      	adds	r0, #1
 80081ca:	f43f aeaa 	beq.w	8007f22 <_printf_float+0xc2>
 80081ce:	f108 0801 	add.w	r8, r8, #1
 80081d2:	e7ec      	b.n	80081ae <_printf_float+0x34e>
 80081d4:	4613      	mov	r3, r2
 80081d6:	4631      	mov	r1, r6
 80081d8:	4642      	mov	r2, r8
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	d1c0      	bne.n	8008164 <_printf_float+0x304>
 80081e2:	e69e      	b.n	8007f22 <_printf_float+0xc2>
 80081e4:	2301      	movs	r3, #1
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	9205      	str	r2, [sp, #20]
 80081ec:	47b8      	blx	r7
 80081ee:	3001      	adds	r0, #1
 80081f0:	f43f ae97 	beq.w	8007f22 <_printf_float+0xc2>
 80081f4:	9a05      	ldr	r2, [sp, #20]
 80081f6:	f10b 0b01 	add.w	fp, fp, #1
 80081fa:	e7b9      	b.n	8008170 <_printf_float+0x310>
 80081fc:	ee18 3a10 	vmov	r3, s16
 8008200:	4652      	mov	r2, sl
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	d1be      	bne.n	800818a <_printf_float+0x32a>
 800820c:	e689      	b.n	8007f22 <_printf_float+0xc2>
 800820e:	9a05      	ldr	r2, [sp, #20]
 8008210:	464b      	mov	r3, r9
 8008212:	4442      	add	r2, r8
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	d1c1      	bne.n	80081a2 <_printf_float+0x342>
 800821e:	e680      	b.n	8007f22 <_printf_float+0xc2>
 8008220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008222:	2a01      	cmp	r2, #1
 8008224:	dc01      	bgt.n	800822a <_printf_float+0x3ca>
 8008226:	07db      	lsls	r3, r3, #31
 8008228:	d538      	bpl.n	800829c <_printf_float+0x43c>
 800822a:	2301      	movs	r3, #1
 800822c:	4642      	mov	r2, r8
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f ae74 	beq.w	8007f22 <_printf_float+0xc2>
 800823a:	ee18 3a10 	vmov	r3, s16
 800823e:	4652      	mov	r2, sl
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	47b8      	blx	r7
 8008246:	3001      	adds	r0, #1
 8008248:	f43f ae6b 	beq.w	8007f22 <_printf_float+0xc2>
 800824c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	f7f8 fc70 	bl	8000b38 <__aeabi_dcmpeq>
 8008258:	b9d8      	cbnz	r0, 8008292 <_printf_float+0x432>
 800825a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825c:	f108 0201 	add.w	r2, r8, #1
 8008260:	3b01      	subs	r3, #1
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	d10e      	bne.n	800828a <_printf_float+0x42a>
 800826c:	e659      	b.n	8007f22 <_printf_float+0xc2>
 800826e:	2301      	movs	r3, #1
 8008270:	4652      	mov	r2, sl
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	f43f ae52 	beq.w	8007f22 <_printf_float+0xc2>
 800827e:	f108 0801 	add.w	r8, r8, #1
 8008282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008284:	3b01      	subs	r3, #1
 8008286:	4543      	cmp	r3, r8
 8008288:	dcf1      	bgt.n	800826e <_printf_float+0x40e>
 800828a:	464b      	mov	r3, r9
 800828c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008290:	e6dc      	b.n	800804c <_printf_float+0x1ec>
 8008292:	f04f 0800 	mov.w	r8, #0
 8008296:	f104 0a1a 	add.w	sl, r4, #26
 800829a:	e7f2      	b.n	8008282 <_printf_float+0x422>
 800829c:	2301      	movs	r3, #1
 800829e:	4642      	mov	r2, r8
 80082a0:	e7df      	b.n	8008262 <_printf_float+0x402>
 80082a2:	2301      	movs	r3, #1
 80082a4:	464a      	mov	r2, r9
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f ae38 	beq.w	8007f22 <_printf_float+0xc2>
 80082b2:	f108 0801 	add.w	r8, r8, #1
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ba:	1a5b      	subs	r3, r3, r1
 80082bc:	4543      	cmp	r3, r8
 80082be:	dcf0      	bgt.n	80082a2 <_printf_float+0x442>
 80082c0:	e6fa      	b.n	80080b8 <_printf_float+0x258>
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f104 0919 	add.w	r9, r4, #25
 80082ca:	e7f4      	b.n	80082b6 <_printf_float+0x456>

080082cc <_printf_common>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	4616      	mov	r6, r2
 80082d2:	4699      	mov	r9, r3
 80082d4:	688a      	ldr	r2, [r1, #8]
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082dc:	4293      	cmp	r3, r2
 80082de:	bfb8      	it	lt
 80082e0:	4613      	movlt	r3, r2
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b10a      	cbz	r2, 80082f2 <_printf_common+0x26>
 80082ee:	3301      	adds	r3, #1
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	0699      	lsls	r1, r3, #26
 80082f6:	bf42      	ittt	mi
 80082f8:	6833      	ldrmi	r3, [r6, #0]
 80082fa:	3302      	addmi	r3, #2
 80082fc:	6033      	strmi	r3, [r6, #0]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d106      	bne.n	8008314 <_printf_common+0x48>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc26      	bgt.n	8008362 <_printf_common+0x96>
 8008314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008318:	1e13      	subs	r3, r2, #0
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	bf18      	it	ne
 800831e:	2301      	movne	r3, #1
 8008320:	0692      	lsls	r2, r2, #26
 8008322:	d42b      	bmi.n	800837c <_printf_common+0xb0>
 8008324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008328:	4649      	mov	r1, r9
 800832a:	4638      	mov	r0, r7
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d01e      	beq.n	8008370 <_printf_common+0xa4>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	68e5      	ldr	r5, [r4, #12]
 8008336:	6832      	ldr	r2, [r6, #0]
 8008338:	f003 0306 	and.w	r3, r3, #6
 800833c:	2b04      	cmp	r3, #4
 800833e:	bf08      	it	eq
 8008340:	1aad      	subeq	r5, r5, r2
 8008342:	68a3      	ldr	r3, [r4, #8]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	bf0c      	ite	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	2500      	movne	r5, #0
 800834e:	4293      	cmp	r3, r2
 8008350:	bfc4      	itt	gt
 8008352:	1a9b      	subgt	r3, r3, r2
 8008354:	18ed      	addgt	r5, r5, r3
 8008356:	2600      	movs	r6, #0
 8008358:	341a      	adds	r4, #26
 800835a:	42b5      	cmp	r5, r6
 800835c:	d11a      	bne.n	8008394 <_printf_common+0xc8>
 800835e:	2000      	movs	r0, #0
 8008360:	e008      	b.n	8008374 <_printf_common+0xa8>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4649      	mov	r1, r9
 8008368:	4638      	mov	r0, r7
 800836a:	47c0      	blx	r8
 800836c:	3001      	adds	r0, #1
 800836e:	d103      	bne.n	8008378 <_printf_common+0xac>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008378:	3501      	adds	r5, #1
 800837a:	e7c6      	b.n	800830a <_printf_common+0x3e>
 800837c:	18e1      	adds	r1, r4, r3
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	2030      	movs	r0, #48	; 0x30
 8008382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008386:	4422      	add	r2, r4
 8008388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800838c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008390:	3302      	adds	r3, #2
 8008392:	e7c7      	b.n	8008324 <_printf_common+0x58>
 8008394:	2301      	movs	r3, #1
 8008396:	4622      	mov	r2, r4
 8008398:	4649      	mov	r1, r9
 800839a:	4638      	mov	r0, r7
 800839c:	47c0      	blx	r8
 800839e:	3001      	adds	r0, #1
 80083a0:	d0e6      	beq.n	8008370 <_printf_common+0xa4>
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7d9      	b.n	800835a <_printf_common+0x8e>
	...

080083a8 <_printf_i>:
 80083a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	4691      	mov	r9, r2
 80083b0:	7e27      	ldrb	r7, [r4, #24]
 80083b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083b4:	2f78      	cmp	r7, #120	; 0x78
 80083b6:	4680      	mov	r8, r0
 80083b8:	469a      	mov	sl, r3
 80083ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083be:	d807      	bhi.n	80083d0 <_printf_i+0x28>
 80083c0:	2f62      	cmp	r7, #98	; 0x62
 80083c2:	d80a      	bhi.n	80083da <_printf_i+0x32>
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	f000 80d8 	beq.w	800857a <_printf_i+0x1d2>
 80083ca:	2f58      	cmp	r7, #88	; 0x58
 80083cc:	f000 80a3 	beq.w	8008516 <_printf_i+0x16e>
 80083d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083d8:	e03a      	b.n	8008450 <_printf_i+0xa8>
 80083da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083de:	2b15      	cmp	r3, #21
 80083e0:	d8f6      	bhi.n	80083d0 <_printf_i+0x28>
 80083e2:	a001      	add	r0, pc, #4	; (adr r0, 80083e8 <_printf_i+0x40>)
 80083e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083e8:	08008441 	.word	0x08008441
 80083ec:	08008455 	.word	0x08008455
 80083f0:	080083d1 	.word	0x080083d1
 80083f4:	080083d1 	.word	0x080083d1
 80083f8:	080083d1 	.word	0x080083d1
 80083fc:	080083d1 	.word	0x080083d1
 8008400:	08008455 	.word	0x08008455
 8008404:	080083d1 	.word	0x080083d1
 8008408:	080083d1 	.word	0x080083d1
 800840c:	080083d1 	.word	0x080083d1
 8008410:	080083d1 	.word	0x080083d1
 8008414:	08008561 	.word	0x08008561
 8008418:	08008485 	.word	0x08008485
 800841c:	08008543 	.word	0x08008543
 8008420:	080083d1 	.word	0x080083d1
 8008424:	080083d1 	.word	0x080083d1
 8008428:	08008583 	.word	0x08008583
 800842c:	080083d1 	.word	0x080083d1
 8008430:	08008485 	.word	0x08008485
 8008434:	080083d1 	.word	0x080083d1
 8008438:	080083d1 	.word	0x080083d1
 800843c:	0800854b 	.word	0x0800854b
 8008440:	680b      	ldr	r3, [r1, #0]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	600a      	str	r2, [r1, #0]
 8008448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800844c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008450:	2301      	movs	r3, #1
 8008452:	e0a3      	b.n	800859c <_printf_i+0x1f4>
 8008454:	6825      	ldr	r5, [r4, #0]
 8008456:	6808      	ldr	r0, [r1, #0]
 8008458:	062e      	lsls	r6, r5, #24
 800845a:	f100 0304 	add.w	r3, r0, #4
 800845e:	d50a      	bpl.n	8008476 <_printf_i+0xce>
 8008460:	6805      	ldr	r5, [r0, #0]
 8008462:	600b      	str	r3, [r1, #0]
 8008464:	2d00      	cmp	r5, #0
 8008466:	da03      	bge.n	8008470 <_printf_i+0xc8>
 8008468:	232d      	movs	r3, #45	; 0x2d
 800846a:	426d      	negs	r5, r5
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008470:	485e      	ldr	r0, [pc, #376]	; (80085ec <_printf_i+0x244>)
 8008472:	230a      	movs	r3, #10
 8008474:	e019      	b.n	80084aa <_printf_i+0x102>
 8008476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800847a:	6805      	ldr	r5, [r0, #0]
 800847c:	600b      	str	r3, [r1, #0]
 800847e:	bf18      	it	ne
 8008480:	b22d      	sxthne	r5, r5
 8008482:	e7ef      	b.n	8008464 <_printf_i+0xbc>
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	1d18      	adds	r0, r3, #4
 800848a:	6008      	str	r0, [r1, #0]
 800848c:	0628      	lsls	r0, r5, #24
 800848e:	d501      	bpl.n	8008494 <_printf_i+0xec>
 8008490:	681d      	ldr	r5, [r3, #0]
 8008492:	e002      	b.n	800849a <_printf_i+0xf2>
 8008494:	0669      	lsls	r1, r5, #25
 8008496:	d5fb      	bpl.n	8008490 <_printf_i+0xe8>
 8008498:	881d      	ldrh	r5, [r3, #0]
 800849a:	4854      	ldr	r0, [pc, #336]	; (80085ec <_printf_i+0x244>)
 800849c:	2f6f      	cmp	r7, #111	; 0x6f
 800849e:	bf0c      	ite	eq
 80084a0:	2308      	moveq	r3, #8
 80084a2:	230a      	movne	r3, #10
 80084a4:	2100      	movs	r1, #0
 80084a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084aa:	6866      	ldr	r6, [r4, #4]
 80084ac:	60a6      	str	r6, [r4, #8]
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	bfa2      	ittt	ge
 80084b2:	6821      	ldrge	r1, [r4, #0]
 80084b4:	f021 0104 	bicge.w	r1, r1, #4
 80084b8:	6021      	strge	r1, [r4, #0]
 80084ba:	b90d      	cbnz	r5, 80084c0 <_printf_i+0x118>
 80084bc:	2e00      	cmp	r6, #0
 80084be:	d04d      	beq.n	800855c <_printf_i+0x1b4>
 80084c0:	4616      	mov	r6, r2
 80084c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084c6:	fb03 5711 	mls	r7, r3, r1, r5
 80084ca:	5dc7      	ldrb	r7, [r0, r7]
 80084cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d0:	462f      	mov	r7, r5
 80084d2:	42bb      	cmp	r3, r7
 80084d4:	460d      	mov	r5, r1
 80084d6:	d9f4      	bls.n	80084c2 <_printf_i+0x11a>
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d10b      	bne.n	80084f4 <_printf_i+0x14c>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	07df      	lsls	r7, r3, #31
 80084e0:	d508      	bpl.n	80084f4 <_printf_i+0x14c>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	6861      	ldr	r1, [r4, #4]
 80084e6:	4299      	cmp	r1, r3
 80084e8:	bfde      	ittt	le
 80084ea:	2330      	movle	r3, #48	; 0x30
 80084ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084f4:	1b92      	subs	r2, r2, r6
 80084f6:	6122      	str	r2, [r4, #16]
 80084f8:	f8cd a000 	str.w	sl, [sp]
 80084fc:	464b      	mov	r3, r9
 80084fe:	aa03      	add	r2, sp, #12
 8008500:	4621      	mov	r1, r4
 8008502:	4640      	mov	r0, r8
 8008504:	f7ff fee2 	bl	80082cc <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	d14c      	bne.n	80085a6 <_printf_i+0x1fe>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b004      	add	sp, #16
 8008512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008516:	4835      	ldr	r0, [pc, #212]	; (80085ec <_printf_i+0x244>)
 8008518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	680e      	ldr	r6, [r1, #0]
 8008520:	061f      	lsls	r7, r3, #24
 8008522:	f856 5b04 	ldr.w	r5, [r6], #4
 8008526:	600e      	str	r6, [r1, #0]
 8008528:	d514      	bpl.n	8008554 <_printf_i+0x1ac>
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	bf44      	itt	mi
 800852e:	f043 0320 	orrmi.w	r3, r3, #32
 8008532:	6023      	strmi	r3, [r4, #0]
 8008534:	b91d      	cbnz	r5, 800853e <_printf_i+0x196>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f023 0320 	bic.w	r3, r3, #32
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	2310      	movs	r3, #16
 8008540:	e7b0      	b.n	80084a4 <_printf_i+0xfc>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	2378      	movs	r3, #120	; 0x78
 800854c:	4828      	ldr	r0, [pc, #160]	; (80085f0 <_printf_i+0x248>)
 800854e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008552:	e7e3      	b.n	800851c <_printf_i+0x174>
 8008554:	065e      	lsls	r6, r3, #25
 8008556:	bf48      	it	mi
 8008558:	b2ad      	uxthmi	r5, r5
 800855a:	e7e6      	b.n	800852a <_printf_i+0x182>
 800855c:	4616      	mov	r6, r2
 800855e:	e7bb      	b.n	80084d8 <_printf_i+0x130>
 8008560:	680b      	ldr	r3, [r1, #0]
 8008562:	6826      	ldr	r6, [r4, #0]
 8008564:	6960      	ldr	r0, [r4, #20]
 8008566:	1d1d      	adds	r5, r3, #4
 8008568:	600d      	str	r5, [r1, #0]
 800856a:	0635      	lsls	r5, r6, #24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	d501      	bpl.n	8008574 <_printf_i+0x1cc>
 8008570:	6018      	str	r0, [r3, #0]
 8008572:	e002      	b.n	800857a <_printf_i+0x1d2>
 8008574:	0671      	lsls	r1, r6, #25
 8008576:	d5fb      	bpl.n	8008570 <_printf_i+0x1c8>
 8008578:	8018      	strh	r0, [r3, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	4616      	mov	r6, r2
 8008580:	e7ba      	b.n	80084f8 <_printf_i+0x150>
 8008582:	680b      	ldr	r3, [r1, #0]
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	600a      	str	r2, [r1, #0]
 8008588:	681e      	ldr	r6, [r3, #0]
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	2100      	movs	r1, #0
 800858e:	4630      	mov	r0, r6
 8008590:	f7f7 fe5e 	bl	8000250 <memchr>
 8008594:	b108      	cbz	r0, 800859a <_printf_i+0x1f2>
 8008596:	1b80      	subs	r0, r0, r6
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	2300      	movs	r3, #0
 80085a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a4:	e7a8      	b.n	80084f8 <_printf_i+0x150>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	4632      	mov	r2, r6
 80085aa:	4649      	mov	r1, r9
 80085ac:	4640      	mov	r0, r8
 80085ae:	47d0      	blx	sl
 80085b0:	3001      	adds	r0, #1
 80085b2:	d0ab      	beq.n	800850c <_printf_i+0x164>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	079b      	lsls	r3, r3, #30
 80085b8:	d413      	bmi.n	80085e2 <_printf_i+0x23a>
 80085ba:	68e0      	ldr	r0, [r4, #12]
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	4298      	cmp	r0, r3
 80085c0:	bfb8      	it	lt
 80085c2:	4618      	movlt	r0, r3
 80085c4:	e7a4      	b.n	8008510 <_printf_i+0x168>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4632      	mov	r2, r6
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	47d0      	blx	sl
 80085d0:	3001      	adds	r0, #1
 80085d2:	d09b      	beq.n	800850c <_printf_i+0x164>
 80085d4:	3501      	adds	r5, #1
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	9903      	ldr	r1, [sp, #12]
 80085da:	1a5b      	subs	r3, r3, r1
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dcf2      	bgt.n	80085c6 <_printf_i+0x21e>
 80085e0:	e7eb      	b.n	80085ba <_printf_i+0x212>
 80085e2:	2500      	movs	r5, #0
 80085e4:	f104 0619 	add.w	r6, r4, #25
 80085e8:	e7f5      	b.n	80085d6 <_printf_i+0x22e>
 80085ea:	bf00      	nop
 80085ec:	0800ed46 	.word	0x0800ed46
 80085f0:	0800ed57 	.word	0x0800ed57

080085f4 <_scanf_float>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	b087      	sub	sp, #28
 80085fa:	4617      	mov	r7, r2
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	688b      	ldr	r3, [r1, #8]
 8008600:	1e5a      	subs	r2, r3, #1
 8008602:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008606:	bf83      	ittte	hi
 8008608:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800860c:	195b      	addhi	r3, r3, r5
 800860e:	9302      	strhi	r3, [sp, #8]
 8008610:	2300      	movls	r3, #0
 8008612:	bf86      	itte	hi
 8008614:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008618:	608b      	strhi	r3, [r1, #8]
 800861a:	9302      	strls	r3, [sp, #8]
 800861c:	680b      	ldr	r3, [r1, #0]
 800861e:	468b      	mov	fp, r1
 8008620:	2500      	movs	r5, #0
 8008622:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008626:	f84b 3b1c 	str.w	r3, [fp], #28
 800862a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800862e:	4680      	mov	r8, r0
 8008630:	460c      	mov	r4, r1
 8008632:	465e      	mov	r6, fp
 8008634:	46aa      	mov	sl, r5
 8008636:	46a9      	mov	r9, r5
 8008638:	9501      	str	r5, [sp, #4]
 800863a:	68a2      	ldr	r2, [r4, #8]
 800863c:	b152      	cbz	r2, 8008654 <_scanf_float+0x60>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b4e      	cmp	r3, #78	; 0x4e
 8008644:	d864      	bhi.n	8008710 <_scanf_float+0x11c>
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d83c      	bhi.n	80086c4 <_scanf_float+0xd0>
 800864a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800864e:	b2c8      	uxtb	r0, r1
 8008650:	280e      	cmp	r0, #14
 8008652:	d93a      	bls.n	80086ca <_scanf_float+0xd6>
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	d003      	beq.n	8008662 <_scanf_float+0x6e>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008666:	f1ba 0f01 	cmp.w	sl, #1
 800866a:	f200 8113 	bhi.w	8008894 <_scanf_float+0x2a0>
 800866e:	455e      	cmp	r6, fp
 8008670:	f200 8105 	bhi.w	800887e <_scanf_float+0x28a>
 8008674:	2501      	movs	r5, #1
 8008676:	4628      	mov	r0, r5
 8008678:	b007      	add	sp, #28
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008682:	2a0d      	cmp	r2, #13
 8008684:	d8e6      	bhi.n	8008654 <_scanf_float+0x60>
 8008686:	a101      	add	r1, pc, #4	; (adr r1, 800868c <_scanf_float+0x98>)
 8008688:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800868c:	080087cb 	.word	0x080087cb
 8008690:	08008655 	.word	0x08008655
 8008694:	08008655 	.word	0x08008655
 8008698:	08008655 	.word	0x08008655
 800869c:	0800882b 	.word	0x0800882b
 80086a0:	08008803 	.word	0x08008803
 80086a4:	08008655 	.word	0x08008655
 80086a8:	08008655 	.word	0x08008655
 80086ac:	080087d9 	.word	0x080087d9
 80086b0:	08008655 	.word	0x08008655
 80086b4:	08008655 	.word	0x08008655
 80086b8:	08008655 	.word	0x08008655
 80086bc:	08008655 	.word	0x08008655
 80086c0:	08008791 	.word	0x08008791
 80086c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80086c8:	e7db      	b.n	8008682 <_scanf_float+0x8e>
 80086ca:	290e      	cmp	r1, #14
 80086cc:	d8c2      	bhi.n	8008654 <_scanf_float+0x60>
 80086ce:	a001      	add	r0, pc, #4	; (adr r0, 80086d4 <_scanf_float+0xe0>)
 80086d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086d4:	08008783 	.word	0x08008783
 80086d8:	08008655 	.word	0x08008655
 80086dc:	08008783 	.word	0x08008783
 80086e0:	08008817 	.word	0x08008817
 80086e4:	08008655 	.word	0x08008655
 80086e8:	08008731 	.word	0x08008731
 80086ec:	0800876d 	.word	0x0800876d
 80086f0:	0800876d 	.word	0x0800876d
 80086f4:	0800876d 	.word	0x0800876d
 80086f8:	0800876d 	.word	0x0800876d
 80086fc:	0800876d 	.word	0x0800876d
 8008700:	0800876d 	.word	0x0800876d
 8008704:	0800876d 	.word	0x0800876d
 8008708:	0800876d 	.word	0x0800876d
 800870c:	0800876d 	.word	0x0800876d
 8008710:	2b6e      	cmp	r3, #110	; 0x6e
 8008712:	d809      	bhi.n	8008728 <_scanf_float+0x134>
 8008714:	2b60      	cmp	r3, #96	; 0x60
 8008716:	d8b2      	bhi.n	800867e <_scanf_float+0x8a>
 8008718:	2b54      	cmp	r3, #84	; 0x54
 800871a:	d077      	beq.n	800880c <_scanf_float+0x218>
 800871c:	2b59      	cmp	r3, #89	; 0x59
 800871e:	d199      	bne.n	8008654 <_scanf_float+0x60>
 8008720:	2d07      	cmp	r5, #7
 8008722:	d197      	bne.n	8008654 <_scanf_float+0x60>
 8008724:	2508      	movs	r5, #8
 8008726:	e029      	b.n	800877c <_scanf_float+0x188>
 8008728:	2b74      	cmp	r3, #116	; 0x74
 800872a:	d06f      	beq.n	800880c <_scanf_float+0x218>
 800872c:	2b79      	cmp	r3, #121	; 0x79
 800872e:	e7f6      	b.n	800871e <_scanf_float+0x12a>
 8008730:	6821      	ldr	r1, [r4, #0]
 8008732:	05c8      	lsls	r0, r1, #23
 8008734:	d51a      	bpl.n	800876c <_scanf_float+0x178>
 8008736:	9b02      	ldr	r3, [sp, #8]
 8008738:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800873c:	6021      	str	r1, [r4, #0]
 800873e:	f109 0901 	add.w	r9, r9, #1
 8008742:	b11b      	cbz	r3, 800874c <_scanf_float+0x158>
 8008744:	3b01      	subs	r3, #1
 8008746:	3201      	adds	r2, #1
 8008748:	9302      	str	r3, [sp, #8]
 800874a:	60a2      	str	r2, [r4, #8]
 800874c:	68a3      	ldr	r3, [r4, #8]
 800874e:	3b01      	subs	r3, #1
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	3301      	adds	r3, #1
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3b01      	subs	r3, #1
 800875c:	2b00      	cmp	r3, #0
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	f340 8084 	ble.w	800886c <_scanf_float+0x278>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	603b      	str	r3, [r7, #0]
 800876a:	e766      	b.n	800863a <_scanf_float+0x46>
 800876c:	eb1a 0f05 	cmn.w	sl, r5
 8008770:	f47f af70 	bne.w	8008654 <_scanf_float+0x60>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800877a:	6022      	str	r2, [r4, #0]
 800877c:	f806 3b01 	strb.w	r3, [r6], #1
 8008780:	e7e4      	b.n	800874c <_scanf_float+0x158>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	0610      	lsls	r0, r2, #24
 8008786:	f57f af65 	bpl.w	8008654 <_scanf_float+0x60>
 800878a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800878e:	e7f4      	b.n	800877a <_scanf_float+0x186>
 8008790:	f1ba 0f00 	cmp.w	sl, #0
 8008794:	d10e      	bne.n	80087b4 <_scanf_float+0x1c0>
 8008796:	f1b9 0f00 	cmp.w	r9, #0
 800879a:	d10e      	bne.n	80087ba <_scanf_float+0x1c6>
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087a6:	d108      	bne.n	80087ba <_scanf_float+0x1c6>
 80087a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087ac:	6022      	str	r2, [r4, #0]
 80087ae:	f04f 0a01 	mov.w	sl, #1
 80087b2:	e7e3      	b.n	800877c <_scanf_float+0x188>
 80087b4:	f1ba 0f02 	cmp.w	sl, #2
 80087b8:	d055      	beq.n	8008866 <_scanf_float+0x272>
 80087ba:	2d01      	cmp	r5, #1
 80087bc:	d002      	beq.n	80087c4 <_scanf_float+0x1d0>
 80087be:	2d04      	cmp	r5, #4
 80087c0:	f47f af48 	bne.w	8008654 <_scanf_float+0x60>
 80087c4:	3501      	adds	r5, #1
 80087c6:	b2ed      	uxtb	r5, r5
 80087c8:	e7d8      	b.n	800877c <_scanf_float+0x188>
 80087ca:	f1ba 0f01 	cmp.w	sl, #1
 80087ce:	f47f af41 	bne.w	8008654 <_scanf_float+0x60>
 80087d2:	f04f 0a02 	mov.w	sl, #2
 80087d6:	e7d1      	b.n	800877c <_scanf_float+0x188>
 80087d8:	b97d      	cbnz	r5, 80087fa <_scanf_float+0x206>
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	f47f af3c 	bne.w	800865a <_scanf_float+0x66>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087ec:	f47f af39 	bne.w	8008662 <_scanf_float+0x6e>
 80087f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087f4:	6022      	str	r2, [r4, #0]
 80087f6:	2501      	movs	r5, #1
 80087f8:	e7c0      	b.n	800877c <_scanf_float+0x188>
 80087fa:	2d03      	cmp	r5, #3
 80087fc:	d0e2      	beq.n	80087c4 <_scanf_float+0x1d0>
 80087fe:	2d05      	cmp	r5, #5
 8008800:	e7de      	b.n	80087c0 <_scanf_float+0x1cc>
 8008802:	2d02      	cmp	r5, #2
 8008804:	f47f af26 	bne.w	8008654 <_scanf_float+0x60>
 8008808:	2503      	movs	r5, #3
 800880a:	e7b7      	b.n	800877c <_scanf_float+0x188>
 800880c:	2d06      	cmp	r5, #6
 800880e:	f47f af21 	bne.w	8008654 <_scanf_float+0x60>
 8008812:	2507      	movs	r5, #7
 8008814:	e7b2      	b.n	800877c <_scanf_float+0x188>
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	0591      	lsls	r1, r2, #22
 800881a:	f57f af1b 	bpl.w	8008654 <_scanf_float+0x60>
 800881e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008822:	6022      	str	r2, [r4, #0]
 8008824:	f8cd 9004 	str.w	r9, [sp, #4]
 8008828:	e7a8      	b.n	800877c <_scanf_float+0x188>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008830:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008834:	d006      	beq.n	8008844 <_scanf_float+0x250>
 8008836:	0550      	lsls	r0, r2, #21
 8008838:	f57f af0c 	bpl.w	8008654 <_scanf_float+0x60>
 800883c:	f1b9 0f00 	cmp.w	r9, #0
 8008840:	f43f af0f 	beq.w	8008662 <_scanf_float+0x6e>
 8008844:	0591      	lsls	r1, r2, #22
 8008846:	bf58      	it	pl
 8008848:	9901      	ldrpl	r1, [sp, #4]
 800884a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800884e:	bf58      	it	pl
 8008850:	eba9 0101 	subpl.w	r1, r9, r1
 8008854:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008858:	bf58      	it	pl
 800885a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800885e:	6022      	str	r2, [r4, #0]
 8008860:	f04f 0900 	mov.w	r9, #0
 8008864:	e78a      	b.n	800877c <_scanf_float+0x188>
 8008866:	f04f 0a03 	mov.w	sl, #3
 800886a:	e787      	b.n	800877c <_scanf_float+0x188>
 800886c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008870:	4639      	mov	r1, r7
 8008872:	4640      	mov	r0, r8
 8008874:	4798      	blx	r3
 8008876:	2800      	cmp	r0, #0
 8008878:	f43f aedf 	beq.w	800863a <_scanf_float+0x46>
 800887c:	e6ea      	b.n	8008654 <_scanf_float+0x60>
 800887e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008886:	463a      	mov	r2, r7
 8008888:	4640      	mov	r0, r8
 800888a:	4798      	blx	r3
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	3b01      	subs	r3, #1
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	e6ec      	b.n	800866e <_scanf_float+0x7a>
 8008894:	1e6b      	subs	r3, r5, #1
 8008896:	2b06      	cmp	r3, #6
 8008898:	d825      	bhi.n	80088e6 <_scanf_float+0x2f2>
 800889a:	2d02      	cmp	r5, #2
 800889c:	d836      	bhi.n	800890c <_scanf_float+0x318>
 800889e:	455e      	cmp	r6, fp
 80088a0:	f67f aee8 	bls.w	8008674 <_scanf_float+0x80>
 80088a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ac:	463a      	mov	r2, r7
 80088ae:	4640      	mov	r0, r8
 80088b0:	4798      	blx	r3
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	6123      	str	r3, [r4, #16]
 80088b8:	e7f1      	b.n	800889e <_scanf_float+0x2aa>
 80088ba:	9802      	ldr	r0, [sp, #8]
 80088bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80088c4:	9002      	str	r0, [sp, #8]
 80088c6:	463a      	mov	r2, r7
 80088c8:	4640      	mov	r0, r8
 80088ca:	4798      	blx	r3
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	6123      	str	r3, [r4, #16]
 80088d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088d6:	fa5f fa8a 	uxtb.w	sl, sl
 80088da:	f1ba 0f02 	cmp.w	sl, #2
 80088de:	d1ec      	bne.n	80088ba <_scanf_float+0x2c6>
 80088e0:	3d03      	subs	r5, #3
 80088e2:	b2ed      	uxtb	r5, r5
 80088e4:	1b76      	subs	r6, r6, r5
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	05da      	lsls	r2, r3, #23
 80088ea:	d52f      	bpl.n	800894c <_scanf_float+0x358>
 80088ec:	055b      	lsls	r3, r3, #21
 80088ee:	d510      	bpl.n	8008912 <_scanf_float+0x31e>
 80088f0:	455e      	cmp	r6, fp
 80088f2:	f67f aebf 	bls.w	8008674 <_scanf_float+0x80>
 80088f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088fe:	463a      	mov	r2, r7
 8008900:	4640      	mov	r0, r8
 8008902:	4798      	blx	r3
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	3b01      	subs	r3, #1
 8008908:	6123      	str	r3, [r4, #16]
 800890a:	e7f1      	b.n	80088f0 <_scanf_float+0x2fc>
 800890c:	46aa      	mov	sl, r5
 800890e:	9602      	str	r6, [sp, #8]
 8008910:	e7df      	b.n	80088d2 <_scanf_float+0x2de>
 8008912:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	2965      	cmp	r1, #101	; 0x65
 800891a:	f103 33ff 	add.w	r3, r3, #4294967295
 800891e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008922:	6123      	str	r3, [r4, #16]
 8008924:	d00c      	beq.n	8008940 <_scanf_float+0x34c>
 8008926:	2945      	cmp	r1, #69	; 0x45
 8008928:	d00a      	beq.n	8008940 <_scanf_float+0x34c>
 800892a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800892e:	463a      	mov	r2, r7
 8008930:	4640      	mov	r0, r8
 8008932:	4798      	blx	r3
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800893a:	3b01      	subs	r3, #1
 800893c:	1eb5      	subs	r5, r6, #2
 800893e:	6123      	str	r3, [r4, #16]
 8008940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008944:	463a      	mov	r2, r7
 8008946:	4640      	mov	r0, r8
 8008948:	4798      	blx	r3
 800894a:	462e      	mov	r6, r5
 800894c:	6825      	ldr	r5, [r4, #0]
 800894e:	f015 0510 	ands.w	r5, r5, #16
 8008952:	d158      	bne.n	8008a06 <_scanf_float+0x412>
 8008954:	7035      	strb	r5, [r6, #0]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800895c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008960:	d11c      	bne.n	800899c <_scanf_float+0x3a8>
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	454b      	cmp	r3, r9
 8008966:	eba3 0209 	sub.w	r2, r3, r9
 800896a:	d124      	bne.n	80089b6 <_scanf_float+0x3c2>
 800896c:	2200      	movs	r2, #0
 800896e:	4659      	mov	r1, fp
 8008970:	4640      	mov	r0, r8
 8008972:	f000 ff73 	bl	800985c <_strtod_r>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	6821      	ldr	r1, [r4, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f011 0f02 	tst.w	r1, #2
 8008980:	ec57 6b10 	vmov	r6, r7, d0
 8008984:	f103 0204 	add.w	r2, r3, #4
 8008988:	d020      	beq.n	80089cc <_scanf_float+0x3d8>
 800898a:	9903      	ldr	r1, [sp, #12]
 800898c:	600a      	str	r2, [r1, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	e9c3 6700 	strd	r6, r7, [r3]
 8008994:	68e3      	ldr	r3, [r4, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60e3      	str	r3, [r4, #12]
 800899a:	e66c      	b.n	8008676 <_scanf_float+0x82>
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0e4      	beq.n	800896c <_scanf_float+0x378>
 80089a2:	9905      	ldr	r1, [sp, #20]
 80089a4:	230a      	movs	r3, #10
 80089a6:	462a      	mov	r2, r5
 80089a8:	3101      	adds	r1, #1
 80089aa:	4640      	mov	r0, r8
 80089ac:	f001 f83c 	bl	8009a28 <_strtol_r>
 80089b0:	9b04      	ldr	r3, [sp, #16]
 80089b2:	9e05      	ldr	r6, [sp, #20]
 80089b4:	1ac2      	subs	r2, r0, r3
 80089b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80089ba:	429e      	cmp	r6, r3
 80089bc:	bf28      	it	cs
 80089be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80089c2:	4912      	ldr	r1, [pc, #72]	; (8008a0c <_scanf_float+0x418>)
 80089c4:	4630      	mov	r0, r6
 80089c6:	f000 f8cf 	bl	8008b68 <siprintf>
 80089ca:	e7cf      	b.n	800896c <_scanf_float+0x378>
 80089cc:	f011 0f04 	tst.w	r1, #4
 80089d0:	9903      	ldr	r1, [sp, #12]
 80089d2:	600a      	str	r2, [r1, #0]
 80089d4:	d1db      	bne.n	800898e <_scanf_float+0x39a>
 80089d6:	f8d3 8000 	ldr.w	r8, [r3]
 80089da:	ee10 2a10 	vmov	r2, s0
 80089de:	ee10 0a10 	vmov	r0, s0
 80089e2:	463b      	mov	r3, r7
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f8 f8d9 	bl	8000b9c <__aeabi_dcmpun>
 80089ea:	b128      	cbz	r0, 80089f8 <_scanf_float+0x404>
 80089ec:	4808      	ldr	r0, [pc, #32]	; (8008a10 <_scanf_float+0x41c>)
 80089ee:	f000 f8b5 	bl	8008b5c <nanf>
 80089f2:	ed88 0a00 	vstr	s0, [r8]
 80089f6:	e7cd      	b.n	8008994 <_scanf_float+0x3a0>
 80089f8:	4630      	mov	r0, r6
 80089fa:	4639      	mov	r1, r7
 80089fc:	f7f8 f92c 	bl	8000c58 <__aeabi_d2f>
 8008a00:	f8c8 0000 	str.w	r0, [r8]
 8008a04:	e7c6      	b.n	8008994 <_scanf_float+0x3a0>
 8008a06:	2500      	movs	r5, #0
 8008a08:	e635      	b.n	8008676 <_scanf_float+0x82>
 8008a0a:	bf00      	nop
 8008a0c:	0800ed68 	.word	0x0800ed68
 8008a10:	0800ee73 	.word	0x0800ee73

08008a14 <iprintf>:
 8008a14:	b40f      	push	{r0, r1, r2, r3}
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <iprintf+0x2c>)
 8008a18:	b513      	push	{r0, r1, r4, lr}
 8008a1a:	681c      	ldr	r4, [r3, #0]
 8008a1c:	b124      	cbz	r4, 8008a28 <iprintf+0x14>
 8008a1e:	69a3      	ldr	r3, [r4, #24]
 8008a20:	b913      	cbnz	r3, 8008a28 <iprintf+0x14>
 8008a22:	4620      	mov	r0, r4
 8008a24:	f002 f872 	bl	800ab0c <__sinit>
 8008a28:	ab05      	add	r3, sp, #20
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	68a1      	ldr	r1, [r4, #8]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	4620      	mov	r0, r4
 8008a32:	f003 fc17 	bl	800c264 <_vfiprintf_r>
 8008a36:	b002      	add	sp, #8
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3c:	b004      	add	sp, #16
 8008a3e:	4770      	bx	lr
 8008a40:	2000000c 	.word	0x2000000c

08008a44 <putchar>:
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <putchar+0x28>)
 8008a46:	b513      	push	{r0, r1, r4, lr}
 8008a48:	681c      	ldr	r4, [r3, #0]
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	b134      	cbz	r4, 8008a5c <putchar+0x18>
 8008a4e:	69a3      	ldr	r3, [r4, #24]
 8008a50:	b923      	cbnz	r3, 8008a5c <putchar+0x18>
 8008a52:	9001      	str	r0, [sp, #4]
 8008a54:	4620      	mov	r0, r4
 8008a56:	f002 f859 	bl	800ab0c <__sinit>
 8008a5a:	9901      	ldr	r1, [sp, #4]
 8008a5c:	68a2      	ldr	r2, [r4, #8]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	b002      	add	sp, #8
 8008a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a66:	f003 bd2d 	b.w	800c4c4 <_putc_r>
 8008a6a:	bf00      	nop
 8008a6c:	2000000c 	.word	0x2000000c

08008a70 <_puts_r>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	460e      	mov	r6, r1
 8008a74:	4605      	mov	r5, r0
 8008a76:	b118      	cbz	r0, 8008a80 <_puts_r+0x10>
 8008a78:	6983      	ldr	r3, [r0, #24]
 8008a7a:	b90b      	cbnz	r3, 8008a80 <_puts_r+0x10>
 8008a7c:	f002 f846 	bl	800ab0c <__sinit>
 8008a80:	69ab      	ldr	r3, [r5, #24]
 8008a82:	68ac      	ldr	r4, [r5, #8]
 8008a84:	b913      	cbnz	r3, 8008a8c <_puts_r+0x1c>
 8008a86:	4628      	mov	r0, r5
 8008a88:	f002 f840 	bl	800ab0c <__sinit>
 8008a8c:	4b2c      	ldr	r3, [pc, #176]	; (8008b40 <_puts_r+0xd0>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	d120      	bne.n	8008ad4 <_puts_r+0x64>
 8008a92:	686c      	ldr	r4, [r5, #4]
 8008a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a96:	07db      	lsls	r3, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_puts_r+0x36>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	0598      	lsls	r0, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_puts_r+0x36>
 8008aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa2:	f002 fc56 	bl	800b352 <__retarget_lock_acquire_recursive>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	0719      	lsls	r1, r3, #28
 8008aaa:	d51d      	bpl.n	8008ae8 <_puts_r+0x78>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	b1db      	cbz	r3, 8008ae8 <_puts_r+0x78>
 8008ab0:	3e01      	subs	r6, #1
 8008ab2:	68a3      	ldr	r3, [r4, #8]
 8008ab4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	60a3      	str	r3, [r4, #8]
 8008abc:	bb39      	cbnz	r1, 8008b0e <_puts_r+0x9e>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	da38      	bge.n	8008b34 <_puts_r+0xc4>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	210a      	movs	r1, #10
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 ffb0 	bl	8009a2c <__swbuf_r>
 8008acc:	3001      	adds	r0, #1
 8008ace:	d011      	beq.n	8008af4 <_puts_r+0x84>
 8008ad0:	250a      	movs	r5, #10
 8008ad2:	e011      	b.n	8008af8 <_puts_r+0x88>
 8008ad4:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <_puts_r+0xd4>)
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	d101      	bne.n	8008ade <_puts_r+0x6e>
 8008ada:	68ac      	ldr	r4, [r5, #8]
 8008adc:	e7da      	b.n	8008a94 <_puts_r+0x24>
 8008ade:	4b1a      	ldr	r3, [pc, #104]	; (8008b48 <_puts_r+0xd8>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	bf08      	it	eq
 8008ae4:	68ec      	ldreq	r4, [r5, #12]
 8008ae6:	e7d5      	b.n	8008a94 <_puts_r+0x24>
 8008ae8:	4621      	mov	r1, r4
 8008aea:	4628      	mov	r0, r5
 8008aec:	f000 fff0 	bl	8009ad0 <__swsetup_r>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d0dd      	beq.n	8008ab0 <_puts_r+0x40>
 8008af4:	f04f 35ff 	mov.w	r5, #4294967295
 8008af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008afa:	07da      	lsls	r2, r3, #31
 8008afc:	d405      	bmi.n	8008b0a <_puts_r+0x9a>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	059b      	lsls	r3, r3, #22
 8008b02:	d402      	bmi.n	8008b0a <_puts_r+0x9a>
 8008b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b06:	f002 fc25 	bl	800b354 <__retarget_lock_release_recursive>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da04      	bge.n	8008b1c <_puts_r+0xac>
 8008b12:	69a2      	ldr	r2, [r4, #24]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	dc06      	bgt.n	8008b26 <_puts_r+0xb6>
 8008b18:	290a      	cmp	r1, #10
 8008b1a:	d004      	beq.n	8008b26 <_puts_r+0xb6>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	7019      	strb	r1, [r3, #0]
 8008b24:	e7c5      	b.n	8008ab2 <_puts_r+0x42>
 8008b26:	4622      	mov	r2, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 ff7f 	bl	8009a2c <__swbuf_r>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d1bf      	bne.n	8008ab2 <_puts_r+0x42>
 8008b32:	e7df      	b.n	8008af4 <_puts_r+0x84>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	250a      	movs	r5, #10
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	6022      	str	r2, [r4, #0]
 8008b3c:	701d      	strb	r5, [r3, #0]
 8008b3e:	e7db      	b.n	8008af8 <_puts_r+0x88>
 8008b40:	0800f014 	.word	0x0800f014
 8008b44:	0800f034 	.word	0x0800f034
 8008b48:	0800eff4 	.word	0x0800eff4

08008b4c <puts>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <puts+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f7ff bf8d 	b.w	8008a70 <_puts_r>
 8008b56:	bf00      	nop
 8008b58:	2000000c 	.word	0x2000000c

08008b5c <nanf>:
 8008b5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b64 <nanf+0x8>
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	7fc00000 	.word	0x7fc00000

08008b68 <siprintf>:
 8008b68:	b40e      	push	{r1, r2, r3}
 8008b6a:	b500      	push	{lr}
 8008b6c:	b09c      	sub	sp, #112	; 0x70
 8008b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008b70:	9002      	str	r0, [sp, #8]
 8008b72:	9006      	str	r0, [sp, #24]
 8008b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b78:	4809      	ldr	r0, [pc, #36]	; (8008ba0 <siprintf+0x38>)
 8008b7a:	9107      	str	r1, [sp, #28]
 8008b7c:	9104      	str	r1, [sp, #16]
 8008b7e:	4909      	ldr	r1, [pc, #36]	; (8008ba4 <siprintf+0x3c>)
 8008b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b84:	9105      	str	r1, [sp, #20]
 8008b86:	6800      	ldr	r0, [r0, #0]
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	a902      	add	r1, sp, #8
 8008b8c:	f003 fa40 	bl	800c010 <_svfiprintf_r>
 8008b90:	9b02      	ldr	r3, [sp, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	b01c      	add	sp, #112	; 0x70
 8008b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b9c:	b003      	add	sp, #12
 8008b9e:	4770      	bx	lr
 8008ba0:	2000000c 	.word	0x2000000c
 8008ba4:	ffff0208 	.word	0xffff0208

08008ba8 <strcpy>:
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bae:	f803 2b01 	strb.w	r2, [r3], #1
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	d1f9      	bne.n	8008baa <strcpy+0x2>
 8008bb6:	4770      	bx	lr

08008bb8 <strncpy>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	3901      	subs	r1, #1
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	b132      	cbz	r2, 8008bce <strncpy+0x16>
 8008bc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008bc4:	f803 4b01 	strb.w	r4, [r3], #1
 8008bc8:	3a01      	subs	r2, #1
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	d1f7      	bne.n	8008bbe <strncpy+0x6>
 8008bce:	441a      	add	r2, r3
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d100      	bne.n	8008bd8 <strncpy+0x20>
 8008bd6:	bd10      	pop	{r4, pc}
 8008bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8008bdc:	e7f9      	b.n	8008bd2 <strncpy+0x1a>

08008bde <strstr>:
 8008bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be0:	780c      	ldrb	r4, [r1, #0]
 8008be2:	b164      	cbz	r4, 8008bfe <strstr+0x20>
 8008be4:	4603      	mov	r3, r0
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	1c5e      	adds	r6, r3, #1
 8008bec:	b90a      	cbnz	r2, 8008bf2 <strstr+0x14>
 8008bee:	4610      	mov	r0, r2
 8008bf0:	e005      	b.n	8008bfe <strstr+0x20>
 8008bf2:	4294      	cmp	r4, r2
 8008bf4:	d108      	bne.n	8008c08 <strstr+0x2a>
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008bfc:	b902      	cbnz	r2, 8008c00 <strstr+0x22>
 8008bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c00:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008c04:	4297      	cmp	r7, r2
 8008c06:	d0f7      	beq.n	8008bf8 <strstr+0x1a>
 8008c08:	4633      	mov	r3, r6
 8008c0a:	e7ec      	b.n	8008be6 <strstr+0x8>

08008c0c <sulp>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	ec45 4b10 	vmov	d0, r4, r5
 8008c16:	4616      	mov	r6, r2
 8008c18:	f002 ff96 	bl	800bb48 <__ulp>
 8008c1c:	ec51 0b10 	vmov	r0, r1, d0
 8008c20:	b17e      	cbz	r6, 8008c42 <sulp+0x36>
 8008c22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	dd09      	ble.n	8008c42 <sulp+0x36>
 8008c2e:	051b      	lsls	r3, r3, #20
 8008c30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c34:	2400      	movs	r4, #0
 8008c36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	f7f7 fd13 	bl	8000668 <__aeabi_dmul>
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	0000      	movs	r0, r0
	...

08008c48 <_strtod_l>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	b0a3      	sub	sp, #140	; 0x8c
 8008c4e:	461f      	mov	r7, r3
 8008c50:	2300      	movs	r3, #0
 8008c52:	931e      	str	r3, [sp, #120]	; 0x78
 8008c54:	4ba4      	ldr	r3, [pc, #656]	; (8008ee8 <_strtod_l+0x2a0>)
 8008c56:	9219      	str	r2, [sp, #100]	; 0x64
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	4688      	mov	r8, r1
 8008c62:	f7f7 fae7 	bl	8000234 <strlen>
 8008c66:	f04f 0a00 	mov.w	sl, #0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	f04f 0b00 	mov.w	fp, #0
 8008c70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	2a2b      	cmp	r2, #43	; 0x2b
 8008c7a:	d04c      	beq.n	8008d16 <_strtod_l+0xce>
 8008c7c:	d839      	bhi.n	8008cf2 <_strtod_l+0xaa>
 8008c7e:	2a0d      	cmp	r2, #13
 8008c80:	d832      	bhi.n	8008ce8 <_strtod_l+0xa0>
 8008c82:	2a08      	cmp	r2, #8
 8008c84:	d832      	bhi.n	8008cec <_strtod_l+0xa4>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d03c      	beq.n	8008d04 <_strtod_l+0xbc>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008c90:	7833      	ldrb	r3, [r6, #0]
 8008c92:	2b30      	cmp	r3, #48	; 0x30
 8008c94:	f040 80b4 	bne.w	8008e00 <_strtod_l+0x1b8>
 8008c98:	7873      	ldrb	r3, [r6, #1]
 8008c9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9e:	2b58      	cmp	r3, #88	; 0x58
 8008ca0:	d16c      	bne.n	8008d7c <_strtod_l+0x134>
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	ab1e      	add	r3, sp, #120	; 0x78
 8008ca8:	9702      	str	r7, [sp, #8]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4a8f      	ldr	r2, [pc, #572]	; (8008eec <_strtod_l+0x2a4>)
 8008cae:	ab1f      	add	r3, sp, #124	; 0x7c
 8008cb0:	a91d      	add	r1, sp, #116	; 0x74
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f002 f840 	bl	800ad38 <__gethex>
 8008cb8:	f010 0707 	ands.w	r7, r0, #7
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	d005      	beq.n	8008ccc <_strtod_l+0x84>
 8008cc0:	2f06      	cmp	r7, #6
 8008cc2:	d12a      	bne.n	8008d1a <_strtod_l+0xd2>
 8008cc4:	3601      	adds	r6, #1
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	961d      	str	r6, [sp, #116]	; 0x74
 8008cca:	930e      	str	r3, [sp, #56]	; 0x38
 8008ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 8596 	bne.w	8009800 <_strtod_l+0xbb8>
 8008cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd6:	b1db      	cbz	r3, 8008d10 <_strtod_l+0xc8>
 8008cd8:	4652      	mov	r2, sl
 8008cda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cde:	ec43 2b10 	vmov	d0, r2, r3
 8008ce2:	b023      	add	sp, #140	; 0x8c
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	2a20      	cmp	r2, #32
 8008cea:	d1ce      	bne.n	8008c8a <_strtod_l+0x42>
 8008cec:	3301      	adds	r3, #1
 8008cee:	931d      	str	r3, [sp, #116]	; 0x74
 8008cf0:	e7c0      	b.n	8008c74 <_strtod_l+0x2c>
 8008cf2:	2a2d      	cmp	r2, #45	; 0x2d
 8008cf4:	d1c9      	bne.n	8008c8a <_strtod_l+0x42>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	920e      	str	r2, [sp, #56]	; 0x38
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	921d      	str	r2, [sp, #116]	; 0x74
 8008cfe:	785b      	ldrb	r3, [r3, #1]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1c4      	bne.n	8008c8e <_strtod_l+0x46>
 8008d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 8576 	bne.w	80097fc <_strtod_l+0xbb4>
 8008d10:	4652      	mov	r2, sl
 8008d12:	465b      	mov	r3, fp
 8008d14:	e7e3      	b.n	8008cde <_strtod_l+0x96>
 8008d16:	2200      	movs	r2, #0
 8008d18:	e7ee      	b.n	8008cf8 <_strtod_l+0xb0>
 8008d1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008d1c:	b13a      	cbz	r2, 8008d2e <_strtod_l+0xe6>
 8008d1e:	2135      	movs	r1, #53	; 0x35
 8008d20:	a820      	add	r0, sp, #128	; 0x80
 8008d22:	f003 f81c 	bl	800bd5e <__copybits>
 8008d26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f002 fbe1 	bl	800b4f0 <_Bfree>
 8008d2e:	3f01      	subs	r7, #1
 8008d30:	2f05      	cmp	r7, #5
 8008d32:	d807      	bhi.n	8008d44 <_strtod_l+0xfc>
 8008d34:	e8df f007 	tbb	[pc, r7]
 8008d38:	1d180b0e 	.word	0x1d180b0e
 8008d3c:	030e      	.short	0x030e
 8008d3e:	f04f 0b00 	mov.w	fp, #0
 8008d42:	46da      	mov	sl, fp
 8008d44:	0728      	lsls	r0, r5, #28
 8008d46:	d5c1      	bpl.n	8008ccc <_strtod_l+0x84>
 8008d48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d4c:	e7be      	b.n	8008ccc <_strtod_l+0x84>
 8008d4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008d52:	e7f7      	b.n	8008d44 <_strtod_l+0xfc>
 8008d54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008d58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d66:	e7ed      	b.n	8008d44 <_strtod_l+0xfc>
 8008d68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008ef0 <_strtod_l+0x2a8>
 8008d6c:	f04f 0a00 	mov.w	sl, #0
 8008d70:	e7e8      	b.n	8008d44 <_strtod_l+0xfc>
 8008d72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d76:	f04f 3aff 	mov.w	sl, #4294967295
 8008d7a:	e7e3      	b.n	8008d44 <_strtod_l+0xfc>
 8008d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	921d      	str	r2, [sp, #116]	; 0x74
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b30      	cmp	r3, #48	; 0x30
 8008d86:	d0f9      	beq.n	8008d7c <_strtod_l+0x134>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d09f      	beq.n	8008ccc <_strtod_l+0x84>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f04f 0900 	mov.w	r9, #0
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d96:	930a      	str	r3, [sp, #40]	; 0x28
 8008d98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d9c:	464f      	mov	r7, r9
 8008d9e:	220a      	movs	r2, #10
 8008da0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008da2:	7806      	ldrb	r6, [r0, #0]
 8008da4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008da8:	b2d9      	uxtb	r1, r3
 8008daa:	2909      	cmp	r1, #9
 8008dac:	d92a      	bls.n	8008e04 <_strtod_l+0x1bc>
 8008dae:	9907      	ldr	r1, [sp, #28]
 8008db0:	462a      	mov	r2, r5
 8008db2:	f003 fc2c 	bl	800c60e <strncmp>
 8008db6:	b398      	cbz	r0, 8008e20 <_strtod_l+0x1d8>
 8008db8:	2000      	movs	r0, #0
 8008dba:	4633      	mov	r3, r6
 8008dbc:	463d      	mov	r5, r7
 8008dbe:	9007      	str	r0, [sp, #28]
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	2b65      	cmp	r3, #101	; 0x65
 8008dc4:	d001      	beq.n	8008dca <_strtod_l+0x182>
 8008dc6:	2b45      	cmp	r3, #69	; 0x45
 8008dc8:	d118      	bne.n	8008dfc <_strtod_l+0x1b4>
 8008dca:	b91d      	cbnz	r5, 8008dd4 <_strtod_l+0x18c>
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	4303      	orrs	r3, r0
 8008dd0:	d098      	beq.n	8008d04 <_strtod_l+0xbc>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008dd8:	f108 0301 	add.w	r3, r8, #1
 8008ddc:	931d      	str	r3, [sp, #116]	; 0x74
 8008dde:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008de2:	2b2b      	cmp	r3, #43	; 0x2b
 8008de4:	d075      	beq.n	8008ed2 <_strtod_l+0x28a>
 8008de6:	2b2d      	cmp	r3, #45	; 0x2d
 8008de8:	d07b      	beq.n	8008ee2 <_strtod_l+0x29a>
 8008dea:	f04f 0c00 	mov.w	ip, #0
 8008dee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008df2:	2909      	cmp	r1, #9
 8008df4:	f240 8082 	bls.w	8008efc <_strtod_l+0x2b4>
 8008df8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	e09d      	b.n	8008f3c <_strtod_l+0x2f4>
 8008e00:	2300      	movs	r3, #0
 8008e02:	e7c4      	b.n	8008d8e <_strtod_l+0x146>
 8008e04:	2f08      	cmp	r7, #8
 8008e06:	bfd8      	it	le
 8008e08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008e0a:	f100 0001 	add.w	r0, r0, #1
 8008e0e:	bfda      	itte	le
 8008e10:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e14:	9309      	strle	r3, [sp, #36]	; 0x24
 8008e16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	901d      	str	r0, [sp, #116]	; 0x74
 8008e1e:	e7bf      	b.n	8008da0 <_strtod_l+0x158>
 8008e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e22:	195a      	adds	r2, r3, r5
 8008e24:	921d      	str	r2, [sp, #116]	; 0x74
 8008e26:	5d5b      	ldrb	r3, [r3, r5]
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	d037      	beq.n	8008e9c <_strtod_l+0x254>
 8008e2c:	9007      	str	r0, [sp, #28]
 8008e2e:	463d      	mov	r5, r7
 8008e30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008e34:	2a09      	cmp	r2, #9
 8008e36:	d912      	bls.n	8008e5e <_strtod_l+0x216>
 8008e38:	2201      	movs	r2, #1
 8008e3a:	e7c2      	b.n	8008dc2 <_strtod_l+0x17a>
 8008e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	921d      	str	r2, [sp, #116]	; 0x74
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	3001      	adds	r0, #1
 8008e46:	2b30      	cmp	r3, #48	; 0x30
 8008e48:	d0f8      	beq.n	8008e3c <_strtod_l+0x1f4>
 8008e4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008e4e:	2a08      	cmp	r2, #8
 8008e50:	f200 84db 	bhi.w	800980a <_strtod_l+0xbc2>
 8008e54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e56:	9007      	str	r0, [sp, #28]
 8008e58:	2000      	movs	r0, #0
 8008e5a:	920a      	str	r2, [sp, #40]	; 0x28
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	3b30      	subs	r3, #48	; 0x30
 8008e60:	f100 0201 	add.w	r2, r0, #1
 8008e64:	d014      	beq.n	8008e90 <_strtod_l+0x248>
 8008e66:	9907      	ldr	r1, [sp, #28]
 8008e68:	4411      	add	r1, r2
 8008e6a:	9107      	str	r1, [sp, #28]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	eb00 0e05 	add.w	lr, r0, r5
 8008e72:	210a      	movs	r1, #10
 8008e74:	4572      	cmp	r2, lr
 8008e76:	d113      	bne.n	8008ea0 <_strtod_l+0x258>
 8008e78:	182a      	adds	r2, r5, r0
 8008e7a:	2a08      	cmp	r2, #8
 8008e7c:	f105 0501 	add.w	r5, r5, #1
 8008e80:	4405      	add	r5, r0
 8008e82:	dc1c      	bgt.n	8008ebe <_strtod_l+0x276>
 8008e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e86:	220a      	movs	r2, #10
 8008e88:	fb02 3301 	mla	r3, r2, r1, r3
 8008e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8e:	2200      	movs	r2, #0
 8008e90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e92:	1c59      	adds	r1, r3, #1
 8008e94:	911d      	str	r1, [sp, #116]	; 0x74
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	4610      	mov	r0, r2
 8008e9a:	e7c9      	b.n	8008e30 <_strtod_l+0x1e8>
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	e7d2      	b.n	8008e46 <_strtod_l+0x1fe>
 8008ea0:	2a08      	cmp	r2, #8
 8008ea2:	dc04      	bgt.n	8008eae <_strtod_l+0x266>
 8008ea4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ea6:	434e      	muls	r6, r1
 8008ea8:	9609      	str	r6, [sp, #36]	; 0x24
 8008eaa:	3201      	adds	r2, #1
 8008eac:	e7e2      	b.n	8008e74 <_strtod_l+0x22c>
 8008eae:	f102 0c01 	add.w	ip, r2, #1
 8008eb2:	f1bc 0f10 	cmp.w	ip, #16
 8008eb6:	bfd8      	it	le
 8008eb8:	fb01 f909 	mulle.w	r9, r1, r9
 8008ebc:	e7f5      	b.n	8008eaa <_strtod_l+0x262>
 8008ebe:	2d10      	cmp	r5, #16
 8008ec0:	bfdc      	itt	le
 8008ec2:	220a      	movle	r2, #10
 8008ec4:	fb02 3909 	mlale	r9, r2, r9, r3
 8008ec8:	e7e1      	b.n	8008e8e <_strtod_l+0x246>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9307      	str	r3, [sp, #28]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	e77c      	b.n	8008dcc <_strtod_l+0x184>
 8008ed2:	f04f 0c00 	mov.w	ip, #0
 8008ed6:	f108 0302 	add.w	r3, r8, #2
 8008eda:	931d      	str	r3, [sp, #116]	; 0x74
 8008edc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008ee0:	e785      	b.n	8008dee <_strtod_l+0x1a6>
 8008ee2:	f04f 0c01 	mov.w	ip, #1
 8008ee6:	e7f6      	b.n	8008ed6 <_strtod_l+0x28e>
 8008ee8:	0800f0c0 	.word	0x0800f0c0
 8008eec:	0800ed70 	.word	0x0800ed70
 8008ef0:	7ff00000 	.word	0x7ff00000
 8008ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ef6:	1c59      	adds	r1, r3, #1
 8008ef8:	911d      	str	r1, [sp, #116]	; 0x74
 8008efa:	785b      	ldrb	r3, [r3, #1]
 8008efc:	2b30      	cmp	r3, #48	; 0x30
 8008efe:	d0f9      	beq.n	8008ef4 <_strtod_l+0x2ac>
 8008f00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008f04:	2908      	cmp	r1, #8
 8008f06:	f63f af79 	bhi.w	8008dfc <_strtod_l+0x1b4>
 8008f0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008f0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f10:	9308      	str	r3, [sp, #32]
 8008f12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	911d      	str	r1, [sp, #116]	; 0x74
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008f1e:	2e09      	cmp	r6, #9
 8008f20:	d937      	bls.n	8008f92 <_strtod_l+0x34a>
 8008f22:	9e08      	ldr	r6, [sp, #32]
 8008f24:	1b89      	subs	r1, r1, r6
 8008f26:	2908      	cmp	r1, #8
 8008f28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008f2c:	dc02      	bgt.n	8008f34 <_strtod_l+0x2ec>
 8008f2e:	4576      	cmp	r6, lr
 8008f30:	bfa8      	it	ge
 8008f32:	4676      	movge	r6, lr
 8008f34:	f1bc 0f00 	cmp.w	ip, #0
 8008f38:	d000      	beq.n	8008f3c <_strtod_l+0x2f4>
 8008f3a:	4276      	negs	r6, r6
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	d14f      	bne.n	8008fe0 <_strtod_l+0x398>
 8008f40:	9904      	ldr	r1, [sp, #16]
 8008f42:	4301      	orrs	r1, r0
 8008f44:	f47f aec2 	bne.w	8008ccc <_strtod_l+0x84>
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	f47f aedb 	bne.w	8008d04 <_strtod_l+0xbc>
 8008f4e:	2b69      	cmp	r3, #105	; 0x69
 8008f50:	d027      	beq.n	8008fa2 <_strtod_l+0x35a>
 8008f52:	dc24      	bgt.n	8008f9e <_strtod_l+0x356>
 8008f54:	2b49      	cmp	r3, #73	; 0x49
 8008f56:	d024      	beq.n	8008fa2 <_strtod_l+0x35a>
 8008f58:	2b4e      	cmp	r3, #78	; 0x4e
 8008f5a:	f47f aed3 	bne.w	8008d04 <_strtod_l+0xbc>
 8008f5e:	499e      	ldr	r1, [pc, #632]	; (80091d8 <_strtod_l+0x590>)
 8008f60:	a81d      	add	r0, sp, #116	; 0x74
 8008f62:	f002 f941 	bl	800b1e8 <__match>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f aecc 	beq.w	8008d04 <_strtod_l+0xbc>
 8008f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b28      	cmp	r3, #40	; 0x28
 8008f72:	d12d      	bne.n	8008fd0 <_strtod_l+0x388>
 8008f74:	4999      	ldr	r1, [pc, #612]	; (80091dc <_strtod_l+0x594>)
 8008f76:	aa20      	add	r2, sp, #128	; 0x80
 8008f78:	a81d      	add	r0, sp, #116	; 0x74
 8008f7a:	f002 f949 	bl	800b210 <__hexnan>
 8008f7e:	2805      	cmp	r0, #5
 8008f80:	d126      	bne.n	8008fd0 <_strtod_l+0x388>
 8008f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008f88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f90:	e69c      	b.n	8008ccc <_strtod_l+0x84>
 8008f92:	210a      	movs	r1, #10
 8008f94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008f98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f9c:	e7b9      	b.n	8008f12 <_strtod_l+0x2ca>
 8008f9e:	2b6e      	cmp	r3, #110	; 0x6e
 8008fa0:	e7db      	b.n	8008f5a <_strtod_l+0x312>
 8008fa2:	498f      	ldr	r1, [pc, #572]	; (80091e0 <_strtod_l+0x598>)
 8008fa4:	a81d      	add	r0, sp, #116	; 0x74
 8008fa6:	f002 f91f 	bl	800b1e8 <__match>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f43f aeaa 	beq.w	8008d04 <_strtod_l+0xbc>
 8008fb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fb2:	498c      	ldr	r1, [pc, #560]	; (80091e4 <_strtod_l+0x59c>)
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	a81d      	add	r0, sp, #116	; 0x74
 8008fb8:	931d      	str	r3, [sp, #116]	; 0x74
 8008fba:	f002 f915 	bl	800b1e8 <__match>
 8008fbe:	b910      	cbnz	r0, 8008fc6 <_strtod_l+0x37e>
 8008fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	931d      	str	r3, [sp, #116]	; 0x74
 8008fc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80091f4 <_strtod_l+0x5ac>
 8008fca:	f04f 0a00 	mov.w	sl, #0
 8008fce:	e67d      	b.n	8008ccc <_strtod_l+0x84>
 8008fd0:	4885      	ldr	r0, [pc, #532]	; (80091e8 <_strtod_l+0x5a0>)
 8008fd2:	f003 fac1 	bl	800c558 <nan>
 8008fd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008fda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008fde:	e675      	b.n	8008ccc <_strtod_l+0x84>
 8008fe0:	9b07      	ldr	r3, [sp, #28]
 8008fe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe4:	1af3      	subs	r3, r6, r3
 8008fe6:	2f00      	cmp	r7, #0
 8008fe8:	bf08      	it	eq
 8008fea:	462f      	moveq	r7, r5
 8008fec:	2d10      	cmp	r5, #16
 8008fee:	9308      	str	r3, [sp, #32]
 8008ff0:	46a8      	mov	r8, r5
 8008ff2:	bfa8      	it	ge
 8008ff4:	f04f 0810 	movge.w	r8, #16
 8008ff8:	f7f7 fabc 	bl	8000574 <__aeabi_ui2d>
 8008ffc:	2d09      	cmp	r5, #9
 8008ffe:	4682      	mov	sl, r0
 8009000:	468b      	mov	fp, r1
 8009002:	dd13      	ble.n	800902c <_strtod_l+0x3e4>
 8009004:	4b79      	ldr	r3, [pc, #484]	; (80091ec <_strtod_l+0x5a4>)
 8009006:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800900a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800900e:	f7f7 fb2b 	bl	8000668 <__aeabi_dmul>
 8009012:	4682      	mov	sl, r0
 8009014:	4648      	mov	r0, r9
 8009016:	468b      	mov	fp, r1
 8009018:	f7f7 faac 	bl	8000574 <__aeabi_ui2d>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4650      	mov	r0, sl
 8009022:	4659      	mov	r1, fp
 8009024:	f7f7 f96a 	bl	80002fc <__adddf3>
 8009028:	4682      	mov	sl, r0
 800902a:	468b      	mov	fp, r1
 800902c:	2d0f      	cmp	r5, #15
 800902e:	dc38      	bgt.n	80090a2 <_strtod_l+0x45a>
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f43f ae4a 	beq.w	8008ccc <_strtod_l+0x84>
 8009038:	dd24      	ble.n	8009084 <_strtod_l+0x43c>
 800903a:	2b16      	cmp	r3, #22
 800903c:	dc0b      	bgt.n	8009056 <_strtod_l+0x40e>
 800903e:	4d6b      	ldr	r5, [pc, #428]	; (80091ec <_strtod_l+0x5a4>)
 8009040:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009044:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009048:	4652      	mov	r2, sl
 800904a:	465b      	mov	r3, fp
 800904c:	f7f7 fb0c 	bl	8000668 <__aeabi_dmul>
 8009050:	4682      	mov	sl, r0
 8009052:	468b      	mov	fp, r1
 8009054:	e63a      	b.n	8008ccc <_strtod_l+0x84>
 8009056:	9a08      	ldr	r2, [sp, #32]
 8009058:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800905c:	4293      	cmp	r3, r2
 800905e:	db20      	blt.n	80090a2 <_strtod_l+0x45a>
 8009060:	4c62      	ldr	r4, [pc, #392]	; (80091ec <_strtod_l+0x5a4>)
 8009062:	f1c5 050f 	rsb	r5, r5, #15
 8009066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009072:	f7f7 faf9 	bl	8000668 <__aeabi_dmul>
 8009076:	9b08      	ldr	r3, [sp, #32]
 8009078:	1b5d      	subs	r5, r3, r5
 800907a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800907e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009082:	e7e3      	b.n	800904c <_strtod_l+0x404>
 8009084:	9b08      	ldr	r3, [sp, #32]
 8009086:	3316      	adds	r3, #22
 8009088:	db0b      	blt.n	80090a2 <_strtod_l+0x45a>
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	4a57      	ldr	r2, [pc, #348]	; (80091ec <_strtod_l+0x5a4>)
 800908e:	1b9e      	subs	r6, r3, r6
 8009090:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009094:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009098:	4650      	mov	r0, sl
 800909a:	4659      	mov	r1, fp
 800909c:	f7f7 fc0e 	bl	80008bc <__aeabi_ddiv>
 80090a0:	e7d6      	b.n	8009050 <_strtod_l+0x408>
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	eba5 0808 	sub.w	r8, r5, r8
 80090a8:	4498      	add	r8, r3
 80090aa:	f1b8 0f00 	cmp.w	r8, #0
 80090ae:	dd71      	ble.n	8009194 <_strtod_l+0x54c>
 80090b0:	f018 030f 	ands.w	r3, r8, #15
 80090b4:	d00a      	beq.n	80090cc <_strtod_l+0x484>
 80090b6:	494d      	ldr	r1, [pc, #308]	; (80091ec <_strtod_l+0x5a4>)
 80090b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090bc:	4652      	mov	r2, sl
 80090be:	465b      	mov	r3, fp
 80090c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c4:	f7f7 fad0 	bl	8000668 <__aeabi_dmul>
 80090c8:	4682      	mov	sl, r0
 80090ca:	468b      	mov	fp, r1
 80090cc:	f038 080f 	bics.w	r8, r8, #15
 80090d0:	d04d      	beq.n	800916e <_strtod_l+0x526>
 80090d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80090d6:	dd22      	ble.n	800911e <_strtod_l+0x4d6>
 80090d8:	2500      	movs	r5, #0
 80090da:	462e      	mov	r6, r5
 80090dc:	9509      	str	r5, [sp, #36]	; 0x24
 80090de:	9507      	str	r5, [sp, #28]
 80090e0:	2322      	movs	r3, #34	; 0x22
 80090e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80091f4 <_strtod_l+0x5ac>
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	f04f 0a00 	mov.w	sl, #0
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f43f adec 	beq.w	8008ccc <_strtod_l+0x84>
 80090f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090f6:	4620      	mov	r0, r4
 80090f8:	f002 f9fa 	bl	800b4f0 <_Bfree>
 80090fc:	9907      	ldr	r1, [sp, #28]
 80090fe:	4620      	mov	r0, r4
 8009100:	f002 f9f6 	bl	800b4f0 <_Bfree>
 8009104:	4631      	mov	r1, r6
 8009106:	4620      	mov	r0, r4
 8009108:	f002 f9f2 	bl	800b4f0 <_Bfree>
 800910c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800910e:	4620      	mov	r0, r4
 8009110:	f002 f9ee 	bl	800b4f0 <_Bfree>
 8009114:	4629      	mov	r1, r5
 8009116:	4620      	mov	r0, r4
 8009118:	f002 f9ea 	bl	800b4f0 <_Bfree>
 800911c:	e5d6      	b.n	8008ccc <_strtod_l+0x84>
 800911e:	2300      	movs	r3, #0
 8009120:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009124:	4650      	mov	r0, sl
 8009126:	4659      	mov	r1, fp
 8009128:	4699      	mov	r9, r3
 800912a:	f1b8 0f01 	cmp.w	r8, #1
 800912e:	dc21      	bgt.n	8009174 <_strtod_l+0x52c>
 8009130:	b10b      	cbz	r3, 8009136 <_strtod_l+0x4ee>
 8009132:	4682      	mov	sl, r0
 8009134:	468b      	mov	fp, r1
 8009136:	4b2e      	ldr	r3, [pc, #184]	; (80091f0 <_strtod_l+0x5a8>)
 8009138:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800913c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009140:	4652      	mov	r2, sl
 8009142:	465b      	mov	r3, fp
 8009144:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009148:	f7f7 fa8e 	bl	8000668 <__aeabi_dmul>
 800914c:	4b29      	ldr	r3, [pc, #164]	; (80091f4 <_strtod_l+0x5ac>)
 800914e:	460a      	mov	r2, r1
 8009150:	400b      	ands	r3, r1
 8009152:	4929      	ldr	r1, [pc, #164]	; (80091f8 <_strtod_l+0x5b0>)
 8009154:	428b      	cmp	r3, r1
 8009156:	4682      	mov	sl, r0
 8009158:	d8be      	bhi.n	80090d8 <_strtod_l+0x490>
 800915a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800915e:	428b      	cmp	r3, r1
 8009160:	bf86      	itte	hi
 8009162:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80091fc <_strtod_l+0x5b4>
 8009166:	f04f 3aff 	movhi.w	sl, #4294967295
 800916a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800916e:	2300      	movs	r3, #0
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	e081      	b.n	8009278 <_strtod_l+0x630>
 8009174:	f018 0f01 	tst.w	r8, #1
 8009178:	d007      	beq.n	800918a <_strtod_l+0x542>
 800917a:	4b1d      	ldr	r3, [pc, #116]	; (80091f0 <_strtod_l+0x5a8>)
 800917c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 fa70 	bl	8000668 <__aeabi_dmul>
 8009188:	2301      	movs	r3, #1
 800918a:	f109 0901 	add.w	r9, r9, #1
 800918e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009192:	e7ca      	b.n	800912a <_strtod_l+0x4e2>
 8009194:	d0eb      	beq.n	800916e <_strtod_l+0x526>
 8009196:	f1c8 0800 	rsb	r8, r8, #0
 800919a:	f018 020f 	ands.w	r2, r8, #15
 800919e:	d00a      	beq.n	80091b6 <_strtod_l+0x56e>
 80091a0:	4b12      	ldr	r3, [pc, #72]	; (80091ec <_strtod_l+0x5a4>)
 80091a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091a6:	4650      	mov	r0, sl
 80091a8:	4659      	mov	r1, fp
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f7f7 fb85 	bl	80008bc <__aeabi_ddiv>
 80091b2:	4682      	mov	sl, r0
 80091b4:	468b      	mov	fp, r1
 80091b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80091ba:	d0d8      	beq.n	800916e <_strtod_l+0x526>
 80091bc:	f1b8 0f1f 	cmp.w	r8, #31
 80091c0:	dd1e      	ble.n	8009200 <_strtod_l+0x5b8>
 80091c2:	2500      	movs	r5, #0
 80091c4:	462e      	mov	r6, r5
 80091c6:	9509      	str	r5, [sp, #36]	; 0x24
 80091c8:	9507      	str	r5, [sp, #28]
 80091ca:	2322      	movs	r3, #34	; 0x22
 80091cc:	f04f 0a00 	mov.w	sl, #0
 80091d0:	f04f 0b00 	mov.w	fp, #0
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	e789      	b.n	80090ec <_strtod_l+0x4a4>
 80091d8:	0800ed41 	.word	0x0800ed41
 80091dc:	0800ed84 	.word	0x0800ed84
 80091e0:	0800ed39 	.word	0x0800ed39
 80091e4:	0800ef78 	.word	0x0800ef78
 80091e8:	0800ee73 	.word	0x0800ee73
 80091ec:	0800f160 	.word	0x0800f160
 80091f0:	0800f138 	.word	0x0800f138
 80091f4:	7ff00000 	.word	0x7ff00000
 80091f8:	7ca00000 	.word	0x7ca00000
 80091fc:	7fefffff 	.word	0x7fefffff
 8009200:	f018 0310 	ands.w	r3, r8, #16
 8009204:	bf18      	it	ne
 8009206:	236a      	movne	r3, #106	; 0x6a
 8009208:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80095c0 <_strtod_l+0x978>
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	4650      	mov	r0, sl
 8009210:	4659      	mov	r1, fp
 8009212:	2300      	movs	r3, #0
 8009214:	f018 0f01 	tst.w	r8, #1
 8009218:	d004      	beq.n	8009224 <_strtod_l+0x5dc>
 800921a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800921e:	f7f7 fa23 	bl	8000668 <__aeabi_dmul>
 8009222:	2301      	movs	r3, #1
 8009224:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009228:	f109 0908 	add.w	r9, r9, #8
 800922c:	d1f2      	bne.n	8009214 <_strtod_l+0x5cc>
 800922e:	b10b      	cbz	r3, 8009234 <_strtod_l+0x5ec>
 8009230:	4682      	mov	sl, r0
 8009232:	468b      	mov	fp, r1
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	b1bb      	cbz	r3, 8009268 <_strtod_l+0x620>
 8009238:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800923c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009240:	2b00      	cmp	r3, #0
 8009242:	4659      	mov	r1, fp
 8009244:	dd10      	ble.n	8009268 <_strtod_l+0x620>
 8009246:	2b1f      	cmp	r3, #31
 8009248:	f340 8128 	ble.w	800949c <_strtod_l+0x854>
 800924c:	2b34      	cmp	r3, #52	; 0x34
 800924e:	bfde      	ittt	le
 8009250:	3b20      	suble	r3, #32
 8009252:	f04f 32ff 	movle.w	r2, #4294967295
 8009256:	fa02 f303 	lslle.w	r3, r2, r3
 800925a:	f04f 0a00 	mov.w	sl, #0
 800925e:	bfcc      	ite	gt
 8009260:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009264:	ea03 0b01 	andle.w	fp, r3, r1
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	4650      	mov	r0, sl
 800926e:	4659      	mov	r1, fp
 8009270:	f7f7 fc62 	bl	8000b38 <__aeabi_dcmpeq>
 8009274:	2800      	cmp	r0, #0
 8009276:	d1a4      	bne.n	80091c2 <_strtod_l+0x57a>
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800927e:	462b      	mov	r3, r5
 8009280:	463a      	mov	r2, r7
 8009282:	4620      	mov	r0, r4
 8009284:	f002 f9a0 	bl	800b5c8 <__s2b>
 8009288:	9009      	str	r0, [sp, #36]	; 0x24
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f af24 	beq.w	80090d8 <_strtod_l+0x490>
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	1b9e      	subs	r6, r3, r6
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	2b00      	cmp	r3, #0
 8009298:	bfb4      	ite	lt
 800929a:	4633      	movlt	r3, r6
 800929c:	2300      	movge	r3, #0
 800929e:	9310      	str	r3, [sp, #64]	; 0x40
 80092a0:	9b08      	ldr	r3, [sp, #32]
 80092a2:	2500      	movs	r5, #0
 80092a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092a8:	9318      	str	r3, [sp, #96]	; 0x60
 80092aa:	462e      	mov	r6, r5
 80092ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ae:	4620      	mov	r0, r4
 80092b0:	6859      	ldr	r1, [r3, #4]
 80092b2:	f002 f8dd 	bl	800b470 <_Balloc>
 80092b6:	9007      	str	r0, [sp, #28]
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f43f af11 	beq.w	80090e0 <_strtod_l+0x498>
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	3202      	adds	r2, #2
 80092c4:	f103 010c 	add.w	r1, r3, #12
 80092c8:	0092      	lsls	r2, r2, #2
 80092ca:	300c      	adds	r0, #12
 80092cc:	f002 f8c2 	bl	800b454 <memcpy>
 80092d0:	ec4b ab10 	vmov	d0, sl, fp
 80092d4:	aa20      	add	r2, sp, #128	; 0x80
 80092d6:	a91f      	add	r1, sp, #124	; 0x7c
 80092d8:	4620      	mov	r0, r4
 80092da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80092de:	f002 fcaf 	bl	800bc40 <__d2b>
 80092e2:	901e      	str	r0, [sp, #120]	; 0x78
 80092e4:	2800      	cmp	r0, #0
 80092e6:	f43f aefb 	beq.w	80090e0 <_strtod_l+0x498>
 80092ea:	2101      	movs	r1, #1
 80092ec:	4620      	mov	r0, r4
 80092ee:	f002 fa05 	bl	800b6fc <__i2b>
 80092f2:	4606      	mov	r6, r0
 80092f4:	2800      	cmp	r0, #0
 80092f6:	f43f aef3 	beq.w	80090e0 <_strtod_l+0x498>
 80092fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092fc:	9904      	ldr	r1, [sp, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bfab      	itete	ge
 8009302:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009304:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009306:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009308:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800930c:	bfac      	ite	ge
 800930e:	eb03 0902 	addge.w	r9, r3, r2
 8009312:	1ad7      	sublt	r7, r2, r3
 8009314:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009316:	eba3 0801 	sub.w	r8, r3, r1
 800931a:	4490      	add	r8, r2
 800931c:	4ba3      	ldr	r3, [pc, #652]	; (80095ac <_strtod_l+0x964>)
 800931e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009322:	4598      	cmp	r8, r3
 8009324:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009328:	f280 80cc 	bge.w	80094c4 <_strtod_l+0x87c>
 800932c:	eba3 0308 	sub.w	r3, r3, r8
 8009330:	2b1f      	cmp	r3, #31
 8009332:	eba2 0203 	sub.w	r2, r2, r3
 8009336:	f04f 0101 	mov.w	r1, #1
 800933a:	f300 80b6 	bgt.w	80094aa <_strtod_l+0x862>
 800933e:	fa01 f303 	lsl.w	r3, r1, r3
 8009342:	9311      	str	r3, [sp, #68]	; 0x44
 8009344:	2300      	movs	r3, #0
 8009346:	930c      	str	r3, [sp, #48]	; 0x30
 8009348:	eb09 0802 	add.w	r8, r9, r2
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	45c1      	cmp	r9, r8
 8009350:	4417      	add	r7, r2
 8009352:	441f      	add	r7, r3
 8009354:	464b      	mov	r3, r9
 8009356:	bfa8      	it	ge
 8009358:	4643      	movge	r3, r8
 800935a:	42bb      	cmp	r3, r7
 800935c:	bfa8      	it	ge
 800935e:	463b      	movge	r3, r7
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfc2      	ittt	gt
 8009364:	eba8 0803 	subgt.w	r8, r8, r3
 8009368:	1aff      	subgt	r7, r7, r3
 800936a:	eba9 0903 	subgt.w	r9, r9, r3
 800936e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd17      	ble.n	80093a4 <_strtod_l+0x75c>
 8009374:	4631      	mov	r1, r6
 8009376:	461a      	mov	r2, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f002 fa7b 	bl	800b874 <__pow5mult>
 800937e:	4606      	mov	r6, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f aead 	beq.w	80090e0 <_strtod_l+0x498>
 8009386:	4601      	mov	r1, r0
 8009388:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800938a:	4620      	mov	r0, r4
 800938c:	f002 f9cc 	bl	800b728 <__multiply>
 8009390:	900f      	str	r0, [sp, #60]	; 0x3c
 8009392:	2800      	cmp	r0, #0
 8009394:	f43f aea4 	beq.w	80090e0 <_strtod_l+0x498>
 8009398:	991e      	ldr	r1, [sp, #120]	; 0x78
 800939a:	4620      	mov	r0, r4
 800939c:	f002 f8a8 	bl	800b4f0 <_Bfree>
 80093a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a2:	931e      	str	r3, [sp, #120]	; 0x78
 80093a4:	f1b8 0f00 	cmp.w	r8, #0
 80093a8:	f300 8091 	bgt.w	80094ce <_strtod_l+0x886>
 80093ac:	9b08      	ldr	r3, [sp, #32]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dd08      	ble.n	80093c4 <_strtod_l+0x77c>
 80093b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80093b4:	9907      	ldr	r1, [sp, #28]
 80093b6:	4620      	mov	r0, r4
 80093b8:	f002 fa5c 	bl	800b874 <__pow5mult>
 80093bc:	9007      	str	r0, [sp, #28]
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f ae8e 	beq.w	80090e0 <_strtod_l+0x498>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	dd08      	ble.n	80093da <_strtod_l+0x792>
 80093c8:	9907      	ldr	r1, [sp, #28]
 80093ca:	463a      	mov	r2, r7
 80093cc:	4620      	mov	r0, r4
 80093ce:	f002 faab 	bl	800b928 <__lshift>
 80093d2:	9007      	str	r0, [sp, #28]
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f ae83 	beq.w	80090e0 <_strtod_l+0x498>
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	dd08      	ble.n	80093f2 <_strtod_l+0x7aa>
 80093e0:	4631      	mov	r1, r6
 80093e2:	464a      	mov	r2, r9
 80093e4:	4620      	mov	r0, r4
 80093e6:	f002 fa9f 	bl	800b928 <__lshift>
 80093ea:	4606      	mov	r6, r0
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f ae77 	beq.w	80090e0 <_strtod_l+0x498>
 80093f2:	9a07      	ldr	r2, [sp, #28]
 80093f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80093f6:	4620      	mov	r0, r4
 80093f8:	f002 fb1e 	bl	800ba38 <__mdiff>
 80093fc:	4605      	mov	r5, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f ae6e 	beq.w	80090e0 <_strtod_l+0x498>
 8009404:	68c3      	ldr	r3, [r0, #12]
 8009406:	930f      	str	r3, [sp, #60]	; 0x3c
 8009408:	2300      	movs	r3, #0
 800940a:	60c3      	str	r3, [r0, #12]
 800940c:	4631      	mov	r1, r6
 800940e:	f002 faf7 	bl	800ba00 <__mcmp>
 8009412:	2800      	cmp	r0, #0
 8009414:	da65      	bge.n	80094e2 <_strtod_l+0x89a>
 8009416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009418:	ea53 030a 	orrs.w	r3, r3, sl
 800941c:	f040 8087 	bne.w	800952e <_strtod_l+0x8e6>
 8009420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009424:	2b00      	cmp	r3, #0
 8009426:	f040 8082 	bne.w	800952e <_strtod_l+0x8e6>
 800942a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800942e:	0d1b      	lsrs	r3, r3, #20
 8009430:	051b      	lsls	r3, r3, #20
 8009432:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009436:	d97a      	bls.n	800952e <_strtod_l+0x8e6>
 8009438:	696b      	ldr	r3, [r5, #20]
 800943a:	b913      	cbnz	r3, 8009442 <_strtod_l+0x7fa>
 800943c:	692b      	ldr	r3, [r5, #16]
 800943e:	2b01      	cmp	r3, #1
 8009440:	dd75      	ble.n	800952e <_strtod_l+0x8e6>
 8009442:	4629      	mov	r1, r5
 8009444:	2201      	movs	r2, #1
 8009446:	4620      	mov	r0, r4
 8009448:	f002 fa6e 	bl	800b928 <__lshift>
 800944c:	4631      	mov	r1, r6
 800944e:	4605      	mov	r5, r0
 8009450:	f002 fad6 	bl	800ba00 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	dd6a      	ble.n	800952e <_strtod_l+0x8e6>
 8009458:	9904      	ldr	r1, [sp, #16]
 800945a:	4a55      	ldr	r2, [pc, #340]	; (80095b0 <_strtod_l+0x968>)
 800945c:	465b      	mov	r3, fp
 800945e:	2900      	cmp	r1, #0
 8009460:	f000 8085 	beq.w	800956e <_strtod_l+0x926>
 8009464:	ea02 010b 	and.w	r1, r2, fp
 8009468:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800946c:	dc7f      	bgt.n	800956e <_strtod_l+0x926>
 800946e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009472:	f77f aeaa 	ble.w	80091ca <_strtod_l+0x582>
 8009476:	4a4f      	ldr	r2, [pc, #316]	; (80095b4 <_strtod_l+0x96c>)
 8009478:	2300      	movs	r3, #0
 800947a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800947e:	4650      	mov	r0, sl
 8009480:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009484:	4659      	mov	r1, fp
 8009486:	f7f7 f8ef 	bl	8000668 <__aeabi_dmul>
 800948a:	460b      	mov	r3, r1
 800948c:	4303      	orrs	r3, r0
 800948e:	bf08      	it	eq
 8009490:	2322      	moveq	r3, #34	; 0x22
 8009492:	4682      	mov	sl, r0
 8009494:	468b      	mov	fp, r1
 8009496:	bf08      	it	eq
 8009498:	6023      	streq	r3, [r4, #0]
 800949a:	e62b      	b.n	80090f4 <_strtod_l+0x4ac>
 800949c:	f04f 32ff 	mov.w	r2, #4294967295
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	ea03 0a0a 	and.w	sl, r3, sl
 80094a8:	e6de      	b.n	8009268 <_strtod_l+0x620>
 80094aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80094ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80094b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80094b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80094ba:	fa01 f308 	lsl.w	r3, r1, r8
 80094be:	930c      	str	r3, [sp, #48]	; 0x30
 80094c0:	9111      	str	r1, [sp, #68]	; 0x44
 80094c2:	e741      	b.n	8009348 <_strtod_l+0x700>
 80094c4:	2300      	movs	r3, #0
 80094c6:	930c      	str	r3, [sp, #48]	; 0x30
 80094c8:	2301      	movs	r3, #1
 80094ca:	9311      	str	r3, [sp, #68]	; 0x44
 80094cc:	e73c      	b.n	8009348 <_strtod_l+0x700>
 80094ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094d0:	4642      	mov	r2, r8
 80094d2:	4620      	mov	r0, r4
 80094d4:	f002 fa28 	bl	800b928 <__lshift>
 80094d8:	901e      	str	r0, [sp, #120]	; 0x78
 80094da:	2800      	cmp	r0, #0
 80094dc:	f47f af66 	bne.w	80093ac <_strtod_l+0x764>
 80094e0:	e5fe      	b.n	80090e0 <_strtod_l+0x498>
 80094e2:	465f      	mov	r7, fp
 80094e4:	d16e      	bne.n	80095c4 <_strtod_l+0x97c>
 80094e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ec:	b342      	cbz	r2, 8009540 <_strtod_l+0x8f8>
 80094ee:	4a32      	ldr	r2, [pc, #200]	; (80095b8 <_strtod_l+0x970>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d128      	bne.n	8009546 <_strtod_l+0x8fe>
 80094f4:	9b04      	ldr	r3, [sp, #16]
 80094f6:	4650      	mov	r0, sl
 80094f8:	b1eb      	cbz	r3, 8009536 <_strtod_l+0x8ee>
 80094fa:	4a2d      	ldr	r2, [pc, #180]	; (80095b0 <_strtod_l+0x968>)
 80094fc:	403a      	ands	r2, r7
 80094fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009502:	f04f 31ff 	mov.w	r1, #4294967295
 8009506:	d819      	bhi.n	800953c <_strtod_l+0x8f4>
 8009508:	0d12      	lsrs	r2, r2, #20
 800950a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800950e:	fa01 f303 	lsl.w	r3, r1, r3
 8009512:	4298      	cmp	r0, r3
 8009514:	d117      	bne.n	8009546 <_strtod_l+0x8fe>
 8009516:	4b29      	ldr	r3, [pc, #164]	; (80095bc <_strtod_l+0x974>)
 8009518:	429f      	cmp	r7, r3
 800951a:	d102      	bne.n	8009522 <_strtod_l+0x8da>
 800951c:	3001      	adds	r0, #1
 800951e:	f43f addf 	beq.w	80090e0 <_strtod_l+0x498>
 8009522:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <_strtod_l+0x968>)
 8009524:	403b      	ands	r3, r7
 8009526:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800952a:	f04f 0a00 	mov.w	sl, #0
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1a0      	bne.n	8009476 <_strtod_l+0x82e>
 8009534:	e5de      	b.n	80090f4 <_strtod_l+0x4ac>
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
 800953a:	e7ea      	b.n	8009512 <_strtod_l+0x8ca>
 800953c:	460b      	mov	r3, r1
 800953e:	e7e8      	b.n	8009512 <_strtod_l+0x8ca>
 8009540:	ea53 030a 	orrs.w	r3, r3, sl
 8009544:	d088      	beq.n	8009458 <_strtod_l+0x810>
 8009546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009548:	b1db      	cbz	r3, 8009582 <_strtod_l+0x93a>
 800954a:	423b      	tst	r3, r7
 800954c:	d0ef      	beq.n	800952e <_strtod_l+0x8e6>
 800954e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	4650      	mov	r0, sl
 8009554:	4659      	mov	r1, fp
 8009556:	b1c3      	cbz	r3, 800958a <_strtod_l+0x942>
 8009558:	f7ff fb58 	bl	8008c0c <sulp>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009564:	f7f6 feca 	bl	80002fc <__adddf3>
 8009568:	4682      	mov	sl, r0
 800956a:	468b      	mov	fp, r1
 800956c:	e7df      	b.n	800952e <_strtod_l+0x8e6>
 800956e:	4013      	ands	r3, r2
 8009570:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009574:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009578:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800957c:	f04f 3aff 	mov.w	sl, #4294967295
 8009580:	e7d5      	b.n	800952e <_strtod_l+0x8e6>
 8009582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009584:	ea13 0f0a 	tst.w	r3, sl
 8009588:	e7e0      	b.n	800954c <_strtod_l+0x904>
 800958a:	f7ff fb3f 	bl	8008c0c <sulp>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009596:	f7f6 feaf 	bl	80002f8 <__aeabi_dsub>
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	4682      	mov	sl, r0
 80095a0:	468b      	mov	fp, r1
 80095a2:	f7f7 fac9 	bl	8000b38 <__aeabi_dcmpeq>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0c1      	beq.n	800952e <_strtod_l+0x8e6>
 80095aa:	e60e      	b.n	80091ca <_strtod_l+0x582>
 80095ac:	fffffc02 	.word	0xfffffc02
 80095b0:	7ff00000 	.word	0x7ff00000
 80095b4:	39500000 	.word	0x39500000
 80095b8:	000fffff 	.word	0x000fffff
 80095bc:	7fefffff 	.word	0x7fefffff
 80095c0:	0800ed98 	.word	0x0800ed98
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	f002 fb96 	bl	800bcf8 <__ratio>
 80095cc:	ec59 8b10 	vmov	r8, r9, d0
 80095d0:	ee10 0a10 	vmov	r0, s0
 80095d4:	2200      	movs	r2, #0
 80095d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095da:	4649      	mov	r1, r9
 80095dc:	f7f7 fac0 	bl	8000b60 <__aeabi_dcmple>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d07c      	beq.n	80096de <_strtod_l+0xa96>
 80095e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d04c      	beq.n	8009684 <_strtod_l+0xa3c>
 80095ea:	4b95      	ldr	r3, [pc, #596]	; (8009840 <_strtod_l+0xbf8>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80095f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009840 <_strtod_l+0xbf8>
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	4b92      	ldr	r3, [pc, #584]	; (8009844 <_strtod_l+0xbfc>)
 80095fc:	403b      	ands	r3, r7
 80095fe:	9311      	str	r3, [sp, #68]	; 0x44
 8009600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009602:	4b91      	ldr	r3, [pc, #580]	; (8009848 <_strtod_l+0xc00>)
 8009604:	429a      	cmp	r2, r3
 8009606:	f040 80b2 	bne.w	800976e <_strtod_l+0xb26>
 800960a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800960e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009612:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009616:	ec4b ab10 	vmov	d0, sl, fp
 800961a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800961e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009622:	f002 fa91 	bl	800bb48 <__ulp>
 8009626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800962a:	ec53 2b10 	vmov	r2, r3, d0
 800962e:	f7f7 f81b 	bl	8000668 <__aeabi_dmul>
 8009632:	4652      	mov	r2, sl
 8009634:	465b      	mov	r3, fp
 8009636:	f7f6 fe61 	bl	80002fc <__adddf3>
 800963a:	460b      	mov	r3, r1
 800963c:	4981      	ldr	r1, [pc, #516]	; (8009844 <_strtod_l+0xbfc>)
 800963e:	4a83      	ldr	r2, [pc, #524]	; (800984c <_strtod_l+0xc04>)
 8009640:	4019      	ands	r1, r3
 8009642:	4291      	cmp	r1, r2
 8009644:	4682      	mov	sl, r0
 8009646:	d95e      	bls.n	8009706 <_strtod_l+0xabe>
 8009648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800964e:	4293      	cmp	r3, r2
 8009650:	d103      	bne.n	800965a <_strtod_l+0xa12>
 8009652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009654:	3301      	adds	r3, #1
 8009656:	f43f ad43 	beq.w	80090e0 <_strtod_l+0x498>
 800965a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009858 <_strtod_l+0xc10>
 800965e:	f04f 3aff 	mov.w	sl, #4294967295
 8009662:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009664:	4620      	mov	r0, r4
 8009666:	f001 ff43 	bl	800b4f0 <_Bfree>
 800966a:	9907      	ldr	r1, [sp, #28]
 800966c:	4620      	mov	r0, r4
 800966e:	f001 ff3f 	bl	800b4f0 <_Bfree>
 8009672:	4631      	mov	r1, r6
 8009674:	4620      	mov	r0, r4
 8009676:	f001 ff3b 	bl	800b4f0 <_Bfree>
 800967a:	4629      	mov	r1, r5
 800967c:	4620      	mov	r0, r4
 800967e:	f001 ff37 	bl	800b4f0 <_Bfree>
 8009682:	e613      	b.n	80092ac <_strtod_l+0x664>
 8009684:	f1ba 0f00 	cmp.w	sl, #0
 8009688:	d11b      	bne.n	80096c2 <_strtod_l+0xa7a>
 800968a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800968e:	b9f3      	cbnz	r3, 80096ce <_strtod_l+0xa86>
 8009690:	4b6b      	ldr	r3, [pc, #428]	; (8009840 <_strtod_l+0xbf8>)
 8009692:	2200      	movs	r2, #0
 8009694:	4640      	mov	r0, r8
 8009696:	4649      	mov	r1, r9
 8009698:	f7f7 fa58 	bl	8000b4c <__aeabi_dcmplt>
 800969c:	b9d0      	cbnz	r0, 80096d4 <_strtod_l+0xa8c>
 800969e:	4640      	mov	r0, r8
 80096a0:	4649      	mov	r1, r9
 80096a2:	4b6b      	ldr	r3, [pc, #428]	; (8009850 <_strtod_l+0xc08>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	f7f6 ffdf 	bl	8000668 <__aeabi_dmul>
 80096aa:	4680      	mov	r8, r0
 80096ac:	4689      	mov	r9, r1
 80096ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80096b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80096b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80096bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80096c0:	e79b      	b.n	80095fa <_strtod_l+0x9b2>
 80096c2:	f1ba 0f01 	cmp.w	sl, #1
 80096c6:	d102      	bne.n	80096ce <_strtod_l+0xa86>
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	f43f ad7e 	beq.w	80091ca <_strtod_l+0x582>
 80096ce:	4b61      	ldr	r3, [pc, #388]	; (8009854 <_strtod_l+0xc0c>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	e78c      	b.n	80095ee <_strtod_l+0x9a6>
 80096d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009850 <_strtod_l+0xc08>
 80096d8:	f04f 0800 	mov.w	r8, #0
 80096dc:	e7e7      	b.n	80096ae <_strtod_l+0xa66>
 80096de:	4b5c      	ldr	r3, [pc, #368]	; (8009850 <_strtod_l+0xc08>)
 80096e0:	4640      	mov	r0, r8
 80096e2:	4649      	mov	r1, r9
 80096e4:	2200      	movs	r2, #0
 80096e6:	f7f6 ffbf 	bl	8000668 <__aeabi_dmul>
 80096ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	b933      	cbnz	r3, 8009700 <_strtod_l+0xab8>
 80096f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096f6:	9012      	str	r0, [sp, #72]	; 0x48
 80096f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80096fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80096fe:	e7dd      	b.n	80096bc <_strtod_l+0xa74>
 8009700:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009704:	e7f9      	b.n	80096fa <_strtod_l+0xab2>
 8009706:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800970a:	9b04      	ldr	r3, [sp, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1a8      	bne.n	8009662 <_strtod_l+0xa1a>
 8009710:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009714:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009716:	0d1b      	lsrs	r3, r3, #20
 8009718:	051b      	lsls	r3, r3, #20
 800971a:	429a      	cmp	r2, r3
 800971c:	d1a1      	bne.n	8009662 <_strtod_l+0xa1a>
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 fb51 	bl	8000dc8 <__aeabi_d2lz>
 8009726:	f7f6 ff71 	bl	800060c <__aeabi_l2d>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4640      	mov	r0, r8
 8009730:	4649      	mov	r1, r9
 8009732:	f7f6 fde1 	bl	80002f8 <__aeabi_dsub>
 8009736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800973c:	ea43 030a 	orr.w	r3, r3, sl
 8009740:	4313      	orrs	r3, r2
 8009742:	4680      	mov	r8, r0
 8009744:	4689      	mov	r9, r1
 8009746:	d053      	beq.n	80097f0 <_strtod_l+0xba8>
 8009748:	a335      	add	r3, pc, #212	; (adr r3, 8009820 <_strtod_l+0xbd8>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f7 f9fd 	bl	8000b4c <__aeabi_dcmplt>
 8009752:	2800      	cmp	r0, #0
 8009754:	f47f acce 	bne.w	80090f4 <_strtod_l+0x4ac>
 8009758:	a333      	add	r3, pc, #204	; (adr r3, 8009828 <_strtod_l+0xbe0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	4640      	mov	r0, r8
 8009760:	4649      	mov	r1, r9
 8009762:	f7f7 fa11 	bl	8000b88 <__aeabi_dcmpgt>
 8009766:	2800      	cmp	r0, #0
 8009768:	f43f af7b 	beq.w	8009662 <_strtod_l+0xa1a>
 800976c:	e4c2      	b.n	80090f4 <_strtod_l+0x4ac>
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	b333      	cbz	r3, 80097c0 <_strtod_l+0xb78>
 8009772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009774:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009778:	d822      	bhi.n	80097c0 <_strtod_l+0xb78>
 800977a:	a32d      	add	r3, pc, #180	; (adr r3, 8009830 <_strtod_l+0xbe8>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f9ec 	bl	8000b60 <__aeabi_dcmple>
 8009788:	b1a0      	cbz	r0, 80097b4 <_strtod_l+0xb6c>
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
 800978e:	f7f7 fa43 	bl	8000c18 <__aeabi_d2uiz>
 8009792:	2801      	cmp	r0, #1
 8009794:	bf38      	it	cc
 8009796:	2001      	movcc	r0, #1
 8009798:	f7f6 feec 	bl	8000574 <__aeabi_ui2d>
 800979c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	bb13      	cbnz	r3, 80097ea <_strtod_l+0xba2>
 80097a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097a8:	9014      	str	r0, [sp, #80]	; 0x50
 80097aa:	9315      	str	r3, [sp, #84]	; 0x54
 80097ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80097b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	930d      	str	r3, [sp, #52]	; 0x34
 80097c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80097c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097cc:	f002 f9bc 	bl	800bb48 <__ulp>
 80097d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097d4:	ec53 2b10 	vmov	r2, r3, d0
 80097d8:	f7f6 ff46 	bl	8000668 <__aeabi_dmul>
 80097dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097e0:	f7f6 fd8c 	bl	80002fc <__adddf3>
 80097e4:	4682      	mov	sl, r0
 80097e6:	468b      	mov	fp, r1
 80097e8:	e78f      	b.n	800970a <_strtod_l+0xac2>
 80097ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80097ee:	e7dd      	b.n	80097ac <_strtod_l+0xb64>
 80097f0:	a311      	add	r3, pc, #68	; (adr r3, 8009838 <_strtod_l+0xbf0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f7 f9a9 	bl	8000b4c <__aeabi_dcmplt>
 80097fa:	e7b4      	b.n	8009766 <_strtod_l+0xb1e>
 80097fc:	2300      	movs	r3, #0
 80097fe:	930e      	str	r3, [sp, #56]	; 0x38
 8009800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	f7ff ba65 	b.w	8008cd4 <_strtod_l+0x8c>
 800980a:	2b65      	cmp	r3, #101	; 0x65
 800980c:	f43f ab5d 	beq.w	8008eca <_strtod_l+0x282>
 8009810:	2b45      	cmp	r3, #69	; 0x45
 8009812:	f43f ab5a 	beq.w	8008eca <_strtod_l+0x282>
 8009816:	2201      	movs	r2, #1
 8009818:	f7ff bb92 	b.w	8008f40 <_strtod_l+0x2f8>
 800981c:	f3af 8000 	nop.w
 8009820:	94a03595 	.word	0x94a03595
 8009824:	3fdfffff 	.word	0x3fdfffff
 8009828:	35afe535 	.word	0x35afe535
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	ffc00000 	.word	0xffc00000
 8009834:	41dfffff 	.word	0x41dfffff
 8009838:	94a03595 	.word	0x94a03595
 800983c:	3fcfffff 	.word	0x3fcfffff
 8009840:	3ff00000 	.word	0x3ff00000
 8009844:	7ff00000 	.word	0x7ff00000
 8009848:	7fe00000 	.word	0x7fe00000
 800984c:	7c9fffff 	.word	0x7c9fffff
 8009850:	3fe00000 	.word	0x3fe00000
 8009854:	bff00000 	.word	0xbff00000
 8009858:	7fefffff 	.word	0x7fefffff

0800985c <_strtod_r>:
 800985c:	4b01      	ldr	r3, [pc, #4]	; (8009864 <_strtod_r+0x8>)
 800985e:	f7ff b9f3 	b.w	8008c48 <_strtod_l>
 8009862:	bf00      	nop
 8009864:	20000074 	.word	0x20000074

08009868 <strtok>:
 8009868:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <strtok+0x5c>)
 800986a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800986c:	681e      	ldr	r6, [r3, #0]
 800986e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009870:	4605      	mov	r5, r0
 8009872:	b9fc      	cbnz	r4, 80098b4 <strtok+0x4c>
 8009874:	2050      	movs	r0, #80	; 0x50
 8009876:	9101      	str	r1, [sp, #4]
 8009878:	f001 fdd2 	bl	800b420 <malloc>
 800987c:	9901      	ldr	r1, [sp, #4]
 800987e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009880:	4602      	mov	r2, r0
 8009882:	b920      	cbnz	r0, 800988e <strtok+0x26>
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <strtok+0x60>)
 8009886:	4811      	ldr	r0, [pc, #68]	; (80098cc <strtok+0x64>)
 8009888:	2157      	movs	r1, #87	; 0x57
 800988a:	f000 f98f 	bl	8009bac <__assert_func>
 800988e:	e9c0 4400 	strd	r4, r4, [r0]
 8009892:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009896:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800989a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800989e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80098a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80098a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80098aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80098ae:	6184      	str	r4, [r0, #24]
 80098b0:	7704      	strb	r4, [r0, #28]
 80098b2:	6244      	str	r4, [r0, #36]	; 0x24
 80098b4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80098b6:	2301      	movs	r3, #1
 80098b8:	4628      	mov	r0, r5
 80098ba:	b002      	add	sp, #8
 80098bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098c0:	f000 b806 	b.w	80098d0 <__strtok_r>
 80098c4:	2000000c 	.word	0x2000000c
 80098c8:	0800edc0 	.word	0x0800edc0
 80098cc:	0800edd7 	.word	0x0800edd7

080098d0 <__strtok_r>:
 80098d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d2:	b908      	cbnz	r0, 80098d8 <__strtok_r+0x8>
 80098d4:	6810      	ldr	r0, [r2, #0]
 80098d6:	b188      	cbz	r0, 80098fc <__strtok_r+0x2c>
 80098d8:	4604      	mov	r4, r0
 80098da:	4620      	mov	r0, r4
 80098dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80098e0:	460f      	mov	r7, r1
 80098e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80098e6:	b91e      	cbnz	r6, 80098f0 <__strtok_r+0x20>
 80098e8:	b965      	cbnz	r5, 8009904 <__strtok_r+0x34>
 80098ea:	6015      	str	r5, [r2, #0]
 80098ec:	4628      	mov	r0, r5
 80098ee:	e005      	b.n	80098fc <__strtok_r+0x2c>
 80098f0:	42b5      	cmp	r5, r6
 80098f2:	d1f6      	bne.n	80098e2 <__strtok_r+0x12>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1f0      	bne.n	80098da <__strtok_r+0xa>
 80098f8:	6014      	str	r4, [r2, #0]
 80098fa:	7003      	strb	r3, [r0, #0]
 80098fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fe:	461c      	mov	r4, r3
 8009900:	e00c      	b.n	800991c <__strtok_r+0x4c>
 8009902:	b915      	cbnz	r5, 800990a <__strtok_r+0x3a>
 8009904:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009908:	460e      	mov	r6, r1
 800990a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800990e:	42ab      	cmp	r3, r5
 8009910:	d1f7      	bne.n	8009902 <__strtok_r+0x32>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f3      	beq.n	80098fe <__strtok_r+0x2e>
 8009916:	2300      	movs	r3, #0
 8009918:	f804 3c01 	strb.w	r3, [r4, #-1]
 800991c:	6014      	str	r4, [r2, #0]
 800991e:	e7ed      	b.n	80098fc <__strtok_r+0x2c>

08009920 <_strtol_l.isra.0>:
 8009920:	2b01      	cmp	r3, #1
 8009922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009926:	d001      	beq.n	800992c <_strtol_l.isra.0+0xc>
 8009928:	2b24      	cmp	r3, #36	; 0x24
 800992a:	d906      	bls.n	800993a <_strtol_l.isra.0+0x1a>
 800992c:	f7fe f9c6 	bl	8007cbc <__errno>
 8009930:	2316      	movs	r3, #22
 8009932:	6003      	str	r3, [r0, #0]
 8009934:	2000      	movs	r0, #0
 8009936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993a:	4f3a      	ldr	r7, [pc, #232]	; (8009a24 <_strtol_l.isra.0+0x104>)
 800993c:	468e      	mov	lr, r1
 800993e:	4676      	mov	r6, lr
 8009940:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009944:	5de5      	ldrb	r5, [r4, r7]
 8009946:	f015 0508 	ands.w	r5, r5, #8
 800994a:	d1f8      	bne.n	800993e <_strtol_l.isra.0+0x1e>
 800994c:	2c2d      	cmp	r4, #45	; 0x2d
 800994e:	d134      	bne.n	80099ba <_strtol_l.isra.0+0x9a>
 8009950:	f89e 4000 	ldrb.w	r4, [lr]
 8009954:	f04f 0801 	mov.w	r8, #1
 8009958:	f106 0e02 	add.w	lr, r6, #2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d05c      	beq.n	8009a1a <_strtol_l.isra.0+0xfa>
 8009960:	2b10      	cmp	r3, #16
 8009962:	d10c      	bne.n	800997e <_strtol_l.isra.0+0x5e>
 8009964:	2c30      	cmp	r4, #48	; 0x30
 8009966:	d10a      	bne.n	800997e <_strtol_l.isra.0+0x5e>
 8009968:	f89e 4000 	ldrb.w	r4, [lr]
 800996c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009970:	2c58      	cmp	r4, #88	; 0x58
 8009972:	d14d      	bne.n	8009a10 <_strtol_l.isra.0+0xf0>
 8009974:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009978:	2310      	movs	r3, #16
 800997a:	f10e 0e02 	add.w	lr, lr, #2
 800997e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009982:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009986:	2600      	movs	r6, #0
 8009988:	fbbc f9f3 	udiv	r9, ip, r3
 800998c:	4635      	mov	r5, r6
 800998e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009992:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009996:	2f09      	cmp	r7, #9
 8009998:	d818      	bhi.n	80099cc <_strtol_l.isra.0+0xac>
 800999a:	463c      	mov	r4, r7
 800999c:	42a3      	cmp	r3, r4
 800999e:	dd24      	ble.n	80099ea <_strtol_l.isra.0+0xca>
 80099a0:	2e00      	cmp	r6, #0
 80099a2:	db1f      	blt.n	80099e4 <_strtol_l.isra.0+0xc4>
 80099a4:	45a9      	cmp	r9, r5
 80099a6:	d31d      	bcc.n	80099e4 <_strtol_l.isra.0+0xc4>
 80099a8:	d101      	bne.n	80099ae <_strtol_l.isra.0+0x8e>
 80099aa:	45a2      	cmp	sl, r4
 80099ac:	db1a      	blt.n	80099e4 <_strtol_l.isra.0+0xc4>
 80099ae:	fb05 4503 	mla	r5, r5, r3, r4
 80099b2:	2601      	movs	r6, #1
 80099b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80099b8:	e7eb      	b.n	8009992 <_strtol_l.isra.0+0x72>
 80099ba:	2c2b      	cmp	r4, #43	; 0x2b
 80099bc:	bf08      	it	eq
 80099be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80099c2:	46a8      	mov	r8, r5
 80099c4:	bf08      	it	eq
 80099c6:	f106 0e02 	addeq.w	lr, r6, #2
 80099ca:	e7c7      	b.n	800995c <_strtol_l.isra.0+0x3c>
 80099cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80099d0:	2f19      	cmp	r7, #25
 80099d2:	d801      	bhi.n	80099d8 <_strtol_l.isra.0+0xb8>
 80099d4:	3c37      	subs	r4, #55	; 0x37
 80099d6:	e7e1      	b.n	800999c <_strtol_l.isra.0+0x7c>
 80099d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80099dc:	2f19      	cmp	r7, #25
 80099de:	d804      	bhi.n	80099ea <_strtol_l.isra.0+0xca>
 80099e0:	3c57      	subs	r4, #87	; 0x57
 80099e2:	e7db      	b.n	800999c <_strtol_l.isra.0+0x7c>
 80099e4:	f04f 36ff 	mov.w	r6, #4294967295
 80099e8:	e7e4      	b.n	80099b4 <_strtol_l.isra.0+0x94>
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	da05      	bge.n	80099fa <_strtol_l.isra.0+0xda>
 80099ee:	2322      	movs	r3, #34	; 0x22
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	4665      	mov	r5, ip
 80099f4:	b942      	cbnz	r2, 8009a08 <_strtol_l.isra.0+0xe8>
 80099f6:	4628      	mov	r0, r5
 80099f8:	e79d      	b.n	8009936 <_strtol_l.isra.0+0x16>
 80099fa:	f1b8 0f00 	cmp.w	r8, #0
 80099fe:	d000      	beq.n	8009a02 <_strtol_l.isra.0+0xe2>
 8009a00:	426d      	negs	r5, r5
 8009a02:	2a00      	cmp	r2, #0
 8009a04:	d0f7      	beq.n	80099f6 <_strtol_l.isra.0+0xd6>
 8009a06:	b10e      	cbz	r6, 8009a0c <_strtol_l.isra.0+0xec>
 8009a08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009a0c:	6011      	str	r1, [r2, #0]
 8009a0e:	e7f2      	b.n	80099f6 <_strtol_l.isra.0+0xd6>
 8009a10:	2430      	movs	r4, #48	; 0x30
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1b3      	bne.n	800997e <_strtol_l.isra.0+0x5e>
 8009a16:	2308      	movs	r3, #8
 8009a18:	e7b1      	b.n	800997e <_strtol_l.isra.0+0x5e>
 8009a1a:	2c30      	cmp	r4, #48	; 0x30
 8009a1c:	d0a4      	beq.n	8009968 <_strtol_l.isra.0+0x48>
 8009a1e:	230a      	movs	r3, #10
 8009a20:	e7ad      	b.n	800997e <_strtol_l.isra.0+0x5e>
 8009a22:	bf00      	nop
 8009a24:	0800ee75 	.word	0x0800ee75

08009a28 <_strtol_r>:
 8009a28:	f7ff bf7a 	b.w	8009920 <_strtol_l.isra.0>

08009a2c <__swbuf_r>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	460e      	mov	r6, r1
 8009a30:	4614      	mov	r4, r2
 8009a32:	4605      	mov	r5, r0
 8009a34:	b118      	cbz	r0, 8009a3e <__swbuf_r+0x12>
 8009a36:	6983      	ldr	r3, [r0, #24]
 8009a38:	b90b      	cbnz	r3, 8009a3e <__swbuf_r+0x12>
 8009a3a:	f001 f867 	bl	800ab0c <__sinit>
 8009a3e:	4b21      	ldr	r3, [pc, #132]	; (8009ac4 <__swbuf_r+0x98>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d12b      	bne.n	8009a9c <__swbuf_r+0x70>
 8009a44:	686c      	ldr	r4, [r5, #4]
 8009a46:	69a3      	ldr	r3, [r4, #24]
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	071a      	lsls	r2, r3, #28
 8009a4e:	d52f      	bpl.n	8009ab0 <__swbuf_r+0x84>
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	b36b      	cbz	r3, 8009ab0 <__swbuf_r+0x84>
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	1ac0      	subs	r0, r0, r3
 8009a5a:	6963      	ldr	r3, [r4, #20]
 8009a5c:	b2f6      	uxtb	r6, r6
 8009a5e:	4283      	cmp	r3, r0
 8009a60:	4637      	mov	r7, r6
 8009a62:	dc04      	bgt.n	8009a6e <__swbuf_r+0x42>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 ffbc 	bl	800a9e4 <_fflush_r>
 8009a6c:	bb30      	cbnz	r0, 8009abc <__swbuf_r+0x90>
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	60a3      	str	r3, [r4, #8]
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	701e      	strb	r6, [r3, #0]
 8009a7c:	6963      	ldr	r3, [r4, #20]
 8009a7e:	3001      	adds	r0, #1
 8009a80:	4283      	cmp	r3, r0
 8009a82:	d004      	beq.n	8009a8e <__swbuf_r+0x62>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	07db      	lsls	r3, r3, #31
 8009a88:	d506      	bpl.n	8009a98 <__swbuf_r+0x6c>
 8009a8a:	2e0a      	cmp	r6, #10
 8009a8c:	d104      	bne.n	8009a98 <__swbuf_r+0x6c>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f000 ffa7 	bl	800a9e4 <_fflush_r>
 8009a96:	b988      	cbnz	r0, 8009abc <__swbuf_r+0x90>
 8009a98:	4638      	mov	r0, r7
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <__swbuf_r+0x9c>)
 8009a9e:	429c      	cmp	r4, r3
 8009aa0:	d101      	bne.n	8009aa6 <__swbuf_r+0x7a>
 8009aa2:	68ac      	ldr	r4, [r5, #8]
 8009aa4:	e7cf      	b.n	8009a46 <__swbuf_r+0x1a>
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <__swbuf_r+0xa0>)
 8009aa8:	429c      	cmp	r4, r3
 8009aaa:	bf08      	it	eq
 8009aac:	68ec      	ldreq	r4, [r5, #12]
 8009aae:	e7ca      	b.n	8009a46 <__swbuf_r+0x1a>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 f80c 	bl	8009ad0 <__swsetup_r>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d0cb      	beq.n	8009a54 <__swbuf_r+0x28>
 8009abc:	f04f 37ff 	mov.w	r7, #4294967295
 8009ac0:	e7ea      	b.n	8009a98 <__swbuf_r+0x6c>
 8009ac2:	bf00      	nop
 8009ac4:	0800f014 	.word	0x0800f014
 8009ac8:	0800f034 	.word	0x0800f034
 8009acc:	0800eff4 	.word	0x0800eff4

08009ad0 <__swsetup_r>:
 8009ad0:	4b32      	ldr	r3, [pc, #200]	; (8009b9c <__swsetup_r+0xcc>)
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460c      	mov	r4, r1
 8009ada:	b125      	cbz	r5, 8009ae6 <__swsetup_r+0x16>
 8009adc:	69ab      	ldr	r3, [r5, #24]
 8009ade:	b913      	cbnz	r3, 8009ae6 <__swsetup_r+0x16>
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f001 f813 	bl	800ab0c <__sinit>
 8009ae6:	4b2e      	ldr	r3, [pc, #184]	; (8009ba0 <__swsetup_r+0xd0>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d10f      	bne.n	8009b0c <__swsetup_r+0x3c>
 8009aec:	686c      	ldr	r4, [r5, #4]
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009af4:	0719      	lsls	r1, r3, #28
 8009af6:	d42c      	bmi.n	8009b52 <__swsetup_r+0x82>
 8009af8:	06dd      	lsls	r5, r3, #27
 8009afa:	d411      	bmi.n	8009b20 <__swsetup_r+0x50>
 8009afc:	2309      	movs	r3, #9
 8009afe:	6033      	str	r3, [r6, #0]
 8009b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0a:	e03e      	b.n	8009b8a <__swsetup_r+0xba>
 8009b0c:	4b25      	ldr	r3, [pc, #148]	; (8009ba4 <__swsetup_r+0xd4>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d101      	bne.n	8009b16 <__swsetup_r+0x46>
 8009b12:	68ac      	ldr	r4, [r5, #8]
 8009b14:	e7eb      	b.n	8009aee <__swsetup_r+0x1e>
 8009b16:	4b24      	ldr	r3, [pc, #144]	; (8009ba8 <__swsetup_r+0xd8>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	bf08      	it	eq
 8009b1c:	68ec      	ldreq	r4, [r5, #12]
 8009b1e:	e7e6      	b.n	8009aee <__swsetup_r+0x1e>
 8009b20:	0758      	lsls	r0, r3, #29
 8009b22:	d512      	bpl.n	8009b4a <__swsetup_r+0x7a>
 8009b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b26:	b141      	cbz	r1, 8009b3a <__swsetup_r+0x6a>
 8009b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b2c:	4299      	cmp	r1, r3
 8009b2e:	d002      	beq.n	8009b36 <__swsetup_r+0x66>
 8009b30:	4630      	mov	r0, r6
 8009b32:	f002 f967 	bl	800be04 <_free_r>
 8009b36:	2300      	movs	r3, #0
 8009b38:	6363      	str	r3, [r4, #52]	; 0x34
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f043 0308 	orr.w	r3, r3, #8
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	b94b      	cbnz	r3, 8009b6a <__swsetup_r+0x9a>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b60:	d003      	beq.n	8009b6a <__swsetup_r+0x9a>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4630      	mov	r0, r6
 8009b66:	f001 fc1b 	bl	800b3a0 <__smakebuf_r>
 8009b6a:	89a0      	ldrh	r0, [r4, #12]
 8009b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b70:	f010 0301 	ands.w	r3, r0, #1
 8009b74:	d00a      	beq.n	8009b8c <__swsetup_r+0xbc>
 8009b76:	2300      	movs	r3, #0
 8009b78:	60a3      	str	r3, [r4, #8]
 8009b7a:	6963      	ldr	r3, [r4, #20]
 8009b7c:	425b      	negs	r3, r3
 8009b7e:	61a3      	str	r3, [r4, #24]
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	b943      	cbnz	r3, 8009b96 <__swsetup_r+0xc6>
 8009b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b88:	d1ba      	bne.n	8009b00 <__swsetup_r+0x30>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	0781      	lsls	r1, r0, #30
 8009b8e:	bf58      	it	pl
 8009b90:	6963      	ldrpl	r3, [r4, #20]
 8009b92:	60a3      	str	r3, [r4, #8]
 8009b94:	e7f4      	b.n	8009b80 <__swsetup_r+0xb0>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e7f7      	b.n	8009b8a <__swsetup_r+0xba>
 8009b9a:	bf00      	nop
 8009b9c:	2000000c 	.word	0x2000000c
 8009ba0:	0800f014 	.word	0x0800f014
 8009ba4:	0800f034 	.word	0x0800f034
 8009ba8:	0800eff4 	.word	0x0800eff4

08009bac <__assert_func>:
 8009bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bae:	4614      	mov	r4, r2
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4b09      	ldr	r3, [pc, #36]	; (8009bd8 <__assert_func+0x2c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	68d8      	ldr	r0, [r3, #12]
 8009bba:	b14c      	cbz	r4, 8009bd0 <__assert_func+0x24>
 8009bbc:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <__assert_func+0x30>)
 8009bbe:	9100      	str	r1, [sp, #0]
 8009bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bc4:	4906      	ldr	r1, [pc, #24]	; (8009be0 <__assert_func+0x34>)
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f001 f81e 	bl	800ac08 <fiprintf>
 8009bcc:	f002 fd50 	bl	800c670 <abort>
 8009bd0:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <__assert_func+0x38>)
 8009bd2:	461c      	mov	r4, r3
 8009bd4:	e7f3      	b.n	8009bbe <__assert_func+0x12>
 8009bd6:	bf00      	nop
 8009bd8:	2000000c 	.word	0x2000000c
 8009bdc:	0800ee38 	.word	0x0800ee38
 8009be0:	0800ee45 	.word	0x0800ee45
 8009be4:	0800ee73 	.word	0x0800ee73

08009be8 <quorem>:
 8009be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	6903      	ldr	r3, [r0, #16]
 8009bee:	690c      	ldr	r4, [r1, #16]
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	f2c0 8081 	blt.w	8009cfa <quorem+0x112>
 8009bf8:	3c01      	subs	r4, #1
 8009bfa:	f101 0814 	add.w	r8, r1, #20
 8009bfe:	f100 0514 	add.w	r5, r0, #20
 8009c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c10:	3301      	adds	r3, #1
 8009c12:	429a      	cmp	r2, r3
 8009c14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c20:	d331      	bcc.n	8009c86 <quorem+0x9e>
 8009c22:	f04f 0e00 	mov.w	lr, #0
 8009c26:	4640      	mov	r0, r8
 8009c28:	46ac      	mov	ip, r5
 8009c2a:	46f2      	mov	sl, lr
 8009c2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c30:	b293      	uxth	r3, r2
 8009c32:	fb06 e303 	mla	r3, r6, r3, lr
 8009c36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c40:	0c12      	lsrs	r2, r2, #16
 8009c42:	f8dc a000 	ldr.w	sl, [ip]
 8009c46:	fb06 e202 	mla	r2, r6, r2, lr
 8009c4a:	fa13 f38a 	uxtah	r3, r3, sl
 8009c4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c52:	fa1f fa82 	uxth.w	sl, r2
 8009c56:	f8dc 2000 	ldr.w	r2, [ip]
 8009c5a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009c5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c68:	4581      	cmp	r9, r0
 8009c6a:	f84c 3b04 	str.w	r3, [ip], #4
 8009c6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c72:	d2db      	bcs.n	8009c2c <quorem+0x44>
 8009c74:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c78:	b92b      	cbnz	r3, 8009c86 <quorem+0x9e>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	461a      	mov	r2, r3
 8009c82:	d32e      	bcc.n	8009ce2 <quorem+0xfa>
 8009c84:	613c      	str	r4, [r7, #16]
 8009c86:	4638      	mov	r0, r7
 8009c88:	f001 feba 	bl	800ba00 <__mcmp>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	db24      	blt.n	8009cda <quorem+0xf2>
 8009c90:	3601      	adds	r6, #1
 8009c92:	4628      	mov	r0, r5
 8009c94:	f04f 0c00 	mov.w	ip, #0
 8009c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c9c:	f8d0 e000 	ldr.w	lr, [r0]
 8009ca0:	b293      	uxth	r3, r2
 8009ca2:	ebac 0303 	sub.w	r3, ip, r3
 8009ca6:	0c12      	lsrs	r2, r2, #16
 8009ca8:	fa13 f38e 	uxtah	r3, r3, lr
 8009cac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cba:	45c1      	cmp	r9, r8
 8009cbc:	f840 3b04 	str.w	r3, [r0], #4
 8009cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009cc4:	d2e8      	bcs.n	8009c98 <quorem+0xb0>
 8009cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cce:	b922      	cbnz	r2, 8009cda <quorem+0xf2>
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	d30a      	bcc.n	8009cee <quorem+0x106>
 8009cd8:	613c      	str	r4, [r7, #16]
 8009cda:	4630      	mov	r0, r6
 8009cdc:	b003      	add	sp, #12
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	3b04      	subs	r3, #4
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	d1cc      	bne.n	8009c84 <quorem+0x9c>
 8009cea:	3c01      	subs	r4, #1
 8009cec:	e7c7      	b.n	8009c7e <quorem+0x96>
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	d1f0      	bne.n	8009cd8 <quorem+0xf0>
 8009cf6:	3c01      	subs	r4, #1
 8009cf8:	e7eb      	b.n	8009cd2 <quorem+0xea>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e7ee      	b.n	8009cdc <quorem+0xf4>
	...

08009d00 <_dtoa_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	ed2d 8b02 	vpush	{d8}
 8009d08:	ec57 6b10 	vmov	r6, r7, d0
 8009d0c:	b095      	sub	sp, #84	; 0x54
 8009d0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d14:	9105      	str	r1, [sp, #20]
 8009d16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d20:	b975      	cbnz	r5, 8009d40 <_dtoa_r+0x40>
 8009d22:	2010      	movs	r0, #16
 8009d24:	f001 fb7c 	bl	800b420 <malloc>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d2c:	b920      	cbnz	r0, 8009d38 <_dtoa_r+0x38>
 8009d2e:	4bb2      	ldr	r3, [pc, #712]	; (8009ff8 <_dtoa_r+0x2f8>)
 8009d30:	21ea      	movs	r1, #234	; 0xea
 8009d32:	48b2      	ldr	r0, [pc, #712]	; (8009ffc <_dtoa_r+0x2fc>)
 8009d34:	f7ff ff3a 	bl	8009bac <__assert_func>
 8009d38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d3c:	6005      	str	r5, [r0, #0]
 8009d3e:	60c5      	str	r5, [r0, #12]
 8009d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	b151      	cbz	r1, 8009d5c <_dtoa_r+0x5c>
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	604a      	str	r2, [r1, #4]
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4093      	lsls	r3, r2
 8009d4e:	608b      	str	r3, [r1, #8]
 8009d50:	4620      	mov	r0, r4
 8009d52:	f001 fbcd 	bl	800b4f0 <_Bfree>
 8009d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	1e3b      	subs	r3, r7, #0
 8009d5e:	bfb9      	ittee	lt
 8009d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d64:	9303      	strlt	r3, [sp, #12]
 8009d66:	2300      	movge	r3, #0
 8009d68:	f8c8 3000 	strge.w	r3, [r8]
 8009d6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009d70:	4ba3      	ldr	r3, [pc, #652]	; (800a000 <_dtoa_r+0x300>)
 8009d72:	bfbc      	itt	lt
 8009d74:	2201      	movlt	r2, #1
 8009d76:	f8c8 2000 	strlt.w	r2, [r8]
 8009d7a:	ea33 0309 	bics.w	r3, r3, r9
 8009d7e:	d11b      	bne.n	8009db8 <_dtoa_r+0xb8>
 8009d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d82:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d8c:	4333      	orrs	r3, r6
 8009d8e:	f000 857a 	beq.w	800a886 <_dtoa_r+0xb86>
 8009d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d94:	b963      	cbnz	r3, 8009db0 <_dtoa_r+0xb0>
 8009d96:	4b9b      	ldr	r3, [pc, #620]	; (800a004 <_dtoa_r+0x304>)
 8009d98:	e024      	b.n	8009de4 <_dtoa_r+0xe4>
 8009d9a:	4b9b      	ldr	r3, [pc, #620]	; (800a008 <_dtoa_r+0x308>)
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	3308      	adds	r3, #8
 8009da0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	9800      	ldr	r0, [sp, #0]
 8009da6:	b015      	add	sp, #84	; 0x54
 8009da8:	ecbd 8b02 	vpop	{d8}
 8009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db0:	4b94      	ldr	r3, [pc, #592]	; (800a004 <_dtoa_r+0x304>)
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	3303      	adds	r3, #3
 8009db6:	e7f3      	b.n	8009da0 <_dtoa_r+0xa0>
 8009db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	ec51 0b17 	vmov	r0, r1, d7
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009dc8:	f7f6 feb6 	bl	8000b38 <__aeabi_dcmpeq>
 8009dcc:	4680      	mov	r8, r0
 8009dce:	b158      	cbz	r0, 8009de8 <_dtoa_r+0xe8>
 8009dd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8551 	beq.w	800a880 <_dtoa_r+0xb80>
 8009dde:	488b      	ldr	r0, [pc, #556]	; (800a00c <_dtoa_r+0x30c>)
 8009de0:	6018      	str	r0, [r3, #0]
 8009de2:	1e43      	subs	r3, r0, #1
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	e7dd      	b.n	8009da4 <_dtoa_r+0xa4>
 8009de8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009dec:	aa12      	add	r2, sp, #72	; 0x48
 8009dee:	a913      	add	r1, sp, #76	; 0x4c
 8009df0:	4620      	mov	r0, r4
 8009df2:	f001 ff25 	bl	800bc40 <__d2b>
 8009df6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dfa:	4683      	mov	fp, r0
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	d07c      	beq.n	8009efa <_dtoa_r+0x1fa>
 8009e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009e0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e1a:	4b7d      	ldr	r3, [pc, #500]	; (800a010 <_dtoa_r+0x310>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fa69 	bl	80002f8 <__aeabi_dsub>
 8009e26:	a36e      	add	r3, pc, #440	; (adr r3, 8009fe0 <_dtoa_r+0x2e0>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	f7f6 fc1c 	bl	8000668 <__aeabi_dmul>
 8009e30:	a36d      	add	r3, pc, #436	; (adr r3, 8009fe8 <_dtoa_r+0x2e8>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fa61 	bl	80002fc <__adddf3>
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	460f      	mov	r7, r1
 8009e40:	f7f6 fba8 	bl	8000594 <__aeabi_i2d>
 8009e44:	a36a      	add	r3, pc, #424	; (adr r3, 8009ff0 <_dtoa_r+0x2f0>)
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	f7f6 fc0d 	bl	8000668 <__aeabi_dmul>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fa51 	bl	80002fc <__adddf3>
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	f7f6 feb3 	bl	8000bc8 <__aeabi_d2iz>
 8009e62:	2200      	movs	r2, #0
 8009e64:	4682      	mov	sl, r0
 8009e66:	2300      	movs	r3, #0
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f6 fe6e 	bl	8000b4c <__aeabi_dcmplt>
 8009e70:	b148      	cbz	r0, 8009e86 <_dtoa_r+0x186>
 8009e72:	4650      	mov	r0, sl
 8009e74:	f7f6 fb8e 	bl	8000594 <__aeabi_i2d>
 8009e78:	4632      	mov	r2, r6
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	f7f6 fe5c 	bl	8000b38 <__aeabi_dcmpeq>
 8009e80:	b908      	cbnz	r0, 8009e86 <_dtoa_r+0x186>
 8009e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e86:	f1ba 0f16 	cmp.w	sl, #22
 8009e8a:	d854      	bhi.n	8009f36 <_dtoa_r+0x236>
 8009e8c:	4b61      	ldr	r3, [pc, #388]	; (800a014 <_dtoa_r+0x314>)
 8009e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e9a:	f7f6 fe57 	bl	8000b4c <__aeabi_dcmplt>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d04b      	beq.n	8009f3a <_dtoa_r+0x23a>
 8009ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8009eaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eac:	1b5d      	subs	r5, r3, r5
 8009eae:	1e6b      	subs	r3, r5, #1
 8009eb0:	9304      	str	r3, [sp, #16]
 8009eb2:	bf43      	ittte	mi
 8009eb4:	2300      	movmi	r3, #0
 8009eb6:	f1c5 0801 	rsbmi	r8, r5, #1
 8009eba:	9304      	strmi	r3, [sp, #16]
 8009ebc:	f04f 0800 	movpl.w	r8, #0
 8009ec0:	f1ba 0f00 	cmp.w	sl, #0
 8009ec4:	db3b      	blt.n	8009f3e <_dtoa_r+0x23e>
 8009ec6:	9b04      	ldr	r3, [sp, #16]
 8009ec8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009ecc:	4453      	add	r3, sl
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	9306      	str	r3, [sp, #24]
 8009ed4:	9b05      	ldr	r3, [sp, #20]
 8009ed6:	2b09      	cmp	r3, #9
 8009ed8:	d869      	bhi.n	8009fae <_dtoa_r+0x2ae>
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	bfc4      	itt	gt
 8009ede:	3b04      	subgt	r3, #4
 8009ee0:	9305      	strgt	r3, [sp, #20]
 8009ee2:	9b05      	ldr	r3, [sp, #20]
 8009ee4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ee8:	bfcc      	ite	gt
 8009eea:	2500      	movgt	r5, #0
 8009eec:	2501      	movle	r5, #1
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d869      	bhi.n	8009fc6 <_dtoa_r+0x2c6>
 8009ef2:	e8df f003 	tbb	[pc, r3]
 8009ef6:	4e2c      	.short	0x4e2c
 8009ef8:	5a4c      	.short	0x5a4c
 8009efa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009efe:	441d      	add	r5, r3
 8009f00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	bfc1      	itttt	gt
 8009f08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009f10:	fa09 f303 	lslgt.w	r3, r9, r3
 8009f14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f18:	bfda      	itte	le
 8009f1a:	f1c3 0320 	rsble	r3, r3, #32
 8009f1e:	fa06 f003 	lslle.w	r0, r6, r3
 8009f22:	4318      	orrgt	r0, r3
 8009f24:	f7f6 fb26 	bl	8000574 <__aeabi_ui2d>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009f30:	3d01      	subs	r5, #1
 8009f32:	9310      	str	r3, [sp, #64]	; 0x40
 8009f34:	e771      	b.n	8009e1a <_dtoa_r+0x11a>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e7b6      	b.n	8009ea8 <_dtoa_r+0x1a8>
 8009f3a:	900e      	str	r0, [sp, #56]	; 0x38
 8009f3c:	e7b5      	b.n	8009eaa <_dtoa_r+0x1aa>
 8009f3e:	f1ca 0300 	rsb	r3, sl, #0
 8009f42:	9306      	str	r3, [sp, #24]
 8009f44:	2300      	movs	r3, #0
 8009f46:	eba8 080a 	sub.w	r8, r8, sl
 8009f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f4c:	e7c2      	b.n	8009ed4 <_dtoa_r+0x1d4>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	9308      	str	r3, [sp, #32]
 8009f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc39      	bgt.n	8009fcc <_dtoa_r+0x2cc>
 8009f58:	f04f 0901 	mov.w	r9, #1
 8009f5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f60:	464b      	mov	r3, r9
 8009f62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009f66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f68:	2200      	movs	r2, #0
 8009f6a:	6042      	str	r2, [r0, #4]
 8009f6c:	2204      	movs	r2, #4
 8009f6e:	f102 0614 	add.w	r6, r2, #20
 8009f72:	429e      	cmp	r6, r3
 8009f74:	6841      	ldr	r1, [r0, #4]
 8009f76:	d92f      	bls.n	8009fd8 <_dtoa_r+0x2d8>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f001 fa79 	bl	800b470 <_Balloc>
 8009f7e:	9000      	str	r0, [sp, #0]
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d14b      	bne.n	800a01c <_dtoa_r+0x31c>
 8009f84:	4b24      	ldr	r3, [pc, #144]	; (800a018 <_dtoa_r+0x318>)
 8009f86:	4602      	mov	r2, r0
 8009f88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f8c:	e6d1      	b.n	8009d32 <_dtoa_r+0x32>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7de      	b.n	8009f50 <_dtoa_r+0x250>
 8009f92:	2300      	movs	r3, #0
 8009f94:	9308      	str	r3, [sp, #32]
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	eb0a 0903 	add.w	r9, sl, r3
 8009f9c:	f109 0301 	add.w	r3, r9, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	bfb8      	it	lt
 8009fa6:	2301      	movlt	r3, #1
 8009fa8:	e7dd      	b.n	8009f66 <_dtoa_r+0x266>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e7f2      	b.n	8009f94 <_dtoa_r+0x294>
 8009fae:	2501      	movs	r5, #1
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	9508      	str	r5, [sp, #32]
 8009fb6:	f04f 39ff 	mov.w	r9, #4294967295
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fc0:	2312      	movs	r3, #18
 8009fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fc4:	e7cf      	b.n	8009f66 <_dtoa_r+0x266>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	9308      	str	r3, [sp, #32]
 8009fca:	e7f4      	b.n	8009fb6 <_dtoa_r+0x2b6>
 8009fcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009fd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	e7c6      	b.n	8009f66 <_dtoa_r+0x266>
 8009fd8:	3101      	adds	r1, #1
 8009fda:	6041      	str	r1, [r0, #4]
 8009fdc:	0052      	lsls	r2, r2, #1
 8009fde:	e7c6      	b.n	8009f6e <_dtoa_r+0x26e>
 8009fe0:	636f4361 	.word	0x636f4361
 8009fe4:	3fd287a7 	.word	0x3fd287a7
 8009fe8:	8b60c8b3 	.word	0x8b60c8b3
 8009fec:	3fc68a28 	.word	0x3fc68a28
 8009ff0:	509f79fb 	.word	0x509f79fb
 8009ff4:	3fd34413 	.word	0x3fd34413
 8009ff8:	0800edc0 	.word	0x0800edc0
 8009ffc:	0800ef82 	.word	0x0800ef82
 800a000:	7ff00000 	.word	0x7ff00000
 800a004:	0800ef7e 	.word	0x0800ef7e
 800a008:	0800ef75 	.word	0x0800ef75
 800a00c:	0800ed45 	.word	0x0800ed45
 800a010:	3ff80000 	.word	0x3ff80000
 800a014:	0800f160 	.word	0x0800f160
 800a018:	0800efe1 	.word	0x0800efe1
 800a01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a01e:	9a00      	ldr	r2, [sp, #0]
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	9b01      	ldr	r3, [sp, #4]
 800a024:	2b0e      	cmp	r3, #14
 800a026:	f200 80ad 	bhi.w	800a184 <_dtoa_r+0x484>
 800a02a:	2d00      	cmp	r5, #0
 800a02c:	f000 80aa 	beq.w	800a184 <_dtoa_r+0x484>
 800a030:	f1ba 0f00 	cmp.w	sl, #0
 800a034:	dd36      	ble.n	800a0a4 <_dtoa_r+0x3a4>
 800a036:	4ac3      	ldr	r2, [pc, #780]	; (800a344 <_dtoa_r+0x644>)
 800a038:	f00a 030f 	and.w	r3, sl, #15
 800a03c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a040:	ed93 7b00 	vldr	d7, [r3]
 800a044:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a048:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a04c:	eeb0 8a47 	vmov.f32	s16, s14
 800a050:	eef0 8a67 	vmov.f32	s17, s15
 800a054:	d016      	beq.n	800a084 <_dtoa_r+0x384>
 800a056:	4bbc      	ldr	r3, [pc, #752]	; (800a348 <_dtoa_r+0x648>)
 800a058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a05c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a060:	f7f6 fc2c 	bl	80008bc <__aeabi_ddiv>
 800a064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a068:	f007 070f 	and.w	r7, r7, #15
 800a06c:	2503      	movs	r5, #3
 800a06e:	4eb6      	ldr	r6, [pc, #728]	; (800a348 <_dtoa_r+0x648>)
 800a070:	b957      	cbnz	r7, 800a088 <_dtoa_r+0x388>
 800a072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a076:	ec53 2b18 	vmov	r2, r3, d8
 800a07a:	f7f6 fc1f 	bl	80008bc <__aeabi_ddiv>
 800a07e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a082:	e029      	b.n	800a0d8 <_dtoa_r+0x3d8>
 800a084:	2502      	movs	r5, #2
 800a086:	e7f2      	b.n	800a06e <_dtoa_r+0x36e>
 800a088:	07f9      	lsls	r1, r7, #31
 800a08a:	d508      	bpl.n	800a09e <_dtoa_r+0x39e>
 800a08c:	ec51 0b18 	vmov	r0, r1, d8
 800a090:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a094:	f7f6 fae8 	bl	8000668 <__aeabi_dmul>
 800a098:	ec41 0b18 	vmov	d8, r0, r1
 800a09c:	3501      	adds	r5, #1
 800a09e:	107f      	asrs	r7, r7, #1
 800a0a0:	3608      	adds	r6, #8
 800a0a2:	e7e5      	b.n	800a070 <_dtoa_r+0x370>
 800a0a4:	f000 80a6 	beq.w	800a1f4 <_dtoa_r+0x4f4>
 800a0a8:	f1ca 0600 	rsb	r6, sl, #0
 800a0ac:	4ba5      	ldr	r3, [pc, #660]	; (800a344 <_dtoa_r+0x644>)
 800a0ae:	4fa6      	ldr	r7, [pc, #664]	; (800a348 <_dtoa_r+0x648>)
 800a0b0:	f006 020f 	and.w	r2, r6, #15
 800a0b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0c0:	f7f6 fad2 	bl	8000668 <__aeabi_dmul>
 800a0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c8:	1136      	asrs	r6, r6, #4
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2502      	movs	r5, #2
 800a0ce:	2e00      	cmp	r6, #0
 800a0d0:	f040 8085 	bne.w	800a1de <_dtoa_r+0x4de>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1d2      	bne.n	800a07e <_dtoa_r+0x37e>
 800a0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 808c 	beq.w	800a1f8 <_dtoa_r+0x4f8>
 800a0e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0e4:	4b99      	ldr	r3, [pc, #612]	; (800a34c <_dtoa_r+0x64c>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 fd2e 	bl	8000b4c <__aeabi_dcmplt>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	f000 8081 	beq.w	800a1f8 <_dtoa_r+0x4f8>
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d07d      	beq.n	800a1f8 <_dtoa_r+0x4f8>
 800a0fc:	f1b9 0f00 	cmp.w	r9, #0
 800a100:	dd3c      	ble.n	800a17c <_dtoa_r+0x47c>
 800a102:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a106:	9307      	str	r3, [sp, #28]
 800a108:	2200      	movs	r2, #0
 800a10a:	4b91      	ldr	r3, [pc, #580]	; (800a350 <_dtoa_r+0x650>)
 800a10c:	4630      	mov	r0, r6
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 faaa 	bl	8000668 <__aeabi_dmul>
 800a114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a118:	3501      	adds	r5, #1
 800a11a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a11e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a122:	4628      	mov	r0, r5
 800a124:	f7f6 fa36 	bl	8000594 <__aeabi_i2d>
 800a128:	4632      	mov	r2, r6
 800a12a:	463b      	mov	r3, r7
 800a12c:	f7f6 fa9c 	bl	8000668 <__aeabi_dmul>
 800a130:	4b88      	ldr	r3, [pc, #544]	; (800a354 <_dtoa_r+0x654>)
 800a132:	2200      	movs	r2, #0
 800a134:	f7f6 f8e2 	bl	80002fc <__adddf3>
 800a138:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a144:	2b00      	cmp	r3, #0
 800a146:	d15c      	bne.n	800a202 <_dtoa_r+0x502>
 800a148:	4b83      	ldr	r3, [pc, #524]	; (800a358 <_dtoa_r+0x658>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	4630      	mov	r0, r6
 800a14e:	4639      	mov	r1, r7
 800a150:	f7f6 f8d2 	bl	80002f8 <__aeabi_dsub>
 800a154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a158:	4606      	mov	r6, r0
 800a15a:	460f      	mov	r7, r1
 800a15c:	f7f6 fd14 	bl	8000b88 <__aeabi_dcmpgt>
 800a160:	2800      	cmp	r0, #0
 800a162:	f040 8296 	bne.w	800a692 <_dtoa_r+0x992>
 800a166:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a16a:	4630      	mov	r0, r6
 800a16c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a170:	4639      	mov	r1, r7
 800a172:	f7f6 fceb 	bl	8000b4c <__aeabi_dcmplt>
 800a176:	2800      	cmp	r0, #0
 800a178:	f040 8288 	bne.w	800a68c <_dtoa_r+0x98c>
 800a17c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a180:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a186:	2b00      	cmp	r3, #0
 800a188:	f2c0 8158 	blt.w	800a43c <_dtoa_r+0x73c>
 800a18c:	f1ba 0f0e 	cmp.w	sl, #14
 800a190:	f300 8154 	bgt.w	800a43c <_dtoa_r+0x73c>
 800a194:	4b6b      	ldr	r3, [pc, #428]	; (800a344 <_dtoa_r+0x644>)
 800a196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a19a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f280 80e3 	bge.w	800a36c <_dtoa_r+0x66c>
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f300 80df 	bgt.w	800a36c <_dtoa_r+0x66c>
 800a1ae:	f040 826d 	bne.w	800a68c <_dtoa_r+0x98c>
 800a1b2:	4b69      	ldr	r3, [pc, #420]	; (800a358 <_dtoa_r+0x658>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	f7f6 fa55 	bl	8000668 <__aeabi_dmul>
 800a1be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c2:	f7f6 fcd7 	bl	8000b74 <__aeabi_dcmpge>
 800a1c6:	9e01      	ldr	r6, [sp, #4]
 800a1c8:	4637      	mov	r7, r6
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f040 8243 	bne.w	800a656 <_dtoa_r+0x956>
 800a1d0:	9d00      	ldr	r5, [sp, #0]
 800a1d2:	2331      	movs	r3, #49	; 0x31
 800a1d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a1d8:	f10a 0a01 	add.w	sl, sl, #1
 800a1dc:	e23f      	b.n	800a65e <_dtoa_r+0x95e>
 800a1de:	07f2      	lsls	r2, r6, #31
 800a1e0:	d505      	bpl.n	800a1ee <_dtoa_r+0x4ee>
 800a1e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1e6:	f7f6 fa3f 	bl	8000668 <__aeabi_dmul>
 800a1ea:	3501      	adds	r5, #1
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	1076      	asrs	r6, r6, #1
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	e76c      	b.n	800a0ce <_dtoa_r+0x3ce>
 800a1f4:	2502      	movs	r5, #2
 800a1f6:	e76f      	b.n	800a0d8 <_dtoa_r+0x3d8>
 800a1f8:	9b01      	ldr	r3, [sp, #4]
 800a1fa:	f8cd a01c 	str.w	sl, [sp, #28]
 800a1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a200:	e78d      	b.n	800a11e <_dtoa_r+0x41e>
 800a202:	9900      	ldr	r1, [sp, #0]
 800a204:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a208:	4b4e      	ldr	r3, [pc, #312]	; (800a344 <_dtoa_r+0x644>)
 800a20a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a20e:	4401      	add	r1, r0
 800a210:	9102      	str	r1, [sp, #8]
 800a212:	9908      	ldr	r1, [sp, #32]
 800a214:	eeb0 8a47 	vmov.f32	s16, s14
 800a218:	eef0 8a67 	vmov.f32	s17, s15
 800a21c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a224:	2900      	cmp	r1, #0
 800a226:	d045      	beq.n	800a2b4 <_dtoa_r+0x5b4>
 800a228:	494c      	ldr	r1, [pc, #304]	; (800a35c <_dtoa_r+0x65c>)
 800a22a:	2000      	movs	r0, #0
 800a22c:	f7f6 fb46 	bl	80008bc <__aeabi_ddiv>
 800a230:	ec53 2b18 	vmov	r2, r3, d8
 800a234:	f7f6 f860 	bl	80002f8 <__aeabi_dsub>
 800a238:	9d00      	ldr	r5, [sp, #0]
 800a23a:	ec41 0b18 	vmov	d8, r0, r1
 800a23e:	4639      	mov	r1, r7
 800a240:	4630      	mov	r0, r6
 800a242:	f7f6 fcc1 	bl	8000bc8 <__aeabi_d2iz>
 800a246:	900c      	str	r0, [sp, #48]	; 0x30
 800a248:	f7f6 f9a4 	bl	8000594 <__aeabi_i2d>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 f850 	bl	80002f8 <__aeabi_dsub>
 800a258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a25a:	3330      	adds	r3, #48	; 0x30
 800a25c:	f805 3b01 	strb.w	r3, [r5], #1
 800a260:	ec53 2b18 	vmov	r2, r3, d8
 800a264:	4606      	mov	r6, r0
 800a266:	460f      	mov	r7, r1
 800a268:	f7f6 fc70 	bl	8000b4c <__aeabi_dcmplt>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d165      	bne.n	800a33c <_dtoa_r+0x63c>
 800a270:	4632      	mov	r2, r6
 800a272:	463b      	mov	r3, r7
 800a274:	4935      	ldr	r1, [pc, #212]	; (800a34c <_dtoa_r+0x64c>)
 800a276:	2000      	movs	r0, #0
 800a278:	f7f6 f83e 	bl	80002f8 <__aeabi_dsub>
 800a27c:	ec53 2b18 	vmov	r2, r3, d8
 800a280:	f7f6 fc64 	bl	8000b4c <__aeabi_dcmplt>
 800a284:	2800      	cmp	r0, #0
 800a286:	f040 80b9 	bne.w	800a3fc <_dtoa_r+0x6fc>
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	429d      	cmp	r5, r3
 800a28e:	f43f af75 	beq.w	800a17c <_dtoa_r+0x47c>
 800a292:	4b2f      	ldr	r3, [pc, #188]	; (800a350 <_dtoa_r+0x650>)
 800a294:	ec51 0b18 	vmov	r0, r1, d8
 800a298:	2200      	movs	r2, #0
 800a29a:	f7f6 f9e5 	bl	8000668 <__aeabi_dmul>
 800a29e:	4b2c      	ldr	r3, [pc, #176]	; (800a350 <_dtoa_r+0x650>)
 800a2a0:	ec41 0b18 	vmov	d8, r0, r1
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	f7f6 f9dd 	bl	8000668 <__aeabi_dmul>
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	e7c4      	b.n	800a23e <_dtoa_r+0x53e>
 800a2b4:	ec51 0b17 	vmov	r0, r1, d7
 800a2b8:	f7f6 f9d6 	bl	8000668 <__aeabi_dmul>
 800a2bc:	9b02      	ldr	r3, [sp, #8]
 800a2be:	9d00      	ldr	r5, [sp, #0]
 800a2c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c2:	ec41 0b18 	vmov	d8, r0, r1
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7f6 fc7d 	bl	8000bc8 <__aeabi_d2iz>
 800a2ce:	9011      	str	r0, [sp, #68]	; 0x44
 800a2d0:	f7f6 f960 	bl	8000594 <__aeabi_i2d>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	f7f6 f80c 	bl	80002f8 <__aeabi_dsub>
 800a2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2e2:	3330      	adds	r3, #48	; 0x30
 800a2e4:	f805 3b01 	strb.w	r3, [r5], #1
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	429d      	cmp	r5, r3
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	f04f 0200 	mov.w	r2, #0
 800a2f4:	d134      	bne.n	800a360 <_dtoa_r+0x660>
 800a2f6:	4b19      	ldr	r3, [pc, #100]	; (800a35c <_dtoa_r+0x65c>)
 800a2f8:	ec51 0b18 	vmov	r0, r1, d8
 800a2fc:	f7f5 fffe 	bl	80002fc <__adddf3>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f6 fc3e 	bl	8000b88 <__aeabi_dcmpgt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d175      	bne.n	800a3fc <_dtoa_r+0x6fc>
 800a310:	ec53 2b18 	vmov	r2, r3, d8
 800a314:	4911      	ldr	r1, [pc, #68]	; (800a35c <_dtoa_r+0x65c>)
 800a316:	2000      	movs	r0, #0
 800a318:	f7f5 ffee 	bl	80002f8 <__aeabi_dsub>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f6 fc12 	bl	8000b4c <__aeabi_dcmplt>
 800a328:	2800      	cmp	r0, #0
 800a32a:	f43f af27 	beq.w	800a17c <_dtoa_r+0x47c>
 800a32e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a330:	1e6b      	subs	r3, r5, #1
 800a332:	930c      	str	r3, [sp, #48]	; 0x30
 800a334:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a338:	2b30      	cmp	r3, #48	; 0x30
 800a33a:	d0f8      	beq.n	800a32e <_dtoa_r+0x62e>
 800a33c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a340:	e04a      	b.n	800a3d8 <_dtoa_r+0x6d8>
 800a342:	bf00      	nop
 800a344:	0800f160 	.word	0x0800f160
 800a348:	0800f138 	.word	0x0800f138
 800a34c:	3ff00000 	.word	0x3ff00000
 800a350:	40240000 	.word	0x40240000
 800a354:	401c0000 	.word	0x401c0000
 800a358:	40140000 	.word	0x40140000
 800a35c:	3fe00000 	.word	0x3fe00000
 800a360:	4baf      	ldr	r3, [pc, #700]	; (800a620 <_dtoa_r+0x920>)
 800a362:	f7f6 f981 	bl	8000668 <__aeabi_dmul>
 800a366:	4606      	mov	r6, r0
 800a368:	460f      	mov	r7, r1
 800a36a:	e7ac      	b.n	800a2c6 <_dtoa_r+0x5c6>
 800a36c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a370:	9d00      	ldr	r5, [sp, #0]
 800a372:	4642      	mov	r2, r8
 800a374:	464b      	mov	r3, r9
 800a376:	4630      	mov	r0, r6
 800a378:	4639      	mov	r1, r7
 800a37a:	f7f6 fa9f 	bl	80008bc <__aeabi_ddiv>
 800a37e:	f7f6 fc23 	bl	8000bc8 <__aeabi_d2iz>
 800a382:	9002      	str	r0, [sp, #8]
 800a384:	f7f6 f906 	bl	8000594 <__aeabi_i2d>
 800a388:	4642      	mov	r2, r8
 800a38a:	464b      	mov	r3, r9
 800a38c:	f7f6 f96c 	bl	8000668 <__aeabi_dmul>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	f7f5 ffae 	bl	80002f8 <__aeabi_dsub>
 800a39c:	9e02      	ldr	r6, [sp, #8]
 800a39e:	9f01      	ldr	r7, [sp, #4]
 800a3a0:	3630      	adds	r6, #48	; 0x30
 800a3a2:	f805 6b01 	strb.w	r6, [r5], #1
 800a3a6:	9e00      	ldr	r6, [sp, #0]
 800a3a8:	1bae      	subs	r6, r5, r6
 800a3aa:	42b7      	cmp	r7, r6
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	d137      	bne.n	800a422 <_dtoa_r+0x722>
 800a3b2:	f7f5 ffa3 	bl	80002fc <__adddf3>
 800a3b6:	4642      	mov	r2, r8
 800a3b8:	464b      	mov	r3, r9
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	f7f6 fbe3 	bl	8000b88 <__aeabi_dcmpgt>
 800a3c2:	b9c8      	cbnz	r0, 800a3f8 <_dtoa_r+0x6f8>
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f6 fbb4 	bl	8000b38 <__aeabi_dcmpeq>
 800a3d0:	b110      	cbz	r0, 800a3d8 <_dtoa_r+0x6d8>
 800a3d2:	9b02      	ldr	r3, [sp, #8]
 800a3d4:	07d9      	lsls	r1, r3, #31
 800a3d6:	d40f      	bmi.n	800a3f8 <_dtoa_r+0x6f8>
 800a3d8:	4620      	mov	r0, r4
 800a3da:	4659      	mov	r1, fp
 800a3dc:	f001 f888 	bl	800b4f0 <_Bfree>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	702b      	strb	r3, [r5, #0]
 800a3e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3e6:	f10a 0001 	add.w	r0, sl, #1
 800a3ea:	6018      	str	r0, [r3, #0]
 800a3ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f43f acd8 	beq.w	8009da4 <_dtoa_r+0xa4>
 800a3f4:	601d      	str	r5, [r3, #0]
 800a3f6:	e4d5      	b.n	8009da4 <_dtoa_r+0xa4>
 800a3f8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	461d      	mov	r5, r3
 800a400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a404:	2a39      	cmp	r2, #57	; 0x39
 800a406:	d108      	bne.n	800a41a <_dtoa_r+0x71a>
 800a408:	9a00      	ldr	r2, [sp, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d1f7      	bne.n	800a3fe <_dtoa_r+0x6fe>
 800a40e:	9a07      	ldr	r2, [sp, #28]
 800a410:	9900      	ldr	r1, [sp, #0]
 800a412:	3201      	adds	r2, #1
 800a414:	9207      	str	r2, [sp, #28]
 800a416:	2230      	movs	r2, #48	; 0x30
 800a418:	700a      	strb	r2, [r1, #0]
 800a41a:	781a      	ldrb	r2, [r3, #0]
 800a41c:	3201      	adds	r2, #1
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	e78c      	b.n	800a33c <_dtoa_r+0x63c>
 800a422:	4b7f      	ldr	r3, [pc, #508]	; (800a620 <_dtoa_r+0x920>)
 800a424:	2200      	movs	r2, #0
 800a426:	f7f6 f91f 	bl	8000668 <__aeabi_dmul>
 800a42a:	2200      	movs	r2, #0
 800a42c:	2300      	movs	r3, #0
 800a42e:	4606      	mov	r6, r0
 800a430:	460f      	mov	r7, r1
 800a432:	f7f6 fb81 	bl	8000b38 <__aeabi_dcmpeq>
 800a436:	2800      	cmp	r0, #0
 800a438:	d09b      	beq.n	800a372 <_dtoa_r+0x672>
 800a43a:	e7cd      	b.n	800a3d8 <_dtoa_r+0x6d8>
 800a43c:	9a08      	ldr	r2, [sp, #32]
 800a43e:	2a00      	cmp	r2, #0
 800a440:	f000 80c4 	beq.w	800a5cc <_dtoa_r+0x8cc>
 800a444:	9a05      	ldr	r2, [sp, #20]
 800a446:	2a01      	cmp	r2, #1
 800a448:	f300 80a8 	bgt.w	800a59c <_dtoa_r+0x89c>
 800a44c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a44e:	2a00      	cmp	r2, #0
 800a450:	f000 80a0 	beq.w	800a594 <_dtoa_r+0x894>
 800a454:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a458:	9e06      	ldr	r6, [sp, #24]
 800a45a:	4645      	mov	r5, r8
 800a45c:	9a04      	ldr	r2, [sp, #16]
 800a45e:	2101      	movs	r1, #1
 800a460:	441a      	add	r2, r3
 800a462:	4620      	mov	r0, r4
 800a464:	4498      	add	r8, r3
 800a466:	9204      	str	r2, [sp, #16]
 800a468:	f001 f948 	bl	800b6fc <__i2b>
 800a46c:	4607      	mov	r7, r0
 800a46e:	2d00      	cmp	r5, #0
 800a470:	dd0b      	ble.n	800a48a <_dtoa_r+0x78a>
 800a472:	9b04      	ldr	r3, [sp, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	dd08      	ble.n	800a48a <_dtoa_r+0x78a>
 800a478:	42ab      	cmp	r3, r5
 800a47a:	9a04      	ldr	r2, [sp, #16]
 800a47c:	bfa8      	it	ge
 800a47e:	462b      	movge	r3, r5
 800a480:	eba8 0803 	sub.w	r8, r8, r3
 800a484:	1aed      	subs	r5, r5, r3
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	9b06      	ldr	r3, [sp, #24]
 800a48c:	b1fb      	cbz	r3, 800a4ce <_dtoa_r+0x7ce>
 800a48e:	9b08      	ldr	r3, [sp, #32]
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 809f 	beq.w	800a5d4 <_dtoa_r+0x8d4>
 800a496:	2e00      	cmp	r6, #0
 800a498:	dd11      	ble.n	800a4be <_dtoa_r+0x7be>
 800a49a:	4639      	mov	r1, r7
 800a49c:	4632      	mov	r2, r6
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f001 f9e8 	bl	800b874 <__pow5mult>
 800a4a4:	465a      	mov	r2, fp
 800a4a6:	4601      	mov	r1, r0
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f001 f93c 	bl	800b728 <__multiply>
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	9007      	str	r0, [sp, #28]
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f001 f81b 	bl	800b4f0 <_Bfree>
 800a4ba:	9b07      	ldr	r3, [sp, #28]
 800a4bc:	469b      	mov	fp, r3
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	1b9a      	subs	r2, r3, r6
 800a4c2:	d004      	beq.n	800a4ce <_dtoa_r+0x7ce>
 800a4c4:	4659      	mov	r1, fp
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f001 f9d4 	bl	800b874 <__pow5mult>
 800a4cc:	4683      	mov	fp, r0
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f001 f913 	bl	800b6fc <__i2b>
 800a4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	4606      	mov	r6, r0
 800a4dc:	dd7c      	ble.n	800a5d8 <_dtoa_r+0x8d8>
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4601      	mov	r1, r0
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f001 f9c6 	bl	800b874 <__pow5mult>
 800a4e8:	9b05      	ldr	r3, [sp, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	dd76      	ble.n	800a5de <_dtoa_r+0x8de>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9306      	str	r3, [sp, #24]
 800a4f4:	6933      	ldr	r3, [r6, #16]
 800a4f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4fa:	6918      	ldr	r0, [r3, #16]
 800a4fc:	f001 f8ae 	bl	800b65c <__hi0bits>
 800a500:	f1c0 0020 	rsb	r0, r0, #32
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	4418      	add	r0, r3
 800a508:	f010 001f 	ands.w	r0, r0, #31
 800a50c:	f000 8086 	beq.w	800a61c <_dtoa_r+0x91c>
 800a510:	f1c0 0320 	rsb	r3, r0, #32
 800a514:	2b04      	cmp	r3, #4
 800a516:	dd7f      	ble.n	800a618 <_dtoa_r+0x918>
 800a518:	f1c0 001c 	rsb	r0, r0, #28
 800a51c:	9b04      	ldr	r3, [sp, #16]
 800a51e:	4403      	add	r3, r0
 800a520:	4480      	add	r8, r0
 800a522:	4405      	add	r5, r0
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	f1b8 0f00 	cmp.w	r8, #0
 800a52a:	dd05      	ble.n	800a538 <_dtoa_r+0x838>
 800a52c:	4659      	mov	r1, fp
 800a52e:	4642      	mov	r2, r8
 800a530:	4620      	mov	r0, r4
 800a532:	f001 f9f9 	bl	800b928 <__lshift>
 800a536:	4683      	mov	fp, r0
 800a538:	9b04      	ldr	r3, [sp, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	dd05      	ble.n	800a54a <_dtoa_r+0x84a>
 800a53e:	4631      	mov	r1, r6
 800a540:	461a      	mov	r2, r3
 800a542:	4620      	mov	r0, r4
 800a544:	f001 f9f0 	bl	800b928 <__lshift>
 800a548:	4606      	mov	r6, r0
 800a54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d069      	beq.n	800a624 <_dtoa_r+0x924>
 800a550:	4631      	mov	r1, r6
 800a552:	4658      	mov	r0, fp
 800a554:	f001 fa54 	bl	800ba00 <__mcmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	da63      	bge.n	800a624 <_dtoa_r+0x924>
 800a55c:	2300      	movs	r3, #0
 800a55e:	4659      	mov	r1, fp
 800a560:	220a      	movs	r2, #10
 800a562:	4620      	mov	r0, r4
 800a564:	f000 ffe6 	bl	800b534 <__multadd>
 800a568:	9b08      	ldr	r3, [sp, #32]
 800a56a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a56e:	4683      	mov	fp, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 818f 	beq.w	800a894 <_dtoa_r+0xb94>
 800a576:	4639      	mov	r1, r7
 800a578:	2300      	movs	r3, #0
 800a57a:	220a      	movs	r2, #10
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 ffd9 	bl	800b534 <__multadd>
 800a582:	f1b9 0f00 	cmp.w	r9, #0
 800a586:	4607      	mov	r7, r0
 800a588:	f300 808e 	bgt.w	800a6a8 <_dtoa_r+0x9a8>
 800a58c:	9b05      	ldr	r3, [sp, #20]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	dc50      	bgt.n	800a634 <_dtoa_r+0x934>
 800a592:	e089      	b.n	800a6a8 <_dtoa_r+0x9a8>
 800a594:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a596:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a59a:	e75d      	b.n	800a458 <_dtoa_r+0x758>
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	1e5e      	subs	r6, r3, #1
 800a5a0:	9b06      	ldr	r3, [sp, #24]
 800a5a2:	42b3      	cmp	r3, r6
 800a5a4:	bfbf      	itttt	lt
 800a5a6:	9b06      	ldrlt	r3, [sp, #24]
 800a5a8:	9606      	strlt	r6, [sp, #24]
 800a5aa:	1af2      	sublt	r2, r6, r3
 800a5ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a5ae:	bfb6      	itet	lt
 800a5b0:	189b      	addlt	r3, r3, r2
 800a5b2:	1b9e      	subge	r6, r3, r6
 800a5b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	bfb8      	it	lt
 800a5ba:	2600      	movlt	r6, #0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bfb5      	itete	lt
 800a5c0:	eba8 0503 	sublt.w	r5, r8, r3
 800a5c4:	9b01      	ldrge	r3, [sp, #4]
 800a5c6:	2300      	movlt	r3, #0
 800a5c8:	4645      	movge	r5, r8
 800a5ca:	e747      	b.n	800a45c <_dtoa_r+0x75c>
 800a5cc:	9e06      	ldr	r6, [sp, #24]
 800a5ce:	9f08      	ldr	r7, [sp, #32]
 800a5d0:	4645      	mov	r5, r8
 800a5d2:	e74c      	b.n	800a46e <_dtoa_r+0x76e>
 800a5d4:	9a06      	ldr	r2, [sp, #24]
 800a5d6:	e775      	b.n	800a4c4 <_dtoa_r+0x7c4>
 800a5d8:	9b05      	ldr	r3, [sp, #20]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	dc18      	bgt.n	800a610 <_dtoa_r+0x910>
 800a5de:	9b02      	ldr	r3, [sp, #8]
 800a5e0:	b9b3      	cbnz	r3, 800a610 <_dtoa_r+0x910>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e8:	b9a3      	cbnz	r3, 800a614 <_dtoa_r+0x914>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	0d1b      	lsrs	r3, r3, #20
 800a5f2:	051b      	lsls	r3, r3, #20
 800a5f4:	b12b      	cbz	r3, 800a602 <_dtoa_r+0x902>
 800a5f6:	9b04      	ldr	r3, [sp, #16]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	f108 0801 	add.w	r8, r8, #1
 800a600:	2301      	movs	r3, #1
 800a602:	9306      	str	r3, [sp, #24]
 800a604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a606:	2b00      	cmp	r3, #0
 800a608:	f47f af74 	bne.w	800a4f4 <_dtoa_r+0x7f4>
 800a60c:	2001      	movs	r0, #1
 800a60e:	e779      	b.n	800a504 <_dtoa_r+0x804>
 800a610:	2300      	movs	r3, #0
 800a612:	e7f6      	b.n	800a602 <_dtoa_r+0x902>
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	e7f4      	b.n	800a602 <_dtoa_r+0x902>
 800a618:	d085      	beq.n	800a526 <_dtoa_r+0x826>
 800a61a:	4618      	mov	r0, r3
 800a61c:	301c      	adds	r0, #28
 800a61e:	e77d      	b.n	800a51c <_dtoa_r+0x81c>
 800a620:	40240000 	.word	0x40240000
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	dc38      	bgt.n	800a69c <_dtoa_r+0x99c>
 800a62a:	9b05      	ldr	r3, [sp, #20]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	dd35      	ble.n	800a69c <_dtoa_r+0x99c>
 800a630:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a634:	f1b9 0f00 	cmp.w	r9, #0
 800a638:	d10d      	bne.n	800a656 <_dtoa_r+0x956>
 800a63a:	4631      	mov	r1, r6
 800a63c:	464b      	mov	r3, r9
 800a63e:	2205      	movs	r2, #5
 800a640:	4620      	mov	r0, r4
 800a642:	f000 ff77 	bl	800b534 <__multadd>
 800a646:	4601      	mov	r1, r0
 800a648:	4606      	mov	r6, r0
 800a64a:	4658      	mov	r0, fp
 800a64c:	f001 f9d8 	bl	800ba00 <__mcmp>
 800a650:	2800      	cmp	r0, #0
 800a652:	f73f adbd 	bgt.w	800a1d0 <_dtoa_r+0x4d0>
 800a656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a658:	9d00      	ldr	r5, [sp, #0]
 800a65a:	ea6f 0a03 	mvn.w	sl, r3
 800a65e:	f04f 0800 	mov.w	r8, #0
 800a662:	4631      	mov	r1, r6
 800a664:	4620      	mov	r0, r4
 800a666:	f000 ff43 	bl	800b4f0 <_Bfree>
 800a66a:	2f00      	cmp	r7, #0
 800a66c:	f43f aeb4 	beq.w	800a3d8 <_dtoa_r+0x6d8>
 800a670:	f1b8 0f00 	cmp.w	r8, #0
 800a674:	d005      	beq.n	800a682 <_dtoa_r+0x982>
 800a676:	45b8      	cmp	r8, r7
 800a678:	d003      	beq.n	800a682 <_dtoa_r+0x982>
 800a67a:	4641      	mov	r1, r8
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 ff37 	bl	800b4f0 <_Bfree>
 800a682:	4639      	mov	r1, r7
 800a684:	4620      	mov	r0, r4
 800a686:	f000 ff33 	bl	800b4f0 <_Bfree>
 800a68a:	e6a5      	b.n	800a3d8 <_dtoa_r+0x6d8>
 800a68c:	2600      	movs	r6, #0
 800a68e:	4637      	mov	r7, r6
 800a690:	e7e1      	b.n	800a656 <_dtoa_r+0x956>
 800a692:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a694:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a698:	4637      	mov	r7, r6
 800a69a:	e599      	b.n	800a1d0 <_dtoa_r+0x4d0>
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80fd 	beq.w	800a8a2 <_dtoa_r+0xba2>
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	dd05      	ble.n	800a6b8 <_dtoa_r+0x9b8>
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f001 f939 	bl	800b928 <__lshift>
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	9b06      	ldr	r3, [sp, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d05c      	beq.n	800a778 <_dtoa_r+0xa78>
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f000 fed5 	bl	800b470 <_Balloc>
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	b928      	cbnz	r0, 800a6d6 <_dtoa_r+0x9d6>
 800a6ca:	4b80      	ldr	r3, [pc, #512]	; (800a8cc <_dtoa_r+0xbcc>)
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6d2:	f7ff bb2e 	b.w	8009d32 <_dtoa_r+0x32>
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	3202      	adds	r2, #2
 800a6da:	0092      	lsls	r2, r2, #2
 800a6dc:	f107 010c 	add.w	r1, r7, #12
 800a6e0:	300c      	adds	r0, #12
 800a6e2:	f000 feb7 	bl	800b454 <memcpy>
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f001 f91c 	bl	800b928 <__lshift>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	444b      	add	r3, r9
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	46b8      	mov	r8, r7
 800a704:	9306      	str	r3, [sp, #24]
 800a706:	4607      	mov	r7, r0
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	4631      	mov	r1, r6
 800a70c:	3b01      	subs	r3, #1
 800a70e:	4658      	mov	r0, fp
 800a710:	9302      	str	r3, [sp, #8]
 800a712:	f7ff fa69 	bl	8009be8 <quorem>
 800a716:	4603      	mov	r3, r0
 800a718:	3330      	adds	r3, #48	; 0x30
 800a71a:	9004      	str	r0, [sp, #16]
 800a71c:	4641      	mov	r1, r8
 800a71e:	4658      	mov	r0, fp
 800a720:	9308      	str	r3, [sp, #32]
 800a722:	f001 f96d 	bl	800ba00 <__mcmp>
 800a726:	463a      	mov	r2, r7
 800a728:	4681      	mov	r9, r0
 800a72a:	4631      	mov	r1, r6
 800a72c:	4620      	mov	r0, r4
 800a72e:	f001 f983 	bl	800ba38 <__mdiff>
 800a732:	68c2      	ldr	r2, [r0, #12]
 800a734:	9b08      	ldr	r3, [sp, #32]
 800a736:	4605      	mov	r5, r0
 800a738:	bb02      	cbnz	r2, 800a77c <_dtoa_r+0xa7c>
 800a73a:	4601      	mov	r1, r0
 800a73c:	4658      	mov	r0, fp
 800a73e:	f001 f95f 	bl	800ba00 <__mcmp>
 800a742:	9b08      	ldr	r3, [sp, #32]
 800a744:	4602      	mov	r2, r0
 800a746:	4629      	mov	r1, r5
 800a748:	4620      	mov	r0, r4
 800a74a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a74e:	f000 fecf 	bl	800b4f0 <_Bfree>
 800a752:	9b05      	ldr	r3, [sp, #20]
 800a754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a756:	9d01      	ldr	r5, [sp, #4]
 800a758:	ea43 0102 	orr.w	r1, r3, r2
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	430b      	orrs	r3, r1
 800a760:	9b08      	ldr	r3, [sp, #32]
 800a762:	d10d      	bne.n	800a780 <_dtoa_r+0xa80>
 800a764:	2b39      	cmp	r3, #57	; 0x39
 800a766:	d029      	beq.n	800a7bc <_dtoa_r+0xabc>
 800a768:	f1b9 0f00 	cmp.w	r9, #0
 800a76c:	dd01      	ble.n	800a772 <_dtoa_r+0xa72>
 800a76e:	9b04      	ldr	r3, [sp, #16]
 800a770:	3331      	adds	r3, #49	; 0x31
 800a772:	9a02      	ldr	r2, [sp, #8]
 800a774:	7013      	strb	r3, [r2, #0]
 800a776:	e774      	b.n	800a662 <_dtoa_r+0x962>
 800a778:	4638      	mov	r0, r7
 800a77a:	e7b9      	b.n	800a6f0 <_dtoa_r+0x9f0>
 800a77c:	2201      	movs	r2, #1
 800a77e:	e7e2      	b.n	800a746 <_dtoa_r+0xa46>
 800a780:	f1b9 0f00 	cmp.w	r9, #0
 800a784:	db06      	blt.n	800a794 <_dtoa_r+0xa94>
 800a786:	9905      	ldr	r1, [sp, #20]
 800a788:	ea41 0909 	orr.w	r9, r1, r9
 800a78c:	9906      	ldr	r1, [sp, #24]
 800a78e:	ea59 0101 	orrs.w	r1, r9, r1
 800a792:	d120      	bne.n	800a7d6 <_dtoa_r+0xad6>
 800a794:	2a00      	cmp	r2, #0
 800a796:	ddec      	ble.n	800a772 <_dtoa_r+0xa72>
 800a798:	4659      	mov	r1, fp
 800a79a:	2201      	movs	r2, #1
 800a79c:	4620      	mov	r0, r4
 800a79e:	9301      	str	r3, [sp, #4]
 800a7a0:	f001 f8c2 	bl	800b928 <__lshift>
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4683      	mov	fp, r0
 800a7a8:	f001 f92a 	bl	800ba00 <__mcmp>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	dc02      	bgt.n	800a7b8 <_dtoa_r+0xab8>
 800a7b2:	d1de      	bne.n	800a772 <_dtoa_r+0xa72>
 800a7b4:	07da      	lsls	r2, r3, #31
 800a7b6:	d5dc      	bpl.n	800a772 <_dtoa_r+0xa72>
 800a7b8:	2b39      	cmp	r3, #57	; 0x39
 800a7ba:	d1d8      	bne.n	800a76e <_dtoa_r+0xa6e>
 800a7bc:	9a02      	ldr	r2, [sp, #8]
 800a7be:	2339      	movs	r3, #57	; 0x39
 800a7c0:	7013      	strb	r3, [r2, #0]
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	461d      	mov	r5, r3
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7cc:	2a39      	cmp	r2, #57	; 0x39
 800a7ce:	d050      	beq.n	800a872 <_dtoa_r+0xb72>
 800a7d0:	3201      	adds	r2, #1
 800a7d2:	701a      	strb	r2, [r3, #0]
 800a7d4:	e745      	b.n	800a662 <_dtoa_r+0x962>
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	dd03      	ble.n	800a7e2 <_dtoa_r+0xae2>
 800a7da:	2b39      	cmp	r3, #57	; 0x39
 800a7dc:	d0ee      	beq.n	800a7bc <_dtoa_r+0xabc>
 800a7de:	3301      	adds	r3, #1
 800a7e0:	e7c7      	b.n	800a772 <_dtoa_r+0xa72>
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	9907      	ldr	r1, [sp, #28]
 800a7e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7ea:	428a      	cmp	r2, r1
 800a7ec:	d02a      	beq.n	800a844 <_dtoa_r+0xb44>
 800a7ee:	4659      	mov	r1, fp
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	220a      	movs	r2, #10
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 fe9d 	bl	800b534 <__multadd>
 800a7fa:	45b8      	cmp	r8, r7
 800a7fc:	4683      	mov	fp, r0
 800a7fe:	f04f 0300 	mov.w	r3, #0
 800a802:	f04f 020a 	mov.w	r2, #10
 800a806:	4641      	mov	r1, r8
 800a808:	4620      	mov	r0, r4
 800a80a:	d107      	bne.n	800a81c <_dtoa_r+0xb1c>
 800a80c:	f000 fe92 	bl	800b534 <__multadd>
 800a810:	4680      	mov	r8, r0
 800a812:	4607      	mov	r7, r0
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	3301      	adds	r3, #1
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	e775      	b.n	800a708 <_dtoa_r+0xa08>
 800a81c:	f000 fe8a 	bl	800b534 <__multadd>
 800a820:	4639      	mov	r1, r7
 800a822:	4680      	mov	r8, r0
 800a824:	2300      	movs	r3, #0
 800a826:	220a      	movs	r2, #10
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 fe83 	bl	800b534 <__multadd>
 800a82e:	4607      	mov	r7, r0
 800a830:	e7f0      	b.n	800a814 <_dtoa_r+0xb14>
 800a832:	f1b9 0f00 	cmp.w	r9, #0
 800a836:	9a00      	ldr	r2, [sp, #0]
 800a838:	bfcc      	ite	gt
 800a83a:	464d      	movgt	r5, r9
 800a83c:	2501      	movle	r5, #1
 800a83e:	4415      	add	r5, r2
 800a840:	f04f 0800 	mov.w	r8, #0
 800a844:	4659      	mov	r1, fp
 800a846:	2201      	movs	r2, #1
 800a848:	4620      	mov	r0, r4
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	f001 f86c 	bl	800b928 <__lshift>
 800a850:	4631      	mov	r1, r6
 800a852:	4683      	mov	fp, r0
 800a854:	f001 f8d4 	bl	800ba00 <__mcmp>
 800a858:	2800      	cmp	r0, #0
 800a85a:	dcb2      	bgt.n	800a7c2 <_dtoa_r+0xac2>
 800a85c:	d102      	bne.n	800a864 <_dtoa_r+0xb64>
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	07db      	lsls	r3, r3, #31
 800a862:	d4ae      	bmi.n	800a7c2 <_dtoa_r+0xac2>
 800a864:	462b      	mov	r3, r5
 800a866:	461d      	mov	r5, r3
 800a868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a86c:	2a30      	cmp	r2, #48	; 0x30
 800a86e:	d0fa      	beq.n	800a866 <_dtoa_r+0xb66>
 800a870:	e6f7      	b.n	800a662 <_dtoa_r+0x962>
 800a872:	9a00      	ldr	r2, [sp, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d1a5      	bne.n	800a7c4 <_dtoa_r+0xac4>
 800a878:	f10a 0a01 	add.w	sl, sl, #1
 800a87c:	2331      	movs	r3, #49	; 0x31
 800a87e:	e779      	b.n	800a774 <_dtoa_r+0xa74>
 800a880:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <_dtoa_r+0xbd0>)
 800a882:	f7ff baaf 	b.w	8009de4 <_dtoa_r+0xe4>
 800a886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f47f aa86 	bne.w	8009d9a <_dtoa_r+0x9a>
 800a88e:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <_dtoa_r+0xbd4>)
 800a890:	f7ff baa8 	b.w	8009de4 <_dtoa_r+0xe4>
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	dc03      	bgt.n	800a8a2 <_dtoa_r+0xba2>
 800a89a:	9b05      	ldr	r3, [sp, #20]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	f73f aec9 	bgt.w	800a634 <_dtoa_r+0x934>
 800a8a2:	9d00      	ldr	r5, [sp, #0]
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	4658      	mov	r0, fp
 800a8a8:	f7ff f99e 	bl	8009be8 <quorem>
 800a8ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a8b0:	f805 3b01 	strb.w	r3, [r5], #1
 800a8b4:	9a00      	ldr	r2, [sp, #0]
 800a8b6:	1aaa      	subs	r2, r5, r2
 800a8b8:	4591      	cmp	r9, r2
 800a8ba:	ddba      	ble.n	800a832 <_dtoa_r+0xb32>
 800a8bc:	4659      	mov	r1, fp
 800a8be:	2300      	movs	r3, #0
 800a8c0:	220a      	movs	r2, #10
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fe36 	bl	800b534 <__multadd>
 800a8c8:	4683      	mov	fp, r0
 800a8ca:	e7eb      	b.n	800a8a4 <_dtoa_r+0xba4>
 800a8cc:	0800efe1 	.word	0x0800efe1
 800a8d0:	0800ed44 	.word	0x0800ed44
 800a8d4:	0800ef75 	.word	0x0800ef75

0800a8d8 <__sflush_r>:
 800a8d8:	898a      	ldrh	r2, [r1, #12]
 800a8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	4605      	mov	r5, r0
 800a8e0:	0710      	lsls	r0, r2, #28
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	d458      	bmi.n	800a998 <__sflush_r+0xc0>
 800a8e6:	684b      	ldr	r3, [r1, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dc05      	bgt.n	800a8f8 <__sflush_r+0x20>
 800a8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dc02      	bgt.n	800a8f8 <__sflush_r+0x20>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d0f9      	beq.n	800a8f2 <__sflush_r+0x1a>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a904:	682f      	ldr	r7, [r5, #0]
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	d032      	beq.n	800a970 <__sflush_r+0x98>
 800a90a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a90c:	89a3      	ldrh	r3, [r4, #12]
 800a90e:	075a      	lsls	r2, r3, #29
 800a910:	d505      	bpl.n	800a91e <__sflush_r+0x46>
 800a912:	6863      	ldr	r3, [r4, #4]
 800a914:	1ac0      	subs	r0, r0, r3
 800a916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a918:	b10b      	cbz	r3, 800a91e <__sflush_r+0x46>
 800a91a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a91c:	1ac0      	subs	r0, r0, r3
 800a91e:	2300      	movs	r3, #0
 800a920:	4602      	mov	r2, r0
 800a922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a924:	6a21      	ldr	r1, [r4, #32]
 800a926:	4628      	mov	r0, r5
 800a928:	47b0      	blx	r6
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	d106      	bne.n	800a93e <__sflush_r+0x66>
 800a930:	6829      	ldr	r1, [r5, #0]
 800a932:	291d      	cmp	r1, #29
 800a934:	d82c      	bhi.n	800a990 <__sflush_r+0xb8>
 800a936:	4a2a      	ldr	r2, [pc, #168]	; (800a9e0 <__sflush_r+0x108>)
 800a938:	40ca      	lsrs	r2, r1
 800a93a:	07d6      	lsls	r6, r2, #31
 800a93c:	d528      	bpl.n	800a990 <__sflush_r+0xb8>
 800a93e:	2200      	movs	r2, #0
 800a940:	6062      	str	r2, [r4, #4]
 800a942:	04d9      	lsls	r1, r3, #19
 800a944:	6922      	ldr	r2, [r4, #16]
 800a946:	6022      	str	r2, [r4, #0]
 800a948:	d504      	bpl.n	800a954 <__sflush_r+0x7c>
 800a94a:	1c42      	adds	r2, r0, #1
 800a94c:	d101      	bne.n	800a952 <__sflush_r+0x7a>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	b903      	cbnz	r3, 800a954 <__sflush_r+0x7c>
 800a952:	6560      	str	r0, [r4, #84]	; 0x54
 800a954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a956:	602f      	str	r7, [r5, #0]
 800a958:	2900      	cmp	r1, #0
 800a95a:	d0ca      	beq.n	800a8f2 <__sflush_r+0x1a>
 800a95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a960:	4299      	cmp	r1, r3
 800a962:	d002      	beq.n	800a96a <__sflush_r+0x92>
 800a964:	4628      	mov	r0, r5
 800a966:	f001 fa4d 	bl	800be04 <_free_r>
 800a96a:	2000      	movs	r0, #0
 800a96c:	6360      	str	r0, [r4, #52]	; 0x34
 800a96e:	e7c1      	b.n	800a8f4 <__sflush_r+0x1c>
 800a970:	6a21      	ldr	r1, [r4, #32]
 800a972:	2301      	movs	r3, #1
 800a974:	4628      	mov	r0, r5
 800a976:	47b0      	blx	r6
 800a978:	1c41      	adds	r1, r0, #1
 800a97a:	d1c7      	bne.n	800a90c <__sflush_r+0x34>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0c4      	beq.n	800a90c <__sflush_r+0x34>
 800a982:	2b1d      	cmp	r3, #29
 800a984:	d001      	beq.n	800a98a <__sflush_r+0xb2>
 800a986:	2b16      	cmp	r3, #22
 800a988:	d101      	bne.n	800a98e <__sflush_r+0xb6>
 800a98a:	602f      	str	r7, [r5, #0]
 800a98c:	e7b1      	b.n	800a8f2 <__sflush_r+0x1a>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a994:	81a3      	strh	r3, [r4, #12]
 800a996:	e7ad      	b.n	800a8f4 <__sflush_r+0x1c>
 800a998:	690f      	ldr	r7, [r1, #16]
 800a99a:	2f00      	cmp	r7, #0
 800a99c:	d0a9      	beq.n	800a8f2 <__sflush_r+0x1a>
 800a99e:	0793      	lsls	r3, r2, #30
 800a9a0:	680e      	ldr	r6, [r1, #0]
 800a9a2:	bf08      	it	eq
 800a9a4:	694b      	ldreq	r3, [r1, #20]
 800a9a6:	600f      	str	r7, [r1, #0]
 800a9a8:	bf18      	it	ne
 800a9aa:	2300      	movne	r3, #0
 800a9ac:	eba6 0807 	sub.w	r8, r6, r7
 800a9b0:	608b      	str	r3, [r1, #8]
 800a9b2:	f1b8 0f00 	cmp.w	r8, #0
 800a9b6:	dd9c      	ble.n	800a8f2 <__sflush_r+0x1a>
 800a9b8:	6a21      	ldr	r1, [r4, #32]
 800a9ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9bc:	4643      	mov	r3, r8
 800a9be:	463a      	mov	r2, r7
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b0      	blx	r6
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	dc06      	bgt.n	800a9d6 <__sflush_r+0xfe>
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	e78e      	b.n	800a8f4 <__sflush_r+0x1c>
 800a9d6:	4407      	add	r7, r0
 800a9d8:	eba8 0800 	sub.w	r8, r8, r0
 800a9dc:	e7e9      	b.n	800a9b2 <__sflush_r+0xda>
 800a9de:	bf00      	nop
 800a9e0:	20400001 	.word	0x20400001

0800a9e4 <_fflush_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	690b      	ldr	r3, [r1, #16]
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	b913      	cbnz	r3, 800a9f4 <_fflush_r+0x10>
 800a9ee:	2500      	movs	r5, #0
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	b118      	cbz	r0, 800a9fe <_fflush_r+0x1a>
 800a9f6:	6983      	ldr	r3, [r0, #24]
 800a9f8:	b90b      	cbnz	r3, 800a9fe <_fflush_r+0x1a>
 800a9fa:	f000 f887 	bl	800ab0c <__sinit>
 800a9fe:	4b14      	ldr	r3, [pc, #80]	; (800aa50 <_fflush_r+0x6c>)
 800aa00:	429c      	cmp	r4, r3
 800aa02:	d11b      	bne.n	800aa3c <_fflush_r+0x58>
 800aa04:	686c      	ldr	r4, [r5, #4]
 800aa06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0ef      	beq.n	800a9ee <_fflush_r+0xa>
 800aa0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa10:	07d0      	lsls	r0, r2, #31
 800aa12:	d404      	bmi.n	800aa1e <_fflush_r+0x3a>
 800aa14:	0599      	lsls	r1, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_fflush_r+0x3a>
 800aa18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa1a:	f000 fc9a 	bl	800b352 <__retarget_lock_acquire_recursive>
 800aa1e:	4628      	mov	r0, r5
 800aa20:	4621      	mov	r1, r4
 800aa22:	f7ff ff59 	bl	800a8d8 <__sflush_r>
 800aa26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa28:	07da      	lsls	r2, r3, #31
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	d4e0      	bmi.n	800a9f0 <_fflush_r+0xc>
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	059b      	lsls	r3, r3, #22
 800aa32:	d4dd      	bmi.n	800a9f0 <_fflush_r+0xc>
 800aa34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa36:	f000 fc8d 	bl	800b354 <__retarget_lock_release_recursive>
 800aa3a:	e7d9      	b.n	800a9f0 <_fflush_r+0xc>
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <_fflush_r+0x70>)
 800aa3e:	429c      	cmp	r4, r3
 800aa40:	d101      	bne.n	800aa46 <_fflush_r+0x62>
 800aa42:	68ac      	ldr	r4, [r5, #8]
 800aa44:	e7df      	b.n	800aa06 <_fflush_r+0x22>
 800aa46:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <_fflush_r+0x74>)
 800aa48:	429c      	cmp	r4, r3
 800aa4a:	bf08      	it	eq
 800aa4c:	68ec      	ldreq	r4, [r5, #12]
 800aa4e:	e7da      	b.n	800aa06 <_fflush_r+0x22>
 800aa50:	0800f014 	.word	0x0800f014
 800aa54:	0800f034 	.word	0x0800f034
 800aa58:	0800eff4 	.word	0x0800eff4

0800aa5c <std>:
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	b510      	push	{r4, lr}
 800aa60:	4604      	mov	r4, r0
 800aa62:	e9c0 3300 	strd	r3, r3, [r0]
 800aa66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa6a:	6083      	str	r3, [r0, #8]
 800aa6c:	8181      	strh	r1, [r0, #12]
 800aa6e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa70:	81c2      	strh	r2, [r0, #14]
 800aa72:	6183      	str	r3, [r0, #24]
 800aa74:	4619      	mov	r1, r3
 800aa76:	2208      	movs	r2, #8
 800aa78:	305c      	adds	r0, #92	; 0x5c
 800aa7a:	f7fd f949 	bl	8007d10 <memset>
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <std+0x38>)
 800aa80:	6263      	str	r3, [r4, #36]	; 0x24
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <std+0x3c>)
 800aa84:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa86:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <std+0x40>)
 800aa88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <std+0x44>)
 800aa8c:	6224      	str	r4, [r4, #32]
 800aa8e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa90:	bd10      	pop	{r4, pc}
 800aa92:	bf00      	nop
 800aa94:	0800c589 	.word	0x0800c589
 800aa98:	0800c5ab 	.word	0x0800c5ab
 800aa9c:	0800c5e3 	.word	0x0800c5e3
 800aaa0:	0800c607 	.word	0x0800c607

0800aaa4 <_cleanup_r>:
 800aaa4:	4901      	ldr	r1, [pc, #4]	; (800aaac <_cleanup_r+0x8>)
 800aaa6:	f000 b8c1 	b.w	800ac2c <_fwalk_reent>
 800aaaa:	bf00      	nop
 800aaac:	0800a9e5 	.word	0x0800a9e5

0800aab0 <__sfmoreglue>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	1e4a      	subs	r2, r1, #1
 800aab4:	2568      	movs	r5, #104	; 0x68
 800aab6:	4355      	muls	r5, r2
 800aab8:	460e      	mov	r6, r1
 800aaba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aabe:	f001 f9f1 	bl	800bea4 <_malloc_r>
 800aac2:	4604      	mov	r4, r0
 800aac4:	b140      	cbz	r0, 800aad8 <__sfmoreglue+0x28>
 800aac6:	2100      	movs	r1, #0
 800aac8:	e9c0 1600 	strd	r1, r6, [r0]
 800aacc:	300c      	adds	r0, #12
 800aace:	60a0      	str	r0, [r4, #8]
 800aad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aad4:	f7fd f91c 	bl	8007d10 <memset>
 800aad8:	4620      	mov	r0, r4
 800aada:	bd70      	pop	{r4, r5, r6, pc}

0800aadc <__sfp_lock_acquire>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__sfp_lock_acquire+0x8>)
 800aade:	f000 bc38 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800aae2:	bf00      	nop
 800aae4:	20000898 	.word	0x20000898

0800aae8 <__sfp_lock_release>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__sfp_lock_release+0x8>)
 800aaea:	f000 bc33 	b.w	800b354 <__retarget_lock_release_recursive>
 800aaee:	bf00      	nop
 800aaf0:	20000898 	.word	0x20000898

0800aaf4 <__sinit_lock_acquire>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__sinit_lock_acquire+0x8>)
 800aaf6:	f000 bc2c 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800aafa:	bf00      	nop
 800aafc:	20000893 	.word	0x20000893

0800ab00 <__sinit_lock_release>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__sinit_lock_release+0x8>)
 800ab02:	f000 bc27 	b.w	800b354 <__retarget_lock_release_recursive>
 800ab06:	bf00      	nop
 800ab08:	20000893 	.word	0x20000893

0800ab0c <__sinit>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4604      	mov	r4, r0
 800ab10:	f7ff fff0 	bl	800aaf4 <__sinit_lock_acquire>
 800ab14:	69a3      	ldr	r3, [r4, #24]
 800ab16:	b11b      	cbz	r3, 800ab20 <__sinit+0x14>
 800ab18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab1c:	f7ff bff0 	b.w	800ab00 <__sinit_lock_release>
 800ab20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab24:	6523      	str	r3, [r4, #80]	; 0x50
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <__sinit+0x68>)
 800ab28:	4a13      	ldr	r2, [pc, #76]	; (800ab78 <__sinit+0x6c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	bf04      	itt	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	61a3      	streq	r3, [r4, #24]
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f820 	bl	800ab7c <__sfp>
 800ab3c:	6060      	str	r0, [r4, #4]
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 f81c 	bl	800ab7c <__sfp>
 800ab44:	60a0      	str	r0, [r4, #8]
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f818 	bl	800ab7c <__sfp>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	60e0      	str	r0, [r4, #12]
 800ab50:	2104      	movs	r1, #4
 800ab52:	6860      	ldr	r0, [r4, #4]
 800ab54:	f7ff ff82 	bl	800aa5c <std>
 800ab58:	68a0      	ldr	r0, [r4, #8]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	2109      	movs	r1, #9
 800ab5e:	f7ff ff7d 	bl	800aa5c <std>
 800ab62:	68e0      	ldr	r0, [r4, #12]
 800ab64:	2202      	movs	r2, #2
 800ab66:	2112      	movs	r1, #18
 800ab68:	f7ff ff78 	bl	800aa5c <std>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	61a3      	str	r3, [r4, #24]
 800ab70:	e7d2      	b.n	800ab18 <__sinit+0xc>
 800ab72:	bf00      	nop
 800ab74:	0800ed30 	.word	0x0800ed30
 800ab78:	0800aaa5 	.word	0x0800aaa5

0800ab7c <__sfp>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	4607      	mov	r7, r0
 800ab80:	f7ff ffac 	bl	800aadc <__sfp_lock_acquire>
 800ab84:	4b1e      	ldr	r3, [pc, #120]	; (800ac00 <__sfp+0x84>)
 800ab86:	681e      	ldr	r6, [r3, #0]
 800ab88:	69b3      	ldr	r3, [r6, #24]
 800ab8a:	b913      	cbnz	r3, 800ab92 <__sfp+0x16>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff ffbd 	bl	800ab0c <__sinit>
 800ab92:	3648      	adds	r6, #72	; 0x48
 800ab94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	d503      	bpl.n	800aba4 <__sfp+0x28>
 800ab9c:	6833      	ldr	r3, [r6, #0]
 800ab9e:	b30b      	cbz	r3, 800abe4 <__sfp+0x68>
 800aba0:	6836      	ldr	r6, [r6, #0]
 800aba2:	e7f7      	b.n	800ab94 <__sfp+0x18>
 800aba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aba8:	b9d5      	cbnz	r5, 800abe0 <__sfp+0x64>
 800abaa:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <__sfp+0x88>)
 800abac:	60e3      	str	r3, [r4, #12]
 800abae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abb2:	6665      	str	r5, [r4, #100]	; 0x64
 800abb4:	f000 fbcc 	bl	800b350 <__retarget_lock_init_recursive>
 800abb8:	f7ff ff96 	bl	800aae8 <__sfp_lock_release>
 800abbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abc4:	6025      	str	r5, [r4, #0]
 800abc6:	61a5      	str	r5, [r4, #24]
 800abc8:	2208      	movs	r2, #8
 800abca:	4629      	mov	r1, r5
 800abcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abd0:	f7fd f89e 	bl	8007d10 <memset>
 800abd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abdc:	4620      	mov	r0, r4
 800abde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe0:	3468      	adds	r4, #104	; 0x68
 800abe2:	e7d9      	b.n	800ab98 <__sfp+0x1c>
 800abe4:	2104      	movs	r1, #4
 800abe6:	4638      	mov	r0, r7
 800abe8:	f7ff ff62 	bl	800aab0 <__sfmoreglue>
 800abec:	4604      	mov	r4, r0
 800abee:	6030      	str	r0, [r6, #0]
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1d5      	bne.n	800aba0 <__sfp+0x24>
 800abf4:	f7ff ff78 	bl	800aae8 <__sfp_lock_release>
 800abf8:	230c      	movs	r3, #12
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	e7ee      	b.n	800abdc <__sfp+0x60>
 800abfe:	bf00      	nop
 800ac00:	0800ed30 	.word	0x0800ed30
 800ac04:	ffff0001 	.word	0xffff0001

0800ac08 <fiprintf>:
 800ac08:	b40e      	push	{r1, r2, r3}
 800ac0a:	b503      	push	{r0, r1, lr}
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	ab03      	add	r3, sp, #12
 800ac10:	4805      	ldr	r0, [pc, #20]	; (800ac28 <fiprintf+0x20>)
 800ac12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac16:	6800      	ldr	r0, [r0, #0]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	f001 fb23 	bl	800c264 <_vfiprintf_r>
 800ac1e:	b002      	add	sp, #8
 800ac20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac24:	b003      	add	sp, #12
 800ac26:	4770      	bx	lr
 800ac28:	2000000c 	.word	0x2000000c

0800ac2c <_fwalk_reent>:
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	4606      	mov	r6, r0
 800ac32:	4688      	mov	r8, r1
 800ac34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac38:	2700      	movs	r7, #0
 800ac3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ac42:	d505      	bpl.n	800ac50 <_fwalk_reent+0x24>
 800ac44:	6824      	ldr	r4, [r4, #0]
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d1f7      	bne.n	800ac3a <_fwalk_reent+0xe>
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac50:	89ab      	ldrh	r3, [r5, #12]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d907      	bls.n	800ac66 <_fwalk_reent+0x3a>
 800ac56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	d003      	beq.n	800ac66 <_fwalk_reent+0x3a>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4630      	mov	r0, r6
 800ac62:	47c0      	blx	r8
 800ac64:	4307      	orrs	r7, r0
 800ac66:	3568      	adds	r5, #104	; 0x68
 800ac68:	e7e9      	b.n	800ac3e <_fwalk_reent+0x12>

0800ac6a <rshift>:
 800ac6a:	6903      	ldr	r3, [r0, #16]
 800ac6c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac74:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac78:	f100 0414 	add.w	r4, r0, #20
 800ac7c:	dd45      	ble.n	800ad0a <rshift+0xa0>
 800ac7e:	f011 011f 	ands.w	r1, r1, #31
 800ac82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac8a:	d10c      	bne.n	800aca6 <rshift+0x3c>
 800ac8c:	f100 0710 	add.w	r7, r0, #16
 800ac90:	4629      	mov	r1, r5
 800ac92:	42b1      	cmp	r1, r6
 800ac94:	d334      	bcc.n	800ad00 <rshift+0x96>
 800ac96:	1a9b      	subs	r3, r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	1eea      	subs	r2, r5, #3
 800ac9c:	4296      	cmp	r6, r2
 800ac9e:	bf38      	it	cc
 800aca0:	2300      	movcc	r3, #0
 800aca2:	4423      	add	r3, r4
 800aca4:	e015      	b.n	800acd2 <rshift+0x68>
 800aca6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800acaa:	f1c1 0820 	rsb	r8, r1, #32
 800acae:	40cf      	lsrs	r7, r1
 800acb0:	f105 0e04 	add.w	lr, r5, #4
 800acb4:	46a1      	mov	r9, r4
 800acb6:	4576      	cmp	r6, lr
 800acb8:	46f4      	mov	ip, lr
 800acba:	d815      	bhi.n	800ace8 <rshift+0x7e>
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	009a      	lsls	r2, r3, #2
 800acc0:	3a04      	subs	r2, #4
 800acc2:	3501      	adds	r5, #1
 800acc4:	42ae      	cmp	r6, r5
 800acc6:	bf38      	it	cc
 800acc8:	2200      	movcc	r2, #0
 800acca:	18a3      	adds	r3, r4, r2
 800accc:	50a7      	str	r7, [r4, r2]
 800acce:	b107      	cbz	r7, 800acd2 <rshift+0x68>
 800acd0:	3304      	adds	r3, #4
 800acd2:	1b1a      	subs	r2, r3, r4
 800acd4:	42a3      	cmp	r3, r4
 800acd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800acda:	bf08      	it	eq
 800acdc:	2300      	moveq	r3, #0
 800acde:	6102      	str	r2, [r0, #16]
 800ace0:	bf08      	it	eq
 800ace2:	6143      	streq	r3, [r0, #20]
 800ace4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace8:	f8dc c000 	ldr.w	ip, [ip]
 800acec:	fa0c fc08 	lsl.w	ip, ip, r8
 800acf0:	ea4c 0707 	orr.w	r7, ip, r7
 800acf4:	f849 7b04 	str.w	r7, [r9], #4
 800acf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acfc:	40cf      	lsrs	r7, r1
 800acfe:	e7da      	b.n	800acb6 <rshift+0x4c>
 800ad00:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad04:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad08:	e7c3      	b.n	800ac92 <rshift+0x28>
 800ad0a:	4623      	mov	r3, r4
 800ad0c:	e7e1      	b.n	800acd2 <rshift+0x68>

0800ad0e <__hexdig_fun>:
 800ad0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad12:	2b09      	cmp	r3, #9
 800ad14:	d802      	bhi.n	800ad1c <__hexdig_fun+0xe>
 800ad16:	3820      	subs	r0, #32
 800ad18:	b2c0      	uxtb	r0, r0
 800ad1a:	4770      	bx	lr
 800ad1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad20:	2b05      	cmp	r3, #5
 800ad22:	d801      	bhi.n	800ad28 <__hexdig_fun+0x1a>
 800ad24:	3847      	subs	r0, #71	; 0x47
 800ad26:	e7f7      	b.n	800ad18 <__hexdig_fun+0xa>
 800ad28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad2c:	2b05      	cmp	r3, #5
 800ad2e:	d801      	bhi.n	800ad34 <__hexdig_fun+0x26>
 800ad30:	3827      	subs	r0, #39	; 0x27
 800ad32:	e7f1      	b.n	800ad18 <__hexdig_fun+0xa>
 800ad34:	2000      	movs	r0, #0
 800ad36:	4770      	bx	lr

0800ad38 <__gethex>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	ed2d 8b02 	vpush	{d8}
 800ad40:	b089      	sub	sp, #36	; 0x24
 800ad42:	ee08 0a10 	vmov	s16, r0
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	4bbc      	ldr	r3, [pc, #752]	; (800b03c <__gethex+0x304>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	468b      	mov	fp, r1
 800ad52:	4690      	mov	r8, r2
 800ad54:	f7f5 fa6e 	bl	8000234 <strlen>
 800ad58:	9b01      	ldr	r3, [sp, #4]
 800ad5a:	f8db 2000 	ldr.w	r2, [fp]
 800ad5e:	4403      	add	r3, r0
 800ad60:	4682      	mov	sl, r0
 800ad62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	1c93      	adds	r3, r2, #2
 800ad6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ad6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ad72:	32fe      	adds	r2, #254	; 0xfe
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	461f      	mov	r7, r3
 800ad78:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad7c:	9100      	str	r1, [sp, #0]
 800ad7e:	2830      	cmp	r0, #48	; 0x30
 800ad80:	d0f8      	beq.n	800ad74 <__gethex+0x3c>
 800ad82:	f7ff ffc4 	bl	800ad0e <__hexdig_fun>
 800ad86:	4604      	mov	r4, r0
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d13a      	bne.n	800ae02 <__gethex+0xca>
 800ad8c:	9901      	ldr	r1, [sp, #4]
 800ad8e:	4652      	mov	r2, sl
 800ad90:	4638      	mov	r0, r7
 800ad92:	f001 fc3c 	bl	800c60e <strncmp>
 800ad96:	4605      	mov	r5, r0
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d168      	bne.n	800ae6e <__gethex+0x136>
 800ad9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ada0:	eb07 060a 	add.w	r6, r7, sl
 800ada4:	f7ff ffb3 	bl	800ad0e <__hexdig_fun>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d062      	beq.n	800ae72 <__gethex+0x13a>
 800adac:	4633      	mov	r3, r6
 800adae:	7818      	ldrb	r0, [r3, #0]
 800adb0:	2830      	cmp	r0, #48	; 0x30
 800adb2:	461f      	mov	r7, r3
 800adb4:	f103 0301 	add.w	r3, r3, #1
 800adb8:	d0f9      	beq.n	800adae <__gethex+0x76>
 800adba:	f7ff ffa8 	bl	800ad0e <__hexdig_fun>
 800adbe:	2301      	movs	r3, #1
 800adc0:	fab0 f480 	clz	r4, r0
 800adc4:	0964      	lsrs	r4, r4, #5
 800adc6:	4635      	mov	r5, r6
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	463a      	mov	r2, r7
 800adcc:	4616      	mov	r6, r2
 800adce:	3201      	adds	r2, #1
 800add0:	7830      	ldrb	r0, [r6, #0]
 800add2:	f7ff ff9c 	bl	800ad0e <__hexdig_fun>
 800add6:	2800      	cmp	r0, #0
 800add8:	d1f8      	bne.n	800adcc <__gethex+0x94>
 800adda:	9901      	ldr	r1, [sp, #4]
 800addc:	4652      	mov	r2, sl
 800adde:	4630      	mov	r0, r6
 800ade0:	f001 fc15 	bl	800c60e <strncmp>
 800ade4:	b980      	cbnz	r0, 800ae08 <__gethex+0xd0>
 800ade6:	b94d      	cbnz	r5, 800adfc <__gethex+0xc4>
 800ade8:	eb06 050a 	add.w	r5, r6, sl
 800adec:	462a      	mov	r2, r5
 800adee:	4616      	mov	r6, r2
 800adf0:	3201      	adds	r2, #1
 800adf2:	7830      	ldrb	r0, [r6, #0]
 800adf4:	f7ff ff8b 	bl	800ad0e <__hexdig_fun>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1f8      	bne.n	800adee <__gethex+0xb6>
 800adfc:	1bad      	subs	r5, r5, r6
 800adfe:	00ad      	lsls	r5, r5, #2
 800ae00:	e004      	b.n	800ae0c <__gethex+0xd4>
 800ae02:	2400      	movs	r4, #0
 800ae04:	4625      	mov	r5, r4
 800ae06:	e7e0      	b.n	800adca <__gethex+0x92>
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	d1f7      	bne.n	800adfc <__gethex+0xc4>
 800ae0c:	7833      	ldrb	r3, [r6, #0]
 800ae0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae12:	2b50      	cmp	r3, #80	; 0x50
 800ae14:	d13b      	bne.n	800ae8e <__gethex+0x156>
 800ae16:	7873      	ldrb	r3, [r6, #1]
 800ae18:	2b2b      	cmp	r3, #43	; 0x2b
 800ae1a:	d02c      	beq.n	800ae76 <__gethex+0x13e>
 800ae1c:	2b2d      	cmp	r3, #45	; 0x2d
 800ae1e:	d02e      	beq.n	800ae7e <__gethex+0x146>
 800ae20:	1c71      	adds	r1, r6, #1
 800ae22:	f04f 0900 	mov.w	r9, #0
 800ae26:	7808      	ldrb	r0, [r1, #0]
 800ae28:	f7ff ff71 	bl	800ad0e <__hexdig_fun>
 800ae2c:	1e43      	subs	r3, r0, #1
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b18      	cmp	r3, #24
 800ae32:	d82c      	bhi.n	800ae8e <__gethex+0x156>
 800ae34:	f1a0 0210 	sub.w	r2, r0, #16
 800ae38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae3c:	f7ff ff67 	bl	800ad0e <__hexdig_fun>
 800ae40:	1e43      	subs	r3, r0, #1
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b18      	cmp	r3, #24
 800ae46:	d91d      	bls.n	800ae84 <__gethex+0x14c>
 800ae48:	f1b9 0f00 	cmp.w	r9, #0
 800ae4c:	d000      	beq.n	800ae50 <__gethex+0x118>
 800ae4e:	4252      	negs	r2, r2
 800ae50:	4415      	add	r5, r2
 800ae52:	f8cb 1000 	str.w	r1, [fp]
 800ae56:	b1e4      	cbz	r4, 800ae92 <__gethex+0x15a>
 800ae58:	9b00      	ldr	r3, [sp, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bf14      	ite	ne
 800ae5e:	2700      	movne	r7, #0
 800ae60:	2706      	moveq	r7, #6
 800ae62:	4638      	mov	r0, r7
 800ae64:	b009      	add	sp, #36	; 0x24
 800ae66:	ecbd 8b02 	vpop	{d8}
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	463e      	mov	r6, r7
 800ae70:	4625      	mov	r5, r4
 800ae72:	2401      	movs	r4, #1
 800ae74:	e7ca      	b.n	800ae0c <__gethex+0xd4>
 800ae76:	f04f 0900 	mov.w	r9, #0
 800ae7a:	1cb1      	adds	r1, r6, #2
 800ae7c:	e7d3      	b.n	800ae26 <__gethex+0xee>
 800ae7e:	f04f 0901 	mov.w	r9, #1
 800ae82:	e7fa      	b.n	800ae7a <__gethex+0x142>
 800ae84:	230a      	movs	r3, #10
 800ae86:	fb03 0202 	mla	r2, r3, r2, r0
 800ae8a:	3a10      	subs	r2, #16
 800ae8c:	e7d4      	b.n	800ae38 <__gethex+0x100>
 800ae8e:	4631      	mov	r1, r6
 800ae90:	e7df      	b.n	800ae52 <__gethex+0x11a>
 800ae92:	1bf3      	subs	r3, r6, r7
 800ae94:	3b01      	subs	r3, #1
 800ae96:	4621      	mov	r1, r4
 800ae98:	2b07      	cmp	r3, #7
 800ae9a:	dc0b      	bgt.n	800aeb4 <__gethex+0x17c>
 800ae9c:	ee18 0a10 	vmov	r0, s16
 800aea0:	f000 fae6 	bl	800b470 <_Balloc>
 800aea4:	4604      	mov	r4, r0
 800aea6:	b940      	cbnz	r0, 800aeba <__gethex+0x182>
 800aea8:	4b65      	ldr	r3, [pc, #404]	; (800b040 <__gethex+0x308>)
 800aeaa:	4602      	mov	r2, r0
 800aeac:	21de      	movs	r1, #222	; 0xde
 800aeae:	4865      	ldr	r0, [pc, #404]	; (800b044 <__gethex+0x30c>)
 800aeb0:	f7fe fe7c 	bl	8009bac <__assert_func>
 800aeb4:	3101      	adds	r1, #1
 800aeb6:	105b      	asrs	r3, r3, #1
 800aeb8:	e7ee      	b.n	800ae98 <__gethex+0x160>
 800aeba:	f100 0914 	add.w	r9, r0, #20
 800aebe:	f04f 0b00 	mov.w	fp, #0
 800aec2:	f1ca 0301 	rsb	r3, sl, #1
 800aec6:	f8cd 9008 	str.w	r9, [sp, #8]
 800aeca:	f8cd b000 	str.w	fp, [sp]
 800aece:	9306      	str	r3, [sp, #24]
 800aed0:	42b7      	cmp	r7, r6
 800aed2:	d340      	bcc.n	800af56 <__gethex+0x21e>
 800aed4:	9802      	ldr	r0, [sp, #8]
 800aed6:	9b00      	ldr	r3, [sp, #0]
 800aed8:	f840 3b04 	str.w	r3, [r0], #4
 800aedc:	eba0 0009 	sub.w	r0, r0, r9
 800aee0:	1080      	asrs	r0, r0, #2
 800aee2:	0146      	lsls	r6, r0, #5
 800aee4:	6120      	str	r0, [r4, #16]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fbb8 	bl	800b65c <__hi0bits>
 800aeec:	1a30      	subs	r0, r6, r0
 800aeee:	f8d8 6000 	ldr.w	r6, [r8]
 800aef2:	42b0      	cmp	r0, r6
 800aef4:	dd63      	ble.n	800afbe <__gethex+0x286>
 800aef6:	1b87      	subs	r7, r0, r6
 800aef8:	4639      	mov	r1, r7
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 ff52 	bl	800bda4 <__any_on>
 800af00:	4682      	mov	sl, r0
 800af02:	b1a8      	cbz	r0, 800af30 <__gethex+0x1f8>
 800af04:	1e7b      	subs	r3, r7, #1
 800af06:	1159      	asrs	r1, r3, #5
 800af08:	f003 021f 	and.w	r2, r3, #31
 800af0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af10:	f04f 0a01 	mov.w	sl, #1
 800af14:	fa0a f202 	lsl.w	r2, sl, r2
 800af18:	420a      	tst	r2, r1
 800af1a:	d009      	beq.n	800af30 <__gethex+0x1f8>
 800af1c:	4553      	cmp	r3, sl
 800af1e:	dd05      	ble.n	800af2c <__gethex+0x1f4>
 800af20:	1eb9      	subs	r1, r7, #2
 800af22:	4620      	mov	r0, r4
 800af24:	f000 ff3e 	bl	800bda4 <__any_on>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d145      	bne.n	800afb8 <__gethex+0x280>
 800af2c:	f04f 0a02 	mov.w	sl, #2
 800af30:	4639      	mov	r1, r7
 800af32:	4620      	mov	r0, r4
 800af34:	f7ff fe99 	bl	800ac6a <rshift>
 800af38:	443d      	add	r5, r7
 800af3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af3e:	42ab      	cmp	r3, r5
 800af40:	da4c      	bge.n	800afdc <__gethex+0x2a4>
 800af42:	ee18 0a10 	vmov	r0, s16
 800af46:	4621      	mov	r1, r4
 800af48:	f000 fad2 	bl	800b4f0 <_Bfree>
 800af4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af4e:	2300      	movs	r3, #0
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	27a3      	movs	r7, #163	; 0xa3
 800af54:	e785      	b.n	800ae62 <__gethex+0x12a>
 800af56:	1e73      	subs	r3, r6, #1
 800af58:	9a05      	ldr	r2, [sp, #20]
 800af5a:	9303      	str	r3, [sp, #12]
 800af5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af60:	4293      	cmp	r3, r2
 800af62:	d019      	beq.n	800af98 <__gethex+0x260>
 800af64:	f1bb 0f20 	cmp.w	fp, #32
 800af68:	d107      	bne.n	800af7a <__gethex+0x242>
 800af6a:	9b02      	ldr	r3, [sp, #8]
 800af6c:	9a00      	ldr	r2, [sp, #0]
 800af6e:	f843 2b04 	str.w	r2, [r3], #4
 800af72:	9302      	str	r3, [sp, #8]
 800af74:	2300      	movs	r3, #0
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	469b      	mov	fp, r3
 800af7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800af7e:	f7ff fec6 	bl	800ad0e <__hexdig_fun>
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	f000 000f 	and.w	r0, r0, #15
 800af88:	fa00 f00b 	lsl.w	r0, r0, fp
 800af8c:	4303      	orrs	r3, r0
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	f10b 0b04 	add.w	fp, fp, #4
 800af94:	9b03      	ldr	r3, [sp, #12]
 800af96:	e00d      	b.n	800afb4 <__gethex+0x27c>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	9a06      	ldr	r2, [sp, #24]
 800af9c:	4413      	add	r3, r2
 800af9e:	42bb      	cmp	r3, r7
 800afa0:	d3e0      	bcc.n	800af64 <__gethex+0x22c>
 800afa2:	4618      	mov	r0, r3
 800afa4:	9901      	ldr	r1, [sp, #4]
 800afa6:	9307      	str	r3, [sp, #28]
 800afa8:	4652      	mov	r2, sl
 800afaa:	f001 fb30 	bl	800c60e <strncmp>
 800afae:	9b07      	ldr	r3, [sp, #28]
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d1d7      	bne.n	800af64 <__gethex+0x22c>
 800afb4:	461e      	mov	r6, r3
 800afb6:	e78b      	b.n	800aed0 <__gethex+0x198>
 800afb8:	f04f 0a03 	mov.w	sl, #3
 800afbc:	e7b8      	b.n	800af30 <__gethex+0x1f8>
 800afbe:	da0a      	bge.n	800afd6 <__gethex+0x29e>
 800afc0:	1a37      	subs	r7, r6, r0
 800afc2:	4621      	mov	r1, r4
 800afc4:	ee18 0a10 	vmov	r0, s16
 800afc8:	463a      	mov	r2, r7
 800afca:	f000 fcad 	bl	800b928 <__lshift>
 800afce:	1bed      	subs	r5, r5, r7
 800afd0:	4604      	mov	r4, r0
 800afd2:	f100 0914 	add.w	r9, r0, #20
 800afd6:	f04f 0a00 	mov.w	sl, #0
 800afda:	e7ae      	b.n	800af3a <__gethex+0x202>
 800afdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800afe0:	42a8      	cmp	r0, r5
 800afe2:	dd72      	ble.n	800b0ca <__gethex+0x392>
 800afe4:	1b45      	subs	r5, r0, r5
 800afe6:	42ae      	cmp	r6, r5
 800afe8:	dc36      	bgt.n	800b058 <__gethex+0x320>
 800afea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d02a      	beq.n	800b048 <__gethex+0x310>
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d02c      	beq.n	800b050 <__gethex+0x318>
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d115      	bne.n	800b026 <__gethex+0x2ee>
 800affa:	42ae      	cmp	r6, r5
 800affc:	d113      	bne.n	800b026 <__gethex+0x2ee>
 800affe:	2e01      	cmp	r6, #1
 800b000:	d10b      	bne.n	800b01a <__gethex+0x2e2>
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b008:	6013      	str	r3, [r2, #0]
 800b00a:	2301      	movs	r3, #1
 800b00c:	6123      	str	r3, [r4, #16]
 800b00e:	f8c9 3000 	str.w	r3, [r9]
 800b012:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b014:	2762      	movs	r7, #98	; 0x62
 800b016:	601c      	str	r4, [r3, #0]
 800b018:	e723      	b.n	800ae62 <__gethex+0x12a>
 800b01a:	1e71      	subs	r1, r6, #1
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 fec1 	bl	800bda4 <__any_on>
 800b022:	2800      	cmp	r0, #0
 800b024:	d1ed      	bne.n	800b002 <__gethex+0x2ca>
 800b026:	ee18 0a10 	vmov	r0, s16
 800b02a:	4621      	mov	r1, r4
 800b02c:	f000 fa60 	bl	800b4f0 <_Bfree>
 800b030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b032:	2300      	movs	r3, #0
 800b034:	6013      	str	r3, [r2, #0]
 800b036:	2750      	movs	r7, #80	; 0x50
 800b038:	e713      	b.n	800ae62 <__gethex+0x12a>
 800b03a:	bf00      	nop
 800b03c:	0800f0c0 	.word	0x0800f0c0
 800b040:	0800efe1 	.word	0x0800efe1
 800b044:	0800f054 	.word	0x0800f054
 800b048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1eb      	bne.n	800b026 <__gethex+0x2ee>
 800b04e:	e7d8      	b.n	800b002 <__gethex+0x2ca>
 800b050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1d5      	bne.n	800b002 <__gethex+0x2ca>
 800b056:	e7e6      	b.n	800b026 <__gethex+0x2ee>
 800b058:	1e6f      	subs	r7, r5, #1
 800b05a:	f1ba 0f00 	cmp.w	sl, #0
 800b05e:	d131      	bne.n	800b0c4 <__gethex+0x38c>
 800b060:	b127      	cbz	r7, 800b06c <__gethex+0x334>
 800b062:	4639      	mov	r1, r7
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fe9d 	bl	800bda4 <__any_on>
 800b06a:	4682      	mov	sl, r0
 800b06c:	117b      	asrs	r3, r7, #5
 800b06e:	2101      	movs	r1, #1
 800b070:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b074:	f007 071f 	and.w	r7, r7, #31
 800b078:	fa01 f707 	lsl.w	r7, r1, r7
 800b07c:	421f      	tst	r7, r3
 800b07e:	4629      	mov	r1, r5
 800b080:	4620      	mov	r0, r4
 800b082:	bf18      	it	ne
 800b084:	f04a 0a02 	orrne.w	sl, sl, #2
 800b088:	1b76      	subs	r6, r6, r5
 800b08a:	f7ff fdee 	bl	800ac6a <rshift>
 800b08e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b092:	2702      	movs	r7, #2
 800b094:	f1ba 0f00 	cmp.w	sl, #0
 800b098:	d048      	beq.n	800b12c <__gethex+0x3f4>
 800b09a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d015      	beq.n	800b0ce <__gethex+0x396>
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d017      	beq.n	800b0d6 <__gethex+0x39e>
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d109      	bne.n	800b0be <__gethex+0x386>
 800b0aa:	f01a 0f02 	tst.w	sl, #2
 800b0ae:	d006      	beq.n	800b0be <__gethex+0x386>
 800b0b0:	f8d9 0000 	ldr.w	r0, [r9]
 800b0b4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b0b8:	f01a 0f01 	tst.w	sl, #1
 800b0bc:	d10e      	bne.n	800b0dc <__gethex+0x3a4>
 800b0be:	f047 0710 	orr.w	r7, r7, #16
 800b0c2:	e033      	b.n	800b12c <__gethex+0x3f4>
 800b0c4:	f04f 0a01 	mov.w	sl, #1
 800b0c8:	e7d0      	b.n	800b06c <__gethex+0x334>
 800b0ca:	2701      	movs	r7, #1
 800b0cc:	e7e2      	b.n	800b094 <__gethex+0x35c>
 800b0ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0d0:	f1c3 0301 	rsb	r3, r3, #1
 800b0d4:	9315      	str	r3, [sp, #84]	; 0x54
 800b0d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0f0      	beq.n	800b0be <__gethex+0x386>
 800b0dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b0e0:	f104 0314 	add.w	r3, r4, #20
 800b0e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b0e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b0ec:	f04f 0c00 	mov.w	ip, #0
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b0fa:	d01c      	beq.n	800b136 <__gethex+0x3fe>
 800b0fc:	3201      	adds	r2, #1
 800b0fe:	6002      	str	r2, [r0, #0]
 800b100:	2f02      	cmp	r7, #2
 800b102:	f104 0314 	add.w	r3, r4, #20
 800b106:	d13f      	bne.n	800b188 <__gethex+0x450>
 800b108:	f8d8 2000 	ldr.w	r2, [r8]
 800b10c:	3a01      	subs	r2, #1
 800b10e:	42b2      	cmp	r2, r6
 800b110:	d10a      	bne.n	800b128 <__gethex+0x3f0>
 800b112:	1171      	asrs	r1, r6, #5
 800b114:	2201      	movs	r2, #1
 800b116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b11a:	f006 061f 	and.w	r6, r6, #31
 800b11e:	fa02 f606 	lsl.w	r6, r2, r6
 800b122:	421e      	tst	r6, r3
 800b124:	bf18      	it	ne
 800b126:	4617      	movne	r7, r2
 800b128:	f047 0720 	orr.w	r7, r7, #32
 800b12c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b12e:	601c      	str	r4, [r3, #0]
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	601d      	str	r5, [r3, #0]
 800b134:	e695      	b.n	800ae62 <__gethex+0x12a>
 800b136:	4299      	cmp	r1, r3
 800b138:	f843 cc04 	str.w	ip, [r3, #-4]
 800b13c:	d8d8      	bhi.n	800b0f0 <__gethex+0x3b8>
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	459b      	cmp	fp, r3
 800b142:	db19      	blt.n	800b178 <__gethex+0x440>
 800b144:	6861      	ldr	r1, [r4, #4]
 800b146:	ee18 0a10 	vmov	r0, s16
 800b14a:	3101      	adds	r1, #1
 800b14c:	f000 f990 	bl	800b470 <_Balloc>
 800b150:	4681      	mov	r9, r0
 800b152:	b918      	cbnz	r0, 800b15c <__gethex+0x424>
 800b154:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <__gethex+0x488>)
 800b156:	4602      	mov	r2, r0
 800b158:	2184      	movs	r1, #132	; 0x84
 800b15a:	e6a8      	b.n	800aeae <__gethex+0x176>
 800b15c:	6922      	ldr	r2, [r4, #16]
 800b15e:	3202      	adds	r2, #2
 800b160:	f104 010c 	add.w	r1, r4, #12
 800b164:	0092      	lsls	r2, r2, #2
 800b166:	300c      	adds	r0, #12
 800b168:	f000 f974 	bl	800b454 <memcpy>
 800b16c:	4621      	mov	r1, r4
 800b16e:	ee18 0a10 	vmov	r0, s16
 800b172:	f000 f9bd 	bl	800b4f0 <_Bfree>
 800b176:	464c      	mov	r4, r9
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b180:	6122      	str	r2, [r4, #16]
 800b182:	2201      	movs	r2, #1
 800b184:	615a      	str	r2, [r3, #20]
 800b186:	e7bb      	b.n	800b100 <__gethex+0x3c8>
 800b188:	6922      	ldr	r2, [r4, #16]
 800b18a:	455a      	cmp	r2, fp
 800b18c:	dd0b      	ble.n	800b1a6 <__gethex+0x46e>
 800b18e:	2101      	movs	r1, #1
 800b190:	4620      	mov	r0, r4
 800b192:	f7ff fd6a 	bl	800ac6a <rshift>
 800b196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b19a:	3501      	adds	r5, #1
 800b19c:	42ab      	cmp	r3, r5
 800b19e:	f6ff aed0 	blt.w	800af42 <__gethex+0x20a>
 800b1a2:	2701      	movs	r7, #1
 800b1a4:	e7c0      	b.n	800b128 <__gethex+0x3f0>
 800b1a6:	f016 061f 	ands.w	r6, r6, #31
 800b1aa:	d0fa      	beq.n	800b1a2 <__gethex+0x46a>
 800b1ac:	449a      	add	sl, r3
 800b1ae:	f1c6 0620 	rsb	r6, r6, #32
 800b1b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b1b6:	f000 fa51 	bl	800b65c <__hi0bits>
 800b1ba:	42b0      	cmp	r0, r6
 800b1bc:	dbe7      	blt.n	800b18e <__gethex+0x456>
 800b1be:	e7f0      	b.n	800b1a2 <__gethex+0x46a>
 800b1c0:	0800efe1 	.word	0x0800efe1

0800b1c4 <L_shift>:
 800b1c4:	f1c2 0208 	rsb	r2, r2, #8
 800b1c8:	0092      	lsls	r2, r2, #2
 800b1ca:	b570      	push	{r4, r5, r6, lr}
 800b1cc:	f1c2 0620 	rsb	r6, r2, #32
 800b1d0:	6843      	ldr	r3, [r0, #4]
 800b1d2:	6804      	ldr	r4, [r0, #0]
 800b1d4:	fa03 f506 	lsl.w	r5, r3, r6
 800b1d8:	432c      	orrs	r4, r5
 800b1da:	40d3      	lsrs	r3, r2
 800b1dc:	6004      	str	r4, [r0, #0]
 800b1de:	f840 3f04 	str.w	r3, [r0, #4]!
 800b1e2:	4288      	cmp	r0, r1
 800b1e4:	d3f4      	bcc.n	800b1d0 <L_shift+0xc>
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}

0800b1e8 <__match>:
 800b1e8:	b530      	push	{r4, r5, lr}
 800b1ea:	6803      	ldr	r3, [r0, #0]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f2:	b914      	cbnz	r4, 800b1fa <__match+0x12>
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	bd30      	pop	{r4, r5, pc}
 800b1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b202:	2d19      	cmp	r5, #25
 800b204:	bf98      	it	ls
 800b206:	3220      	addls	r2, #32
 800b208:	42a2      	cmp	r2, r4
 800b20a:	d0f0      	beq.n	800b1ee <__match+0x6>
 800b20c:	2000      	movs	r0, #0
 800b20e:	e7f3      	b.n	800b1f8 <__match+0x10>

0800b210 <__hexnan>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	680b      	ldr	r3, [r1, #0]
 800b216:	6801      	ldr	r1, [r0, #0]
 800b218:	115e      	asrs	r6, r3, #5
 800b21a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b21e:	f013 031f 	ands.w	r3, r3, #31
 800b222:	b087      	sub	sp, #28
 800b224:	bf18      	it	ne
 800b226:	3604      	addne	r6, #4
 800b228:	2500      	movs	r5, #0
 800b22a:	1f37      	subs	r7, r6, #4
 800b22c:	4682      	mov	sl, r0
 800b22e:	4690      	mov	r8, r2
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	f846 5c04 	str.w	r5, [r6, #-4]
 800b236:	46b9      	mov	r9, r7
 800b238:	463c      	mov	r4, r7
 800b23a:	9502      	str	r5, [sp, #8]
 800b23c:	46ab      	mov	fp, r5
 800b23e:	784a      	ldrb	r2, [r1, #1]
 800b240:	1c4b      	adds	r3, r1, #1
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	b342      	cbz	r2, 800b298 <__hexnan+0x88>
 800b246:	4610      	mov	r0, r2
 800b248:	9105      	str	r1, [sp, #20]
 800b24a:	9204      	str	r2, [sp, #16]
 800b24c:	f7ff fd5f 	bl	800ad0e <__hexdig_fun>
 800b250:	2800      	cmp	r0, #0
 800b252:	d14f      	bne.n	800b2f4 <__hexnan+0xe4>
 800b254:	9a04      	ldr	r2, [sp, #16]
 800b256:	9905      	ldr	r1, [sp, #20]
 800b258:	2a20      	cmp	r2, #32
 800b25a:	d818      	bhi.n	800b28e <__hexnan+0x7e>
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	459b      	cmp	fp, r3
 800b260:	dd13      	ble.n	800b28a <__hexnan+0x7a>
 800b262:	454c      	cmp	r4, r9
 800b264:	d206      	bcs.n	800b274 <__hexnan+0x64>
 800b266:	2d07      	cmp	r5, #7
 800b268:	dc04      	bgt.n	800b274 <__hexnan+0x64>
 800b26a:	462a      	mov	r2, r5
 800b26c:	4649      	mov	r1, r9
 800b26e:	4620      	mov	r0, r4
 800b270:	f7ff ffa8 	bl	800b1c4 <L_shift>
 800b274:	4544      	cmp	r4, r8
 800b276:	d950      	bls.n	800b31a <__hexnan+0x10a>
 800b278:	2300      	movs	r3, #0
 800b27a:	f1a4 0904 	sub.w	r9, r4, #4
 800b27e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b282:	f8cd b008 	str.w	fp, [sp, #8]
 800b286:	464c      	mov	r4, r9
 800b288:	461d      	mov	r5, r3
 800b28a:	9903      	ldr	r1, [sp, #12]
 800b28c:	e7d7      	b.n	800b23e <__hexnan+0x2e>
 800b28e:	2a29      	cmp	r2, #41	; 0x29
 800b290:	d156      	bne.n	800b340 <__hexnan+0x130>
 800b292:	3102      	adds	r1, #2
 800b294:	f8ca 1000 	str.w	r1, [sl]
 800b298:	f1bb 0f00 	cmp.w	fp, #0
 800b29c:	d050      	beq.n	800b340 <__hexnan+0x130>
 800b29e:	454c      	cmp	r4, r9
 800b2a0:	d206      	bcs.n	800b2b0 <__hexnan+0xa0>
 800b2a2:	2d07      	cmp	r5, #7
 800b2a4:	dc04      	bgt.n	800b2b0 <__hexnan+0xa0>
 800b2a6:	462a      	mov	r2, r5
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f7ff ff8a 	bl	800b1c4 <L_shift>
 800b2b0:	4544      	cmp	r4, r8
 800b2b2:	d934      	bls.n	800b31e <__hexnan+0x10e>
 800b2b4:	f1a8 0204 	sub.w	r2, r8, #4
 800b2b8:	4623      	mov	r3, r4
 800b2ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800b2be:	f842 1f04 	str.w	r1, [r2, #4]!
 800b2c2:	429f      	cmp	r7, r3
 800b2c4:	d2f9      	bcs.n	800b2ba <__hexnan+0xaa>
 800b2c6:	1b3b      	subs	r3, r7, r4
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	3401      	adds	r4, #1
 800b2d0:	3e03      	subs	r6, #3
 800b2d2:	42b4      	cmp	r4, r6
 800b2d4:	bf88      	it	hi
 800b2d6:	2304      	movhi	r3, #4
 800b2d8:	4443      	add	r3, r8
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f843 2b04 	str.w	r2, [r3], #4
 800b2e0:	429f      	cmp	r7, r3
 800b2e2:	d2fb      	bcs.n	800b2dc <__hexnan+0xcc>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	b91b      	cbnz	r3, 800b2f0 <__hexnan+0xe0>
 800b2e8:	4547      	cmp	r7, r8
 800b2ea:	d127      	bne.n	800b33c <__hexnan+0x12c>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	2005      	movs	r0, #5
 800b2f2:	e026      	b.n	800b342 <__hexnan+0x132>
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	2d08      	cmp	r5, #8
 800b2f8:	f10b 0b01 	add.w	fp, fp, #1
 800b2fc:	dd06      	ble.n	800b30c <__hexnan+0xfc>
 800b2fe:	4544      	cmp	r4, r8
 800b300:	d9c3      	bls.n	800b28a <__hexnan+0x7a>
 800b302:	2300      	movs	r3, #0
 800b304:	f844 3c04 	str.w	r3, [r4, #-4]
 800b308:	2501      	movs	r5, #1
 800b30a:	3c04      	subs	r4, #4
 800b30c:	6822      	ldr	r2, [r4, #0]
 800b30e:	f000 000f 	and.w	r0, r0, #15
 800b312:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b316:	6022      	str	r2, [r4, #0]
 800b318:	e7b7      	b.n	800b28a <__hexnan+0x7a>
 800b31a:	2508      	movs	r5, #8
 800b31c:	e7b5      	b.n	800b28a <__hexnan+0x7a>
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0df      	beq.n	800b2e4 <__hexnan+0xd4>
 800b324:	f04f 32ff 	mov.w	r2, #4294967295
 800b328:	f1c3 0320 	rsb	r3, r3, #32
 800b32c:	fa22 f303 	lsr.w	r3, r2, r3
 800b330:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b334:	401a      	ands	r2, r3
 800b336:	f846 2c04 	str.w	r2, [r6, #-4]
 800b33a:	e7d3      	b.n	800b2e4 <__hexnan+0xd4>
 800b33c:	3f04      	subs	r7, #4
 800b33e:	e7d1      	b.n	800b2e4 <__hexnan+0xd4>
 800b340:	2004      	movs	r0, #4
 800b342:	b007      	add	sp, #28
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b348 <_localeconv_r>:
 800b348:	4800      	ldr	r0, [pc, #0]	; (800b34c <_localeconv_r+0x4>)
 800b34a:	4770      	bx	lr
 800b34c:	20000164 	.word	0x20000164

0800b350 <__retarget_lock_init_recursive>:
 800b350:	4770      	bx	lr

0800b352 <__retarget_lock_acquire_recursive>:
 800b352:	4770      	bx	lr

0800b354 <__retarget_lock_release_recursive>:
 800b354:	4770      	bx	lr

0800b356 <__swhatbuf_r>:
 800b356:	b570      	push	{r4, r5, r6, lr}
 800b358:	460e      	mov	r6, r1
 800b35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35e:	2900      	cmp	r1, #0
 800b360:	b096      	sub	sp, #88	; 0x58
 800b362:	4614      	mov	r4, r2
 800b364:	461d      	mov	r5, r3
 800b366:	da07      	bge.n	800b378 <__swhatbuf_r+0x22>
 800b368:	2300      	movs	r3, #0
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	89b3      	ldrh	r3, [r6, #12]
 800b36e:	061a      	lsls	r2, r3, #24
 800b370:	d410      	bmi.n	800b394 <__swhatbuf_r+0x3e>
 800b372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b376:	e00e      	b.n	800b396 <__swhatbuf_r+0x40>
 800b378:	466a      	mov	r2, sp
 800b37a:	f001 f991 	bl	800c6a0 <_fstat_r>
 800b37e:	2800      	cmp	r0, #0
 800b380:	dbf2      	blt.n	800b368 <__swhatbuf_r+0x12>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b38c:	425a      	negs	r2, r3
 800b38e:	415a      	adcs	r2, r3
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	e7ee      	b.n	800b372 <__swhatbuf_r+0x1c>
 800b394:	2340      	movs	r3, #64	; 0x40
 800b396:	2000      	movs	r0, #0
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	b016      	add	sp, #88	; 0x58
 800b39c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3a0 <__smakebuf_r>:
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a4:	079d      	lsls	r5, r3, #30
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	d507      	bpl.n	800b3bc <__smakebuf_r+0x1c>
 800b3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	b002      	add	sp, #8
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	ab01      	add	r3, sp, #4
 800b3be:	466a      	mov	r2, sp
 800b3c0:	f7ff ffc9 	bl	800b356 <__swhatbuf_r>
 800b3c4:	9900      	ldr	r1, [sp, #0]
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f000 fd6b 	bl	800bea4 <_malloc_r>
 800b3ce:	b948      	cbnz	r0, 800b3e4 <__smakebuf_r+0x44>
 800b3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d4:	059a      	lsls	r2, r3, #22
 800b3d6:	d4ef      	bmi.n	800b3b8 <__smakebuf_r+0x18>
 800b3d8:	f023 0303 	bic.w	r3, r3, #3
 800b3dc:	f043 0302 	orr.w	r3, r3, #2
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	e7e3      	b.n	800b3ac <__smakebuf_r+0xc>
 800b3e4:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <__smakebuf_r+0x7c>)
 800b3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	6020      	str	r0, [r4, #0]
 800b3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	6163      	str	r3, [r4, #20]
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	6120      	str	r0, [r4, #16]
 800b3fa:	b15b      	cbz	r3, 800b414 <__smakebuf_r+0x74>
 800b3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b400:	4630      	mov	r0, r6
 800b402:	f001 f95f 	bl	800c6c4 <_isatty_r>
 800b406:	b128      	cbz	r0, 800b414 <__smakebuf_r+0x74>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	89a0      	ldrh	r0, [r4, #12]
 800b416:	4305      	orrs	r5, r0
 800b418:	81a5      	strh	r5, [r4, #12]
 800b41a:	e7cd      	b.n	800b3b8 <__smakebuf_r+0x18>
 800b41c:	0800aaa5 	.word	0x0800aaa5

0800b420 <malloc>:
 800b420:	4b02      	ldr	r3, [pc, #8]	; (800b42c <malloc+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f000 bd3d 	b.w	800bea4 <_malloc_r>
 800b42a:	bf00      	nop
 800b42c:	2000000c 	.word	0x2000000c

0800b430 <__ascii_mbtowc>:
 800b430:	b082      	sub	sp, #8
 800b432:	b901      	cbnz	r1, 800b436 <__ascii_mbtowc+0x6>
 800b434:	a901      	add	r1, sp, #4
 800b436:	b142      	cbz	r2, 800b44a <__ascii_mbtowc+0x1a>
 800b438:	b14b      	cbz	r3, 800b44e <__ascii_mbtowc+0x1e>
 800b43a:	7813      	ldrb	r3, [r2, #0]
 800b43c:	600b      	str	r3, [r1, #0]
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	1e10      	subs	r0, r2, #0
 800b442:	bf18      	it	ne
 800b444:	2001      	movne	r0, #1
 800b446:	b002      	add	sp, #8
 800b448:	4770      	bx	lr
 800b44a:	4610      	mov	r0, r2
 800b44c:	e7fb      	b.n	800b446 <__ascii_mbtowc+0x16>
 800b44e:	f06f 0001 	mvn.w	r0, #1
 800b452:	e7f8      	b.n	800b446 <__ascii_mbtowc+0x16>

0800b454 <memcpy>:
 800b454:	440a      	add	r2, r1
 800b456:	4291      	cmp	r1, r2
 800b458:	f100 33ff 	add.w	r3, r0, #4294967295
 800b45c:	d100      	bne.n	800b460 <memcpy+0xc>
 800b45e:	4770      	bx	lr
 800b460:	b510      	push	{r4, lr}
 800b462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b46a:	4291      	cmp	r1, r2
 800b46c:	d1f9      	bne.n	800b462 <memcpy+0xe>
 800b46e:	bd10      	pop	{r4, pc}

0800b470 <_Balloc>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b474:	4604      	mov	r4, r0
 800b476:	460d      	mov	r5, r1
 800b478:	b976      	cbnz	r6, 800b498 <_Balloc+0x28>
 800b47a:	2010      	movs	r0, #16
 800b47c:	f7ff ffd0 	bl	800b420 <malloc>
 800b480:	4602      	mov	r2, r0
 800b482:	6260      	str	r0, [r4, #36]	; 0x24
 800b484:	b920      	cbnz	r0, 800b490 <_Balloc+0x20>
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <_Balloc+0x78>)
 800b488:	4818      	ldr	r0, [pc, #96]	; (800b4ec <_Balloc+0x7c>)
 800b48a:	2166      	movs	r1, #102	; 0x66
 800b48c:	f7fe fb8e 	bl	8009bac <__assert_func>
 800b490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b494:	6006      	str	r6, [r0, #0]
 800b496:	60c6      	str	r6, [r0, #12]
 800b498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b49a:	68f3      	ldr	r3, [r6, #12]
 800b49c:	b183      	cbz	r3, 800b4c0 <_Balloc+0x50>
 800b49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4a6:	b9b8      	cbnz	r0, 800b4d8 <_Balloc+0x68>
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b4ae:	1d72      	adds	r2, r6, #5
 800b4b0:	0092      	lsls	r2, r2, #2
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fc97 	bl	800bde6 <_calloc_r>
 800b4b8:	b160      	cbz	r0, 800b4d4 <_Balloc+0x64>
 800b4ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4be:	e00e      	b.n	800b4de <_Balloc+0x6e>
 800b4c0:	2221      	movs	r2, #33	; 0x21
 800b4c2:	2104      	movs	r1, #4
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 fc8e 	bl	800bde6 <_calloc_r>
 800b4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4cc:	60f0      	str	r0, [r6, #12]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e4      	bne.n	800b49e <_Balloc+0x2e>
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	6802      	ldr	r2, [r0, #0]
 800b4da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4e4:	e7f7      	b.n	800b4d6 <_Balloc+0x66>
 800b4e6:	bf00      	nop
 800b4e8:	0800edc0 	.word	0x0800edc0
 800b4ec:	0800f0d4 	.word	0x0800f0d4

0800b4f0 <_Bfree>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	b976      	cbnz	r6, 800b518 <_Bfree+0x28>
 800b4fa:	2010      	movs	r0, #16
 800b4fc:	f7ff ff90 	bl	800b420 <malloc>
 800b500:	4602      	mov	r2, r0
 800b502:	6268      	str	r0, [r5, #36]	; 0x24
 800b504:	b920      	cbnz	r0, 800b510 <_Bfree+0x20>
 800b506:	4b09      	ldr	r3, [pc, #36]	; (800b52c <_Bfree+0x3c>)
 800b508:	4809      	ldr	r0, [pc, #36]	; (800b530 <_Bfree+0x40>)
 800b50a:	218a      	movs	r1, #138	; 0x8a
 800b50c:	f7fe fb4e 	bl	8009bac <__assert_func>
 800b510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b514:	6006      	str	r6, [r0, #0]
 800b516:	60c6      	str	r6, [r0, #12]
 800b518:	b13c      	cbz	r4, 800b52a <_Bfree+0x3a>
 800b51a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b51c:	6862      	ldr	r2, [r4, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b524:	6021      	str	r1, [r4, #0]
 800b526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	0800edc0 	.word	0x0800edc0
 800b530:	0800f0d4 	.word	0x0800f0d4

0800b534 <__multadd>:
 800b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b538:	690e      	ldr	r6, [r1, #16]
 800b53a:	4607      	mov	r7, r0
 800b53c:	4698      	mov	r8, r3
 800b53e:	460c      	mov	r4, r1
 800b540:	f101 0014 	add.w	r0, r1, #20
 800b544:	2300      	movs	r3, #0
 800b546:	6805      	ldr	r5, [r0, #0]
 800b548:	b2a9      	uxth	r1, r5
 800b54a:	fb02 8101 	mla	r1, r2, r1, r8
 800b54e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b552:	0c2d      	lsrs	r5, r5, #16
 800b554:	fb02 c505 	mla	r5, r2, r5, ip
 800b558:	b289      	uxth	r1, r1
 800b55a:	3301      	adds	r3, #1
 800b55c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b560:	429e      	cmp	r6, r3
 800b562:	f840 1b04 	str.w	r1, [r0], #4
 800b566:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b56a:	dcec      	bgt.n	800b546 <__multadd+0x12>
 800b56c:	f1b8 0f00 	cmp.w	r8, #0
 800b570:	d022      	beq.n	800b5b8 <__multadd+0x84>
 800b572:	68a3      	ldr	r3, [r4, #8]
 800b574:	42b3      	cmp	r3, r6
 800b576:	dc19      	bgt.n	800b5ac <__multadd+0x78>
 800b578:	6861      	ldr	r1, [r4, #4]
 800b57a:	4638      	mov	r0, r7
 800b57c:	3101      	adds	r1, #1
 800b57e:	f7ff ff77 	bl	800b470 <_Balloc>
 800b582:	4605      	mov	r5, r0
 800b584:	b928      	cbnz	r0, 800b592 <__multadd+0x5e>
 800b586:	4602      	mov	r2, r0
 800b588:	4b0d      	ldr	r3, [pc, #52]	; (800b5c0 <__multadd+0x8c>)
 800b58a:	480e      	ldr	r0, [pc, #56]	; (800b5c4 <__multadd+0x90>)
 800b58c:	21b5      	movs	r1, #181	; 0xb5
 800b58e:	f7fe fb0d 	bl	8009bac <__assert_func>
 800b592:	6922      	ldr	r2, [r4, #16]
 800b594:	3202      	adds	r2, #2
 800b596:	f104 010c 	add.w	r1, r4, #12
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	300c      	adds	r0, #12
 800b59e:	f7ff ff59 	bl	800b454 <memcpy>
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff ffa3 	bl	800b4f0 <_Bfree>
 800b5aa:	462c      	mov	r4, r5
 800b5ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b5b0:	3601      	adds	r6, #1
 800b5b2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b5b6:	6126      	str	r6, [r4, #16]
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800efe1 	.word	0x0800efe1
 800b5c4:	0800f0d4 	.word	0x0800f0d4

0800b5c8 <__s2b>:
 800b5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	4615      	mov	r5, r2
 800b5d0:	461f      	mov	r7, r3
 800b5d2:	2209      	movs	r2, #9
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5dc:	2100      	movs	r1, #0
 800b5de:	2201      	movs	r2, #1
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	db09      	blt.n	800b5f8 <__s2b+0x30>
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff ff43 	bl	800b470 <_Balloc>
 800b5ea:	b940      	cbnz	r0, 800b5fe <__s2b+0x36>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	4b19      	ldr	r3, [pc, #100]	; (800b654 <__s2b+0x8c>)
 800b5f0:	4819      	ldr	r0, [pc, #100]	; (800b658 <__s2b+0x90>)
 800b5f2:	21ce      	movs	r1, #206	; 0xce
 800b5f4:	f7fe fada 	bl	8009bac <__assert_func>
 800b5f8:	0052      	lsls	r2, r2, #1
 800b5fa:	3101      	adds	r1, #1
 800b5fc:	e7f0      	b.n	800b5e0 <__s2b+0x18>
 800b5fe:	9b08      	ldr	r3, [sp, #32]
 800b600:	6143      	str	r3, [r0, #20]
 800b602:	2d09      	cmp	r5, #9
 800b604:	f04f 0301 	mov.w	r3, #1
 800b608:	6103      	str	r3, [r0, #16]
 800b60a:	dd16      	ble.n	800b63a <__s2b+0x72>
 800b60c:	f104 0909 	add.w	r9, r4, #9
 800b610:	46c8      	mov	r8, r9
 800b612:	442c      	add	r4, r5
 800b614:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b618:	4601      	mov	r1, r0
 800b61a:	3b30      	subs	r3, #48	; 0x30
 800b61c:	220a      	movs	r2, #10
 800b61e:	4630      	mov	r0, r6
 800b620:	f7ff ff88 	bl	800b534 <__multadd>
 800b624:	45a0      	cmp	r8, r4
 800b626:	d1f5      	bne.n	800b614 <__s2b+0x4c>
 800b628:	f1a5 0408 	sub.w	r4, r5, #8
 800b62c:	444c      	add	r4, r9
 800b62e:	1b2d      	subs	r5, r5, r4
 800b630:	1963      	adds	r3, r4, r5
 800b632:	42bb      	cmp	r3, r7
 800b634:	db04      	blt.n	800b640 <__s2b+0x78>
 800b636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63a:	340a      	adds	r4, #10
 800b63c:	2509      	movs	r5, #9
 800b63e:	e7f6      	b.n	800b62e <__s2b+0x66>
 800b640:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b644:	4601      	mov	r1, r0
 800b646:	3b30      	subs	r3, #48	; 0x30
 800b648:	220a      	movs	r2, #10
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ff72 	bl	800b534 <__multadd>
 800b650:	e7ee      	b.n	800b630 <__s2b+0x68>
 800b652:	bf00      	nop
 800b654:	0800efe1 	.word	0x0800efe1
 800b658:	0800f0d4 	.word	0x0800f0d4

0800b65c <__hi0bits>:
 800b65c:	0c03      	lsrs	r3, r0, #16
 800b65e:	041b      	lsls	r3, r3, #16
 800b660:	b9d3      	cbnz	r3, 800b698 <__hi0bits+0x3c>
 800b662:	0400      	lsls	r0, r0, #16
 800b664:	2310      	movs	r3, #16
 800b666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b66a:	bf04      	itt	eq
 800b66c:	0200      	lsleq	r0, r0, #8
 800b66e:	3308      	addeq	r3, #8
 800b670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b674:	bf04      	itt	eq
 800b676:	0100      	lsleq	r0, r0, #4
 800b678:	3304      	addeq	r3, #4
 800b67a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b67e:	bf04      	itt	eq
 800b680:	0080      	lsleq	r0, r0, #2
 800b682:	3302      	addeq	r3, #2
 800b684:	2800      	cmp	r0, #0
 800b686:	db05      	blt.n	800b694 <__hi0bits+0x38>
 800b688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b68c:	f103 0301 	add.w	r3, r3, #1
 800b690:	bf08      	it	eq
 800b692:	2320      	moveq	r3, #32
 800b694:	4618      	mov	r0, r3
 800b696:	4770      	bx	lr
 800b698:	2300      	movs	r3, #0
 800b69a:	e7e4      	b.n	800b666 <__hi0bits+0xa>

0800b69c <__lo0bits>:
 800b69c:	6803      	ldr	r3, [r0, #0]
 800b69e:	f013 0207 	ands.w	r2, r3, #7
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	d00b      	beq.n	800b6be <__lo0bits+0x22>
 800b6a6:	07da      	lsls	r2, r3, #31
 800b6a8:	d424      	bmi.n	800b6f4 <__lo0bits+0x58>
 800b6aa:	0798      	lsls	r0, r3, #30
 800b6ac:	bf49      	itett	mi
 800b6ae:	085b      	lsrmi	r3, r3, #1
 800b6b0:	089b      	lsrpl	r3, r3, #2
 800b6b2:	2001      	movmi	r0, #1
 800b6b4:	600b      	strmi	r3, [r1, #0]
 800b6b6:	bf5c      	itt	pl
 800b6b8:	600b      	strpl	r3, [r1, #0]
 800b6ba:	2002      	movpl	r0, #2
 800b6bc:	4770      	bx	lr
 800b6be:	b298      	uxth	r0, r3
 800b6c0:	b9b0      	cbnz	r0, 800b6f0 <__lo0bits+0x54>
 800b6c2:	0c1b      	lsrs	r3, r3, #16
 800b6c4:	2010      	movs	r0, #16
 800b6c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6ca:	bf04      	itt	eq
 800b6cc:	0a1b      	lsreq	r3, r3, #8
 800b6ce:	3008      	addeq	r0, #8
 800b6d0:	071a      	lsls	r2, r3, #28
 800b6d2:	bf04      	itt	eq
 800b6d4:	091b      	lsreq	r3, r3, #4
 800b6d6:	3004      	addeq	r0, #4
 800b6d8:	079a      	lsls	r2, r3, #30
 800b6da:	bf04      	itt	eq
 800b6dc:	089b      	lsreq	r3, r3, #2
 800b6de:	3002      	addeq	r0, #2
 800b6e0:	07da      	lsls	r2, r3, #31
 800b6e2:	d403      	bmi.n	800b6ec <__lo0bits+0x50>
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	f100 0001 	add.w	r0, r0, #1
 800b6ea:	d005      	beq.n	800b6f8 <__lo0bits+0x5c>
 800b6ec:	600b      	str	r3, [r1, #0]
 800b6ee:	4770      	bx	lr
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	e7e8      	b.n	800b6c6 <__lo0bits+0x2a>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	4770      	bx	lr
 800b6f8:	2020      	movs	r0, #32
 800b6fa:	4770      	bx	lr

0800b6fc <__i2b>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	460c      	mov	r4, r1
 800b700:	2101      	movs	r1, #1
 800b702:	f7ff feb5 	bl	800b470 <_Balloc>
 800b706:	4602      	mov	r2, r0
 800b708:	b928      	cbnz	r0, 800b716 <__i2b+0x1a>
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <__i2b+0x24>)
 800b70c:	4805      	ldr	r0, [pc, #20]	; (800b724 <__i2b+0x28>)
 800b70e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b712:	f7fe fa4b 	bl	8009bac <__assert_func>
 800b716:	2301      	movs	r3, #1
 800b718:	6144      	str	r4, [r0, #20]
 800b71a:	6103      	str	r3, [r0, #16]
 800b71c:	bd10      	pop	{r4, pc}
 800b71e:	bf00      	nop
 800b720:	0800efe1 	.word	0x0800efe1
 800b724:	0800f0d4 	.word	0x0800f0d4

0800b728 <__multiply>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	4614      	mov	r4, r2
 800b72e:	690a      	ldr	r2, [r1, #16]
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	429a      	cmp	r2, r3
 800b734:	bfb8      	it	lt
 800b736:	460b      	movlt	r3, r1
 800b738:	460d      	mov	r5, r1
 800b73a:	bfbc      	itt	lt
 800b73c:	4625      	movlt	r5, r4
 800b73e:	461c      	movlt	r4, r3
 800b740:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b748:	68ab      	ldr	r3, [r5, #8]
 800b74a:	6869      	ldr	r1, [r5, #4]
 800b74c:	eb0a 0709 	add.w	r7, sl, r9
 800b750:	42bb      	cmp	r3, r7
 800b752:	b085      	sub	sp, #20
 800b754:	bfb8      	it	lt
 800b756:	3101      	addlt	r1, #1
 800b758:	f7ff fe8a 	bl	800b470 <_Balloc>
 800b75c:	b930      	cbnz	r0, 800b76c <__multiply+0x44>
 800b75e:	4602      	mov	r2, r0
 800b760:	4b42      	ldr	r3, [pc, #264]	; (800b86c <__multiply+0x144>)
 800b762:	4843      	ldr	r0, [pc, #268]	; (800b870 <__multiply+0x148>)
 800b764:	f240 115d 	movw	r1, #349	; 0x15d
 800b768:	f7fe fa20 	bl	8009bac <__assert_func>
 800b76c:	f100 0614 	add.w	r6, r0, #20
 800b770:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b774:	4633      	mov	r3, r6
 800b776:	2200      	movs	r2, #0
 800b778:	4543      	cmp	r3, r8
 800b77a:	d31e      	bcc.n	800b7ba <__multiply+0x92>
 800b77c:	f105 0c14 	add.w	ip, r5, #20
 800b780:	f104 0314 	add.w	r3, r4, #20
 800b784:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b788:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b78c:	9202      	str	r2, [sp, #8]
 800b78e:	ebac 0205 	sub.w	r2, ip, r5
 800b792:	3a15      	subs	r2, #21
 800b794:	f022 0203 	bic.w	r2, r2, #3
 800b798:	3204      	adds	r2, #4
 800b79a:	f105 0115 	add.w	r1, r5, #21
 800b79e:	458c      	cmp	ip, r1
 800b7a0:	bf38      	it	cc
 800b7a2:	2204      	movcc	r2, #4
 800b7a4:	9201      	str	r2, [sp, #4]
 800b7a6:	9a02      	ldr	r2, [sp, #8]
 800b7a8:	9303      	str	r3, [sp, #12]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d808      	bhi.n	800b7c0 <__multiply+0x98>
 800b7ae:	2f00      	cmp	r7, #0
 800b7b0:	dc55      	bgt.n	800b85e <__multiply+0x136>
 800b7b2:	6107      	str	r7, [r0, #16]
 800b7b4:	b005      	add	sp, #20
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	f843 2b04 	str.w	r2, [r3], #4
 800b7be:	e7db      	b.n	800b778 <__multiply+0x50>
 800b7c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7c4:	f1ba 0f00 	cmp.w	sl, #0
 800b7c8:	d020      	beq.n	800b80c <__multiply+0xe4>
 800b7ca:	f105 0e14 	add.w	lr, r5, #20
 800b7ce:	46b1      	mov	r9, r6
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b7d6:	f8d9 b000 	ldr.w	fp, [r9]
 800b7da:	b2a1      	uxth	r1, r4
 800b7dc:	fa1f fb8b 	uxth.w	fp, fp
 800b7e0:	fb0a b101 	mla	r1, sl, r1, fp
 800b7e4:	4411      	add	r1, r2
 800b7e6:	f8d9 2000 	ldr.w	r2, [r9]
 800b7ea:	0c24      	lsrs	r4, r4, #16
 800b7ec:	0c12      	lsrs	r2, r2, #16
 800b7ee:	fb0a 2404 	mla	r4, sl, r4, r2
 800b7f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b7f6:	b289      	uxth	r1, r1
 800b7f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b7fc:	45f4      	cmp	ip, lr
 800b7fe:	f849 1b04 	str.w	r1, [r9], #4
 800b802:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b806:	d8e4      	bhi.n	800b7d2 <__multiply+0xaa>
 800b808:	9901      	ldr	r1, [sp, #4]
 800b80a:	5072      	str	r2, [r6, r1]
 800b80c:	9a03      	ldr	r2, [sp, #12]
 800b80e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b812:	3304      	adds	r3, #4
 800b814:	f1b9 0f00 	cmp.w	r9, #0
 800b818:	d01f      	beq.n	800b85a <__multiply+0x132>
 800b81a:	6834      	ldr	r4, [r6, #0]
 800b81c:	f105 0114 	add.w	r1, r5, #20
 800b820:	46b6      	mov	lr, r6
 800b822:	f04f 0a00 	mov.w	sl, #0
 800b826:	880a      	ldrh	r2, [r1, #0]
 800b828:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b82c:	fb09 b202 	mla	r2, r9, r2, fp
 800b830:	4492      	add	sl, r2
 800b832:	b2a4      	uxth	r4, r4
 800b834:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b838:	f84e 4b04 	str.w	r4, [lr], #4
 800b83c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b840:	f8be 2000 	ldrh.w	r2, [lr]
 800b844:	0c24      	lsrs	r4, r4, #16
 800b846:	fb09 2404 	mla	r4, r9, r4, r2
 800b84a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b84e:	458c      	cmp	ip, r1
 800b850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b854:	d8e7      	bhi.n	800b826 <__multiply+0xfe>
 800b856:	9a01      	ldr	r2, [sp, #4]
 800b858:	50b4      	str	r4, [r6, r2]
 800b85a:	3604      	adds	r6, #4
 800b85c:	e7a3      	b.n	800b7a6 <__multiply+0x7e>
 800b85e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1a5      	bne.n	800b7b2 <__multiply+0x8a>
 800b866:	3f01      	subs	r7, #1
 800b868:	e7a1      	b.n	800b7ae <__multiply+0x86>
 800b86a:	bf00      	nop
 800b86c:	0800efe1 	.word	0x0800efe1
 800b870:	0800f0d4 	.word	0x0800f0d4

0800b874 <__pow5mult>:
 800b874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b878:	4615      	mov	r5, r2
 800b87a:	f012 0203 	ands.w	r2, r2, #3
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	d007      	beq.n	800b894 <__pow5mult+0x20>
 800b884:	4c25      	ldr	r4, [pc, #148]	; (800b91c <__pow5mult+0xa8>)
 800b886:	3a01      	subs	r2, #1
 800b888:	2300      	movs	r3, #0
 800b88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b88e:	f7ff fe51 	bl	800b534 <__multadd>
 800b892:	4607      	mov	r7, r0
 800b894:	10ad      	asrs	r5, r5, #2
 800b896:	d03d      	beq.n	800b914 <__pow5mult+0xa0>
 800b898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b89a:	b97c      	cbnz	r4, 800b8bc <__pow5mult+0x48>
 800b89c:	2010      	movs	r0, #16
 800b89e:	f7ff fdbf 	bl	800b420 <malloc>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	6270      	str	r0, [r6, #36]	; 0x24
 800b8a6:	b928      	cbnz	r0, 800b8b4 <__pow5mult+0x40>
 800b8a8:	4b1d      	ldr	r3, [pc, #116]	; (800b920 <__pow5mult+0xac>)
 800b8aa:	481e      	ldr	r0, [pc, #120]	; (800b924 <__pow5mult+0xb0>)
 800b8ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b8b0:	f7fe f97c 	bl	8009bac <__assert_func>
 800b8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8b8:	6004      	str	r4, [r0, #0]
 800b8ba:	60c4      	str	r4, [r0, #12]
 800b8bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8c4:	b94c      	cbnz	r4, 800b8da <__pow5mult+0x66>
 800b8c6:	f240 2171 	movw	r1, #625	; 0x271
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7ff ff16 	bl	800b6fc <__i2b>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	6003      	str	r3, [r0, #0]
 800b8da:	f04f 0900 	mov.w	r9, #0
 800b8de:	07eb      	lsls	r3, r5, #31
 800b8e0:	d50a      	bpl.n	800b8f8 <__pow5mult+0x84>
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7ff ff1e 	bl	800b728 <__multiply>
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	4680      	mov	r8, r0
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7ff fdfd 	bl	800b4f0 <_Bfree>
 800b8f6:	4647      	mov	r7, r8
 800b8f8:	106d      	asrs	r5, r5, #1
 800b8fa:	d00b      	beq.n	800b914 <__pow5mult+0xa0>
 800b8fc:	6820      	ldr	r0, [r4, #0]
 800b8fe:	b938      	cbnz	r0, 800b910 <__pow5mult+0x9c>
 800b900:	4622      	mov	r2, r4
 800b902:	4621      	mov	r1, r4
 800b904:	4630      	mov	r0, r6
 800b906:	f7ff ff0f 	bl	800b728 <__multiply>
 800b90a:	6020      	str	r0, [r4, #0]
 800b90c:	f8c0 9000 	str.w	r9, [r0]
 800b910:	4604      	mov	r4, r0
 800b912:	e7e4      	b.n	800b8de <__pow5mult+0x6a>
 800b914:	4638      	mov	r0, r7
 800b916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91a:	bf00      	nop
 800b91c:	0800f228 	.word	0x0800f228
 800b920:	0800edc0 	.word	0x0800edc0
 800b924:	0800f0d4 	.word	0x0800f0d4

0800b928 <__lshift>:
 800b928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	6849      	ldr	r1, [r1, #4]
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	4607      	mov	r7, r0
 800b93a:	4691      	mov	r9, r2
 800b93c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b940:	f108 0601 	add.w	r6, r8, #1
 800b944:	42b3      	cmp	r3, r6
 800b946:	db0b      	blt.n	800b960 <__lshift+0x38>
 800b948:	4638      	mov	r0, r7
 800b94a:	f7ff fd91 	bl	800b470 <_Balloc>
 800b94e:	4605      	mov	r5, r0
 800b950:	b948      	cbnz	r0, 800b966 <__lshift+0x3e>
 800b952:	4602      	mov	r2, r0
 800b954:	4b28      	ldr	r3, [pc, #160]	; (800b9f8 <__lshift+0xd0>)
 800b956:	4829      	ldr	r0, [pc, #164]	; (800b9fc <__lshift+0xd4>)
 800b958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b95c:	f7fe f926 	bl	8009bac <__assert_func>
 800b960:	3101      	adds	r1, #1
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	e7ee      	b.n	800b944 <__lshift+0x1c>
 800b966:	2300      	movs	r3, #0
 800b968:	f100 0114 	add.w	r1, r0, #20
 800b96c:	f100 0210 	add.w	r2, r0, #16
 800b970:	4618      	mov	r0, r3
 800b972:	4553      	cmp	r3, sl
 800b974:	db33      	blt.n	800b9de <__lshift+0xb6>
 800b976:	6920      	ldr	r0, [r4, #16]
 800b978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b97c:	f104 0314 	add.w	r3, r4, #20
 800b980:	f019 091f 	ands.w	r9, r9, #31
 800b984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b98c:	d02b      	beq.n	800b9e6 <__lshift+0xbe>
 800b98e:	f1c9 0e20 	rsb	lr, r9, #32
 800b992:	468a      	mov	sl, r1
 800b994:	2200      	movs	r2, #0
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	fa00 f009 	lsl.w	r0, r0, r9
 800b99c:	4302      	orrs	r2, r0
 800b99e:	f84a 2b04 	str.w	r2, [sl], #4
 800b9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a6:	459c      	cmp	ip, r3
 800b9a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9ac:	d8f3      	bhi.n	800b996 <__lshift+0x6e>
 800b9ae:	ebac 0304 	sub.w	r3, ip, r4
 800b9b2:	3b15      	subs	r3, #21
 800b9b4:	f023 0303 	bic.w	r3, r3, #3
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	f104 0015 	add.w	r0, r4, #21
 800b9be:	4584      	cmp	ip, r0
 800b9c0:	bf38      	it	cc
 800b9c2:	2304      	movcc	r3, #4
 800b9c4:	50ca      	str	r2, [r1, r3]
 800b9c6:	b10a      	cbz	r2, 800b9cc <__lshift+0xa4>
 800b9c8:	f108 0602 	add.w	r6, r8, #2
 800b9cc:	3e01      	subs	r6, #1
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	612e      	str	r6, [r5, #16]
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	f7ff fd8c 	bl	800b4f0 <_Bfree>
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	e7c5      	b.n	800b972 <__lshift+0x4a>
 800b9e6:	3904      	subs	r1, #4
 800b9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9f0:	459c      	cmp	ip, r3
 800b9f2:	d8f9      	bhi.n	800b9e8 <__lshift+0xc0>
 800b9f4:	e7ea      	b.n	800b9cc <__lshift+0xa4>
 800b9f6:	bf00      	nop
 800b9f8:	0800efe1 	.word	0x0800efe1
 800b9fc:	0800f0d4 	.word	0x0800f0d4

0800ba00 <__mcmp>:
 800ba00:	b530      	push	{r4, r5, lr}
 800ba02:	6902      	ldr	r2, [r0, #16]
 800ba04:	690c      	ldr	r4, [r1, #16]
 800ba06:	1b12      	subs	r2, r2, r4
 800ba08:	d10e      	bne.n	800ba28 <__mcmp+0x28>
 800ba0a:	f100 0314 	add.w	r3, r0, #20
 800ba0e:	3114      	adds	r1, #20
 800ba10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba20:	42a5      	cmp	r5, r4
 800ba22:	d003      	beq.n	800ba2c <__mcmp+0x2c>
 800ba24:	d305      	bcc.n	800ba32 <__mcmp+0x32>
 800ba26:	2201      	movs	r2, #1
 800ba28:	4610      	mov	r0, r2
 800ba2a:	bd30      	pop	{r4, r5, pc}
 800ba2c:	4283      	cmp	r3, r0
 800ba2e:	d3f3      	bcc.n	800ba18 <__mcmp+0x18>
 800ba30:	e7fa      	b.n	800ba28 <__mcmp+0x28>
 800ba32:	f04f 32ff 	mov.w	r2, #4294967295
 800ba36:	e7f7      	b.n	800ba28 <__mcmp+0x28>

0800ba38 <__mdiff>:
 800ba38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	4606      	mov	r6, r0
 800ba40:	4611      	mov	r1, r2
 800ba42:	4620      	mov	r0, r4
 800ba44:	4617      	mov	r7, r2
 800ba46:	f7ff ffdb 	bl	800ba00 <__mcmp>
 800ba4a:	1e05      	subs	r5, r0, #0
 800ba4c:	d110      	bne.n	800ba70 <__mdiff+0x38>
 800ba4e:	4629      	mov	r1, r5
 800ba50:	4630      	mov	r0, r6
 800ba52:	f7ff fd0d 	bl	800b470 <_Balloc>
 800ba56:	b930      	cbnz	r0, 800ba66 <__mdiff+0x2e>
 800ba58:	4b39      	ldr	r3, [pc, #228]	; (800bb40 <__mdiff+0x108>)
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	f240 2132 	movw	r1, #562	; 0x232
 800ba60:	4838      	ldr	r0, [pc, #224]	; (800bb44 <__mdiff+0x10c>)
 800ba62:	f7fe f8a3 	bl	8009bac <__assert_func>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba70:	bfa4      	itt	ge
 800ba72:	463b      	movge	r3, r7
 800ba74:	4627      	movge	r7, r4
 800ba76:	4630      	mov	r0, r6
 800ba78:	6879      	ldr	r1, [r7, #4]
 800ba7a:	bfa6      	itte	ge
 800ba7c:	461c      	movge	r4, r3
 800ba7e:	2500      	movge	r5, #0
 800ba80:	2501      	movlt	r5, #1
 800ba82:	f7ff fcf5 	bl	800b470 <_Balloc>
 800ba86:	b920      	cbnz	r0, 800ba92 <__mdiff+0x5a>
 800ba88:	4b2d      	ldr	r3, [pc, #180]	; (800bb40 <__mdiff+0x108>)
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba90:	e7e6      	b.n	800ba60 <__mdiff+0x28>
 800ba92:	693e      	ldr	r6, [r7, #16]
 800ba94:	60c5      	str	r5, [r0, #12]
 800ba96:	6925      	ldr	r5, [r4, #16]
 800ba98:	f107 0114 	add.w	r1, r7, #20
 800ba9c:	f104 0914 	add.w	r9, r4, #20
 800baa0:	f100 0e14 	add.w	lr, r0, #20
 800baa4:	f107 0210 	add.w	r2, r7, #16
 800baa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800baac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bab0:	46f2      	mov	sl, lr
 800bab2:	2700      	movs	r7, #0
 800bab4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800babc:	fa1f f883 	uxth.w	r8, r3
 800bac0:	fa17 f78b 	uxtah	r7, r7, fp
 800bac4:	0c1b      	lsrs	r3, r3, #16
 800bac6:	eba7 0808 	sub.w	r8, r7, r8
 800baca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bad2:	fa1f f888 	uxth.w	r8, r8
 800bad6:	141f      	asrs	r7, r3, #16
 800bad8:	454d      	cmp	r5, r9
 800bada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bade:	f84a 3b04 	str.w	r3, [sl], #4
 800bae2:	d8e7      	bhi.n	800bab4 <__mdiff+0x7c>
 800bae4:	1b2b      	subs	r3, r5, r4
 800bae6:	3b15      	subs	r3, #21
 800bae8:	f023 0303 	bic.w	r3, r3, #3
 800baec:	3304      	adds	r3, #4
 800baee:	3415      	adds	r4, #21
 800baf0:	42a5      	cmp	r5, r4
 800baf2:	bf38      	it	cc
 800baf4:	2304      	movcc	r3, #4
 800baf6:	4419      	add	r1, r3
 800baf8:	4473      	add	r3, lr
 800bafa:	469e      	mov	lr, r3
 800bafc:	460d      	mov	r5, r1
 800bafe:	4565      	cmp	r5, ip
 800bb00:	d30e      	bcc.n	800bb20 <__mdiff+0xe8>
 800bb02:	f10c 0203 	add.w	r2, ip, #3
 800bb06:	1a52      	subs	r2, r2, r1
 800bb08:	f022 0203 	bic.w	r2, r2, #3
 800bb0c:	3903      	subs	r1, #3
 800bb0e:	458c      	cmp	ip, r1
 800bb10:	bf38      	it	cc
 800bb12:	2200      	movcc	r2, #0
 800bb14:	441a      	add	r2, r3
 800bb16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb1a:	b17b      	cbz	r3, 800bb3c <__mdiff+0x104>
 800bb1c:	6106      	str	r6, [r0, #16]
 800bb1e:	e7a5      	b.n	800ba6c <__mdiff+0x34>
 800bb20:	f855 8b04 	ldr.w	r8, [r5], #4
 800bb24:	fa17 f488 	uxtah	r4, r7, r8
 800bb28:	1422      	asrs	r2, r4, #16
 800bb2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bb2e:	b2a4      	uxth	r4, r4
 800bb30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bb34:	f84e 4b04 	str.w	r4, [lr], #4
 800bb38:	1417      	asrs	r7, r2, #16
 800bb3a:	e7e0      	b.n	800bafe <__mdiff+0xc6>
 800bb3c:	3e01      	subs	r6, #1
 800bb3e:	e7ea      	b.n	800bb16 <__mdiff+0xde>
 800bb40:	0800efe1 	.word	0x0800efe1
 800bb44:	0800f0d4 	.word	0x0800f0d4

0800bb48 <__ulp>:
 800bb48:	b082      	sub	sp, #8
 800bb4a:	ed8d 0b00 	vstr	d0, [sp]
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	4912      	ldr	r1, [pc, #72]	; (800bb9c <__ulp+0x54>)
 800bb52:	4019      	ands	r1, r3
 800bb54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bb58:	2900      	cmp	r1, #0
 800bb5a:	dd05      	ble.n	800bb68 <__ulp+0x20>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	ec43 2b10 	vmov	d0, r2, r3
 800bb64:	b002      	add	sp, #8
 800bb66:	4770      	bx	lr
 800bb68:	4249      	negs	r1, r1
 800bb6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bb6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bb72:	f04f 0200 	mov.w	r2, #0
 800bb76:	f04f 0300 	mov.w	r3, #0
 800bb7a:	da04      	bge.n	800bb86 <__ulp+0x3e>
 800bb7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb80:	fa41 f300 	asr.w	r3, r1, r0
 800bb84:	e7ec      	b.n	800bb60 <__ulp+0x18>
 800bb86:	f1a0 0114 	sub.w	r1, r0, #20
 800bb8a:	291e      	cmp	r1, #30
 800bb8c:	bfda      	itte	le
 800bb8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bb92:	fa20 f101 	lsrle.w	r1, r0, r1
 800bb96:	2101      	movgt	r1, #1
 800bb98:	460a      	mov	r2, r1
 800bb9a:	e7e1      	b.n	800bb60 <__ulp+0x18>
 800bb9c:	7ff00000 	.word	0x7ff00000

0800bba0 <__b2d>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	6905      	ldr	r5, [r0, #16]
 800bba4:	f100 0714 	add.w	r7, r0, #20
 800bba8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bbac:	1f2e      	subs	r6, r5, #4
 800bbae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7ff fd52 	bl	800b65c <__hi0bits>
 800bbb8:	f1c0 0320 	rsb	r3, r0, #32
 800bbbc:	280a      	cmp	r0, #10
 800bbbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bc3c <__b2d+0x9c>
 800bbc2:	600b      	str	r3, [r1, #0]
 800bbc4:	dc14      	bgt.n	800bbf0 <__b2d+0x50>
 800bbc6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bbca:	fa24 f10e 	lsr.w	r1, r4, lr
 800bbce:	42b7      	cmp	r7, r6
 800bbd0:	ea41 030c 	orr.w	r3, r1, ip
 800bbd4:	bf34      	ite	cc
 800bbd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbda:	2100      	movcs	r1, #0
 800bbdc:	3015      	adds	r0, #21
 800bbde:	fa04 f000 	lsl.w	r0, r4, r0
 800bbe2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bbe6:	ea40 0201 	orr.w	r2, r0, r1
 800bbea:	ec43 2b10 	vmov	d0, r2, r3
 800bbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf0:	42b7      	cmp	r7, r6
 800bbf2:	bf3a      	itte	cc
 800bbf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbf8:	f1a5 0608 	subcc.w	r6, r5, #8
 800bbfc:	2100      	movcs	r1, #0
 800bbfe:	380b      	subs	r0, #11
 800bc00:	d017      	beq.n	800bc32 <__b2d+0x92>
 800bc02:	f1c0 0c20 	rsb	ip, r0, #32
 800bc06:	fa04 f500 	lsl.w	r5, r4, r0
 800bc0a:	42be      	cmp	r6, r7
 800bc0c:	fa21 f40c 	lsr.w	r4, r1, ip
 800bc10:	ea45 0504 	orr.w	r5, r5, r4
 800bc14:	bf8c      	ite	hi
 800bc16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bc1a:	2400      	movls	r4, #0
 800bc1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bc20:	fa01 f000 	lsl.w	r0, r1, r0
 800bc24:	fa24 f40c 	lsr.w	r4, r4, ip
 800bc28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc2c:	ea40 0204 	orr.w	r2, r0, r4
 800bc30:	e7db      	b.n	800bbea <__b2d+0x4a>
 800bc32:	ea44 030c 	orr.w	r3, r4, ip
 800bc36:	460a      	mov	r2, r1
 800bc38:	e7d7      	b.n	800bbea <__b2d+0x4a>
 800bc3a:	bf00      	nop
 800bc3c:	3ff00000 	.word	0x3ff00000

0800bc40 <__d2b>:
 800bc40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc44:	4689      	mov	r9, r1
 800bc46:	2101      	movs	r1, #1
 800bc48:	ec57 6b10 	vmov	r6, r7, d0
 800bc4c:	4690      	mov	r8, r2
 800bc4e:	f7ff fc0f 	bl	800b470 <_Balloc>
 800bc52:	4604      	mov	r4, r0
 800bc54:	b930      	cbnz	r0, 800bc64 <__d2b+0x24>
 800bc56:	4602      	mov	r2, r0
 800bc58:	4b25      	ldr	r3, [pc, #148]	; (800bcf0 <__d2b+0xb0>)
 800bc5a:	4826      	ldr	r0, [pc, #152]	; (800bcf4 <__d2b+0xb4>)
 800bc5c:	f240 310a 	movw	r1, #778	; 0x30a
 800bc60:	f7fd ffa4 	bl	8009bac <__assert_func>
 800bc64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc6c:	bb35      	cbnz	r5, 800bcbc <__d2b+0x7c>
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	d028      	beq.n	800bcc6 <__d2b+0x86>
 800bc74:	4668      	mov	r0, sp
 800bc76:	9600      	str	r6, [sp, #0]
 800bc78:	f7ff fd10 	bl	800b69c <__lo0bits>
 800bc7c:	9900      	ldr	r1, [sp, #0]
 800bc7e:	b300      	cbz	r0, 800bcc2 <__d2b+0x82>
 800bc80:	9a01      	ldr	r2, [sp, #4]
 800bc82:	f1c0 0320 	rsb	r3, r0, #32
 800bc86:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	40c2      	lsrs	r2, r0
 800bc8e:	6163      	str	r3, [r4, #20]
 800bc90:	9201      	str	r2, [sp, #4]
 800bc92:	9b01      	ldr	r3, [sp, #4]
 800bc94:	61a3      	str	r3, [r4, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	bf14      	ite	ne
 800bc9a:	2202      	movne	r2, #2
 800bc9c:	2201      	moveq	r2, #1
 800bc9e:	6122      	str	r2, [r4, #16]
 800bca0:	b1d5      	cbz	r5, 800bcd8 <__d2b+0x98>
 800bca2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bca6:	4405      	add	r5, r0
 800bca8:	f8c9 5000 	str.w	r5, [r9]
 800bcac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcb0:	f8c8 0000 	str.w	r0, [r8]
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	b003      	add	sp, #12
 800bcb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcc0:	e7d5      	b.n	800bc6e <__d2b+0x2e>
 800bcc2:	6161      	str	r1, [r4, #20]
 800bcc4:	e7e5      	b.n	800bc92 <__d2b+0x52>
 800bcc6:	a801      	add	r0, sp, #4
 800bcc8:	f7ff fce8 	bl	800b69c <__lo0bits>
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	6163      	str	r3, [r4, #20]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	6122      	str	r2, [r4, #16]
 800bcd4:	3020      	adds	r0, #32
 800bcd6:	e7e3      	b.n	800bca0 <__d2b+0x60>
 800bcd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bce0:	f8c9 0000 	str.w	r0, [r9]
 800bce4:	6918      	ldr	r0, [r3, #16]
 800bce6:	f7ff fcb9 	bl	800b65c <__hi0bits>
 800bcea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcee:	e7df      	b.n	800bcb0 <__d2b+0x70>
 800bcf0:	0800efe1 	.word	0x0800efe1
 800bcf4:	0800f0d4 	.word	0x0800f0d4

0800bcf8 <__ratio>:
 800bcf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	4688      	mov	r8, r1
 800bcfe:	4669      	mov	r1, sp
 800bd00:	4681      	mov	r9, r0
 800bd02:	f7ff ff4d 	bl	800bba0 <__b2d>
 800bd06:	a901      	add	r1, sp, #4
 800bd08:	4640      	mov	r0, r8
 800bd0a:	ec55 4b10 	vmov	r4, r5, d0
 800bd0e:	f7ff ff47 	bl	800bba0 <__b2d>
 800bd12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bd1a:	eba3 0c02 	sub.w	ip, r3, r2
 800bd1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd22:	1a9b      	subs	r3, r3, r2
 800bd24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd28:	ec51 0b10 	vmov	r0, r1, d0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	bfd6      	itet	le
 800bd30:	460a      	movle	r2, r1
 800bd32:	462a      	movgt	r2, r5
 800bd34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd38:	468b      	mov	fp, r1
 800bd3a:	462f      	mov	r7, r5
 800bd3c:	bfd4      	ite	le
 800bd3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bd42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd46:	4620      	mov	r0, r4
 800bd48:	ee10 2a10 	vmov	r2, s0
 800bd4c:	465b      	mov	r3, fp
 800bd4e:	4639      	mov	r1, r7
 800bd50:	f7f4 fdb4 	bl	80008bc <__aeabi_ddiv>
 800bd54:	ec41 0b10 	vmov	d0, r0, r1
 800bd58:	b003      	add	sp, #12
 800bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd5e <__copybits>:
 800bd5e:	3901      	subs	r1, #1
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	1149      	asrs	r1, r1, #5
 800bd64:	6914      	ldr	r4, [r2, #16]
 800bd66:	3101      	adds	r1, #1
 800bd68:	f102 0314 	add.w	r3, r2, #20
 800bd6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd74:	1f05      	subs	r5, r0, #4
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	d30c      	bcc.n	800bd94 <__copybits+0x36>
 800bd7a:	1aa3      	subs	r3, r4, r2
 800bd7c:	3b11      	subs	r3, #17
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	3211      	adds	r2, #17
 800bd84:	42a2      	cmp	r2, r4
 800bd86:	bf88      	it	hi
 800bd88:	2300      	movhi	r3, #0
 800bd8a:	4418      	add	r0, r3
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4288      	cmp	r0, r1
 800bd90:	d305      	bcc.n	800bd9e <__copybits+0x40>
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd98:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd9c:	e7eb      	b.n	800bd76 <__copybits+0x18>
 800bd9e:	f840 3b04 	str.w	r3, [r0], #4
 800bda2:	e7f4      	b.n	800bd8e <__copybits+0x30>

0800bda4 <__any_on>:
 800bda4:	f100 0214 	add.w	r2, r0, #20
 800bda8:	6900      	ldr	r0, [r0, #16]
 800bdaa:	114b      	asrs	r3, r1, #5
 800bdac:	4298      	cmp	r0, r3
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	db11      	blt.n	800bdd6 <__any_on+0x32>
 800bdb2:	dd0a      	ble.n	800bdca <__any_on+0x26>
 800bdb4:	f011 011f 	ands.w	r1, r1, #31
 800bdb8:	d007      	beq.n	800bdca <__any_on+0x26>
 800bdba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bdbe:	fa24 f001 	lsr.w	r0, r4, r1
 800bdc2:	fa00 f101 	lsl.w	r1, r0, r1
 800bdc6:	428c      	cmp	r4, r1
 800bdc8:	d10b      	bne.n	800bde2 <__any_on+0x3e>
 800bdca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d803      	bhi.n	800bdda <__any_on+0x36>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	e7f7      	b.n	800bdca <__any_on+0x26>
 800bdda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdde:	2900      	cmp	r1, #0
 800bde0:	d0f5      	beq.n	800bdce <__any_on+0x2a>
 800bde2:	2001      	movs	r0, #1
 800bde4:	e7f6      	b.n	800bdd4 <__any_on+0x30>

0800bde6 <_calloc_r>:
 800bde6:	b513      	push	{r0, r1, r4, lr}
 800bde8:	434a      	muls	r2, r1
 800bdea:	4611      	mov	r1, r2
 800bdec:	9201      	str	r2, [sp, #4]
 800bdee:	f000 f859 	bl	800bea4 <_malloc_r>
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	b118      	cbz	r0, 800bdfe <_calloc_r+0x18>
 800bdf6:	9a01      	ldr	r2, [sp, #4]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	f7fb ff89 	bl	8007d10 <memset>
 800bdfe:	4620      	mov	r0, r4
 800be00:	b002      	add	sp, #8
 800be02:	bd10      	pop	{r4, pc}

0800be04 <_free_r>:
 800be04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be06:	2900      	cmp	r1, #0
 800be08:	d048      	beq.n	800be9c <_free_r+0x98>
 800be0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be0e:	9001      	str	r0, [sp, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f1a1 0404 	sub.w	r4, r1, #4
 800be16:	bfb8      	it	lt
 800be18:	18e4      	addlt	r4, r4, r3
 800be1a:	f000 fc8f 	bl	800c73c <__malloc_lock>
 800be1e:	4a20      	ldr	r2, [pc, #128]	; (800bea0 <_free_r+0x9c>)
 800be20:	9801      	ldr	r0, [sp, #4]
 800be22:	6813      	ldr	r3, [r2, #0]
 800be24:	4615      	mov	r5, r2
 800be26:	b933      	cbnz	r3, 800be36 <_free_r+0x32>
 800be28:	6063      	str	r3, [r4, #4]
 800be2a:	6014      	str	r4, [r2, #0]
 800be2c:	b003      	add	sp, #12
 800be2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be32:	f000 bc89 	b.w	800c748 <__malloc_unlock>
 800be36:	42a3      	cmp	r3, r4
 800be38:	d90b      	bls.n	800be52 <_free_r+0x4e>
 800be3a:	6821      	ldr	r1, [r4, #0]
 800be3c:	1862      	adds	r2, r4, r1
 800be3e:	4293      	cmp	r3, r2
 800be40:	bf04      	itt	eq
 800be42:	681a      	ldreq	r2, [r3, #0]
 800be44:	685b      	ldreq	r3, [r3, #4]
 800be46:	6063      	str	r3, [r4, #4]
 800be48:	bf04      	itt	eq
 800be4a:	1852      	addeq	r2, r2, r1
 800be4c:	6022      	streq	r2, [r4, #0]
 800be4e:	602c      	str	r4, [r5, #0]
 800be50:	e7ec      	b.n	800be2c <_free_r+0x28>
 800be52:	461a      	mov	r2, r3
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	b10b      	cbz	r3, 800be5c <_free_r+0x58>
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d9fa      	bls.n	800be52 <_free_r+0x4e>
 800be5c:	6811      	ldr	r1, [r2, #0]
 800be5e:	1855      	adds	r5, r2, r1
 800be60:	42a5      	cmp	r5, r4
 800be62:	d10b      	bne.n	800be7c <_free_r+0x78>
 800be64:	6824      	ldr	r4, [r4, #0]
 800be66:	4421      	add	r1, r4
 800be68:	1854      	adds	r4, r2, r1
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	d1dd      	bne.n	800be2c <_free_r+0x28>
 800be70:	681c      	ldr	r4, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	6053      	str	r3, [r2, #4]
 800be76:	4421      	add	r1, r4
 800be78:	6011      	str	r1, [r2, #0]
 800be7a:	e7d7      	b.n	800be2c <_free_r+0x28>
 800be7c:	d902      	bls.n	800be84 <_free_r+0x80>
 800be7e:	230c      	movs	r3, #12
 800be80:	6003      	str	r3, [r0, #0]
 800be82:	e7d3      	b.n	800be2c <_free_r+0x28>
 800be84:	6825      	ldr	r5, [r4, #0]
 800be86:	1961      	adds	r1, r4, r5
 800be88:	428b      	cmp	r3, r1
 800be8a:	bf04      	itt	eq
 800be8c:	6819      	ldreq	r1, [r3, #0]
 800be8e:	685b      	ldreq	r3, [r3, #4]
 800be90:	6063      	str	r3, [r4, #4]
 800be92:	bf04      	itt	eq
 800be94:	1949      	addeq	r1, r1, r5
 800be96:	6021      	streq	r1, [r4, #0]
 800be98:	6054      	str	r4, [r2, #4]
 800be9a:	e7c7      	b.n	800be2c <_free_r+0x28>
 800be9c:	b003      	add	sp, #12
 800be9e:	bd30      	pop	{r4, r5, pc}
 800bea0:	20000608 	.word	0x20000608

0800bea4 <_malloc_r>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	1ccd      	adds	r5, r1, #3
 800bea8:	f025 0503 	bic.w	r5, r5, #3
 800beac:	3508      	adds	r5, #8
 800beae:	2d0c      	cmp	r5, #12
 800beb0:	bf38      	it	cc
 800beb2:	250c      	movcc	r5, #12
 800beb4:	2d00      	cmp	r5, #0
 800beb6:	4606      	mov	r6, r0
 800beb8:	db01      	blt.n	800bebe <_malloc_r+0x1a>
 800beba:	42a9      	cmp	r1, r5
 800bebc:	d903      	bls.n	800bec6 <_malloc_r+0x22>
 800bebe:	230c      	movs	r3, #12
 800bec0:	6033      	str	r3, [r6, #0]
 800bec2:	2000      	movs	r0, #0
 800bec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec6:	f000 fc39 	bl	800c73c <__malloc_lock>
 800beca:	4921      	ldr	r1, [pc, #132]	; (800bf50 <_malloc_r+0xac>)
 800becc:	680a      	ldr	r2, [r1, #0]
 800bece:	4614      	mov	r4, r2
 800bed0:	b99c      	cbnz	r4, 800befa <_malloc_r+0x56>
 800bed2:	4f20      	ldr	r7, [pc, #128]	; (800bf54 <_malloc_r+0xb0>)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	b923      	cbnz	r3, 800bee2 <_malloc_r+0x3e>
 800bed8:	4621      	mov	r1, r4
 800beda:	4630      	mov	r0, r6
 800bedc:	f000 fb44 	bl	800c568 <_sbrk_r>
 800bee0:	6038      	str	r0, [r7, #0]
 800bee2:	4629      	mov	r1, r5
 800bee4:	4630      	mov	r0, r6
 800bee6:	f000 fb3f 	bl	800c568 <_sbrk_r>
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	d123      	bne.n	800bf36 <_malloc_r+0x92>
 800beee:	230c      	movs	r3, #12
 800bef0:	6033      	str	r3, [r6, #0]
 800bef2:	4630      	mov	r0, r6
 800bef4:	f000 fc28 	bl	800c748 <__malloc_unlock>
 800bef8:	e7e3      	b.n	800bec2 <_malloc_r+0x1e>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	1b5b      	subs	r3, r3, r5
 800befe:	d417      	bmi.n	800bf30 <_malloc_r+0x8c>
 800bf00:	2b0b      	cmp	r3, #11
 800bf02:	d903      	bls.n	800bf0c <_malloc_r+0x68>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	441c      	add	r4, r3
 800bf08:	6025      	str	r5, [r4, #0]
 800bf0a:	e004      	b.n	800bf16 <_malloc_r+0x72>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	42a2      	cmp	r2, r4
 800bf10:	bf0c      	ite	eq
 800bf12:	600b      	streq	r3, [r1, #0]
 800bf14:	6053      	strne	r3, [r2, #4]
 800bf16:	4630      	mov	r0, r6
 800bf18:	f000 fc16 	bl	800c748 <__malloc_unlock>
 800bf1c:	f104 000b 	add.w	r0, r4, #11
 800bf20:	1d23      	adds	r3, r4, #4
 800bf22:	f020 0007 	bic.w	r0, r0, #7
 800bf26:	1ac2      	subs	r2, r0, r3
 800bf28:	d0cc      	beq.n	800bec4 <_malloc_r+0x20>
 800bf2a:	1a1b      	subs	r3, r3, r0
 800bf2c:	50a3      	str	r3, [r4, r2]
 800bf2e:	e7c9      	b.n	800bec4 <_malloc_r+0x20>
 800bf30:	4622      	mov	r2, r4
 800bf32:	6864      	ldr	r4, [r4, #4]
 800bf34:	e7cc      	b.n	800bed0 <_malloc_r+0x2c>
 800bf36:	1cc4      	adds	r4, r0, #3
 800bf38:	f024 0403 	bic.w	r4, r4, #3
 800bf3c:	42a0      	cmp	r0, r4
 800bf3e:	d0e3      	beq.n	800bf08 <_malloc_r+0x64>
 800bf40:	1a21      	subs	r1, r4, r0
 800bf42:	4630      	mov	r0, r6
 800bf44:	f000 fb10 	bl	800c568 <_sbrk_r>
 800bf48:	3001      	adds	r0, #1
 800bf4a:	d1dd      	bne.n	800bf08 <_malloc_r+0x64>
 800bf4c:	e7cf      	b.n	800beee <_malloc_r+0x4a>
 800bf4e:	bf00      	nop
 800bf50:	20000608 	.word	0x20000608
 800bf54:	2000060c 	.word	0x2000060c

0800bf58 <__ssputs_r>:
 800bf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5c:	688e      	ldr	r6, [r1, #8]
 800bf5e:	429e      	cmp	r6, r3
 800bf60:	4682      	mov	sl, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	4690      	mov	r8, r2
 800bf66:	461f      	mov	r7, r3
 800bf68:	d838      	bhi.n	800bfdc <__ssputs_r+0x84>
 800bf6a:	898a      	ldrh	r2, [r1, #12]
 800bf6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf70:	d032      	beq.n	800bfd8 <__ssputs_r+0x80>
 800bf72:	6825      	ldr	r5, [r4, #0]
 800bf74:	6909      	ldr	r1, [r1, #16]
 800bf76:	eba5 0901 	sub.w	r9, r5, r1
 800bf7a:	6965      	ldr	r5, [r4, #20]
 800bf7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf84:	3301      	adds	r3, #1
 800bf86:	444b      	add	r3, r9
 800bf88:	106d      	asrs	r5, r5, #1
 800bf8a:	429d      	cmp	r5, r3
 800bf8c:	bf38      	it	cc
 800bf8e:	461d      	movcc	r5, r3
 800bf90:	0553      	lsls	r3, r2, #21
 800bf92:	d531      	bpl.n	800bff8 <__ssputs_r+0xa0>
 800bf94:	4629      	mov	r1, r5
 800bf96:	f7ff ff85 	bl	800bea4 <_malloc_r>
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	b950      	cbnz	r0, 800bfb4 <__ssputs_r+0x5c>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	f8ca 3000 	str.w	r3, [sl]
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb4:	6921      	ldr	r1, [r4, #16]
 800bfb6:	464a      	mov	r2, r9
 800bfb8:	f7ff fa4c 	bl	800b454 <memcpy>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	6126      	str	r6, [r4, #16]
 800bfca:	6165      	str	r5, [r4, #20]
 800bfcc:	444e      	add	r6, r9
 800bfce:	eba5 0509 	sub.w	r5, r5, r9
 800bfd2:	6026      	str	r6, [r4, #0]
 800bfd4:	60a5      	str	r5, [r4, #8]
 800bfd6:	463e      	mov	r6, r7
 800bfd8:	42be      	cmp	r6, r7
 800bfda:	d900      	bls.n	800bfde <__ssputs_r+0x86>
 800bfdc:	463e      	mov	r6, r7
 800bfde:	4632      	mov	r2, r6
 800bfe0:	6820      	ldr	r0, [r4, #0]
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	f000 fb90 	bl	800c708 <memmove>
 800bfe8:	68a3      	ldr	r3, [r4, #8]
 800bfea:	6822      	ldr	r2, [r4, #0]
 800bfec:	1b9b      	subs	r3, r3, r6
 800bfee:	4432      	add	r2, r6
 800bff0:	60a3      	str	r3, [r4, #8]
 800bff2:	6022      	str	r2, [r4, #0]
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7db      	b.n	800bfb0 <__ssputs_r+0x58>
 800bff8:	462a      	mov	r2, r5
 800bffa:	f000 fbab 	bl	800c754 <_realloc_r>
 800bffe:	4606      	mov	r6, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	d1e1      	bne.n	800bfc8 <__ssputs_r+0x70>
 800c004:	6921      	ldr	r1, [r4, #16]
 800c006:	4650      	mov	r0, sl
 800c008:	f7ff fefc 	bl	800be04 <_free_r>
 800c00c:	e7c7      	b.n	800bf9e <__ssputs_r+0x46>
	...

0800c010 <_svfiprintf_r>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	4698      	mov	r8, r3
 800c016:	898b      	ldrh	r3, [r1, #12]
 800c018:	061b      	lsls	r3, r3, #24
 800c01a:	b09d      	sub	sp, #116	; 0x74
 800c01c:	4607      	mov	r7, r0
 800c01e:	460d      	mov	r5, r1
 800c020:	4614      	mov	r4, r2
 800c022:	d50e      	bpl.n	800c042 <_svfiprintf_r+0x32>
 800c024:	690b      	ldr	r3, [r1, #16]
 800c026:	b963      	cbnz	r3, 800c042 <_svfiprintf_r+0x32>
 800c028:	2140      	movs	r1, #64	; 0x40
 800c02a:	f7ff ff3b 	bl	800bea4 <_malloc_r>
 800c02e:	6028      	str	r0, [r5, #0]
 800c030:	6128      	str	r0, [r5, #16]
 800c032:	b920      	cbnz	r0, 800c03e <_svfiprintf_r+0x2e>
 800c034:	230c      	movs	r3, #12
 800c036:	603b      	str	r3, [r7, #0]
 800c038:	f04f 30ff 	mov.w	r0, #4294967295
 800c03c:	e0d1      	b.n	800c1e2 <_svfiprintf_r+0x1d2>
 800c03e:	2340      	movs	r3, #64	; 0x40
 800c040:	616b      	str	r3, [r5, #20]
 800c042:	2300      	movs	r3, #0
 800c044:	9309      	str	r3, [sp, #36]	; 0x24
 800c046:	2320      	movs	r3, #32
 800c048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c050:	2330      	movs	r3, #48	; 0x30
 800c052:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1fc <_svfiprintf_r+0x1ec>
 800c056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c05a:	f04f 0901 	mov.w	r9, #1
 800c05e:	4623      	mov	r3, r4
 800c060:	469a      	mov	sl, r3
 800c062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c066:	b10a      	cbz	r2, 800c06c <_svfiprintf_r+0x5c>
 800c068:	2a25      	cmp	r2, #37	; 0x25
 800c06a:	d1f9      	bne.n	800c060 <_svfiprintf_r+0x50>
 800c06c:	ebba 0b04 	subs.w	fp, sl, r4
 800c070:	d00b      	beq.n	800c08a <_svfiprintf_r+0x7a>
 800c072:	465b      	mov	r3, fp
 800c074:	4622      	mov	r2, r4
 800c076:	4629      	mov	r1, r5
 800c078:	4638      	mov	r0, r7
 800c07a:	f7ff ff6d 	bl	800bf58 <__ssputs_r>
 800c07e:	3001      	adds	r0, #1
 800c080:	f000 80aa 	beq.w	800c1d8 <_svfiprintf_r+0x1c8>
 800c084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c086:	445a      	add	r2, fp
 800c088:	9209      	str	r2, [sp, #36]	; 0x24
 800c08a:	f89a 3000 	ldrb.w	r3, [sl]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80a2 	beq.w	800c1d8 <_svfiprintf_r+0x1c8>
 800c094:	2300      	movs	r3, #0
 800c096:	f04f 32ff 	mov.w	r2, #4294967295
 800c09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c09e:	f10a 0a01 	add.w	sl, sl, #1
 800c0a2:	9304      	str	r3, [sp, #16]
 800c0a4:	9307      	str	r3, [sp, #28]
 800c0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ac:	4654      	mov	r4, sl
 800c0ae:	2205      	movs	r2, #5
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	4851      	ldr	r0, [pc, #324]	; (800c1fc <_svfiprintf_r+0x1ec>)
 800c0b6:	f7f4 f8cb 	bl	8000250 <memchr>
 800c0ba:	9a04      	ldr	r2, [sp, #16]
 800c0bc:	b9d8      	cbnz	r0, 800c0f6 <_svfiprintf_r+0xe6>
 800c0be:	06d0      	lsls	r0, r2, #27
 800c0c0:	bf44      	itt	mi
 800c0c2:	2320      	movmi	r3, #32
 800c0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c8:	0711      	lsls	r1, r2, #28
 800c0ca:	bf44      	itt	mi
 800c0cc:	232b      	movmi	r3, #43	; 0x2b
 800c0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d8:	d015      	beq.n	800c106 <_svfiprintf_r+0xf6>
 800c0da:	9a07      	ldr	r2, [sp, #28]
 800c0dc:	4654      	mov	r4, sl
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f04f 0c0a 	mov.w	ip, #10
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0ea:	3b30      	subs	r3, #48	; 0x30
 800c0ec:	2b09      	cmp	r3, #9
 800c0ee:	d94e      	bls.n	800c18e <_svfiprintf_r+0x17e>
 800c0f0:	b1b0      	cbz	r0, 800c120 <_svfiprintf_r+0x110>
 800c0f2:	9207      	str	r2, [sp, #28]
 800c0f4:	e014      	b.n	800c120 <_svfiprintf_r+0x110>
 800c0f6:	eba0 0308 	sub.w	r3, r0, r8
 800c0fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c0fe:	4313      	orrs	r3, r2
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	46a2      	mov	sl, r4
 800c104:	e7d2      	b.n	800c0ac <_svfiprintf_r+0x9c>
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	1d19      	adds	r1, r3, #4
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	9103      	str	r1, [sp, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bfbb      	ittet	lt
 800c112:	425b      	neglt	r3, r3
 800c114:	f042 0202 	orrlt.w	r2, r2, #2
 800c118:	9307      	strge	r3, [sp, #28]
 800c11a:	9307      	strlt	r3, [sp, #28]
 800c11c:	bfb8      	it	lt
 800c11e:	9204      	strlt	r2, [sp, #16]
 800c120:	7823      	ldrb	r3, [r4, #0]
 800c122:	2b2e      	cmp	r3, #46	; 0x2e
 800c124:	d10c      	bne.n	800c140 <_svfiprintf_r+0x130>
 800c126:	7863      	ldrb	r3, [r4, #1]
 800c128:	2b2a      	cmp	r3, #42	; 0x2a
 800c12a:	d135      	bne.n	800c198 <_svfiprintf_r+0x188>
 800c12c:	9b03      	ldr	r3, [sp, #12]
 800c12e:	1d1a      	adds	r2, r3, #4
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	9203      	str	r2, [sp, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfb8      	it	lt
 800c138:	f04f 33ff 	movlt.w	r3, #4294967295
 800c13c:	3402      	adds	r4, #2
 800c13e:	9305      	str	r3, [sp, #20]
 800c140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c20c <_svfiprintf_r+0x1fc>
 800c144:	7821      	ldrb	r1, [r4, #0]
 800c146:	2203      	movs	r2, #3
 800c148:	4650      	mov	r0, sl
 800c14a:	f7f4 f881 	bl	8000250 <memchr>
 800c14e:	b140      	cbz	r0, 800c162 <_svfiprintf_r+0x152>
 800c150:	2340      	movs	r3, #64	; 0x40
 800c152:	eba0 000a 	sub.w	r0, r0, sl
 800c156:	fa03 f000 	lsl.w	r0, r3, r0
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	4303      	orrs	r3, r0
 800c15e:	3401      	adds	r4, #1
 800c160:	9304      	str	r3, [sp, #16]
 800c162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c166:	4826      	ldr	r0, [pc, #152]	; (800c200 <_svfiprintf_r+0x1f0>)
 800c168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c16c:	2206      	movs	r2, #6
 800c16e:	f7f4 f86f 	bl	8000250 <memchr>
 800c172:	2800      	cmp	r0, #0
 800c174:	d038      	beq.n	800c1e8 <_svfiprintf_r+0x1d8>
 800c176:	4b23      	ldr	r3, [pc, #140]	; (800c204 <_svfiprintf_r+0x1f4>)
 800c178:	bb1b      	cbnz	r3, 800c1c2 <_svfiprintf_r+0x1b2>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	3307      	adds	r3, #7
 800c17e:	f023 0307 	bic.w	r3, r3, #7
 800c182:	3308      	adds	r3, #8
 800c184:	9303      	str	r3, [sp, #12]
 800c186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c188:	4433      	add	r3, r6
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	e767      	b.n	800c05e <_svfiprintf_r+0x4e>
 800c18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c192:	460c      	mov	r4, r1
 800c194:	2001      	movs	r0, #1
 800c196:	e7a5      	b.n	800c0e4 <_svfiprintf_r+0xd4>
 800c198:	2300      	movs	r3, #0
 800c19a:	3401      	adds	r4, #1
 800c19c:	9305      	str	r3, [sp, #20]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	f04f 0c0a 	mov.w	ip, #10
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1aa:	3a30      	subs	r2, #48	; 0x30
 800c1ac:	2a09      	cmp	r2, #9
 800c1ae:	d903      	bls.n	800c1b8 <_svfiprintf_r+0x1a8>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d0c5      	beq.n	800c140 <_svfiprintf_r+0x130>
 800c1b4:	9105      	str	r1, [sp, #20]
 800c1b6:	e7c3      	b.n	800c140 <_svfiprintf_r+0x130>
 800c1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1bc:	4604      	mov	r4, r0
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e7f0      	b.n	800c1a4 <_svfiprintf_r+0x194>
 800c1c2:	ab03      	add	r3, sp, #12
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	462a      	mov	r2, r5
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <_svfiprintf_r+0x1f8>)
 800c1ca:	a904      	add	r1, sp, #16
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	f7fb fe47 	bl	8007e60 <_printf_float>
 800c1d2:	1c42      	adds	r2, r0, #1
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	d1d6      	bne.n	800c186 <_svfiprintf_r+0x176>
 800c1d8:	89ab      	ldrh	r3, [r5, #12]
 800c1da:	065b      	lsls	r3, r3, #25
 800c1dc:	f53f af2c 	bmi.w	800c038 <_svfiprintf_r+0x28>
 800c1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1e2:	b01d      	add	sp, #116	; 0x74
 800c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e8:	ab03      	add	r3, sp, #12
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4b06      	ldr	r3, [pc, #24]	; (800c208 <_svfiprintf_r+0x1f8>)
 800c1f0:	a904      	add	r1, sp, #16
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f7fc f8d8 	bl	80083a8 <_printf_i>
 800c1f8:	e7eb      	b.n	800c1d2 <_svfiprintf_r+0x1c2>
 800c1fa:	bf00      	nop
 800c1fc:	0800f234 	.word	0x0800f234
 800c200:	0800f23e 	.word	0x0800f23e
 800c204:	08007e61 	.word	0x08007e61
 800c208:	0800bf59 	.word	0x0800bf59
 800c20c:	0800f23a 	.word	0x0800f23a

0800c210 <__sfputc_r>:
 800c210:	6893      	ldr	r3, [r2, #8]
 800c212:	3b01      	subs	r3, #1
 800c214:	2b00      	cmp	r3, #0
 800c216:	b410      	push	{r4}
 800c218:	6093      	str	r3, [r2, #8]
 800c21a:	da08      	bge.n	800c22e <__sfputc_r+0x1e>
 800c21c:	6994      	ldr	r4, [r2, #24]
 800c21e:	42a3      	cmp	r3, r4
 800c220:	db01      	blt.n	800c226 <__sfputc_r+0x16>
 800c222:	290a      	cmp	r1, #10
 800c224:	d103      	bne.n	800c22e <__sfputc_r+0x1e>
 800c226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c22a:	f7fd bbff 	b.w	8009a2c <__swbuf_r>
 800c22e:	6813      	ldr	r3, [r2, #0]
 800c230:	1c58      	adds	r0, r3, #1
 800c232:	6010      	str	r0, [r2, #0]
 800c234:	7019      	strb	r1, [r3, #0]
 800c236:	4608      	mov	r0, r1
 800c238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <__sfputs_r>:
 800c23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c240:	4606      	mov	r6, r0
 800c242:	460f      	mov	r7, r1
 800c244:	4614      	mov	r4, r2
 800c246:	18d5      	adds	r5, r2, r3
 800c248:	42ac      	cmp	r4, r5
 800c24a:	d101      	bne.n	800c250 <__sfputs_r+0x12>
 800c24c:	2000      	movs	r0, #0
 800c24e:	e007      	b.n	800c260 <__sfputs_r+0x22>
 800c250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c254:	463a      	mov	r2, r7
 800c256:	4630      	mov	r0, r6
 800c258:	f7ff ffda 	bl	800c210 <__sfputc_r>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d1f3      	bne.n	800c248 <__sfputs_r+0xa>
 800c260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c264 <_vfiprintf_r>:
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	460d      	mov	r5, r1
 800c26a:	b09d      	sub	sp, #116	; 0x74
 800c26c:	4614      	mov	r4, r2
 800c26e:	4698      	mov	r8, r3
 800c270:	4606      	mov	r6, r0
 800c272:	b118      	cbz	r0, 800c27c <_vfiprintf_r+0x18>
 800c274:	6983      	ldr	r3, [r0, #24]
 800c276:	b90b      	cbnz	r3, 800c27c <_vfiprintf_r+0x18>
 800c278:	f7fe fc48 	bl	800ab0c <__sinit>
 800c27c:	4b89      	ldr	r3, [pc, #548]	; (800c4a4 <_vfiprintf_r+0x240>)
 800c27e:	429d      	cmp	r5, r3
 800c280:	d11b      	bne.n	800c2ba <_vfiprintf_r+0x56>
 800c282:	6875      	ldr	r5, [r6, #4]
 800c284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c286:	07d9      	lsls	r1, r3, #31
 800c288:	d405      	bmi.n	800c296 <_vfiprintf_r+0x32>
 800c28a:	89ab      	ldrh	r3, [r5, #12]
 800c28c:	059a      	lsls	r2, r3, #22
 800c28e:	d402      	bmi.n	800c296 <_vfiprintf_r+0x32>
 800c290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c292:	f7ff f85e 	bl	800b352 <__retarget_lock_acquire_recursive>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	071b      	lsls	r3, r3, #28
 800c29a:	d501      	bpl.n	800c2a0 <_vfiprintf_r+0x3c>
 800c29c:	692b      	ldr	r3, [r5, #16]
 800c29e:	b9eb      	cbnz	r3, 800c2dc <_vfiprintf_r+0x78>
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	f7fd fc14 	bl	8009ad0 <__swsetup_r>
 800c2a8:	b1c0      	cbz	r0, 800c2dc <_vfiprintf_r+0x78>
 800c2aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2ac:	07dc      	lsls	r4, r3, #31
 800c2ae:	d50e      	bpl.n	800c2ce <_vfiprintf_r+0x6a>
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	b01d      	add	sp, #116	; 0x74
 800c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ba:	4b7b      	ldr	r3, [pc, #492]	; (800c4a8 <_vfiprintf_r+0x244>)
 800c2bc:	429d      	cmp	r5, r3
 800c2be:	d101      	bne.n	800c2c4 <_vfiprintf_r+0x60>
 800c2c0:	68b5      	ldr	r5, [r6, #8]
 800c2c2:	e7df      	b.n	800c284 <_vfiprintf_r+0x20>
 800c2c4:	4b79      	ldr	r3, [pc, #484]	; (800c4ac <_vfiprintf_r+0x248>)
 800c2c6:	429d      	cmp	r5, r3
 800c2c8:	bf08      	it	eq
 800c2ca:	68f5      	ldreq	r5, [r6, #12]
 800c2cc:	e7da      	b.n	800c284 <_vfiprintf_r+0x20>
 800c2ce:	89ab      	ldrh	r3, [r5, #12]
 800c2d0:	0598      	lsls	r0, r3, #22
 800c2d2:	d4ed      	bmi.n	800c2b0 <_vfiprintf_r+0x4c>
 800c2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2d6:	f7ff f83d 	bl	800b354 <__retarget_lock_release_recursive>
 800c2da:	e7e9      	b.n	800c2b0 <_vfiprintf_r+0x4c>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e0:	2320      	movs	r3, #32
 800c2e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ea:	2330      	movs	r3, #48	; 0x30
 800c2ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4b0 <_vfiprintf_r+0x24c>
 800c2f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2f4:	f04f 0901 	mov.w	r9, #1
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	469a      	mov	sl, r3
 800c2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c300:	b10a      	cbz	r2, 800c306 <_vfiprintf_r+0xa2>
 800c302:	2a25      	cmp	r2, #37	; 0x25
 800c304:	d1f9      	bne.n	800c2fa <_vfiprintf_r+0x96>
 800c306:	ebba 0b04 	subs.w	fp, sl, r4
 800c30a:	d00b      	beq.n	800c324 <_vfiprintf_r+0xc0>
 800c30c:	465b      	mov	r3, fp
 800c30e:	4622      	mov	r2, r4
 800c310:	4629      	mov	r1, r5
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff ff93 	bl	800c23e <__sfputs_r>
 800c318:	3001      	adds	r0, #1
 800c31a:	f000 80aa 	beq.w	800c472 <_vfiprintf_r+0x20e>
 800c31e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c320:	445a      	add	r2, fp
 800c322:	9209      	str	r2, [sp, #36]	; 0x24
 800c324:	f89a 3000 	ldrb.w	r3, [sl]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 80a2 	beq.w	800c472 <_vfiprintf_r+0x20e>
 800c32e:	2300      	movs	r3, #0
 800c330:	f04f 32ff 	mov.w	r2, #4294967295
 800c334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c338:	f10a 0a01 	add.w	sl, sl, #1
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	9307      	str	r3, [sp, #28]
 800c340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c344:	931a      	str	r3, [sp, #104]	; 0x68
 800c346:	4654      	mov	r4, sl
 800c348:	2205      	movs	r2, #5
 800c34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34e:	4858      	ldr	r0, [pc, #352]	; (800c4b0 <_vfiprintf_r+0x24c>)
 800c350:	f7f3 ff7e 	bl	8000250 <memchr>
 800c354:	9a04      	ldr	r2, [sp, #16]
 800c356:	b9d8      	cbnz	r0, 800c390 <_vfiprintf_r+0x12c>
 800c358:	06d1      	lsls	r1, r2, #27
 800c35a:	bf44      	itt	mi
 800c35c:	2320      	movmi	r3, #32
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c362:	0713      	lsls	r3, r2, #28
 800c364:	bf44      	itt	mi
 800c366:	232b      	movmi	r3, #43	; 0x2b
 800c368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c36c:	f89a 3000 	ldrb.w	r3, [sl]
 800c370:	2b2a      	cmp	r3, #42	; 0x2a
 800c372:	d015      	beq.n	800c3a0 <_vfiprintf_r+0x13c>
 800c374:	9a07      	ldr	r2, [sp, #28]
 800c376:	4654      	mov	r4, sl
 800c378:	2000      	movs	r0, #0
 800c37a:	f04f 0c0a 	mov.w	ip, #10
 800c37e:	4621      	mov	r1, r4
 800c380:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c384:	3b30      	subs	r3, #48	; 0x30
 800c386:	2b09      	cmp	r3, #9
 800c388:	d94e      	bls.n	800c428 <_vfiprintf_r+0x1c4>
 800c38a:	b1b0      	cbz	r0, 800c3ba <_vfiprintf_r+0x156>
 800c38c:	9207      	str	r2, [sp, #28]
 800c38e:	e014      	b.n	800c3ba <_vfiprintf_r+0x156>
 800c390:	eba0 0308 	sub.w	r3, r0, r8
 800c394:	fa09 f303 	lsl.w	r3, r9, r3
 800c398:	4313      	orrs	r3, r2
 800c39a:	9304      	str	r3, [sp, #16]
 800c39c:	46a2      	mov	sl, r4
 800c39e:	e7d2      	b.n	800c346 <_vfiprintf_r+0xe2>
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	1d19      	adds	r1, r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	9103      	str	r1, [sp, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bfbb      	ittet	lt
 800c3ac:	425b      	neglt	r3, r3
 800c3ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b2:	9307      	strge	r3, [sp, #28]
 800c3b4:	9307      	strlt	r3, [sp, #28]
 800c3b6:	bfb8      	it	lt
 800c3b8:	9204      	strlt	r2, [sp, #16]
 800c3ba:	7823      	ldrb	r3, [r4, #0]
 800c3bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3be:	d10c      	bne.n	800c3da <_vfiprintf_r+0x176>
 800c3c0:	7863      	ldrb	r3, [r4, #1]
 800c3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c4:	d135      	bne.n	800c432 <_vfiprintf_r+0x1ce>
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	1d1a      	adds	r2, r3, #4
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	9203      	str	r2, [sp, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bfb8      	it	lt
 800c3d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3d6:	3402      	adds	r4, #2
 800c3d8:	9305      	str	r3, [sp, #20]
 800c3da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4c0 <_vfiprintf_r+0x25c>
 800c3de:	7821      	ldrb	r1, [r4, #0]
 800c3e0:	2203      	movs	r2, #3
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	f7f3 ff34 	bl	8000250 <memchr>
 800c3e8:	b140      	cbz	r0, 800c3fc <_vfiprintf_r+0x198>
 800c3ea:	2340      	movs	r3, #64	; 0x40
 800c3ec:	eba0 000a 	sub.w	r0, r0, sl
 800c3f0:	fa03 f000 	lsl.w	r0, r3, r0
 800c3f4:	9b04      	ldr	r3, [sp, #16]
 800c3f6:	4303      	orrs	r3, r0
 800c3f8:	3401      	adds	r4, #1
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c400:	482c      	ldr	r0, [pc, #176]	; (800c4b4 <_vfiprintf_r+0x250>)
 800c402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c406:	2206      	movs	r2, #6
 800c408:	f7f3 ff22 	bl	8000250 <memchr>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d03f      	beq.n	800c490 <_vfiprintf_r+0x22c>
 800c410:	4b29      	ldr	r3, [pc, #164]	; (800c4b8 <_vfiprintf_r+0x254>)
 800c412:	bb1b      	cbnz	r3, 800c45c <_vfiprintf_r+0x1f8>
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	3307      	adds	r3, #7
 800c418:	f023 0307 	bic.w	r3, r3, #7
 800c41c:	3308      	adds	r3, #8
 800c41e:	9303      	str	r3, [sp, #12]
 800c420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c422:	443b      	add	r3, r7
 800c424:	9309      	str	r3, [sp, #36]	; 0x24
 800c426:	e767      	b.n	800c2f8 <_vfiprintf_r+0x94>
 800c428:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42c:	460c      	mov	r4, r1
 800c42e:	2001      	movs	r0, #1
 800c430:	e7a5      	b.n	800c37e <_vfiprintf_r+0x11a>
 800c432:	2300      	movs	r3, #0
 800c434:	3401      	adds	r4, #1
 800c436:	9305      	str	r3, [sp, #20]
 800c438:	4619      	mov	r1, r3
 800c43a:	f04f 0c0a 	mov.w	ip, #10
 800c43e:	4620      	mov	r0, r4
 800c440:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c444:	3a30      	subs	r2, #48	; 0x30
 800c446:	2a09      	cmp	r2, #9
 800c448:	d903      	bls.n	800c452 <_vfiprintf_r+0x1ee>
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d0c5      	beq.n	800c3da <_vfiprintf_r+0x176>
 800c44e:	9105      	str	r1, [sp, #20]
 800c450:	e7c3      	b.n	800c3da <_vfiprintf_r+0x176>
 800c452:	fb0c 2101 	mla	r1, ip, r1, r2
 800c456:	4604      	mov	r4, r0
 800c458:	2301      	movs	r3, #1
 800c45a:	e7f0      	b.n	800c43e <_vfiprintf_r+0x1da>
 800c45c:	ab03      	add	r3, sp, #12
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	462a      	mov	r2, r5
 800c462:	4b16      	ldr	r3, [pc, #88]	; (800c4bc <_vfiprintf_r+0x258>)
 800c464:	a904      	add	r1, sp, #16
 800c466:	4630      	mov	r0, r6
 800c468:	f7fb fcfa 	bl	8007e60 <_printf_float>
 800c46c:	4607      	mov	r7, r0
 800c46e:	1c78      	adds	r0, r7, #1
 800c470:	d1d6      	bne.n	800c420 <_vfiprintf_r+0x1bc>
 800c472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c474:	07d9      	lsls	r1, r3, #31
 800c476:	d405      	bmi.n	800c484 <_vfiprintf_r+0x220>
 800c478:	89ab      	ldrh	r3, [r5, #12]
 800c47a:	059a      	lsls	r2, r3, #22
 800c47c:	d402      	bmi.n	800c484 <_vfiprintf_r+0x220>
 800c47e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c480:	f7fe ff68 	bl	800b354 <__retarget_lock_release_recursive>
 800c484:	89ab      	ldrh	r3, [r5, #12]
 800c486:	065b      	lsls	r3, r3, #25
 800c488:	f53f af12 	bmi.w	800c2b0 <_vfiprintf_r+0x4c>
 800c48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c48e:	e711      	b.n	800c2b4 <_vfiprintf_r+0x50>
 800c490:	ab03      	add	r3, sp, #12
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	462a      	mov	r2, r5
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <_vfiprintf_r+0x258>)
 800c498:	a904      	add	r1, sp, #16
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7fb ff84 	bl	80083a8 <_printf_i>
 800c4a0:	e7e4      	b.n	800c46c <_vfiprintf_r+0x208>
 800c4a2:	bf00      	nop
 800c4a4:	0800f014 	.word	0x0800f014
 800c4a8:	0800f034 	.word	0x0800f034
 800c4ac:	0800eff4 	.word	0x0800eff4
 800c4b0:	0800f234 	.word	0x0800f234
 800c4b4:	0800f23e 	.word	0x0800f23e
 800c4b8:	08007e61 	.word	0x08007e61
 800c4bc:	0800c23f 	.word	0x0800c23f
 800c4c0:	0800f23a 	.word	0x0800f23a

0800c4c4 <_putc_r>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	b118      	cbz	r0, 800c4d6 <_putc_r+0x12>
 800c4ce:	6983      	ldr	r3, [r0, #24]
 800c4d0:	b90b      	cbnz	r3, 800c4d6 <_putc_r+0x12>
 800c4d2:	f7fe fb1b 	bl	800ab0c <__sinit>
 800c4d6:	4b1c      	ldr	r3, [pc, #112]	; (800c548 <_putc_r+0x84>)
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	d124      	bne.n	800c526 <_putc_r+0x62>
 800c4dc:	6874      	ldr	r4, [r6, #4]
 800c4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4e0:	07d8      	lsls	r0, r3, #31
 800c4e2:	d405      	bmi.n	800c4f0 <_putc_r+0x2c>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	0599      	lsls	r1, r3, #22
 800c4e8:	d402      	bmi.n	800c4f0 <_putc_r+0x2c>
 800c4ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ec:	f7fe ff31 	bl	800b352 <__retarget_lock_acquire_recursive>
 800c4f0:	68a3      	ldr	r3, [r4, #8]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	60a3      	str	r3, [r4, #8]
 800c4f8:	da05      	bge.n	800c506 <_putc_r+0x42>
 800c4fa:	69a2      	ldr	r2, [r4, #24]
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	db1c      	blt.n	800c53a <_putc_r+0x76>
 800c500:	b2eb      	uxtb	r3, r5
 800c502:	2b0a      	cmp	r3, #10
 800c504:	d019      	beq.n	800c53a <_putc_r+0x76>
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	6022      	str	r2, [r4, #0]
 800c50c:	701d      	strb	r5, [r3, #0]
 800c50e:	b2ed      	uxtb	r5, r5
 800c510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c512:	07da      	lsls	r2, r3, #31
 800c514:	d405      	bmi.n	800c522 <_putc_r+0x5e>
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	059b      	lsls	r3, r3, #22
 800c51a:	d402      	bmi.n	800c522 <_putc_r+0x5e>
 800c51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c51e:	f7fe ff19 	bl	800b354 <__retarget_lock_release_recursive>
 800c522:	4628      	mov	r0, r5
 800c524:	bd70      	pop	{r4, r5, r6, pc}
 800c526:	4b09      	ldr	r3, [pc, #36]	; (800c54c <_putc_r+0x88>)
 800c528:	429c      	cmp	r4, r3
 800c52a:	d101      	bne.n	800c530 <_putc_r+0x6c>
 800c52c:	68b4      	ldr	r4, [r6, #8]
 800c52e:	e7d6      	b.n	800c4de <_putc_r+0x1a>
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <_putc_r+0x8c>)
 800c532:	429c      	cmp	r4, r3
 800c534:	bf08      	it	eq
 800c536:	68f4      	ldreq	r4, [r6, #12]
 800c538:	e7d1      	b.n	800c4de <_putc_r+0x1a>
 800c53a:	4629      	mov	r1, r5
 800c53c:	4622      	mov	r2, r4
 800c53e:	4630      	mov	r0, r6
 800c540:	f7fd fa74 	bl	8009a2c <__swbuf_r>
 800c544:	4605      	mov	r5, r0
 800c546:	e7e3      	b.n	800c510 <_putc_r+0x4c>
 800c548:	0800f014 	.word	0x0800f014
 800c54c:	0800f034 	.word	0x0800f034
 800c550:	0800eff4 	.word	0x0800eff4
 800c554:	00000000 	.word	0x00000000

0800c558 <nan>:
 800c558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c560 <nan+0x8>
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	00000000 	.word	0x00000000
 800c564:	7ff80000 	.word	0x7ff80000

0800c568 <_sbrk_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d06      	ldr	r5, [pc, #24]	; (800c584 <_sbrk_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f7 f942 	bl	80037fc <_sbrk>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_sbrk_r+0x1a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_sbrk_r+0x1a>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	2000089c 	.word	0x2000089c

0800c588 <__sread>:
 800c588:	b510      	push	{r4, lr}
 800c58a:	460c      	mov	r4, r1
 800c58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c590:	f000 f906 	bl	800c7a0 <_read_r>
 800c594:	2800      	cmp	r0, #0
 800c596:	bfab      	itete	ge
 800c598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c59a:	89a3      	ldrhlt	r3, [r4, #12]
 800c59c:	181b      	addge	r3, r3, r0
 800c59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5a2:	bfac      	ite	ge
 800c5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5a6:	81a3      	strhlt	r3, [r4, #12]
 800c5a8:	bd10      	pop	{r4, pc}

0800c5aa <__swrite>:
 800c5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ae:	461f      	mov	r7, r3
 800c5b0:	898b      	ldrh	r3, [r1, #12]
 800c5b2:	05db      	lsls	r3, r3, #23
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	d505      	bpl.n	800c5c8 <__swrite+0x1e>
 800c5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f000 f88e 	bl	800c6e4 <_lseek_r>
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5d2:	81a3      	strh	r3, [r4, #12]
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	4628      	mov	r0, r5
 800c5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5de:	f000 b835 	b.w	800c64c <_write_r>

0800c5e2 <__sseek>:
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	460c      	mov	r4, r1
 800c5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ea:	f000 f87b 	bl	800c6e4 <_lseek_r>
 800c5ee:	1c43      	adds	r3, r0, #1
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	bf15      	itete	ne
 800c5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5fe:	81a3      	strheq	r3, [r4, #12]
 800c600:	bf18      	it	ne
 800c602:	81a3      	strhne	r3, [r4, #12]
 800c604:	bd10      	pop	{r4, pc}

0800c606 <__sclose>:
 800c606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60a:	f000 b839 	b.w	800c680 <_close_r>

0800c60e <strncmp>:
 800c60e:	b510      	push	{r4, lr}
 800c610:	b16a      	cbz	r2, 800c62e <strncmp+0x20>
 800c612:	3901      	subs	r1, #1
 800c614:	1884      	adds	r4, r0, r2
 800c616:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c61a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c61e:	4293      	cmp	r3, r2
 800c620:	d103      	bne.n	800c62a <strncmp+0x1c>
 800c622:	42a0      	cmp	r0, r4
 800c624:	d001      	beq.n	800c62a <strncmp+0x1c>
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1f5      	bne.n	800c616 <strncmp+0x8>
 800c62a:	1a98      	subs	r0, r3, r2
 800c62c:	bd10      	pop	{r4, pc}
 800c62e:	4610      	mov	r0, r2
 800c630:	e7fc      	b.n	800c62c <strncmp+0x1e>

0800c632 <__ascii_wctomb>:
 800c632:	b149      	cbz	r1, 800c648 <__ascii_wctomb+0x16>
 800c634:	2aff      	cmp	r2, #255	; 0xff
 800c636:	bf85      	ittet	hi
 800c638:	238a      	movhi	r3, #138	; 0x8a
 800c63a:	6003      	strhi	r3, [r0, #0]
 800c63c:	700a      	strbls	r2, [r1, #0]
 800c63e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c642:	bf98      	it	ls
 800c644:	2001      	movls	r0, #1
 800c646:	4770      	bx	lr
 800c648:	4608      	mov	r0, r1
 800c64a:	4770      	bx	lr

0800c64c <_write_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4d07      	ldr	r5, [pc, #28]	; (800c66c <_write_r+0x20>)
 800c650:	4604      	mov	r4, r0
 800c652:	4608      	mov	r0, r1
 800c654:	4611      	mov	r1, r2
 800c656:	2200      	movs	r2, #0
 800c658:	602a      	str	r2, [r5, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	f7f6 feb0 	bl	80033c0 <_write>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_write_r+0x1e>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b103      	cbz	r3, 800c66a <_write_r+0x1e>
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	2000089c 	.word	0x2000089c

0800c670 <abort>:
 800c670:	b508      	push	{r3, lr}
 800c672:	2006      	movs	r0, #6
 800c674:	f000 f8ce 	bl	800c814 <raise>
 800c678:	2001      	movs	r0, #1
 800c67a:	f7f7 f863 	bl	8003744 <_exit>
	...

0800c680 <_close_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d06      	ldr	r5, [pc, #24]	; (800c69c <_close_r+0x1c>)
 800c684:	2300      	movs	r3, #0
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	f7f7 f881 	bl	8003792 <_close>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_close_r+0x1a>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_close_r+0x1a>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	2000089c 	.word	0x2000089c

0800c6a0 <_fstat_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4d07      	ldr	r5, [pc, #28]	; (800c6c0 <_fstat_r+0x20>)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	f7f7 f87c 	bl	80037aa <_fstat>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d102      	bne.n	800c6bc <_fstat_r+0x1c>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	b103      	cbz	r3, 800c6bc <_fstat_r+0x1c>
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	bd38      	pop	{r3, r4, r5, pc}
 800c6be:	bf00      	nop
 800c6c0:	2000089c 	.word	0x2000089c

0800c6c4 <_isatty_r>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	4d06      	ldr	r5, [pc, #24]	; (800c6e0 <_isatty_r+0x1c>)
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	602b      	str	r3, [r5, #0]
 800c6d0:	f7f7 f87b 	bl	80037ca <_isatty>
 800c6d4:	1c43      	adds	r3, r0, #1
 800c6d6:	d102      	bne.n	800c6de <_isatty_r+0x1a>
 800c6d8:	682b      	ldr	r3, [r5, #0]
 800c6da:	b103      	cbz	r3, 800c6de <_isatty_r+0x1a>
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	bd38      	pop	{r3, r4, r5, pc}
 800c6e0:	2000089c 	.word	0x2000089c

0800c6e4 <_lseek_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4d07      	ldr	r5, [pc, #28]	; (800c704 <_lseek_r+0x20>)
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	4608      	mov	r0, r1
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	602a      	str	r2, [r5, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f7f7 f874 	bl	80037e0 <_lseek>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_lseek_r+0x1e>
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_lseek_r+0x1e>
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	2000089c 	.word	0x2000089c

0800c708 <memmove>:
 800c708:	4288      	cmp	r0, r1
 800c70a:	b510      	push	{r4, lr}
 800c70c:	eb01 0402 	add.w	r4, r1, r2
 800c710:	d902      	bls.n	800c718 <memmove+0x10>
 800c712:	4284      	cmp	r4, r0
 800c714:	4623      	mov	r3, r4
 800c716:	d807      	bhi.n	800c728 <memmove+0x20>
 800c718:	1e43      	subs	r3, r0, #1
 800c71a:	42a1      	cmp	r1, r4
 800c71c:	d008      	beq.n	800c730 <memmove+0x28>
 800c71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c722:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c726:	e7f8      	b.n	800c71a <memmove+0x12>
 800c728:	4402      	add	r2, r0
 800c72a:	4601      	mov	r1, r0
 800c72c:	428a      	cmp	r2, r1
 800c72e:	d100      	bne.n	800c732 <memmove+0x2a>
 800c730:	bd10      	pop	{r4, pc}
 800c732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73a:	e7f7      	b.n	800c72c <memmove+0x24>

0800c73c <__malloc_lock>:
 800c73c:	4801      	ldr	r0, [pc, #4]	; (800c744 <__malloc_lock+0x8>)
 800c73e:	f7fe be08 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800c742:	bf00      	nop
 800c744:	20000894 	.word	0x20000894

0800c748 <__malloc_unlock>:
 800c748:	4801      	ldr	r0, [pc, #4]	; (800c750 <__malloc_unlock+0x8>)
 800c74a:	f7fe be03 	b.w	800b354 <__retarget_lock_release_recursive>
 800c74e:	bf00      	nop
 800c750:	20000894 	.word	0x20000894

0800c754 <_realloc_r>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	4607      	mov	r7, r0
 800c758:	4614      	mov	r4, r2
 800c75a:	460e      	mov	r6, r1
 800c75c:	b921      	cbnz	r1, 800c768 <_realloc_r+0x14>
 800c75e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c762:	4611      	mov	r1, r2
 800c764:	f7ff bb9e 	b.w	800bea4 <_malloc_r>
 800c768:	b922      	cbnz	r2, 800c774 <_realloc_r+0x20>
 800c76a:	f7ff fb4b 	bl	800be04 <_free_r>
 800c76e:	4625      	mov	r5, r4
 800c770:	4628      	mov	r0, r5
 800c772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c774:	f000 f86a 	bl	800c84c <_malloc_usable_size_r>
 800c778:	42a0      	cmp	r0, r4
 800c77a:	d20f      	bcs.n	800c79c <_realloc_r+0x48>
 800c77c:	4621      	mov	r1, r4
 800c77e:	4638      	mov	r0, r7
 800c780:	f7ff fb90 	bl	800bea4 <_malloc_r>
 800c784:	4605      	mov	r5, r0
 800c786:	2800      	cmp	r0, #0
 800c788:	d0f2      	beq.n	800c770 <_realloc_r+0x1c>
 800c78a:	4631      	mov	r1, r6
 800c78c:	4622      	mov	r2, r4
 800c78e:	f7fe fe61 	bl	800b454 <memcpy>
 800c792:	4631      	mov	r1, r6
 800c794:	4638      	mov	r0, r7
 800c796:	f7ff fb35 	bl	800be04 <_free_r>
 800c79a:	e7e9      	b.n	800c770 <_realloc_r+0x1c>
 800c79c:	4635      	mov	r5, r6
 800c79e:	e7e7      	b.n	800c770 <_realloc_r+0x1c>

0800c7a0 <_read_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4d07      	ldr	r5, [pc, #28]	; (800c7c0 <_read_r+0x20>)
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	4608      	mov	r0, r1
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	602a      	str	r2, [r5, #0]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	f7f6 ffd2 	bl	8003758 <_read>
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	d102      	bne.n	800c7be <_read_r+0x1e>
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	b103      	cbz	r3, 800c7be <_read_r+0x1e>
 800c7bc:	6023      	str	r3, [r4, #0]
 800c7be:	bd38      	pop	{r3, r4, r5, pc}
 800c7c0:	2000089c 	.word	0x2000089c

0800c7c4 <_raise_r>:
 800c7c4:	291f      	cmp	r1, #31
 800c7c6:	b538      	push	{r3, r4, r5, lr}
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	d904      	bls.n	800c7d8 <_raise_r+0x14>
 800c7ce:	2316      	movs	r3, #22
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7da:	b112      	cbz	r2, 800c7e2 <_raise_r+0x1e>
 800c7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e0:	b94b      	cbnz	r3, 800c7f6 <_raise_r+0x32>
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 f830 	bl	800c848 <_getpid_r>
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f2:	f000 b817 	b.w	800c824 <_kill_r>
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d00a      	beq.n	800c810 <_raise_r+0x4c>
 800c7fa:	1c59      	adds	r1, r3, #1
 800c7fc:	d103      	bne.n	800c806 <_raise_r+0x42>
 800c7fe:	2316      	movs	r3, #22
 800c800:	6003      	str	r3, [r0, #0]
 800c802:	2001      	movs	r0, #1
 800c804:	e7e7      	b.n	800c7d6 <_raise_r+0x12>
 800c806:	2400      	movs	r4, #0
 800c808:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c80c:	4628      	mov	r0, r5
 800c80e:	4798      	blx	r3
 800c810:	2000      	movs	r0, #0
 800c812:	e7e0      	b.n	800c7d6 <_raise_r+0x12>

0800c814 <raise>:
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <raise+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f7ff bfd3 	b.w	800c7c4 <_raise_r>
 800c81e:	bf00      	nop
 800c820:	2000000c 	.word	0x2000000c

0800c824 <_kill_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4d07      	ldr	r5, [pc, #28]	; (800c844 <_kill_r+0x20>)
 800c828:	2300      	movs	r3, #0
 800c82a:	4604      	mov	r4, r0
 800c82c:	4608      	mov	r0, r1
 800c82e:	4611      	mov	r1, r2
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	f7f6 ff77 	bl	8003724 <_kill>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	d102      	bne.n	800c840 <_kill_r+0x1c>
 800c83a:	682b      	ldr	r3, [r5, #0]
 800c83c:	b103      	cbz	r3, 800c840 <_kill_r+0x1c>
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	bd38      	pop	{r3, r4, r5, pc}
 800c842:	bf00      	nop
 800c844:	2000089c 	.word	0x2000089c

0800c848 <_getpid_r>:
 800c848:	f7f6 bf64 	b.w	8003714 <_getpid>

0800c84c <_malloc_usable_size_r>:
 800c84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c850:	1f18      	subs	r0, r3, #4
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfbc      	itt	lt
 800c856:	580b      	ldrlt	r3, [r1, r0]
 800c858:	18c0      	addlt	r0, r0, r3
 800c85a:	4770      	bx	lr

0800c85c <cosf>:
 800c85c:	ee10 3a10 	vmov	r3, s0
 800c860:	b507      	push	{r0, r1, r2, lr}
 800c862:	4a1c      	ldr	r2, [pc, #112]	; (800c8d4 <cosf+0x78>)
 800c864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c868:	4293      	cmp	r3, r2
 800c86a:	dc04      	bgt.n	800c876 <cosf+0x1a>
 800c86c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800c8d8 <cosf+0x7c>
 800c870:	f000 f9b2 	bl	800cbd8 <__kernel_cosf>
 800c874:	e004      	b.n	800c880 <cosf+0x24>
 800c876:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c87a:	db04      	blt.n	800c886 <cosf+0x2a>
 800c87c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c880:	b003      	add	sp, #12
 800c882:	f85d fb04 	ldr.w	pc, [sp], #4
 800c886:	4668      	mov	r0, sp
 800c888:	f000 f86a 	bl	800c960 <__ieee754_rem_pio2f>
 800c88c:	f000 0003 	and.w	r0, r0, #3
 800c890:	2801      	cmp	r0, #1
 800c892:	d007      	beq.n	800c8a4 <cosf+0x48>
 800c894:	2802      	cmp	r0, #2
 800c896:	d00e      	beq.n	800c8b6 <cosf+0x5a>
 800c898:	b9a0      	cbnz	r0, 800c8c4 <cosf+0x68>
 800c89a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c89e:	ed9d 0a00 	vldr	s0, [sp]
 800c8a2:	e7e5      	b.n	800c870 <cosf+0x14>
 800c8a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8a8:	ed9d 0a00 	vldr	s0, [sp]
 800c8ac:	f000 fc7e 	bl	800d1ac <__kernel_sinf>
 800c8b0:	eeb1 0a40 	vneg.f32	s0, s0
 800c8b4:	e7e4      	b.n	800c880 <cosf+0x24>
 800c8b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8ba:	ed9d 0a00 	vldr	s0, [sp]
 800c8be:	f000 f98b 	bl	800cbd8 <__kernel_cosf>
 800c8c2:	e7f5      	b.n	800c8b0 <cosf+0x54>
 800c8c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8c8:	ed9d 0a00 	vldr	s0, [sp]
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	f000 fc6d 	bl	800d1ac <__kernel_sinf>
 800c8d2:	e7d5      	b.n	800c880 <cosf+0x24>
 800c8d4:	3f490fd8 	.word	0x3f490fd8
 800c8d8:	00000000 	.word	0x00000000

0800c8dc <sinf>:
 800c8dc:	ee10 3a10 	vmov	r3, s0
 800c8e0:	b507      	push	{r0, r1, r2, lr}
 800c8e2:	4a1d      	ldr	r2, [pc, #116]	; (800c958 <sinf+0x7c>)
 800c8e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	dc05      	bgt.n	800c8f8 <sinf+0x1c>
 800c8ec:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800c95c <sinf+0x80>
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	f000 fc5b 	bl	800d1ac <__kernel_sinf>
 800c8f6:	e004      	b.n	800c902 <sinf+0x26>
 800c8f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c8fc:	db04      	blt.n	800c908 <sinf+0x2c>
 800c8fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c902:	b003      	add	sp, #12
 800c904:	f85d fb04 	ldr.w	pc, [sp], #4
 800c908:	4668      	mov	r0, sp
 800c90a:	f000 f829 	bl	800c960 <__ieee754_rem_pio2f>
 800c90e:	f000 0003 	and.w	r0, r0, #3
 800c912:	2801      	cmp	r0, #1
 800c914:	d008      	beq.n	800c928 <sinf+0x4c>
 800c916:	2802      	cmp	r0, #2
 800c918:	d00d      	beq.n	800c936 <sinf+0x5a>
 800c91a:	b9b0      	cbnz	r0, 800c94a <sinf+0x6e>
 800c91c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c920:	ed9d 0a00 	vldr	s0, [sp]
 800c924:	2001      	movs	r0, #1
 800c926:	e7e4      	b.n	800c8f2 <sinf+0x16>
 800c928:	eddd 0a01 	vldr	s1, [sp, #4]
 800c92c:	ed9d 0a00 	vldr	s0, [sp]
 800c930:	f000 f952 	bl	800cbd8 <__kernel_cosf>
 800c934:	e7e5      	b.n	800c902 <sinf+0x26>
 800c936:	eddd 0a01 	vldr	s1, [sp, #4]
 800c93a:	ed9d 0a00 	vldr	s0, [sp]
 800c93e:	2001      	movs	r0, #1
 800c940:	f000 fc34 	bl	800d1ac <__kernel_sinf>
 800c944:	eeb1 0a40 	vneg.f32	s0, s0
 800c948:	e7db      	b.n	800c902 <sinf+0x26>
 800c94a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c94e:	ed9d 0a00 	vldr	s0, [sp]
 800c952:	f000 f941 	bl	800cbd8 <__kernel_cosf>
 800c956:	e7f5      	b.n	800c944 <sinf+0x68>
 800c958:	3f490fd8 	.word	0x3f490fd8
 800c95c:	00000000 	.word	0x00000000

0800c960 <__ieee754_rem_pio2f>:
 800c960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c962:	ee10 6a10 	vmov	r6, s0
 800c966:	4b8e      	ldr	r3, [pc, #568]	; (800cba0 <__ieee754_rem_pio2f+0x240>)
 800c968:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c96c:	429d      	cmp	r5, r3
 800c96e:	b087      	sub	sp, #28
 800c970:	eef0 7a40 	vmov.f32	s15, s0
 800c974:	4604      	mov	r4, r0
 800c976:	dc05      	bgt.n	800c984 <__ieee754_rem_pio2f+0x24>
 800c978:	2300      	movs	r3, #0
 800c97a:	ed80 0a00 	vstr	s0, [r0]
 800c97e:	6043      	str	r3, [r0, #4]
 800c980:	2000      	movs	r0, #0
 800c982:	e01a      	b.n	800c9ba <__ieee754_rem_pio2f+0x5a>
 800c984:	4b87      	ldr	r3, [pc, #540]	; (800cba4 <__ieee754_rem_pio2f+0x244>)
 800c986:	429d      	cmp	r5, r3
 800c988:	dc46      	bgt.n	800ca18 <__ieee754_rem_pio2f+0xb8>
 800c98a:	2e00      	cmp	r6, #0
 800c98c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800cba8 <__ieee754_rem_pio2f+0x248>
 800c990:	4b86      	ldr	r3, [pc, #536]	; (800cbac <__ieee754_rem_pio2f+0x24c>)
 800c992:	f025 050f 	bic.w	r5, r5, #15
 800c996:	dd1f      	ble.n	800c9d8 <__ieee754_rem_pio2f+0x78>
 800c998:	429d      	cmp	r5, r3
 800c99a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c99e:	d00e      	beq.n	800c9be <__ieee754_rem_pio2f+0x5e>
 800c9a0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800cbb0 <__ieee754_rem_pio2f+0x250>
 800c9a4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c9a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c9ac:	ed80 0a00 	vstr	s0, [r0]
 800c9b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9b4:	2001      	movs	r0, #1
 800c9b6:	edc4 7a01 	vstr	s15, [r4, #4]
 800c9ba:	b007      	add	sp, #28
 800c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9be:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800cbb4 <__ieee754_rem_pio2f+0x254>
 800c9c2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800cbb8 <__ieee754_rem_pio2f+0x258>
 800c9c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c9ca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c9ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c9d2:	edc0 6a00 	vstr	s13, [r0]
 800c9d6:	e7eb      	b.n	800c9b0 <__ieee754_rem_pio2f+0x50>
 800c9d8:	429d      	cmp	r5, r3
 800c9da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c9de:	d00e      	beq.n	800c9fe <__ieee754_rem_pio2f+0x9e>
 800c9e0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cbb0 <__ieee754_rem_pio2f+0x250>
 800c9e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c9e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c9ec:	ed80 0a00 	vstr	s0, [r0]
 800c9f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	edc4 7a01 	vstr	s15, [r4, #4]
 800c9fc:	e7dd      	b.n	800c9ba <__ieee754_rem_pio2f+0x5a>
 800c9fe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800cbb4 <__ieee754_rem_pio2f+0x254>
 800ca02:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800cbb8 <__ieee754_rem_pio2f+0x258>
 800ca06:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ca0a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ca12:	edc0 6a00 	vstr	s13, [r0]
 800ca16:	e7eb      	b.n	800c9f0 <__ieee754_rem_pio2f+0x90>
 800ca18:	4b68      	ldr	r3, [pc, #416]	; (800cbbc <__ieee754_rem_pio2f+0x25c>)
 800ca1a:	429d      	cmp	r5, r3
 800ca1c:	dc72      	bgt.n	800cb04 <__ieee754_rem_pio2f+0x1a4>
 800ca1e:	f000 fc0d 	bl	800d23c <fabsf>
 800ca22:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cbc0 <__ieee754_rem_pio2f+0x260>
 800ca26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ca2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca36:	ee17 0a90 	vmov	r0, s15
 800ca3a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cba8 <__ieee754_rem_pio2f+0x248>
 800ca3e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ca42:	281f      	cmp	r0, #31
 800ca44:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800cbb0 <__ieee754_rem_pio2f+0x250>
 800ca48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4c:	eeb1 6a47 	vneg.f32	s12, s14
 800ca50:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ca54:	ee16 2a90 	vmov	r2, s13
 800ca58:	dc1c      	bgt.n	800ca94 <__ieee754_rem_pio2f+0x134>
 800ca5a:	495a      	ldr	r1, [pc, #360]	; (800cbc4 <__ieee754_rem_pio2f+0x264>)
 800ca5c:	1e47      	subs	r7, r0, #1
 800ca5e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ca62:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ca66:	428b      	cmp	r3, r1
 800ca68:	d014      	beq.n	800ca94 <__ieee754_rem_pio2f+0x134>
 800ca6a:	6022      	str	r2, [r4, #0]
 800ca6c:	ed94 7a00 	vldr	s14, [r4]
 800ca70:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca74:	2e00      	cmp	r6, #0
 800ca76:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca7a:	ed84 0a01 	vstr	s0, [r4, #4]
 800ca7e:	da9c      	bge.n	800c9ba <__ieee754_rem_pio2f+0x5a>
 800ca80:	eeb1 7a47 	vneg.f32	s14, s14
 800ca84:	eeb1 0a40 	vneg.f32	s0, s0
 800ca88:	ed84 7a00 	vstr	s14, [r4]
 800ca8c:	ed84 0a01 	vstr	s0, [r4, #4]
 800ca90:	4240      	negs	r0, r0
 800ca92:	e792      	b.n	800c9ba <__ieee754_rem_pio2f+0x5a>
 800ca94:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ca98:	15eb      	asrs	r3, r5, #23
 800ca9a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ca9e:	2d08      	cmp	r5, #8
 800caa0:	dde3      	ble.n	800ca6a <__ieee754_rem_pio2f+0x10a>
 800caa2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800cbb4 <__ieee754_rem_pio2f+0x254>
 800caa6:	eef0 6a40 	vmov.f32	s13, s0
 800caaa:	eee6 6a27 	vfma.f32	s13, s12, s15
 800caae:	ee30 0a66 	vsub.f32	s0, s0, s13
 800cab2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800cab6:	eddf 7a40 	vldr	s15, [pc, #256]	; 800cbb8 <__ieee754_rem_pio2f+0x258>
 800caba:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800cabe:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800cac2:	eef0 7a40 	vmov.f32	s15, s0
 800cac6:	ee15 2a90 	vmov	r2, s11
 800caca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cace:	1a5b      	subs	r3, r3, r1
 800cad0:	2b19      	cmp	r3, #25
 800cad2:	dc04      	bgt.n	800cade <__ieee754_rem_pio2f+0x17e>
 800cad4:	edc4 5a00 	vstr	s11, [r4]
 800cad8:	eeb0 0a66 	vmov.f32	s0, s13
 800cadc:	e7c6      	b.n	800ca6c <__ieee754_rem_pio2f+0x10c>
 800cade:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800cbc8 <__ieee754_rem_pio2f+0x268>
 800cae2:	eeb0 0a66 	vmov.f32	s0, s13
 800cae6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800caea:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800caee:	eddf 6a37 	vldr	s13, [pc, #220]	; 800cbcc <__ieee754_rem_pio2f+0x26c>
 800caf2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800caf6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cafa:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cafe:	ed84 7a00 	vstr	s14, [r4]
 800cb02:	e7b3      	b.n	800ca6c <__ieee754_rem_pio2f+0x10c>
 800cb04:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cb08:	db06      	blt.n	800cb18 <__ieee754_rem_pio2f+0x1b8>
 800cb0a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cb0e:	edc0 7a01 	vstr	s15, [r0, #4]
 800cb12:	edc0 7a00 	vstr	s15, [r0]
 800cb16:	e733      	b.n	800c980 <__ieee754_rem_pio2f+0x20>
 800cb18:	15ea      	asrs	r2, r5, #23
 800cb1a:	3a86      	subs	r2, #134	; 0x86
 800cb1c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cb20:	ee07 3a90 	vmov	s15, r3
 800cb24:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cb28:	eddf 6a29 	vldr	s13, [pc, #164]	; 800cbd0 <__ieee754_rem_pio2f+0x270>
 800cb2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb34:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cb38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cb40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb48:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cb4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb50:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb58:	edcd 7a05 	vstr	s15, [sp, #20]
 800cb5c:	d11e      	bne.n	800cb9c <__ieee754_rem_pio2f+0x23c>
 800cb5e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb66:	bf14      	ite	ne
 800cb68:	2302      	movne	r3, #2
 800cb6a:	2301      	moveq	r3, #1
 800cb6c:	4919      	ldr	r1, [pc, #100]	; (800cbd4 <__ieee754_rem_pio2f+0x274>)
 800cb6e:	9101      	str	r1, [sp, #4]
 800cb70:	2102      	movs	r1, #2
 800cb72:	9100      	str	r1, [sp, #0]
 800cb74:	a803      	add	r0, sp, #12
 800cb76:	4621      	mov	r1, r4
 800cb78:	f000 f88e 	bl	800cc98 <__kernel_rem_pio2f>
 800cb7c:	2e00      	cmp	r6, #0
 800cb7e:	f6bf af1c 	bge.w	800c9ba <__ieee754_rem_pio2f+0x5a>
 800cb82:	edd4 7a00 	vldr	s15, [r4]
 800cb86:	eef1 7a67 	vneg.f32	s15, s15
 800cb8a:	edc4 7a00 	vstr	s15, [r4]
 800cb8e:	edd4 7a01 	vldr	s15, [r4, #4]
 800cb92:	eef1 7a67 	vneg.f32	s15, s15
 800cb96:	edc4 7a01 	vstr	s15, [r4, #4]
 800cb9a:	e779      	b.n	800ca90 <__ieee754_rem_pio2f+0x130>
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	e7e5      	b.n	800cb6c <__ieee754_rem_pio2f+0x20c>
 800cba0:	3f490fd8 	.word	0x3f490fd8
 800cba4:	4016cbe3 	.word	0x4016cbe3
 800cba8:	3fc90f80 	.word	0x3fc90f80
 800cbac:	3fc90fd0 	.word	0x3fc90fd0
 800cbb0:	37354443 	.word	0x37354443
 800cbb4:	37354400 	.word	0x37354400
 800cbb8:	2e85a308 	.word	0x2e85a308
 800cbbc:	43490f80 	.word	0x43490f80
 800cbc0:	3f22f984 	.word	0x3f22f984
 800cbc4:	0800f248 	.word	0x0800f248
 800cbc8:	2e85a300 	.word	0x2e85a300
 800cbcc:	248d3132 	.word	0x248d3132
 800cbd0:	43800000 	.word	0x43800000
 800cbd4:	0800f2c8 	.word	0x0800f2c8

0800cbd8 <__kernel_cosf>:
 800cbd8:	ee10 3a10 	vmov	r3, s0
 800cbdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbe0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cbe4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cbe8:	da05      	bge.n	800cbf6 <__kernel_cosf+0x1e>
 800cbea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cbee:	ee17 2a90 	vmov	r2, s15
 800cbf2:	2a00      	cmp	r2, #0
 800cbf4:	d03d      	beq.n	800cc72 <__kernel_cosf+0x9a>
 800cbf6:	ee60 5a00 	vmul.f32	s11, s0, s0
 800cbfa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cc78 <__kernel_cosf+0xa0>
 800cbfe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cc7c <__kernel_cosf+0xa4>
 800cc02:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800cc80 <__kernel_cosf+0xa8>
 800cc06:	4a1f      	ldr	r2, [pc, #124]	; (800cc84 <__kernel_cosf+0xac>)
 800cc08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800cc88 <__kernel_cosf+0xb0>
 800cc12:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cc16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cc8c <__kernel_cosf+0xb4>
 800cc1a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cc1e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800cc90 <__kernel_cosf+0xb8>
 800cc22:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cc26:	eeb0 7a66 	vmov.f32	s14, s13
 800cc2a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cc2e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cc32:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800cc36:	ee67 6a25 	vmul.f32	s13, s14, s11
 800cc3a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800cc3e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cc42:	dc04      	bgt.n	800cc4e <__kernel_cosf+0x76>
 800cc44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cc48:	ee36 0a47 	vsub.f32	s0, s12, s14
 800cc4c:	4770      	bx	lr
 800cc4e:	4a11      	ldr	r2, [pc, #68]	; (800cc94 <__kernel_cosf+0xbc>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	bfda      	itte	le
 800cc54:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800cc58:	ee06 3a90 	vmovle	s13, r3
 800cc5c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800cc60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cc64:	ee36 0a66 	vsub.f32	s0, s12, s13
 800cc68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc6c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc70:	4770      	bx	lr
 800cc72:	eeb0 0a46 	vmov.f32	s0, s12
 800cc76:	4770      	bx	lr
 800cc78:	ad47d74e 	.word	0xad47d74e
 800cc7c:	310f74f6 	.word	0x310f74f6
 800cc80:	3d2aaaab 	.word	0x3d2aaaab
 800cc84:	3e999999 	.word	0x3e999999
 800cc88:	b493f27c 	.word	0xb493f27c
 800cc8c:	37d00d01 	.word	0x37d00d01
 800cc90:	bab60b61 	.word	0xbab60b61
 800cc94:	3f480000 	.word	0x3f480000

0800cc98 <__kernel_rem_pio2f>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	ed2d 8b04 	vpush	{d8-d9}
 800cca0:	b0d7      	sub	sp, #348	; 0x15c
 800cca2:	4616      	mov	r6, r2
 800cca4:	4698      	mov	r8, r3
 800cca6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800cca8:	4bbb      	ldr	r3, [pc, #748]	; (800cf98 <__kernel_rem_pio2f+0x300>)
 800ccaa:	9001      	str	r0, [sp, #4]
 800ccac:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ccb0:	1d33      	adds	r3, r6, #4
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	f108 39ff 	add.w	r9, r8, #4294967295
 800ccb8:	db29      	blt.n	800cd0e <__kernel_rem_pio2f+0x76>
 800ccba:	1ef1      	subs	r1, r6, #3
 800ccbc:	bf48      	it	mi
 800ccbe:	1d31      	addmi	r1, r6, #4
 800ccc0:	10c9      	asrs	r1, r1, #3
 800ccc2:	1c4c      	adds	r4, r1, #1
 800ccc4:	00e3      	lsls	r3, r4, #3
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ccca:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800ccce:	eba1 0009 	sub.w	r0, r1, r9
 800ccd2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800ccd6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800ccda:	eb07 0c09 	add.w	ip, r7, r9
 800ccde:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800cce2:	2300      	movs	r3, #0
 800cce4:	4563      	cmp	r3, ip
 800cce6:	dd14      	ble.n	800cd12 <__kernel_rem_pio2f+0x7a>
 800cce8:	ab1a      	add	r3, sp, #104	; 0x68
 800ccea:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ccee:	46cc      	mov	ip, r9
 800ccf0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800ccf4:	f1c8 0b01 	rsb	fp, r8, #1
 800ccf8:	eb0b 020c 	add.w	r2, fp, ip
 800ccfc:	4297      	cmp	r7, r2
 800ccfe:	db27      	blt.n	800cd50 <__kernel_rem_pio2f+0xb8>
 800cd00:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cd04:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800cd08:	4618      	mov	r0, r3
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	e016      	b.n	800cd3c <__kernel_rem_pio2f+0xa4>
 800cd0e:	2100      	movs	r1, #0
 800cd10:	e7d7      	b.n	800ccc2 <__kernel_rem_pio2f+0x2a>
 800cd12:	42d8      	cmn	r0, r3
 800cd14:	bf5d      	ittte	pl
 800cd16:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800cd1a:	ee07 2a90 	vmovpl	s15, r2
 800cd1e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cd22:	eef0 7a47 	vmovmi.f32	s15, s14
 800cd26:	ecea 7a01 	vstmia	sl!, {s15}
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	e7da      	b.n	800cce4 <__kernel_rem_pio2f+0x4c>
 800cd2e:	ecfe 6a01 	vldmia	lr!, {s13}
 800cd32:	ed90 7a00 	vldr	s14, [r0]
 800cd36:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cd3a:	3201      	adds	r2, #1
 800cd3c:	454a      	cmp	r2, r9
 800cd3e:	f1a0 0004 	sub.w	r0, r0, #4
 800cd42:	ddf4      	ble.n	800cd2e <__kernel_rem_pio2f+0x96>
 800cd44:	ecea 7a01 	vstmia	sl!, {s15}
 800cd48:	3304      	adds	r3, #4
 800cd4a:	f10c 0c01 	add.w	ip, ip, #1
 800cd4e:	e7d3      	b.n	800ccf8 <__kernel_rem_pio2f+0x60>
 800cd50:	ab06      	add	r3, sp, #24
 800cd52:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800cd56:	9304      	str	r3, [sp, #16]
 800cd58:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800cd5a:	eddf 8a92 	vldr	s17, [pc, #584]	; 800cfa4 <__kernel_rem_pio2f+0x30c>
 800cd5e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800cfa0 <__kernel_rem_pio2f+0x308>
 800cd62:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd66:	9303      	str	r3, [sp, #12]
 800cd68:	46ba      	mov	sl, r7
 800cd6a:	ab56      	add	r3, sp, #344	; 0x158
 800cd6c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800cd70:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800cd74:	ab06      	add	r3, sp, #24
 800cd76:	4618      	mov	r0, r3
 800cd78:	4652      	mov	r2, sl
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	dc51      	bgt.n	800ce22 <__kernel_rem_pio2f+0x18a>
 800cd7e:	4620      	mov	r0, r4
 800cd80:	9305      	str	r3, [sp, #20]
 800cd82:	f000 faa5 	bl	800d2d0 <scalbnf>
 800cd86:	eeb0 8a40 	vmov.f32	s16, s0
 800cd8a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800cd8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cd92:	f000 fa5b 	bl	800d24c <floorf>
 800cd96:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cd9a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cd9e:	2c00      	cmp	r4, #0
 800cda0:	9b05      	ldr	r3, [sp, #20]
 800cda2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cda6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800cdaa:	edcd 7a00 	vstr	s15, [sp]
 800cdae:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cdb2:	dd4b      	ble.n	800ce4c <__kernel_rem_pio2f+0x1b4>
 800cdb4:	f10a 3cff 	add.w	ip, sl, #4294967295
 800cdb8:	aa06      	add	r2, sp, #24
 800cdba:	f1c4 0e08 	rsb	lr, r4, #8
 800cdbe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800cdc2:	ee17 1a90 	vmov	r1, s15
 800cdc6:	fa42 f00e 	asr.w	r0, r2, lr
 800cdca:	4401      	add	r1, r0
 800cdcc:	9100      	str	r1, [sp, #0]
 800cdce:	fa00 f00e 	lsl.w	r0, r0, lr
 800cdd2:	a906      	add	r1, sp, #24
 800cdd4:	1a12      	subs	r2, r2, r0
 800cdd6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800cdda:	f1c4 0007 	rsb	r0, r4, #7
 800cdde:	fa42 fb00 	asr.w	fp, r2, r0
 800cde2:	f1bb 0f00 	cmp.w	fp, #0
 800cde6:	dd43      	ble.n	800ce70 <__kernel_rem_pio2f+0x1d8>
 800cde8:	9a00      	ldr	r2, [sp, #0]
 800cdea:	f04f 0e00 	mov.w	lr, #0
 800cdee:	3201      	adds	r2, #1
 800cdf0:	9200      	str	r2, [sp, #0]
 800cdf2:	4670      	mov	r0, lr
 800cdf4:	45f2      	cmp	sl, lr
 800cdf6:	dc6c      	bgt.n	800ced2 <__kernel_rem_pio2f+0x23a>
 800cdf8:	2c00      	cmp	r4, #0
 800cdfa:	dd04      	ble.n	800ce06 <__kernel_rem_pio2f+0x16e>
 800cdfc:	2c01      	cmp	r4, #1
 800cdfe:	d079      	beq.n	800cef4 <__kernel_rem_pio2f+0x25c>
 800ce00:	2c02      	cmp	r4, #2
 800ce02:	f000 8082 	beq.w	800cf0a <__kernel_rem_pio2f+0x272>
 800ce06:	f1bb 0f02 	cmp.w	fp, #2
 800ce0a:	d131      	bne.n	800ce70 <__kernel_rem_pio2f+0x1d8>
 800ce0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce10:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ce14:	b360      	cbz	r0, 800ce70 <__kernel_rem_pio2f+0x1d8>
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 fa5a 	bl	800d2d0 <scalbnf>
 800ce1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ce20:	e026      	b.n	800ce70 <__kernel_rem_pio2f+0x1d8>
 800ce22:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ce26:	3a01      	subs	r2, #1
 800ce28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce2c:	a942      	add	r1, sp, #264	; 0x108
 800ce2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce32:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ce36:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ce3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ce3e:	eca0 0a01 	vstmia	r0!, {s0}
 800ce42:	ed9c 0a00 	vldr	s0, [ip]
 800ce46:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ce4a:	e796      	b.n	800cd7a <__kernel_rem_pio2f+0xe2>
 800ce4c:	d107      	bne.n	800ce5e <__kernel_rem_pio2f+0x1c6>
 800ce4e:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ce52:	a906      	add	r1, sp, #24
 800ce54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ce58:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800ce5c:	e7c1      	b.n	800cde2 <__kernel_rem_pio2f+0x14a>
 800ce5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ce62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ce66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce6a:	da2f      	bge.n	800cecc <__kernel_rem_pio2f+0x234>
 800ce6c:	f04f 0b00 	mov.w	fp, #0
 800ce70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ce74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce78:	f040 8098 	bne.w	800cfac <__kernel_rem_pio2f+0x314>
 800ce7c:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce80:	469c      	mov	ip, r3
 800ce82:	2200      	movs	r2, #0
 800ce84:	45bc      	cmp	ip, r7
 800ce86:	da48      	bge.n	800cf1a <__kernel_rem_pio2f+0x282>
 800ce88:	2a00      	cmp	r2, #0
 800ce8a:	d05f      	beq.n	800cf4c <__kernel_rem_pio2f+0x2b4>
 800ce8c:	aa06      	add	r2, sp, #24
 800ce8e:	3c08      	subs	r4, #8
 800ce90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ce94:	2900      	cmp	r1, #0
 800ce96:	d07d      	beq.n	800cf94 <__kernel_rem_pio2f+0x2fc>
 800ce98:	4620      	mov	r0, r4
 800ce9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	f000 fa16 	bl	800d2d0 <scalbnf>
 800cea4:	9b01      	ldr	r3, [sp, #4]
 800cea6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800cfa4 <__kernel_rem_pio2f+0x30c>
 800ceaa:	4619      	mov	r1, r3
 800ceac:	2900      	cmp	r1, #0
 800ceae:	f280 80af 	bge.w	800d010 <__kernel_rem_pio2f+0x378>
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	2400      	movs	r4, #0
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	f2c0 80d0 	blt.w	800d05c <__kernel_rem_pio2f+0x3c4>
 800cebc:	a942      	add	r1, sp, #264	; 0x108
 800cebe:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800cec2:	4a36      	ldr	r2, [pc, #216]	; (800cf9c <__kernel_rem_pio2f+0x304>)
 800cec4:	eddf 7a38 	vldr	s15, [pc, #224]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800cec8:	2100      	movs	r1, #0
 800ceca:	e0bb      	b.n	800d044 <__kernel_rem_pio2f+0x3ac>
 800cecc:	f04f 0b02 	mov.w	fp, #2
 800ced0:	e78a      	b.n	800cde8 <__kernel_rem_pio2f+0x150>
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	b948      	cbnz	r0, 800ceea <__kernel_rem_pio2f+0x252>
 800ced6:	b11a      	cbz	r2, 800cee0 <__kernel_rem_pio2f+0x248>
 800ced8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	2201      	movs	r2, #1
 800cee0:	f10e 0e01 	add.w	lr, lr, #1
 800cee4:	3304      	adds	r3, #4
 800cee6:	4610      	mov	r0, r2
 800cee8:	e784      	b.n	800cdf4 <__kernel_rem_pio2f+0x15c>
 800ceea:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800ceee:	601a      	str	r2, [r3, #0]
 800cef0:	4602      	mov	r2, r0
 800cef2:	e7f5      	b.n	800cee0 <__kernel_rem_pio2f+0x248>
 800cef4:	f10a 3cff 	add.w	ip, sl, #4294967295
 800cef8:	ab06      	add	r3, sp, #24
 800cefa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf02:	aa06      	add	r2, sp, #24
 800cf04:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800cf08:	e77d      	b.n	800ce06 <__kernel_rem_pio2f+0x16e>
 800cf0a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800cf0e:	ab06      	add	r3, sp, #24
 800cf10:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cf14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf18:	e7f3      	b.n	800cf02 <__kernel_rem_pio2f+0x26a>
 800cf1a:	a906      	add	r1, sp, #24
 800cf1c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800cf20:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf24:	4302      	orrs	r2, r0
 800cf26:	e7ad      	b.n	800ce84 <__kernel_rem_pio2f+0x1ec>
 800cf28:	3001      	adds	r0, #1
 800cf2a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cf2e:	2a00      	cmp	r2, #0
 800cf30:	d0fa      	beq.n	800cf28 <__kernel_rem_pio2f+0x290>
 800cf32:	a91a      	add	r1, sp, #104	; 0x68
 800cf34:	eb0a 0208 	add.w	r2, sl, r8
 800cf38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cf3c:	f10a 0301 	add.w	r3, sl, #1
 800cf40:	eb0a 0100 	add.w	r1, sl, r0
 800cf44:	4299      	cmp	r1, r3
 800cf46:	da04      	bge.n	800cf52 <__kernel_rem_pio2f+0x2ba>
 800cf48:	468a      	mov	sl, r1
 800cf4a:	e70e      	b.n	800cd6a <__kernel_rem_pio2f+0xd2>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7eb      	b.n	800cf2a <__kernel_rem_pio2f+0x292>
 800cf52:	9803      	ldr	r0, [sp, #12]
 800cf54:	f8dd c004 	ldr.w	ip, [sp, #4]
 800cf58:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cf5c:	9000      	str	r0, [sp, #0]
 800cf5e:	ee07 0a90 	vmov	s15, r0
 800cf62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf66:	2000      	movs	r0, #0
 800cf68:	ece2 7a01 	vstmia	r2!, {s15}
 800cf6c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800cf70:	4696      	mov	lr, r2
 800cf72:	4548      	cmp	r0, r9
 800cf74:	dd06      	ble.n	800cf84 <__kernel_rem_pio2f+0x2ec>
 800cf76:	a842      	add	r0, sp, #264	; 0x108
 800cf78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cf7c:	edc0 7a00 	vstr	s15, [r0]
 800cf80:	3301      	adds	r3, #1
 800cf82:	e7df      	b.n	800cf44 <__kernel_rem_pio2f+0x2ac>
 800cf84:	ecfc 6a01 	vldmia	ip!, {s13}
 800cf88:	ed3e 7a01 	vldmdb	lr!, {s14}
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cf92:	e7ee      	b.n	800cf72 <__kernel_rem_pio2f+0x2da>
 800cf94:	3b01      	subs	r3, #1
 800cf96:	e779      	b.n	800ce8c <__kernel_rem_pio2f+0x1f4>
 800cf98:	0800f60c 	.word	0x0800f60c
 800cf9c:	0800f5e0 	.word	0x0800f5e0
 800cfa0:	43800000 	.word	0x43800000
 800cfa4:	3b800000 	.word	0x3b800000
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	eeb0 0a48 	vmov.f32	s0, s16
 800cfb2:	1b98      	subs	r0, r3, r6
 800cfb4:	f000 f98c 	bl	800d2d0 <scalbnf>
 800cfb8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800cfa0 <__kernel_rem_pio2f+0x308>
 800cfbc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc4:	db1b      	blt.n	800cffe <__kernel_rem_pio2f+0x366>
 800cfc6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cfa4 <__kernel_rem_pio2f+0x30c>
 800cfca:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cfce:	aa06      	add	r2, sp, #24
 800cfd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfd4:	a906      	add	r1, sp, #24
 800cfd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfda:	3408      	adds	r4, #8
 800cfdc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cfe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfe4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cfe8:	ee10 3a10 	vmov	r3, s0
 800cfec:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800cff0:	ee17 2a90 	vmov	r2, s15
 800cff4:	f10a 0301 	add.w	r3, sl, #1
 800cff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cffc:	e74c      	b.n	800ce98 <__kernel_rem_pio2f+0x200>
 800cffe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d002:	aa06      	add	r2, sp, #24
 800d004:	ee10 3a10 	vmov	r3, s0
 800d008:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800d00c:	4653      	mov	r3, sl
 800d00e:	e743      	b.n	800ce98 <__kernel_rem_pio2f+0x200>
 800d010:	aa42      	add	r2, sp, #264	; 0x108
 800d012:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800d016:	aa06      	add	r2, sp, #24
 800d018:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d01c:	9201      	str	r2, [sp, #4]
 800d01e:	ee07 2a90 	vmov	s15, r2
 800d022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d026:	3901      	subs	r1, #1
 800d028:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d02c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d030:	edc0 7a00 	vstr	s15, [r0]
 800d034:	e73a      	b.n	800ceac <__kernel_rem_pio2f+0x214>
 800d036:	ecf2 6a01 	vldmia	r2!, {s13}
 800d03a:	ecb6 7a01 	vldmia	r6!, {s14}
 800d03e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d042:	3101      	adds	r1, #1
 800d044:	42b9      	cmp	r1, r7
 800d046:	dc01      	bgt.n	800d04c <__kernel_rem_pio2f+0x3b4>
 800d048:	428c      	cmp	r4, r1
 800d04a:	daf4      	bge.n	800d036 <__kernel_rem_pio2f+0x39e>
 800d04c:	aa56      	add	r2, sp, #344	; 0x158
 800d04e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800d052:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800d056:	3801      	subs	r0, #1
 800d058:	3401      	adds	r4, #1
 800d05a:	e72c      	b.n	800ceb6 <__kernel_rem_pio2f+0x21e>
 800d05c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d05e:	2a02      	cmp	r2, #2
 800d060:	dc0a      	bgt.n	800d078 <__kernel_rem_pio2f+0x3e0>
 800d062:	2a00      	cmp	r2, #0
 800d064:	dc61      	bgt.n	800d12a <__kernel_rem_pio2f+0x492>
 800d066:	d03c      	beq.n	800d0e2 <__kernel_rem_pio2f+0x44a>
 800d068:	9b00      	ldr	r3, [sp, #0]
 800d06a:	f003 0007 	and.w	r0, r3, #7
 800d06e:	b057      	add	sp, #348	; 0x15c
 800d070:	ecbd 8b04 	vpop	{d8-d9}
 800d074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d078:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d07a:	2a03      	cmp	r2, #3
 800d07c:	d1f4      	bne.n	800d068 <__kernel_rem_pio2f+0x3d0>
 800d07e:	aa2e      	add	r2, sp, #184	; 0xb8
 800d080:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d084:	4608      	mov	r0, r1
 800d086:	461c      	mov	r4, r3
 800d088:	2c00      	cmp	r4, #0
 800d08a:	f1a0 0004 	sub.w	r0, r0, #4
 800d08e:	dc59      	bgt.n	800d144 <__kernel_rem_pio2f+0x4ac>
 800d090:	4618      	mov	r0, r3
 800d092:	2801      	cmp	r0, #1
 800d094:	f1a1 0104 	sub.w	r1, r1, #4
 800d098:	dc64      	bgt.n	800d164 <__kernel_rem_pio2f+0x4cc>
 800d09a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	dc70      	bgt.n	800d184 <__kernel_rem_pio2f+0x4ec>
 800d0a2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800d0a6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800d0aa:	f1bb 0f00 	cmp.w	fp, #0
 800d0ae:	d172      	bne.n	800d196 <__kernel_rem_pio2f+0x4fe>
 800d0b0:	edc5 6a00 	vstr	s13, [r5]
 800d0b4:	ed85 7a01 	vstr	s14, [r5, #4]
 800d0b8:	edc5 7a02 	vstr	s15, [r5, #8]
 800d0bc:	e7d4      	b.n	800d068 <__kernel_rem_pio2f+0x3d0>
 800d0be:	aa2e      	add	r2, sp, #184	; 0xb8
 800d0c0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d0c4:	ed91 7a00 	vldr	s14, [r1]
 800d0c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	daf5      	bge.n	800d0be <__kernel_rem_pio2f+0x426>
 800d0d2:	f1bb 0f00 	cmp.w	fp, #0
 800d0d6:	d001      	beq.n	800d0dc <__kernel_rem_pio2f+0x444>
 800d0d8:	eef1 7a67 	vneg.f32	s15, s15
 800d0dc:	edc5 7a00 	vstr	s15, [r5]
 800d0e0:	e7c2      	b.n	800d068 <__kernel_rem_pio2f+0x3d0>
 800d0e2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800d0e6:	e7f2      	b.n	800d0ce <__kernel_rem_pio2f+0x436>
 800d0e8:	aa2e      	add	r2, sp, #184	; 0xb8
 800d0ea:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800d0ee:	edd0 7a00 	vldr	s15, [r0]
 800d0f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0f6:	3901      	subs	r1, #1
 800d0f8:	2900      	cmp	r1, #0
 800d0fa:	daf5      	bge.n	800d0e8 <__kernel_rem_pio2f+0x450>
 800d0fc:	f1bb 0f00 	cmp.w	fp, #0
 800d100:	d017      	beq.n	800d132 <__kernel_rem_pio2f+0x49a>
 800d102:	eef1 7a47 	vneg.f32	s15, s14
 800d106:	edc5 7a00 	vstr	s15, [r5]
 800d10a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d10e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d112:	a82f      	add	r0, sp, #188	; 0xbc
 800d114:	2101      	movs	r1, #1
 800d116:	428b      	cmp	r3, r1
 800d118:	da0e      	bge.n	800d138 <__kernel_rem_pio2f+0x4a0>
 800d11a:	f1bb 0f00 	cmp.w	fp, #0
 800d11e:	d001      	beq.n	800d124 <__kernel_rem_pio2f+0x48c>
 800d120:	eef1 7a67 	vneg.f32	s15, s15
 800d124:	edc5 7a01 	vstr	s15, [r5, #4]
 800d128:	e79e      	b.n	800d068 <__kernel_rem_pio2f+0x3d0>
 800d12a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800cfa8 <__kernel_rem_pio2f+0x310>
 800d12e:	4619      	mov	r1, r3
 800d130:	e7e2      	b.n	800d0f8 <__kernel_rem_pio2f+0x460>
 800d132:	eef0 7a47 	vmov.f32	s15, s14
 800d136:	e7e6      	b.n	800d106 <__kernel_rem_pio2f+0x46e>
 800d138:	ecb0 7a01 	vldmia	r0!, {s14}
 800d13c:	3101      	adds	r1, #1
 800d13e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d142:	e7e8      	b.n	800d116 <__kernel_rem_pio2f+0x47e>
 800d144:	edd0 7a00 	vldr	s15, [r0]
 800d148:	edd0 6a01 	vldr	s13, [r0, #4]
 800d14c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d150:	3c01      	subs	r4, #1
 800d152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d156:	ed80 7a00 	vstr	s14, [r0]
 800d15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d15e:	edc0 7a01 	vstr	s15, [r0, #4]
 800d162:	e791      	b.n	800d088 <__kernel_rem_pio2f+0x3f0>
 800d164:	edd1 7a00 	vldr	s15, [r1]
 800d168:	edd1 6a01 	vldr	s13, [r1, #4]
 800d16c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d170:	3801      	subs	r0, #1
 800d172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d176:	ed81 7a00 	vstr	s14, [r1]
 800d17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17e:	edc1 7a01 	vstr	s15, [r1, #4]
 800d182:	e786      	b.n	800d092 <__kernel_rem_pio2f+0x3fa>
 800d184:	aa2e      	add	r2, sp, #184	; 0xb8
 800d186:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d18a:	ed91 7a00 	vldr	s14, [r1]
 800d18e:	3b01      	subs	r3, #1
 800d190:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d194:	e783      	b.n	800d09e <__kernel_rem_pio2f+0x406>
 800d196:	eef1 6a66 	vneg.f32	s13, s13
 800d19a:	eeb1 7a47 	vneg.f32	s14, s14
 800d19e:	edc5 6a00 	vstr	s13, [r5]
 800d1a2:	ed85 7a01 	vstr	s14, [r5, #4]
 800d1a6:	eef1 7a67 	vneg.f32	s15, s15
 800d1aa:	e785      	b.n	800d0b8 <__kernel_rem_pio2f+0x420>

0800d1ac <__kernel_sinf>:
 800d1ac:	ee10 3a10 	vmov	r3, s0
 800d1b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d1b8:	da04      	bge.n	800d1c4 <__kernel_sinf+0x18>
 800d1ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d1be:	ee17 3a90 	vmov	r3, s15
 800d1c2:	b35b      	cbz	r3, 800d21c <__kernel_sinf+0x70>
 800d1c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d1c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d220 <__kernel_sinf+0x74>
 800d1cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d224 <__kernel_sinf+0x78>
 800d1d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d1d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d228 <__kernel_sinf+0x7c>
 800d1d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d1dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d22c <__kernel_sinf+0x80>
 800d1e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d1e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d230 <__kernel_sinf+0x84>
 800d1e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d1ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d1f0:	b930      	cbnz	r0, 800d200 <__kernel_sinf+0x54>
 800d1f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d234 <__kernel_sinf+0x88>
 800d1f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d1fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d1fe:	4770      	bx	lr
 800d200:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d204:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d208:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d20c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d210:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d238 <__kernel_sinf+0x8c>
 800d214:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d218:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	2f2ec9d3 	.word	0x2f2ec9d3
 800d224:	b2d72f34 	.word	0xb2d72f34
 800d228:	3638ef1b 	.word	0x3638ef1b
 800d22c:	b9500d01 	.word	0xb9500d01
 800d230:	3c088889 	.word	0x3c088889
 800d234:	be2aaaab 	.word	0xbe2aaaab
 800d238:	3e2aaaab 	.word	0x3e2aaaab

0800d23c <fabsf>:
 800d23c:	ee10 3a10 	vmov	r3, s0
 800d240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d244:	ee00 3a10 	vmov	s0, r3
 800d248:	4770      	bx	lr
	...

0800d24c <floorf>:
 800d24c:	ee10 3a10 	vmov	r3, s0
 800d250:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d254:	3a7f      	subs	r2, #127	; 0x7f
 800d256:	2a16      	cmp	r2, #22
 800d258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d25c:	dc2a      	bgt.n	800d2b4 <floorf+0x68>
 800d25e:	2a00      	cmp	r2, #0
 800d260:	da11      	bge.n	800d286 <floorf+0x3a>
 800d262:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d2c4 <floorf+0x78>
 800d266:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d26a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d272:	dd05      	ble.n	800d280 <floorf+0x34>
 800d274:	2b00      	cmp	r3, #0
 800d276:	da23      	bge.n	800d2c0 <floorf+0x74>
 800d278:	4a13      	ldr	r2, [pc, #76]	; (800d2c8 <floorf+0x7c>)
 800d27a:	2900      	cmp	r1, #0
 800d27c:	bf18      	it	ne
 800d27e:	4613      	movne	r3, r2
 800d280:	ee00 3a10 	vmov	s0, r3
 800d284:	4770      	bx	lr
 800d286:	4911      	ldr	r1, [pc, #68]	; (800d2cc <floorf+0x80>)
 800d288:	4111      	asrs	r1, r2
 800d28a:	420b      	tst	r3, r1
 800d28c:	d0fa      	beq.n	800d284 <floorf+0x38>
 800d28e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d2c4 <floorf+0x78>
 800d292:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d296:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29e:	ddef      	ble.n	800d280 <floorf+0x34>
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	bfbe      	ittt	lt
 800d2a4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d2a8:	fa40 f202 	asrlt.w	r2, r0, r2
 800d2ac:	189b      	addlt	r3, r3, r2
 800d2ae:	ea23 0301 	bic.w	r3, r3, r1
 800d2b2:	e7e5      	b.n	800d280 <floorf+0x34>
 800d2b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d2b8:	d3e4      	bcc.n	800d284 <floorf+0x38>
 800d2ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d2be:	4770      	bx	lr
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e7dd      	b.n	800d280 <floorf+0x34>
 800d2c4:	7149f2ca 	.word	0x7149f2ca
 800d2c8:	bf800000 	.word	0xbf800000
 800d2cc:	007fffff 	.word	0x007fffff

0800d2d0 <scalbnf>:
 800d2d0:	ee10 3a10 	vmov	r3, s0
 800d2d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d2d8:	d025      	beq.n	800d326 <scalbnf+0x56>
 800d2da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d2de:	d302      	bcc.n	800d2e6 <scalbnf+0x16>
 800d2e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d2e4:	4770      	bx	lr
 800d2e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d2ea:	d122      	bne.n	800d332 <scalbnf+0x62>
 800d2ec:	4b2a      	ldr	r3, [pc, #168]	; (800d398 <scalbnf+0xc8>)
 800d2ee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d39c <scalbnf+0xcc>
 800d2f2:	4298      	cmp	r0, r3
 800d2f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d2f8:	db16      	blt.n	800d328 <scalbnf+0x58>
 800d2fa:	ee10 3a10 	vmov	r3, s0
 800d2fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d302:	3a19      	subs	r2, #25
 800d304:	4402      	add	r2, r0
 800d306:	2afe      	cmp	r2, #254	; 0xfe
 800d308:	dd15      	ble.n	800d336 <scalbnf+0x66>
 800d30a:	ee10 3a10 	vmov	r3, s0
 800d30e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d3a0 <scalbnf+0xd0>
 800d312:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d3a4 <scalbnf+0xd4>
 800d316:	2b00      	cmp	r3, #0
 800d318:	eeb0 7a67 	vmov.f32	s14, s15
 800d31c:	bfb8      	it	lt
 800d31e:	eef0 7a66 	vmovlt.f32	s15, s13
 800d322:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d326:	4770      	bx	lr
 800d328:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d3a8 <scalbnf+0xd8>
 800d32c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d330:	4770      	bx	lr
 800d332:	0dd2      	lsrs	r2, r2, #23
 800d334:	e7e6      	b.n	800d304 <scalbnf+0x34>
 800d336:	2a00      	cmp	r2, #0
 800d338:	dd06      	ble.n	800d348 <scalbnf+0x78>
 800d33a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d33e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d342:	ee00 3a10 	vmov	s0, r3
 800d346:	4770      	bx	lr
 800d348:	f112 0f16 	cmn.w	r2, #22
 800d34c:	da1a      	bge.n	800d384 <scalbnf+0xb4>
 800d34e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d352:	4298      	cmp	r0, r3
 800d354:	ee10 3a10 	vmov	r3, s0
 800d358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d35c:	dd0a      	ble.n	800d374 <scalbnf+0xa4>
 800d35e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d3a0 <scalbnf+0xd0>
 800d362:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d3a4 <scalbnf+0xd4>
 800d366:	eef0 7a40 	vmov.f32	s15, s0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bf18      	it	ne
 800d36e:	eeb0 0a47 	vmovne.f32	s0, s14
 800d372:	e7db      	b.n	800d32c <scalbnf+0x5c>
 800d374:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d3a8 <scalbnf+0xd8>
 800d378:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d3ac <scalbnf+0xdc>
 800d37c:	eef0 7a40 	vmov.f32	s15, s0
 800d380:	2b00      	cmp	r3, #0
 800d382:	e7f3      	b.n	800d36c <scalbnf+0x9c>
 800d384:	3219      	adds	r2, #25
 800d386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d38a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d38e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d3b0 <scalbnf+0xe0>
 800d392:	ee07 3a10 	vmov	s14, r3
 800d396:	e7c4      	b.n	800d322 <scalbnf+0x52>
 800d398:	ffff3cb0 	.word	0xffff3cb0
 800d39c:	4c000000 	.word	0x4c000000
 800d3a0:	7149f2ca 	.word	0x7149f2ca
 800d3a4:	f149f2ca 	.word	0xf149f2ca
 800d3a8:	0da24260 	.word	0x0da24260
 800d3ac:	8da24260 	.word	0x8da24260
 800d3b0:	33000000 	.word	0x33000000

0800d3b4 <_init>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr

0800d3c0 <_fini>:
 800d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c2:	bf00      	nop
 800d3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c6:	bc08      	pop	{r3}
 800d3c8:	469e      	mov	lr, r3
 800d3ca:	4770      	bx	lr
