
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce60  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e78  0800d040  0800d040  0001d040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eeb8  0800eeb8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eeb8  0800eeb8  0001eeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eec0  0800eec0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eec0  0800eec0  0001eec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eec4  0800eec4  0001eec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800eec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200001e4  0800f0ac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800f0ac  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8b8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003549  00000000  00000000  0003aacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0003e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe71  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001534d  00000000  00000000  0005fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc71b  00000000  00000000  00075026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d4  00000000  00000000  00131794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d028 	.word	0x0800d028

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800d028 	.word	0x0800d028

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_ldivmod>:
 8000cf8:	b97b      	cbnz	r3, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfa:	b972      	cbnz	r2, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bfbe      	ittt	lt
 8000d00:	2000      	movlt	r0, #0
 8000d02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d06:	e006      	blt.n	8000d16 <__aeabi_ldivmod+0x1e>
 8000d08:	bf08      	it	eq
 8000d0a:	2800      	cmpeq	r0, #0
 8000d0c:	bf1c      	itt	ne
 8000d0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d12:	f04f 30ff 	movne.w	r0, #4294967295
 8000d16:	f000 b9ef 	b.w	80010f8 <__aeabi_idiv0>
 8000d1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d22:	2900      	cmp	r1, #0
 8000d24:	db09      	blt.n	8000d3a <__aeabi_ldivmod+0x42>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db1a      	blt.n	8000d60 <__aeabi_ldivmod+0x68>
 8000d2a:	f000 f883 	bl	8000e34 <__udivmoddi4>
 8000d2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d36:	b004      	add	sp, #16
 8000d38:	4770      	bx	lr
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db1b      	blt.n	8000d7c <__aeabi_ldivmod+0x84>
 8000d44:	f000 f876 	bl	8000e34 <__udivmoddi4>
 8000d48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d50:	b004      	add	sp, #16
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	4252      	negs	r2, r2
 8000d5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d5e:	4770      	bx	lr
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	f000 f865 	bl	8000e34 <__udivmoddi4>
 8000d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d72:	b004      	add	sp, #16
 8000d74:	4240      	negs	r0, r0
 8000d76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7a:	4770      	bx	lr
 8000d7c:	4252      	negs	r2, r2
 8000d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d82:	f000 f857 	bl	8000e34 <__udivmoddi4>
 8000d86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d8e:	b004      	add	sp, #16
 8000d90:	4252      	negs	r2, r2
 8000d92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_uldivmod>:
 8000d98:	b953      	cbnz	r3, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9a:	b94a      	cbnz	r2, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	bf08      	it	eq
 8000da0:	2800      	cmpeq	r0, #0
 8000da2:	bf1c      	itt	ne
 8000da4:	f04f 31ff 	movne.w	r1, #4294967295
 8000da8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dac:	f000 b9a4 	b.w	80010f8 <__aeabi_idiv0>
 8000db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db8:	f000 f83c 	bl	8000e34 <__udivmoddi4>
 8000dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc4:	b004      	add	sp, #16
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_d2lz>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	460d      	mov	r5, r1
 8000dd2:	f7ff febb 	bl	8000b4c <__aeabi_dcmplt>
 8000dd6:	b928      	cbnz	r0, 8000de4 <__aeabi_d2lz+0x1c>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	4629      	mov	r1, r5
 8000ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000de0:	f000 b80a 	b.w	8000df8 <__aeabi_d2ulz>
 8000de4:	4620      	mov	r0, r4
 8000de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dea:	f000 f805 	bl	8000df8 <__aeabi_d2ulz>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
 8000df6:	bf00      	nop

08000df8 <__aeabi_d2ulz>:
 8000df8:	b5d0      	push	{r4, r6, r7, lr}
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__aeabi_d2ulz+0x34>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4606      	mov	r6, r0
 8000e00:	460f      	mov	r7, r1
 8000e02:	f7ff fc31 	bl	8000668 <__aeabi_dmul>
 8000e06:	f7ff ff07 	bl	8000c18 <__aeabi_d2uiz>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	f7ff fbb2 	bl	8000574 <__aeabi_ui2d>
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <__aeabi_d2ulz+0x38>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f7ff fc28 	bl	8000668 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	4639      	mov	r1, r7
 8000e20:	f7ff fa6a 	bl	80002f8 <__aeabi_dsub>
 8000e24:	f7ff fef8 	bl	8000c18 <__aeabi_d2uiz>
 8000e28:	4621      	mov	r1, r4
 8000e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e2c:	3df00000 	.word	0x3df00000
 8000e30:	41f00000 	.word	0x41f00000

08000e34 <__udivmoddi4>:
 8000e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	9d08      	ldr	r5, [sp, #32]
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8083 	bne.w	8000f4a <__udivmoddi4+0x116>
 8000e44:	428a      	cmp	r2, r1
 8000e46:	4617      	mov	r7, r2
 8000e48:	d947      	bls.n	8000eda <__udivmoddi4+0xa6>
 8000e4a:	fab2 f282 	clz	r2, r2
 8000e4e:	b142      	cbz	r2, 8000e62 <__udivmoddi4+0x2e>
 8000e50:	f1c2 0020 	rsb	r0, r2, #32
 8000e54:	fa24 f000 	lsr.w	r0, r4, r0
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	4097      	lsls	r7, r2
 8000e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e60:	4094      	lsls	r4, r2
 8000e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e66:	0c23      	lsrs	r3, r4, #16
 8000e68:	fbbc f6f8 	udiv	r6, ip, r8
 8000e6c:	fa1f fe87 	uxth.w	lr, r7
 8000e70:	fb08 c116 	mls	r1, r8, r6, ip
 8000e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e78:	fb06 f10e 	mul.w	r1, r6, lr
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x60>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e86:	f080 8119 	bcs.w	80010bc <__udivmoddi4+0x288>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 8116 	bls.w	80010bc <__udivmoddi4+0x288>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x8c>
 8000eac:	193c      	adds	r4, r7, r4
 8000eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb2:	f080 8105 	bcs.w	80010c0 <__udivmoddi4+0x28c>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	f240 8102 	bls.w	80010c0 <__udivmoddi4+0x28c>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	2600      	movs	r6, #0
 8000eca:	b11d      	cbz	r5, 8000ed4 <__udivmoddi4+0xa0>
 8000ecc:	40d4      	lsrs	r4, r2
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	b902      	cbnz	r2, 8000ede <__udivmoddi4+0xaa>
 8000edc:	deff      	udf	#255	; 0xff
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d150      	bne.n	8000f88 <__udivmoddi4+0x154>
 8000ee6:	1bcb      	subs	r3, r1, r7
 8000ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eec:	fa1f f887 	uxth.w	r8, r7
 8000ef0:	2601      	movs	r6, #1
 8000ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ef6:	0c21      	lsrs	r1, r4, #16
 8000ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb08 f30c 	mul.w	r3, r8, ip
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0xe4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0xe2>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	f200 80e9 	bhi.w	80010e8 <__udivmoddi4+0x2b4>
 8000f16:	4684      	mov	ip, r0
 8000f18:	1ac9      	subs	r1, r1, r3
 8000f1a:	b2a3      	uxth	r3, r4
 8000f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f28:	fb08 f800 	mul.w	r8, r8, r0
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d907      	bls.n	8000f40 <__udivmoddi4+0x10c>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x10a>
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	f200 80d9 	bhi.w	80010f0 <__udivmoddi4+0x2bc>
 8000f3e:	4618      	mov	r0, r3
 8000f40:	eba4 0408 	sub.w	r4, r4, r8
 8000f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f48:	e7bf      	b.n	8000eca <__udivmoddi4+0x96>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d909      	bls.n	8000f62 <__udivmoddi4+0x12e>
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	f000 80b1 	beq.w	80010b6 <__udivmoddi4+0x282>
 8000f54:	2600      	movs	r6, #0
 8000f56:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	4631      	mov	r1, r6
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	fab3 f683 	clz	r6, r3
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d14a      	bne.n	8001000 <__udivmoddi4+0x1cc>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d302      	bcc.n	8000f74 <__udivmoddi4+0x140>
 8000f6e:	4282      	cmp	r2, r0
 8000f70:	f200 80b8 	bhi.w	80010e4 <__udivmoddi4+0x2b0>
 8000f74:	1a84      	subs	r4, r0, r2
 8000f76:	eb61 0103 	sbc.w	r1, r1, r3
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	468c      	mov	ip, r1
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d0a8      	beq.n	8000ed4 <__udivmoddi4+0xa0>
 8000f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f86:	e7a5      	b.n	8000ed4 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f90:	4097      	lsls	r7, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	40d9      	lsrs	r1, r3
 8000f9c:	4330      	orrs	r0, r6
 8000f9e:	0c03      	lsrs	r3, r0, #16
 8000fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fa4:	fa1f f887 	uxth.w	r8, r7
 8000fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb0:	fb06 f108 	mul.w	r1, r6, r8
 8000fb4:	4299      	cmp	r1, r3
 8000fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000fba:	d909      	bls.n	8000fd0 <__udivmoddi4+0x19c>
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fc2:	f080 808d 	bcs.w	80010e0 <__udivmoddi4+0x2ac>
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	f240 808a 	bls.w	80010e0 <__udivmoddi4+0x2ac>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	443b      	add	r3, r7
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b281      	uxth	r1, r0
 8000fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe0:	fb00 f308 	mul.w	r3, r0, r8
 8000fe4:	428b      	cmp	r3, r1
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0x1c4>
 8000fe8:	1879      	adds	r1, r7, r1
 8000fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fee:	d273      	bcs.n	80010d8 <__udivmoddi4+0x2a4>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d971      	bls.n	80010d8 <__udivmoddi4+0x2a4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	4439      	add	r1, r7
 8000ff8:	1acb      	subs	r3, r1, r3
 8000ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ffe:	e778      	b.n	8000ef2 <__udivmoddi4+0xbe>
 8001000:	f1c6 0c20 	rsb	ip, r6, #32
 8001004:	fa03 f406 	lsl.w	r4, r3, r6
 8001008:	fa22 f30c 	lsr.w	r3, r2, ip
 800100c:	431c      	orrs	r4, r3
 800100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001012:	fa01 f306 	lsl.w	r3, r1, r6
 8001016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800101a:	fa21 f10c 	lsr.w	r1, r1, ip
 800101e:	431f      	orrs	r7, r3
 8001020:	0c3b      	lsrs	r3, r7, #16
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fa1f f884 	uxth.w	r8, r4
 800102a:	fb0e 1119 	mls	r1, lr, r9, r1
 800102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001032:	fb09 fa08 	mul.w	sl, r9, r8
 8001036:	458a      	cmp	sl, r1
 8001038:	fa02 f206 	lsl.w	r2, r2, r6
 800103c:	fa00 f306 	lsl.w	r3, r0, r6
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x220>
 8001042:	1861      	adds	r1, r4, r1
 8001044:	f109 30ff 	add.w	r0, r9, #4294967295
 8001048:	d248      	bcs.n	80010dc <__udivmoddi4+0x2a8>
 800104a:	458a      	cmp	sl, r1
 800104c:	d946      	bls.n	80010dc <__udivmoddi4+0x2a8>
 800104e:	f1a9 0902 	sub.w	r9, r9, #2
 8001052:	4421      	add	r1, r4
 8001054:	eba1 010a 	sub.w	r1, r1, sl
 8001058:	b2bf      	uxth	r7, r7
 800105a:	fbb1 f0fe 	udiv	r0, r1, lr
 800105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001066:	fb00 f808 	mul.w	r8, r0, r8
 800106a:	45b8      	cmp	r8, r7
 800106c:	d907      	bls.n	800107e <__udivmoddi4+0x24a>
 800106e:	19e7      	adds	r7, r4, r7
 8001070:	f100 31ff 	add.w	r1, r0, #4294967295
 8001074:	d22e      	bcs.n	80010d4 <__udivmoddi4+0x2a0>
 8001076:	45b8      	cmp	r8, r7
 8001078:	d92c      	bls.n	80010d4 <__udivmoddi4+0x2a0>
 800107a:	3802      	subs	r0, #2
 800107c:	4427      	add	r7, r4
 800107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001082:	eba7 0708 	sub.w	r7, r7, r8
 8001086:	fba0 8902 	umull	r8, r9, r0, r2
 800108a:	454f      	cmp	r7, r9
 800108c:	46c6      	mov	lr, r8
 800108e:	4649      	mov	r1, r9
 8001090:	d31a      	bcc.n	80010c8 <__udivmoddi4+0x294>
 8001092:	d017      	beq.n	80010c4 <__udivmoddi4+0x290>
 8001094:	b15d      	cbz	r5, 80010ae <__udivmoddi4+0x27a>
 8001096:	ebb3 020e 	subs.w	r2, r3, lr
 800109a:	eb67 0701 	sbc.w	r7, r7, r1
 800109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010a2:	40f2      	lsrs	r2, r6
 80010a4:	ea4c 0202 	orr.w	r2, ip, r2
 80010a8:	40f7      	lsrs	r7, r6
 80010aa:	e9c5 2700 	strd	r2, r7, [r5]
 80010ae:	2600      	movs	r6, #0
 80010b0:	4631      	mov	r1, r6
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	462e      	mov	r6, r5
 80010b8:	4628      	mov	r0, r5
 80010ba:	e70b      	b.n	8000ed4 <__udivmoddi4+0xa0>
 80010bc:	4606      	mov	r6, r0
 80010be:	e6e9      	b.n	8000e94 <__udivmoddi4+0x60>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6fd      	b.n	8000ec0 <__udivmoddi4+0x8c>
 80010c4:	4543      	cmp	r3, r8
 80010c6:	d2e5      	bcs.n	8001094 <__udivmoddi4+0x260>
 80010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80010cc:	eb69 0104 	sbc.w	r1, r9, r4
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7df      	b.n	8001094 <__udivmoddi4+0x260>
 80010d4:	4608      	mov	r0, r1
 80010d6:	e7d2      	b.n	800107e <__udivmoddi4+0x24a>
 80010d8:	4660      	mov	r0, ip
 80010da:	e78d      	b.n	8000ff8 <__udivmoddi4+0x1c4>
 80010dc:	4681      	mov	r9, r0
 80010de:	e7b9      	b.n	8001054 <__udivmoddi4+0x220>
 80010e0:	4666      	mov	r6, ip
 80010e2:	e775      	b.n	8000fd0 <__udivmoddi4+0x19c>
 80010e4:	4630      	mov	r0, r6
 80010e6:	e74a      	b.n	8000f7e <__udivmoddi4+0x14a>
 80010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010ec:	4439      	add	r1, r7
 80010ee:	e713      	b.n	8000f18 <__udivmoddi4+0xe4>
 80010f0:	3802      	subs	r0, #2
 80010f2:	443c      	add	r4, r7
 80010f4:	e724      	b.n	8000f40 <__udivmoddi4+0x10c>
 80010f6:	bf00      	nop

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f844 	bl	8001194 <convert>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001114:	1415      	asrs	r5, r2, #16
 8001116:	0414      	lsls	r4, r2, #16
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f000 f83b 	bl	8001194 <convert>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001126:	4620      	mov	r0, r4
 8001128:	4629      	mov	r1, r5
 800112a:	f7ff fde5 	bl	8000cf8 <__aeabi_ldivmod>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4613      	mov	r3, r2
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <printFix>:

void printFix(int32_t i) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da05      	bge.n	8001156 <printFix+0x1a>
            printf("-");
 800114a:	202d      	movs	r0, #45	; 0x2d
 800114c:	f007 fe44 	bl	8008dd8 <putchar>
            i = ~i + 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	425b      	negs	r3, r3
 8001154:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1419      	asrs	r1, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	461a      	mov	r2, r3
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <printFix+0x3c>)
 800116c:	f007 fe1c 	bl	8008da8 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800d040 	.word	0x0800d040

0800117c <expand>:

int32_t expand(int32_t i) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	009b      	lsls	r3, r3, #2
   }
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <convert>:

int32_t convert(int32_t i) {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	041b      	lsls	r3, r3, #16
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <inconvert>:

int32_t inconvert(int32_t i) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011ba:	141b      	asrs	r3, r3, #16
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <squareroot64>:
	else {
		return i;
	}
}

int64_t squareroot64(uint64_t x) {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	e9c7 0100 	strd	r0, r1, [r7]
    /*
     * Input: a 64-bit 48.16 fixed-point variable.
     * Output: square root in 48.16 format.
     */

    if (x == 0) return 0;
 80011d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	d104      	bne.n	80011e4 <squareroot64+0x1c>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e038      	b.n	8001256 <squareroot64+0x8e>

    // Scale up to 64.32 for better precision
    uint64_t scaled_value = x << 16;
 80011e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	040b      	lsls	r3, r1, #16
 80011f2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80011f6:	0402      	lsls	r2, r0, #16
 80011f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    uint64_t approx = scaled_value;
 80011fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001200:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint64_t better_approx;

    do {
        better_approx = (approx + scaled_value / approx) / 2;
 8001204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800120c:	f7ff fdc4 	bl	8000d98 <__aeabi_uldivmod>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800121c:	1884      	adds	r4, r0, r2
 800121e:	eb41 0503 	adc.w	r5, r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	0862      	lsrs	r2, r4, #1
 800122c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001230:	086b      	lsrs	r3, r5, #1
 8001232:	e9c7 2302 	strd	r2, r3, [r7, #8]
        if (better_approx == approx) break;
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800123e:	4299      	cmp	r1, r3
 8001240:	bf08      	it	eq
 8001242:	4290      	cmpeq	r0, r2
 8001244:	d004      	beq.n	8001250 <squareroot64+0x88>
        approx = better_approx;
 8001246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800124a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        better_approx = (approx + scaled_value / approx) / 2;
 800124e:	e7d9      	b.n	8001204 <squareroot64+0x3c>
        if (better_approx == approx) break;
 8001250:	bf00      	nop
    } while (1);

    return approx; // Still in 48.16 format
 8001252:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}

08001260 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001272:	b29b      	uxth	r3, r3
 8001274:	3301      	adds	r3, #1
 8001276:	425a      	negs	r2, r3
 8001278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800127c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001280:	bf58      	it	pl
 8001282:	4253      	negpl	r3, r2
 8001284:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800128c:	b29b      	uxth	r3, r3
 800128e:	89fa      	ldrh	r2, [r7, #14]
 8001290:	429a      	cmp	r2, r3
 8001292:	d00c      	beq.n	80012ae <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800129a:	b29b      	uxth	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	89fa      	ldrh	r2, [r7, #14]
 80012a8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 80012ac:	e002      	b.n	80012b4 <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <RingBuffer_Write+0x5c>)
 80012b0:	f007 fd7a 	bl	8008da8 <iprintf>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800d050 	.word	0x0800d050

080012c0 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    int result = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012cc:	e015      	b.n	80012fa <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b2f      	cmp	r3, #47	; 0x2f
 80012d4:	d90e      	bls.n	80012f4 <string_to_int+0x34>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b39      	cmp	r3, #57	; 0x39
 80012dc:	d80a      	bhi.n	80012f4 <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3b30      	subs	r3, #48	; 0x30
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
        }
        str++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
    while (*str) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e5      	bne.n	80012ce <string_to_int+0xe>
    }
    return result;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <powten>:

int powten(int x) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	int i = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd0f      	ble.n	8001342 <powten+0x32>
		for (int j = 0; j < x; j++) {
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	e008      	b.n	800133a <powten+0x2a>
			i *= 10;
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3301      	adds	r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	dbf2      	blt.n	8001328 <powten+0x18>
		}
	}
	return i;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <Altxx>:

int32_t Altxx(char *data) {
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 8001358:	4921      	ldr	r1, [pc, #132]	; (80013e0 <Altxx+0x90>)
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f008 fc4c 	bl	8009bf8 <strtok>
 8001360:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
	int j = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 8001372:	e01a      	b.n	80013aa <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 8001374:	69f8      	ldr	r0, [r7, #28]
 8001376:	f7ff ffa3 	bl	80012c0 <string_to_int>
 800137a:	4602      	mov	r2, r0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f107 0120 	add.w	r1, r7, #32
 8001384:	440b      	add	r3, r1
 8001386:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d104      	bne.n	800139a <Altxx+0x4a>
 8001390:	69f8      	ldr	r0, [r7, #28]
 8001392:	f7fe ff4f 	bl	8000234 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 80013a0:	490f      	ldr	r1, [pc, #60]	; (80013e0 <Altxx+0x90>)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f008 fc28 	bl	8009bf8 <strtok>
 80013a8:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e1      	bne.n	8001374 <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff feee 	bl	8001194 <convert>
 80013b8:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 80013ba:	68fc      	ldr	r4, [r7, #12]
 80013bc:	69b8      	ldr	r0, [r7, #24]
 80013be:	f7ff ffa7 	bl	8001310 <powten>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4619      	mov	r1, r3
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff fe98 	bl	80010fc <Rational>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4413      	add	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 80013d4:	693b      	ldr	r3, [r7, #16]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800d0e8 	.word	0x0800d0e8

080013e4 <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <DDmmmmmm+0x90>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	82bb      	strh	r3, [r7, #20]
 80013f2:	2300      	movs	r3, #0
 80013f4:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2202      	movs	r2, #2
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f007 fda0 	bl	8008f4c <strncpy>
    strcpy(mm_str, data + 2);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1c9a      	adds	r2, r3, #2
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fd90 	bl	8008f3c <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff4d 	bl	80012c0 <string_to_int>
 8001426:	4603      	mov	r3, r0
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff45 	bl	80012c0 <string_to_int>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800143e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	141d      	asrs	r5, r3, #16
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	041c      	lsls	r4, r3, #16
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <DDmmmmmm+0x94>)
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
 8001454:	f7ff fc50 	bl	8000cf8 <__aeabi_ldivmod>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4613      	mov	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001464:	4413      	add	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    return cords;
 8001468:	69bb      	ldr	r3, [r7, #24]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bdb0      	pop	{r4, r5, r7, pc}
 8001472:	bf00      	nop
 8001474:	0800d0ec 	.word	0x0800d0ec
 8001478:	000927c0 	.word	0x000927c0

0800147c <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2203      	movs	r2, #3
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f007 fd54 	bl	8008f4c <strncpy>
	strcpy(mm_str, data + 3);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1cda      	adds	r2, r3, #3
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fd44 	bl	8008f3c <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff01 	bl	80012c0 <string_to_int>
 80014be:	4603      	mov	r3, r0
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fef9 	bl	80012c0 <string_to_int>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	141d      	asrs	r5, r3, #16
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	041c      	lsls	r4, r3, #16
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <DDDmmmmmm+0x90>)
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7ff fc04 	bl	8000cf8 <__aeabi_ldivmod>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4613      	mov	r3, r2
 80014f6:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	4413      	add	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
	return cords;
 8001500:	69bb      	ldr	r3, [r7, #24]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3730      	adds	r7, #48	; 0x30
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}
 800150a:	bf00      	nop
 800150c:	000927c0 	.word	0x000927c0

08001510 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001528:	b29b      	uxth	r3, r3
 800152a:	429a      	cmp	r2, r3
 800152c:	d101      	bne.n	8001532 <RingBuffer_Read+0x22>
        return 0;  // No data
 800152e:	2300      	movs	r3, #0
 8001530:	e019      	b.n	8001566 <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001538:	b29b      	uxth	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	5c9a      	ldrb	r2, [r3, r2]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800154a:	b29b      	uxth	r3, r3
 800154c:	3301      	adds	r3, #1
 800154e:	425a      	negs	r2, r3
 8001550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001554:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001558:	bf58      	it	pl
 800155a:	4253      	negpl	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8097 	beq.w	80016b6 <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 8001588:	4a6c      	ldr	r2, [pc, #432]	; (800173c <getGPGGA+0x1c8>)
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001592:	6018      	str	r0, [r3, #0]
 8001594:	3304      	adds	r3, #4
 8001596:	8019      	strh	r1, [r3, #0]
 8001598:	3302      	adds	r3, #2
 800159a:	0c0a      	lsrs	r2, r1, #16
 800159c:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f007 fce4 	bl	8008f72 <strstr>
 80015aa:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80bf 	beq.w	8001732 <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 80015b4:	69b8      	ldr	r0, [r7, #24]
 80015b6:	f7fe fe3d 	bl	8000234 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b28      	cmp	r3, #40	; 0x28
 80015be:	d973      	bls.n	80016a8 <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 80015c0:	495f      	ldr	r1, [pc, #380]	; (8001740 <getGPGGA+0x1cc>)
 80015c2:	69b8      	ldr	r0, [r7, #24]
 80015c4:	f008 fb18 	bl	8009bf8 <strtok>
 80015c8:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 80015ce:	e067      	b.n	80016a0 <getGPGGA+0x12c>
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	3b03      	subs	r3, #3
 80015d4:	2b07      	cmp	r3, #7
 80015d6:	d85a      	bhi.n	800168e <getGPGGA+0x11a>
 80015d8:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <getGPGGA+0x6c>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	08001601 	.word	0x08001601
 80015e4:	0800160f 	.word	0x0800160f
 80015e8:	08001641 	.word	0x08001641
 80015ec:	0800164f 	.word	0x0800164f
 80015f0:	0800168f 	.word	0x0800168f
 80015f4:	0800168f 	.word	0x0800168f
 80015f8:	0800168f 	.word	0x0800168f
 80015fc:	08001681 	.word	0x08001681
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8001600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001602:	f7ff feef 	bl	80013e4 <DDmmmmmm>
 8001606:	4602      	mov	r2, r0
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	601a      	str	r2, [r3, #0]
							break;
 800160c:	e040      	b.n	8001690 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 800160e:	494d      	ldr	r1, [pc, #308]	; (8001744 <getGPGGA+0x1d0>)
 8001610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001612:	f7fe fe05 	bl	8000220 <strcmp>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001624:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 800162c:	e030      	b.n	8001690 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	425a      	negs	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	601a      	str	r2, [r3, #0]
							break;
 800163e:	e027      	b.n	8001690 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 8001640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001642:	f7ff ff1b 	bl	800147c <DDDmmmmmm>
 8001646:	4602      	mov	r2, r0
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	605a      	str	r2, [r3, #4]
							break;
 800164c:	e020      	b.n	8001690 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 800164e:	493e      	ldr	r1, [pc, #248]	; (8001748 <getGPGGA+0x1d4>)
 8001650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001652:	f7fe fde5 	bl	8000220 <strcmp>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d108      	bne.n	800166e <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001664:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 800166c:	e010      	b.n	8001690 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	bfb8      	it	lt
 8001676:	425b      	neglt	r3, r3
 8001678:	425a      	negs	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	605a      	str	r2, [r3, #4]
							break;
 800167e:	e007      	b.n	8001690 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 8001680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001682:	f7ff fe65 	bl	8001350 <Altxx>
 8001686:	4602      	mov	r2, r0
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	609a      	str	r2, [r3, #8]
							break;
 800168c:	e000      	b.n	8001690 <getGPGGA+0x11c>
						}
						default: {
							break;
 800168e:	bf00      	nop
						}
					}
					i++;
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	3301      	adds	r3, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8001696:	492a      	ldr	r1, [pc, #168]	; (8001740 <getGPGGA+0x1cc>)
 8001698:	2000      	movs	r0, #0
 800169a:	f008 faad 	bl	8009bf8 <strtok>
 800169e:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d194      	bne.n	80015d0 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s \r\n", filter);
		}
	}
}
 80016a6:	e044      	b.n	8001732 <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 80016a8:	4828      	ldr	r0, [pc, #160]	; (800174c <getGPGGA+0x1d8>)
 80016aa:	f007 fc19 	bl	8008ee0 <puts>
				gps->active = 0;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	731a      	strb	r2, [r3, #12]
}
 80016b4:	e03d      	b.n	8001732 <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <getGPGGA+0x1dc>)
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c0:	6018      	str	r0, [r3, #0]
 80016c2:	3304      	adds	r3, #4
 80016c4:	8019      	strh	r1, [r3, #0]
 80016c6:	3302      	adds	r3, #2
 80016c8:	0c0a      	lsrs	r2, r1, #16
 80016ca:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f007 fc4d 	bl	8008f72 <strstr>
 80016d8:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d028      	beq.n	8001732 <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 80016e0:	4917      	ldr	r1, [pc, #92]	; (8001740 <getGPGGA+0x1cc>)
 80016e2:	69f8      	ldr	r0, [r7, #28]
 80016e4:	f008 fa88 	bl	8009bf8 <strtok>
 80016e8:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 80016ee:	e01d      	b.n	800172c <getGPGGA+0x1b8>
				i++;
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	3301      	adds	r3, #1
 80016f4:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 80016f6:	4912      	ldr	r1, [pc, #72]	; (8001740 <getGPGGA+0x1cc>)
 80016f8:	2000      	movs	r0, #0
 80016fa:	f008 fa7d 	bl	8009bf8 <strtok>
 80016fe:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d112      	bne.n	800172c <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 8001706:	4913      	ldr	r1, [pc, #76]	; (8001754 <getGPGGA+0x1e0>)
 8001708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800170a:	f7fe fd89 	bl	8000220 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d106      	bne.n	8001722 <getGPGGA+0x1ae>
							gps->active = 1;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 800171a:	480f      	ldr	r0, [pc, #60]	; (8001758 <getGPGGA+0x1e4>)
 800171c:	f007 fbe0 	bl	8008ee0 <puts>
 8001720:	e003      	b.n	800172a <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <getGPGGA+0x1e8>)
 8001726:	f007 fb3f 	bl	8008da8 <iprintf>
						break;
 800172a:	bf00      	nop
			while (tokPtr != NULL) {
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1de      	bne.n	80016f0 <getGPGGA+0x17c>
}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	0800d14c 	.word	0x0800d14c
 8001740:	0800d0f0 	.word	0x0800d0f0
 8001744:	0800d0f4 	.word	0x0800d0f4
 8001748:	0800d0f8 	.word	0x0800d0f8
 800174c:	0800d0fc 	.word	0x0800d0fc
 8001750:	0800d154 	.word	0x0800d154
 8001754:	0800d118 	.word	0x0800d118
 8001758:	0800d11c 	.word	0x0800d11c
 800175c:	0800d130 	.word	0x0800d130

08001760 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 800176a:	e01d      	b.n	80017a8 <process_uart_data+0x48>
        if (indx < sizeof(sentence) - 1) {
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <process_uart_data+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2bf8      	cmp	r3, #248	; 0xf8
 8001772:	d807      	bhi.n	8001784 <process_uart_data+0x24>
            sentence[indx++] = c;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <process_uart_data+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4912      	ldr	r1, [pc, #72]	; (80017c4 <process_uart_data+0x64>)
 800177c:	600a      	str	r2, [r1, #0]
 800177e:	7bf9      	ldrb	r1, [r7, #15]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <process_uart_data+0x68>)
 8001782:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d10e      	bne.n	80017a8 <process_uart_data+0x48>
            sentence[indx] = '\0';  // Null-terminate the string
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <process_uart_data+0x64>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <process_uart_data+0x68>)
 8001790:	2100      	movs	r1, #0
 8001792:	54d1      	strb	r1, [r2, r3]
            printf("Log:   UART Sentence received \r\n");
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <process_uart_data+0x6c>)
 8001796:	f007 fba3 	bl	8008ee0 <puts>
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <process_uart_data+0x68>)
 800179e:	f7ff fee9 	bl	8001574 <getGPGGA>
            indx = 0;  // Reset for next line
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <process_uart_data+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 80017a8:	f107 030f 	add.w	r3, r7, #15
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff feae 	bl	8001510 <RingBuffer_Read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1d8      	bne.n	800176c <process_uart_data+0xc>
        }
    }
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000200 	.word	0x20000200
 80017c8:	20000614 	.word	0x20000614
 80017cc:	0800d15c 	.word	0x0800d15c

080017d0 <printGPS>:

void printGPS(GPSRead_t GPS) {
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	463c      	mov	r4, r7
 80017d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (GPS.active) {
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01a      	beq.n	8001818 <printGPS+0x48>
		printf("Active: %i ~ Latitude: ", GPS.active);
 80017e2:	7b3b      	ldrb	r3, [r7, #12]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4810      	ldr	r0, [pc, #64]	; (8001828 <printGPS+0x58>)
 80017e8:	f007 fade 	bl	8008da8 <iprintf>
		printFix(GPS.latitude);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fca4 	bl	800113c <printFix>
		printf("deg ~ Longitude: ");
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <printGPS+0x5c>)
 80017f6:	f007 fad7 	bl	8008da8 <iprintf>
		printFix(GPS.longitude);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc9d 	bl	800113c <printFix>
		printf("deg ~ Altitude: ");
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <printGPS+0x60>)
 8001804:	f007 fad0 	bl	8008da8 <iprintf>
		printFix(GPS.altitude);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fc96 	bl	800113c <printFix>
		printf("m. \r\n");
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <printGPS+0x64>)
 8001812:	f007 fb65 	bl	8008ee0 <puts>
	} else {
		printf("Error: GPS inactive \r\n");
	}
}
 8001816:	e002      	b.n	800181e <printGPS+0x4e>
		printf("Error: GPS inactive \r\n");
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <printGPS+0x68>)
 800181a:	f007 fb61 	bl	8008ee0 <puts>
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	0800d17c 	.word	0x0800d17c
 800182c:	0800d194 	.word	0x0800d194
 8001830:	0800d1a8 	.word	0x0800d1a8
 8001834:	0800d1bc 	.word	0x0800d1bc
 8001838:	0800d1c4 	.word	0x0800d1c4

0800183c <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <I2C_Scan+0x58>)
 8001846:	f007 fb4b 	bl	8008ee0 <puts>

    for (i = 1; i < 128; i++) {
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e015      	b.n	800187c <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	b29b      	uxth	r3, r3
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	b299      	uxth	r1, r3
 8001858:	230a      	movs	r3, #10
 800185a:	2201      	movs	r2, #1
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f002 ffb9 	bl	80047d4 <HAL_I2C_IsDeviceReady>
 8001862:	4603      	mov	r3, r0
 8001864:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d104      	bne.n	8001876 <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	4619      	mov	r1, r3
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <I2C_Scan+0x5c>)
 8001872:	f007 fa99 	bl	8008da8 <iprintf>
    for (i = 1; i < 128; i++) {
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	3301      	adds	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	dae5      	bge.n	8001850 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <I2C_Scan+0x60>)
 8001886:	f007 fb2b 	bl	8008ee0 <puts>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0800d1dc 	.word	0x0800d1dc
 8001898:	0800d1f4 	.word	0x0800d1f4
 800189c:	0800d21c 	.word	0x0800d21c

080018a0 <fixed_to_float>:
#define wgs84_a 417997586 // 6378.137;
#define wgs84_b 416596119 // wgs84_a * (1 - wgs84_f), wgs84_f = 220 # 1 / 298.257223563;


// Convert 16.16 fixed-point to float
static inline float fixed_to_float(int32_t x) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    return (float)x / FIXED_POINT_SCALE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018cc <fixed_to_float+0x2c>
 80018b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80018be:	eeb0 0a67 	vmov.f32	s0, s15
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	47800000 	.word	0x47800000

080018d0 <get_years16>:
//static const int32_t wgs84_a = 417997586; // 6378.137
//static const int32_t wgs84_b = 416596119; //wgs84_a * (1 - wgs84_f);

// Decimal years since January 1, IGRF_START_YEAR
int32_t get_years16(const igrf_time_t dt)
{
 80018d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d4:	b0a0      	sub	sp, #128	; 0x80
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	463b      	mov	r3, r7
 80018da:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 80018de:	883b      	ldrh	r3, [r7, #0]
 80018e0:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80018e4:	d916      	bls.n	8001914 <get_years16+0x44>
 80018e6:	883b      	ldrh	r3, [r7, #0]
 80018e8:	f240 72ed 	movw	r2, #2029	; 0x7ed
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d811      	bhi.n	8001914 <get_years16+0x44>
      (dt.month < 1) || (dt.month > 12) ||
 80018f0:	78bb      	ldrb	r3, [r7, #2]
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00e      	beq.n	8001914 <get_years16+0x44>
      (dt.month < 1) || (dt.month > 12) ||
 80018f6:	78bb      	ldrb	r3, [r7, #2]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d80b      	bhi.n	8001914 <get_years16+0x44>
      (dt.day < 1) || (dt.hour > 23) ||
 80018fc:	78fb      	ldrb	r3, [r7, #3]
      (dt.month < 1) || (dt.month > 12) ||
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <get_years16+0x44>
      (dt.day < 1) || (dt.hour > 23) ||
 8001902:	793b      	ldrb	r3, [r7, #4]
 8001904:	2b17      	cmp	r3, #23
 8001906:	d805      	bhi.n	8001914 <get_years16+0x44>
      (dt.minute > 59) || (dt.second > 59))
 8001908:	797b      	ldrb	r3, [r7, #5]
      (dt.day < 1) || (dt.hour > 23) ||
 800190a:	2b3b      	cmp	r3, #59	; 0x3b
 800190c:	d802      	bhi.n	8001914 <get_years16+0x44>
      (dt.minute > 59) || (dt.second > 59))
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	2b3b      	cmp	r3, #59	; 0x3b
 8001912:	d902      	bls.n	800191a <get_years16+0x4a>
  {
    return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	e0c8      	b.n	8001aac <get_years16+0x1dc>
  }

  int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <get_years16+0x1e8>)
 800191c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800192e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int is_leap = (((dt.year % 4) == 0) && (((dt.year % 100) != 0) || ((dt.year % 400) == 0)));
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	b29b      	uxth	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d11a      	bne.n	8001974 <get_years16+0xa4>
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <get_years16+0x1ec>)
 8001942:	fba2 1203 	umull	r1, r2, r2, r3
 8001946:	0952      	lsrs	r2, r2, #5
 8001948:	2164      	movs	r1, #100	; 0x64
 800194a:	fb01 f202 	mul.w	r2, r1, r2
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <get_years16+0xa0>
 8001956:	883b      	ldrh	r3, [r7, #0]
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <get_years16+0x1ec>)
 800195a:	fba2 1203 	umull	r1, r2, r2, r3
 800195e:	09d2      	lsrs	r2, r2, #7
 8001960:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001964:	fb01 f202 	mul.w	r2, r1, r2
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <get_years16+0xa4>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <get_years16+0xa6>
 8001974:	2300      	movs	r3, #0
 8001976:	67fb      	str	r3, [r7, #124]	; 0x7c

  // Adjust for leap year
  if (is_leap)
 8001978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <get_years16+0xb2>
  {
    days_in_month[1] = 29;
 800197e:	231d      	movs	r3, #29
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  }

  // Check valid day in the month
  if (dt.day > days_in_month[dt.month - 1])
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	461a      	mov	r2, r3
 8001986:	78bb      	ldrb	r3, [r7, #2]
 8001988:	3b01      	subs	r3, #1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001990:	440b      	add	r3, r1
 8001992:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001996:	429a      	cmp	r2, r3
 8001998:	dd02      	ble.n	80019a0 <get_years16+0xd0>
  {
    return -1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e085      	b.n	8001aac <get_years16+0x1dc>
  }

  // Days since IGRF_START_YEAR
  int years = dt.year - IGRF_START_YEAR;
 80019a0:	883b      	ldrh	r3, [r7, #0]
 80019a2:	f2a3 73e9 	subw	r3, r3, #2025	; 0x7e9
 80019a6:	67bb      	str	r3, [r7, #120]	; 0x78
  int32_t days_arr[] = {0, 31, 59, 90, 120, 151, 182, 212, 243, 273, 304, 334};
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <get_years16+0x1f0>)
 80019aa:	f107 040c 	add.w	r4, r7, #12
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int32_t days = days_arr[dt.month - 1] + dt.day + (dt.month > 2 ? is_leap : 0);
 80019c0:	78bb      	ldrb	r3, [r7, #2]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019ca:	4413      	add	r3, r2
 80019cc:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	441a      	add	r2, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <get_years16+0x10e>
 80019da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019dc:	e000      	b.n	80019e0 <get_years16+0x110>
 80019de:	2300      	movs	r3, #0
 80019e0:	4413      	add	r3, r2
 80019e2:	677b      	str	r3, [r7, #116]	; 0x74
  int32_t hours = (dt.hour << 16) + DIV(dt.minute, 60 << 16) + DIV(dt.second, 3600 << 16);
 80019e4:	793b      	ldrb	r3, [r7, #4]
 80019e6:	041c      	lsls	r4, r3, #16
 80019e8:	797b      	ldrb	r3, [r7, #5]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f04f 0000 	mov.w	r0, #0
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	0419      	lsls	r1, r3, #16
 80019fa:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80019fe:	0410      	lsls	r0, r2, #16
 8001a00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f7ff f976 	bl	8000cf8 <__aeabi_ldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	441c      	add	r4, r3
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0419      	lsls	r1, r3, #16
 8001a26:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001a2a:	0410      	lsls	r0, r2, #16
 8001a2c:	f04f 6261 	mov.w	r2, #235929600	; 0xe100000
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f7ff f960 	bl	8000cf8 <__aeabi_ldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	4423      	add	r3, r4
 8001a40:	673b      	str	r3, [r7, #112]	; 0x70
  int32_t total_days = is_leap ? 366 : 365;
 8001a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <get_years16+0x17e>
 8001a48:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8001a4c:	e001      	b.n	8001a52 <get_years16+0x182>
 8001a4e:	f240 136d 	movw	r3, #365	; 0x16d
 8001a52:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Decimal years
  return (years << 16) + DIV(days << 16,total_days << 16) + DIV(hours,24 << 16);
 8001a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a56:	041c      	lsls	r4, r3, #16
 8001a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a62:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001a66:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	461a      	mov	r2, r3
 8001a70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a74:	4650      	mov	r0, sl
 8001a76:	4659      	mov	r1, fp
 8001a78:	f7ff f93e 	bl	8000cf8 <__aeabi_ldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	441c      	add	r4, r3
 8001a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a86:	461a      	mov	r2, r3
 8001a88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a8c:	ea4f 4922 	mov.w	r9, r2, asr #16
 8001a90:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8001a94:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	f7ff f92a 	bl	8000cf8 <__aeabi_ldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	4423      	add	r3, r4
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3780      	adds	r7, #128	; 0x80
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab6:	bf00      	nop
 8001ab8:	0800d22c 	.word	0x0800d22c
 8001abc:	51eb851f 	.word	0x51eb851f
 8001ac0:	0800d25c 	.word	0x0800d25c
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <igrf16>:
 * @param f The frame of reference for the input coordinates and the output field values.
 *
 * @return false if the time is out of range; true otherwise.
 */
int igrf16(const igrf_time_t t, const int32_t latitude, const int32_t longitude, const int32_t altitude, igrf_frame_t f, int32_t b[3])
{
 8001ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001acc:	b0f7      	sub	sp, #476	; 0x1dc
 8001ace:	af0e      	add	r7, sp, #56	; 0x38
 8001ad0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ad4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ad8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001adc:	600a      	str	r2, [r1, #0]
 8001ade:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ae2:	6013      	str	r3, [r2, #0]
  const int32_t a = 417542963; // 6371.2;                  // Radius of Earth [km]
 8001ae4:	4be8      	ldr	r3, [pc, #928]	; (8001e88 <igrf16+0x3c0>)
 8001ae6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  const int32_t theta = M16_PI_2 - MULT(latitude, D162R); // Colattitude [rad]
 8001aea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461c      	mov	r4, r3
 8001af2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001af6:	4622      	mov	r2, r4
 8001af8:	462b      	mov	r3, r5
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	00d9      	lsls	r1, r3, #3
 8001b04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b08:	00d0      	lsls	r0, r2, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	1912      	adds	r2, r2, r4
 8001b10:	eb45 0303 	adc.w	r3, r5, r3
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	01d9      	lsls	r1, r3, #7
 8001b1e:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8001b22:	01d0      	lsls	r0, r2, #7
 8001b24:	1a80      	subs	r0, r0, r2
 8001b26:	eb61 0103 	sbc.w	r1, r1, r3
 8001b2a:	eb10 0804 	adds.w	r8, r0, r4
 8001b2e:	eb41 0905 	adc.w	r9, r1, r5
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001b3e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001b42:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001b46:	4613      	mov	r3, r2
 8001b48:	f5c3 33c9 	rsb	r3, r3, #102912	; 0x19200
 8001b4c:	3320      	adds	r3, #32
 8001b4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  const int32_t phi = MULT(longitude, D162R);            // Longitude [rad]
 8001b52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461c      	mov	r4, r3
 8001b5a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	00d9      	lsls	r1, r3, #3
 8001b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b70:	00d0      	lsls	r0, r2, #3
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	1912      	adds	r2, r2, r4
 8001b78:	eb45 0303 	adc.w	r3, r5, r3
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	01d9      	lsls	r1, r3, #7
 8001b86:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8001b8a:	01d0      	lsls	r0, r2, #7
 8001b8c:	1a80      	subs	r0, r0, r2
 8001b8e:	eb61 0103 	sbc.w	r1, r1, r3
 8001b92:	eb10 0a04 	adds.w	sl, r0, r4
 8001b96:	eb41 0b05 	adc.w	fp, r1, r5
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8001ba6:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001baa:	ea4f 432b 	mov.w	r3, fp, asr #16
 8001bae:	4613      	mov	r3, r2
 8001bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  int32_t ct = cosrad(theta);
 8001bb4:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8001bb8:	f001 fb30 	bl	800321c <cosrad>
 8001bbc:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  int32_t st = sinrad(theta);
 8001bc0:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8001bc4:	f001 faa6 	bl	8003114 <sinrad>
 8001bc8:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
  int32_t cd, sd, r;

  // Geodetic to geocentric conversion
  // https://github.com/wb-bgs/m_IGRF
  if (f == IGRF_GEODETIC)
 8001bcc:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 8129 	bne.w	8001e28 <igrf16+0x360>
  {
    // Radius
    const int32_t h = altitude;
 8001bd6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    const int32_t rho = hypot(MULT(wgs84_a, st), MULT(wgs84_b, ct));
 8001bde:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001be2:	461a      	mov	r2, r3
 8001be4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001be8:	49a8      	ldr	r1, [pc, #672]	; (8001e8c <igrf16+0x3c4>)
 8001bea:	fb01 f003 	mul.w	r0, r1, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	fb01 f102 	mul.w	r1, r1, r2
 8001bf4:	4401      	add	r1, r0
 8001bf6:	48a5      	ldr	r0, [pc, #660]	; (8001e8c <igrf16+0x3c4>)
 8001bf8:	fba2 2300 	umull	r2, r3, r2, r0
 8001bfc:	4419      	add	r1, r3
 8001bfe:	460b      	mov	r3, r1
 8001c00:	f04f 0000 	mov.w	r0, #0
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	0c10      	lsrs	r0, r2, #16
 8001c0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c0e:	1419      	asrs	r1, r3, #16
 8001c10:	4603      	mov	r3, r0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcbe 	bl	8000594 <__aeabi_i2d>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c20:	461a      	mov	r2, r3
 8001c22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c26:	499a      	ldr	r1, [pc, #616]	; (8001e90 <igrf16+0x3c8>)
 8001c28:	fb01 f003 	mul.w	r0, r1, r3
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	fb01 f102 	mul.w	r1, r1, r2
 8001c32:	4401      	add	r1, r0
 8001c34:	4896      	ldr	r0, [pc, #600]	; (8001e90 <igrf16+0x3c8>)
 8001c36:	fba2 2300 	umull	r2, r3, r2, r0
 8001c3a:	4419      	add	r1, r3
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0c10      	lsrs	r0, r2, #16
 8001c48:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c4c:	1419      	asrs	r1, r3, #16
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc9f 	bl	8000594 <__aeabi_i2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b11 	vmov	d1, r2, r3
 8001c5e:	ec45 4b10 	vmov	d0, r4, r5
 8001c62:	f00a ffc5 	bl	800cbf0 <hypot>
 8001c66:	ec53 2b10 	vmov	r2, r3, d0
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffab 	bl	8000bc8 <__aeabi_d2iz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    r = squareroot64(h * h + 2 * h * rho + (pow(wgs84_a, 4) * st * st + pow(wgs84_b, 4) * ct * ct) / (rho * rho));
 8001c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c7c:	fb03 f203 	mul.w	r2, r3, r3
 8001c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c84:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc7f 	bl	8000594 <__aeabi_i2d>
 8001c96:	4682      	mov	sl, r0
 8001c98:	468b      	mov	fp, r1
 8001c9a:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8001c9e:	f7fe fc79 	bl	8000594 <__aeabi_i2d>
 8001ca2:	a375      	add	r3, pc, #468	; (adr r3, 8001e78 <igrf16+0x3b0>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fcde 	bl	8000668 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8001cb8:	f7fe fc6c 	bl	8000594 <__aeabi_i2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fcd0 	bl	8000668 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4690      	mov	r8, r2
 8001cce:	4699      	mov	r9, r3
 8001cd0:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8001cd4:	f7fe fc5e 	bl	8000594 <__aeabi_i2d>
 8001cd8:	a369      	add	r3, pc, #420	; (adr r3, 8001e80 <igrf16+0x3b8>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe fcc3 	bl	8000668 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461d      	mov	r5, r3
 8001cea:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8001cee:	f7fe fc51 	bl	8000594 <__aeabi_i2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f7fe fcb5 	bl	8000668 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4640      	mov	r0, r8
 8001d04:	4649      	mov	r1, r9
 8001d06:	f7fe faf9 	bl	80002fc <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4614      	mov	r4, r2
 8001d10:	461d      	mov	r5, r3
 8001d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d16:	fb03 f303 	mul.w	r3, r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc3a 	bl	8000594 <__aeabi_i2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f7fe fdc8 	bl	80008bc <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4650      	mov	r0, sl
 8001d32:	4659      	mov	r1, fp
 8001d34:	f7fe fae2 	bl	80002fc <__adddf3>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7ff f85a 	bl	8000df8 <__aeabi_d2ulz>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7ff fa3c 	bl	80011c8 <squareroot64>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    // Latitude
    cd = DIV((h + rho), r);
 8001d5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d62:	4413      	add	r3, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d6a:	1411      	asrs	r1, r2, #16
 8001d6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d6e:	0413      	lsls	r3, r2, #16
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001d76:	461a      	mov	r2, r3
 8001d78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d80:	f7fe ffba 	bl	8000cf8 <__aeabi_ldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    sd = (wgs84_a * wgs84_a - wgs84_b * wgs84_b) / rho * ct * st / r;
 8001d8e:	4a41      	ldr	r2, [pc, #260]	; (8001e94 <igrf16+0x3cc>)
 8001d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d98:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001da4:	fb02 f203 	mul.w	r2, r2, r3
 8001da8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8001db0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const double temp = ct;
 8001db4:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8001db8:	f7fe fbec 	bl	8000594 <__aeabi_i2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    ct = cd * ct - sd * st;
 8001dc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dc8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001dcc:	fb02 f203 	mul.w	r2, r2, r3
 8001dd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dd4:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    st = cd * st + sd * temp;
 8001de2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001de6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbd0 	bl	8000594 <__aeabi_i2d>
 8001df4:	4604      	mov	r4, r0
 8001df6:	460d      	mov	r5, r1
 8001df8:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001dfc:	f7fe fbca 	bl	8000594 <__aeabi_i2d>
 8001e00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001e04:	f7fe fc30 	bl	8000668 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fa74 	bl	80002fc <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe fed4 	bl	8000bc8 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001e26:	e003      	b.n	8001e30 <igrf16+0x368>
  }
  else {
	 r = altitude;
 8001e28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  }


  // Avoid singularity on pole
  const int32_t epsilon = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  if (st < epsilon && st > -epsilon)
 8001e36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	da0a      	bge.n	8001e58 <igrf16+0x390>
 8001e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e46:	425b      	negs	r3, r3
 8001e48:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dd03      	ble.n	8001e58 <igrf16+0x390>
  {
    st = epsilon;
 8001e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e54:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  }

  int32_t years = get_years16(t);
 8001e58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e60:	f7ff fd36 	bl	80018d0 <get_years16>
 8001e64:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

  if (years < 0)
 8001e68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da13      	bge.n	8001e98 <igrf16+0x3d0>
  {
    return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f001 b81b 	b.w	8002eac <igrf16+0x13e4>
 8001e76:	bf00      	nop
 8001e78:	8fe94d0d 	.word	0x8fe94d0d
 8001e7c:	4717848a 	.word	0x4717848a
 8001e80:	16bd96ca 	.word	0x16bd96ca
 8001e84:	47173434 	.word	0x47173434
 8001e88:	18e33333 	.word	0x18e33333
 8001e8c:	18ea2312 	.word	0x18ea2312
 8001e90:	18d4c097 	.word	0x18d4c097
 8001e94:	a6bb1433 	.word	0xa6bb1433
  }

  // [a] Re-occurring power factors
  // Optimizations [a] and [b] by Alar Leibak.
  int32_t ar_pow[IGRF_DEGREE + 1];
  const int32_t ar = DIV(a, r);
 8001e98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ea2:	1411      	asrs	r1, r2, #16
 8001ea4:	6279      	str	r1, [r7, #36]	; 0x24
 8001ea6:	0413      	lsls	r3, r2, #16
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001eae:	461a      	mov	r2, r3
 8001eb0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001eb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eb8:	f7fe ff1e 	bl	8000cf8 <__aeabi_ldivmod>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  ar_pow[0] = MULT(MULT(ar, ar), ar);
 8001ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eca:	4618      	mov	r0, r3
 8001ecc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001eda:	fb02 f501 	mul.w	r5, r2, r1
 8001ede:	fb00 f403 	mul.w	r4, r0, r3
 8001ee2:	442c      	add	r4, r5
 8001ee4:	fba0 2302 	umull	r2, r3, r0, r2
 8001ee8:	18e1      	adds	r1, r4, r3
 8001eea:	460b      	mov	r3, r1
 8001eec:	f04f 0000 	mov.w	r0, #0
 8001ef0:	f04f 0100 	mov.w	r1, #0
 8001ef4:	0c10      	lsrs	r0, r2, #16
 8001ef6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001efa:	1419      	asrs	r1, r3, #16
 8001efc:	4603      	mov	r3, r0
 8001efe:	4618      	mov	r0, r3
 8001f00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f08:	461a      	mov	r2, r3
 8001f0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f0e:	fb02 f501 	mul.w	r5, r2, r1
 8001f12:	fb00 f403 	mul.w	r4, r0, r3
 8001f16:	442c      	add	r4, r5
 8001f18:	fba0 2302 	umull	r2, r3, r0, r2
 8001f1c:	18e1      	adds	r1, r4, r3
 8001f1e:	460b      	mov	r3, r1
 8001f20:	f04f 0000 	mov.w	r0, #0
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	0c10      	lsrs	r0, r2, #16
 8001f2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f2e:	1419      	asrs	r1, r3, #16
 8001f30:	4603      	mov	r3, r0
 8001f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8001f3c:	e02f      	b.n	8001f9e <igrf16+0x4d6>
  {
    ar_pow[i] = MULT(ar_pow[i - 1], ar);
 8001f3e:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8001f42:	3b01      	subs	r3, #1
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8001f50:	4618      	mov	r0, r3
 8001f52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f60:	fb02 f501 	mul.w	r5, r2, r1
 8001f64:	fb00 f403 	mul.w	r4, r0, r3
 8001f68:	442c      	add	r4, r5
 8001f6a:	fba0 2302 	umull	r2, r3, r0, r2
 8001f6e:	18e1      	adds	r1, r4, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	f04f 0000 	mov.w	r0, #0
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	0c10      	lsrs	r0, r2, #16
 8001f7c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f80:	1419      	asrs	r1, r3, #16
 8001f82:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8001f86:	4602      	mov	r2, r0
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8001f8e:	440b      	add	r3, r1
 8001f90:	f843 2cec 	str.w	r2, [r3, #-236]
  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8001f94:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8001f9e:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8001fa2:	2b0d      	cmp	r3, #13
 8001fa4:	d9cb      	bls.n	8001f3e <igrf16+0x476>
  }

  // [b] Re-occurring sines and cosines
  int32_t sines[IGRF_DEGREE + 1], cosines[IGRF_DEGREE + 1];
  sines[0] = 0;
 8001fa6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
  cosines[0] = 1 << 16;
 8001fae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fb6:	601a      	str	r2, [r3, #0]
  sines[1] = sinrad(phi);
 8001fb8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001fbc:	f001 f8aa 	bl	8003114 <sinrad>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fc6:	605a      	str	r2, [r3, #4]
  cosines[1] = cosrad(phi);
 8001fc8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001fcc:	f001 f926 	bl	800321c <cosrad>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd6:	605a      	str	r2, [r3, #4]

  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8001fde:	e109      	b.n	80021f4 <igrf16+0x72c>
  {
    if (i & 1)
 8001fe0:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8097 	beq.w	800211c <igrf16+0x654>
    {
      sines[i] = MULT(sines[i - 1], cosines[1]) + MULT(cosines[i - 1], sines[1]);
 8001fee:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002002:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800200e:	fb02 f501 	mul.w	r5, r2, r1
 8002012:	fb00 f403 	mul.w	r4, r0, r3
 8002016:	442c      	add	r4, r5
 8002018:	fba0 2302 	umull	r2, r3, r0, r2
 800201c:	18e1      	adds	r1, r4, r3
 800201e:	460b      	mov	r3, r1
 8002020:	f04f 0000 	mov.w	r0, #0
 8002024:	f04f 0100 	mov.w	r1, #0
 8002028:	0c10      	lsrs	r0, r2, #16
 800202a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800202e:	1419      	asrs	r1, r3, #16
 8002030:	4606      	mov	r6, r0
 8002032:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	4618      	mov	r0, r3
 8002042:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002046:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	461a      	mov	r2, r3
 800204e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002052:	fb02 f501 	mul.w	r5, r2, r1
 8002056:	fb00 f403 	mul.w	r4, r0, r3
 800205a:	442c      	add	r4, r5
 800205c:	fba0 2302 	umull	r2, r3, r0, r2
 8002060:	18e1      	adds	r1, r4, r3
 8002062:	460b      	mov	r3, r1
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	0c10      	lsrs	r0, r2, #16
 800206e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002072:	1419      	asrs	r1, r3, #16
 8002074:	4603      	mov	r3, r0
 8002076:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 800207a:	18f1      	adds	r1, r6, r3
 800207c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      cosines[i] = MULT(cosines[i - 1], cosines[1]) - MULT(sines[i - 1], sines[1]);
 8002084:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	4618      	mov	r0, r3
 8002094:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002098:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020a4:	fb02 f501 	mul.w	r5, r2, r1
 80020a8:	fb00 f403 	mul.w	r4, r0, r3
 80020ac:	442c      	add	r4, r5
 80020ae:	fba0 2302 	umull	r2, r3, r0, r2
 80020b2:	18e1      	adds	r1, r4, r3
 80020b4:	460b      	mov	r3, r1
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	0c10      	lsrs	r0, r2, #16
 80020c0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020c4:	1419      	asrs	r1, r3, #16
 80020c6:	4606      	mov	r6, r0
 80020c8:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d6:	4618      	mov	r0, r3
 80020d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	461a      	mov	r2, r3
 80020e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020e8:	fb02 f501 	mul.w	r5, r2, r1
 80020ec:	fb00 f403 	mul.w	r4, r0, r3
 80020f0:	442c      	add	r4, r5
 80020f2:	fba0 2302 	umull	r2, r3, r0, r2
 80020f6:	18e1      	adds	r1, r4, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	0c10      	lsrs	r0, r2, #16
 8002104:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002108:	1419      	asrs	r1, r3, #16
 800210a:	4603      	mov	r3, r0
 800210c:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8002110:	1af1      	subs	r1, r6, r3
 8002112:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800211a:	e066      	b.n	80021ea <igrf16+0x722>
    }
    else // even
    {
      sines[i] = MULT(sines[i >> 1] << 1, cosines[i >> 1]);
 800211c:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4618      	mov	r0, r3
 8002132:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002136:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	461a      	mov	r2, r3
 800214a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800214e:	fb02 f501 	mul.w	r5, r2, r1
 8002152:	fb00 f403 	mul.w	r4, r0, r3
 8002156:	442c      	add	r4, r5
 8002158:	fba0 2302 	umull	r2, r3, r0, r2
 800215c:	18e1      	adds	r1, r4, r3
 800215e:	460b      	mov	r3, r1
 8002160:	f04f 0000 	mov.w	r0, #0
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	0c10      	lsrs	r0, r2, #16
 800216a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800216e:	1419      	asrs	r1, r3, #16
 8002170:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 8002174:	4601      	mov	r1, r0
 8002176:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      cosines[i] = MULT(cosines[i >> 1] << 1, cosines[i >> 1]) - convert(1);
 800217e:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4618      	mov	r0, r3
 8002194:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002198:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021aa:	461a      	mov	r2, r3
 80021ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021b0:	fb02 f501 	mul.w	r5, r2, r1
 80021b4:	fb00 f403 	mul.w	r4, r0, r3
 80021b8:	442c      	add	r4, r5
 80021ba:	fba0 2302 	umull	r2, r3, r0, r2
 80021be:	18e1      	adds	r1, r4, r3
 80021c0:	460b      	mov	r3, r1
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	0c10      	lsrs	r0, r2, #16
 80021cc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80021d0:	1419      	asrs	r1, r3, #16
 80021d2:	4604      	mov	r4, r0
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe ffdd 	bl	8001194 <convert>
 80021da:	4603      	mov	r3, r0
 80021dc:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 80021e0:	1ae1      	subs	r1, r4, r3
 80021e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 80021ea:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80021ee:	3301      	adds	r3, #1
 80021f0:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80021f4:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80021f8:	2b0d      	cmp	r3, #13
 80021fa:	f67f aef1 	bls.w	8001fe0 <igrf16+0x518>
    }
  }

  // Associated Legendre polynomials and its derivative
  int32_t pnm = 0, dpnm = 0; // (n, m)
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  int32_t p11 = convert(1), dp11 = 0; // (n, n)
 800220a:	2001      	movs	r0, #1
 800220c:	f7fe ffc2 	bl	8001194 <convert>
 8002210:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  int32_t p10 = convert(1), dp10 = 0; // (n-1, m)
 800221a:	2001      	movs	r0, #1
 800221c:	f7fe ffba 	bl	8001194 <convert>
 8002220:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  int32_t p20 = 0, dp20 = 0; // (n-2, m)
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

  // Field components: radial, theta, and phi
  int32_t br = 0, bt = 0, bp = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8002248:	2300      	movs	r3, #0
 800224a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
 800224e:	f000 bd75 	b.w	8002d3c <igrf16+0x1274>
  {
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8002252:	2301      	movs	r3, #1
 8002254:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8002258:	f000 bd66 	b.w	8002d28 <igrf16+0x1260>
    {
      if (m <= n)
 800225c:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 8002260:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002264:	429a      	cmp	r2, r3
 8002266:	f200 855a 	bhi.w	8002d1e <igrf16+0x1256>
      {
        if (n == m)
 800226a:	f897 215a 	ldrb.w	r2, [r7, #346]	; 0x15a
 800226e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002272:	429a      	cmp	r2, r3
 8002274:	d167      	bne.n	8002346 <igrf16+0x87e>
        {
          pnm = MULT(st, p11);
 8002276:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800227a:	4618      	mov	r0, r3
 800227c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002280:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002284:	461a      	mov	r2, r3
 8002286:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800228a:	fb02 f501 	mul.w	r5, r2, r1
 800228e:	fb00 f403 	mul.w	r4, r0, r3
 8002292:	442c      	add	r4, r5
 8002294:	fba0 2302 	umull	r2, r3, r0, r2
 8002298:	18e1      	adds	r1, r4, r3
 800229a:	460b      	mov	r3, r1
 800229c:	f04f 0000 	mov.w	r0, #0
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	0c10      	lsrs	r0, r2, #16
 80022a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80022aa:	1419      	asrs	r1, r3, #16
 80022ac:	4603      	mov	r3, r0
 80022ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
          dpnm = MULT(st, dp11) + MULT(ct, p11);
 80022b2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80022b6:	4618      	mov	r0, r3
 80022b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80022bc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80022c0:	461a      	mov	r2, r3
 80022c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022c6:	fb02 f501 	mul.w	r5, r2, r1
 80022ca:	fb00 f403 	mul.w	r4, r0, r3
 80022ce:	442c      	add	r4, r5
 80022d0:	fba0 2302 	umull	r2, r3, r0, r2
 80022d4:	18e1      	adds	r1, r4, r3
 80022d6:	460b      	mov	r3, r1
 80022d8:	f04f 0000 	mov.w	r0, #0
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	0c10      	lsrs	r0, r2, #16
 80022e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80022e6:	1419      	asrs	r1, r3, #16
 80022e8:	4606      	mov	r6, r0
 80022ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80022ee:	4618      	mov	r0, r3
 80022f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80022f4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80022f8:	461a      	mov	r2, r3
 80022fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022fe:	fb02 f501 	mul.w	r5, r2, r1
 8002302:	fb00 f403 	mul.w	r4, r0, r3
 8002306:	442c      	add	r4, r5
 8002308:	fba0 2302 	umull	r2, r3, r0, r2
 800230c:	18e1      	adds	r1, r4, r3
 800230e:	460b      	mov	r3, r1
 8002310:	f04f 0000 	mov.w	r0, #0
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	0c10      	lsrs	r0, r2, #16
 800231a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800231e:	1419      	asrs	r1, r3, #16
 8002320:	4603      	mov	r3, r0
 8002322:	4433      	add	r3, r6
 8002324:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

          p11 = pnm; dp11 = dpnm;
 8002328:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800232c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002330:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002334:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
          p20 = 0; dp20 = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002344:	e207      	b.n	8002756 <igrf16+0xc8e>
        }
        else
        {
          int32_t Knm = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

          if (n > 1)
 800234c:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002350:	2b01      	cmp	r3, #1
 8002352:	f240 816d 	bls.w	8002630 <igrf16+0xb68>
          {
            Knm = DIV(
 8002356:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 800235a:	3b01      	subs	r3, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe ff19 	bl	8001194 <convert>
 8002362:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8002366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800236e:	2002      	movs	r0, #2
 8002370:	f7fe ff10 	bl	8001194 <convert>
 8002374:	4603      	mov	r3, r0
 8002376:	141b      	asrs	r3, r3, #16
 8002378:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800237c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002380:	2b00      	cmp	r3, #0
 8002382:	da5c      	bge.n	800243e <igrf16+0x976>
 8002384:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002388:	425b      	negs	r3, r3
 800238a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800238e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002392:	461a      	mov	r2, r3
 8002394:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0101 	mov.w	r1, #1
 80023a0:	f7fe fcaa 	bl	8000cf8 <__aeabi_ldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4613      	mov	r3, r2
 80023aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023ae:	e046      	b.n	800243e <igrf16+0x976>
 80023b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01d      	beq.n	80023f8 <igrf16+0x930>
 80023bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023c0:	4618      	mov	r0, r3
 80023c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80023c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023ca:	461a      	mov	r2, r3
 80023cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80023d0:	fb02 f501 	mul.w	r5, r2, r1
 80023d4:	fb00 f403 	mul.w	r4, r0, r3
 80023d8:	442c      	add	r4, r5
 80023da:	fba0 2302 	umull	r2, r3, r0, r2
 80023de:	18e1      	adds	r1, r4, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	f04f 0000 	mov.w	r0, #0
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	0c10      	lsrs	r0, r2, #16
 80023ec:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80023f0:	1419      	asrs	r1, r3, #16
 80023f2:	4603      	mov	r3, r0
 80023f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023fc:	4618      	mov	r0, r3
 80023fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002402:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002406:	461a      	mov	r2, r3
 8002408:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800240c:	fb02 f501 	mul.w	r5, r2, r1
 8002410:	fb00 f403 	mul.w	r4, r0, r3
 8002414:	442c      	add	r4, r5
 8002416:	fba0 2302 	umull	r2, r3, r0, r2
 800241a:	18e1      	adds	r1, r4, r3
 800241c:	460b      	mov	r3, r1
 800241e:	f04f 0000 	mov.w	r0, #0
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	0c10      	lsrs	r0, r2, #16
 8002428:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800242c:	1419      	asrs	r1, r3, #16
 800242e:	4603      	mov	r3, r0
 8002430:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002434:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002438:	105b      	asrs	r3, r3, #1
 800243a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800243e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1b4      	bne.n	80023b0 <igrf16+0x8e8>
 8002446:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800244a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fea0 	bl	8001194 <convert>
 8002454:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002460:	2002      	movs	r0, #2
 8002462:	f7fe fe97 	bl	8001194 <convert>
 8002466:	4603      	mov	r3, r0
 8002468:	141b      	asrs	r3, r3, #16
 800246a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800246e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002472:	2b00      	cmp	r3, #0
 8002474:	da5c      	bge.n	8002530 <igrf16+0xa68>
 8002476:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800247a:	425b      	negs	r3, r3
 800247c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002480:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002484:	461a      	mov	r2, r3
 8002486:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0101 	mov.w	r1, #1
 8002492:	f7fe fc31 	bl	8000cf8 <__aeabi_ldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4613      	mov	r3, r2
 800249c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80024a0:	e046      	b.n	8002530 <igrf16+0xa68>
 80024a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01d      	beq.n	80024ea <igrf16+0xa22>
 80024ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80024b2:	4618      	mov	r0, r3
 80024b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80024b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80024bc:	461a      	mov	r2, r3
 80024be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80024c2:	fb02 f601 	mul.w	r6, r2, r1
 80024c6:	fb00 f503 	mul.w	r5, r0, r3
 80024ca:	4435      	add	r5, r6
 80024cc:	fba0 2302 	umull	r2, r3, r0, r2
 80024d0:	18e9      	adds	r1, r5, r3
 80024d2:	460b      	mov	r3, r1
 80024d4:	f04f 0000 	mov.w	r0, #0
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	0c10      	lsrs	r0, r2, #16
 80024de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80024e2:	1419      	asrs	r1, r3, #16
 80024e4:	4603      	mov	r3, r0
 80024e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80024ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80024ee:	4618      	mov	r0, r3
 80024f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80024f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80024f8:	461a      	mov	r2, r3
 80024fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80024fe:	fb02 f601 	mul.w	r6, r2, r1
 8002502:	fb00 f503 	mul.w	r5, r0, r3
 8002506:	4435      	add	r5, r6
 8002508:	fba0 2302 	umull	r2, r3, r0, r2
 800250c:	18e9      	adds	r1, r5, r3
 800250e:	460b      	mov	r3, r1
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	0c10      	lsrs	r0, r2, #16
 800251a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800251e:	1419      	asrs	r1, r3, #16
 8002520:	4603      	mov	r3, r0
 8002522:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002526:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800252a:	105b      	asrs	r3, r3, #1
 800252c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002530:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1b4      	bne.n	80024a2 <igrf16+0x9da>
 8002538:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800253c:	1ae3      	subs	r3, r4, r3
 800253e:	461a      	mov	r2, r3
 8002540:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002544:	1411      	asrs	r1, r2, #16
 8002546:	61f9      	str	r1, [r7, #28]
 8002548:	0413      	lsls	r3, r2, #16
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fe1f 	bl	8001194 <convert>
 8002556:	4603      	mov	r3, r0
 8002558:	461c      	mov	r4, r3
 800255a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800255e:	2002      	movs	r0, #2
 8002560:	f7fe fe18 	bl	8001194 <convert>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800256c:	fb02 f005 	mul.w	r0, r2, r5
 8002570:	fb04 f103 	mul.w	r1, r4, r3
 8002574:	4401      	add	r1, r0
 8002576:	fba4 2302 	umull	r2, r3, r4, r2
 800257a:	4419      	add	r1, r3
 800257c:	460b      	mov	r3, r1
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	0c10      	lsrs	r0, r2, #16
 8002588:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800258c:	1419      	asrs	r1, r3, #16
 800258e:	4604      	mov	r4, r0
 8002590:	2001      	movs	r0, #1
 8002592:	f7fe fdff 	bl	8001194 <convert>
 8002596:	4603      	mov	r3, r0
 8002598:	1ae3      	subs	r3, r4, r3
 800259a:	461c      	mov	r4, r3
 800259c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7fe fdf7 	bl	8001194 <convert>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4698      	mov	r8, r3
 80025aa:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80025ae:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fdee 	bl	8001194 <convert>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80025c0:	fb02 f009 	mul.w	r0, r2, r9
 80025c4:	fb08 f103 	mul.w	r1, r8, r3
 80025c8:	4401      	add	r1, r0
 80025ca:	fba8 2302 	umull	r2, r3, r8, r2
 80025ce:	4419      	add	r1, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0c10      	lsrs	r0, r2, #16
 80025dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80025e0:	1419      	asrs	r1, r3, #16
 80025e2:	4606      	mov	r6, r0
 80025e4:	2003      	movs	r0, #3
 80025e6:	f7fe fdd5 	bl	8001194 <convert>
 80025ea:	4603      	mov	r3, r0
 80025ec:	1af3      	subs	r3, r6, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80025f4:	fb02 f005 	mul.w	r0, r2, r5
 80025f8:	fb04 f103 	mul.w	r1, r4, r3
 80025fc:	4401      	add	r1, r0
 80025fe:	fba4 2302 	umull	r2, r3, r4, r2
 8002602:	4419      	add	r1, r3
 8002604:	460b      	mov	r3, r1
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	0c10      	lsrs	r0, r2, #16
 8002610:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002614:	1419      	asrs	r1, r3, #16
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800261e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002622:	f7fe fb69 	bl	8000cf8 <__aeabi_ldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            		POW(convert(n - 1), convert(2)) - POW(convert(m), convert(2)),
					MULT((MULT(convert(n), convert(2)) - convert(1)), MULT(convert(2), convert(n)) - convert(3))
					);
          }

          pnm = MULT(ct, p10) - MULT(Knm,p20);
 8002630:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002634:	4618      	mov	r0, r3
 8002636:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800263a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800263e:	461a      	mov	r2, r3
 8002640:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002644:	fb02 f501 	mul.w	r5, r2, r1
 8002648:	fb00 f403 	mul.w	r4, r0, r3
 800264c:	442c      	add	r4, r5
 800264e:	fba0 2302 	umull	r2, r3, r0, r2
 8002652:	18e1      	adds	r1, r4, r3
 8002654:	460b      	mov	r3, r1
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0c10      	lsrs	r0, r2, #16
 8002660:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002664:	1419      	asrs	r1, r3, #16
 8002666:	4606      	mov	r6, r0
 8002668:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800266c:	4618      	mov	r0, r3
 800266e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002672:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002676:	461a      	mov	r2, r3
 8002678:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800267c:	fb02 f501 	mul.w	r5, r2, r1
 8002680:	fb00 f403 	mul.w	r4, r0, r3
 8002684:	442c      	add	r4, r5
 8002686:	fba0 2302 	umull	r2, r3, r0, r2
 800268a:	18e1      	adds	r1, r4, r3
 800268c:	460b      	mov	r3, r1
 800268e:	f04f 0000 	mov.w	r0, #0
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	0c10      	lsrs	r0, r2, #16
 8002698:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800269c:	1419      	asrs	r1, r3, #16
 800269e:	4603      	mov	r3, r0
 80026a0:	1af3      	subs	r3, r6, r3
 80026a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
          dpnm = MULT(ct, dp10) - MULT(st, p10) - MULT(Knm, dp20);
 80026a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80026aa:	4618      	mov	r0, r3
 80026ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80026b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80026b4:	461a      	mov	r2, r3
 80026b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80026ba:	fb02 f501 	mul.w	r5, r2, r1
 80026be:	fb00 f403 	mul.w	r4, r0, r3
 80026c2:	442c      	add	r4, r5
 80026c4:	fba0 2302 	umull	r2, r3, r0, r2
 80026c8:	18e1      	adds	r1, r4, r3
 80026ca:	460b      	mov	r3, r1
 80026cc:	f04f 0000 	mov.w	r0, #0
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	0c10      	lsrs	r0, r2, #16
 80026d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80026da:	1419      	asrs	r1, r3, #16
 80026dc:	4606      	mov	r6, r0
 80026de:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80026e2:	4618      	mov	r0, r3
 80026e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80026e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80026ec:	461a      	mov	r2, r3
 80026ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80026f2:	fb02 f501 	mul.w	r5, r2, r1
 80026f6:	fb00 f403 	mul.w	r4, r0, r3
 80026fa:	442c      	add	r4, r5
 80026fc:	fba0 2302 	umull	r2, r3, r0, r2
 8002700:	18e1      	adds	r1, r4, r3
 8002702:	460b      	mov	r3, r1
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	0c10      	lsrs	r0, r2, #16
 800270e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002712:	1419      	asrs	r1, r3, #16
 8002714:	4603      	mov	r3, r0
 8002716:	1af4      	subs	r4, r6, r3
 8002718:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800271c:	4618      	mov	r0, r3
 800271e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002722:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002726:	461a      	mov	r2, r3
 8002728:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800272c:	fb02 f601 	mul.w	r6, r2, r1
 8002730:	fb00 f503 	mul.w	r5, r0, r3
 8002734:	4435      	add	r5, r6
 8002736:	fba0 2302 	umull	r2, r3, r0, r2
 800273a:	18e9      	adds	r1, r5, r3
 800273c:	460b      	mov	r3, r1
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	0c10      	lsrs	r0, r2, #16
 8002748:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800274c:	1419      	asrs	r1, r3, #16
 800274e:	4603      	mov	r3, r0
 8002750:	1ae3      	subs	r3, r4, r3
 8002752:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        }

        p20 = p10; dp20 = dp10;
 8002756:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800275a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800275e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002762:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        p10 = pnm; dp10 = dpnm;
 8002766:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800276a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800276e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002772:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

        // Linear interpolation of g and h
        const int k = ((n * (n + 1)) >> 1) + m - 1;
 8002776:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 800277a:	f897 215a 	ldrb.w	r2, [r7, #346]	; 0x15a
 800277e:	3201      	adds	r2, #1
 8002780:	fb02 f303 	mul.w	r3, r2, r3
 8002784:	105a      	asrs	r2, r3, #1
 8002786:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800278a:	4413      	add	r3, r2
 800278c:	3b01      	subs	r3, #1
 800278e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        const int32_t g = (g_val16[k] + MULT(g_sv16[k],years)) >> 2;
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <igrf16+0xe84>)
 8002794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002798:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800279c:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <igrf16+0xe88>)
 800279e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	4618      	mov	r0, r3
 80027a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80027ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80027b0:	461a      	mov	r2, r3
 80027b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027b6:	fb02 f601 	mul.w	r6, r2, r1
 80027ba:	fb00 f503 	mul.w	r5, r0, r3
 80027be:	4435      	add	r5, r6
 80027c0:	fba0 2302 	umull	r2, r3, r0, r2
 80027c4:	18e9      	adds	r1, r5, r3
 80027c6:	460b      	mov	r3, r1
 80027c8:	f04f 0000 	mov.w	r0, #0
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	0c10      	lsrs	r0, r2, #16
 80027d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80027d6:	1419      	asrs	r1, r3, #16
 80027d8:	4603      	mov	r3, r0
 80027da:	4423      	add	r3, r4
 80027dc:	109b      	asrs	r3, r3, #2
 80027de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        const int32_t h = (h_val16[k] + MULT(h_sv16[k],years)) >> 2;
 80027e2:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <igrf16+0xe8c>)
 80027e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80027ec:	4a5a      	ldr	r2, [pc, #360]	; (8002958 <igrf16+0xe90>)
 80027ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	4618      	mov	r0, r3
 80027f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80027fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002800:	461a      	mov	r2, r3
 8002802:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002806:	fb02 f601 	mul.w	r6, r2, r1
 800280a:	fb00 f503 	mul.w	r5, r0, r3
 800280e:	4435      	add	r5, r6
 8002810:	fba0 2302 	umull	r2, r3, r0, r2
 8002814:	18e9      	adds	r1, r5, r3
 8002816:	460b      	mov	r3, r1
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0c10      	lsrs	r0, r2, #16
 8002822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002826:	1419      	asrs	r1, r3, #16
 8002828:	4603      	mov	r3, r0
 800282a:	4423      	add	r3, r4
 800282c:	109b      	asrs	r3, r3, #2
 800282e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

        if (m == 0)
 8002832:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8090 	bne.w	800295c <igrf16+0xe94>
        {
          const int32_t temp = MULT(ar_pow[n - 1], g);
 800283c:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002840:	3b01      	subs	r3, #1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002848:	4413      	add	r3, r2
 800284a:	f853 3cec 	ldr.w	r3, [r3, #-236]
 800284e:	4618      	mov	r0, r3
 8002850:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002854:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002858:	461a      	mov	r2, r3
 800285a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800285e:	fb02 f501 	mul.w	r5, r2, r1
 8002862:	fb00 f403 	mul.w	r4, r0, r3
 8002866:	442c      	add	r4, r5
 8002868:	fba0 2302 	umull	r2, r3, r0, r2
 800286c:	18e1      	adds	r1, r4, r3
 800286e:	460b      	mov	r3, r1
 8002870:	f04f 0000 	mov.w	r0, #0
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	0c10      	lsrs	r0, r2, #16
 800287a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800287e:	1419      	asrs	r1, r3, #16
 8002880:	4603      	mov	r3, r0
 8002882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
          br += MULT(MULT(temp, convert(n + 1)), pnm);
 8002886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800288a:	461c      	mov	r4, r3
 800288c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002890:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002894:	3301      	adds	r3, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fc7c 	bl	8001194 <convert>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028a4:	fb02 f005 	mul.w	r0, r2, r5
 80028a8:	fb04 f103 	mul.w	r1, r4, r3
 80028ac:	4401      	add	r1, r0
 80028ae:	fba4 2302 	umull	r2, r3, r4, r2
 80028b2:	4419      	add	r1, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0c10      	lsrs	r0, r2, #16
 80028c0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80028c4:	1419      	asrs	r1, r3, #16
 80028c6:	4603      	mov	r3, r0
 80028c8:	4618      	mov	r0, r3
 80028ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80028d2:	461a      	mov	r2, r3
 80028d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028d8:	fb02 f501 	mul.w	r5, r2, r1
 80028dc:	fb00 f403 	mul.w	r4, r0, r3
 80028e0:	442c      	add	r4, r5
 80028e2:	fba0 2302 	umull	r2, r3, r0, r2
 80028e6:	18e1      	adds	r1, r4, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	0c10      	lsrs	r0, r2, #16
 80028f4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80028f8:	1419      	asrs	r1, r3, #16
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002900:	4413      	add	r3, r2
 8002902:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
          bt -= MULT(temp,dpnm);
 8002906:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800290a:	4618      	mov	r0, r3
 800290c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002910:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002914:	461a      	mov	r2, r3
 8002916:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800291a:	fb02 f501 	mul.w	r5, r2, r1
 800291e:	fb00 f403 	mul.w	r4, r0, r3
 8002922:	442c      	add	r4, r5
 8002924:	fba0 2302 	umull	r2, r3, r0, r2
 8002928:	18e1      	adds	r1, r4, r3
 800292a:	460b      	mov	r3, r1
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0c10      	lsrs	r0, r2, #16
 8002936:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800293a:	1419      	asrs	r1, r3, #16
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002948:	e17c      	b.n	8002c44 <igrf16+0x117c>
 800294a:	bf00      	nop
 800294c:	0800d2e0 	.word	0x0800d2e0
 8002950:	0800d620 	.word	0x0800d620
 8002954:	0800d480 	.word	0x0800d480
 8002958:	0800d7c0 	.word	0x0800d7c0
        }
        else
        {
          const int32_t hsin = MULT(h, sines[m]);
 800295c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002960:	4618      	mov	r0, r3
 8002962:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002966:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 800296a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800296e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002972:	461a      	mov	r2, r3
 8002974:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002978:	fb02 f501 	mul.w	r5, r2, r1
 800297c:	fb00 f403 	mul.w	r4, r0, r3
 8002980:	442c      	add	r4, r5
 8002982:	fba0 2302 	umull	r2, r3, r0, r2
 8002986:	18e1      	adds	r1, r4, r3
 8002988:	460b      	mov	r3, r1
 800298a:	f04f 0000 	mov.w	r0, #0
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	0c10      	lsrs	r0, r2, #16
 8002994:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002998:	1419      	asrs	r1, r3, #16
 800299a:	4603      	mov	r3, r0
 800299c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
          const int32_t hcos = MULT(h, cosines[m]);
 80029a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029a4:	4618      	mov	r0, r3
 80029a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80029aa:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 80029ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	461a      	mov	r2, r3
 80029b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029bc:	fb02 f501 	mul.w	r5, r2, r1
 80029c0:	fb00 f403 	mul.w	r4, r0, r3
 80029c4:	442c      	add	r4, r5
 80029c6:	fba0 2302 	umull	r2, r3, r0, r2
 80029ca:	18e1      	adds	r1, r4, r3
 80029cc:	460b      	mov	r3, r1
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	0c10      	lsrs	r0, r2, #16
 80029d8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80029dc:	1419      	asrs	r1, r3, #16
 80029de:	4603      	mov	r3, r0
 80029e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
          const int32_t gsin = MULT(g, sines[m]);
 80029e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029e8:	4618      	mov	r0, r3
 80029ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80029ee:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 80029f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	461a      	mov	r2, r3
 80029fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a00:	fb02 f501 	mul.w	r5, r2, r1
 8002a04:	fb00 f403 	mul.w	r4, r0, r3
 8002a08:	442c      	add	r4, r5
 8002a0a:	fba0 2302 	umull	r2, r3, r0, r2
 8002a0e:	18e1      	adds	r1, r4, r3
 8002a10:	460b      	mov	r3, r1
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	0c10      	lsrs	r0, r2, #16
 8002a1c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002a20:	1419      	asrs	r1, r3, #16
 8002a22:	4603      	mov	r3, r0
 8002a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          const int32_t gcos = MULT(g, cosines[m]);
 8002a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002a32:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 8002a36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a44:	fb02 f501 	mul.w	r5, r2, r1
 8002a48:	fb00 f403 	mul.w	r4, r0, r3
 8002a4c:	442c      	add	r4, r5
 8002a4e:	fba0 2302 	umull	r2, r3, r0, r2
 8002a52:	18e1      	adds	r1, r4, r3
 8002a54:	460b      	mov	r3, r1
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0c10      	lsrs	r0, r2, #16
 8002a60:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002a64:	1419      	asrs	r1, r3, #16
 8002a66:	4603      	mov	r3, r0
 8002a68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          const int32_t temp = MULT(ar_pow[n - 1], gcos + hsin);
 8002a6c:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002a70:	3b01      	subs	r3, #1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002a78:	4413      	add	r3, r2
 8002a7a:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002a84:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002a88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002a8c:	4413      	add	r3, r2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a94:	fb02 f501 	mul.w	r5, r2, r1
 8002a98:	fb00 f403 	mul.w	r4, r0, r3
 8002a9c:	442c      	add	r4, r5
 8002a9e:	fba0 2302 	umull	r2, r3, r0, r2
 8002aa2:	18e1      	adds	r1, r4, r3
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0c10      	lsrs	r0, r2, #16
 8002ab0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002ab4:	1419      	asrs	r1, r3, #16
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

          br += MULT(temp, MULT(convert(n + 1), pnm));
 8002abc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ac0:	461c      	mov	r4, r3
 8002ac2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002ac6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002aca:	3301      	adds	r3, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fb61 	bl	8001194 <convert>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ada:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ade:	461a      	mov	r2, r3
 8002ae0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ae4:	fb02 fc01 	mul.w	ip, r2, r1
 8002ae8:	fb00 f603 	mul.w	r6, r0, r3
 8002aec:	4466      	add	r6, ip
 8002aee:	fba0 2302 	umull	r2, r3, r0, r2
 8002af2:	18f1      	adds	r1, r6, r3
 8002af4:	460b      	mov	r3, r1
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0c10      	lsrs	r0, r2, #16
 8002b00:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002b04:	1419      	asrs	r1, r3, #16
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b0e:	fb02 f005 	mul.w	r0, r2, r5
 8002b12:	fb04 f103 	mul.w	r1, r4, r3
 8002b16:	4401      	add	r1, r0
 8002b18:	fba4 2302 	umull	r2, r3, r4, r2
 8002b1c:	4419      	add	r1, r3
 8002b1e:	460b      	mov	r3, r1
 8002b20:	f04f 0000 	mov.w	r0, #0
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	0c10      	lsrs	r0, r2, #16
 8002b2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002b2e:	1419      	asrs	r1, r3, #16
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b36:	4413      	add	r3, r2
 8002b38:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
          bt -= MULT(temp, dpnm);
 8002b3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b40:	4618      	mov	r0, r3
 8002b42:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b50:	fb02 f501 	mul.w	r5, r2, r1
 8002b54:	fb00 f403 	mul.w	r4, r0, r3
 8002b58:	442c      	add	r4, r5
 8002b5a:	fba0 2302 	umull	r2, r3, r0, r2
 8002b5e:	18e1      	adds	r1, r4, r3
 8002b60:	460b      	mov	r3, r1
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0c10      	lsrs	r0, r2, #16
 8002b6c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002b70:	1419      	asrs	r1, r3, #16
 8002b72:	4602      	mov	r2, r0
 8002b74:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
          bp -= MULT(ar_pow[n - 1], MULT(convert(m), MULT((-gsin + hcos), pnm)));
 8002b7e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002b82:	3b01      	subs	r3, #1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f853 3cec 	ldr.w	r3, [r3, #-236]
 8002b90:	461c      	mov	r4, r3
 8002b92:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fafa 	bl	8001194 <convert>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4698      	mov	r8, r3
 8002ba4:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002ba8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002bac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002bb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002bc2:	fb02 fc01 	mul.w	ip, r2, r1
 8002bc6:	fb00 f603 	mul.w	r6, r0, r3
 8002bca:	4466      	add	r6, ip
 8002bcc:	fba0 2302 	umull	r2, r3, r0, r2
 8002bd0:	18f1      	adds	r1, r6, r3
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	f04f 0000 	mov.w	r0, #0
 8002bd8:	f04f 0100 	mov.w	r1, #0
 8002bdc:	0c10      	lsrs	r0, r2, #16
 8002bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002be2:	1419      	asrs	r1, r3, #16
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002bec:	fb02 f009 	mul.w	r0, r2, r9
 8002bf0:	fb08 f103 	mul.w	r1, r8, r3
 8002bf4:	4401      	add	r1, r0
 8002bf6:	fba8 2302 	umull	r2, r3, r8, r2
 8002bfa:	4419      	add	r1, r3
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	0c10      	lsrs	r0, r2, #16
 8002c08:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c0c:	1419      	asrs	r1, r3, #16
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c16:	fb02 f005 	mul.w	r0, r2, r5
 8002c1a:	fb04 f103 	mul.w	r1, r4, r3
 8002c1e:	4401      	add	r1, r0
 8002c20:	fba4 2302 	umull	r2, r3, r4, r2
 8002c24:	4419      	add	r1, r3
 8002c26:	460b      	mov	r3, r1
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	0c10      	lsrs	r0, r2, #16
 8002c32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c36:	1419      	asrs	r1, r3, #16
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        }
        printf("%i,%i,%i,%f,%f,%f,%f,%f,%f,%f\r\n", n, m, k, fixed_to_float(g), fixed_to_float(h), fixed_to_float(pnm),fixed_to_float(dpnm), fixed_to_float(br), fixed_to_float(bt), fixed_to_float(bp));
 8002c44:	f897 615a 	ldrb.w	r6, [r7, #346]	; 0x15a
 8002c48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002c52:	f7fe fe25 	bl	80018a0 <fixed_to_float>
 8002c56:	ee10 3a10 	vmov	r3, s0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fcac 	bl	80005b8 <__aeabi_f2d>
 8002c60:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002c64:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002c68:	f7fe fe1a 	bl	80018a0 <fixed_to_float>
 8002c6c:	ee10 3a10 	vmov	r3, s0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fca1 	bl	80005b8 <__aeabi_f2d>
 8002c76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c7a:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8002c7e:	f7fe fe0f 	bl	80018a0 <fixed_to_float>
 8002c82:	ee10 3a10 	vmov	r3, s0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc96 	bl	80005b8 <__aeabi_f2d>
 8002c8c:	e9c7 0100 	strd	r0, r1, [r7]
 8002c90:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002c94:	f7fe fe04 	bl	80018a0 <fixed_to_float>
 8002c98:	ee10 3a10 	vmov	r3, s0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fc8b 	bl	80005b8 <__aeabi_f2d>
 8002ca2:	4682      	mov	sl, r0
 8002ca4:	468b      	mov	fp, r1
 8002ca6:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8002caa:	f7fe fdf9 	bl	80018a0 <fixed_to_float>
 8002cae:	ee10 3a10 	vmov	r3, s0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc80 	bl	80005b8 <__aeabi_f2d>
 8002cb8:	4680      	mov	r8, r0
 8002cba:	4689      	mov	r9, r1
 8002cbc:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8002cc0:	f7fe fdee 	bl	80018a0 <fixed_to_float>
 8002cc4:	ee10 3a10 	vmov	r3, s0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc75 	bl	80005b8 <__aeabi_f2d>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8002cd6:	f7fe fde3 	bl	80018a0 <fixed_to_float>
 8002cda:	ee10 3a10 	vmov	r3, s0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc6a 	bl	80005b8 <__aeabi_f2d>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002cec:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002cf0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002cf4:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002cf8:	ed97 7b00 	vldr	d7, [r7]
 8002cfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d00:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d08:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d0c:	ed8d 7b00 	vstr	d7, [sp]
 8002d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d16:	4631      	mov	r1, r6
 8002d18:	4867      	ldr	r0, [pc, #412]	; (8002eb8 <igrf16+0x13f0>)
 8002d1a:	f006 f845 	bl	8008da8 <iprintf>
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8002d1e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002d22:	3301      	adds	r3, #1
 8002d24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8002d28:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002d2c:	2b0d      	cmp	r3, #13
 8002d2e:	f67f aa95 	bls.w	800225c <igrf16+0x794>
  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8002d32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d36:	3301      	adds	r3, #1
 8002d38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
 8002d3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d40:	2b0d      	cmp	r3, #13
 8002d42:	f67f aa86 	bls.w	8002252 <igrf16+0x78a>
      }
    }
  }

  bp = DIV(bp, st);
 8002d46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d50:	1411      	asrs	r1, r2, #16
 8002d52:	6179      	str	r1, [r7, #20]
 8002d54:	0413      	lsls	r3, r2, #16
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d66:	f7fd ffc7 	bl	8000cf8 <__aeabi_ldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4613      	mov	r3, r2
 8002d70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  // Geocentric NED
  b[0] = -bt;
 8002d74:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d78:	425a      	negs	r2, r3
 8002d7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d7e:	601a      	str	r2, [r3, #0]
  b[1] = bp;
 8002d80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d84:	3304      	adds	r3, #4
 8002d86:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002d8a:	601a      	str	r2, [r3, #0]
  b[2] = -br;
 8002d8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d90:	3308      	adds	r3, #8
 8002d92:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002d96:	4252      	negs	r2, r2
 8002d98:	601a      	str	r2, [r3, #0]

  // Geocentric to geodetic NED
  if (f == IGRF_GEODETIC)
 8002d9a:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8083 	bne.w	8002eaa <igrf16+0x13e2>
  {
    int32_t temp = b[0];
 8002da4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    b[0] = MULT(cd, b[0]) + MULT(sd, b[2]);
 8002dae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002db2:	4618      	mov	r0, r3
 8002db4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002db8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dc4:	fb02 f501 	mul.w	r5, r2, r1
 8002dc8:	fb00 f403 	mul.w	r4, r0, r3
 8002dcc:	442c      	add	r4, r5
 8002dce:	fba0 2302 	umull	r2, r3, r0, r2
 8002dd2:	18e1      	adds	r1, r4, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	f04f 0000 	mov.w	r0, #0
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	0c10      	lsrs	r0, r2, #16
 8002de0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002de4:	1419      	asrs	r1, r3, #16
 8002de6:	4606      	mov	r6, r0
 8002de8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002dec:	4618      	mov	r0, r3
 8002dee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002df2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002df6:	3308      	adds	r3, #8
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e00:	fb02 f501 	mul.w	r5, r2, r1
 8002e04:	fb00 f403 	mul.w	r4, r0, r3
 8002e08:	442c      	add	r4, r5
 8002e0a:	fba0 2302 	umull	r2, r3, r0, r2
 8002e0e:	18e1      	adds	r1, r4, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	0c10      	lsrs	r0, r2, #16
 8002e1c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e20:	1419      	asrs	r1, r3, #16
 8002e22:	4603      	mov	r3, r0
 8002e24:	18f2      	adds	r2, r6, r3
 8002e26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e2a:	601a      	str	r2, [r3, #0]
    b[2] = MULT(cd, b[2]) - MULT(sd, temp);
 8002e2c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e30:	4618      	mov	r0, r3
 8002e32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e44:	fb02 f501 	mul.w	r5, r2, r1
 8002e48:	fb00 f403 	mul.w	r4, r0, r3
 8002e4c:	442c      	add	r4, r5
 8002e4e:	fba0 2302 	umull	r2, r3, r0, r2
 8002e52:	18e1      	adds	r1, r4, r3
 8002e54:	460b      	mov	r3, r1
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	0c10      	lsrs	r0, r2, #16
 8002e60:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e64:	1419      	asrs	r1, r3, #16
 8002e66:	4606      	mov	r6, r0
 8002e68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e76:	461a      	mov	r2, r3
 8002e78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e7c:	fb02 f501 	mul.w	r5, r2, r1
 8002e80:	fb00 f403 	mul.w	r4, r0, r3
 8002e84:	442c      	add	r4, r5
 8002e86:	fba0 2302 	umull	r2, r3, r0, r2
 8002e8a:	18e1      	adds	r1, r4, r3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0c10      	lsrs	r0, r2, #16
 8002e98:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e9c:	1419      	asrs	r1, r3, #16
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	1ab2      	subs	r2, r6, r2
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  return 1;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb8:	0800d28c 	.word	0x0800d28c

08002ebc <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec8:	f001 fab8 	bl	800443c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f000 ff41 	bl	8003d54 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eda:	f001 faaf 	bl	800443c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f000 ff38 	bl	8003d54 <HAL_Delay>
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	2110      	movs	r1, #16
 8002efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f02:	f001 fa9b 	bl	800443c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	2120      	movs	r1, #32
 8002f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1a:	f001 fa8f 	bl	800443c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f32:	f001 fa83 	bl	800443c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	2108      	movs	r1, #8
 8002f46:	4804      	ldr	r0, [pc, #16]	; (8002f58 <LCD_Send4Bits+0x70>)
 8002f48:	f001 fa78 	bl	800443c <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8002f4c:	f7ff ffb6 	bl	8002ebc <LCD_EnablePulse>
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	48000400 	.word	0x48000400

08002f5c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2101      	movs	r1, #1
 8002f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f6e:	f001 fa65 	bl	800443c <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ffb5 	bl	8002ee8 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ffae 	bl	8002ee8 <LCD_Send4Bits>
    HAL_Delay(2);
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f000 fee1 	bl	8003d54 <HAL_Delay>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <LCD_Init>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
    LCD_SendCommand(0x80 | addr);
}

void LCD_Init(void) {
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 8002f9e:	2028      	movs	r0, #40	; 0x28
 8002fa0:	f000 fed8 	bl	8003d54 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f7ff ff9f 	bl	8002ee8 <LCD_Send4Bits>
 8002faa:	2005      	movs	r0, #5
 8002fac:	f000 fed2 	bl	8003d54 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8002fb0:	2003      	movs	r0, #3
 8002fb2:	f7ff ff99 	bl	8002ee8 <LCD_Send4Bits>
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 fecc 	bl	8003d54 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f7ff ff93 	bl	8002ee8 <LCD_Send4Bits>
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f000 fec6 	bl	8003d54 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 8002fc8:	2002      	movs	r0, #2
 8002fca:	f7ff ff8d 	bl	8002ee8 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8002fce:	2028      	movs	r0, #40	; 0x28
 8002fd0:	f7ff ffc4 	bl	8002f5c <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8002fd4:	200c      	movs	r0, #12
 8002fd6:	f7ff ffc1 	bl	8002f5c <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 8002fda:	2006      	movs	r0, #6
 8002fdc:	f7ff ffbe 	bl	8002f5c <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7ff ffbb 	bl	8002f5c <LCD_SendCommand>
    HAL_Delay(2);
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f000 feb4 	bl	8003d54 <HAL_Delay>
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8002ff8:	f240 5322 	movw	r3, #1314	; 0x522
 8002ffc:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8002ffe:	f107 021c 	add.w	r2, r7, #28
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2302      	movs	r3, #2
 800300a:	21d6      	movs	r1, #214	; 0xd6
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 fac9 	bl	80045a4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8003012:	2064      	movs	r0, #100	; 0x64
 8003014:	f000 fe9e 	bl	8003d54 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 8003018:	f246 0320 	movw	r3, #24608	; 0x6020
 800301c:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 800301e:	f107 0218 	add.w	r2, r7, #24
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2302      	movs	r3, #2
 800302a:	21d6      	movs	r1, #214	; 0xd6
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f001 fab9 	bl	80045a4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003032:	200a      	movs	r0, #10
 8003034:	f000 fe8e 	bl	8003d54 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 8003038:	f247 0320 	movw	r3, #28704	; 0x7020
 800303c:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 800303e:	f107 0214 	add.w	r2, r7, #20
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2302      	movs	r3, #2
 800304a:	213c      	movs	r1, #60	; 0x3c
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 faa9 	bl	80045a4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003052:	200a      	movs	r0, #10
 8003054:	f000 fe7e 	bl	8003d54 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8003058:	2322      	movs	r3, #34	; 0x22
 800305a:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 800305c:	f107 0210 	add.w	r2, r7, #16
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2302      	movs	r3, #2
 8003068:	213c      	movs	r1, #60	; 0x3c
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f001 fa9a 	bl	80045a4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003070:	200a      	movs	r0, #10
 8003072:	f000 fe6f 	bl	8003d54 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8003076:	f640 4323 	movw	r3, #3107	; 0xc23
 800307a:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2302      	movs	r3, #2
 8003088:	213c      	movs	r1, #60	; 0x3c
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f001 fa8a 	bl	80045a4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003090:	200a      	movs	r0, #10
 8003092:	f000 fe5f 	bl	8003d54 <HAL_Delay>
}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <sinus>:
      -402,   -352,   -302,   -251,   -201,   -151,   -101,    -50,
};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 80030a8:	e003      	b.n	80030b2 <sinus+0x12>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	dbf8      	blt.n	80030aa <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	425a      	negs	r2, r3
 80030bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80030c4:	bf58      	it	pl
 80030c6:	4253      	negpl	r3, r2
 80030c8:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 80030ca:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <sinus+0x44>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030d2:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7fe f851 	bl	800117c <expand>
 80030da:	4603      	mov	r3, r0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	0800d960 	.word	0x0800d960

080030e8 <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030f6:	425a      	negs	r2, r3
 80030f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030fc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003100:	bf58      	it	pl
 8003102:	4253      	negpl	r3, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ffcb 	bl	80030a0 <sinus>
 800310a:	4603      	mov	r3, r0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8003114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 800311e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003122:	f7fe f837 	bl	8001194 <convert>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800312e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003132:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8003136:	2002      	movs	r0, #2
 8003138:	f7fe f82c 	bl	8001194 <convert>
 800313c:	4603      	mov	r3, r0
 800313e:	461c      	mov	r4, r3
 8003140:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8003144:	4622      	mov	r2, r4
 8003146:	462b      	mov	r3, r5
 8003148:	1891      	adds	r1, r2, r2
 800314a:	6039      	str	r1, [r7, #0]
 800314c:	415b      	adcs	r3, r3
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003154:	1912      	adds	r2, r2, r4
 8003156:	eb45 0303 	adc.w	r3, r5, r3
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0199      	lsls	r1, r3, #6
 8003164:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8003168:	0190      	lsls	r0, r2, #6
 800316a:	1812      	adds	r2, r2, r0
 800316c:	eb41 0303 	adc.w	r3, r1, r3
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	0159      	lsls	r1, r3, #5
 800317a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317e:	0150      	lsls	r0, r2, #5
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	1b12      	subs	r2, r2, r4
 8003186:	eb63 0305 	sbc.w	r3, r3, r5
 800318a:	f04f 0000 	mov.w	r0, #0
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	0159      	lsls	r1, r3, #5
 8003194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003198:	0150      	lsls	r0, r2, #5
 800319a:	eb12 0800 	adds.w	r8, r2, r0
 800319e:	eb43 0901 	adc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80031ae:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80031b2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80031b6:	4613      	mov	r3, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031be:	4650      	mov	r0, sl
 80031c0:	4659      	mov	r1, fp
 80031c2:	f7fd fd99 	bl	8000cf8 <__aeabi_ldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4613      	mov	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4618      	mov	r0, r3
 80031d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	461a      	mov	r2, r3
 80031da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031de:	fb02 f501 	mul.w	r5, r2, r1
 80031e2:	fb00 f403 	mul.w	r4, r0, r3
 80031e6:	442c      	add	r4, r5
 80031e8:	fba0 2302 	umull	r2, r3, r0, r2
 80031ec:	18e1      	adds	r1, r4, r3
 80031ee:	460b      	mov	r3, r1
 80031f0:	f04f 0000 	mov.w	r0, #0
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	0c10      	lsrs	r0, r2, #16
 80031fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80031fe:	1419      	asrs	r1, r3, #16
 8003200:	4603      	mov	r3, r0
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd ffd2 	bl	80011ac <inconvert>
 8003208:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 800320a:	6938      	ldr	r0, [r7, #16]
 800320c:	f7ff ff48 	bl	80030a0 <sinus>
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800321c <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 800321c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8003226:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800322a:	f7fd ffb3 	bl	8001194 <convert>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003236:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800323a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 800323e:	2002      	movs	r0, #2
 8003240:	f7fd ffa8 	bl	8001194 <convert>
 8003244:	4603      	mov	r3, r0
 8003246:	461c      	mov	r4, r3
 8003248:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800324c:	4622      	mov	r2, r4
 800324e:	462b      	mov	r3, r5
 8003250:	1891      	adds	r1, r2, r2
 8003252:	6039      	str	r1, [r7, #0]
 8003254:	415b      	adcs	r3, r3
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800325c:	1912      	adds	r2, r2, r4
 800325e:	eb45 0303 	adc.w	r3, r5, r3
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	0199      	lsls	r1, r3, #6
 800326c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8003270:	0190      	lsls	r0, r2, #6
 8003272:	1812      	adds	r2, r2, r0
 8003274:	eb41 0303 	adc.w	r3, r1, r3
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	0159      	lsls	r1, r3, #5
 8003282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003286:	0150      	lsls	r0, r2, #5
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	1b12      	subs	r2, r2, r4
 800328e:	eb63 0305 	sbc.w	r3, r3, r5
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	0159      	lsls	r1, r3, #5
 800329c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a0:	0150      	lsls	r0, r2, #5
 80032a2:	eb12 0800 	adds.w	r8, r2, r0
 80032a6:	eb43 0901 	adc.w	r9, r3, r1
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80032b6:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80032ba:	ea4f 4329 	mov.w	r3, r9, asr #16
 80032be:	4613      	mov	r3, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032c6:	4650      	mov	r0, sl
 80032c8:	4659      	mov	r1, fp
 80032ca:	f7fd fd15 	bl	8000cf8 <__aeabi_ldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4613      	mov	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	461a      	mov	r2, r3
 80032e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032e6:	fb02 f501 	mul.w	r5, r2, r1
 80032ea:	fb00 f403 	mul.w	r4, r0, r3
 80032ee:	442c      	add	r4, r5
 80032f0:	fba0 2302 	umull	r2, r3, r0, r2
 80032f4:	18e1      	adds	r1, r4, r3
 80032f6:	460b      	mov	r3, r1
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0c10      	lsrs	r0, r2, #16
 8003302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003306:	1419      	asrs	r1, r3, #16
 8003308:	4603      	mov	r3, r0
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd ff4e 	bl	80011ac <inconvert>
 8003310:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 8003312:	6938      	ldr	r0, [r7, #16]
 8003314:	f7ff fee8 	bl	80030e8 <cosinus>
 8003318:	4603      	mov	r3, r0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b094      	sub	sp, #80	; 0x50
 8003328:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800332a:	f000 fca2 	bl	8003c72 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800332e:	f000 f8a5 	bl	800347c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003332:	f000 f9bb 	bl	80036ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003336:	f000 f96d 	bl	8003614 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800333a:	f000 f91f 	bl	800357c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800333e:	f000 f8dd 	bl	80034fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // lsm setup
  lsmCtrlReg(&hi2c3);
 8003342:	4843      	ldr	r0, [pc, #268]	; (8003450 <main+0x12c>)
 8003344:	f7ff fe54 	bl	8002ff0 <lsmCtrlReg>

  // gps setup
  GPSRead_t GPS = {0,0,0,0};
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
  HAL_Delay(10);
 8003356:	200a      	movs	r0, #10
 8003358:	f000 fcfc 	bl	8003d54 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 800335c:	2201      	movs	r2, #1
 800335e:	493d      	ldr	r1, [pc, #244]	; (8003454 <main+0x130>)
 8003360:	483d      	ldr	r0, [pc, #244]	; (8003458 <main+0x134>)
 8003362:	f002 fe87 	bl	8006074 <HAL_UART_Receive_IT>

  // lcd setup
  LCD_Init();
 8003366:	f7ff fe18 	bl	8002f9a <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 800336a:	4839      	ldr	r0, [pc, #228]	; (8003450 <main+0x12c>)
 800336c:	f7fe fa66 	bl	800183c <I2C_Scan>


printf("Running 1616 \r\n");
 8003370:	483a      	ldr	r0, [pc, #232]	; (800345c <main+0x138>)
 8003372:	f005 fdb5 	bl	8008ee0 <puts>
int32_t r = convert(6200); // Earth's radius in fixed point 16.16 format
 8003376:	f641 0038 	movw	r0, #6200	; 0x1838
 800337a:	f7fd ff0b 	bl	8001194 <convert>
 800337e:	6378      	str	r0, [r7, #52]	; 0x34
printf("r : ");
 8003380:	4837      	ldr	r0, [pc, #220]	; (8003460 <main+0x13c>)
 8003382:	f005 fd11 	bl	8008da8 <iprintf>
printFix(r);
 8003386:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003388:	f7fd fed8 	bl	800113c <printFix>
printf("\r\n");
 800338c:	4835      	ldr	r0, [pc, #212]	; (8003464 <main+0x140>)
 800338e:	f005 fda7 	bl	8008ee0 <puts>
int32_t phi16 = convert(45);
 8003392:	202d      	movs	r0, #45	; 0x2d
 8003394:	f7fd fefe 	bl	8001194 <convert>
 8003398:	6338      	str	r0, [r7, #48]	; 0x30
int32_t theta16 = convert(45);
 800339a:	202d      	movs	r0, #45	; 0x2d
 800339c:	f7fd fefa 	bl	8001194 <convert>
 80033a0:	62f8      	str	r0, [r7, #44]	; 0x2c
igrf_time_t time = {.year = 2025, .month = 4, .day = 23, .hour = 0, .minute = 0, .second = 0};
 80033a2:	4a31      	ldr	r2, [pc, #196]	; (8003468 <main+0x144>)
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ac:	e883 0003 	stmia.w	r3, {r0, r1}
int32_t vector[3];
int status = igrf16(time, theta16, phi16, r, IGRF_GEOCENTRIC, vector);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	2301      	movs	r3, #1
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c0:	f107 0110 	add.w	r1, r7, #16
 80033c4:	c903      	ldmia	r1, {r0, r1}
 80033c6:	f7fe fb7f 	bl	8001ac8 <igrf16>
 80033ca:	62b8      	str	r0, [r7, #40]	; 0x28

printf("%i", status);
 80033cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ce:	4827      	ldr	r0, [pc, #156]	; (800346c <main+0x148>)
 80033d0:	f005 fcea 	bl	8008da8 <iprintf>
for (int i=0; i<3; i++) {
 80033d4:	2300      	movs	r3, #0
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d8:	e013      	b.n	8003402 <main+0xde>
	printf("Res %i: ", i);
 80033da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033dc:	4824      	ldr	r0, [pc, #144]	; (8003470 <main+0x14c>)
 80033de:	f005 fce3 	bl	8008da8 <iprintf>
	printFix(vector[i]);
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80033ea:	4413      	add	r3, r2
 80033ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fea3 	bl	800113c <printFix>
	printf("\r\n");
 80033f6:	481b      	ldr	r0, [pc, #108]	; (8003464 <main+0x140>)
 80033f8:	f005 fd72 	bl	8008ee0 <puts>
for (int i=0; i<3; i++) {
 80033fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fe:	3301      	adds	r3, #1
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003404:	2b02      	cmp	r3, #2
 8003406:	dde8      	ble.n	80033da <main+0xb6>
    LCD_SendString("Hello STM32!");

    LCD_SetCursor(1, 0);
    LCD_SendString("LCD is working :)");
*/
int i = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38

  while (1)
  {
	  process_uart_data(&uart_rx_buf, &GPS);
 800340c:	f107 0318 	add.w	r3, r7, #24
 8003410:	4619      	mov	r1, r3
 8003412:	4818      	ldr	r0, [pc, #96]	; (8003474 <main+0x150>)
 8003414:	f7fe f9a4 	bl	8001760 <process_uart_data>
	  HAL_Delay(10);
 8003418:	200a      	movs	r0, #10
 800341a:	f000 fc9b 	bl	8003d54 <HAL_Delay>
	  i++;
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	3301      	adds	r3, #1
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
	  	  if (!(i % 1000)) {
 8003424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <main+0x154>)
 8003428:	fb83 1302 	smull	r1, r3, r3, r2
 800342c:	1199      	asrs	r1, r3, #6
 800342e:	17d3      	asrs	r3, r2, #31
 8003430:	1acb      	subs	r3, r1, r3
 8003432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <main+0xe8>
	  		  i = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
	  		  printGPS(GPS);
 8003444:	f107 0318 	add.w	r3, r7, #24
 8003448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800344a:	f7fe f9c1 	bl	80017d0 <printGPS>
	  process_uart_data(&uart_rx_buf, &GPS);
 800344e:	e7dd      	b.n	800340c <main+0xe8>
 8003450:	20000710 	.word	0x20000710
 8003454:	20000764 	.word	0x20000764
 8003458:	20000768 	.word	0x20000768
 800345c:	0800d2ac 	.word	0x0800d2ac
 8003460:	0800d2bc 	.word	0x0800d2bc
 8003464:	0800d2c4 	.word	0x0800d2c4
 8003468:	0800d2d8 	.word	0x0800d2d8
 800346c:	0800d2c8 	.word	0x0800d2c8
 8003470:	0800d2cc 	.word	0x0800d2cc
 8003474:	20000204 	.word	0x20000204
 8003478:	10624dd3 	.word	0x10624dd3

0800347c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b094      	sub	sp, #80	; 0x50
 8003480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003482:	f107 0318 	add.w	r3, r7, #24
 8003486:	2238      	movs	r2, #56	; 0x38
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f004 fe0a 	bl	80080a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800349e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034a2:	f001 fd35 	bl	8004f10 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034b0:	2340      	movs	r3, #64	; 0x40
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b8:	f107 0318 	add.w	r3, r7, #24
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fddb 	bl	8005078 <HAL_RCC_OscConfig>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80034c8:	f000 f978 	bl	80037bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034cc:	230f      	movs	r3, #15
 80034ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034d0:	2301      	movs	r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 f8db 	bl	80056a0 <HAL_RCC_ClockConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80034f0:	f000 f964 	bl	80037bc <Error_Handler>
  }
}
 80034f4:	bf00      	nop
 80034f6:	3750      	adds	r7, #80	; 0x50
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <MX_I2C3_Init+0x74>)
 8003502:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <MX_I2C3_Init+0x78>)
 8003504:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <MX_I2C3_Init+0x74>)
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <MX_I2C3_Init+0x7c>)
 800350a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <MX_I2C3_Init+0x74>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <MX_I2C3_Init+0x74>)
 8003514:	2201      	movs	r2, #1
 8003516:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <MX_I2C3_Init+0x74>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <MX_I2C3_Init+0x74>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <MX_I2C3_Init+0x74>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <MX_I2C3_Init+0x74>)
 800352c:	2200      	movs	r2, #0
 800352e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <MX_I2C3_Init+0x74>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003536:	480e      	ldr	r0, [pc, #56]	; (8003570 <MX_I2C3_Init+0x74>)
 8003538:	f000 ff98 	bl	800446c <HAL_I2C_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003542:	f000 f93b 	bl	80037bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003546:	2100      	movs	r1, #0
 8003548:	4809      	ldr	r0, [pc, #36]	; (8003570 <MX_I2C3_Init+0x74>)
 800354a:	f001 fc49 	bl	8004de0 <HAL_I2CEx_ConfigAnalogFilter>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003554:	f000 f932 	bl	80037bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003558:	2100      	movs	r1, #0
 800355a:	4805      	ldr	r0, [pc, #20]	; (8003570 <MX_I2C3_Init+0x74>)
 800355c:	f001 fc8b 	bl	8004e76 <HAL_I2CEx_ConfigDigitalFilter>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003566:	f000 f929 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000710 	.word	0x20000710
 8003574:	40007800 	.word	0x40007800
 8003578:	0010061a 	.word	0x0010061a

0800357c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <MX_USART1_UART_Init+0x90>)
 8003582:	4a23      	ldr	r2, [pc, #140]	; (8003610 <MX_USART1_UART_Init+0x94>)
 8003584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <MX_USART1_UART_Init+0x90>)
 8003588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800358c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800358e:	4b1f      	ldr	r3, [pc, #124]	; (800360c <MX_USART1_UART_Init+0x90>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <MX_USART1_UART_Init+0x90>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <MX_USART1_UART_Init+0x90>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035a2:	220c      	movs	r2, #12
 80035a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035c4:	4811      	ldr	r0, [pc, #68]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035c6:	f002 fc77 	bl	8005eb8 <HAL_UART_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80035d0:	f000 f8f4 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035d4:	2100      	movs	r1, #0
 80035d6:	480d      	ldr	r0, [pc, #52]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035d8:	f004 fc6f 	bl	8007eba <HAL_UARTEx_SetTxFifoThreshold>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80035e2:	f000 f8eb 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035e6:	2100      	movs	r1, #0
 80035e8:	4808      	ldr	r0, [pc, #32]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035ea:	f004 fca4 	bl	8007f36 <HAL_UARTEx_SetRxFifoThreshold>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80035f4:	f000 f8e2 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80035f8:	4804      	ldr	r0, [pc, #16]	; (800360c <MX_USART1_UART_Init+0x90>)
 80035fa:	f004 fc25 	bl	8007e48 <HAL_UARTEx_DisableFifoMode>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003604:	f000 f8da 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000768 	.word	0x20000768
 8003610:	40013800 	.word	0x40013800

08003614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 800361a:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <MX_USART2_UART_Init+0x94>)
 800361c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800361e:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 800363a:	220c      	movs	r2, #12
 800363c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 800364c:	2200      	movs	r2, #0
 800364e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003652:	2200      	movs	r2, #0
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003658:	2200      	movs	r2, #0
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800365c:	4811      	ldr	r0, [pc, #68]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 800365e:	f002 fc2b 	bl	8005eb8 <HAL_UART_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003668:	f000 f8a8 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800366c:	2100      	movs	r1, #0
 800366e:	480d      	ldr	r0, [pc, #52]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003670:	f004 fc23 	bl	8007eba <HAL_UARTEx_SetTxFifoThreshold>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800367a:	f000 f89f 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800367e:	2100      	movs	r1, #0
 8003680:	4808      	ldr	r0, [pc, #32]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003682:	f004 fc58 	bl	8007f36 <HAL_UARTEx_SetRxFifoThreshold>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800368c:	f000 f896 	bl	80037bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003690:	4804      	ldr	r0, [pc, #16]	; (80036a4 <MX_USART2_UART_Init+0x90>)
 8003692:	f004 fbd9 	bl	8007e48 <HAL_UARTEx_DisableFifoMode>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800369c:	f000 f88e 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036a0:	bf00      	nop
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200007fc 	.word	0x200007fc
 80036a8:	40004400 	.word	0x40004400

080036ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	60da      	str	r2, [r3, #12]
 80036c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <MX_GPIO_Init+0xa0>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	4a21      	ldr	r2, [pc, #132]	; (800374c <MX_GPIO_Init+0xa0>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <MX_GPIO_Init+0xa0>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <MX_GPIO_Init+0xa0>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	4a1b      	ldr	r2, [pc, #108]	; (800374c <MX_GPIO_Init+0xa0>)
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <MX_GPIO_Init+0xa0>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80036f2:	2200      	movs	r2, #0
 80036f4:	2173      	movs	r1, #115	; 0x73
 80036f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036fa:	f000 fe9f 	bl	800443c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80036fe:	2200      	movs	r2, #0
 8003700:	2108      	movs	r1, #8
 8003702:	4813      	ldr	r0, [pc, #76]	; (8003750 <MX_GPIO_Init+0xa4>)
 8003704:	f000 fe9a 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8003708:	2373      	movs	r3, #115	; 0x73
 800370a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370c:	2301      	movs	r3, #1
 800370e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	4619      	mov	r1, r3
 800371e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003722:	f000 fd09 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003726:	2308      	movs	r3, #8
 8003728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372a:	2301      	movs	r3, #1
 800372c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	4619      	mov	r1, r3
 800373c:	4804      	ldr	r0, [pc, #16]	; (8003750 <MX_GPIO_Init+0xa4>)
 800373e:	f000 fcfb 	bl	8004138 <HAL_GPIO_Init>

}
 8003742:	bf00      	nop
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	48000400 	.word	0x48000400

08003754 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	b29a      	uxth	r2, r3
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4804      	ldr	r0, [pc, #16]	; (800377c <_write+0x28>)
 800376c:	f002 fbf4 	bl	8005f58 <HAL_UART_Transmit>
    return len;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200007fc 	.word	0x200007fc

08003780 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_UART_RxCpltCallback+0x30>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d10a      	bne.n	80037a6 <HAL_UART_RxCpltCallback+0x26>
		//printf("UART Error: ISR=0x%08lX, SR=0x%08lX\r\n", huart->Instance->ISR, huart->Instance->RQR);
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_UART_RxCpltCallback+0x34>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	4808      	ldr	r0, [pc, #32]	; (80037b8 <HAL_UART_RxCpltCallback+0x38>)
 8003798:	f7fd fd62 	bl	8001260 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 800379c:	2201      	movs	r2, #1
 800379e:	4905      	ldr	r1, [pc, #20]	; (80037b4 <HAL_UART_RxCpltCallback+0x34>)
 80037a0:	4803      	ldr	r0, [pc, #12]	; (80037b0 <HAL_UART_RxCpltCallback+0x30>)
 80037a2:	f002 fc67 	bl	8006074 <HAL_UART_Receive_IT>
		 //printf("RX: %c (0x%02X)\r\n", rx_buffer[0], rx_buffer[0]);
	}
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000768 	.word	0x20000768
 80037b4:	20000764 	.word	0x20000764
 80037b8:	20000204 	.word	0x20000204

080037bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c0:	b672      	cpsid	i
}
 80037c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037c4:	e7fe      	b.n	80037c4 <Error_Handler+0x8>
	...

080037c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <HAL_MspInit+0x44>)
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <HAL_MspInit+0x44>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6613      	str	r3, [r2, #96]	; 0x60
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_MspInit+0x44>)
 80037dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_MspInit+0x44>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_MspInit+0x44>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f0:	6593      	str	r3, [r2, #88]	; 0x58
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_MspInit+0x44>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80037fe:	f001 fc2b 	bl	8005058 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b09c      	sub	sp, #112	; 0x70
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	2244      	movs	r2, #68	; 0x44
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f004 fc37 	bl	80080a4 <memset>
  if(hi2c->Instance==I2C3)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <HAL_I2C_MspInit+0xe4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d154      	bne.n	80038ea <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003844:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003846:	2300      	movs	r3, #0
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800384a:	f107 0318 	add.w	r3, r7, #24
 800384e:	4618      	mov	r0, r3
 8003850:	f002 f942 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800385a:	f7ff ffaf 	bl	80037bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	4a25      	ldr	r2, [pc, #148]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800388e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003892:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003894:	2312      	movs	r3, #18
 8003896:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389c:	2300      	movs	r3, #0
 800389e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80038a0:	2302      	movs	r3, #2
 80038a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038a8:	4619      	mov	r1, r3
 80038aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ae:	f000 fc43 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038b2:	2320      	movs	r3, #32
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b6:	2312      	movs	r3, #18
 80038b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80038c2:	2308      	movs	r3, #8
 80038c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038ca:	4619      	mov	r1, r3
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <HAL_I2C_MspInit+0xec>)
 80038ce:	f000 fc33 	bl	8004138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 80038d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_I2C_MspInit+0xe8>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038ea:	bf00      	nop
 80038ec:	3770      	adds	r7, #112	; 0x70
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40007800 	.word	0x40007800
 80038f8:	40021000 	.word	0x40021000
 80038fc:	48000400 	.word	0x48000400

08003900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b09c      	sub	sp, #112	; 0x70
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003918:	f107 0318 	add.w	r3, r7, #24
 800391c:	2244      	movs	r2, #68	; 0x44
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f004 fbbf 	bl	80080a4 <memset>
  if(huart->Instance==USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a42      	ldr	r2, [pc, #264]	; (8003a34 <HAL_UART_MspInit+0x134>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d140      	bne.n	80039b2 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003930:	2301      	movs	r3, #1
 8003932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	4618      	mov	r0, r3
 800393e:	f002 f8cb 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003948:	f7ff ff38 	bl	80037bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800394c:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_UART_MspInit+0x138>)
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_UART_MspInit+0x138>)
 8003952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003956:	6613      	str	r3, [r2, #96]	; 0x60
 8003958:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_UART_MspInit+0x138>)
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <HAL_UART_MspInit+0x138>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <HAL_UART_MspInit+0x138>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003970:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <HAL_UART_MspInit+0x138>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800397c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003986:	2300      	movs	r3, #0
 8003988:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398a:	2300      	movs	r3, #0
 800398c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800398e:	2307      	movs	r3, #7
 8003990:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003992:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003996:	4619      	mov	r1, r3
 8003998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399c:	f000 fbcc 	bl	8004138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	2025      	movs	r0, #37	; 0x25
 80039a6:	f000 fad2 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039aa:	2025      	movs	r0, #37	; 0x25
 80039ac:	f000 fae9 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039b0:	e03b      	b.n	8003a2a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <HAL_UART_MspInit+0x13c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d136      	bne.n	8003a2a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039c0:	2300      	movs	r3, #0
 80039c2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039c4:	f107 0318 	add.w	r3, r7, #24
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f885 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80039d4:	f7ff fef2 	bl	80037bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039d8:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_UART_MspInit+0x138>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <HAL_UART_MspInit+0x138>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e2:	6593      	str	r3, [r2, #88]	; 0x58
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <HAL_UART_MspInit+0x138>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_UART_MspInit+0x138>)
 80039f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f4:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <HAL_UART_MspInit+0x138>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <HAL_UART_MspInit+0x138>)
 80039fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a08:	230c      	movs	r3, #12
 8003a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a18:	2307      	movs	r3, #7
 8003a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a20:	4619      	mov	r1, r3
 8003a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a26:	f000 fb87 	bl	8004138 <HAL_GPIO_Init>
}
 8003a2a:	bf00      	nop
 8003a2c:	3770      	adds	r7, #112	; 0x70
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40004400 	.word	0x40004400

08003a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <NMI_Handler+0x4>

08003a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a4a:	e7fe      	b.n	8003a4a <HardFault_Handler+0x4>

08003a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a50:	e7fe      	b.n	8003a50 <MemManage_Handler+0x4>

08003a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a56:	e7fe      	b.n	8003a56 <BusFault_Handler+0x4>

08003a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a5c:	e7fe      	b.n	8003a5c <UsageFault_Handler+0x4>

08003a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a8c:	f000 f944 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <USART1_IRQHandler+0x10>)
 8003a9a:	f002 fb37 	bl	800610c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000768 	.word	0x20000768

08003aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
	return 1;
 8003aac:	2301      	movs	r3, #1
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_kill>:

int _kill(int pid, int sig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ac2:	f004 fac5 	bl	8008050 <__errno>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2216      	movs	r2, #22
 8003aca:	601a      	str	r2, [r3, #0]
	return -1;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_exit>:

void _exit (int status)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffe7 	bl	8003ab8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003aea:	e7fe      	b.n	8003aea <_exit+0x12>

08003aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e00a      	b.n	8003b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003afe:	f3af 8000 	nop.w
 8003b02:	4601      	mov	r1, r0
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	60ba      	str	r2, [r7, #8]
 8003b0a:	b2ca      	uxtb	r2, r1
 8003b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	dbf0      	blt.n	8003afe <_read+0x12>
	}

return len;
 8003b1c:	687b      	ldr	r3, [r7, #4]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <_isatty>:

int _isatty(int file)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
	return 1;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <_sbrk+0x5c>)
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <_sbrk+0x60>)
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba4:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <_sbrk+0x64>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <_sbrk+0x64>)
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <_sbrk+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <_sbrk+0x64>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d207      	bcs.n	8003bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bc0:	f004 fa46 	bl	8008050 <__errno>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e009      	b.n	8003be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <_sbrk+0x64>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <_sbrk+0x64>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <_sbrk+0x64>)
 8003be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20008000 	.word	0x20008000
 8003bf0:	00000400 	.word	0x00000400
 8003bf4:	20000608 	.word	0x20000608
 8003bf8:	200008a8 	.word	0x200008a8

08003bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <SystemInit+0x20>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <SystemInit+0x20>)
 8003c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c20:	480d      	ldr	r0, [pc, #52]	; (8003c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c24:	f7ff ffea 	bl	8003bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c28:	480c      	ldr	r0, [pc, #48]	; (8003c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8003c2a:	490d      	ldr	r1, [pc, #52]	; (8003c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	; (8003c64 <LoopForever+0xe>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003c30:	e002      	b.n	8003c38 <LoopCopyDataInit>

08003c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c36:	3304      	adds	r3, #4

08003c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c3c:	d3f9      	bcc.n	8003c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c40:	4c0a      	ldr	r4, [pc, #40]	; (8003c6c <LoopForever+0x16>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c44:	e001      	b.n	8003c4a <LoopFillZerobss>

08003c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c48:	3204      	adds	r2, #4

08003c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c4c:	d3fb      	bcc.n	8003c46 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f004 fa05 	bl	800805c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c52:	f7ff fb67 	bl	8003324 <main>

08003c56 <LoopForever>:

LoopForever:
    b LoopForever
 8003c56:	e7fe      	b.n	8003c56 <LoopForever>
  ldr   r0, =_estack
 8003c58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c60:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003c64:	0800eec8 	.word	0x0800eec8
  ldr r2, =_sbss
 8003c68:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003c6c:	200008a4 	.word	0x200008a4

08003c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c70:	e7fe      	b.n	8003c70 <ADC1_2_IRQHandler>

08003c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c7c:	2003      	movs	r0, #3
 8003c7e:	f000 f95b 	bl	8003f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c82:	200f      	movs	r0, #15
 8003c84:	f000 f80e 	bl	8003ca4 <HAL_InitTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	71fb      	strb	r3, [r7, #7]
 8003c92:	e001      	b.n	8003c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c94:	f7ff fd98 	bl	80037c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c98:	79fb      	ldrb	r3, [r7, #7]

}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_InitTick+0x68>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d022      	beq.n	8003cfe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_InitTick+0x6c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_InitTick+0x68>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f966 	bl	8003f9e <HAL_SYSTICK_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d809      	bhi.n	8003cf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	f000 f932 	bl	8003f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_InitTick+0x70>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e007      	b.n	8003d02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
 8003cf6:	e004      	b.n	8003d02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e001      	b.n	8003d02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_IncTick+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a03      	ldr	r2, [pc, #12]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d28:	6013      	str	r3, [r2, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20000890 	.word	0x20000890
 8003d38:	20000008 	.word	0x20000008

08003d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_GetTick+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000890 	.word	0x20000890

08003d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7ff ffee 	bl	8003d3c <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d004      	beq.n	8003d78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_Delay+0x40>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d78:	bf00      	nop
 8003d7a:	f7ff ffdf 	bl	8003d3c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d8f7      	bhi.n	8003d7a <HAL_Delay+0x26>
  {
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000008 	.word	0x20000008

08003d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db4:	4013      	ands	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dca:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60d3      	str	r3, [r2, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <__NVIC_GetPriorityGrouping+0x18>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 0307 	and.w	r3, r3, #7
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	db0b      	blt.n	8003e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4907      	ldr	r1, [pc, #28]	; (8003e34 <__NVIC_EnableIRQ+0x38>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0a      	blt.n	8003e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	490c      	ldr	r1, [pc, #48]	; (8003e84 <__NVIC_SetPriority+0x4c>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e60:	e00a      	b.n	8003e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4908      	ldr	r1, [pc, #32]	; (8003e88 <__NVIC_SetPriority+0x50>)
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	761a      	strb	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f1c3 0307 	rsb	r3, r3, #7
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	bf28      	it	cs
 8003eaa:	2304      	movcs	r3, #4
 8003eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d902      	bls.n	8003ebc <NVIC_EncodePriority+0x30>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3b03      	subs	r3, #3
 8003eba:	e000      	b.n	8003ebe <NVIC_EncodePriority+0x32>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	43d9      	mvns	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	4313      	orrs	r3, r2
         );
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	; 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f04:	d301      	bcc.n	8003f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00f      	b.n	8003f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <SysTick_Config+0x40>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f12:	210f      	movs	r1, #15
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	f7ff ff8e 	bl	8003e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <SysTick_Config+0x40>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <SysTick_Config+0x40>)
 8003f24:	2207      	movs	r2, #7
 8003f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000e010 	.word	0xe000e010

08003f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff29 	bl	8003d98 <__NVIC_SetPriorityGrouping>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f5c:	f7ff ff40 	bl	8003de0 <__NVIC_GetPriorityGrouping>
 8003f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff90 	bl	8003e8c <NVIC_EncodePriority>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff5f 	bl	8003e38 <__NVIC_SetPriority>
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff33 	bl	8003dfc <__NVIC_EnableIRQ>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffa4 	bl	8003ef4 <SysTick_Config>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d005      	beq.n	8003fda <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e037      	b.n	800404a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 020e 	bic.w	r2, r2, #14
 8003fe8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f003 021f 	and.w	r2, r3, #31
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2101      	movs	r1, #1
 8004018:	fa01 f202 	lsl.w	r2, r1, r2
 800401c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004026:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00c      	beq.n	800404a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800403e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004048:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d00d      	beq.n	800409c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2204      	movs	r2, #4
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e047      	b.n	800412c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020e 	bic.w	r2, r2, #14
 80040aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2101      	movs	r1, #1
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800410a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
    }
  }
  return status;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004146:	e15a      	b.n	80043fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 814c 	beq.w	80043f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d005      	beq.n	8004178 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004174:	2b02      	cmp	r3, #2
 8004176:	d130      	bne.n	80041da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	2203      	movs	r2, #3
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ae:	2201      	movs	r2, #1
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	f003 0201 	and.w	r2, r3, #1
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d017      	beq.n	8004216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d123      	bne.n	800426a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	08da      	lsrs	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3208      	adds	r2, #8
 800422a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	220f      	movs	r2, #15
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	6939      	ldr	r1, [r7, #16]
 8004266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0203 	and.w	r2, r3, #3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a6 	beq.w	80043f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ac:	4b5b      	ldr	r3, [pc, #364]	; (800441c <HAL_GPIO_Init+0x2e4>)
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	4a5a      	ldr	r2, [pc, #360]	; (800441c <HAL_GPIO_Init+0x2e4>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6613      	str	r3, [r2, #96]	; 0x60
 80042b8:	4b58      	ldr	r3, [pc, #352]	; (800441c <HAL_GPIO_Init+0x2e4>)
 80042ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c4:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_GPIO_Init+0x2e8>)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042ee:	d01f      	beq.n	8004330 <HAL_GPIO_Init+0x1f8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a4c      	ldr	r2, [pc, #304]	; (8004424 <HAL_GPIO_Init+0x2ec>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d019      	beq.n	800432c <HAL_GPIO_Init+0x1f4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a4b      	ldr	r2, [pc, #300]	; (8004428 <HAL_GPIO_Init+0x2f0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_GPIO_Init+0x1f0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a4a      	ldr	r2, [pc, #296]	; (800442c <HAL_GPIO_Init+0x2f4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00d      	beq.n	8004324 <HAL_GPIO_Init+0x1ec>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a49      	ldr	r2, [pc, #292]	; (8004430 <HAL_GPIO_Init+0x2f8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <HAL_GPIO_Init+0x1e8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a48      	ldr	r2, [pc, #288]	; (8004434 <HAL_GPIO_Init+0x2fc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_GPIO_Init+0x1e4>
 8004318:	2305      	movs	r3, #5
 800431a:	e00a      	b.n	8004332 <HAL_GPIO_Init+0x1fa>
 800431c:	2306      	movs	r3, #6
 800431e:	e008      	b.n	8004332 <HAL_GPIO_Init+0x1fa>
 8004320:	2304      	movs	r3, #4
 8004322:	e006      	b.n	8004332 <HAL_GPIO_Init+0x1fa>
 8004324:	2303      	movs	r3, #3
 8004326:	e004      	b.n	8004332 <HAL_GPIO_Init+0x1fa>
 8004328:	2302      	movs	r3, #2
 800432a:	e002      	b.n	8004332 <HAL_GPIO_Init+0x1fa>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_GPIO_Init+0x1fa>
 8004330:	2300      	movs	r3, #0
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	f002 0203 	and.w	r2, r2, #3
 8004338:	0092      	lsls	r2, r2, #2
 800433a:	4093      	lsls	r3, r2
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004342:	4937      	ldr	r1, [pc, #220]	; (8004420 <HAL_GPIO_Init+0x2e8>)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	3302      	adds	r3, #2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004350:	4b39      	ldr	r3, [pc, #228]	; (8004438 <HAL_GPIO_Init+0x300>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004374:	4a30      	ldr	r2, [pc, #192]	; (8004438 <HAL_GPIO_Init+0x300>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800437a:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <HAL_GPIO_Init+0x300>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <HAL_GPIO_Init+0x300>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_GPIO_Init+0x300>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043c8:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <HAL_GPIO_Init+0x300>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <HAL_GPIO_Init+0x300>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043f2:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_GPIO_Init+0x300>)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3301      	adds	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	f47f ae9d 	bne.w	8004148 <HAL_GPIO_Init+0x10>
  }
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40021000 	.word	0x40021000
 8004420:	40010000 	.word	0x40010000
 8004424:	48000400 	.word	0x48000400
 8004428:	48000800 	.word	0x48000800
 800442c:	48000c00 	.word	0x48000c00
 8004430:	48001000 	.word	0x48001000
 8004434:	48001400 	.word	0x48001400
 8004438:	40010400 	.word	0x40010400

0800443c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
 8004448:	4613      	mov	r3, r2
 800444a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004458:	e002      	b.n	8004460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800445a:	887a      	ldrh	r2, [r7, #2]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e08d      	b.n	800459a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff f9bc 	bl	8003810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d107      	bne.n	80044e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	e006      	b.n	80044f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d108      	bne.n	800450e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	e007      	b.n	800451e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800451c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004530:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69d9      	ldr	r1, [r3, #28]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	461a      	mov	r2, r3
 80045b0:	460b      	mov	r3, r1
 80045b2:	817b      	strh	r3, [r7, #10]
 80045b4:	4613      	mov	r3, r2
 80045b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	f040 80fd 	bne.w	80047c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_I2C_Master_Transmit+0x30>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e0f6      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x21e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045dc:	f7ff fbae 	bl	8003d3c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2319      	movs	r3, #25
 80045e8:	2201      	movs	r2, #1
 80045ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fa00 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0e1      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2221      	movs	r2, #33	; 0x21
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2210      	movs	r2, #16
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	893a      	ldrh	r2, [r7, #8]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	2bff      	cmp	r3, #255	; 0xff
 800462e:	d906      	bls.n	800463e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	22ff      	movs	r2, #255	; 0xff
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e007      	b.n	800464e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800464c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	8979      	ldrh	r1, [r7, #10]
 8004692:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <HAL_I2C_Master_Transmit+0x228>)
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fb6f 	bl	8004d7c <I2C_TransferConfig>
 800469e:	e066      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	8979      	ldrh	r1, [r7, #10]
 80046a8:	4b48      	ldr	r3, [pc, #288]	; (80047cc <HAL_I2C_Master_Transmit+0x228>)
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fb64 	bl	8004d7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046b4:	e05b      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	6a39      	ldr	r1, [r7, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f9f3 	bl	8004aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07b      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d034      	beq.n	800476e <HAL_I2C_Master_Transmit+0x1ca>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d130      	bne.n	800476e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	2200      	movs	r2, #0
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f96c 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e04d      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2bff      	cmp	r3, #255	; 0xff
 800472e:	d90e      	bls.n	800474e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	22ff      	movs	r2, #255	; 0xff
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	8979      	ldrh	r1, [r7, #10]
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb18 	bl	8004d7c <I2C_TransferConfig>
 800474c:	e00f      	b.n	800476e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	b2da      	uxtb	r2, r3
 800475e:	8979      	ldrh	r1, [r7, #10]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fb07 	bl	8004d7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d19e      	bne.n	80046b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	6a39      	ldr	r1, [r7, #32]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f9d9 	bl	8004b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e01a      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2220      	movs	r2, #32
 8004792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_I2C_Master_Transmit+0x22c>)
 80047a0:	400b      	ands	r3, r1
 80047a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	80002000 	.word	0x80002000
 80047d0:	fe00e800 	.word	0xfe00e800

080047d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	460b      	mov	r3, r1
 80047e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	f040 80d6 	bne.w	80049a2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d101      	bne.n	800480a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004806:	2302      	movs	r3, #2
 8004808:	e0cc      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_I2C_IsDeviceReady+0x44>
 8004814:	2302      	movs	r3, #2
 8004816:	e0c5      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_I2C_IsDeviceReady+0x72>
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004844:	e006      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x80>
 8004846:	897b      	ldrh	r3, [r7, #10]
 8004848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004850:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800485a:	f7ff fa6f 	bl	8003d3c <HAL_GetTick>
 800485e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800488c:	e034      	b.n	80048f8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d01a      	beq.n	80048cc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7ff fa51 	bl	8003d3c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <HAL_I2C_IsDeviceReady+0xd8>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10f      	bne.n	80048cc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e06b      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_I2C_IsDeviceReady+0x130>
 80048fe:	7fbb      	ldrb	r3, [r7, #30]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0c4      	beq.n	800488e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d01a      	beq.n	8004948 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2200      	movs	r2, #0
 800491a:	2120      	movs	r1, #32
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f869 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e03b      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2220      	movs	r2, #32
 8004932:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e02d      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	2120      	movs	r1, #32
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f84e 	bl	80049f4 <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e020      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2210      	movs	r2, #16
 8004968:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3301      	adds	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	429a      	cmp	r2, r3
 800497e:	f63f af56 	bhi.w	800482e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d103      	bne.n	80049ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d007      	beq.n	80049e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	619a      	str	r2, [r3, #24]
  }
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a04:	e03b      	b.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	6839      	ldr	r1, [r7, #0]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8d6 	bl	8004bbc <I2C_IsErrorOccurred>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e041      	b.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d02d      	beq.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7ff f98b 	bl	8003d3c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d122      	bne.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d113      	bne.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00f      	b.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0b4      	beq.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab2:	e033      	b.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f87f 	bl	8004bbc <I2C_IsErrorOccurred>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e031      	b.n	8004b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d025      	beq.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7ff f934 	bl	8003d3c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11a      	bne.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d013      	beq.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e007      	b.n	8004b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d1c4      	bne.n	8004ab4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b40:	e02f      	b.n	8004ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f838 	bl	8004bbc <I2C_IsErrorOccurred>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e02d      	b.n	8004bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7ff f8f1 	bl	8003d3c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11a      	bne.n	8004ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d013      	beq.n	8004ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e007      	b.n	8004bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d1c8      	bne.n	8004b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d068      	beq.n	8004cba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2210      	movs	r2, #16
 8004bee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bf0:	e049      	b.n	8004c86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d045      	beq.n	8004c86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7ff f89f 	bl	8003d3c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_IsErrorOccurred+0x54>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d13a      	bne.n	8004c86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	d121      	bne.n	8004c78 <I2C_IsErrorOccurred+0xbc>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3a:	d01d      	beq.n	8004c78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d01a      	beq.n	8004c78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c52:	f7ff f873 	bl	8003d3c <HAL_GetTick>
 8004c56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c58:	e00e      	b.n	8004c78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c5a:	f7ff f86f 	bl	8003d3c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b19      	cmp	r3, #25
 8004c66:	d907      	bls.n	8004c78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f043 0320 	orr.w	r3, r3, #32
 8004c6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004c76:	e006      	b.n	8004c86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d1e9      	bne.n	8004c5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d003      	beq.n	8004c9c <I2C_IsErrorOccurred+0xe0>
 8004c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0aa      	beq.n	8004bf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	f043 0304 	orr.w	r3, r3, #4
 8004cb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	f043 0308 	orr.w	r3, r3, #8
 8004cf4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fe3b 	bl	80049ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <I2C_IsErrorOccurred+0x1bc>)
 8004d42:	400b      	ands	r3, r1
 8004d44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	fe00e800 	.word	0xfe00e800

08004d7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d8e:	897b      	ldrh	r3, [r7, #10]
 8004d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d94:	7a7b      	ldrb	r3, [r7, #9]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	0d5b      	lsrs	r3, r3, #21
 8004db6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <I2C_TransferConfig+0x60>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	ea02 0103 	and.w	r1, r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	03ff63ff 	.word	0x03ff63ff

08004de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d138      	bne.n	8004e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e032      	b.n	8004e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	; 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d139      	bne.n	8004f00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e033      	b.n	8004f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2224      	movs	r2, #36	; 0x24
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ec8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
  }
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d141      	bne.n	8004fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f1e:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d131      	bne.n	8004f90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f2c:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f32:	4a46      	ldr	r2, [pc, #280]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f3c:	4b43      	ldr	r3, [pc, #268]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f44:	4a41      	ldr	r2, [pc, #260]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f4c:	4b40      	ldr	r3, [pc, #256]	; (8005050 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2232      	movs	r2, #50	; 0x32
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	4a3f      	ldr	r2, [pc, #252]	; (8005054 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	0c9b      	lsrs	r3, r3, #18
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f62:	e002      	b.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6a:	4b38      	ldr	r3, [pc, #224]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f76:	d102      	bne.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f2      	bne.n	8004f64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f7e:	4b33      	ldr	r3, [pc, #204]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8a:	d158      	bne.n	800503e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e057      	b.n	8005040 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f90:	4b2e      	ldr	r3, [pc, #184]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f96:	4a2d      	ldr	r2, [pc, #180]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fa0:	e04d      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d141      	bne.n	800502e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb6:	d131      	bne.n	800501c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fb8:	4b24      	ldr	r3, [pc, #144]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	4a23      	ldr	r2, [pc, #140]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2232      	movs	r2, #50	; 0x32
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	0c9b      	lsrs	r3, r3, #18
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fee:	e002      	b.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005002:	d102      	bne.n	800500a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f2      	bne.n	8004ff0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d112      	bne.n	800503e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e011      	b.n	8005040 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800502c:	e007      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800503c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40007000 	.word	0x40007000
 8005050:	20000000 	.word	0x20000000
 8005054:	431bde83 	.word	0x431bde83

08005058 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005066:	6093      	str	r3, [r2, #8]
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40007000 	.word	0x40007000

08005078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e301      	b.n	800568e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d075      	beq.n	8005182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005096:	4ba3      	ldr	r3, [pc, #652]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a0:	4ba0      	ldr	r3, [pc, #640]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d102      	bne.n	80050b6 <HAL_RCC_OscConfig+0x3e>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d002      	beq.n	80050bc <HAL_RCC_OscConfig+0x44>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	4b99      	ldr	r3, [pc, #612]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05b      	beq.n	8005180 <HAL_RCC_OscConfig+0x108>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d157      	bne.n	8005180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e2dc      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x74>
 80050de:	4b91      	ldr	r3, [pc, #580]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a90      	ldr	r2, [pc, #576]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b8b      	ldr	r3, [pc, #556]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a8a      	ldr	r2, [pc, #552]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a87      	ldr	r2, [pc, #540]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 8005110:	4b84      	ldr	r3, [pc, #528]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a83      	ldr	r2, [pc, #524]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b81      	ldr	r3, [pc, #516]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a80      	ldr	r2, [pc, #512]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fe fe04 	bl	8003d3c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fe fe00 	bl	8003d3c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e2a1      	b.n	800568e <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800514a:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xc0>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fe fdf0 	bl	8003d3c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fe fdec 	bl	8003d3c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e28d      	b.n	800568e <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0xe8>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d075      	beq.n	800527a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005198:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d102      	bne.n	80051ae <HAL_RCC_OscConfig+0x136>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d002      	beq.n	80051b4 <HAL_RCC_OscConfig+0x13c>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d11f      	bne.n	80051f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b4:	4b5b      	ldr	r3, [pc, #364]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_OscConfig+0x154>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e260      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	4b55      	ldr	r3, [pc, #340]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	4952      	ldr	r1, [pc, #328]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051e0:	4b51      	ldr	r3, [pc, #324]	; (8005328 <HAL_RCC_OscConfig+0x2b0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe fd5d 	bl	8003ca4 <HAL_InitTick>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d043      	beq.n	8005278 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e24c      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d023      	beq.n	8005244 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fc:	4b49      	ldr	r3, [pc, #292]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a48      	ldr	r2, [pc, #288]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fe fd98 	bl	8003d3c <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005210:	f7fe fd94 	bl	8003d3c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e235      	b.n	800568e <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005222:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522e:	4b3d      	ldr	r3, [pc, #244]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	4939      	ldr	r1, [pc, #228]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]
 8005242:	e01a      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005244:	4b37      	ldr	r3, [pc, #220]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a36      	ldr	r2, [pc, #216]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800524a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800524e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fe fd74 	bl	8003d3c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005258:	f7fe fd70 	bl	8003d3c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e211      	b.n	800568e <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x1e0>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d03c      	beq.n	8005300 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528e:	4b25      	ldr	r3, [pc, #148]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005294:	4a23      	ldr	r2, [pc, #140]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fe fd4d 	bl	8003d3c <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fe fd49 	bl	8003d3c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e1ea      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ef      	beq.n	80052a6 <HAL_RCC_OscConfig+0x22e>
 80052c6:	e01b      	b.n	8005300 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c8:	4b16      	ldr	r3, [pc, #88]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ce:	4a15      	ldr	r2, [pc, #84]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fe fd30 	bl	8003d3c <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e0:	f7fe fd2c 	bl	8003d3c <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1cd      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ef      	bne.n	80052e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80ab 	beq.w	8005464 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005312:	4b04      	ldr	r3, [pc, #16]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x2b4>
 800531e:	2301      	movs	r3, #1
 8005320:	e005      	b.n	800532e <HAL_RCC_OscConfig+0x2b6>
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	20000004 	.word	0x20000004
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	4bad      	ldr	r3, [pc, #692]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	4aac      	ldr	r2, [pc, #688]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6593      	str	r3, [r2, #88]	; 0x58
 800533e:	4baa      	ldr	r3, [pc, #680]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534e:	4ba7      	ldr	r3, [pc, #668]	; (80055ec <HAL_RCC_OscConfig+0x574>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800535a:	4ba4      	ldr	r3, [pc, #656]	; (80055ec <HAL_RCC_OscConfig+0x574>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4aa3      	ldr	r2, [pc, #652]	; (80055ec <HAL_RCC_OscConfig+0x574>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fe fce9 	bl	8003d3c <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fe fce5 	bl	8003d3c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e186      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005380:	4b9a      	ldr	r3, [pc, #616]	; (80055ec <HAL_RCC_OscConfig+0x574>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d108      	bne.n	80053a6 <HAL_RCC_OscConfig+0x32e>
 8005394:	4b94      	ldr	r3, [pc, #592]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	4a93      	ldr	r2, [pc, #588]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a4:	e024      	b.n	80053f0 <HAL_RCC_OscConfig+0x378>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d110      	bne.n	80053d0 <HAL_RCC_OscConfig+0x358>
 80053ae:	4b8e      	ldr	r3, [pc, #568]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	4a8c      	ldr	r2, [pc, #560]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053be:	4b8a      	ldr	r3, [pc, #552]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	4a88      	ldr	r2, [pc, #544]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ce:	e00f      	b.n	80053f0 <HAL_RCC_OscConfig+0x378>
 80053d0:	4b85      	ldr	r3, [pc, #532]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	4a84      	ldr	r2, [pc, #528]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053e0:	4b81      	ldr	r3, [pc, #516]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	4a80      	ldr	r2, [pc, #512]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80053e8:	f023 0304 	bic.w	r3, r3, #4
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d016      	beq.n	8005426 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fe fca0 	bl	8003d3c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fe fc9c 	bl	8003d3c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e13b      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005416:	4b74      	ldr	r3, [pc, #464]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ed      	beq.n	8005400 <HAL_RCC_OscConfig+0x388>
 8005424:	e015      	b.n	8005452 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005426:	f7fe fc89 	bl	8003d3c <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fe fc85 	bl	8003d3c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e124      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005444:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1ed      	bne.n	800542e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005452:	7ffb      	ldrb	r3, [r7, #31]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005458:	4b63      	ldr	r3, [pc, #396]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	4a62      	ldr	r2, [pc, #392]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800545e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005462:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03c      	beq.n	80054ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005478:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800547a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547e:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fe fc58 	bl	8003d3c <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005490:	f7fe fc54 	bl	8003d3c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0f5      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054a2:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80054a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0ef      	beq.n	8005490 <HAL_RCC_OscConfig+0x418>
 80054b0:	e01b      	b.n	80054ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054b2:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80054b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b8:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fe fc3b 	bl	8003d3c <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ca:	f7fe fc37 	bl	8003d3c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e0d8      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80054de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1ef      	bne.n	80054ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80cc 	beq.w	800568c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	f000 8086 	beq.w	800560e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d15a      	bne.n	80055c0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a36      	ldr	r2, [pc, #216]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005516:	f7fe fc11 	bl	8003d3c <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551e:	f7fe fc0d 	bl	8003d3c <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e0ae      	b.n	800568e <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005530:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800553c:	4b2a      	ldr	r3, [pc, #168]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_RCC_OscConfig+0x578>)
 8005542:	4013      	ands	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6a11      	ldr	r1, [r2, #32]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800554c:	3a01      	subs	r2, #1
 800554e:	0112      	lsls	r2, r2, #4
 8005550:	4311      	orrs	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005556:	0212      	lsls	r2, r2, #8
 8005558:	4311      	orrs	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800555e:	0852      	lsrs	r2, r2, #1
 8005560:	3a01      	subs	r2, #1
 8005562:	0552      	lsls	r2, r2, #21
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800556a:	0852      	lsrs	r2, r2, #1
 800556c:	3a01      	subs	r2, #1
 800556e:	0652      	lsls	r2, r2, #25
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005576:	06d2      	lsls	r2, r2, #27
 8005578:	430a      	orrs	r2, r1
 800557a:	491b      	ldr	r1, [pc, #108]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800557c:	4313      	orrs	r3, r2
 800557e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800558c:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 8005592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fe fbd0 	bl	8003d3c <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fe fbcc 	bl	8003d3c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e06d      	b.n	800568e <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x528>
 80055be:	e065      	b.n	800568c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <HAL_RCC_OscConfig+0x570>)
 80055c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fe fbb6 	bl	8003d3c <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d2:	e00f      	b.n	80055f4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fe fbb2 	bl	8003d3c <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d908      	bls.n	80055f4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e053      	b.n	800568e <HAL_RCC_OscConfig+0x616>
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40007000 	.word	0x40007000
 80055f0:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	4b28      	ldr	r3, [pc, #160]	; (8005698 <HAL_RCC_OscConfig+0x620>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e9      	bne.n	80055d4 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <HAL_RCC_OscConfig+0x620>)
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	4924      	ldr	r1, [pc, #144]	; (8005698 <HAL_RCC_OscConfig+0x620>)
 8005606:	4b25      	ldr	r3, [pc, #148]	; (800569c <HAL_RCC_OscConfig+0x624>)
 8005608:	4013      	ands	r3, r2
 800560a:	60cb      	str	r3, [r1, #12]
 800560c:	e03e      	b.n	800568c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e039      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <HAL_RCC_OscConfig+0x620>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	429a      	cmp	r2, r3
 800562c:	d12c      	bne.n	8005688 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	3b01      	subs	r3, #1
 800563a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563c:	429a      	cmp	r2, r3
 800563e:	d123      	bne.n	8005688 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d11b      	bne.n	8005688 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d113      	bne.n	8005688 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	3b01      	subs	r3, #1
 800566e:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005670:	429a      	cmp	r2, r3
 8005672:	d109      	bne.n	8005688 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	3b01      	subs	r3, #1
 8005682:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	feeefffc 	.word	0xfeeefffc

080056a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e11e      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b91      	ldr	r3, [pc, #580]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d910      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b8e      	ldr	r3, [pc, #568]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 020f 	bic.w	r2, r3, #15
 80056ce:	498c      	ldr	r1, [pc, #560]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b8a      	ldr	r3, [pc, #552]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e106      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d073      	beq.n	80057dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d129      	bne.n	8005750 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fc:	4b81      	ldr	r3, [pc, #516]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0f4      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800570c:	f000 f99e 	bl	8005a4c <RCC_GetSysClockFreqFromPLLSource>
 8005710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4a7c      	ldr	r2, [pc, #496]	; (8005908 <HAL_RCC_ClockConfig+0x268>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d93f      	bls.n	800579a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800571a:	4b7a      	ldr	r3, [pc, #488]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800572e:	2b00      	cmp	r3, #0
 8005730:	d033      	beq.n	800579a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005736:	2b00      	cmp	r3, #0
 8005738:	d12f      	bne.n	800579a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800573a:	4b72      	ldr	r3, [pc, #456]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005742:	4a70      	ldr	r2, [pc, #448]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e024      	b.n	800579a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d107      	bne.n	8005768 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005758:	4b6a      	ldr	r3, [pc, #424]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0c6      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005768:	4b66      	ldr	r3, [pc, #408]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0be      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005778:	f000 f8ce 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 800577c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4a61      	ldr	r2, [pc, #388]	; (8005908 <HAL_RCC_ClockConfig+0x268>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d909      	bls.n	800579a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005786:	4b5f      	ldr	r3, [pc, #380]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578e:	4a5d      	ldr	r2, [pc, #372]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800579a:	4b5a      	ldr	r3, [pc, #360]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4957      	ldr	r1, [pc, #348]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ac:	f7fe fac6 	bl	8003d3c <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fe fac2 	bl	8003d3c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e095      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	4b4e      	ldr	r3, [pc, #312]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 020c 	and.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1eb      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f4:	4b43      	ldr	r3, [pc, #268]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a42      	ldr	r2, [pc, #264]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80057fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800580c:	4b3d      	ldr	r3, [pc, #244]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005814:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800581a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800581c:	4b39      	ldr	r3, [pc, #228]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4936      	ldr	r1, [pc, #216]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
 800582e:	e008      	b.n	8005842 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d105      	bne.n	8005842 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005836:	4b33      	ldr	r3, [pc, #204]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4a32      	ldr	r2, [pc, #200]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800583c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005840:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005842:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d21d      	bcs.n	800588c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 020f 	bic.w	r2, r3, #15
 8005858:	4929      	ldr	r1, [pc, #164]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005860:	f7fe fa6c 	bl	8003d3c <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fe fa68 	bl	8003d3c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e03b      	b.n	80058f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <HAL_RCC_ClockConfig+0x260>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d1ed      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4917      	ldr	r1, [pc, #92]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058b6:	4b13      	ldr	r3, [pc, #76]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	490f      	ldr	r1, [pc, #60]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058ca:	f000 f825 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <HAL_RCC_ClockConfig+0x264>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	490c      	ldr	r1, [pc, #48]	; (800590c <HAL_RCC_ClockConfig+0x26c>)
 80058dc:	5ccb      	ldrb	r3, [r1, r3]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	fa22 f303 	lsr.w	r3, r2, r3
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <HAL_RCC_ClockConfig+0x270>)
 80058e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <HAL_RCC_ClockConfig+0x274>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe f9d8 	bl	8003ca4 <HAL_InitTick>
 80058f4:	4603      	mov	r3, r0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40022000 	.word	0x40022000
 8005904:	40021000 	.word	0x40021000
 8005908:	04c4b400 	.word	0x04c4b400
 800590c:	0800e960 	.word	0x0800e960
 8005910:	20000000 	.word	0x20000000
 8005914:	20000004 	.word	0x20000004

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800591e:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b04      	cmp	r3, #4
 8005928:	d102      	bne.n	8005930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800592a:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e047      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d102      	bne.n	8005942 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800593c:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e03e      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d136      	bne.n	80059bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	3301      	adds	r3, #1
 8005964:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d10c      	bne.n	8005986 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005976:	68d2      	ldr	r2, [r2, #12]
 8005978:	0a12      	lsrs	r2, r2, #8
 800597a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	617b      	str	r3, [r7, #20]
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	4a10      	ldr	r2, [pc, #64]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005990:	68d2      	ldr	r2, [r2, #12]
 8005992:	0a12      	lsrs	r2, r2, #8
 8005994:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
      break;
 800599e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	0e5b      	lsrs	r3, r3, #25
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	3301      	adds	r3, #1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e001      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059c0:	693b      	ldr	r3, [r7, #16]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	00f42400 	.word	0x00f42400
 80059d8:	007a1200 	.word	0x007a1200

080059dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000000 	.word	0x20000000

080059f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059f8:	f7ff fff0 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 80059fc:	4602      	mov	r2, r0
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	4904      	ldr	r1, [pc, #16]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a0a:	5ccb      	ldrb	r3, [r1, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	0800e970 	.word	0x0800e970

08005a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a24:	f7ff ffda 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0adb      	lsrs	r3, r3, #11
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	4904      	ldr	r1, [pc, #16]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	0800e970 	.word	0x0800e970

08005a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	3301      	adds	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d10c      	bne.n	8005a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a70:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a7a:	68d2      	ldr	r2, [r2, #12]
 8005a7c:	0a12      	lsrs	r2, r2, #8
 8005a7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	617b      	str	r3, [r7, #20]
    break;
 8005a88:	e00c      	b.n	8005aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a8a:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a94:	68d2      	ldr	r2, [r2, #12]
 8005a96:	0a12      	lsrs	r2, r2, #8
 8005a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]
    break;
 8005aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	0e5b      	lsrs	r3, r3, #25
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	007a1200 	.word	0x007a1200
 8005ad4:	00f42400 	.word	0x00f42400

08005ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8098 	beq.w	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afa:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	4a3f      	ldr	r2, [pc, #252]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b10:	6593      	str	r3, [r2, #88]	; 0x58
 8005b12:	4b3d      	ldr	r3, [pc, #244]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b22:	4b3a      	ldr	r3, [pc, #232]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a39      	ldr	r2, [pc, #228]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b2e:	f7fe f905 	bl	8003d3c <HAL_GetTick>
 8005b32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b34:	e009      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b36:	f7fe f901 	bl	8003d3c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d902      	bls.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	74fb      	strb	r3, [r7, #19]
        break;
 8005b48:	e005      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b4a:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ef      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d159      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b5c:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01e      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d019      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b84:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b94:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fe f8c1 	bl	8003d3c <HAL_GetTick>
 8005bba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bbc:	e00b      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7fe f8bd 	bl	8003d3c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d902      	bls.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	74fb      	strb	r3, [r7, #19]
            break;
 8005bd4:	e006      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ec      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005be4:	7cfb      	ldrb	r3, [r7, #19]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	4903      	ldr	r1, [pc, #12]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	74bb      	strb	r3, [r7, #18]
 8005c06:	e005      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c14:	7c7b      	ldrb	r3, [r7, #17]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d105      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c1a:	4ba6      	ldr	r3, [pc, #664]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1e:	4aa5      	ldr	r2, [pc, #660]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c32:	4ba0      	ldr	r3, [pc, #640]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c38:	f023 0203 	bic.w	r2, r3, #3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	499c      	ldr	r1, [pc, #624]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c54:	4b97      	ldr	r3, [pc, #604]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f023 020c 	bic.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4994      	ldr	r1, [pc, #592]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c76:	4b8f      	ldr	r3, [pc, #572]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	498b      	ldr	r1, [pc, #556]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c98:	4b86      	ldr	r3, [pc, #536]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	4983      	ldr	r1, [pc, #524]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cba:	4b7e      	ldr	r3, [pc, #504]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	497a      	ldr	r1, [pc, #488]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cdc:	4b75      	ldr	r3, [pc, #468]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	4972      	ldr	r1, [pc, #456]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cfe:	4b6d      	ldr	r3, [pc, #436]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4969      	ldr	r1, [pc, #420]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d20:	4b64      	ldr	r3, [pc, #400]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4961      	ldr	r1, [pc, #388]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d42:	4b5c      	ldr	r3, [pc, #368]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	4958      	ldr	r1, [pc, #352]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d015      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d64:	4b53      	ldr	r3, [pc, #332]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	4950      	ldr	r1, [pc, #320]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d82:	d105      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d84:	4b4b      	ldr	r3, [pc, #300]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a4a      	ldr	r2, [pc, #296]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d015      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d9c:	4b45      	ldr	r3, [pc, #276]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	4942      	ldr	r1, [pc, #264]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dba:	d105      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dbc:	4b3d      	ldr	r3, [pc, #244]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4a3c      	ldr	r2, [pc, #240]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d015      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dd4:	4b37      	ldr	r3, [pc, #220]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	4934      	ldr	r1, [pc, #208]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005df2:	d105      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df4:	4b2f      	ldr	r3, [pc, #188]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a2e      	ldr	r2, [pc, #184]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e0c:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	4926      	ldr	r1, [pc, #152]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d015      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	4918      	ldr	r1, [pc, #96]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e62:	d105      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	490a      	ldr	r1, [pc, #40]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ea8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000

08005eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e042      	b.n	8005f50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fd fd0f 	bl	8003900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	; 0x24
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fee2 	bl	8006ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fc43 	bl	8006794 <UART_SetConfig>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e01b      	b.n	8005f50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 ff61 	bl	8006e10 <UART_CheckIdleState>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d17b      	bne.n	800606a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_UART_Transmit+0x26>
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e074      	b.n	800606c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2221      	movs	r2, #33	; 0x21
 8005f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f92:	f7fd fed3 	bl	8003d3c <HAL_GetTick>
 8005f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d108      	bne.n	8005fc4 <HAL_UART_Transmit+0x6c>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	e003      	b.n	8005fcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fcc:	e030      	b.n	8006030 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 ffc3 	bl	8006f64 <UART_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e03d      	b.n	800606c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	3302      	adds	r3, #2
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e007      	b.n	800601e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3301      	adds	r3, #1
 800601c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1c8      	bne.n	8005fce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	2140      	movs	r1, #64	; 0x40
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 ff8c 	bl	8006f64 <UART_WaitOnFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e006      	b.n	800606c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006088:	2b20      	cmp	r3, #32
 800608a:	d137      	bne.n	80060fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_UART_Receive_IT+0x24>
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e030      	b.n	80060fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_UART_Receive_IT+0x94>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d01f      	beq.n	80060ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d018      	beq.n	80060ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	613b      	str	r3, [r7, #16]
   return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	461a      	mov	r2, r3
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 ffa4 	bl	8007040 <UART_Start_Receive_IT>
 80060f8:	4603      	mov	r3, r0
 80060fa:	e000      	b.n	80060fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	; 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40008000 	.word	0x40008000

0800610c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b0ba      	sub	sp, #232	; 0xe8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006136:	f640 030f 	movw	r3, #2063	; 0x80f
 800613a:	4013      	ands	r3, r2
 800613c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11b      	bne.n	8006180 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 82e3 	beq.w	800673c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
      }
      return;
 800617e:	e2dd      	b.n	800673c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8123 	beq.w	80063d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800618a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800618e:	4b8d      	ldr	r3, [pc, #564]	; (80063c4 <HAL_UART_IRQHandler+0x2b8>)
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006196:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800619a:	4b8b      	ldr	r3, [pc, #556]	; (80063c8 <HAL_UART_IRQHandler+0x2bc>)
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8116 	beq.w	80063d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d011      	beq.n	80061d4 <HAL_UART_IRQHandler+0xc8>
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2201      	movs	r2, #1
 80061c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ca:	f043 0201 	orr.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d011      	beq.n	8006204 <HAL_UART_IRQHandler+0xf8>
 80061e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2202      	movs	r2, #2
 80061f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f043 0204 	orr.w	r2, r3, #4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d011      	beq.n	8006234 <HAL_UART_IRQHandler+0x128>
 8006210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2204      	movs	r2, #4
 8006222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f043 0202 	orr.w	r2, r3, #2
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800624c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006250:	4b5c      	ldr	r3, [pc, #368]	; (80063c4 <HAL_UART_IRQHandler+0x2b8>)
 8006252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2208      	movs	r2, #8
 800625e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f043 0208 	orr.w	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006278:	2b00      	cmp	r3, #0
 800627a:	d012      	beq.n	80062a2 <HAL_UART_IRQHandler+0x196>
 800627c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00c      	beq.n	80062a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8249 	beq.w	8006740 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d013      	beq.n	80062e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d005      	beq.n	8006306 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006302:	2b00      	cmp	r3, #0
 8006304:	d054      	beq.n	80063b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 ffbc 	bl	8007284 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d146      	bne.n	80063a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800634a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800635e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d9      	bne.n	800631a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636c:	2b00      	cmp	r3, #0
 800636e:	d017      	beq.n	80063a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006376:	4a15      	ldr	r2, [pc, #84]	; (80063cc <HAL_UART_IRQHandler+0x2c0>)
 8006378:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006380:	4618      	mov	r0, r3
 8006382:	f7fd fe71 	bl	8004068 <HAL_DMA_Abort_IT>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d019      	beq.n	80063c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800639a:	4610      	mov	r0, r2
 800639c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639e:	e00f      	b.n	80063c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9e1 	bl	8006768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a6:	e00b      	b.n	80063c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f9dd 	bl	8006768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ae:	e007      	b.n	80063c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9d9 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80063be:	e1bf      	b.n	8006740 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	bf00      	nop
    return;
 80063c2:	e1bd      	b.n	8006740 <HAL_UART_IRQHandler+0x634>
 80063c4:	10000001 	.word	0x10000001
 80063c8:	04000120 	.word	0x04000120
 80063cc:	08007351 	.word	0x08007351

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	f040 8153 	bne.w	8006680 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 814c 	beq.w	8006680 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8145 	beq.w	8006680 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2210      	movs	r2, #16
 80063fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	f040 80bb 	bne.w	8006584 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800641c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 818f 	beq.w	8006744 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800642c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006430:	429a      	cmp	r2, r3
 8006432:	f080 8187 	bcs.w	8006744 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800643c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 8087 	bne.w	8006562 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800646c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800647e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006482:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800648a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1da      	bne.n	8006454 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3308      	adds	r3, #8
 80064a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e1      	bne.n	800649e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800650c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e3      	bne.n	80064da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006530:	f023 0310 	bic.w	r3, r3, #16
 8006534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006542:	65bb      	str	r3, [r7, #88]	; 0x58
 8006544:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e4      	bne.n	8006520 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd fd2a 	bl	8003fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006574:	b29b      	uxth	r3, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	b29b      	uxth	r3, r3
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f8fd 	bl	800677c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006582:	e0df      	b.n	8006744 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006590:	b29b      	uxth	r3, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80d1 	beq.w	8006748 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80065a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80cc 	beq.w	8006748 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d2:	647b      	str	r3, [r7, #68]	; 0x44
 80065d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e4      	bne.n	80065b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	623b      	str	r3, [r7, #32]
   return(result);
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800660e:	633a      	str	r2, [r7, #48]	; 0x30
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e1      	bne.n	80065e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	60fb      	str	r3, [r7, #12]
   return(result);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0310 	bic.w	r3, r3, #16
 800664a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	617b      	str	r3, [r7, #20]
   return(result);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e4      	bne.n	8006636 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f87f 	bl	800677c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800667e:	e063      	b.n	8006748 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00e      	beq.n	80066aa <HAL_UART_IRQHandler+0x59e>
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fbb2 	bl	8007e0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066a8:	e051      	b.n	800674e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d014      	beq.n	80066e0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d03a      	beq.n	800674c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
    }
    return;
 80066de:	e035      	b.n	800674c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <HAL_UART_IRQHandler+0x5f4>
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fe3f 	bl	800737c <UART_EndTransmit_IT>
    return;
 80066fe:	e026      	b.n	800674e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <HAL_UART_IRQHandler+0x614>
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fb8b 	bl	8007e34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800671e:	e016      	b.n	800674e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <HAL_UART_IRQHandler+0x642>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006730:	2b00      	cmp	r3, #0
 8006732:	da0c      	bge.n	800674e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 fb73 	bl	8007e20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800673a:	e008      	b.n	800674e <HAL_UART_IRQHandler+0x642>
      return;
 800673c:	bf00      	nop
 800673e:	e006      	b.n	800674e <HAL_UART_IRQHandler+0x642>
    return;
 8006740:	bf00      	nop
 8006742:	e004      	b.n	800674e <HAL_UART_IRQHandler+0x642>
      return;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_UART_IRQHandler+0x642>
      return;
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_UART_IRQHandler+0x642>
    return;
 800674c:	bf00      	nop
  }
}
 800674e:	37e8      	adds	r7, #232	; 0xe8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006794:	b5b0      	push	{r4, r5, r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4baf      	ldr	r3, [pc, #700]	; (8006a7c <UART_SetConfig+0x2e8>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	69f9      	ldr	r1, [r7, #28]
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4aa4      	ldr	r2, [pc, #656]	; (8006a80 <UART_SetConfig+0x2ec>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006806:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	69f9      	ldr	r1, [r7, #28]
 8006810:	430b      	orrs	r3, r1
 8006812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	f023 010f 	bic.w	r1, r3, #15
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a95      	ldr	r2, [pc, #596]	; (8006a84 <UART_SetConfig+0x2f0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d120      	bne.n	8006876 <UART_SetConfig+0xe2>
 8006834:	4b94      	ldr	r3, [pc, #592]	; (8006a88 <UART_SetConfig+0x2f4>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	2b03      	cmp	r3, #3
 8006840:	d816      	bhi.n	8006870 <UART_SetConfig+0xdc>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0xb4>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	08006865 	.word	0x08006865
 8006850:	0800685f 	.word	0x0800685f
 8006854:	0800686b 	.word	0x0800686b
 8006858:	2301      	movs	r3, #1
 800685a:	76fb      	strb	r3, [r7, #27]
 800685c:	e0bc      	b.n	80069d8 <UART_SetConfig+0x244>
 800685e:	2302      	movs	r3, #2
 8006860:	76fb      	strb	r3, [r7, #27]
 8006862:	e0b9      	b.n	80069d8 <UART_SetConfig+0x244>
 8006864:	2304      	movs	r3, #4
 8006866:	76fb      	strb	r3, [r7, #27]
 8006868:	e0b6      	b.n	80069d8 <UART_SetConfig+0x244>
 800686a:	2308      	movs	r3, #8
 800686c:	76fb      	strb	r3, [r7, #27]
 800686e:	e0b3      	b.n	80069d8 <UART_SetConfig+0x244>
 8006870:	2310      	movs	r3, #16
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e0b0      	b.n	80069d8 <UART_SetConfig+0x244>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a84      	ldr	r2, [pc, #528]	; (8006a8c <UART_SetConfig+0x2f8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d132      	bne.n	80068e6 <UART_SetConfig+0x152>
 8006880:	4b81      	ldr	r3, [pc, #516]	; (8006a88 <UART_SetConfig+0x2f4>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f003 030c 	and.w	r3, r3, #12
 800688a:	2b0c      	cmp	r3, #12
 800688c:	d828      	bhi.n	80068e0 <UART_SetConfig+0x14c>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <UART_SetConfig+0x100>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068c9 	.word	0x080068c9
 8006898:	080068e1 	.word	0x080068e1
 800689c:	080068e1 	.word	0x080068e1
 80068a0:	080068e1 	.word	0x080068e1
 80068a4:	080068d5 	.word	0x080068d5
 80068a8:	080068e1 	.word	0x080068e1
 80068ac:	080068e1 	.word	0x080068e1
 80068b0:	080068e1 	.word	0x080068e1
 80068b4:	080068cf 	.word	0x080068cf
 80068b8:	080068e1 	.word	0x080068e1
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068db 	.word	0x080068db
 80068c8:	2300      	movs	r3, #0
 80068ca:	76fb      	strb	r3, [r7, #27]
 80068cc:	e084      	b.n	80069d8 <UART_SetConfig+0x244>
 80068ce:	2302      	movs	r3, #2
 80068d0:	76fb      	strb	r3, [r7, #27]
 80068d2:	e081      	b.n	80069d8 <UART_SetConfig+0x244>
 80068d4:	2304      	movs	r3, #4
 80068d6:	76fb      	strb	r3, [r7, #27]
 80068d8:	e07e      	b.n	80069d8 <UART_SetConfig+0x244>
 80068da:	2308      	movs	r3, #8
 80068dc:	76fb      	strb	r3, [r7, #27]
 80068de:	e07b      	b.n	80069d8 <UART_SetConfig+0x244>
 80068e0:	2310      	movs	r3, #16
 80068e2:	76fb      	strb	r3, [r7, #27]
 80068e4:	e078      	b.n	80069d8 <UART_SetConfig+0x244>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a69      	ldr	r2, [pc, #420]	; (8006a90 <UART_SetConfig+0x2fc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d120      	bne.n	8006932 <UART_SetConfig+0x19e>
 80068f0:	4b65      	ldr	r3, [pc, #404]	; (8006a88 <UART_SetConfig+0x2f4>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068fa:	2b30      	cmp	r3, #48	; 0x30
 80068fc:	d013      	beq.n	8006926 <UART_SetConfig+0x192>
 80068fe:	2b30      	cmp	r3, #48	; 0x30
 8006900:	d814      	bhi.n	800692c <UART_SetConfig+0x198>
 8006902:	2b20      	cmp	r3, #32
 8006904:	d009      	beq.n	800691a <UART_SetConfig+0x186>
 8006906:	2b20      	cmp	r3, #32
 8006908:	d810      	bhi.n	800692c <UART_SetConfig+0x198>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <UART_SetConfig+0x180>
 800690e:	2b10      	cmp	r3, #16
 8006910:	d006      	beq.n	8006920 <UART_SetConfig+0x18c>
 8006912:	e00b      	b.n	800692c <UART_SetConfig+0x198>
 8006914:	2300      	movs	r3, #0
 8006916:	76fb      	strb	r3, [r7, #27]
 8006918:	e05e      	b.n	80069d8 <UART_SetConfig+0x244>
 800691a:	2302      	movs	r3, #2
 800691c:	76fb      	strb	r3, [r7, #27]
 800691e:	e05b      	b.n	80069d8 <UART_SetConfig+0x244>
 8006920:	2304      	movs	r3, #4
 8006922:	76fb      	strb	r3, [r7, #27]
 8006924:	e058      	b.n	80069d8 <UART_SetConfig+0x244>
 8006926:	2308      	movs	r3, #8
 8006928:	76fb      	strb	r3, [r7, #27]
 800692a:	e055      	b.n	80069d8 <UART_SetConfig+0x244>
 800692c:	2310      	movs	r3, #16
 800692e:	76fb      	strb	r3, [r7, #27]
 8006930:	e052      	b.n	80069d8 <UART_SetConfig+0x244>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a57      	ldr	r2, [pc, #348]	; (8006a94 <UART_SetConfig+0x300>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d120      	bne.n	800697e <UART_SetConfig+0x1ea>
 800693c:	4b52      	ldr	r3, [pc, #328]	; (8006a88 <UART_SetConfig+0x2f4>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006946:	2bc0      	cmp	r3, #192	; 0xc0
 8006948:	d013      	beq.n	8006972 <UART_SetConfig+0x1de>
 800694a:	2bc0      	cmp	r3, #192	; 0xc0
 800694c:	d814      	bhi.n	8006978 <UART_SetConfig+0x1e4>
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	d009      	beq.n	8006966 <UART_SetConfig+0x1d2>
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	d810      	bhi.n	8006978 <UART_SetConfig+0x1e4>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <UART_SetConfig+0x1cc>
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d006      	beq.n	800696c <UART_SetConfig+0x1d8>
 800695e:	e00b      	b.n	8006978 <UART_SetConfig+0x1e4>
 8006960:	2300      	movs	r3, #0
 8006962:	76fb      	strb	r3, [r7, #27]
 8006964:	e038      	b.n	80069d8 <UART_SetConfig+0x244>
 8006966:	2302      	movs	r3, #2
 8006968:	76fb      	strb	r3, [r7, #27]
 800696a:	e035      	b.n	80069d8 <UART_SetConfig+0x244>
 800696c:	2304      	movs	r3, #4
 800696e:	76fb      	strb	r3, [r7, #27]
 8006970:	e032      	b.n	80069d8 <UART_SetConfig+0x244>
 8006972:	2308      	movs	r3, #8
 8006974:	76fb      	strb	r3, [r7, #27]
 8006976:	e02f      	b.n	80069d8 <UART_SetConfig+0x244>
 8006978:	2310      	movs	r3, #16
 800697a:	76fb      	strb	r3, [r7, #27]
 800697c:	e02c      	b.n	80069d8 <UART_SetConfig+0x244>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a3f      	ldr	r2, [pc, #252]	; (8006a80 <UART_SetConfig+0x2ec>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d125      	bne.n	80069d4 <UART_SetConfig+0x240>
 8006988:	4b3f      	ldr	r3, [pc, #252]	; (8006a88 <UART_SetConfig+0x2f4>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006996:	d017      	beq.n	80069c8 <UART_SetConfig+0x234>
 8006998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800699c:	d817      	bhi.n	80069ce <UART_SetConfig+0x23a>
 800699e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a2:	d00b      	beq.n	80069bc <UART_SetConfig+0x228>
 80069a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a8:	d811      	bhi.n	80069ce <UART_SetConfig+0x23a>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <UART_SetConfig+0x222>
 80069ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b2:	d006      	beq.n	80069c2 <UART_SetConfig+0x22e>
 80069b4:	e00b      	b.n	80069ce <UART_SetConfig+0x23a>
 80069b6:	2300      	movs	r3, #0
 80069b8:	76fb      	strb	r3, [r7, #27]
 80069ba:	e00d      	b.n	80069d8 <UART_SetConfig+0x244>
 80069bc:	2302      	movs	r3, #2
 80069be:	76fb      	strb	r3, [r7, #27]
 80069c0:	e00a      	b.n	80069d8 <UART_SetConfig+0x244>
 80069c2:	2304      	movs	r3, #4
 80069c4:	76fb      	strb	r3, [r7, #27]
 80069c6:	e007      	b.n	80069d8 <UART_SetConfig+0x244>
 80069c8:	2308      	movs	r3, #8
 80069ca:	76fb      	strb	r3, [r7, #27]
 80069cc:	e004      	b.n	80069d8 <UART_SetConfig+0x244>
 80069ce:	2310      	movs	r3, #16
 80069d0:	76fb      	strb	r3, [r7, #27]
 80069d2:	e001      	b.n	80069d8 <UART_SetConfig+0x244>
 80069d4:	2310      	movs	r3, #16
 80069d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a28      	ldr	r2, [pc, #160]	; (8006a80 <UART_SetConfig+0x2ec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	f040 809e 	bne.w	8006b20 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069e4:	7efb      	ldrb	r3, [r7, #27]
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d823      	bhi.n	8006a32 <UART_SetConfig+0x29e>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x25c>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a33 	.word	0x08006a33
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a33 	.word	0x08006a33
 8006a00:	08006a23 	.word	0x08006a23
 8006a04:	08006a33 	.word	0x08006a33
 8006a08:	08006a33 	.word	0x08006a33
 8006a0c:	08006a33 	.word	0x08006a33
 8006a10:	08006a2b 	.word	0x08006a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a14:	f7fe ffee 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006a18:	6178      	str	r0, [r7, #20]
        break;
 8006a1a:	e00f      	b.n	8006a3c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <UART_SetConfig+0x304>)
 8006a1e:	617b      	str	r3, [r7, #20]
        break;
 8006a20:	e00c      	b.n	8006a3c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a22:	f7fe ff79 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8006a26:	6178      	str	r0, [r7, #20]
        break;
 8006a28:	e008      	b.n	8006a3c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2e:	617b      	str	r3, [r7, #20]
        break;
 8006a30:	e004      	b.n	8006a3c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	76bb      	strb	r3, [r7, #26]
        break;
 8006a3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 812c 	beq.w	8006c9c <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <UART_SetConfig+0x308>)
 8006a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d305      	bcc.n	8006a74 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d915      	bls.n	8006aa0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	76bb      	strb	r3, [r7, #26]
 8006a78:	e110      	b.n	8006c9c <UART_SetConfig+0x508>
 8006a7a:	bf00      	nop
 8006a7c:	cfff69f3 	.word	0xcfff69f3
 8006a80:	40008000 	.word	0x40008000
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	40004400 	.word	0x40004400
 8006a90:	40004800 	.word	0x40004800
 8006a94:	40004c00 	.word	0x40004c00
 8006a98:	00f42400 	.word	0x00f42400
 8006a9c:	0800e978 	.word	0x0800e978
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f04f 0100 	mov.w	r1, #0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	4a85      	ldr	r2, [pc, #532]	; (8006cc4 <UART_SetConfig+0x530>)
 8006aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	f7fa f96e 	bl	8000d98 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	020b      	lsls	r3, r1, #8
 8006ace:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad2:	0202      	lsls	r2, r0, #8
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	6849      	ldr	r1, [r1, #4]
 8006ad8:	0849      	lsrs	r1, r1, #1
 8006ada:	4608      	mov	r0, r1
 8006adc:	f04f 0100 	mov.w	r1, #0
 8006ae0:	1814      	adds	r4, r2, r0
 8006ae2:	eb43 0501 	adc.w	r5, r3, r1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7fa f950 	bl	8000d98 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4613      	mov	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d308      	bcc.n	8006b1a <UART_SetConfig+0x386>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0e:	d204      	bcs.n	8006b1a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e0c0      	b.n	8006c9c <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	76bb      	strb	r3, [r7, #26]
 8006b1e:	e0bd      	b.n	8006c9c <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	d164      	bne.n	8006bf4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006b2a:	7efb      	ldrb	r3, [r7, #27]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d828      	bhi.n	8006b82 <UART_SetConfig+0x3ee>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x3a4>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b83 	.word	0x08006b83
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	08006b83 	.word	0x08006b83
 8006b50:	08006b83 	.word	0x08006b83
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7fe ff4a 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006b60:	6178      	str	r0, [r7, #20]
        break;
 8006b62:	e013      	b.n	8006b8c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b64:	f7fe ff5c 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 8006b68:	6178      	str	r0, [r7, #20]
        break;
 8006b6a:	e00f      	b.n	8006b8c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b56      	ldr	r3, [pc, #344]	; (8006cc8 <UART_SetConfig+0x534>)
 8006b6e:	617b      	str	r3, [r7, #20]
        break;
 8006b70:	e00c      	b.n	8006b8c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fe fed1 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8006b76:	6178      	str	r0, [r7, #20]
        break;
 8006b78:	e008      	b.n	8006b8c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	617b      	str	r3, [r7, #20]
        break;
 8006b80:	e004      	b.n	8006b8c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	76bb      	strb	r3, [r7, #26]
        break;
 8006b8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8084 	beq.w	8006c9c <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	4a4a      	ldr	r2, [pc, #296]	; (8006cc4 <UART_SetConfig+0x530>)
 8006b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ba6:	005a      	lsls	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b0f      	cmp	r3, #15
 8006bbe:	d916      	bls.n	8006bee <UART_SetConfig+0x45a>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc6:	d212      	bcs.n	8006bee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f023 030f 	bic.w	r3, r3, #15
 8006bd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	89fb      	ldrh	r3, [r7, #14]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	89fa      	ldrh	r2, [r7, #14]
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	e056      	b.n	8006c9c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	76bb      	strb	r3, [r7, #26]
 8006bf2:	e053      	b.n	8006c9c <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf4:	7efb      	ldrb	r3, [r7, #27]
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d827      	bhi.n	8006c4a <UART_SetConfig+0x4b6>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <UART_SetConfig+0x46c>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c25 	.word	0x08006c25
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	08006c4b 	.word	0x08006c4b
 8006c10:	08006c3b 	.word	0x08006c3b
 8006c14:	08006c4b 	.word	0x08006c4b
 8006c18:	08006c4b 	.word	0x08006c4b
 8006c1c:	08006c4b 	.word	0x08006c4b
 8006c20:	08006c43 	.word	0x08006c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c24:	f7fe fee6 	bl	80059f4 <HAL_RCC_GetPCLK1Freq>
 8006c28:	6178      	str	r0, [r7, #20]
        break;
 8006c2a:	e013      	b.n	8006c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fe fef8 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 8006c30:	6178      	str	r0, [r7, #20]
        break;
 8006c32:	e00f      	b.n	8006c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <UART_SetConfig+0x534>)
 8006c36:	617b      	str	r3, [r7, #20]
        break;
 8006c38:	e00c      	b.n	8006c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe fe6d 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 8006c3e:	6178      	str	r0, [r7, #20]
        break;
 8006c40:	e008      	b.n	8006c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c46:	617b      	str	r3, [r7, #20]
        break;
 8006c48:	e004      	b.n	8006c54 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	76bb      	strb	r3, [r7, #26]
        break;
 8006c52:	bf00      	nop
    }

    if (pclk != 0U)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d020      	beq.n	8006c9c <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <UART_SetConfig+0x530>)
 8006c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c64:	461a      	mov	r2, r3
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b0f      	cmp	r3, #15
 8006c82:	d909      	bls.n	8006c98 <UART_SetConfig+0x504>
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8a:	d205      	bcs.n	8006c98 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e001      	b.n	8006c9c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006cb8:	7ebb      	ldrb	r3, [r7, #26]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	0800e978 	.word	0x0800e978
 8006cc8:	00f42400 	.word	0x00f42400

08006ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01a      	beq.n	8006de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dca:	d10a      	bne.n	8006de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]
  }
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b098      	sub	sp, #96	; 0x60
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e20:	f7fc ff8c 	bl	8003d3c <HAL_GetTick>
 8006e24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d12f      	bne.n	8006e94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f88e 	bl	8006f64 <UART_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d022      	beq.n	8006e94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e62:	653b      	str	r3, [r7, #80]	; 0x50
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e6      	bne.n	8006e4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e063      	b.n	8006f5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d149      	bne.n	8006f36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f857 	bl	8006f64 <UART_WaitOnFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d03c      	beq.n	8006f36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30
 8006edc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e6      	bne.n	8006ebc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f0e:	61fa      	str	r2, [r7, #28]
 8006f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	69b9      	ldr	r1, [r7, #24]
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e012      	b.n	8006f5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3758      	adds	r7, #88	; 0x58
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	4613      	mov	r3, r2
 8006f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f74:	e04f      	b.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d04b      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7e:	f7fc fedd 	bl	8003d3c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d302      	bcc.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e04e      	b.n	8007036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d037      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d034      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d031      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d110      	bne.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f95b 	bl	8007284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e029      	b.n	8007036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff0:	d111      	bne.n	8007016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f941 	bl	8007284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e00f      	b.n	8007036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	bf0c      	ite	eq
 8007026:	2301      	moveq	r3, #1
 8007028:	2300      	movne	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	429a      	cmp	r2, r3
 8007032:	d0a0      	beq.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007040:	b480      	push	{r7}
 8007042:	b0a3      	sub	sp, #140	; 0x8c
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	88fa      	ldrh	r2, [r7, #6]
 8007060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007072:	d10e      	bne.n	8007092 <UART_Start_Receive_IT+0x52>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d105      	bne.n	8007088 <UART_Start_Receive_IT+0x48>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007086:	e02d      	b.n	80070e4 <UART_Start_Receive_IT+0xa4>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	22ff      	movs	r2, #255	; 0xff
 800708c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007090:	e028      	b.n	80070e4 <UART_Start_Receive_IT+0xa4>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10d      	bne.n	80070b6 <UART_Start_Receive_IT+0x76>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <UART_Start_Receive_IT+0x6c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070aa:	e01b      	b.n	80070e4 <UART_Start_Receive_IT+0xa4>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	227f      	movs	r2, #127	; 0x7f
 80070b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070b4:	e016      	b.n	80070e4 <UART_Start_Receive_IT+0xa4>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070be:	d10d      	bne.n	80070dc <UART_Start_Receive_IT+0x9c>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <UART_Start_Receive_IT+0x92>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	227f      	movs	r2, #127	; 0x7f
 80070cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070d0:	e008      	b.n	80070e4 <UART_Start_Receive_IT+0xa4>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	223f      	movs	r2, #63	; 0x3f
 80070d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070da:	e003      	b.n	80070e4 <UART_Start_Receive_IT+0xa4>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2222      	movs	r2, #34	; 0x22
 80070f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007118:	673a      	str	r2, [r7, #112]	; 0x70
 800711a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800711e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e3      	bne.n	80070f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007134:	d14f      	bne.n	80071d6 <UART_Start_Receive_IT+0x196>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800713c:	88fa      	ldrh	r2, [r7, #6]
 800713e:	429a      	cmp	r2, r3
 8007140:	d349      	bcc.n	80071d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d107      	bne.n	800715c <UART_Start_Receive_IT+0x11c>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d103      	bne.n	800715c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a47      	ldr	r2, [pc, #284]	; (8007274 <UART_Start_Receive_IT+0x234>)
 8007158:	675a      	str	r2, [r3, #116]	; 0x74
 800715a:	e002      	b.n	8007162 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4a46      	ldr	r2, [pc, #280]	; (8007278 <UART_Start_Receive_IT+0x238>)
 8007160:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01a      	beq.n	80071a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800718c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800718e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800719a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e4      	bne.n	800716a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80071c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e5      	bne.n	80071a0 <UART_Start_Receive_IT+0x160>
 80071d4:	e046      	b.n	8007264 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d107      	bne.n	80071f0 <UART_Start_Receive_IT+0x1b0>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d103      	bne.n	80071f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a24      	ldr	r2, [pc, #144]	; (800727c <UART_Start_Receive_IT+0x23c>)
 80071ec:	675a      	str	r2, [r3, #116]	; 0x74
 80071ee:	e002      	b.n	80071f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a23      	ldr	r2, [pc, #140]	; (8007280 <UART_Start_Receive_IT+0x240>)
 80071f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d019      	beq.n	8007232 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007212:	677b      	str	r3, [r7, #116]	; 0x74
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
 800721e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_Start_Receive_IT+0x1be>
 8007230:	e018      	b.n	8007264 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	613b      	str	r3, [r7, #16]
   return(result);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f043 0320 	orr.w	r3, r3, #32
 8007246:	67bb      	str	r3, [r7, #120]	; 0x78
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	61bb      	str	r3, [r7, #24]
   return(result);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	378c      	adds	r7, #140	; 0x8c
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	08007aa5 	.word	0x08007aa5
 8007278:	08007745 	.word	0x08007745
 800727c:	0800758d 	.word	0x0800758d
 8007280:	080073d5 	.word	0x080073d5

08007284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b095      	sub	sp, #84	; 0x54
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40
 80072ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e6      	bne.n	800728c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e3      	bne.n	80072be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d118      	bne.n	8007330 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	60bb      	str	r3, [r7, #8]
   return(result);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 0310 	bic.w	r3, r3, #16
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6979      	ldr	r1, [r7, #20]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	613b      	str	r3, [r7, #16]
   return(result);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e6      	bne.n	80072fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007344:	bf00      	nop
 8007346:	3754      	adds	r7, #84	; 0x54
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff f9fa 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	60bb      	str	r3, [r7, #8]
   return(result);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007398:	61fb      	str	r3, [r7, #28]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6979      	ldr	r1, [r7, #20]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	613b      	str	r3, [r7, #16]
   return(result);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e6      	bne.n	8007384 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff f9c5 	bl	8006754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ca:	bf00      	nop
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b09c      	sub	sp, #112	; 0x70
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ec:	2b22      	cmp	r3, #34	; 0x22
 80073ee:	f040 80be 	bne.w	800756e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007400:	b2d9      	uxtb	r1, r3
 8007402:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007406:	b2da      	uxtb	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	400a      	ands	r2, r1
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	f040 80a1 	bne.w	800757e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800744a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007450:	66bb      	str	r3, [r7, #104]	; 0x68
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800745a:	65bb      	str	r3, [r7, #88]	; 0x58
 800745c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e6      	bne.n	800743c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	667b      	str	r3, [r7, #100]	; 0x64
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800748e:	647a      	str	r2, [r7, #68]	; 0x44
 8007490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800749c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e5      	bne.n	800746e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a33      	ldr	r2, [pc, #204]	; (8007588 <UART_RxISR_8BIT+0x1b4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d01f      	beq.n	8007500 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d018      	beq.n	8007500 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	623b      	str	r3, [r7, #32]
   return(result);
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074e2:	663b      	str	r3, [r7, #96]	; 0x60
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ec:	633b      	str	r3, [r7, #48]	; 0x30
 80074ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007504:	2b01      	cmp	r3, #1
 8007506:	d12e      	bne.n	8007566 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60fb      	str	r3, [r7, #12]
   return(result);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	69b9      	ldr	r1, [r7, #24]
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	617b      	str	r3, [r7, #20]
   return(result);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b10      	cmp	r3, #16
 800754c:	d103      	bne.n	8007556 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2210      	movs	r2, #16
 8007554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f90c 	bl	800677c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007564:	e00b      	b.n	800757e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fc f90a 	bl	8003780 <HAL_UART_RxCpltCallback>
}
 800756c:	e007      	b.n	800757e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0208 	orr.w	r2, r2, #8
 800757c:	619a      	str	r2, [r3, #24]
}
 800757e:	bf00      	nop
 8007580:	3770      	adds	r7, #112	; 0x70
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40008000 	.word	0x40008000

0800758c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b09c      	sub	sp, #112	; 0x70
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800759a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a4:	2b22      	cmp	r3, #34	; 0x22
 80075a6:	f040 80be 	bne.w	8007726 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80075ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80075be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80075c2:	4013      	ands	r3, r2
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 80a1 	bne.w	8007736 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007608:	667b      	str	r3, [r7, #100]	; 0x64
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007612:	657b      	str	r3, [r7, #84]	; 0x54
 8007614:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e6      	bne.n	80075f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	663b      	str	r3, [r7, #96]	; 0x60
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3308      	adds	r3, #8
 8007644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007646:	643a      	str	r2, [r7, #64]	; 0x40
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800764c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e5      	bne.n	8007626 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a33      	ldr	r2, [pc, #204]	; (8007740 <UART_RxISR_16BIT+0x1b4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d01f      	beq.n	80076b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	61fb      	str	r3, [r7, #28]
   return(result);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800769a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d12e      	bne.n	800771e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f023 0310 	bic.w	r3, r3, #16
 80076da:	65bb      	str	r3, [r7, #88]	; 0x58
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6979      	ldr	r1, [r7, #20]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	613b      	str	r3, [r7, #16]
   return(result);
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b10      	cmp	r3, #16
 8007704:	d103      	bne.n	800770e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2210      	movs	r2, #16
 800770c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff f830 	bl	800677c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800771c:	e00b      	b.n	8007736 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fc f82e 	bl	8003780 <HAL_UART_RxCpltCallback>
}
 8007724:	e007      	b.n	8007736 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0208 	orr.w	r2, r2, #8
 8007734:	619a      	str	r2, [r3, #24]
}
 8007736:	bf00      	nop
 8007738:	3770      	adds	r7, #112	; 0x70
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40008000 	.word	0x40008000

08007744 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b0ac      	sub	sp, #176	; 0xb0
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007752:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777a:	2b22      	cmp	r3, #34	; 0x22
 800777c:	f040 8182 	bne.w	8007a84 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007786:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800778a:	e125      	b.n	80079d8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007796:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800779a:	b2d9      	uxtb	r1, r3
 800779c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	400a      	ands	r2, r1
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d053      	beq.n	8007886 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d011      	beq.n	800780e <UART_RxISR_8BIT_FIFOEN+0xca>
 80077ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2201      	movs	r2, #1
 80077fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007804:	f043 0201 	orr.w	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800780e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d011      	beq.n	800783e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800781a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2202      	movs	r2, #2
 800782c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007834:	f043 0204 	orr.w	r2, r3, #4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800783e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d011      	beq.n	800786e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800784a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2204      	movs	r2, #4
 800785c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007864:	f043 0202 	orr.w	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fe ff75 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 80a2 	bne.w	80079d8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078b8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80078bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80078c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e4      	bne.n	8007894 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80078da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078f2:	66ba      	str	r2, [r7, #104]	; 0x68
 80078f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80078f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e1      	bne.n	80078ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5f      	ldr	r2, [pc, #380]	; (8007a9c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d021      	beq.n	8007968 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01a      	beq.n	8007968 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007942:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007954:	657b      	str	r3, [r7, #84]	; 0x54
 8007956:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800795a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e4      	bne.n	8007932 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d130      	bne.n	80079d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f023 0310 	bic.w	r3, r3, #16
 800798a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007998:	643b      	str	r3, [r7, #64]	; 0x40
 800799a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e4      	bne.n	8007976 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b10      	cmp	r3, #16
 80079b8:	d103      	bne.n	80079c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2210      	movs	r2, #16
 80079c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fe fed6 	bl	800677c <HAL_UARTEx_RxEventCallback>
 80079d0:	e002      	b.n	80079d8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fb fed4 	bl	8003780 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d006      	beq.n	80079ee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80079e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f aecf 	bne.w	800778c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d049      	beq.n	8007a94 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d242      	bcs.n	8007a94 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e3      	bne.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007a4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f043 0320 	orr.w	r3, r3, #32
 8007a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6979      	ldr	r1, [r7, #20]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e4      	bne.n	8007a4c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a82:	e007      	b.n	8007a94 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0208 	orr.w	r2, r2, #8
 8007a92:	619a      	str	r2, [r3, #24]
}
 8007a94:	bf00      	nop
 8007a96:	37b0      	adds	r7, #176	; 0xb0
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40008000 	.word	0x40008000
 8007aa0:	080073d5 	.word	0x080073d5

08007aa4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b0ae      	sub	sp, #184	; 0xb8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ab2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ada:	2b22      	cmp	r3, #34	; 0x22
 8007adc:	f040 8186 	bne.w	8007dec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ae6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aea:	e129      	b.n	8007d40 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007afe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007b02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007b06:	4013      	ands	r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	1c9a      	adds	r2, r3, #2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d053      	beq.n	8007bea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d011      	beq.n	8007b72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b68:	f043 0201 	orr.w	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d011      	beq.n	8007ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b98:	f043 0204 	orr.w	r2, r3, #4
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d011      	beq.n	8007bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	f043 0202 	orr.w	r2, r3, #2
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe fdc3 	bl	8006768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f040 80a4 	bne.w	8007d40 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e2      	bne.n	8007bf8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e1      	bne.n	8007c32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a5f      	ldr	r2, [pc, #380]	; (8007e04 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d021      	beq.n	8007cd0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d01a      	beq.n	8007cd0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e4      	bne.n	8007c9a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d130      	bne.n	8007d3a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cee:	f023 0310 	bic.w	r3, r3, #16
 8007cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d00:	647b      	str	r3, [r7, #68]	; 0x44
 8007d02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e4      	bne.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b10      	cmp	r3, #16
 8007d20:	d103      	bne.n	8007d2a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2210      	movs	r2, #16
 8007d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fe fd22 	bl	800677c <HAL_UARTEx_RxEventCallback>
 8007d38:	e002      	b.n	8007d40 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fb fd20 	bl	8003780 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d006      	beq.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f47f aecb 	bne.w	8007aec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d5c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d049      	beq.n	8007dfc <UART_RxISR_16BIT_FIFOEN+0x358>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d6e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d242      	bcs.n	8007dfc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	623b      	str	r3, [r7, #32]
   return(result);
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e3      	bne.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007db2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f043 0320 	orr.w	r3, r3, #32
 8007dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	69b9      	ldr	r1, [r7, #24]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	617b      	str	r3, [r7, #20]
   return(result);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e4      	bne.n	8007db4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dea:	e007      	b.n	8007dfc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	619a      	str	r2, [r3, #24]
}
 8007dfc:	bf00      	nop
 8007dfe:	37b8      	adds	r7, #184	; 0xb8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40008000 	.word	0x40008000
 8007e08:	0800758d 	.word	0x0800758d

08007e0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e027      	b.n	8007eae <HAL_UARTEx_DisableFifoMode+0x66>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2224      	movs	r2, #36	; 0x24
 8007e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e02d      	b.n	8007f2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2224      	movs	r2, #36	; 0x24
 8007ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f850 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e02d      	b.n	8007faa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2224      	movs	r2, #36	; 0x24
 8007f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f812 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d108      	bne.n	8007fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fd4:	e031      	b.n	800803a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fd6:	2308      	movs	r3, #8
 8007fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fda:	2308      	movs	r3, #8
 8007fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	0e5b      	lsrs	r3, r3, #25
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	0f5b      	lsrs	r3, r3, #29
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	7b3a      	ldrb	r2, [r7, #12]
 8008002:	4911      	ldr	r1, [pc, #68]	; (8008048 <UARTEx_SetNbDataToProcess+0x94>)
 8008004:	5c8a      	ldrb	r2, [r1, r2]
 8008006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800800a:	7b3a      	ldrb	r2, [r7, #12]
 800800c:	490f      	ldr	r1, [pc, #60]	; (800804c <UARTEx_SetNbDataToProcess+0x98>)
 800800e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008010:	fb93 f3f2 	sdiv	r3, r3, r2
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	7b7a      	ldrb	r2, [r7, #13]
 8008020:	4909      	ldr	r1, [pc, #36]	; (8008048 <UARTEx_SetNbDataToProcess+0x94>)
 8008022:	5c8a      	ldrb	r2, [r1, r2]
 8008024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008028:	7b7a      	ldrb	r2, [r7, #13]
 800802a:	4908      	ldr	r1, [pc, #32]	; (800804c <UARTEx_SetNbDataToProcess+0x98>)
 800802c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800802e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	0800e990 	.word	0x0800e990
 800804c:	0800e998 	.word	0x0800e998

08008050 <__errno>:
 8008050:	4b01      	ldr	r3, [pc, #4]	; (8008058 <__errno+0x8>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	2000000c 	.word	0x2000000c

0800805c <__libc_init_array>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	4d0d      	ldr	r5, [pc, #52]	; (8008094 <__libc_init_array+0x38>)
 8008060:	4c0d      	ldr	r4, [pc, #52]	; (8008098 <__libc_init_array+0x3c>)
 8008062:	1b64      	subs	r4, r4, r5
 8008064:	10a4      	asrs	r4, r4, #2
 8008066:	2600      	movs	r6, #0
 8008068:	42a6      	cmp	r6, r4
 800806a:	d109      	bne.n	8008080 <__libc_init_array+0x24>
 800806c:	4d0b      	ldr	r5, [pc, #44]	; (800809c <__libc_init_array+0x40>)
 800806e:	4c0c      	ldr	r4, [pc, #48]	; (80080a0 <__libc_init_array+0x44>)
 8008070:	f004 ffda 	bl	800d028 <_init>
 8008074:	1b64      	subs	r4, r4, r5
 8008076:	10a4      	asrs	r4, r4, #2
 8008078:	2600      	movs	r6, #0
 800807a:	42a6      	cmp	r6, r4
 800807c:	d105      	bne.n	800808a <__libc_init_array+0x2e>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	f855 3b04 	ldr.w	r3, [r5], #4
 8008084:	4798      	blx	r3
 8008086:	3601      	adds	r6, #1
 8008088:	e7ee      	b.n	8008068 <__libc_init_array+0xc>
 800808a:	f855 3b04 	ldr.w	r3, [r5], #4
 800808e:	4798      	blx	r3
 8008090:	3601      	adds	r6, #1
 8008092:	e7f2      	b.n	800807a <__libc_init_array+0x1e>
 8008094:	0800eec0 	.word	0x0800eec0
 8008098:	0800eec0 	.word	0x0800eec0
 800809c:	0800eec0 	.word	0x0800eec0
 80080a0:	0800eec4 	.word	0x0800eec4

080080a4 <memset>:
 80080a4:	4402      	add	r2, r0
 80080a6:	4603      	mov	r3, r0
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d100      	bne.n	80080ae <memset+0xa>
 80080ac:	4770      	bx	lr
 80080ae:	f803 1b01 	strb.w	r1, [r3], #1
 80080b2:	e7f9      	b.n	80080a8 <memset+0x4>

080080b4 <__cvt>:
 80080b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b8:	ec55 4b10 	vmov	r4, r5, d0
 80080bc:	2d00      	cmp	r5, #0
 80080be:	460e      	mov	r6, r1
 80080c0:	4619      	mov	r1, r3
 80080c2:	462b      	mov	r3, r5
 80080c4:	bfbb      	ittet	lt
 80080c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ca:	461d      	movlt	r5, r3
 80080cc:	2300      	movge	r3, #0
 80080ce:	232d      	movlt	r3, #45	; 0x2d
 80080d0:	700b      	strb	r3, [r1, #0]
 80080d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080d8:	4691      	mov	r9, r2
 80080da:	f023 0820 	bic.w	r8, r3, #32
 80080de:	bfbc      	itt	lt
 80080e0:	4622      	movlt	r2, r4
 80080e2:	4614      	movlt	r4, r2
 80080e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080e8:	d005      	beq.n	80080f6 <__cvt+0x42>
 80080ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ee:	d100      	bne.n	80080f2 <__cvt+0x3e>
 80080f0:	3601      	adds	r6, #1
 80080f2:	2102      	movs	r1, #2
 80080f4:	e000      	b.n	80080f8 <__cvt+0x44>
 80080f6:	2103      	movs	r1, #3
 80080f8:	ab03      	add	r3, sp, #12
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab02      	add	r3, sp, #8
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	ec45 4b10 	vmov	d0, r4, r5
 8008104:	4653      	mov	r3, sl
 8008106:	4632      	mov	r2, r6
 8008108:	f001 ffc2 	bl	800a090 <_dtoa_r>
 800810c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008110:	4607      	mov	r7, r0
 8008112:	d102      	bne.n	800811a <__cvt+0x66>
 8008114:	f019 0f01 	tst.w	r9, #1
 8008118:	d022      	beq.n	8008160 <__cvt+0xac>
 800811a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800811e:	eb07 0906 	add.w	r9, r7, r6
 8008122:	d110      	bne.n	8008146 <__cvt+0x92>
 8008124:	783b      	ldrb	r3, [r7, #0]
 8008126:	2b30      	cmp	r3, #48	; 0x30
 8008128:	d10a      	bne.n	8008140 <__cvt+0x8c>
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fd01 	bl	8000b38 <__aeabi_dcmpeq>
 8008136:	b918      	cbnz	r0, 8008140 <__cvt+0x8c>
 8008138:	f1c6 0601 	rsb	r6, r6, #1
 800813c:	f8ca 6000 	str.w	r6, [sl]
 8008140:	f8da 3000 	ldr.w	r3, [sl]
 8008144:	4499      	add	r9, r3
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fcf3 	bl	8000b38 <__aeabi_dcmpeq>
 8008152:	b108      	cbz	r0, 8008158 <__cvt+0xa4>
 8008154:	f8cd 900c 	str.w	r9, [sp, #12]
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	454b      	cmp	r3, r9
 800815e:	d307      	bcc.n	8008170 <__cvt+0xbc>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008164:	1bdb      	subs	r3, r3, r7
 8008166:	4638      	mov	r0, r7
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	1c59      	adds	r1, r3, #1
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e7f0      	b.n	800815a <__cvt+0xa6>

08008178 <__exponent>:
 8008178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817a:	4603      	mov	r3, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	bfb8      	it	lt
 8008180:	4249      	neglt	r1, r1
 8008182:	f803 2b02 	strb.w	r2, [r3], #2
 8008186:	bfb4      	ite	lt
 8008188:	222d      	movlt	r2, #45	; 0x2d
 800818a:	222b      	movge	r2, #43	; 0x2b
 800818c:	2909      	cmp	r1, #9
 800818e:	7042      	strb	r2, [r0, #1]
 8008190:	dd2a      	ble.n	80081e8 <__exponent+0x70>
 8008192:	f10d 0407 	add.w	r4, sp, #7
 8008196:	46a4      	mov	ip, r4
 8008198:	270a      	movs	r7, #10
 800819a:	46a6      	mov	lr, r4
 800819c:	460a      	mov	r2, r1
 800819e:	fb91 f6f7 	sdiv	r6, r1, r7
 80081a2:	fb07 1516 	mls	r5, r7, r6, r1
 80081a6:	3530      	adds	r5, #48	; 0x30
 80081a8:	2a63      	cmp	r2, #99	; 0x63
 80081aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80081ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081b2:	4631      	mov	r1, r6
 80081b4:	dcf1      	bgt.n	800819a <__exponent+0x22>
 80081b6:	3130      	adds	r1, #48	; 0x30
 80081b8:	f1ae 0502 	sub.w	r5, lr, #2
 80081bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081c0:	1c44      	adds	r4, r0, #1
 80081c2:	4629      	mov	r1, r5
 80081c4:	4561      	cmp	r1, ip
 80081c6:	d30a      	bcc.n	80081de <__exponent+0x66>
 80081c8:	f10d 0209 	add.w	r2, sp, #9
 80081cc:	eba2 020e 	sub.w	r2, r2, lr
 80081d0:	4565      	cmp	r5, ip
 80081d2:	bf88      	it	hi
 80081d4:	2200      	movhi	r2, #0
 80081d6:	4413      	add	r3, r2
 80081d8:	1a18      	subs	r0, r3, r0
 80081da:	b003      	add	sp, #12
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081e6:	e7ed      	b.n	80081c4 <__exponent+0x4c>
 80081e8:	2330      	movs	r3, #48	; 0x30
 80081ea:	3130      	adds	r1, #48	; 0x30
 80081ec:	7083      	strb	r3, [r0, #2]
 80081ee:	70c1      	strb	r1, [r0, #3]
 80081f0:	1d03      	adds	r3, r0, #4
 80081f2:	e7f1      	b.n	80081d8 <__exponent+0x60>

080081f4 <_printf_float>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	ed2d 8b02 	vpush	{d8}
 80081fc:	b08d      	sub	sp, #52	; 0x34
 80081fe:	460c      	mov	r4, r1
 8008200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008204:	4616      	mov	r6, r2
 8008206:	461f      	mov	r7, r3
 8008208:	4605      	mov	r5, r0
 800820a:	f003 fa65 	bl	800b6d8 <_localeconv_r>
 800820e:	f8d0 a000 	ldr.w	sl, [r0]
 8008212:	4650      	mov	r0, sl
 8008214:	f7f8 f80e 	bl	8000234 <strlen>
 8008218:	2300      	movs	r3, #0
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	f8d8 3000 	ldr.w	r3, [r8]
 8008224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008228:	3307      	adds	r3, #7
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	f103 0208 	add.w	r2, r3, #8
 8008232:	f8c8 2000 	str.w	r2, [r8]
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800823e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	f8cd 8018 	str.w	r8, [sp, #24]
 800824c:	ee08 0a10 	vmov	s16, r0
 8008250:	4b9f      	ldr	r3, [pc, #636]	; (80084d0 <_printf_float+0x2dc>)
 8008252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc9f 	bl	8000b9c <__aeabi_dcmpun>
 800825e:	bb88      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008264:	4b9a      	ldr	r3, [pc, #616]	; (80084d0 <_printf_float+0x2dc>)
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc79 	bl	8000b60 <__aeabi_dcmple>
 800826e:	bb48      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc68 	bl	8000b4c <__aeabi_dcmplt>
 800827c:	b110      	cbz	r0, 8008284 <_printf_float+0x90>
 800827e:	232d      	movs	r3, #45	; 0x2d
 8008280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008284:	4b93      	ldr	r3, [pc, #588]	; (80084d4 <_printf_float+0x2e0>)
 8008286:	4894      	ldr	r0, [pc, #592]	; (80084d8 <_printf_float+0x2e4>)
 8008288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800828c:	bf94      	ite	ls
 800828e:	4698      	movls	r8, r3
 8008290:	4680      	movhi	r8, r0
 8008292:	2303      	movs	r3, #3
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	f023 0204 	bic.w	r2, r3, #4
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	9700      	str	r7, [sp, #0]
 80082a4:	4633      	mov	r3, r6
 80082a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f9d8 	bl	8008660 <_printf_common>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f040 8090 	bne.w	80083d6 <_printf_float+0x1e2>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b00d      	add	sp, #52	; 0x34
 80082bc:	ecbd 8b02 	vpop	{d8}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 fc66 	bl	8000b9c <__aeabi_dcmpun>
 80082d0:	b140      	cbz	r0, 80082e4 <_printf_float+0xf0>
 80082d2:	464b      	mov	r3, r9
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfbc      	itt	lt
 80082d8:	232d      	movlt	r3, #45	; 0x2d
 80082da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082de:	487f      	ldr	r0, [pc, #508]	; (80084dc <_printf_float+0x2e8>)
 80082e0:	4b7f      	ldr	r3, [pc, #508]	; (80084e0 <_printf_float+0x2ec>)
 80082e2:	e7d1      	b.n	8008288 <_printf_float+0x94>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ea:	9206      	str	r2, [sp, #24]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	d13f      	bne.n	8008370 <_printf_float+0x17c>
 80082f0:	2306      	movs	r3, #6
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	6861      	ldr	r1, [r4, #4]
 80082f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	ab0a      	add	r3, sp, #40	; 0x28
 8008302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008306:	ab09      	add	r3, sp, #36	; 0x24
 8008308:	ec49 8b10 	vmov	d0, r8, r9
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff fecd 	bl	80080b4 <__cvt>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831e:	2b47      	cmp	r3, #71	; 0x47
 8008320:	4680      	mov	r8, r0
 8008322:	d108      	bne.n	8008336 <_printf_float+0x142>
 8008324:	1cc8      	adds	r0, r1, #3
 8008326:	db02      	blt.n	800832e <_printf_float+0x13a>
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	4299      	cmp	r1, r3
 800832c:	dd41      	ble.n	80083b2 <_printf_float+0x1be>
 800832e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008332:	fa5f fb8b 	uxtb.w	fp, fp
 8008336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800833a:	d820      	bhi.n	800837e <_printf_float+0x18a>
 800833c:	3901      	subs	r1, #1
 800833e:	465a      	mov	r2, fp
 8008340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008344:	9109      	str	r1, [sp, #36]	; 0x24
 8008346:	f7ff ff17 	bl	8008178 <__exponent>
 800834a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834c:	1813      	adds	r3, r2, r0
 800834e:	2a01      	cmp	r2, #1
 8008350:	4681      	mov	r9, r0
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	dc02      	bgt.n	800835c <_printf_float+0x168>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	07d2      	lsls	r2, r2, #31
 800835a:	d501      	bpl.n	8008360 <_printf_float+0x16c>
 800835c:	3301      	adds	r3, #1
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008364:	2b00      	cmp	r3, #0
 8008366:	d09c      	beq.n	80082a2 <_printf_float+0xae>
 8008368:	232d      	movs	r3, #45	; 0x2d
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e798      	b.n	80082a2 <_printf_float+0xae>
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	2a47      	cmp	r2, #71	; 0x47
 8008374:	d1be      	bne.n	80082f4 <_printf_float+0x100>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1bc      	bne.n	80082f4 <_printf_float+0x100>
 800837a:	2301      	movs	r3, #1
 800837c:	e7b9      	b.n	80082f2 <_printf_float+0xfe>
 800837e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008382:	d118      	bne.n	80083b6 <_printf_float+0x1c2>
 8008384:	2900      	cmp	r1, #0
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	dd0b      	ble.n	80083a2 <_printf_float+0x1ae>
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	b913      	cbnz	r3, 8008394 <_printf_float+0x1a0>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d502      	bpl.n	800839a <_printf_float+0x1a6>
 8008394:	3301      	adds	r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	65a1      	str	r1, [r4, #88]	; 0x58
 800839c:	f04f 0900 	mov.w	r9, #0
 80083a0:	e7de      	b.n	8008360 <_printf_float+0x16c>
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x1b6>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d501      	bpl.n	80083ae <_printf_float+0x1ba>
 80083aa:	3302      	adds	r3, #2
 80083ac:	e7f4      	b.n	8008398 <_printf_float+0x1a4>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7f2      	b.n	8008398 <_printf_float+0x1a4>
 80083b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	4299      	cmp	r1, r3
 80083ba:	db05      	blt.n	80083c8 <_printf_float+0x1d4>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	07d8      	lsls	r0, r3, #31
 80083c2:	d5ea      	bpl.n	800839a <_printf_float+0x1a6>
 80083c4:	1c4b      	adds	r3, r1, #1
 80083c6:	e7e7      	b.n	8008398 <_printf_float+0x1a4>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	bfd4      	ite	le
 80083cc:	f1c1 0202 	rsble	r2, r1, #2
 80083d0:	2201      	movgt	r2, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	e7e0      	b.n	8008398 <_printf_float+0x1a4>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	055a      	lsls	r2, r3, #21
 80083da:	d407      	bmi.n	80083ec <_printf_float+0x1f8>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d12c      	bne.n	8008444 <_printf_float+0x250>
 80083ea:	e764      	b.n	80082b6 <_printf_float+0xc2>
 80083ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f0:	f240 80e0 	bls.w	80085b4 <_printf_float+0x3c0>
 80083f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 fb9c 	bl	8000b38 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d034      	beq.n	800846e <_printf_float+0x27a>
 8008404:	4a37      	ldr	r2, [pc, #220]	; (80084e4 <_printf_float+0x2f0>)
 8008406:	2301      	movs	r3, #1
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af51 	beq.w	80082b6 <_printf_float+0xc2>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	429a      	cmp	r2, r3
 800841a:	db02      	blt.n	8008422 <_printf_float+0x22e>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d8      	lsls	r0, r3, #31
 8008420:	d510      	bpl.n	8008444 <_printf_float+0x250>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af41 	beq.w	80082b6 <_printf_float+0xc2>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	f104 091a 	add.w	r9, r4, #26
 800843c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843e:	3b01      	subs	r3, #1
 8008440:	4543      	cmp	r3, r8
 8008442:	dc09      	bgt.n	8008458 <_printf_float+0x264>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	079b      	lsls	r3, r3, #30
 8008448:	f100 8105 	bmi.w	8008656 <_printf_float+0x462>
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	4298      	cmp	r0, r3
 8008452:	bfb8      	it	lt
 8008454:	4618      	movlt	r0, r3
 8008456:	e730      	b.n	80082ba <_printf_float+0xc6>
 8008458:	2301      	movs	r3, #1
 800845a:	464a      	mov	r2, r9
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f af27 	beq.w	80082b6 <_printf_float+0xc2>
 8008468:	f108 0801 	add.w	r8, r8, #1
 800846c:	e7e6      	b.n	800843c <_printf_float+0x248>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc39      	bgt.n	80084e8 <_printf_float+0x2f4>
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <_printf_float+0x2f0>)
 8008476:	2301      	movs	r3, #1
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af19 	beq.w	80082b6 <_printf_float+0xc2>
 8008484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008488:	4313      	orrs	r3, r2
 800848a:	d102      	bne.n	8008492 <_printf_float+0x29e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d5d8      	bpl.n	8008444 <_printf_float+0x250>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f af09 	beq.w	80082b6 <_printf_float+0xc2>
 80084a4:	f04f 0900 	mov.w	r9, #0
 80084a8:	f104 0a1a 	add.w	sl, r4, #26
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	425b      	negs	r3, r3
 80084b0:	454b      	cmp	r3, r9
 80084b2:	dc01      	bgt.n	80084b8 <_printf_float+0x2c4>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	e792      	b.n	80083de <_printf_float+0x1ea>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4631      	mov	r1, r6
 80084be:	4628      	mov	r0, r5
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f aef7 	beq.w	80082b6 <_printf_float+0xc2>
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	e7ee      	b.n	80084ac <_printf_float+0x2b8>
 80084ce:	bf00      	nop
 80084d0:	7fefffff 	.word	0x7fefffff
 80084d4:	0800e9a4 	.word	0x0800e9a4
 80084d8:	0800e9a8 	.word	0x0800e9a8
 80084dc:	0800e9b0 	.word	0x0800e9b0
 80084e0:	0800e9ac 	.word	0x0800e9ac
 80084e4:	0800e9b4 	.word	0x0800e9b4
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ec:	429a      	cmp	r2, r3
 80084ee:	bfa8      	it	ge
 80084f0:	461a      	movge	r2, r3
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	4691      	mov	r9, r2
 80084f6:	dc37      	bgt.n	8008568 <_printf_float+0x374>
 80084f8:	f04f 0b00 	mov.w	fp, #0
 80084fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008500:	f104 021a 	add.w	r2, r4, #26
 8008504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	eba3 0309 	sub.w	r3, r3, r9
 800850c:	455b      	cmp	r3, fp
 800850e:	dc33      	bgt.n	8008578 <_printf_float+0x384>
 8008510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008514:	429a      	cmp	r2, r3
 8008516:	db3b      	blt.n	8008590 <_printf_float+0x39c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d438      	bmi.n	8008590 <_printf_float+0x39c>
 800851e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	eba2 0901 	sub.w	r9, r2, r1
 800852a:	4599      	cmp	r9, r3
 800852c:	bfa8      	it	ge
 800852e:	4699      	movge	r9, r3
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	dc35      	bgt.n	80085a2 <_printf_float+0x3ae>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853e:	f104 0a1a 	add.w	sl, r4, #26
 8008542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	eba3 0309 	sub.w	r3, r3, r9
 800854c:	4543      	cmp	r3, r8
 800854e:	f77f af79 	ble.w	8008444 <_printf_float+0x250>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f aeaa 	beq.w	80082b6 <_printf_float+0xc2>
 8008562:	f108 0801 	add.w	r8, r8, #1
 8008566:	e7ec      	b.n	8008542 <_printf_float+0x34e>
 8008568:	4613      	mov	r3, r2
 800856a:	4631      	mov	r1, r6
 800856c:	4642      	mov	r2, r8
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	d1c0      	bne.n	80084f8 <_printf_float+0x304>
 8008576:	e69e      	b.n	80082b6 <_printf_float+0xc2>
 8008578:	2301      	movs	r3, #1
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	9205      	str	r2, [sp, #20]
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae97 	beq.w	80082b6 <_printf_float+0xc2>
 8008588:	9a05      	ldr	r2, [sp, #20]
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	e7b9      	b.n	8008504 <_printf_float+0x310>
 8008590:	ee18 3a10 	vmov	r3, s16
 8008594:	4652      	mov	r2, sl
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1be      	bne.n	800851e <_printf_float+0x32a>
 80085a0:	e689      	b.n	80082b6 <_printf_float+0xc2>
 80085a2:	9a05      	ldr	r2, [sp, #20]
 80085a4:	464b      	mov	r3, r9
 80085a6:	4442      	add	r2, r8
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	d1c1      	bne.n	8008536 <_printf_float+0x342>
 80085b2:	e680      	b.n	80082b6 <_printf_float+0xc2>
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	2a01      	cmp	r2, #1
 80085b8:	dc01      	bgt.n	80085be <_printf_float+0x3ca>
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d538      	bpl.n	8008630 <_printf_float+0x43c>
 80085be:	2301      	movs	r3, #1
 80085c0:	4642      	mov	r2, r8
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae74 	beq.w	80082b6 <_printf_float+0xc2>
 80085ce:	ee18 3a10 	vmov	r3, s16
 80085d2:	4652      	mov	r2, sl
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae6b 	beq.w	80082b6 <_printf_float+0xc2>
 80085e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e4:	2200      	movs	r2, #0
 80085e6:	2300      	movs	r3, #0
 80085e8:	f7f8 faa6 	bl	8000b38 <__aeabi_dcmpeq>
 80085ec:	b9d8      	cbnz	r0, 8008626 <_printf_float+0x432>
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	f108 0201 	add.w	r2, r8, #1
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	d10e      	bne.n	800861e <_printf_float+0x42a>
 8008600:	e659      	b.n	80082b6 <_printf_float+0xc2>
 8008602:	2301      	movs	r3, #1
 8008604:	4652      	mov	r2, sl
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f ae52 	beq.w	80082b6 <_printf_float+0xc2>
 8008612:	f108 0801 	add.w	r8, r8, #1
 8008616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008618:	3b01      	subs	r3, #1
 800861a:	4543      	cmp	r3, r8
 800861c:	dcf1      	bgt.n	8008602 <_printf_float+0x40e>
 800861e:	464b      	mov	r3, r9
 8008620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008624:	e6dc      	b.n	80083e0 <_printf_float+0x1ec>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	f104 0a1a 	add.w	sl, r4, #26
 800862e:	e7f2      	b.n	8008616 <_printf_float+0x422>
 8008630:	2301      	movs	r3, #1
 8008632:	4642      	mov	r2, r8
 8008634:	e7df      	b.n	80085f6 <_printf_float+0x402>
 8008636:	2301      	movs	r3, #1
 8008638:	464a      	mov	r2, r9
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae38 	beq.w	80082b6 <_printf_float+0xc2>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800864e:	1a5b      	subs	r3, r3, r1
 8008650:	4543      	cmp	r3, r8
 8008652:	dcf0      	bgt.n	8008636 <_printf_float+0x442>
 8008654:	e6fa      	b.n	800844c <_printf_float+0x258>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 0919 	add.w	r9, r4, #25
 800865e:	e7f4      	b.n	800864a <_printf_float+0x456>

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4616      	mov	r6, r2
 8008666:	4699      	mov	r9, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	690b      	ldr	r3, [r1, #16]
 800866c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008670:	4293      	cmp	r3, r2
 8008672:	bfb8      	it	lt
 8008674:	4613      	movlt	r3, r2
 8008676:	6033      	str	r3, [r6, #0]
 8008678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800867c:	4607      	mov	r7, r0
 800867e:	460c      	mov	r4, r1
 8008680:	b10a      	cbz	r2, 8008686 <_printf_common+0x26>
 8008682:	3301      	adds	r3, #1
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	0699      	lsls	r1, r3, #26
 800868a:	bf42      	ittt	mi
 800868c:	6833      	ldrmi	r3, [r6, #0]
 800868e:	3302      	addmi	r3, #2
 8008690:	6033      	strmi	r3, [r6, #0]
 8008692:	6825      	ldr	r5, [r4, #0]
 8008694:	f015 0506 	ands.w	r5, r5, #6
 8008698:	d106      	bne.n	80086a8 <_printf_common+0x48>
 800869a:	f104 0a19 	add.w	sl, r4, #25
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	6832      	ldr	r2, [r6, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dc26      	bgt.n	80086f6 <_printf_common+0x96>
 80086a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ac:	1e13      	subs	r3, r2, #0
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	0692      	lsls	r2, r2, #26
 80086b6:	d42b      	bmi.n	8008710 <_printf_common+0xb0>
 80086b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d01e      	beq.n	8008704 <_printf_common+0xa4>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	68e5      	ldr	r5, [r4, #12]
 80086ca:	6832      	ldr	r2, [r6, #0]
 80086cc:	f003 0306 	and.w	r3, r3, #6
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	bf08      	it	eq
 80086d4:	1aad      	subeq	r5, r5, r2
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	bf0c      	ite	eq
 80086dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e0:	2500      	movne	r5, #0
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bfc4      	itt	gt
 80086e6:	1a9b      	subgt	r3, r3, r2
 80086e8:	18ed      	addgt	r5, r5, r3
 80086ea:	2600      	movs	r6, #0
 80086ec:	341a      	adds	r4, #26
 80086ee:	42b5      	cmp	r5, r6
 80086f0:	d11a      	bne.n	8008728 <_printf_common+0xc8>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e008      	b.n	8008708 <_printf_common+0xa8>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4652      	mov	r2, sl
 80086fa:	4649      	mov	r1, r9
 80086fc:	4638      	mov	r0, r7
 80086fe:	47c0      	blx	r8
 8008700:	3001      	adds	r0, #1
 8008702:	d103      	bne.n	800870c <_printf_common+0xac>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	3501      	adds	r5, #1
 800870e:	e7c6      	b.n	800869e <_printf_common+0x3e>
 8008710:	18e1      	adds	r1, r4, r3
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	2030      	movs	r0, #48	; 0x30
 8008716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800871a:	4422      	add	r2, r4
 800871c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008724:	3302      	adds	r3, #2
 8008726:	e7c7      	b.n	80086b8 <_printf_common+0x58>
 8008728:	2301      	movs	r3, #1
 800872a:	4622      	mov	r2, r4
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	3001      	adds	r0, #1
 8008734:	d0e6      	beq.n	8008704 <_printf_common+0xa4>
 8008736:	3601      	adds	r6, #1
 8008738:	e7d9      	b.n	80086ee <_printf_common+0x8e>
	...

0800873c <_printf_i>:
 800873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	4691      	mov	r9, r2
 8008744:	7e27      	ldrb	r7, [r4, #24]
 8008746:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008748:	2f78      	cmp	r7, #120	; 0x78
 800874a:	4680      	mov	r8, r0
 800874c:	469a      	mov	sl, r3
 800874e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008752:	d807      	bhi.n	8008764 <_printf_i+0x28>
 8008754:	2f62      	cmp	r7, #98	; 0x62
 8008756:	d80a      	bhi.n	800876e <_printf_i+0x32>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f000 80d8 	beq.w	800890e <_printf_i+0x1d2>
 800875e:	2f58      	cmp	r7, #88	; 0x58
 8008760:	f000 80a3 	beq.w	80088aa <_printf_i+0x16e>
 8008764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800876c:	e03a      	b.n	80087e4 <_printf_i+0xa8>
 800876e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008772:	2b15      	cmp	r3, #21
 8008774:	d8f6      	bhi.n	8008764 <_printf_i+0x28>
 8008776:	a001      	add	r0, pc, #4	; (adr r0, 800877c <_printf_i+0x40>)
 8008778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087e9 	.word	0x080087e9
 8008784:	08008765 	.word	0x08008765
 8008788:	08008765 	.word	0x08008765
 800878c:	08008765 	.word	0x08008765
 8008790:	08008765 	.word	0x08008765
 8008794:	080087e9 	.word	0x080087e9
 8008798:	08008765 	.word	0x08008765
 800879c:	08008765 	.word	0x08008765
 80087a0:	08008765 	.word	0x08008765
 80087a4:	08008765 	.word	0x08008765
 80087a8:	080088f5 	.word	0x080088f5
 80087ac:	08008819 	.word	0x08008819
 80087b0:	080088d7 	.word	0x080088d7
 80087b4:	08008765 	.word	0x08008765
 80087b8:	08008765 	.word	0x08008765
 80087bc:	08008917 	.word	0x08008917
 80087c0:	08008765 	.word	0x08008765
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008765 	.word	0x08008765
 80087cc:	08008765 	.word	0x08008765
 80087d0:	080088df 	.word	0x080088df
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	600a      	str	r2, [r1, #0]
 80087dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0a3      	b.n	8008930 <_printf_i+0x1f4>
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	6808      	ldr	r0, [r1, #0]
 80087ec:	062e      	lsls	r6, r5, #24
 80087ee:	f100 0304 	add.w	r3, r0, #4
 80087f2:	d50a      	bpl.n	800880a <_printf_i+0xce>
 80087f4:	6805      	ldr	r5, [r0, #0]
 80087f6:	600b      	str	r3, [r1, #0]
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	da03      	bge.n	8008804 <_printf_i+0xc8>
 80087fc:	232d      	movs	r3, #45	; 0x2d
 80087fe:	426d      	negs	r5, r5
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	485e      	ldr	r0, [pc, #376]	; (8008980 <_printf_i+0x244>)
 8008806:	230a      	movs	r3, #10
 8008808:	e019      	b.n	800883e <_printf_i+0x102>
 800880a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800880e:	6805      	ldr	r5, [r0, #0]
 8008810:	600b      	str	r3, [r1, #0]
 8008812:	bf18      	it	ne
 8008814:	b22d      	sxthne	r5, r5
 8008816:	e7ef      	b.n	80087f8 <_printf_i+0xbc>
 8008818:	680b      	ldr	r3, [r1, #0]
 800881a:	6825      	ldr	r5, [r4, #0]
 800881c:	1d18      	adds	r0, r3, #4
 800881e:	6008      	str	r0, [r1, #0]
 8008820:	0628      	lsls	r0, r5, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xec>
 8008824:	681d      	ldr	r5, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0xf2>
 8008828:	0669      	lsls	r1, r5, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xe8>
 800882c:	881d      	ldrh	r5, [r3, #0]
 800882e:	4854      	ldr	r0, [pc, #336]	; (8008980 <_printf_i+0x244>)
 8008830:	2f6f      	cmp	r7, #111	; 0x6f
 8008832:	bf0c      	ite	eq
 8008834:	2308      	moveq	r3, #8
 8008836:	230a      	movne	r3, #10
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883e:	6866      	ldr	r6, [r4, #4]
 8008840:	60a6      	str	r6, [r4, #8]
 8008842:	2e00      	cmp	r6, #0
 8008844:	bfa2      	ittt	ge
 8008846:	6821      	ldrge	r1, [r4, #0]
 8008848:	f021 0104 	bicge.w	r1, r1, #4
 800884c:	6021      	strge	r1, [r4, #0]
 800884e:	b90d      	cbnz	r5, 8008854 <_printf_i+0x118>
 8008850:	2e00      	cmp	r6, #0
 8008852:	d04d      	beq.n	80088f0 <_printf_i+0x1b4>
 8008854:	4616      	mov	r6, r2
 8008856:	fbb5 f1f3 	udiv	r1, r5, r3
 800885a:	fb03 5711 	mls	r7, r3, r1, r5
 800885e:	5dc7      	ldrb	r7, [r0, r7]
 8008860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008864:	462f      	mov	r7, r5
 8008866:	42bb      	cmp	r3, r7
 8008868:	460d      	mov	r5, r1
 800886a:	d9f4      	bls.n	8008856 <_printf_i+0x11a>
 800886c:	2b08      	cmp	r3, #8
 800886e:	d10b      	bne.n	8008888 <_printf_i+0x14c>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07df      	lsls	r7, r3, #31
 8008874:	d508      	bpl.n	8008888 <_printf_i+0x14c>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6861      	ldr	r1, [r4, #4]
 800887a:	4299      	cmp	r1, r3
 800887c:	bfde      	ittt	le
 800887e:	2330      	movle	r3, #48	; 0x30
 8008880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008888:	1b92      	subs	r2, r2, r6
 800888a:	6122      	str	r2, [r4, #16]
 800888c:	f8cd a000 	str.w	sl, [sp]
 8008890:	464b      	mov	r3, r9
 8008892:	aa03      	add	r2, sp, #12
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f7ff fee2 	bl	8008660 <_printf_common>
 800889c:	3001      	adds	r0, #1
 800889e:	d14c      	bne.n	800893a <_printf_i+0x1fe>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	b004      	add	sp, #16
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	4835      	ldr	r0, [pc, #212]	; (8008980 <_printf_i+0x244>)
 80088ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	680e      	ldr	r6, [r1, #0]
 80088b4:	061f      	lsls	r7, r3, #24
 80088b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088ba:	600e      	str	r6, [r1, #0]
 80088bc:	d514      	bpl.n	80088e8 <_printf_i+0x1ac>
 80088be:	07d9      	lsls	r1, r3, #31
 80088c0:	bf44      	itt	mi
 80088c2:	f043 0320 	orrmi.w	r3, r3, #32
 80088c6:	6023      	strmi	r3, [r4, #0]
 80088c8:	b91d      	cbnz	r5, 80088d2 <_printf_i+0x196>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f023 0320 	bic.w	r3, r3, #32
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	2310      	movs	r3, #16
 80088d4:	e7b0      	b.n	8008838 <_printf_i+0xfc>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f043 0320 	orr.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	2378      	movs	r3, #120	; 0x78
 80088e0:	4828      	ldr	r0, [pc, #160]	; (8008984 <_printf_i+0x248>)
 80088e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e6:	e7e3      	b.n	80088b0 <_printf_i+0x174>
 80088e8:	065e      	lsls	r6, r3, #25
 80088ea:	bf48      	it	mi
 80088ec:	b2ad      	uxthmi	r5, r5
 80088ee:	e7e6      	b.n	80088be <_printf_i+0x182>
 80088f0:	4616      	mov	r6, r2
 80088f2:	e7bb      	b.n	800886c <_printf_i+0x130>
 80088f4:	680b      	ldr	r3, [r1, #0]
 80088f6:	6826      	ldr	r6, [r4, #0]
 80088f8:	6960      	ldr	r0, [r4, #20]
 80088fa:	1d1d      	adds	r5, r3, #4
 80088fc:	600d      	str	r5, [r1, #0]
 80088fe:	0635      	lsls	r5, r6, #24
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	d501      	bpl.n	8008908 <_printf_i+0x1cc>
 8008904:	6018      	str	r0, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0x1d2>
 8008908:	0671      	lsls	r1, r6, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0x1c8>
 800890c:	8018      	strh	r0, [r3, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	4616      	mov	r6, r2
 8008914:	e7ba      	b.n	800888c <_printf_i+0x150>
 8008916:	680b      	ldr	r3, [r1, #0]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	600a      	str	r2, [r1, #0]
 800891c:	681e      	ldr	r6, [r3, #0]
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	2100      	movs	r1, #0
 8008922:	4630      	mov	r0, r6
 8008924:	f7f7 fc94 	bl	8000250 <memchr>
 8008928:	b108      	cbz	r0, 800892e <_printf_i+0x1f2>
 800892a:	1b80      	subs	r0, r0, r6
 800892c:	6060      	str	r0, [r4, #4]
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	2300      	movs	r3, #0
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008938:	e7a8      	b.n	800888c <_printf_i+0x150>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d0ab      	beq.n	80088a0 <_printf_i+0x164>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	079b      	lsls	r3, r3, #30
 800894c:	d413      	bmi.n	8008976 <_printf_i+0x23a>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	4298      	cmp	r0, r3
 8008954:	bfb8      	it	lt
 8008956:	4618      	movlt	r0, r3
 8008958:	e7a4      	b.n	80088a4 <_printf_i+0x168>
 800895a:	2301      	movs	r3, #1
 800895c:	4632      	mov	r2, r6
 800895e:	4649      	mov	r1, r9
 8008960:	4640      	mov	r0, r8
 8008962:	47d0      	blx	sl
 8008964:	3001      	adds	r0, #1
 8008966:	d09b      	beq.n	80088a0 <_printf_i+0x164>
 8008968:	3501      	adds	r5, #1
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	1a5b      	subs	r3, r3, r1
 8008970:	42ab      	cmp	r3, r5
 8008972:	dcf2      	bgt.n	800895a <_printf_i+0x21e>
 8008974:	e7eb      	b.n	800894e <_printf_i+0x212>
 8008976:	2500      	movs	r5, #0
 8008978:	f104 0619 	add.w	r6, r4, #25
 800897c:	e7f5      	b.n	800896a <_printf_i+0x22e>
 800897e:	bf00      	nop
 8008980:	0800e9b6 	.word	0x0800e9b6
 8008984:	0800e9c7 	.word	0x0800e9c7

08008988 <_scanf_float>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	b087      	sub	sp, #28
 800898e:	4617      	mov	r7, r2
 8008990:	9303      	str	r3, [sp, #12]
 8008992:	688b      	ldr	r3, [r1, #8]
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800899a:	bf83      	ittte	hi
 800899c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089a0:	195b      	addhi	r3, r3, r5
 80089a2:	9302      	strhi	r3, [sp, #8]
 80089a4:	2300      	movls	r3, #0
 80089a6:	bf86      	itte	hi
 80089a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089ac:	608b      	strhi	r3, [r1, #8]
 80089ae:	9302      	strls	r3, [sp, #8]
 80089b0:	680b      	ldr	r3, [r1, #0]
 80089b2:	468b      	mov	fp, r1
 80089b4:	2500      	movs	r5, #0
 80089b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80089be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089c2:	4680      	mov	r8, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	465e      	mov	r6, fp
 80089c8:	46aa      	mov	sl, r5
 80089ca:	46a9      	mov	r9, r5
 80089cc:	9501      	str	r5, [sp, #4]
 80089ce:	68a2      	ldr	r2, [r4, #8]
 80089d0:	b152      	cbz	r2, 80089e8 <_scanf_float+0x60>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b4e      	cmp	r3, #78	; 0x4e
 80089d8:	d864      	bhi.n	8008aa4 <_scanf_float+0x11c>
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d83c      	bhi.n	8008a58 <_scanf_float+0xd0>
 80089de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089e2:	b2c8      	uxtb	r0, r1
 80089e4:	280e      	cmp	r0, #14
 80089e6:	d93a      	bls.n	8008a5e <_scanf_float+0xd6>
 80089e8:	f1b9 0f00 	cmp.w	r9, #0
 80089ec:	d003      	beq.n	80089f6 <_scanf_float+0x6e>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089fa:	f1ba 0f01 	cmp.w	sl, #1
 80089fe:	f200 8113 	bhi.w	8008c28 <_scanf_float+0x2a0>
 8008a02:	455e      	cmp	r6, fp
 8008a04:	f200 8105 	bhi.w	8008c12 <_scanf_float+0x28a>
 8008a08:	2501      	movs	r5, #1
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	b007      	add	sp, #28
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a16:	2a0d      	cmp	r2, #13
 8008a18:	d8e6      	bhi.n	80089e8 <_scanf_float+0x60>
 8008a1a:	a101      	add	r1, pc, #4	; (adr r1, 8008a20 <_scanf_float+0x98>)
 8008a1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a20:	08008b5f 	.word	0x08008b5f
 8008a24:	080089e9 	.word	0x080089e9
 8008a28:	080089e9 	.word	0x080089e9
 8008a2c:	080089e9 	.word	0x080089e9
 8008a30:	08008bbf 	.word	0x08008bbf
 8008a34:	08008b97 	.word	0x08008b97
 8008a38:	080089e9 	.word	0x080089e9
 8008a3c:	080089e9 	.word	0x080089e9
 8008a40:	08008b6d 	.word	0x08008b6d
 8008a44:	080089e9 	.word	0x080089e9
 8008a48:	080089e9 	.word	0x080089e9
 8008a4c:	080089e9 	.word	0x080089e9
 8008a50:	080089e9 	.word	0x080089e9
 8008a54:	08008b25 	.word	0x08008b25
 8008a58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a5c:	e7db      	b.n	8008a16 <_scanf_float+0x8e>
 8008a5e:	290e      	cmp	r1, #14
 8008a60:	d8c2      	bhi.n	80089e8 <_scanf_float+0x60>
 8008a62:	a001      	add	r0, pc, #4	; (adr r0, 8008a68 <_scanf_float+0xe0>)
 8008a64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a68:	08008b17 	.word	0x08008b17
 8008a6c:	080089e9 	.word	0x080089e9
 8008a70:	08008b17 	.word	0x08008b17
 8008a74:	08008bab 	.word	0x08008bab
 8008a78:	080089e9 	.word	0x080089e9
 8008a7c:	08008ac5 	.word	0x08008ac5
 8008a80:	08008b01 	.word	0x08008b01
 8008a84:	08008b01 	.word	0x08008b01
 8008a88:	08008b01 	.word	0x08008b01
 8008a8c:	08008b01 	.word	0x08008b01
 8008a90:	08008b01 	.word	0x08008b01
 8008a94:	08008b01 	.word	0x08008b01
 8008a98:	08008b01 	.word	0x08008b01
 8008a9c:	08008b01 	.word	0x08008b01
 8008aa0:	08008b01 	.word	0x08008b01
 8008aa4:	2b6e      	cmp	r3, #110	; 0x6e
 8008aa6:	d809      	bhi.n	8008abc <_scanf_float+0x134>
 8008aa8:	2b60      	cmp	r3, #96	; 0x60
 8008aaa:	d8b2      	bhi.n	8008a12 <_scanf_float+0x8a>
 8008aac:	2b54      	cmp	r3, #84	; 0x54
 8008aae:	d077      	beq.n	8008ba0 <_scanf_float+0x218>
 8008ab0:	2b59      	cmp	r3, #89	; 0x59
 8008ab2:	d199      	bne.n	80089e8 <_scanf_float+0x60>
 8008ab4:	2d07      	cmp	r5, #7
 8008ab6:	d197      	bne.n	80089e8 <_scanf_float+0x60>
 8008ab8:	2508      	movs	r5, #8
 8008aba:	e029      	b.n	8008b10 <_scanf_float+0x188>
 8008abc:	2b74      	cmp	r3, #116	; 0x74
 8008abe:	d06f      	beq.n	8008ba0 <_scanf_float+0x218>
 8008ac0:	2b79      	cmp	r3, #121	; 0x79
 8008ac2:	e7f6      	b.n	8008ab2 <_scanf_float+0x12a>
 8008ac4:	6821      	ldr	r1, [r4, #0]
 8008ac6:	05c8      	lsls	r0, r1, #23
 8008ac8:	d51a      	bpl.n	8008b00 <_scanf_float+0x178>
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ad0:	6021      	str	r1, [r4, #0]
 8008ad2:	f109 0901 	add.w	r9, r9, #1
 8008ad6:	b11b      	cbz	r3, 8008ae0 <_scanf_float+0x158>
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	3201      	adds	r2, #1
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	60a2      	str	r2, [r4, #8]
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	60a3      	str	r3, [r4, #8]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	607b      	str	r3, [r7, #4]
 8008af4:	f340 8084 	ble.w	8008c00 <_scanf_float+0x278>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	e766      	b.n	80089ce <_scanf_float+0x46>
 8008b00:	eb1a 0f05 	cmn.w	sl, r5
 8008b04:	f47f af70 	bne.w	80089e8 <_scanf_float+0x60>
 8008b08:	6822      	ldr	r2, [r4, #0]
 8008b0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	f806 3b01 	strb.w	r3, [r6], #1
 8008b14:	e7e4      	b.n	8008ae0 <_scanf_float+0x158>
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	0610      	lsls	r0, r2, #24
 8008b1a:	f57f af65 	bpl.w	80089e8 <_scanf_float+0x60>
 8008b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b22:	e7f4      	b.n	8008b0e <_scanf_float+0x186>
 8008b24:	f1ba 0f00 	cmp.w	sl, #0
 8008b28:	d10e      	bne.n	8008b48 <_scanf_float+0x1c0>
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	d10e      	bne.n	8008b4e <_scanf_float+0x1c6>
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b3a:	d108      	bne.n	8008b4e <_scanf_float+0x1c6>
 8008b3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	f04f 0a01 	mov.w	sl, #1
 8008b46:	e7e3      	b.n	8008b10 <_scanf_float+0x188>
 8008b48:	f1ba 0f02 	cmp.w	sl, #2
 8008b4c:	d055      	beq.n	8008bfa <_scanf_float+0x272>
 8008b4e:	2d01      	cmp	r5, #1
 8008b50:	d002      	beq.n	8008b58 <_scanf_float+0x1d0>
 8008b52:	2d04      	cmp	r5, #4
 8008b54:	f47f af48 	bne.w	80089e8 <_scanf_float+0x60>
 8008b58:	3501      	adds	r5, #1
 8008b5a:	b2ed      	uxtb	r5, r5
 8008b5c:	e7d8      	b.n	8008b10 <_scanf_float+0x188>
 8008b5e:	f1ba 0f01 	cmp.w	sl, #1
 8008b62:	f47f af41 	bne.w	80089e8 <_scanf_float+0x60>
 8008b66:	f04f 0a02 	mov.w	sl, #2
 8008b6a:	e7d1      	b.n	8008b10 <_scanf_float+0x188>
 8008b6c:	b97d      	cbnz	r5, 8008b8e <_scanf_float+0x206>
 8008b6e:	f1b9 0f00 	cmp.w	r9, #0
 8008b72:	f47f af3c 	bne.w	80089ee <_scanf_float+0x66>
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b80:	f47f af39 	bne.w	80089f6 <_scanf_float+0x6e>
 8008b84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b88:	6022      	str	r2, [r4, #0]
 8008b8a:	2501      	movs	r5, #1
 8008b8c:	e7c0      	b.n	8008b10 <_scanf_float+0x188>
 8008b8e:	2d03      	cmp	r5, #3
 8008b90:	d0e2      	beq.n	8008b58 <_scanf_float+0x1d0>
 8008b92:	2d05      	cmp	r5, #5
 8008b94:	e7de      	b.n	8008b54 <_scanf_float+0x1cc>
 8008b96:	2d02      	cmp	r5, #2
 8008b98:	f47f af26 	bne.w	80089e8 <_scanf_float+0x60>
 8008b9c:	2503      	movs	r5, #3
 8008b9e:	e7b7      	b.n	8008b10 <_scanf_float+0x188>
 8008ba0:	2d06      	cmp	r5, #6
 8008ba2:	f47f af21 	bne.w	80089e8 <_scanf_float+0x60>
 8008ba6:	2507      	movs	r5, #7
 8008ba8:	e7b2      	b.n	8008b10 <_scanf_float+0x188>
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	0591      	lsls	r1, r2, #22
 8008bae:	f57f af1b 	bpl.w	80089e8 <_scanf_float+0x60>
 8008bb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bb6:	6022      	str	r2, [r4, #0]
 8008bb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bbc:	e7a8      	b.n	8008b10 <_scanf_float+0x188>
 8008bbe:	6822      	ldr	r2, [r4, #0]
 8008bc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bc8:	d006      	beq.n	8008bd8 <_scanf_float+0x250>
 8008bca:	0550      	lsls	r0, r2, #21
 8008bcc:	f57f af0c 	bpl.w	80089e8 <_scanf_float+0x60>
 8008bd0:	f1b9 0f00 	cmp.w	r9, #0
 8008bd4:	f43f af0f 	beq.w	80089f6 <_scanf_float+0x6e>
 8008bd8:	0591      	lsls	r1, r2, #22
 8008bda:	bf58      	it	pl
 8008bdc:	9901      	ldrpl	r1, [sp, #4]
 8008bde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008be2:	bf58      	it	pl
 8008be4:	eba9 0101 	subpl.w	r1, r9, r1
 8008be8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008bec:	bf58      	it	pl
 8008bee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008bf2:	6022      	str	r2, [r4, #0]
 8008bf4:	f04f 0900 	mov.w	r9, #0
 8008bf8:	e78a      	b.n	8008b10 <_scanf_float+0x188>
 8008bfa:	f04f 0a03 	mov.w	sl, #3
 8008bfe:	e787      	b.n	8008b10 <_scanf_float+0x188>
 8008c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c04:	4639      	mov	r1, r7
 8008c06:	4640      	mov	r0, r8
 8008c08:	4798      	blx	r3
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f aedf 	beq.w	80089ce <_scanf_float+0x46>
 8008c10:	e6ea      	b.n	80089e8 <_scanf_float+0x60>
 8008c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	4798      	blx	r3
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	e6ec      	b.n	8008a02 <_scanf_float+0x7a>
 8008c28:	1e6b      	subs	r3, r5, #1
 8008c2a:	2b06      	cmp	r3, #6
 8008c2c:	d825      	bhi.n	8008c7a <_scanf_float+0x2f2>
 8008c2e:	2d02      	cmp	r5, #2
 8008c30:	d836      	bhi.n	8008ca0 <_scanf_float+0x318>
 8008c32:	455e      	cmp	r6, fp
 8008c34:	f67f aee8 	bls.w	8008a08 <_scanf_float+0x80>
 8008c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c40:	463a      	mov	r2, r7
 8008c42:	4640      	mov	r0, r8
 8008c44:	4798      	blx	r3
 8008c46:	6923      	ldr	r3, [r4, #16]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	e7f1      	b.n	8008c32 <_scanf_float+0x2aa>
 8008c4e:	9802      	ldr	r0, [sp, #8]
 8008c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c58:	9002      	str	r0, [sp, #8]
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4798      	blx	r3
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c6a:	fa5f fa8a 	uxtb.w	sl, sl
 8008c6e:	f1ba 0f02 	cmp.w	sl, #2
 8008c72:	d1ec      	bne.n	8008c4e <_scanf_float+0x2c6>
 8008c74:	3d03      	subs	r5, #3
 8008c76:	b2ed      	uxtb	r5, r5
 8008c78:	1b76      	subs	r6, r6, r5
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	05da      	lsls	r2, r3, #23
 8008c7e:	d52f      	bpl.n	8008ce0 <_scanf_float+0x358>
 8008c80:	055b      	lsls	r3, r3, #21
 8008c82:	d510      	bpl.n	8008ca6 <_scanf_float+0x31e>
 8008c84:	455e      	cmp	r6, fp
 8008c86:	f67f aebf 	bls.w	8008a08 <_scanf_float+0x80>
 8008c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c92:	463a      	mov	r2, r7
 8008c94:	4640      	mov	r0, r8
 8008c96:	4798      	blx	r3
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	e7f1      	b.n	8008c84 <_scanf_float+0x2fc>
 8008ca0:	46aa      	mov	sl, r5
 8008ca2:	9602      	str	r6, [sp, #8]
 8008ca4:	e7df      	b.n	8008c66 <_scanf_float+0x2de>
 8008ca6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	2965      	cmp	r1, #101	; 0x65
 8008cae:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	d00c      	beq.n	8008cd4 <_scanf_float+0x34c>
 8008cba:	2945      	cmp	r1, #69	; 0x45
 8008cbc:	d00a      	beq.n	8008cd4 <_scanf_float+0x34c>
 8008cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4798      	blx	r3
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	1eb5      	subs	r5, r6, #2
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4798      	blx	r3
 8008cde:	462e      	mov	r6, r5
 8008ce0:	6825      	ldr	r5, [r4, #0]
 8008ce2:	f015 0510 	ands.w	r5, r5, #16
 8008ce6:	d158      	bne.n	8008d9a <_scanf_float+0x412>
 8008ce8:	7035      	strb	r5, [r6, #0]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf4:	d11c      	bne.n	8008d30 <_scanf_float+0x3a8>
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	454b      	cmp	r3, r9
 8008cfa:	eba3 0209 	sub.w	r2, r3, r9
 8008cfe:	d124      	bne.n	8008d4a <_scanf_float+0x3c2>
 8008d00:	2200      	movs	r2, #0
 8008d02:	4659      	mov	r1, fp
 8008d04:	4640      	mov	r0, r8
 8008d06:	f000 ff71 	bl	8009bec <_strtod_r>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	6821      	ldr	r1, [r4, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f011 0f02 	tst.w	r1, #2
 8008d14:	ec57 6b10 	vmov	r6, r7, d0
 8008d18:	f103 0204 	add.w	r2, r3, #4
 8008d1c:	d020      	beq.n	8008d60 <_scanf_float+0x3d8>
 8008d1e:	9903      	ldr	r1, [sp, #12]
 8008d20:	600a      	str	r2, [r1, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	e9c3 6700 	strd	r6, r7, [r3]
 8008d28:	68e3      	ldr	r3, [r4, #12]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	60e3      	str	r3, [r4, #12]
 8008d2e:	e66c      	b.n	8008a0a <_scanf_float+0x82>
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0e4      	beq.n	8008d00 <_scanf_float+0x378>
 8008d36:	9905      	ldr	r1, [sp, #20]
 8008d38:	230a      	movs	r3, #10
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	3101      	adds	r1, #1
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f001 f83a 	bl	8009db8 <_strtol_r>
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	9e05      	ldr	r6, [sp, #20]
 8008d48:	1ac2      	subs	r2, r0, r3
 8008d4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d4e:	429e      	cmp	r6, r3
 8008d50:	bf28      	it	cs
 8008d52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d56:	4912      	ldr	r1, [pc, #72]	; (8008da0 <_scanf_float+0x418>)
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f000 f8cf 	bl	8008efc <siprintf>
 8008d5e:	e7cf      	b.n	8008d00 <_scanf_float+0x378>
 8008d60:	f011 0f04 	tst.w	r1, #4
 8008d64:	9903      	ldr	r1, [sp, #12]
 8008d66:	600a      	str	r2, [r1, #0]
 8008d68:	d1db      	bne.n	8008d22 <_scanf_float+0x39a>
 8008d6a:	f8d3 8000 	ldr.w	r8, [r3]
 8008d6e:	ee10 2a10 	vmov	r2, s0
 8008d72:	ee10 0a10 	vmov	r0, s0
 8008d76:	463b      	mov	r3, r7
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 ff0f 	bl	8000b9c <__aeabi_dcmpun>
 8008d7e:	b128      	cbz	r0, 8008d8c <_scanf_float+0x404>
 8008d80:	4808      	ldr	r0, [pc, #32]	; (8008da4 <_scanf_float+0x41c>)
 8008d82:	f000 f8b5 	bl	8008ef0 <nanf>
 8008d86:	ed88 0a00 	vstr	s0, [r8]
 8008d8a:	e7cd      	b.n	8008d28 <_scanf_float+0x3a0>
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	4639      	mov	r1, r7
 8008d90:	f7f7 ff62 	bl	8000c58 <__aeabi_d2f>
 8008d94:	f8c8 0000 	str.w	r0, [r8]
 8008d98:	e7c6      	b.n	8008d28 <_scanf_float+0x3a0>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	e635      	b.n	8008a0a <_scanf_float+0x82>
 8008d9e:	bf00      	nop
 8008da0:	0800e9d8 	.word	0x0800e9d8
 8008da4:	0800eae3 	.word	0x0800eae3

08008da8 <iprintf>:
 8008da8:	b40f      	push	{r0, r1, r2, r3}
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <iprintf+0x2c>)
 8008dac:	b513      	push	{r0, r1, r4, lr}
 8008dae:	681c      	ldr	r4, [r3, #0]
 8008db0:	b124      	cbz	r4, 8008dbc <iprintf+0x14>
 8008db2:	69a3      	ldr	r3, [r4, #24]
 8008db4:	b913      	cbnz	r3, 8008dbc <iprintf+0x14>
 8008db6:	4620      	mov	r0, r4
 8008db8:	f002 f870 	bl	800ae9c <__sinit>
 8008dbc:	ab05      	add	r3, sp, #20
 8008dbe:	9a04      	ldr	r2, [sp, #16]
 8008dc0:	68a1      	ldr	r1, [r4, #8]
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f003 fc15 	bl	800c5f4 <_vfiprintf_r>
 8008dca:	b002      	add	sp, #8
 8008dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd0:	b004      	add	sp, #16
 8008dd2:	4770      	bx	lr
 8008dd4:	2000000c 	.word	0x2000000c

08008dd8 <putchar>:
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <putchar+0x28>)
 8008dda:	b513      	push	{r0, r1, r4, lr}
 8008ddc:	681c      	ldr	r4, [r3, #0]
 8008dde:	4601      	mov	r1, r0
 8008de0:	b134      	cbz	r4, 8008df0 <putchar+0x18>
 8008de2:	69a3      	ldr	r3, [r4, #24]
 8008de4:	b923      	cbnz	r3, 8008df0 <putchar+0x18>
 8008de6:	9001      	str	r0, [sp, #4]
 8008de8:	4620      	mov	r0, r4
 8008dea:	f002 f857 	bl	800ae9c <__sinit>
 8008dee:	9901      	ldr	r1, [sp, #4]
 8008df0:	68a2      	ldr	r2, [r4, #8]
 8008df2:	4620      	mov	r0, r4
 8008df4:	b002      	add	sp, #8
 8008df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfa:	f003 bd2b 	b.w	800c854 <_putc_r>
 8008dfe:	bf00      	nop
 8008e00:	2000000c 	.word	0x2000000c

08008e04 <_puts_r>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	460e      	mov	r6, r1
 8008e08:	4605      	mov	r5, r0
 8008e0a:	b118      	cbz	r0, 8008e14 <_puts_r+0x10>
 8008e0c:	6983      	ldr	r3, [r0, #24]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <_puts_r+0x10>
 8008e10:	f002 f844 	bl	800ae9c <__sinit>
 8008e14:	69ab      	ldr	r3, [r5, #24]
 8008e16:	68ac      	ldr	r4, [r5, #8]
 8008e18:	b913      	cbnz	r3, 8008e20 <_puts_r+0x1c>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f002 f83e 	bl	800ae9c <__sinit>
 8008e20:	4b2c      	ldr	r3, [pc, #176]	; (8008ed4 <_puts_r+0xd0>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d120      	bne.n	8008e68 <_puts_r+0x64>
 8008e26:	686c      	ldr	r4, [r5, #4]
 8008e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e2a:	07db      	lsls	r3, r3, #31
 8008e2c:	d405      	bmi.n	8008e3a <_puts_r+0x36>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	0598      	lsls	r0, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_puts_r+0x36>
 8008e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e36:	f002 fc54 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	0719      	lsls	r1, r3, #28
 8008e3e:	d51d      	bpl.n	8008e7c <_puts_r+0x78>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	b1db      	cbz	r3, 8008e7c <_puts_r+0x78>
 8008e44:	3e01      	subs	r6, #1
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	60a3      	str	r3, [r4, #8]
 8008e50:	bb39      	cbnz	r1, 8008ea2 <_puts_r+0x9e>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da38      	bge.n	8008ec8 <_puts_r+0xc4>
 8008e56:	4622      	mov	r2, r4
 8008e58:	210a      	movs	r1, #10
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 ffae 	bl	8009dbc <__swbuf_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d011      	beq.n	8008e88 <_puts_r+0x84>
 8008e64:	250a      	movs	r5, #10
 8008e66:	e011      	b.n	8008e8c <_puts_r+0x88>
 8008e68:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <_puts_r+0xd4>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <_puts_r+0x6e>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7da      	b.n	8008e28 <_puts_r+0x24>
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <_puts_r+0xd8>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7d5      	b.n	8008e28 <_puts_r+0x24>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 ffee 	bl	8009e60 <__swsetup_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0dd      	beq.n	8008e44 <_puts_r+0x40>
 8008e88:	f04f 35ff 	mov.w	r5, #4294967295
 8008e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8e:	07da      	lsls	r2, r3, #31
 8008e90:	d405      	bmi.n	8008e9e <_puts_r+0x9a>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d402      	bmi.n	8008e9e <_puts_r+0x9a>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f002 fc23 	bl	800b6e4 <__retarget_lock_release_recursive>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da04      	bge.n	8008eb0 <_puts_r+0xac>
 8008ea6:	69a2      	ldr	r2, [r4, #24]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	dc06      	bgt.n	8008eba <_puts_r+0xb6>
 8008eac:	290a      	cmp	r1, #10
 8008eae:	d004      	beq.n	8008eba <_puts_r+0xb6>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	7019      	strb	r1, [r3, #0]
 8008eb8:	e7c5      	b.n	8008e46 <_puts_r+0x42>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f000 ff7d 	bl	8009dbc <__swbuf_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d1bf      	bne.n	8008e46 <_puts_r+0x42>
 8008ec6:	e7df      	b.n	8008e88 <_puts_r+0x84>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	250a      	movs	r5, #10
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	701d      	strb	r5, [r3, #0]
 8008ed2:	e7db      	b.n	8008e8c <_puts_r+0x88>
 8008ed4:	0800ec84 	.word	0x0800ec84
 8008ed8:	0800eca4 	.word	0x0800eca4
 8008edc:	0800ec64 	.word	0x0800ec64

08008ee0 <puts>:
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <puts+0xc>)
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	f7ff bf8d 	b.w	8008e04 <_puts_r>
 8008eea:	bf00      	nop
 8008eec:	2000000c 	.word	0x2000000c

08008ef0 <nanf>:
 8008ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ef8 <nanf+0x8>
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	7fc00000 	.word	0x7fc00000

08008efc <siprintf>:
 8008efc:	b40e      	push	{r1, r2, r3}
 8008efe:	b500      	push	{lr}
 8008f00:	b09c      	sub	sp, #112	; 0x70
 8008f02:	ab1d      	add	r3, sp, #116	; 0x74
 8008f04:	9002      	str	r0, [sp, #8]
 8008f06:	9006      	str	r0, [sp, #24]
 8008f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f0c:	4809      	ldr	r0, [pc, #36]	; (8008f34 <siprintf+0x38>)
 8008f0e:	9107      	str	r1, [sp, #28]
 8008f10:	9104      	str	r1, [sp, #16]
 8008f12:	4909      	ldr	r1, [pc, #36]	; (8008f38 <siprintf+0x3c>)
 8008f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f18:	9105      	str	r1, [sp, #20]
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	a902      	add	r1, sp, #8
 8008f20:	f003 fa3e 	bl	800c3a0 <_svfiprintf_r>
 8008f24:	9b02      	ldr	r3, [sp, #8]
 8008f26:	2200      	movs	r2, #0
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	b01c      	add	sp, #112	; 0x70
 8008f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f30:	b003      	add	sp, #12
 8008f32:	4770      	bx	lr
 8008f34:	2000000c 	.word	0x2000000c
 8008f38:	ffff0208 	.word	0xffff0208

08008f3c <strcpy>:
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f42:	f803 2b01 	strb.w	r2, [r3], #1
 8008f46:	2a00      	cmp	r2, #0
 8008f48:	d1f9      	bne.n	8008f3e <strcpy+0x2>
 8008f4a:	4770      	bx	lr

08008f4c <strncpy>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	3901      	subs	r1, #1
 8008f50:	4603      	mov	r3, r0
 8008f52:	b132      	cbz	r2, 8008f62 <strncpy+0x16>
 8008f54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f58:	f803 4b01 	strb.w	r4, [r3], #1
 8008f5c:	3a01      	subs	r2, #1
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d1f7      	bne.n	8008f52 <strncpy+0x6>
 8008f62:	441a      	add	r2, r3
 8008f64:	2100      	movs	r1, #0
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d100      	bne.n	8008f6c <strncpy+0x20>
 8008f6a:	bd10      	pop	{r4, pc}
 8008f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8008f70:	e7f9      	b.n	8008f66 <strncpy+0x1a>

08008f72 <strstr>:
 8008f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f74:	780c      	ldrb	r4, [r1, #0]
 8008f76:	b164      	cbz	r4, 8008f92 <strstr+0x20>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	1c5e      	adds	r6, r3, #1
 8008f80:	b90a      	cbnz	r2, 8008f86 <strstr+0x14>
 8008f82:	4610      	mov	r0, r2
 8008f84:	e005      	b.n	8008f92 <strstr+0x20>
 8008f86:	4294      	cmp	r4, r2
 8008f88:	d108      	bne.n	8008f9c <strstr+0x2a>
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008f90:	b902      	cbnz	r2, 8008f94 <strstr+0x22>
 8008f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f94:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008f98:	4297      	cmp	r7, r2
 8008f9a:	d0f7      	beq.n	8008f8c <strstr+0x1a>
 8008f9c:	4633      	mov	r3, r6
 8008f9e:	e7ec      	b.n	8008f7a <strstr+0x8>

08008fa0 <sulp>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	ec45 4b10 	vmov	d0, r4, r5
 8008faa:	4616      	mov	r6, r2
 8008fac:	f002 ff94 	bl	800bed8 <__ulp>
 8008fb0:	ec51 0b10 	vmov	r0, r1, d0
 8008fb4:	b17e      	cbz	r6, 8008fd6 <sulp+0x36>
 8008fb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd09      	ble.n	8008fd6 <sulp+0x36>
 8008fc2:	051b      	lsls	r3, r3, #20
 8008fc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008fc8:	2400      	movs	r4, #0
 8008fca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008fce:	4622      	mov	r2, r4
 8008fd0:	462b      	mov	r3, r5
 8008fd2:	f7f7 fb49 	bl	8000668 <__aeabi_dmul>
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <_strtod_l>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	b0a3      	sub	sp, #140	; 0x8c
 8008fde:	461f      	mov	r7, r3
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	931e      	str	r3, [sp, #120]	; 0x78
 8008fe4:	4ba4      	ldr	r3, [pc, #656]	; (8009278 <_strtod_l+0x2a0>)
 8008fe6:	9219      	str	r2, [sp, #100]	; 0x64
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	4604      	mov	r4, r0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	4688      	mov	r8, r1
 8008ff2:	f7f7 f91f 	bl	8000234 <strlen>
 8008ff6:	f04f 0a00 	mov.w	sl, #0
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	f04f 0b00 	mov.w	fp, #0
 8009000:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	2a2b      	cmp	r2, #43	; 0x2b
 800900a:	d04c      	beq.n	80090a6 <_strtod_l+0xce>
 800900c:	d839      	bhi.n	8009082 <_strtod_l+0xaa>
 800900e:	2a0d      	cmp	r2, #13
 8009010:	d832      	bhi.n	8009078 <_strtod_l+0xa0>
 8009012:	2a08      	cmp	r2, #8
 8009014:	d832      	bhi.n	800907c <_strtod_l+0xa4>
 8009016:	2a00      	cmp	r2, #0
 8009018:	d03c      	beq.n	8009094 <_strtod_l+0xbc>
 800901a:	2300      	movs	r3, #0
 800901c:	930e      	str	r3, [sp, #56]	; 0x38
 800901e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009020:	7833      	ldrb	r3, [r6, #0]
 8009022:	2b30      	cmp	r3, #48	; 0x30
 8009024:	f040 80b4 	bne.w	8009190 <_strtod_l+0x1b8>
 8009028:	7873      	ldrb	r3, [r6, #1]
 800902a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800902e:	2b58      	cmp	r3, #88	; 0x58
 8009030:	d16c      	bne.n	800910c <_strtod_l+0x134>
 8009032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	ab1e      	add	r3, sp, #120	; 0x78
 8009038:	9702      	str	r7, [sp, #8]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4a8f      	ldr	r2, [pc, #572]	; (800927c <_strtod_l+0x2a4>)
 800903e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009040:	a91d      	add	r1, sp, #116	; 0x74
 8009042:	4620      	mov	r0, r4
 8009044:	f002 f840 	bl	800b0c8 <__gethex>
 8009048:	f010 0707 	ands.w	r7, r0, #7
 800904c:	4605      	mov	r5, r0
 800904e:	d005      	beq.n	800905c <_strtod_l+0x84>
 8009050:	2f06      	cmp	r7, #6
 8009052:	d12a      	bne.n	80090aa <_strtod_l+0xd2>
 8009054:	3601      	adds	r6, #1
 8009056:	2300      	movs	r3, #0
 8009058:	961d      	str	r6, [sp, #116]	; 0x74
 800905a:	930e      	str	r3, [sp, #56]	; 0x38
 800905c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 8596 	bne.w	8009b90 <_strtod_l+0xbb8>
 8009064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009066:	b1db      	cbz	r3, 80090a0 <_strtod_l+0xc8>
 8009068:	4652      	mov	r2, sl
 800906a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800906e:	ec43 2b10 	vmov	d0, r2, r3
 8009072:	b023      	add	sp, #140	; 0x8c
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	2a20      	cmp	r2, #32
 800907a:	d1ce      	bne.n	800901a <_strtod_l+0x42>
 800907c:	3301      	adds	r3, #1
 800907e:	931d      	str	r3, [sp, #116]	; 0x74
 8009080:	e7c0      	b.n	8009004 <_strtod_l+0x2c>
 8009082:	2a2d      	cmp	r2, #45	; 0x2d
 8009084:	d1c9      	bne.n	800901a <_strtod_l+0x42>
 8009086:	2201      	movs	r2, #1
 8009088:	920e      	str	r2, [sp, #56]	; 0x38
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	921d      	str	r2, [sp, #116]	; 0x74
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1c4      	bne.n	800901e <_strtod_l+0x46>
 8009094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009096:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800909a:	2b00      	cmp	r3, #0
 800909c:	f040 8576 	bne.w	8009b8c <_strtod_l+0xbb4>
 80090a0:	4652      	mov	r2, sl
 80090a2:	465b      	mov	r3, fp
 80090a4:	e7e3      	b.n	800906e <_strtod_l+0x96>
 80090a6:	2200      	movs	r2, #0
 80090a8:	e7ee      	b.n	8009088 <_strtod_l+0xb0>
 80090aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090ac:	b13a      	cbz	r2, 80090be <_strtod_l+0xe6>
 80090ae:	2135      	movs	r1, #53	; 0x35
 80090b0:	a820      	add	r0, sp, #128	; 0x80
 80090b2:	f003 f81c 	bl	800c0ee <__copybits>
 80090b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090b8:	4620      	mov	r0, r4
 80090ba:	f002 fbe1 	bl	800b880 <_Bfree>
 80090be:	3f01      	subs	r7, #1
 80090c0:	2f05      	cmp	r7, #5
 80090c2:	d807      	bhi.n	80090d4 <_strtod_l+0xfc>
 80090c4:	e8df f007 	tbb	[pc, r7]
 80090c8:	1d180b0e 	.word	0x1d180b0e
 80090cc:	030e      	.short	0x030e
 80090ce:	f04f 0b00 	mov.w	fp, #0
 80090d2:	46da      	mov	sl, fp
 80090d4:	0728      	lsls	r0, r5, #28
 80090d6:	d5c1      	bpl.n	800905c <_strtod_l+0x84>
 80090d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80090dc:	e7be      	b.n	800905c <_strtod_l+0x84>
 80090de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80090e2:	e7f7      	b.n	80090d4 <_strtod_l+0xfc>
 80090e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80090e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80090ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090f6:	e7ed      	b.n	80090d4 <_strtod_l+0xfc>
 80090f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009280 <_strtod_l+0x2a8>
 80090fc:	f04f 0a00 	mov.w	sl, #0
 8009100:	e7e8      	b.n	80090d4 <_strtod_l+0xfc>
 8009102:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009106:	f04f 3aff 	mov.w	sl, #4294967295
 800910a:	e7e3      	b.n	80090d4 <_strtod_l+0xfc>
 800910c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	921d      	str	r2, [sp, #116]	; 0x74
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b30      	cmp	r3, #48	; 0x30
 8009116:	d0f9      	beq.n	800910c <_strtod_l+0x134>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d09f      	beq.n	800905c <_strtod_l+0x84>
 800911c:	2301      	movs	r3, #1
 800911e:	f04f 0900 	mov.w	r9, #0
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009126:	930a      	str	r3, [sp, #40]	; 0x28
 8009128:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800912c:	464f      	mov	r7, r9
 800912e:	220a      	movs	r2, #10
 8009130:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009132:	7806      	ldrb	r6, [r0, #0]
 8009134:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009138:	b2d9      	uxtb	r1, r3
 800913a:	2909      	cmp	r1, #9
 800913c:	d92a      	bls.n	8009194 <_strtod_l+0x1bc>
 800913e:	9907      	ldr	r1, [sp, #28]
 8009140:	462a      	mov	r2, r5
 8009142:	f003 fc2c 	bl	800c99e <strncmp>
 8009146:	b398      	cbz	r0, 80091b0 <_strtod_l+0x1d8>
 8009148:	2000      	movs	r0, #0
 800914a:	4633      	mov	r3, r6
 800914c:	463d      	mov	r5, r7
 800914e:	9007      	str	r0, [sp, #28]
 8009150:	4602      	mov	r2, r0
 8009152:	2b65      	cmp	r3, #101	; 0x65
 8009154:	d001      	beq.n	800915a <_strtod_l+0x182>
 8009156:	2b45      	cmp	r3, #69	; 0x45
 8009158:	d118      	bne.n	800918c <_strtod_l+0x1b4>
 800915a:	b91d      	cbnz	r5, 8009164 <_strtod_l+0x18c>
 800915c:	9b04      	ldr	r3, [sp, #16]
 800915e:	4303      	orrs	r3, r0
 8009160:	d098      	beq.n	8009094 <_strtod_l+0xbc>
 8009162:	2500      	movs	r5, #0
 8009164:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009168:	f108 0301 	add.w	r3, r8, #1
 800916c:	931d      	str	r3, [sp, #116]	; 0x74
 800916e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009172:	2b2b      	cmp	r3, #43	; 0x2b
 8009174:	d075      	beq.n	8009262 <_strtod_l+0x28a>
 8009176:	2b2d      	cmp	r3, #45	; 0x2d
 8009178:	d07b      	beq.n	8009272 <_strtod_l+0x29a>
 800917a:	f04f 0c00 	mov.w	ip, #0
 800917e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009182:	2909      	cmp	r1, #9
 8009184:	f240 8082 	bls.w	800928c <_strtod_l+0x2b4>
 8009188:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800918c:	2600      	movs	r6, #0
 800918e:	e09d      	b.n	80092cc <_strtod_l+0x2f4>
 8009190:	2300      	movs	r3, #0
 8009192:	e7c4      	b.n	800911e <_strtod_l+0x146>
 8009194:	2f08      	cmp	r7, #8
 8009196:	bfd8      	it	le
 8009198:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800919a:	f100 0001 	add.w	r0, r0, #1
 800919e:	bfda      	itte	le
 80091a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80091a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80091a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80091aa:	3701      	adds	r7, #1
 80091ac:	901d      	str	r0, [sp, #116]	; 0x74
 80091ae:	e7bf      	b.n	8009130 <_strtod_l+0x158>
 80091b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091b2:	195a      	adds	r2, r3, r5
 80091b4:	921d      	str	r2, [sp, #116]	; 0x74
 80091b6:	5d5b      	ldrb	r3, [r3, r5]
 80091b8:	2f00      	cmp	r7, #0
 80091ba:	d037      	beq.n	800922c <_strtod_l+0x254>
 80091bc:	9007      	str	r0, [sp, #28]
 80091be:	463d      	mov	r5, r7
 80091c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80091c4:	2a09      	cmp	r2, #9
 80091c6:	d912      	bls.n	80091ee <_strtod_l+0x216>
 80091c8:	2201      	movs	r2, #1
 80091ca:	e7c2      	b.n	8009152 <_strtod_l+0x17a>
 80091cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	921d      	str	r2, [sp, #116]	; 0x74
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	3001      	adds	r0, #1
 80091d6:	2b30      	cmp	r3, #48	; 0x30
 80091d8:	d0f8      	beq.n	80091cc <_strtod_l+0x1f4>
 80091da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80091de:	2a08      	cmp	r2, #8
 80091e0:	f200 84db 	bhi.w	8009b9a <_strtod_l+0xbc2>
 80091e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80091e6:	9007      	str	r0, [sp, #28]
 80091e8:	2000      	movs	r0, #0
 80091ea:	920a      	str	r2, [sp, #40]	; 0x28
 80091ec:	4605      	mov	r5, r0
 80091ee:	3b30      	subs	r3, #48	; 0x30
 80091f0:	f100 0201 	add.w	r2, r0, #1
 80091f4:	d014      	beq.n	8009220 <_strtod_l+0x248>
 80091f6:	9907      	ldr	r1, [sp, #28]
 80091f8:	4411      	add	r1, r2
 80091fa:	9107      	str	r1, [sp, #28]
 80091fc:	462a      	mov	r2, r5
 80091fe:	eb00 0e05 	add.w	lr, r0, r5
 8009202:	210a      	movs	r1, #10
 8009204:	4572      	cmp	r2, lr
 8009206:	d113      	bne.n	8009230 <_strtod_l+0x258>
 8009208:	182a      	adds	r2, r5, r0
 800920a:	2a08      	cmp	r2, #8
 800920c:	f105 0501 	add.w	r5, r5, #1
 8009210:	4405      	add	r5, r0
 8009212:	dc1c      	bgt.n	800924e <_strtod_l+0x276>
 8009214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009216:	220a      	movs	r2, #10
 8009218:	fb02 3301 	mla	r3, r2, r1, r3
 800921c:	9309      	str	r3, [sp, #36]	; 0x24
 800921e:	2200      	movs	r2, #0
 8009220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009222:	1c59      	adds	r1, r3, #1
 8009224:	911d      	str	r1, [sp, #116]	; 0x74
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	4610      	mov	r0, r2
 800922a:	e7c9      	b.n	80091c0 <_strtod_l+0x1e8>
 800922c:	4638      	mov	r0, r7
 800922e:	e7d2      	b.n	80091d6 <_strtod_l+0x1fe>
 8009230:	2a08      	cmp	r2, #8
 8009232:	dc04      	bgt.n	800923e <_strtod_l+0x266>
 8009234:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009236:	434e      	muls	r6, r1
 8009238:	9609      	str	r6, [sp, #36]	; 0x24
 800923a:	3201      	adds	r2, #1
 800923c:	e7e2      	b.n	8009204 <_strtod_l+0x22c>
 800923e:	f102 0c01 	add.w	ip, r2, #1
 8009242:	f1bc 0f10 	cmp.w	ip, #16
 8009246:	bfd8      	it	le
 8009248:	fb01 f909 	mulle.w	r9, r1, r9
 800924c:	e7f5      	b.n	800923a <_strtod_l+0x262>
 800924e:	2d10      	cmp	r5, #16
 8009250:	bfdc      	itt	le
 8009252:	220a      	movle	r2, #10
 8009254:	fb02 3909 	mlale	r9, r2, r9, r3
 8009258:	e7e1      	b.n	800921e <_strtod_l+0x246>
 800925a:	2300      	movs	r3, #0
 800925c:	9307      	str	r3, [sp, #28]
 800925e:	2201      	movs	r2, #1
 8009260:	e77c      	b.n	800915c <_strtod_l+0x184>
 8009262:	f04f 0c00 	mov.w	ip, #0
 8009266:	f108 0302 	add.w	r3, r8, #2
 800926a:	931d      	str	r3, [sp, #116]	; 0x74
 800926c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009270:	e785      	b.n	800917e <_strtod_l+0x1a6>
 8009272:	f04f 0c01 	mov.w	ip, #1
 8009276:	e7f6      	b.n	8009266 <_strtod_l+0x28e>
 8009278:	0800ed30 	.word	0x0800ed30
 800927c:	0800e9e0 	.word	0x0800e9e0
 8009280:	7ff00000 	.word	0x7ff00000
 8009284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009286:	1c59      	adds	r1, r3, #1
 8009288:	911d      	str	r1, [sp, #116]	; 0x74
 800928a:	785b      	ldrb	r3, [r3, #1]
 800928c:	2b30      	cmp	r3, #48	; 0x30
 800928e:	d0f9      	beq.n	8009284 <_strtod_l+0x2ac>
 8009290:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009294:	2908      	cmp	r1, #8
 8009296:	f63f af79 	bhi.w	800918c <_strtod_l+0x1b4>
 800929a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800929e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092a0:	9308      	str	r3, [sp, #32]
 80092a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092a4:	1c59      	adds	r1, r3, #1
 80092a6:	911d      	str	r1, [sp, #116]	; 0x74
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80092ae:	2e09      	cmp	r6, #9
 80092b0:	d937      	bls.n	8009322 <_strtod_l+0x34a>
 80092b2:	9e08      	ldr	r6, [sp, #32]
 80092b4:	1b89      	subs	r1, r1, r6
 80092b6:	2908      	cmp	r1, #8
 80092b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80092bc:	dc02      	bgt.n	80092c4 <_strtod_l+0x2ec>
 80092be:	4576      	cmp	r6, lr
 80092c0:	bfa8      	it	ge
 80092c2:	4676      	movge	r6, lr
 80092c4:	f1bc 0f00 	cmp.w	ip, #0
 80092c8:	d000      	beq.n	80092cc <_strtod_l+0x2f4>
 80092ca:	4276      	negs	r6, r6
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	d14f      	bne.n	8009370 <_strtod_l+0x398>
 80092d0:	9904      	ldr	r1, [sp, #16]
 80092d2:	4301      	orrs	r1, r0
 80092d4:	f47f aec2 	bne.w	800905c <_strtod_l+0x84>
 80092d8:	2a00      	cmp	r2, #0
 80092da:	f47f aedb 	bne.w	8009094 <_strtod_l+0xbc>
 80092de:	2b69      	cmp	r3, #105	; 0x69
 80092e0:	d027      	beq.n	8009332 <_strtod_l+0x35a>
 80092e2:	dc24      	bgt.n	800932e <_strtod_l+0x356>
 80092e4:	2b49      	cmp	r3, #73	; 0x49
 80092e6:	d024      	beq.n	8009332 <_strtod_l+0x35a>
 80092e8:	2b4e      	cmp	r3, #78	; 0x4e
 80092ea:	f47f aed3 	bne.w	8009094 <_strtod_l+0xbc>
 80092ee:	499e      	ldr	r1, [pc, #632]	; (8009568 <_strtod_l+0x590>)
 80092f0:	a81d      	add	r0, sp, #116	; 0x74
 80092f2:	f002 f941 	bl	800b578 <__match>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f aecc 	beq.w	8009094 <_strtod_l+0xbc>
 80092fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b28      	cmp	r3, #40	; 0x28
 8009302:	d12d      	bne.n	8009360 <_strtod_l+0x388>
 8009304:	4999      	ldr	r1, [pc, #612]	; (800956c <_strtod_l+0x594>)
 8009306:	aa20      	add	r2, sp, #128	; 0x80
 8009308:	a81d      	add	r0, sp, #116	; 0x74
 800930a:	f002 f949 	bl	800b5a0 <__hexnan>
 800930e:	2805      	cmp	r0, #5
 8009310:	d126      	bne.n	8009360 <_strtod_l+0x388>
 8009312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009314:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009318:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800931c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009320:	e69c      	b.n	800905c <_strtod_l+0x84>
 8009322:	210a      	movs	r1, #10
 8009324:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009328:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800932c:	e7b9      	b.n	80092a2 <_strtod_l+0x2ca>
 800932e:	2b6e      	cmp	r3, #110	; 0x6e
 8009330:	e7db      	b.n	80092ea <_strtod_l+0x312>
 8009332:	498f      	ldr	r1, [pc, #572]	; (8009570 <_strtod_l+0x598>)
 8009334:	a81d      	add	r0, sp, #116	; 0x74
 8009336:	f002 f91f 	bl	800b578 <__match>
 800933a:	2800      	cmp	r0, #0
 800933c:	f43f aeaa 	beq.w	8009094 <_strtod_l+0xbc>
 8009340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009342:	498c      	ldr	r1, [pc, #560]	; (8009574 <_strtod_l+0x59c>)
 8009344:	3b01      	subs	r3, #1
 8009346:	a81d      	add	r0, sp, #116	; 0x74
 8009348:	931d      	str	r3, [sp, #116]	; 0x74
 800934a:	f002 f915 	bl	800b578 <__match>
 800934e:	b910      	cbnz	r0, 8009356 <_strtod_l+0x37e>
 8009350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009352:	3301      	adds	r3, #1
 8009354:	931d      	str	r3, [sp, #116]	; 0x74
 8009356:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009584 <_strtod_l+0x5ac>
 800935a:	f04f 0a00 	mov.w	sl, #0
 800935e:	e67d      	b.n	800905c <_strtod_l+0x84>
 8009360:	4885      	ldr	r0, [pc, #532]	; (8009578 <_strtod_l+0x5a0>)
 8009362:	f003 fac1 	bl	800c8e8 <nan>
 8009366:	ed8d 0b04 	vstr	d0, [sp, #16]
 800936a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800936e:	e675      	b.n	800905c <_strtod_l+0x84>
 8009370:	9b07      	ldr	r3, [sp, #28]
 8009372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009374:	1af3      	subs	r3, r6, r3
 8009376:	2f00      	cmp	r7, #0
 8009378:	bf08      	it	eq
 800937a:	462f      	moveq	r7, r5
 800937c:	2d10      	cmp	r5, #16
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	46a8      	mov	r8, r5
 8009382:	bfa8      	it	ge
 8009384:	f04f 0810 	movge.w	r8, #16
 8009388:	f7f7 f8f4 	bl	8000574 <__aeabi_ui2d>
 800938c:	2d09      	cmp	r5, #9
 800938e:	4682      	mov	sl, r0
 8009390:	468b      	mov	fp, r1
 8009392:	dd13      	ble.n	80093bc <_strtod_l+0x3e4>
 8009394:	4b79      	ldr	r3, [pc, #484]	; (800957c <_strtod_l+0x5a4>)
 8009396:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800939a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800939e:	f7f7 f963 	bl	8000668 <__aeabi_dmul>
 80093a2:	4682      	mov	sl, r0
 80093a4:	4648      	mov	r0, r9
 80093a6:	468b      	mov	fp, r1
 80093a8:	f7f7 f8e4 	bl	8000574 <__aeabi_ui2d>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4650      	mov	r0, sl
 80093b2:	4659      	mov	r1, fp
 80093b4:	f7f6 ffa2 	bl	80002fc <__adddf3>
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	2d0f      	cmp	r5, #15
 80093be:	dc38      	bgt.n	8009432 <_strtod_l+0x45a>
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f43f ae4a 	beq.w	800905c <_strtod_l+0x84>
 80093c8:	dd24      	ble.n	8009414 <_strtod_l+0x43c>
 80093ca:	2b16      	cmp	r3, #22
 80093cc:	dc0b      	bgt.n	80093e6 <_strtod_l+0x40e>
 80093ce:	4d6b      	ldr	r5, [pc, #428]	; (800957c <_strtod_l+0x5a4>)
 80093d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80093d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80093d8:	4652      	mov	r2, sl
 80093da:	465b      	mov	r3, fp
 80093dc:	f7f7 f944 	bl	8000668 <__aeabi_dmul>
 80093e0:	4682      	mov	sl, r0
 80093e2:	468b      	mov	fp, r1
 80093e4:	e63a      	b.n	800905c <_strtod_l+0x84>
 80093e6:	9a08      	ldr	r2, [sp, #32]
 80093e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80093ec:	4293      	cmp	r3, r2
 80093ee:	db20      	blt.n	8009432 <_strtod_l+0x45a>
 80093f0:	4c62      	ldr	r4, [pc, #392]	; (800957c <_strtod_l+0x5a4>)
 80093f2:	f1c5 050f 	rsb	r5, r5, #15
 80093f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80093fa:	4652      	mov	r2, sl
 80093fc:	465b      	mov	r3, fp
 80093fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009402:	f7f7 f931 	bl	8000668 <__aeabi_dmul>
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	1b5d      	subs	r5, r3, r5
 800940a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800940e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009412:	e7e3      	b.n	80093dc <_strtod_l+0x404>
 8009414:	9b08      	ldr	r3, [sp, #32]
 8009416:	3316      	adds	r3, #22
 8009418:	db0b      	blt.n	8009432 <_strtod_l+0x45a>
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	4a57      	ldr	r2, [pc, #348]	; (800957c <_strtod_l+0x5a4>)
 800941e:	1b9e      	subs	r6, r3, r6
 8009420:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009424:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009428:	4650      	mov	r0, sl
 800942a:	4659      	mov	r1, fp
 800942c:	f7f7 fa46 	bl	80008bc <__aeabi_ddiv>
 8009430:	e7d6      	b.n	80093e0 <_strtod_l+0x408>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	eba5 0808 	sub.w	r8, r5, r8
 8009438:	4498      	add	r8, r3
 800943a:	f1b8 0f00 	cmp.w	r8, #0
 800943e:	dd71      	ble.n	8009524 <_strtod_l+0x54c>
 8009440:	f018 030f 	ands.w	r3, r8, #15
 8009444:	d00a      	beq.n	800945c <_strtod_l+0x484>
 8009446:	494d      	ldr	r1, [pc, #308]	; (800957c <_strtod_l+0x5a4>)
 8009448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800944c:	4652      	mov	r2, sl
 800944e:	465b      	mov	r3, fp
 8009450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009454:	f7f7 f908 	bl	8000668 <__aeabi_dmul>
 8009458:	4682      	mov	sl, r0
 800945a:	468b      	mov	fp, r1
 800945c:	f038 080f 	bics.w	r8, r8, #15
 8009460:	d04d      	beq.n	80094fe <_strtod_l+0x526>
 8009462:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009466:	dd22      	ble.n	80094ae <_strtod_l+0x4d6>
 8009468:	2500      	movs	r5, #0
 800946a:	462e      	mov	r6, r5
 800946c:	9509      	str	r5, [sp, #36]	; 0x24
 800946e:	9507      	str	r5, [sp, #28]
 8009470:	2322      	movs	r3, #34	; 0x22
 8009472:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009584 <_strtod_l+0x5ac>
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	f04f 0a00 	mov.w	sl, #0
 800947c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	f43f adec 	beq.w	800905c <_strtod_l+0x84>
 8009484:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009486:	4620      	mov	r0, r4
 8009488:	f002 f9fa 	bl	800b880 <_Bfree>
 800948c:	9907      	ldr	r1, [sp, #28]
 800948e:	4620      	mov	r0, r4
 8009490:	f002 f9f6 	bl	800b880 <_Bfree>
 8009494:	4631      	mov	r1, r6
 8009496:	4620      	mov	r0, r4
 8009498:	f002 f9f2 	bl	800b880 <_Bfree>
 800949c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800949e:	4620      	mov	r0, r4
 80094a0:	f002 f9ee 	bl	800b880 <_Bfree>
 80094a4:	4629      	mov	r1, r5
 80094a6:	4620      	mov	r0, r4
 80094a8:	f002 f9ea 	bl	800b880 <_Bfree>
 80094ac:	e5d6      	b.n	800905c <_strtod_l+0x84>
 80094ae:	2300      	movs	r3, #0
 80094b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80094b4:	4650      	mov	r0, sl
 80094b6:	4659      	mov	r1, fp
 80094b8:	4699      	mov	r9, r3
 80094ba:	f1b8 0f01 	cmp.w	r8, #1
 80094be:	dc21      	bgt.n	8009504 <_strtod_l+0x52c>
 80094c0:	b10b      	cbz	r3, 80094c6 <_strtod_l+0x4ee>
 80094c2:	4682      	mov	sl, r0
 80094c4:	468b      	mov	fp, r1
 80094c6:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <_strtod_l+0x5a8>)
 80094c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80094cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80094d0:	4652      	mov	r2, sl
 80094d2:	465b      	mov	r3, fp
 80094d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80094d8:	f7f7 f8c6 	bl	8000668 <__aeabi_dmul>
 80094dc:	4b29      	ldr	r3, [pc, #164]	; (8009584 <_strtod_l+0x5ac>)
 80094de:	460a      	mov	r2, r1
 80094e0:	400b      	ands	r3, r1
 80094e2:	4929      	ldr	r1, [pc, #164]	; (8009588 <_strtod_l+0x5b0>)
 80094e4:	428b      	cmp	r3, r1
 80094e6:	4682      	mov	sl, r0
 80094e8:	d8be      	bhi.n	8009468 <_strtod_l+0x490>
 80094ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094ee:	428b      	cmp	r3, r1
 80094f0:	bf86      	itte	hi
 80094f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800958c <_strtod_l+0x5b4>
 80094f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80094fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80094fe:	2300      	movs	r3, #0
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	e081      	b.n	8009608 <_strtod_l+0x630>
 8009504:	f018 0f01 	tst.w	r8, #1
 8009508:	d007      	beq.n	800951a <_strtod_l+0x542>
 800950a:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <_strtod_l+0x5a8>)
 800950c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f7 f8a8 	bl	8000668 <__aeabi_dmul>
 8009518:	2301      	movs	r3, #1
 800951a:	f109 0901 	add.w	r9, r9, #1
 800951e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009522:	e7ca      	b.n	80094ba <_strtod_l+0x4e2>
 8009524:	d0eb      	beq.n	80094fe <_strtod_l+0x526>
 8009526:	f1c8 0800 	rsb	r8, r8, #0
 800952a:	f018 020f 	ands.w	r2, r8, #15
 800952e:	d00a      	beq.n	8009546 <_strtod_l+0x56e>
 8009530:	4b12      	ldr	r3, [pc, #72]	; (800957c <_strtod_l+0x5a4>)
 8009532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009536:	4650      	mov	r0, sl
 8009538:	4659      	mov	r1, fp
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f9bd 	bl	80008bc <__aeabi_ddiv>
 8009542:	4682      	mov	sl, r0
 8009544:	468b      	mov	fp, r1
 8009546:	ea5f 1828 	movs.w	r8, r8, asr #4
 800954a:	d0d8      	beq.n	80094fe <_strtod_l+0x526>
 800954c:	f1b8 0f1f 	cmp.w	r8, #31
 8009550:	dd1e      	ble.n	8009590 <_strtod_l+0x5b8>
 8009552:	2500      	movs	r5, #0
 8009554:	462e      	mov	r6, r5
 8009556:	9509      	str	r5, [sp, #36]	; 0x24
 8009558:	9507      	str	r5, [sp, #28]
 800955a:	2322      	movs	r3, #34	; 0x22
 800955c:	f04f 0a00 	mov.w	sl, #0
 8009560:	f04f 0b00 	mov.w	fp, #0
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	e789      	b.n	800947c <_strtod_l+0x4a4>
 8009568:	0800e9b1 	.word	0x0800e9b1
 800956c:	0800e9f4 	.word	0x0800e9f4
 8009570:	0800e9a9 	.word	0x0800e9a9
 8009574:	0800ebe8 	.word	0x0800ebe8
 8009578:	0800eae3 	.word	0x0800eae3
 800957c:	0800edd0 	.word	0x0800edd0
 8009580:	0800eda8 	.word	0x0800eda8
 8009584:	7ff00000 	.word	0x7ff00000
 8009588:	7ca00000 	.word	0x7ca00000
 800958c:	7fefffff 	.word	0x7fefffff
 8009590:	f018 0310 	ands.w	r3, r8, #16
 8009594:	bf18      	it	ne
 8009596:	236a      	movne	r3, #106	; 0x6a
 8009598:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009950 <_strtod_l+0x978>
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	4650      	mov	r0, sl
 80095a0:	4659      	mov	r1, fp
 80095a2:	2300      	movs	r3, #0
 80095a4:	f018 0f01 	tst.w	r8, #1
 80095a8:	d004      	beq.n	80095b4 <_strtod_l+0x5dc>
 80095aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80095ae:	f7f7 f85b 	bl	8000668 <__aeabi_dmul>
 80095b2:	2301      	movs	r3, #1
 80095b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80095b8:	f109 0908 	add.w	r9, r9, #8
 80095bc:	d1f2      	bne.n	80095a4 <_strtod_l+0x5cc>
 80095be:	b10b      	cbz	r3, 80095c4 <_strtod_l+0x5ec>
 80095c0:	4682      	mov	sl, r0
 80095c2:	468b      	mov	fp, r1
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	b1bb      	cbz	r3, 80095f8 <_strtod_l+0x620>
 80095c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80095cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	4659      	mov	r1, fp
 80095d4:	dd10      	ble.n	80095f8 <_strtod_l+0x620>
 80095d6:	2b1f      	cmp	r3, #31
 80095d8:	f340 8128 	ble.w	800982c <_strtod_l+0x854>
 80095dc:	2b34      	cmp	r3, #52	; 0x34
 80095de:	bfde      	ittt	le
 80095e0:	3b20      	suble	r3, #32
 80095e2:	f04f 32ff 	movle.w	r2, #4294967295
 80095e6:	fa02 f303 	lslle.w	r3, r2, r3
 80095ea:	f04f 0a00 	mov.w	sl, #0
 80095ee:	bfcc      	ite	gt
 80095f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80095f4:	ea03 0b01 	andle.w	fp, r3, r1
 80095f8:	2200      	movs	r2, #0
 80095fa:	2300      	movs	r3, #0
 80095fc:	4650      	mov	r0, sl
 80095fe:	4659      	mov	r1, fp
 8009600:	f7f7 fa9a 	bl	8000b38 <__aeabi_dcmpeq>
 8009604:	2800      	cmp	r0, #0
 8009606:	d1a4      	bne.n	8009552 <_strtod_l+0x57a>
 8009608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800960e:	462b      	mov	r3, r5
 8009610:	463a      	mov	r2, r7
 8009612:	4620      	mov	r0, r4
 8009614:	f002 f9a0 	bl	800b958 <__s2b>
 8009618:	9009      	str	r0, [sp, #36]	; 0x24
 800961a:	2800      	cmp	r0, #0
 800961c:	f43f af24 	beq.w	8009468 <_strtod_l+0x490>
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	1b9e      	subs	r6, r3, r6
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bfb4      	ite	lt
 800962a:	4633      	movlt	r3, r6
 800962c:	2300      	movge	r3, #0
 800962e:	9310      	str	r3, [sp, #64]	; 0x40
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	2500      	movs	r5, #0
 8009634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009638:	9318      	str	r3, [sp, #96]	; 0x60
 800963a:	462e      	mov	r6, r5
 800963c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963e:	4620      	mov	r0, r4
 8009640:	6859      	ldr	r1, [r3, #4]
 8009642:	f002 f8dd 	bl	800b800 <_Balloc>
 8009646:	9007      	str	r0, [sp, #28]
 8009648:	2800      	cmp	r0, #0
 800964a:	f43f af11 	beq.w	8009470 <_strtod_l+0x498>
 800964e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	3202      	adds	r2, #2
 8009654:	f103 010c 	add.w	r1, r3, #12
 8009658:	0092      	lsls	r2, r2, #2
 800965a:	300c      	adds	r0, #12
 800965c:	f002 f8c2 	bl	800b7e4 <memcpy>
 8009660:	ec4b ab10 	vmov	d0, sl, fp
 8009664:	aa20      	add	r2, sp, #128	; 0x80
 8009666:	a91f      	add	r1, sp, #124	; 0x7c
 8009668:	4620      	mov	r0, r4
 800966a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800966e:	f002 fcaf 	bl	800bfd0 <__d2b>
 8009672:	901e      	str	r0, [sp, #120]	; 0x78
 8009674:	2800      	cmp	r0, #0
 8009676:	f43f aefb 	beq.w	8009470 <_strtod_l+0x498>
 800967a:	2101      	movs	r1, #1
 800967c:	4620      	mov	r0, r4
 800967e:	f002 fa05 	bl	800ba8c <__i2b>
 8009682:	4606      	mov	r6, r0
 8009684:	2800      	cmp	r0, #0
 8009686:	f43f aef3 	beq.w	8009470 <_strtod_l+0x498>
 800968a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800968c:	9904      	ldr	r1, [sp, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	bfab      	itete	ge
 8009692:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009694:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009696:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009698:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800969c:	bfac      	ite	ge
 800969e:	eb03 0902 	addge.w	r9, r3, r2
 80096a2:	1ad7      	sublt	r7, r2, r3
 80096a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096a6:	eba3 0801 	sub.w	r8, r3, r1
 80096aa:	4490      	add	r8, r2
 80096ac:	4ba3      	ldr	r3, [pc, #652]	; (800993c <_strtod_l+0x964>)
 80096ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80096b2:	4598      	cmp	r8, r3
 80096b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80096b8:	f280 80cc 	bge.w	8009854 <_strtod_l+0x87c>
 80096bc:	eba3 0308 	sub.w	r3, r3, r8
 80096c0:	2b1f      	cmp	r3, #31
 80096c2:	eba2 0203 	sub.w	r2, r2, r3
 80096c6:	f04f 0101 	mov.w	r1, #1
 80096ca:	f300 80b6 	bgt.w	800983a <_strtod_l+0x862>
 80096ce:	fa01 f303 	lsl.w	r3, r1, r3
 80096d2:	9311      	str	r3, [sp, #68]	; 0x44
 80096d4:	2300      	movs	r3, #0
 80096d6:	930c      	str	r3, [sp, #48]	; 0x30
 80096d8:	eb09 0802 	add.w	r8, r9, r2
 80096dc:	9b04      	ldr	r3, [sp, #16]
 80096de:	45c1      	cmp	r9, r8
 80096e0:	4417      	add	r7, r2
 80096e2:	441f      	add	r7, r3
 80096e4:	464b      	mov	r3, r9
 80096e6:	bfa8      	it	ge
 80096e8:	4643      	movge	r3, r8
 80096ea:	42bb      	cmp	r3, r7
 80096ec:	bfa8      	it	ge
 80096ee:	463b      	movge	r3, r7
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bfc2      	ittt	gt
 80096f4:	eba8 0803 	subgt.w	r8, r8, r3
 80096f8:	1aff      	subgt	r7, r7, r3
 80096fa:	eba9 0903 	subgt.w	r9, r9, r3
 80096fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009700:	2b00      	cmp	r3, #0
 8009702:	dd17      	ble.n	8009734 <_strtod_l+0x75c>
 8009704:	4631      	mov	r1, r6
 8009706:	461a      	mov	r2, r3
 8009708:	4620      	mov	r0, r4
 800970a:	f002 fa7b 	bl	800bc04 <__pow5mult>
 800970e:	4606      	mov	r6, r0
 8009710:	2800      	cmp	r0, #0
 8009712:	f43f aead 	beq.w	8009470 <_strtod_l+0x498>
 8009716:	4601      	mov	r1, r0
 8009718:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800971a:	4620      	mov	r0, r4
 800971c:	f002 f9cc 	bl	800bab8 <__multiply>
 8009720:	900f      	str	r0, [sp, #60]	; 0x3c
 8009722:	2800      	cmp	r0, #0
 8009724:	f43f aea4 	beq.w	8009470 <_strtod_l+0x498>
 8009728:	991e      	ldr	r1, [sp, #120]	; 0x78
 800972a:	4620      	mov	r0, r4
 800972c:	f002 f8a8 	bl	800b880 <_Bfree>
 8009730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009732:	931e      	str	r3, [sp, #120]	; 0x78
 8009734:	f1b8 0f00 	cmp.w	r8, #0
 8009738:	f300 8091 	bgt.w	800985e <_strtod_l+0x886>
 800973c:	9b08      	ldr	r3, [sp, #32]
 800973e:	2b00      	cmp	r3, #0
 8009740:	dd08      	ble.n	8009754 <_strtod_l+0x77c>
 8009742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009744:	9907      	ldr	r1, [sp, #28]
 8009746:	4620      	mov	r0, r4
 8009748:	f002 fa5c 	bl	800bc04 <__pow5mult>
 800974c:	9007      	str	r0, [sp, #28]
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f ae8e 	beq.w	8009470 <_strtod_l+0x498>
 8009754:	2f00      	cmp	r7, #0
 8009756:	dd08      	ble.n	800976a <_strtod_l+0x792>
 8009758:	9907      	ldr	r1, [sp, #28]
 800975a:	463a      	mov	r2, r7
 800975c:	4620      	mov	r0, r4
 800975e:	f002 faab 	bl	800bcb8 <__lshift>
 8009762:	9007      	str	r0, [sp, #28]
 8009764:	2800      	cmp	r0, #0
 8009766:	f43f ae83 	beq.w	8009470 <_strtod_l+0x498>
 800976a:	f1b9 0f00 	cmp.w	r9, #0
 800976e:	dd08      	ble.n	8009782 <_strtod_l+0x7aa>
 8009770:	4631      	mov	r1, r6
 8009772:	464a      	mov	r2, r9
 8009774:	4620      	mov	r0, r4
 8009776:	f002 fa9f 	bl	800bcb8 <__lshift>
 800977a:	4606      	mov	r6, r0
 800977c:	2800      	cmp	r0, #0
 800977e:	f43f ae77 	beq.w	8009470 <_strtod_l+0x498>
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009786:	4620      	mov	r0, r4
 8009788:	f002 fb1e 	bl	800bdc8 <__mdiff>
 800978c:	4605      	mov	r5, r0
 800978e:	2800      	cmp	r0, #0
 8009790:	f43f ae6e 	beq.w	8009470 <_strtod_l+0x498>
 8009794:	68c3      	ldr	r3, [r0, #12]
 8009796:	930f      	str	r3, [sp, #60]	; 0x3c
 8009798:	2300      	movs	r3, #0
 800979a:	60c3      	str	r3, [r0, #12]
 800979c:	4631      	mov	r1, r6
 800979e:	f002 faf7 	bl	800bd90 <__mcmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	da65      	bge.n	8009872 <_strtod_l+0x89a>
 80097a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097a8:	ea53 030a 	orrs.w	r3, r3, sl
 80097ac:	f040 8087 	bne.w	80098be <_strtod_l+0x8e6>
 80097b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f040 8082 	bne.w	80098be <_strtod_l+0x8e6>
 80097ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097be:	0d1b      	lsrs	r3, r3, #20
 80097c0:	051b      	lsls	r3, r3, #20
 80097c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80097c6:	d97a      	bls.n	80098be <_strtod_l+0x8e6>
 80097c8:	696b      	ldr	r3, [r5, #20]
 80097ca:	b913      	cbnz	r3, 80097d2 <_strtod_l+0x7fa>
 80097cc:	692b      	ldr	r3, [r5, #16]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	dd75      	ble.n	80098be <_strtod_l+0x8e6>
 80097d2:	4629      	mov	r1, r5
 80097d4:	2201      	movs	r2, #1
 80097d6:	4620      	mov	r0, r4
 80097d8:	f002 fa6e 	bl	800bcb8 <__lshift>
 80097dc:	4631      	mov	r1, r6
 80097de:	4605      	mov	r5, r0
 80097e0:	f002 fad6 	bl	800bd90 <__mcmp>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	dd6a      	ble.n	80098be <_strtod_l+0x8e6>
 80097e8:	9904      	ldr	r1, [sp, #16]
 80097ea:	4a55      	ldr	r2, [pc, #340]	; (8009940 <_strtod_l+0x968>)
 80097ec:	465b      	mov	r3, fp
 80097ee:	2900      	cmp	r1, #0
 80097f0:	f000 8085 	beq.w	80098fe <_strtod_l+0x926>
 80097f4:	ea02 010b 	and.w	r1, r2, fp
 80097f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097fc:	dc7f      	bgt.n	80098fe <_strtod_l+0x926>
 80097fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009802:	f77f aeaa 	ble.w	800955a <_strtod_l+0x582>
 8009806:	4a4f      	ldr	r2, [pc, #316]	; (8009944 <_strtod_l+0x96c>)
 8009808:	2300      	movs	r3, #0
 800980a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800980e:	4650      	mov	r0, sl
 8009810:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009814:	4659      	mov	r1, fp
 8009816:	f7f6 ff27 	bl	8000668 <__aeabi_dmul>
 800981a:	460b      	mov	r3, r1
 800981c:	4303      	orrs	r3, r0
 800981e:	bf08      	it	eq
 8009820:	2322      	moveq	r3, #34	; 0x22
 8009822:	4682      	mov	sl, r0
 8009824:	468b      	mov	fp, r1
 8009826:	bf08      	it	eq
 8009828:	6023      	streq	r3, [r4, #0]
 800982a:	e62b      	b.n	8009484 <_strtod_l+0x4ac>
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	ea03 0a0a 	and.w	sl, r3, sl
 8009838:	e6de      	b.n	80095f8 <_strtod_l+0x620>
 800983a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800983e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009842:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009846:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800984a:	fa01 f308 	lsl.w	r3, r1, r8
 800984e:	930c      	str	r3, [sp, #48]	; 0x30
 8009850:	9111      	str	r1, [sp, #68]	; 0x44
 8009852:	e741      	b.n	80096d8 <_strtod_l+0x700>
 8009854:	2300      	movs	r3, #0
 8009856:	930c      	str	r3, [sp, #48]	; 0x30
 8009858:	2301      	movs	r3, #1
 800985a:	9311      	str	r3, [sp, #68]	; 0x44
 800985c:	e73c      	b.n	80096d8 <_strtod_l+0x700>
 800985e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009860:	4642      	mov	r2, r8
 8009862:	4620      	mov	r0, r4
 8009864:	f002 fa28 	bl	800bcb8 <__lshift>
 8009868:	901e      	str	r0, [sp, #120]	; 0x78
 800986a:	2800      	cmp	r0, #0
 800986c:	f47f af66 	bne.w	800973c <_strtod_l+0x764>
 8009870:	e5fe      	b.n	8009470 <_strtod_l+0x498>
 8009872:	465f      	mov	r7, fp
 8009874:	d16e      	bne.n	8009954 <_strtod_l+0x97c>
 8009876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009878:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800987c:	b342      	cbz	r2, 80098d0 <_strtod_l+0x8f8>
 800987e:	4a32      	ldr	r2, [pc, #200]	; (8009948 <_strtod_l+0x970>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d128      	bne.n	80098d6 <_strtod_l+0x8fe>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	4650      	mov	r0, sl
 8009888:	b1eb      	cbz	r3, 80098c6 <_strtod_l+0x8ee>
 800988a:	4a2d      	ldr	r2, [pc, #180]	; (8009940 <_strtod_l+0x968>)
 800988c:	403a      	ands	r2, r7
 800988e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009892:	f04f 31ff 	mov.w	r1, #4294967295
 8009896:	d819      	bhi.n	80098cc <_strtod_l+0x8f4>
 8009898:	0d12      	lsrs	r2, r2, #20
 800989a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	4298      	cmp	r0, r3
 80098a4:	d117      	bne.n	80098d6 <_strtod_l+0x8fe>
 80098a6:	4b29      	ldr	r3, [pc, #164]	; (800994c <_strtod_l+0x974>)
 80098a8:	429f      	cmp	r7, r3
 80098aa:	d102      	bne.n	80098b2 <_strtod_l+0x8da>
 80098ac:	3001      	adds	r0, #1
 80098ae:	f43f addf 	beq.w	8009470 <_strtod_l+0x498>
 80098b2:	4b23      	ldr	r3, [pc, #140]	; (8009940 <_strtod_l+0x968>)
 80098b4:	403b      	ands	r3, r7
 80098b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80098ba:	f04f 0a00 	mov.w	sl, #0
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1a0      	bne.n	8009806 <_strtod_l+0x82e>
 80098c4:	e5de      	b.n	8009484 <_strtod_l+0x4ac>
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ca:	e7ea      	b.n	80098a2 <_strtod_l+0x8ca>
 80098cc:	460b      	mov	r3, r1
 80098ce:	e7e8      	b.n	80098a2 <_strtod_l+0x8ca>
 80098d0:	ea53 030a 	orrs.w	r3, r3, sl
 80098d4:	d088      	beq.n	80097e8 <_strtod_l+0x810>
 80098d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d8:	b1db      	cbz	r3, 8009912 <_strtod_l+0x93a>
 80098da:	423b      	tst	r3, r7
 80098dc:	d0ef      	beq.n	80098be <_strtod_l+0x8e6>
 80098de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e0:	9a04      	ldr	r2, [sp, #16]
 80098e2:	4650      	mov	r0, sl
 80098e4:	4659      	mov	r1, fp
 80098e6:	b1c3      	cbz	r3, 800991a <_strtod_l+0x942>
 80098e8:	f7ff fb5a 	bl	8008fa0 <sulp>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098f4:	f7f6 fd02 	bl	80002fc <__adddf3>
 80098f8:	4682      	mov	sl, r0
 80098fa:	468b      	mov	fp, r1
 80098fc:	e7df      	b.n	80098be <_strtod_l+0x8e6>
 80098fe:	4013      	ands	r3, r2
 8009900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009904:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009908:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800990c:	f04f 3aff 	mov.w	sl, #4294967295
 8009910:	e7d5      	b.n	80098be <_strtod_l+0x8e6>
 8009912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009914:	ea13 0f0a 	tst.w	r3, sl
 8009918:	e7e0      	b.n	80098dc <_strtod_l+0x904>
 800991a:	f7ff fb41 	bl	8008fa0 <sulp>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009926:	f7f6 fce7 	bl	80002f8 <__aeabi_dsub>
 800992a:	2200      	movs	r2, #0
 800992c:	2300      	movs	r3, #0
 800992e:	4682      	mov	sl, r0
 8009930:	468b      	mov	fp, r1
 8009932:	f7f7 f901 	bl	8000b38 <__aeabi_dcmpeq>
 8009936:	2800      	cmp	r0, #0
 8009938:	d0c1      	beq.n	80098be <_strtod_l+0x8e6>
 800993a:	e60e      	b.n	800955a <_strtod_l+0x582>
 800993c:	fffffc02 	.word	0xfffffc02
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	39500000 	.word	0x39500000
 8009948:	000fffff 	.word	0x000fffff
 800994c:	7fefffff 	.word	0x7fefffff
 8009950:	0800ea08 	.word	0x0800ea08
 8009954:	4631      	mov	r1, r6
 8009956:	4628      	mov	r0, r5
 8009958:	f002 fb96 	bl	800c088 <__ratio>
 800995c:	ec59 8b10 	vmov	r8, r9, d0
 8009960:	ee10 0a10 	vmov	r0, s0
 8009964:	2200      	movs	r2, #0
 8009966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800996a:	4649      	mov	r1, r9
 800996c:	f7f7 f8f8 	bl	8000b60 <__aeabi_dcmple>
 8009970:	2800      	cmp	r0, #0
 8009972:	d07c      	beq.n	8009a6e <_strtod_l+0xa96>
 8009974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d04c      	beq.n	8009a14 <_strtod_l+0xa3c>
 800997a:	4b95      	ldr	r3, [pc, #596]	; (8009bd0 <_strtod_l+0xbf8>)
 800997c:	2200      	movs	r2, #0
 800997e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009982:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009bd0 <_strtod_l+0xbf8>
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	4b92      	ldr	r3, [pc, #584]	; (8009bd4 <_strtod_l+0xbfc>)
 800998c:	403b      	ands	r3, r7
 800998e:	9311      	str	r3, [sp, #68]	; 0x44
 8009990:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009992:	4b91      	ldr	r3, [pc, #580]	; (8009bd8 <_strtod_l+0xc00>)
 8009994:	429a      	cmp	r2, r3
 8009996:	f040 80b2 	bne.w	8009afe <_strtod_l+0xb26>
 800999a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800999e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80099a6:	ec4b ab10 	vmov	d0, sl, fp
 80099aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80099ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099b2:	f002 fa91 	bl	800bed8 <__ulp>
 80099b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099ba:	ec53 2b10 	vmov	r2, r3, d0
 80099be:	f7f6 fe53 	bl	8000668 <__aeabi_dmul>
 80099c2:	4652      	mov	r2, sl
 80099c4:	465b      	mov	r3, fp
 80099c6:	f7f6 fc99 	bl	80002fc <__adddf3>
 80099ca:	460b      	mov	r3, r1
 80099cc:	4981      	ldr	r1, [pc, #516]	; (8009bd4 <_strtod_l+0xbfc>)
 80099ce:	4a83      	ldr	r2, [pc, #524]	; (8009bdc <_strtod_l+0xc04>)
 80099d0:	4019      	ands	r1, r3
 80099d2:	4291      	cmp	r1, r2
 80099d4:	4682      	mov	sl, r0
 80099d6:	d95e      	bls.n	8009a96 <_strtod_l+0xabe>
 80099d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80099de:	4293      	cmp	r3, r2
 80099e0:	d103      	bne.n	80099ea <_strtod_l+0xa12>
 80099e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e4:	3301      	adds	r3, #1
 80099e6:	f43f ad43 	beq.w	8009470 <_strtod_l+0x498>
 80099ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009be8 <_strtod_l+0xc10>
 80099ee:	f04f 3aff 	mov.w	sl, #4294967295
 80099f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099f4:	4620      	mov	r0, r4
 80099f6:	f001 ff43 	bl	800b880 <_Bfree>
 80099fa:	9907      	ldr	r1, [sp, #28]
 80099fc:	4620      	mov	r0, r4
 80099fe:	f001 ff3f 	bl	800b880 <_Bfree>
 8009a02:	4631      	mov	r1, r6
 8009a04:	4620      	mov	r0, r4
 8009a06:	f001 ff3b 	bl	800b880 <_Bfree>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f001 ff37 	bl	800b880 <_Bfree>
 8009a12:	e613      	b.n	800963c <_strtod_l+0x664>
 8009a14:	f1ba 0f00 	cmp.w	sl, #0
 8009a18:	d11b      	bne.n	8009a52 <_strtod_l+0xa7a>
 8009a1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a1e:	b9f3      	cbnz	r3, 8009a5e <_strtod_l+0xa86>
 8009a20:	4b6b      	ldr	r3, [pc, #428]	; (8009bd0 <_strtod_l+0xbf8>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	4640      	mov	r0, r8
 8009a26:	4649      	mov	r1, r9
 8009a28:	f7f7 f890 	bl	8000b4c <__aeabi_dcmplt>
 8009a2c:	b9d0      	cbnz	r0, 8009a64 <_strtod_l+0xa8c>
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	4b6b      	ldr	r3, [pc, #428]	; (8009be0 <_strtod_l+0xc08>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	f7f6 fe17 	bl	8000668 <__aeabi_dmul>
 8009a3a:	4680      	mov	r8, r0
 8009a3c:	4689      	mov	r9, r1
 8009a3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009a46:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009a4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009a50:	e79b      	b.n	800998a <_strtod_l+0x9b2>
 8009a52:	f1ba 0f01 	cmp.w	sl, #1
 8009a56:	d102      	bne.n	8009a5e <_strtod_l+0xa86>
 8009a58:	2f00      	cmp	r7, #0
 8009a5a:	f43f ad7e 	beq.w	800955a <_strtod_l+0x582>
 8009a5e:	4b61      	ldr	r3, [pc, #388]	; (8009be4 <_strtod_l+0xc0c>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	e78c      	b.n	800997e <_strtod_l+0x9a6>
 8009a64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009be0 <_strtod_l+0xc08>
 8009a68:	f04f 0800 	mov.w	r8, #0
 8009a6c:	e7e7      	b.n	8009a3e <_strtod_l+0xa66>
 8009a6e:	4b5c      	ldr	r3, [pc, #368]	; (8009be0 <_strtod_l+0xc08>)
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	2200      	movs	r2, #0
 8009a76:	f7f6 fdf7 	bl	8000668 <__aeabi_dmul>
 8009a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	b933      	cbnz	r3, 8009a90 <_strtod_l+0xab8>
 8009a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a86:	9012      	str	r0, [sp, #72]	; 0x48
 8009a88:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009a8e:	e7dd      	b.n	8009a4c <_strtod_l+0xa74>
 8009a90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009a94:	e7f9      	b.n	8009a8a <_strtod_l+0xab2>
 8009a96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1a8      	bne.n	80099f2 <_strtod_l+0xa1a>
 8009aa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009aa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009aa6:	0d1b      	lsrs	r3, r3, #20
 8009aa8:	051b      	lsls	r3, r3, #20
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d1a1      	bne.n	80099f2 <_strtod_l+0xa1a>
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f7 f989 	bl	8000dc8 <__aeabi_d2lz>
 8009ab6:	f7f6 fda9 	bl	800060c <__aeabi_l2d>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fc19 	bl	80002f8 <__aeabi_dsub>
 8009ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009acc:	ea43 030a 	orr.w	r3, r3, sl
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	d053      	beq.n	8009b80 <_strtod_l+0xba8>
 8009ad8:	a335      	add	r3, pc, #212	; (adr r3, 8009bb0 <_strtod_l+0xbd8>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f7 f835 	bl	8000b4c <__aeabi_dcmplt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f47f acce 	bne.w	8009484 <_strtod_l+0x4ac>
 8009ae8:	a333      	add	r3, pc, #204	; (adr r3, 8009bb8 <_strtod_l+0xbe0>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	4640      	mov	r0, r8
 8009af0:	4649      	mov	r1, r9
 8009af2:	f7f7 f849 	bl	8000b88 <__aeabi_dcmpgt>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f43f af7b 	beq.w	80099f2 <_strtod_l+0xa1a>
 8009afc:	e4c2      	b.n	8009484 <_strtod_l+0x4ac>
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	b333      	cbz	r3, 8009b50 <_strtod_l+0xb78>
 8009b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b08:	d822      	bhi.n	8009b50 <_strtod_l+0xb78>
 8009b0a:	a32d      	add	r3, pc, #180	; (adr r3, 8009bc0 <_strtod_l+0xbe8>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f7 f824 	bl	8000b60 <__aeabi_dcmple>
 8009b18:	b1a0      	cbz	r0, 8009b44 <_strtod_l+0xb6c>
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	f7f7 f87b 	bl	8000c18 <__aeabi_d2uiz>
 8009b22:	2801      	cmp	r0, #1
 8009b24:	bf38      	it	cc
 8009b26:	2001      	movcc	r0, #1
 8009b28:	f7f6 fd24 	bl	8000574 <__aeabi_ui2d>
 8009b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b2e:	4680      	mov	r8, r0
 8009b30:	4689      	mov	r9, r1
 8009b32:	bb13      	cbnz	r3, 8009b7a <_strtod_l+0xba2>
 8009b34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b38:	9014      	str	r0, [sp, #80]	; 0x50
 8009b3a:	9315      	str	r3, [sp, #84]	; 0x54
 8009b3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b54:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b5c:	f002 f9bc 	bl	800bed8 <__ulp>
 8009b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b64:	ec53 2b10 	vmov	r2, r3, d0
 8009b68:	f7f6 fd7e 	bl	8000668 <__aeabi_dmul>
 8009b6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b70:	f7f6 fbc4 	bl	80002fc <__adddf3>
 8009b74:	4682      	mov	sl, r0
 8009b76:	468b      	mov	fp, r1
 8009b78:	e78f      	b.n	8009a9a <_strtod_l+0xac2>
 8009b7a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009b7e:	e7dd      	b.n	8009b3c <_strtod_l+0xb64>
 8009b80:	a311      	add	r3, pc, #68	; (adr r3, 8009bc8 <_strtod_l+0xbf0>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 ffe1 	bl	8000b4c <__aeabi_dcmplt>
 8009b8a:	e7b4      	b.n	8009af6 <_strtod_l+0xb1e>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8009b90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	f7ff ba65 	b.w	8009064 <_strtod_l+0x8c>
 8009b9a:	2b65      	cmp	r3, #101	; 0x65
 8009b9c:	f43f ab5d 	beq.w	800925a <_strtod_l+0x282>
 8009ba0:	2b45      	cmp	r3, #69	; 0x45
 8009ba2:	f43f ab5a 	beq.w	800925a <_strtod_l+0x282>
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f7ff bb92 	b.w	80092d0 <_strtod_l+0x2f8>
 8009bac:	f3af 8000 	nop.w
 8009bb0:	94a03595 	.word	0x94a03595
 8009bb4:	3fdfffff 	.word	0x3fdfffff
 8009bb8:	35afe535 	.word	0x35afe535
 8009bbc:	3fe00000 	.word	0x3fe00000
 8009bc0:	ffc00000 	.word	0xffc00000
 8009bc4:	41dfffff 	.word	0x41dfffff
 8009bc8:	94a03595 	.word	0x94a03595
 8009bcc:	3fcfffff 	.word	0x3fcfffff
 8009bd0:	3ff00000 	.word	0x3ff00000
 8009bd4:	7ff00000 	.word	0x7ff00000
 8009bd8:	7fe00000 	.word	0x7fe00000
 8009bdc:	7c9fffff 	.word	0x7c9fffff
 8009be0:	3fe00000 	.word	0x3fe00000
 8009be4:	bff00000 	.word	0xbff00000
 8009be8:	7fefffff 	.word	0x7fefffff

08009bec <_strtod_r>:
 8009bec:	4b01      	ldr	r3, [pc, #4]	; (8009bf4 <_strtod_r+0x8>)
 8009bee:	f7ff b9f3 	b.w	8008fd8 <_strtod_l>
 8009bf2:	bf00      	nop
 8009bf4:	20000074 	.word	0x20000074

08009bf8 <strtok>:
 8009bf8:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <strtok+0x5c>)
 8009bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bfc:	681e      	ldr	r6, [r3, #0]
 8009bfe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009c00:	4605      	mov	r5, r0
 8009c02:	b9fc      	cbnz	r4, 8009c44 <strtok+0x4c>
 8009c04:	2050      	movs	r0, #80	; 0x50
 8009c06:	9101      	str	r1, [sp, #4]
 8009c08:	f001 fdd2 	bl	800b7b0 <malloc>
 8009c0c:	9901      	ldr	r1, [sp, #4]
 8009c0e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009c10:	4602      	mov	r2, r0
 8009c12:	b920      	cbnz	r0, 8009c1e <strtok+0x26>
 8009c14:	4b10      	ldr	r3, [pc, #64]	; (8009c58 <strtok+0x60>)
 8009c16:	4811      	ldr	r0, [pc, #68]	; (8009c5c <strtok+0x64>)
 8009c18:	2157      	movs	r1, #87	; 0x57
 8009c1a:	f000 f98f 	bl	8009f3c <__assert_func>
 8009c1e:	e9c0 4400 	strd	r4, r4, [r0]
 8009c22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009c26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009c2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009c2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009c32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009c36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009c3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009c3e:	6184      	str	r4, [r0, #24]
 8009c40:	7704      	strb	r4, [r0, #28]
 8009c42:	6244      	str	r4, [r0, #36]	; 0x24
 8009c44:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009c46:	2301      	movs	r3, #1
 8009c48:	4628      	mov	r0, r5
 8009c4a:	b002      	add	sp, #8
 8009c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c50:	f000 b806 	b.w	8009c60 <__strtok_r>
 8009c54:	2000000c 	.word	0x2000000c
 8009c58:	0800ea30 	.word	0x0800ea30
 8009c5c:	0800ea47 	.word	0x0800ea47

08009c60 <__strtok_r>:
 8009c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c62:	b908      	cbnz	r0, 8009c68 <__strtok_r+0x8>
 8009c64:	6810      	ldr	r0, [r2, #0]
 8009c66:	b188      	cbz	r0, 8009c8c <__strtok_r+0x2c>
 8009c68:	4604      	mov	r4, r0
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c70:	460f      	mov	r7, r1
 8009c72:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c76:	b91e      	cbnz	r6, 8009c80 <__strtok_r+0x20>
 8009c78:	b965      	cbnz	r5, 8009c94 <__strtok_r+0x34>
 8009c7a:	6015      	str	r5, [r2, #0]
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	e005      	b.n	8009c8c <__strtok_r+0x2c>
 8009c80:	42b5      	cmp	r5, r6
 8009c82:	d1f6      	bne.n	8009c72 <__strtok_r+0x12>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1f0      	bne.n	8009c6a <__strtok_r+0xa>
 8009c88:	6014      	str	r4, [r2, #0]
 8009c8a:	7003      	strb	r3, [r0, #0]
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8e:	461c      	mov	r4, r3
 8009c90:	e00c      	b.n	8009cac <__strtok_r+0x4c>
 8009c92:	b915      	cbnz	r5, 8009c9a <__strtok_r+0x3a>
 8009c94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c98:	460e      	mov	r6, r1
 8009c9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c9e:	42ab      	cmp	r3, r5
 8009ca0:	d1f7      	bne.n	8009c92 <__strtok_r+0x32>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f3      	beq.n	8009c8e <__strtok_r+0x2e>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	e7ed      	b.n	8009c8c <__strtok_r+0x2c>

08009cb0 <_strtol_l.isra.0>:
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb6:	d001      	beq.n	8009cbc <_strtol_l.isra.0+0xc>
 8009cb8:	2b24      	cmp	r3, #36	; 0x24
 8009cba:	d906      	bls.n	8009cca <_strtol_l.isra.0+0x1a>
 8009cbc:	f7fe f9c8 	bl	8008050 <__errno>
 8009cc0:	2316      	movs	r3, #22
 8009cc2:	6003      	str	r3, [r0, #0]
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cca:	4f3a      	ldr	r7, [pc, #232]	; (8009db4 <_strtol_l.isra.0+0x104>)
 8009ccc:	468e      	mov	lr, r1
 8009cce:	4676      	mov	r6, lr
 8009cd0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009cd4:	5de5      	ldrb	r5, [r4, r7]
 8009cd6:	f015 0508 	ands.w	r5, r5, #8
 8009cda:	d1f8      	bne.n	8009cce <_strtol_l.isra.0+0x1e>
 8009cdc:	2c2d      	cmp	r4, #45	; 0x2d
 8009cde:	d134      	bne.n	8009d4a <_strtol_l.isra.0+0x9a>
 8009ce0:	f89e 4000 	ldrb.w	r4, [lr]
 8009ce4:	f04f 0801 	mov.w	r8, #1
 8009ce8:	f106 0e02 	add.w	lr, r6, #2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05c      	beq.n	8009daa <_strtol_l.isra.0+0xfa>
 8009cf0:	2b10      	cmp	r3, #16
 8009cf2:	d10c      	bne.n	8009d0e <_strtol_l.isra.0+0x5e>
 8009cf4:	2c30      	cmp	r4, #48	; 0x30
 8009cf6:	d10a      	bne.n	8009d0e <_strtol_l.isra.0+0x5e>
 8009cf8:	f89e 4000 	ldrb.w	r4, [lr]
 8009cfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009d00:	2c58      	cmp	r4, #88	; 0x58
 8009d02:	d14d      	bne.n	8009da0 <_strtol_l.isra.0+0xf0>
 8009d04:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009d08:	2310      	movs	r3, #16
 8009d0a:	f10e 0e02 	add.w	lr, lr, #2
 8009d0e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009d12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d16:	2600      	movs	r6, #0
 8009d18:	fbbc f9f3 	udiv	r9, ip, r3
 8009d1c:	4635      	mov	r5, r6
 8009d1e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009d26:	2f09      	cmp	r7, #9
 8009d28:	d818      	bhi.n	8009d5c <_strtol_l.isra.0+0xac>
 8009d2a:	463c      	mov	r4, r7
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	dd24      	ble.n	8009d7a <_strtol_l.isra.0+0xca>
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	db1f      	blt.n	8009d74 <_strtol_l.isra.0+0xc4>
 8009d34:	45a9      	cmp	r9, r5
 8009d36:	d31d      	bcc.n	8009d74 <_strtol_l.isra.0+0xc4>
 8009d38:	d101      	bne.n	8009d3e <_strtol_l.isra.0+0x8e>
 8009d3a:	45a2      	cmp	sl, r4
 8009d3c:	db1a      	blt.n	8009d74 <_strtol_l.isra.0+0xc4>
 8009d3e:	fb05 4503 	mla	r5, r5, r3, r4
 8009d42:	2601      	movs	r6, #1
 8009d44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009d48:	e7eb      	b.n	8009d22 <_strtol_l.isra.0+0x72>
 8009d4a:	2c2b      	cmp	r4, #43	; 0x2b
 8009d4c:	bf08      	it	eq
 8009d4e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009d52:	46a8      	mov	r8, r5
 8009d54:	bf08      	it	eq
 8009d56:	f106 0e02 	addeq.w	lr, r6, #2
 8009d5a:	e7c7      	b.n	8009cec <_strtol_l.isra.0+0x3c>
 8009d5c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009d60:	2f19      	cmp	r7, #25
 8009d62:	d801      	bhi.n	8009d68 <_strtol_l.isra.0+0xb8>
 8009d64:	3c37      	subs	r4, #55	; 0x37
 8009d66:	e7e1      	b.n	8009d2c <_strtol_l.isra.0+0x7c>
 8009d68:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009d6c:	2f19      	cmp	r7, #25
 8009d6e:	d804      	bhi.n	8009d7a <_strtol_l.isra.0+0xca>
 8009d70:	3c57      	subs	r4, #87	; 0x57
 8009d72:	e7db      	b.n	8009d2c <_strtol_l.isra.0+0x7c>
 8009d74:	f04f 36ff 	mov.w	r6, #4294967295
 8009d78:	e7e4      	b.n	8009d44 <_strtol_l.isra.0+0x94>
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	da05      	bge.n	8009d8a <_strtol_l.isra.0+0xda>
 8009d7e:	2322      	movs	r3, #34	; 0x22
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	4665      	mov	r5, ip
 8009d84:	b942      	cbnz	r2, 8009d98 <_strtol_l.isra.0+0xe8>
 8009d86:	4628      	mov	r0, r5
 8009d88:	e79d      	b.n	8009cc6 <_strtol_l.isra.0+0x16>
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	d000      	beq.n	8009d92 <_strtol_l.isra.0+0xe2>
 8009d90:	426d      	negs	r5, r5
 8009d92:	2a00      	cmp	r2, #0
 8009d94:	d0f7      	beq.n	8009d86 <_strtol_l.isra.0+0xd6>
 8009d96:	b10e      	cbz	r6, 8009d9c <_strtol_l.isra.0+0xec>
 8009d98:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009d9c:	6011      	str	r1, [r2, #0]
 8009d9e:	e7f2      	b.n	8009d86 <_strtol_l.isra.0+0xd6>
 8009da0:	2430      	movs	r4, #48	; 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1b3      	bne.n	8009d0e <_strtol_l.isra.0+0x5e>
 8009da6:	2308      	movs	r3, #8
 8009da8:	e7b1      	b.n	8009d0e <_strtol_l.isra.0+0x5e>
 8009daa:	2c30      	cmp	r4, #48	; 0x30
 8009dac:	d0a4      	beq.n	8009cf8 <_strtol_l.isra.0+0x48>
 8009dae:	230a      	movs	r3, #10
 8009db0:	e7ad      	b.n	8009d0e <_strtol_l.isra.0+0x5e>
 8009db2:	bf00      	nop
 8009db4:	0800eae5 	.word	0x0800eae5

08009db8 <_strtol_r>:
 8009db8:	f7ff bf7a 	b.w	8009cb0 <_strtol_l.isra.0>

08009dbc <__swbuf_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	b118      	cbz	r0, 8009dce <__swbuf_r+0x12>
 8009dc6:	6983      	ldr	r3, [r0, #24]
 8009dc8:	b90b      	cbnz	r3, 8009dce <__swbuf_r+0x12>
 8009dca:	f001 f867 	bl	800ae9c <__sinit>
 8009dce:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <__swbuf_r+0x98>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d12b      	bne.n	8009e2c <__swbuf_r+0x70>
 8009dd4:	686c      	ldr	r4, [r5, #4]
 8009dd6:	69a3      	ldr	r3, [r4, #24]
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	071a      	lsls	r2, r3, #28
 8009dde:	d52f      	bpl.n	8009e40 <__swbuf_r+0x84>
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	b36b      	cbz	r3, 8009e40 <__swbuf_r+0x84>
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	6820      	ldr	r0, [r4, #0]
 8009de8:	1ac0      	subs	r0, r0, r3
 8009dea:	6963      	ldr	r3, [r4, #20]
 8009dec:	b2f6      	uxtb	r6, r6
 8009dee:	4283      	cmp	r3, r0
 8009df0:	4637      	mov	r7, r6
 8009df2:	dc04      	bgt.n	8009dfe <__swbuf_r+0x42>
 8009df4:	4621      	mov	r1, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 ffbc 	bl	800ad74 <_fflush_r>
 8009dfc:	bb30      	cbnz	r0, 8009e4c <__swbuf_r+0x90>
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	6022      	str	r2, [r4, #0]
 8009e0a:	701e      	strb	r6, [r3, #0]
 8009e0c:	6963      	ldr	r3, [r4, #20]
 8009e0e:	3001      	adds	r0, #1
 8009e10:	4283      	cmp	r3, r0
 8009e12:	d004      	beq.n	8009e1e <__swbuf_r+0x62>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	07db      	lsls	r3, r3, #31
 8009e18:	d506      	bpl.n	8009e28 <__swbuf_r+0x6c>
 8009e1a:	2e0a      	cmp	r6, #10
 8009e1c:	d104      	bne.n	8009e28 <__swbuf_r+0x6c>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	f000 ffa7 	bl	800ad74 <_fflush_r>
 8009e26:	b988      	cbnz	r0, 8009e4c <__swbuf_r+0x90>
 8009e28:	4638      	mov	r0, r7
 8009e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <__swbuf_r+0x9c>)
 8009e2e:	429c      	cmp	r4, r3
 8009e30:	d101      	bne.n	8009e36 <__swbuf_r+0x7a>
 8009e32:	68ac      	ldr	r4, [r5, #8]
 8009e34:	e7cf      	b.n	8009dd6 <__swbuf_r+0x1a>
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <__swbuf_r+0xa0>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	bf08      	it	eq
 8009e3c:	68ec      	ldreq	r4, [r5, #12]
 8009e3e:	e7ca      	b.n	8009dd6 <__swbuf_r+0x1a>
 8009e40:	4621      	mov	r1, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 f80c 	bl	8009e60 <__swsetup_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d0cb      	beq.n	8009de4 <__swbuf_r+0x28>
 8009e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e50:	e7ea      	b.n	8009e28 <__swbuf_r+0x6c>
 8009e52:	bf00      	nop
 8009e54:	0800ec84 	.word	0x0800ec84
 8009e58:	0800eca4 	.word	0x0800eca4
 8009e5c:	0800ec64 	.word	0x0800ec64

08009e60 <__swsetup_r>:
 8009e60:	4b32      	ldr	r3, [pc, #200]	; (8009f2c <__swsetup_r+0xcc>)
 8009e62:	b570      	push	{r4, r5, r6, lr}
 8009e64:	681d      	ldr	r5, [r3, #0]
 8009e66:	4606      	mov	r6, r0
 8009e68:	460c      	mov	r4, r1
 8009e6a:	b125      	cbz	r5, 8009e76 <__swsetup_r+0x16>
 8009e6c:	69ab      	ldr	r3, [r5, #24]
 8009e6e:	b913      	cbnz	r3, 8009e76 <__swsetup_r+0x16>
 8009e70:	4628      	mov	r0, r5
 8009e72:	f001 f813 	bl	800ae9c <__sinit>
 8009e76:	4b2e      	ldr	r3, [pc, #184]	; (8009f30 <__swsetup_r+0xd0>)
 8009e78:	429c      	cmp	r4, r3
 8009e7a:	d10f      	bne.n	8009e9c <__swsetup_r+0x3c>
 8009e7c:	686c      	ldr	r4, [r5, #4]
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e84:	0719      	lsls	r1, r3, #28
 8009e86:	d42c      	bmi.n	8009ee2 <__swsetup_r+0x82>
 8009e88:	06dd      	lsls	r5, r3, #27
 8009e8a:	d411      	bmi.n	8009eb0 <__swsetup_r+0x50>
 8009e8c:	2309      	movs	r3, #9
 8009e8e:	6033      	str	r3, [r6, #0]
 8009e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	e03e      	b.n	8009f1a <__swsetup_r+0xba>
 8009e9c:	4b25      	ldr	r3, [pc, #148]	; (8009f34 <__swsetup_r+0xd4>)
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d101      	bne.n	8009ea6 <__swsetup_r+0x46>
 8009ea2:	68ac      	ldr	r4, [r5, #8]
 8009ea4:	e7eb      	b.n	8009e7e <__swsetup_r+0x1e>
 8009ea6:	4b24      	ldr	r3, [pc, #144]	; (8009f38 <__swsetup_r+0xd8>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	bf08      	it	eq
 8009eac:	68ec      	ldreq	r4, [r5, #12]
 8009eae:	e7e6      	b.n	8009e7e <__swsetup_r+0x1e>
 8009eb0:	0758      	lsls	r0, r3, #29
 8009eb2:	d512      	bpl.n	8009eda <__swsetup_r+0x7a>
 8009eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eb6:	b141      	cbz	r1, 8009eca <__swsetup_r+0x6a>
 8009eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	d002      	beq.n	8009ec6 <__swsetup_r+0x66>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f002 f967 	bl	800c194 <_free_r>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f043 0308 	orr.w	r3, r3, #8
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	6923      	ldr	r3, [r4, #16]
 8009ee4:	b94b      	cbnz	r3, 8009efa <__swsetup_r+0x9a>
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ef0:	d003      	beq.n	8009efa <__swsetup_r+0x9a>
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f001 fc1b 	bl	800b730 <__smakebuf_r>
 8009efa:	89a0      	ldrh	r0, [r4, #12]
 8009efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f00:	f010 0301 	ands.w	r3, r0, #1
 8009f04:	d00a      	beq.n	8009f1c <__swsetup_r+0xbc>
 8009f06:	2300      	movs	r3, #0
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	6963      	ldr	r3, [r4, #20]
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	61a3      	str	r3, [r4, #24]
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	b943      	cbnz	r3, 8009f26 <__swsetup_r+0xc6>
 8009f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f18:	d1ba      	bne.n	8009e90 <__swsetup_r+0x30>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	0781      	lsls	r1, r0, #30
 8009f1e:	bf58      	it	pl
 8009f20:	6963      	ldrpl	r3, [r4, #20]
 8009f22:	60a3      	str	r3, [r4, #8]
 8009f24:	e7f4      	b.n	8009f10 <__swsetup_r+0xb0>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e7f7      	b.n	8009f1a <__swsetup_r+0xba>
 8009f2a:	bf00      	nop
 8009f2c:	2000000c 	.word	0x2000000c
 8009f30:	0800ec84 	.word	0x0800ec84
 8009f34:	0800eca4 	.word	0x0800eca4
 8009f38:	0800ec64 	.word	0x0800ec64

08009f3c <__assert_func>:
 8009f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f3e:	4614      	mov	r4, r2
 8009f40:	461a      	mov	r2, r3
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <__assert_func+0x2c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4605      	mov	r5, r0
 8009f48:	68d8      	ldr	r0, [r3, #12]
 8009f4a:	b14c      	cbz	r4, 8009f60 <__assert_func+0x24>
 8009f4c:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <__assert_func+0x30>)
 8009f4e:	9100      	str	r1, [sp, #0]
 8009f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f54:	4906      	ldr	r1, [pc, #24]	; (8009f70 <__assert_func+0x34>)
 8009f56:	462b      	mov	r3, r5
 8009f58:	f001 f81e 	bl	800af98 <fiprintf>
 8009f5c:	f002 fd50 	bl	800ca00 <abort>
 8009f60:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <__assert_func+0x38>)
 8009f62:	461c      	mov	r4, r3
 8009f64:	e7f3      	b.n	8009f4e <__assert_func+0x12>
 8009f66:	bf00      	nop
 8009f68:	2000000c 	.word	0x2000000c
 8009f6c:	0800eaa8 	.word	0x0800eaa8
 8009f70:	0800eab5 	.word	0x0800eab5
 8009f74:	0800eae3 	.word	0x0800eae3

08009f78 <quorem>:
 8009f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	6903      	ldr	r3, [r0, #16]
 8009f7e:	690c      	ldr	r4, [r1, #16]
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	4607      	mov	r7, r0
 8009f84:	f2c0 8081 	blt.w	800a08a <quorem+0x112>
 8009f88:	3c01      	subs	r4, #1
 8009f8a:	f101 0814 	add.w	r8, r1, #20
 8009f8e:	f100 0514 	add.w	r5, r0, #20
 8009f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fb0:	d331      	bcc.n	800a016 <quorem+0x9e>
 8009fb2:	f04f 0e00 	mov.w	lr, #0
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	46ac      	mov	ip, r5
 8009fba:	46f2      	mov	sl, lr
 8009fbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fc0:	b293      	uxth	r3, r2
 8009fc2:	fb06 e303 	mla	r3, r6, r3, lr
 8009fc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8009fd0:	0c12      	lsrs	r2, r2, #16
 8009fd2:	f8dc a000 	ldr.w	sl, [ip]
 8009fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8009fda:	fa13 f38a 	uxtah	r3, r3, sl
 8009fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fe2:	fa1f fa82 	uxth.w	sl, r2
 8009fe6:	f8dc 2000 	ldr.w	r2, [ip]
 8009fea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009fee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff8:	4581      	cmp	r9, r0
 8009ffa:	f84c 3b04 	str.w	r3, [ip], #4
 8009ffe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a002:	d2db      	bcs.n	8009fbc <quorem+0x44>
 800a004:	f855 300b 	ldr.w	r3, [r5, fp]
 800a008:	b92b      	cbnz	r3, 800a016 <quorem+0x9e>
 800a00a:	9b01      	ldr	r3, [sp, #4]
 800a00c:	3b04      	subs	r3, #4
 800a00e:	429d      	cmp	r5, r3
 800a010:	461a      	mov	r2, r3
 800a012:	d32e      	bcc.n	800a072 <quorem+0xfa>
 800a014:	613c      	str	r4, [r7, #16]
 800a016:	4638      	mov	r0, r7
 800a018:	f001 feba 	bl	800bd90 <__mcmp>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	db24      	blt.n	800a06a <quorem+0xf2>
 800a020:	3601      	adds	r6, #1
 800a022:	4628      	mov	r0, r5
 800a024:	f04f 0c00 	mov.w	ip, #0
 800a028:	f858 2b04 	ldr.w	r2, [r8], #4
 800a02c:	f8d0 e000 	ldr.w	lr, [r0]
 800a030:	b293      	uxth	r3, r2
 800a032:	ebac 0303 	sub.w	r3, ip, r3
 800a036:	0c12      	lsrs	r2, r2, #16
 800a038:	fa13 f38e 	uxtah	r3, r3, lr
 800a03c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a044:	b29b      	uxth	r3, r3
 800a046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a04a:	45c1      	cmp	r9, r8
 800a04c:	f840 3b04 	str.w	r3, [r0], #4
 800a050:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a054:	d2e8      	bcs.n	800a028 <quorem+0xb0>
 800a056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a05e:	b922      	cbnz	r2, 800a06a <quorem+0xf2>
 800a060:	3b04      	subs	r3, #4
 800a062:	429d      	cmp	r5, r3
 800a064:	461a      	mov	r2, r3
 800a066:	d30a      	bcc.n	800a07e <quorem+0x106>
 800a068:	613c      	str	r4, [r7, #16]
 800a06a:	4630      	mov	r0, r6
 800a06c:	b003      	add	sp, #12
 800a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a072:	6812      	ldr	r2, [r2, #0]
 800a074:	3b04      	subs	r3, #4
 800a076:	2a00      	cmp	r2, #0
 800a078:	d1cc      	bne.n	800a014 <quorem+0x9c>
 800a07a:	3c01      	subs	r4, #1
 800a07c:	e7c7      	b.n	800a00e <quorem+0x96>
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	3b04      	subs	r3, #4
 800a082:	2a00      	cmp	r2, #0
 800a084:	d1f0      	bne.n	800a068 <quorem+0xf0>
 800a086:	3c01      	subs	r4, #1
 800a088:	e7eb      	b.n	800a062 <quorem+0xea>
 800a08a:	2000      	movs	r0, #0
 800a08c:	e7ee      	b.n	800a06c <quorem+0xf4>
	...

0800a090 <_dtoa_r>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	ed2d 8b02 	vpush	{d8}
 800a098:	ec57 6b10 	vmov	r6, r7, d0
 800a09c:	b095      	sub	sp, #84	; 0x54
 800a09e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0a4:	9105      	str	r1, [sp, #20]
 800a0a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0b0:	b975      	cbnz	r5, 800a0d0 <_dtoa_r+0x40>
 800a0b2:	2010      	movs	r0, #16
 800a0b4:	f001 fb7c 	bl	800b7b0 <malloc>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	6260      	str	r0, [r4, #36]	; 0x24
 800a0bc:	b920      	cbnz	r0, 800a0c8 <_dtoa_r+0x38>
 800a0be:	4bb2      	ldr	r3, [pc, #712]	; (800a388 <_dtoa_r+0x2f8>)
 800a0c0:	21ea      	movs	r1, #234	; 0xea
 800a0c2:	48b2      	ldr	r0, [pc, #712]	; (800a38c <_dtoa_r+0x2fc>)
 800a0c4:	f7ff ff3a 	bl	8009f3c <__assert_func>
 800a0c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0cc:	6005      	str	r5, [r0, #0]
 800a0ce:	60c5      	str	r5, [r0, #12]
 800a0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	b151      	cbz	r1, 800a0ec <_dtoa_r+0x5c>
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	604a      	str	r2, [r1, #4]
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4093      	lsls	r3, r2
 800a0de:	608b      	str	r3, [r1, #8]
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f001 fbcd 	bl	800b880 <_Bfree>
 800a0e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	1e3b      	subs	r3, r7, #0
 800a0ee:	bfb9      	ittee	lt
 800a0f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0f4:	9303      	strlt	r3, [sp, #12]
 800a0f6:	2300      	movge	r3, #0
 800a0f8:	f8c8 3000 	strge.w	r3, [r8]
 800a0fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a100:	4ba3      	ldr	r3, [pc, #652]	; (800a390 <_dtoa_r+0x300>)
 800a102:	bfbc      	itt	lt
 800a104:	2201      	movlt	r2, #1
 800a106:	f8c8 2000 	strlt.w	r2, [r8]
 800a10a:	ea33 0309 	bics.w	r3, r3, r9
 800a10e:	d11b      	bne.n	800a148 <_dtoa_r+0xb8>
 800a110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a112:	f242 730f 	movw	r3, #9999	; 0x270f
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a11c:	4333      	orrs	r3, r6
 800a11e:	f000 857a 	beq.w	800ac16 <_dtoa_r+0xb86>
 800a122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a124:	b963      	cbnz	r3, 800a140 <_dtoa_r+0xb0>
 800a126:	4b9b      	ldr	r3, [pc, #620]	; (800a394 <_dtoa_r+0x304>)
 800a128:	e024      	b.n	800a174 <_dtoa_r+0xe4>
 800a12a:	4b9b      	ldr	r3, [pc, #620]	; (800a398 <_dtoa_r+0x308>)
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	3308      	adds	r3, #8
 800a130:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	9800      	ldr	r0, [sp, #0]
 800a136:	b015      	add	sp, #84	; 0x54
 800a138:	ecbd 8b02 	vpop	{d8}
 800a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a140:	4b94      	ldr	r3, [pc, #592]	; (800a394 <_dtoa_r+0x304>)
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	3303      	adds	r3, #3
 800a146:	e7f3      	b.n	800a130 <_dtoa_r+0xa0>
 800a148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a14c:	2200      	movs	r2, #0
 800a14e:	ec51 0b17 	vmov	r0, r1, d7
 800a152:	2300      	movs	r3, #0
 800a154:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a158:	f7f6 fcee 	bl	8000b38 <__aeabi_dcmpeq>
 800a15c:	4680      	mov	r8, r0
 800a15e:	b158      	cbz	r0, 800a178 <_dtoa_r+0xe8>
 800a160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a162:	2301      	movs	r3, #1
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8551 	beq.w	800ac10 <_dtoa_r+0xb80>
 800a16e:	488b      	ldr	r0, [pc, #556]	; (800a39c <_dtoa_r+0x30c>)
 800a170:	6018      	str	r0, [r3, #0]
 800a172:	1e43      	subs	r3, r0, #1
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	e7dd      	b.n	800a134 <_dtoa_r+0xa4>
 800a178:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a17c:	aa12      	add	r2, sp, #72	; 0x48
 800a17e:	a913      	add	r1, sp, #76	; 0x4c
 800a180:	4620      	mov	r0, r4
 800a182:	f001 ff25 	bl	800bfd0 <__d2b>
 800a186:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a18a:	4683      	mov	fp, r0
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	d07c      	beq.n	800a28a <_dtoa_r+0x1fa>
 800a190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a192:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a19a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a19e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1aa:	4b7d      	ldr	r3, [pc, #500]	; (800a3a0 <_dtoa_r+0x310>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f6 f8a1 	bl	80002f8 <__aeabi_dsub>
 800a1b6:	a36e      	add	r3, pc, #440	; (adr r3, 800a370 <_dtoa_r+0x2e0>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f6 fa54 	bl	8000668 <__aeabi_dmul>
 800a1c0:	a36d      	add	r3, pc, #436	; (adr r3, 800a378 <_dtoa_r+0x2e8>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7f6 f899 	bl	80002fc <__adddf3>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	f7f6 f9e0 	bl	8000594 <__aeabi_i2d>
 800a1d4:	a36a      	add	r3, pc, #424	; (adr r3, 800a380 <_dtoa_r+0x2f0>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	f7f6 fa45 	bl	8000668 <__aeabi_dmul>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	f7f6 f889 	bl	80002fc <__adddf3>
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	f7f6 fceb 	bl	8000bc8 <__aeabi_d2iz>
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f6 fca6 	bl	8000b4c <__aeabi_dcmplt>
 800a200:	b148      	cbz	r0, 800a216 <_dtoa_r+0x186>
 800a202:	4650      	mov	r0, sl
 800a204:	f7f6 f9c6 	bl	8000594 <__aeabi_i2d>
 800a208:	4632      	mov	r2, r6
 800a20a:	463b      	mov	r3, r7
 800a20c:	f7f6 fc94 	bl	8000b38 <__aeabi_dcmpeq>
 800a210:	b908      	cbnz	r0, 800a216 <_dtoa_r+0x186>
 800a212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a216:	f1ba 0f16 	cmp.w	sl, #22
 800a21a:	d854      	bhi.n	800a2c6 <_dtoa_r+0x236>
 800a21c:	4b61      	ldr	r3, [pc, #388]	; (800a3a4 <_dtoa_r+0x314>)
 800a21e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a22a:	f7f6 fc8f 	bl	8000b4c <__aeabi_dcmplt>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d04b      	beq.n	800a2ca <_dtoa_r+0x23a>
 800a232:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a236:	2300      	movs	r3, #0
 800a238:	930e      	str	r3, [sp, #56]	; 0x38
 800a23a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a23c:	1b5d      	subs	r5, r3, r5
 800a23e:	1e6b      	subs	r3, r5, #1
 800a240:	9304      	str	r3, [sp, #16]
 800a242:	bf43      	ittte	mi
 800a244:	2300      	movmi	r3, #0
 800a246:	f1c5 0801 	rsbmi	r8, r5, #1
 800a24a:	9304      	strmi	r3, [sp, #16]
 800a24c:	f04f 0800 	movpl.w	r8, #0
 800a250:	f1ba 0f00 	cmp.w	sl, #0
 800a254:	db3b      	blt.n	800a2ce <_dtoa_r+0x23e>
 800a256:	9b04      	ldr	r3, [sp, #16]
 800a258:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a25c:	4453      	add	r3, sl
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	2300      	movs	r3, #0
 800a262:	9306      	str	r3, [sp, #24]
 800a264:	9b05      	ldr	r3, [sp, #20]
 800a266:	2b09      	cmp	r3, #9
 800a268:	d869      	bhi.n	800a33e <_dtoa_r+0x2ae>
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	bfc4      	itt	gt
 800a26e:	3b04      	subgt	r3, #4
 800a270:	9305      	strgt	r3, [sp, #20]
 800a272:	9b05      	ldr	r3, [sp, #20]
 800a274:	f1a3 0302 	sub.w	r3, r3, #2
 800a278:	bfcc      	ite	gt
 800a27a:	2500      	movgt	r5, #0
 800a27c:	2501      	movle	r5, #1
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d869      	bhi.n	800a356 <_dtoa_r+0x2c6>
 800a282:	e8df f003 	tbb	[pc, r3]
 800a286:	4e2c      	.short	0x4e2c
 800a288:	5a4c      	.short	0x5a4c
 800a28a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a28e:	441d      	add	r5, r3
 800a290:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a294:	2b20      	cmp	r3, #32
 800a296:	bfc1      	itttt	gt
 800a298:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a29c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2a0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2a8:	bfda      	itte	le
 800a2aa:	f1c3 0320 	rsble	r3, r3, #32
 800a2ae:	fa06 f003 	lslle.w	r0, r6, r3
 800a2b2:	4318      	orrgt	r0, r3
 800a2b4:	f7f6 f95e 	bl	8000574 <__aeabi_ui2d>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2c0:	3d01      	subs	r5, #1
 800a2c2:	9310      	str	r3, [sp, #64]	; 0x40
 800a2c4:	e771      	b.n	800a1aa <_dtoa_r+0x11a>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7b6      	b.n	800a238 <_dtoa_r+0x1a8>
 800a2ca:	900e      	str	r0, [sp, #56]	; 0x38
 800a2cc:	e7b5      	b.n	800a23a <_dtoa_r+0x1aa>
 800a2ce:	f1ca 0300 	rsb	r3, sl, #0
 800a2d2:	9306      	str	r3, [sp, #24]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	eba8 080a 	sub.w	r8, r8, sl
 800a2da:	930d      	str	r3, [sp, #52]	; 0x34
 800a2dc:	e7c2      	b.n	800a264 <_dtoa_r+0x1d4>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9308      	str	r3, [sp, #32]
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dc39      	bgt.n	800a35c <_dtoa_r+0x2cc>
 800a2e8:	f04f 0901 	mov.w	r9, #1
 800a2ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a2f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	6042      	str	r2, [r0, #4]
 800a2fc:	2204      	movs	r2, #4
 800a2fe:	f102 0614 	add.w	r6, r2, #20
 800a302:	429e      	cmp	r6, r3
 800a304:	6841      	ldr	r1, [r0, #4]
 800a306:	d92f      	bls.n	800a368 <_dtoa_r+0x2d8>
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 fa79 	bl	800b800 <_Balloc>
 800a30e:	9000      	str	r0, [sp, #0]
 800a310:	2800      	cmp	r0, #0
 800a312:	d14b      	bne.n	800a3ac <_dtoa_r+0x31c>
 800a314:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <_dtoa_r+0x318>)
 800a316:	4602      	mov	r2, r0
 800a318:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a31c:	e6d1      	b.n	800a0c2 <_dtoa_r+0x32>
 800a31e:	2301      	movs	r3, #1
 800a320:	e7de      	b.n	800a2e0 <_dtoa_r+0x250>
 800a322:	2300      	movs	r3, #0
 800a324:	9308      	str	r3, [sp, #32]
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	eb0a 0903 	add.w	r9, sl, r3
 800a32c:	f109 0301 	add.w	r3, r9, #1
 800a330:	2b01      	cmp	r3, #1
 800a332:	9301      	str	r3, [sp, #4]
 800a334:	bfb8      	it	lt
 800a336:	2301      	movlt	r3, #1
 800a338:	e7dd      	b.n	800a2f6 <_dtoa_r+0x266>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e7f2      	b.n	800a324 <_dtoa_r+0x294>
 800a33e:	2501      	movs	r5, #1
 800a340:	2300      	movs	r3, #0
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	9508      	str	r5, [sp, #32]
 800a346:	f04f 39ff 	mov.w	r9, #4294967295
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a350:	2312      	movs	r3, #18
 800a352:	9209      	str	r2, [sp, #36]	; 0x24
 800a354:	e7cf      	b.n	800a2f6 <_dtoa_r+0x266>
 800a356:	2301      	movs	r3, #1
 800a358:	9308      	str	r3, [sp, #32]
 800a35a:	e7f4      	b.n	800a346 <_dtoa_r+0x2b6>
 800a35c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a360:	f8cd 9004 	str.w	r9, [sp, #4]
 800a364:	464b      	mov	r3, r9
 800a366:	e7c6      	b.n	800a2f6 <_dtoa_r+0x266>
 800a368:	3101      	adds	r1, #1
 800a36a:	6041      	str	r1, [r0, #4]
 800a36c:	0052      	lsls	r2, r2, #1
 800a36e:	e7c6      	b.n	800a2fe <_dtoa_r+0x26e>
 800a370:	636f4361 	.word	0x636f4361
 800a374:	3fd287a7 	.word	0x3fd287a7
 800a378:	8b60c8b3 	.word	0x8b60c8b3
 800a37c:	3fc68a28 	.word	0x3fc68a28
 800a380:	509f79fb 	.word	0x509f79fb
 800a384:	3fd34413 	.word	0x3fd34413
 800a388:	0800ea30 	.word	0x0800ea30
 800a38c:	0800ebf2 	.word	0x0800ebf2
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	0800ebee 	.word	0x0800ebee
 800a398:	0800ebe5 	.word	0x0800ebe5
 800a39c:	0800e9b5 	.word	0x0800e9b5
 800a3a0:	3ff80000 	.word	0x3ff80000
 800a3a4:	0800edd0 	.word	0x0800edd0
 800a3a8:	0800ec51 	.word	0x0800ec51
 800a3ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ae:	9a00      	ldr	r2, [sp, #0]
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	2b0e      	cmp	r3, #14
 800a3b6:	f200 80ad 	bhi.w	800a514 <_dtoa_r+0x484>
 800a3ba:	2d00      	cmp	r5, #0
 800a3bc:	f000 80aa 	beq.w	800a514 <_dtoa_r+0x484>
 800a3c0:	f1ba 0f00 	cmp.w	sl, #0
 800a3c4:	dd36      	ble.n	800a434 <_dtoa_r+0x3a4>
 800a3c6:	4ac3      	ldr	r2, [pc, #780]	; (800a6d4 <_dtoa_r+0x644>)
 800a3c8:	f00a 030f 	and.w	r3, sl, #15
 800a3cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3d0:	ed93 7b00 	vldr	d7, [r3]
 800a3d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a3d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a3dc:	eeb0 8a47 	vmov.f32	s16, s14
 800a3e0:	eef0 8a67 	vmov.f32	s17, s15
 800a3e4:	d016      	beq.n	800a414 <_dtoa_r+0x384>
 800a3e6:	4bbc      	ldr	r3, [pc, #752]	; (800a6d8 <_dtoa_r+0x648>)
 800a3e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3f0:	f7f6 fa64 	bl	80008bc <__aeabi_ddiv>
 800a3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3f8:	f007 070f 	and.w	r7, r7, #15
 800a3fc:	2503      	movs	r5, #3
 800a3fe:	4eb6      	ldr	r6, [pc, #728]	; (800a6d8 <_dtoa_r+0x648>)
 800a400:	b957      	cbnz	r7, 800a418 <_dtoa_r+0x388>
 800a402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a406:	ec53 2b18 	vmov	r2, r3, d8
 800a40a:	f7f6 fa57 	bl	80008bc <__aeabi_ddiv>
 800a40e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a412:	e029      	b.n	800a468 <_dtoa_r+0x3d8>
 800a414:	2502      	movs	r5, #2
 800a416:	e7f2      	b.n	800a3fe <_dtoa_r+0x36e>
 800a418:	07f9      	lsls	r1, r7, #31
 800a41a:	d508      	bpl.n	800a42e <_dtoa_r+0x39e>
 800a41c:	ec51 0b18 	vmov	r0, r1, d8
 800a420:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a424:	f7f6 f920 	bl	8000668 <__aeabi_dmul>
 800a428:	ec41 0b18 	vmov	d8, r0, r1
 800a42c:	3501      	adds	r5, #1
 800a42e:	107f      	asrs	r7, r7, #1
 800a430:	3608      	adds	r6, #8
 800a432:	e7e5      	b.n	800a400 <_dtoa_r+0x370>
 800a434:	f000 80a6 	beq.w	800a584 <_dtoa_r+0x4f4>
 800a438:	f1ca 0600 	rsb	r6, sl, #0
 800a43c:	4ba5      	ldr	r3, [pc, #660]	; (800a6d4 <_dtoa_r+0x644>)
 800a43e:	4fa6      	ldr	r7, [pc, #664]	; (800a6d8 <_dtoa_r+0x648>)
 800a440:	f006 020f 	and.w	r2, r6, #15
 800a444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a450:	f7f6 f90a 	bl	8000668 <__aeabi_dmul>
 800a454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a458:	1136      	asrs	r6, r6, #4
 800a45a:	2300      	movs	r3, #0
 800a45c:	2502      	movs	r5, #2
 800a45e:	2e00      	cmp	r6, #0
 800a460:	f040 8085 	bne.w	800a56e <_dtoa_r+0x4de>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1d2      	bne.n	800a40e <_dtoa_r+0x37e>
 800a468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 808c 	beq.w	800a588 <_dtoa_r+0x4f8>
 800a470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a474:	4b99      	ldr	r3, [pc, #612]	; (800a6dc <_dtoa_r+0x64c>)
 800a476:	2200      	movs	r2, #0
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f6 fb66 	bl	8000b4c <__aeabi_dcmplt>
 800a480:	2800      	cmp	r0, #0
 800a482:	f000 8081 	beq.w	800a588 <_dtoa_r+0x4f8>
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d07d      	beq.n	800a588 <_dtoa_r+0x4f8>
 800a48c:	f1b9 0f00 	cmp.w	r9, #0
 800a490:	dd3c      	ble.n	800a50c <_dtoa_r+0x47c>
 800a492:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a496:	9307      	str	r3, [sp, #28]
 800a498:	2200      	movs	r2, #0
 800a49a:	4b91      	ldr	r3, [pc, #580]	; (800a6e0 <_dtoa_r+0x650>)
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f6 f8e2 	bl	8000668 <__aeabi_dmul>
 800a4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a8:	3501      	adds	r5, #1
 800a4aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a4ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f7f6 f86e 	bl	8000594 <__aeabi_i2d>
 800a4b8:	4632      	mov	r2, r6
 800a4ba:	463b      	mov	r3, r7
 800a4bc:	f7f6 f8d4 	bl	8000668 <__aeabi_dmul>
 800a4c0:	4b88      	ldr	r3, [pc, #544]	; (800a6e4 <_dtoa_r+0x654>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f7f5 ff1a 	bl	80002fc <__adddf3>
 800a4c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d15c      	bne.n	800a592 <_dtoa_r+0x502>
 800a4d8:	4b83      	ldr	r3, [pc, #524]	; (800a6e8 <_dtoa_r+0x658>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f5 ff0a 	bl	80002f8 <__aeabi_dsub>
 800a4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	460f      	mov	r7, r1
 800a4ec:	f7f6 fb4c 	bl	8000b88 <__aeabi_dcmpgt>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	f040 8296 	bne.w	800aa22 <_dtoa_r+0x992>
 800a4f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a500:	4639      	mov	r1, r7
 800a502:	f7f6 fb23 	bl	8000b4c <__aeabi_dcmplt>
 800a506:	2800      	cmp	r0, #0
 800a508:	f040 8288 	bne.w	800aa1c <_dtoa_r+0x98c>
 800a50c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a514:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a516:	2b00      	cmp	r3, #0
 800a518:	f2c0 8158 	blt.w	800a7cc <_dtoa_r+0x73c>
 800a51c:	f1ba 0f0e 	cmp.w	sl, #14
 800a520:	f300 8154 	bgt.w	800a7cc <_dtoa_r+0x73c>
 800a524:	4b6b      	ldr	r3, [pc, #428]	; (800a6d4 <_dtoa_r+0x644>)
 800a526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a52a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	f280 80e3 	bge.w	800a6fc <_dtoa_r+0x66c>
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f300 80df 	bgt.w	800a6fc <_dtoa_r+0x66c>
 800a53e:	f040 826d 	bne.w	800aa1c <_dtoa_r+0x98c>
 800a542:	4b69      	ldr	r3, [pc, #420]	; (800a6e8 <_dtoa_r+0x658>)
 800a544:	2200      	movs	r2, #0
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	f7f6 f88d 	bl	8000668 <__aeabi_dmul>
 800a54e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a552:	f7f6 fb0f 	bl	8000b74 <__aeabi_dcmpge>
 800a556:	9e01      	ldr	r6, [sp, #4]
 800a558:	4637      	mov	r7, r6
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f040 8243 	bne.w	800a9e6 <_dtoa_r+0x956>
 800a560:	9d00      	ldr	r5, [sp, #0]
 800a562:	2331      	movs	r3, #49	; 0x31
 800a564:	f805 3b01 	strb.w	r3, [r5], #1
 800a568:	f10a 0a01 	add.w	sl, sl, #1
 800a56c:	e23f      	b.n	800a9ee <_dtoa_r+0x95e>
 800a56e:	07f2      	lsls	r2, r6, #31
 800a570:	d505      	bpl.n	800a57e <_dtoa_r+0x4ee>
 800a572:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a576:	f7f6 f877 	bl	8000668 <__aeabi_dmul>
 800a57a:	3501      	adds	r5, #1
 800a57c:	2301      	movs	r3, #1
 800a57e:	1076      	asrs	r6, r6, #1
 800a580:	3708      	adds	r7, #8
 800a582:	e76c      	b.n	800a45e <_dtoa_r+0x3ce>
 800a584:	2502      	movs	r5, #2
 800a586:	e76f      	b.n	800a468 <_dtoa_r+0x3d8>
 800a588:	9b01      	ldr	r3, [sp, #4]
 800a58a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a58e:	930c      	str	r3, [sp, #48]	; 0x30
 800a590:	e78d      	b.n	800a4ae <_dtoa_r+0x41e>
 800a592:	9900      	ldr	r1, [sp, #0]
 800a594:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a598:	4b4e      	ldr	r3, [pc, #312]	; (800a6d4 <_dtoa_r+0x644>)
 800a59a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a59e:	4401      	add	r1, r0
 800a5a0:	9102      	str	r1, [sp, #8]
 800a5a2:	9908      	ldr	r1, [sp, #32]
 800a5a4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5a8:	eef0 8a67 	vmov.f32	s17, s15
 800a5ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	d045      	beq.n	800a644 <_dtoa_r+0x5b4>
 800a5b8:	494c      	ldr	r1, [pc, #304]	; (800a6ec <_dtoa_r+0x65c>)
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	f7f6 f97e 	bl	80008bc <__aeabi_ddiv>
 800a5c0:	ec53 2b18 	vmov	r2, r3, d8
 800a5c4:	f7f5 fe98 	bl	80002f8 <__aeabi_dsub>
 800a5c8:	9d00      	ldr	r5, [sp, #0]
 800a5ca:	ec41 0b18 	vmov	d8, r0, r1
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7f6 faf9 	bl	8000bc8 <__aeabi_d2iz>
 800a5d6:	900c      	str	r0, [sp, #48]	; 0x30
 800a5d8:	f7f5 ffdc 	bl	8000594 <__aeabi_i2d>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f5 fe88 	bl	80002f8 <__aeabi_dsub>
 800a5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ea:	3330      	adds	r3, #48	; 0x30
 800a5ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a5f0:	ec53 2b18 	vmov	r2, r3, d8
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	460f      	mov	r7, r1
 800a5f8:	f7f6 faa8 	bl	8000b4c <__aeabi_dcmplt>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d165      	bne.n	800a6cc <_dtoa_r+0x63c>
 800a600:	4632      	mov	r2, r6
 800a602:	463b      	mov	r3, r7
 800a604:	4935      	ldr	r1, [pc, #212]	; (800a6dc <_dtoa_r+0x64c>)
 800a606:	2000      	movs	r0, #0
 800a608:	f7f5 fe76 	bl	80002f8 <__aeabi_dsub>
 800a60c:	ec53 2b18 	vmov	r2, r3, d8
 800a610:	f7f6 fa9c 	bl	8000b4c <__aeabi_dcmplt>
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 80b9 	bne.w	800a78c <_dtoa_r+0x6fc>
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	429d      	cmp	r5, r3
 800a61e:	f43f af75 	beq.w	800a50c <_dtoa_r+0x47c>
 800a622:	4b2f      	ldr	r3, [pc, #188]	; (800a6e0 <_dtoa_r+0x650>)
 800a624:	ec51 0b18 	vmov	r0, r1, d8
 800a628:	2200      	movs	r2, #0
 800a62a:	f7f6 f81d 	bl	8000668 <__aeabi_dmul>
 800a62e:	4b2c      	ldr	r3, [pc, #176]	; (800a6e0 <_dtoa_r+0x650>)
 800a630:	ec41 0b18 	vmov	d8, r0, r1
 800a634:	2200      	movs	r2, #0
 800a636:	4630      	mov	r0, r6
 800a638:	4639      	mov	r1, r7
 800a63a:	f7f6 f815 	bl	8000668 <__aeabi_dmul>
 800a63e:	4606      	mov	r6, r0
 800a640:	460f      	mov	r7, r1
 800a642:	e7c4      	b.n	800a5ce <_dtoa_r+0x53e>
 800a644:	ec51 0b17 	vmov	r0, r1, d7
 800a648:	f7f6 f80e 	bl	8000668 <__aeabi_dmul>
 800a64c:	9b02      	ldr	r3, [sp, #8]
 800a64e:	9d00      	ldr	r5, [sp, #0]
 800a650:	930c      	str	r3, [sp, #48]	; 0x30
 800a652:	ec41 0b18 	vmov	d8, r0, r1
 800a656:	4639      	mov	r1, r7
 800a658:	4630      	mov	r0, r6
 800a65a:	f7f6 fab5 	bl	8000bc8 <__aeabi_d2iz>
 800a65e:	9011      	str	r0, [sp, #68]	; 0x44
 800a660:	f7f5 ff98 	bl	8000594 <__aeabi_i2d>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f5 fe44 	bl	80002f8 <__aeabi_dsub>
 800a670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a672:	3330      	adds	r3, #48	; 0x30
 800a674:	f805 3b01 	strb.w	r3, [r5], #1
 800a678:	9b02      	ldr	r3, [sp, #8]
 800a67a:	429d      	cmp	r5, r3
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	d134      	bne.n	800a6f0 <_dtoa_r+0x660>
 800a686:	4b19      	ldr	r3, [pc, #100]	; (800a6ec <_dtoa_r+0x65c>)
 800a688:	ec51 0b18 	vmov	r0, r1, d8
 800a68c:	f7f5 fe36 	bl	80002fc <__adddf3>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f7f6 fa76 	bl	8000b88 <__aeabi_dcmpgt>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d175      	bne.n	800a78c <_dtoa_r+0x6fc>
 800a6a0:	ec53 2b18 	vmov	r2, r3, d8
 800a6a4:	4911      	ldr	r1, [pc, #68]	; (800a6ec <_dtoa_r+0x65c>)
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	f7f5 fe26 	bl	80002f8 <__aeabi_dsub>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f6 fa4a 	bl	8000b4c <__aeabi_dcmplt>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	f43f af27 	beq.w	800a50c <_dtoa_r+0x47c>
 800a6be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6c0:	1e6b      	subs	r3, r5, #1
 800a6c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6c8:	2b30      	cmp	r3, #48	; 0x30
 800a6ca:	d0f8      	beq.n	800a6be <_dtoa_r+0x62e>
 800a6cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a6d0:	e04a      	b.n	800a768 <_dtoa_r+0x6d8>
 800a6d2:	bf00      	nop
 800a6d4:	0800edd0 	.word	0x0800edd0
 800a6d8:	0800eda8 	.word	0x0800eda8
 800a6dc:	3ff00000 	.word	0x3ff00000
 800a6e0:	40240000 	.word	0x40240000
 800a6e4:	401c0000 	.word	0x401c0000
 800a6e8:	40140000 	.word	0x40140000
 800a6ec:	3fe00000 	.word	0x3fe00000
 800a6f0:	4baf      	ldr	r3, [pc, #700]	; (800a9b0 <_dtoa_r+0x920>)
 800a6f2:	f7f5 ffb9 	bl	8000668 <__aeabi_dmul>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	460f      	mov	r7, r1
 800a6fa:	e7ac      	b.n	800a656 <_dtoa_r+0x5c6>
 800a6fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a700:	9d00      	ldr	r5, [sp, #0]
 800a702:	4642      	mov	r2, r8
 800a704:	464b      	mov	r3, r9
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f6 f8d7 	bl	80008bc <__aeabi_ddiv>
 800a70e:	f7f6 fa5b 	bl	8000bc8 <__aeabi_d2iz>
 800a712:	9002      	str	r0, [sp, #8]
 800a714:	f7f5 ff3e 	bl	8000594 <__aeabi_i2d>
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	f7f5 ffa4 	bl	8000668 <__aeabi_dmul>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f5 fde6 	bl	80002f8 <__aeabi_dsub>
 800a72c:	9e02      	ldr	r6, [sp, #8]
 800a72e:	9f01      	ldr	r7, [sp, #4]
 800a730:	3630      	adds	r6, #48	; 0x30
 800a732:	f805 6b01 	strb.w	r6, [r5], #1
 800a736:	9e00      	ldr	r6, [sp, #0]
 800a738:	1bae      	subs	r6, r5, r6
 800a73a:	42b7      	cmp	r7, r6
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	d137      	bne.n	800a7b2 <_dtoa_r+0x722>
 800a742:	f7f5 fddb 	bl	80002fc <__adddf3>
 800a746:	4642      	mov	r2, r8
 800a748:	464b      	mov	r3, r9
 800a74a:	4606      	mov	r6, r0
 800a74c:	460f      	mov	r7, r1
 800a74e:	f7f6 fa1b 	bl	8000b88 <__aeabi_dcmpgt>
 800a752:	b9c8      	cbnz	r0, 800a788 <_dtoa_r+0x6f8>
 800a754:	4642      	mov	r2, r8
 800a756:	464b      	mov	r3, r9
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f6 f9ec 	bl	8000b38 <__aeabi_dcmpeq>
 800a760:	b110      	cbz	r0, 800a768 <_dtoa_r+0x6d8>
 800a762:	9b02      	ldr	r3, [sp, #8]
 800a764:	07d9      	lsls	r1, r3, #31
 800a766:	d40f      	bmi.n	800a788 <_dtoa_r+0x6f8>
 800a768:	4620      	mov	r0, r4
 800a76a:	4659      	mov	r1, fp
 800a76c:	f001 f888 	bl	800b880 <_Bfree>
 800a770:	2300      	movs	r3, #0
 800a772:	702b      	strb	r3, [r5, #0]
 800a774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a776:	f10a 0001 	add.w	r0, sl, #1
 800a77a:	6018      	str	r0, [r3, #0]
 800a77c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f43f acd8 	beq.w	800a134 <_dtoa_r+0xa4>
 800a784:	601d      	str	r5, [r3, #0]
 800a786:	e4d5      	b.n	800a134 <_dtoa_r+0xa4>
 800a788:	f8cd a01c 	str.w	sl, [sp, #28]
 800a78c:	462b      	mov	r3, r5
 800a78e:	461d      	mov	r5, r3
 800a790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a794:	2a39      	cmp	r2, #57	; 0x39
 800a796:	d108      	bne.n	800a7aa <_dtoa_r+0x71a>
 800a798:	9a00      	ldr	r2, [sp, #0]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d1f7      	bne.n	800a78e <_dtoa_r+0x6fe>
 800a79e:	9a07      	ldr	r2, [sp, #28]
 800a7a0:	9900      	ldr	r1, [sp, #0]
 800a7a2:	3201      	adds	r2, #1
 800a7a4:	9207      	str	r2, [sp, #28]
 800a7a6:	2230      	movs	r2, #48	; 0x30
 800a7a8:	700a      	strb	r2, [r1, #0]
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	701a      	strb	r2, [r3, #0]
 800a7b0:	e78c      	b.n	800a6cc <_dtoa_r+0x63c>
 800a7b2:	4b7f      	ldr	r3, [pc, #508]	; (800a9b0 <_dtoa_r+0x920>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f7f5 ff57 	bl	8000668 <__aeabi_dmul>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	f7f6 f9b9 	bl	8000b38 <__aeabi_dcmpeq>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d09b      	beq.n	800a702 <_dtoa_r+0x672>
 800a7ca:	e7cd      	b.n	800a768 <_dtoa_r+0x6d8>
 800a7cc:	9a08      	ldr	r2, [sp, #32]
 800a7ce:	2a00      	cmp	r2, #0
 800a7d0:	f000 80c4 	beq.w	800a95c <_dtoa_r+0x8cc>
 800a7d4:	9a05      	ldr	r2, [sp, #20]
 800a7d6:	2a01      	cmp	r2, #1
 800a7d8:	f300 80a8 	bgt.w	800a92c <_dtoa_r+0x89c>
 800a7dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	f000 80a0 	beq.w	800a924 <_dtoa_r+0x894>
 800a7e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7e8:	9e06      	ldr	r6, [sp, #24]
 800a7ea:	4645      	mov	r5, r8
 800a7ec:	9a04      	ldr	r2, [sp, #16]
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	441a      	add	r2, r3
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	4498      	add	r8, r3
 800a7f6:	9204      	str	r2, [sp, #16]
 800a7f8:	f001 f948 	bl	800ba8c <__i2b>
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	dd0b      	ble.n	800a81a <_dtoa_r+0x78a>
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd08      	ble.n	800a81a <_dtoa_r+0x78a>
 800a808:	42ab      	cmp	r3, r5
 800a80a:	9a04      	ldr	r2, [sp, #16]
 800a80c:	bfa8      	it	ge
 800a80e:	462b      	movge	r3, r5
 800a810:	eba8 0803 	sub.w	r8, r8, r3
 800a814:	1aed      	subs	r5, r5, r3
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	9b06      	ldr	r3, [sp, #24]
 800a81c:	b1fb      	cbz	r3, 800a85e <_dtoa_r+0x7ce>
 800a81e:	9b08      	ldr	r3, [sp, #32]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 809f 	beq.w	800a964 <_dtoa_r+0x8d4>
 800a826:	2e00      	cmp	r6, #0
 800a828:	dd11      	ble.n	800a84e <_dtoa_r+0x7be>
 800a82a:	4639      	mov	r1, r7
 800a82c:	4632      	mov	r2, r6
 800a82e:	4620      	mov	r0, r4
 800a830:	f001 f9e8 	bl	800bc04 <__pow5mult>
 800a834:	465a      	mov	r2, fp
 800a836:	4601      	mov	r1, r0
 800a838:	4607      	mov	r7, r0
 800a83a:	4620      	mov	r0, r4
 800a83c:	f001 f93c 	bl	800bab8 <__multiply>
 800a840:	4659      	mov	r1, fp
 800a842:	9007      	str	r0, [sp, #28]
 800a844:	4620      	mov	r0, r4
 800a846:	f001 f81b 	bl	800b880 <_Bfree>
 800a84a:	9b07      	ldr	r3, [sp, #28]
 800a84c:	469b      	mov	fp, r3
 800a84e:	9b06      	ldr	r3, [sp, #24]
 800a850:	1b9a      	subs	r2, r3, r6
 800a852:	d004      	beq.n	800a85e <_dtoa_r+0x7ce>
 800a854:	4659      	mov	r1, fp
 800a856:	4620      	mov	r0, r4
 800a858:	f001 f9d4 	bl	800bc04 <__pow5mult>
 800a85c:	4683      	mov	fp, r0
 800a85e:	2101      	movs	r1, #1
 800a860:	4620      	mov	r0, r4
 800a862:	f001 f913 	bl	800ba8c <__i2b>
 800a866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a868:	2b00      	cmp	r3, #0
 800a86a:	4606      	mov	r6, r0
 800a86c:	dd7c      	ble.n	800a968 <_dtoa_r+0x8d8>
 800a86e:	461a      	mov	r2, r3
 800a870:	4601      	mov	r1, r0
 800a872:	4620      	mov	r0, r4
 800a874:	f001 f9c6 	bl	800bc04 <__pow5mult>
 800a878:	9b05      	ldr	r3, [sp, #20]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	4606      	mov	r6, r0
 800a87e:	dd76      	ble.n	800a96e <_dtoa_r+0x8de>
 800a880:	2300      	movs	r3, #0
 800a882:	9306      	str	r3, [sp, #24]
 800a884:	6933      	ldr	r3, [r6, #16]
 800a886:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a88a:	6918      	ldr	r0, [r3, #16]
 800a88c:	f001 f8ae 	bl	800b9ec <__hi0bits>
 800a890:	f1c0 0020 	rsb	r0, r0, #32
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	4418      	add	r0, r3
 800a898:	f010 001f 	ands.w	r0, r0, #31
 800a89c:	f000 8086 	beq.w	800a9ac <_dtoa_r+0x91c>
 800a8a0:	f1c0 0320 	rsb	r3, r0, #32
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	dd7f      	ble.n	800a9a8 <_dtoa_r+0x918>
 800a8a8:	f1c0 001c 	rsb	r0, r0, #28
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	4403      	add	r3, r0
 800a8b0:	4480      	add	r8, r0
 800a8b2:	4405      	add	r5, r0
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	dd05      	ble.n	800a8c8 <_dtoa_r+0x838>
 800a8bc:	4659      	mov	r1, fp
 800a8be:	4642      	mov	r2, r8
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f001 f9f9 	bl	800bcb8 <__lshift>
 800a8c6:	4683      	mov	fp, r0
 800a8c8:	9b04      	ldr	r3, [sp, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	dd05      	ble.n	800a8da <_dtoa_r+0x84a>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f001 f9f0 	bl	800bcb8 <__lshift>
 800a8d8:	4606      	mov	r6, r0
 800a8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d069      	beq.n	800a9b4 <_dtoa_r+0x924>
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4658      	mov	r0, fp
 800a8e4:	f001 fa54 	bl	800bd90 <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	da63      	bge.n	800a9b4 <_dtoa_r+0x924>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4659      	mov	r1, fp
 800a8f0:	220a      	movs	r2, #10
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 ffe6 	bl	800b8c4 <__multadd>
 800a8f8:	9b08      	ldr	r3, [sp, #32]
 800a8fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8fe:	4683      	mov	fp, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 818f 	beq.w	800ac24 <_dtoa_r+0xb94>
 800a906:	4639      	mov	r1, r7
 800a908:	2300      	movs	r3, #0
 800a90a:	220a      	movs	r2, #10
 800a90c:	4620      	mov	r0, r4
 800a90e:	f000 ffd9 	bl	800b8c4 <__multadd>
 800a912:	f1b9 0f00 	cmp.w	r9, #0
 800a916:	4607      	mov	r7, r0
 800a918:	f300 808e 	bgt.w	800aa38 <_dtoa_r+0x9a8>
 800a91c:	9b05      	ldr	r3, [sp, #20]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	dc50      	bgt.n	800a9c4 <_dtoa_r+0x934>
 800a922:	e089      	b.n	800aa38 <_dtoa_r+0x9a8>
 800a924:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a92a:	e75d      	b.n	800a7e8 <_dtoa_r+0x758>
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	1e5e      	subs	r6, r3, #1
 800a930:	9b06      	ldr	r3, [sp, #24]
 800a932:	42b3      	cmp	r3, r6
 800a934:	bfbf      	itttt	lt
 800a936:	9b06      	ldrlt	r3, [sp, #24]
 800a938:	9606      	strlt	r6, [sp, #24]
 800a93a:	1af2      	sublt	r2, r6, r3
 800a93c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a93e:	bfb6      	itet	lt
 800a940:	189b      	addlt	r3, r3, r2
 800a942:	1b9e      	subge	r6, r3, r6
 800a944:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	bfb8      	it	lt
 800a94a:	2600      	movlt	r6, #0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bfb5      	itete	lt
 800a950:	eba8 0503 	sublt.w	r5, r8, r3
 800a954:	9b01      	ldrge	r3, [sp, #4]
 800a956:	2300      	movlt	r3, #0
 800a958:	4645      	movge	r5, r8
 800a95a:	e747      	b.n	800a7ec <_dtoa_r+0x75c>
 800a95c:	9e06      	ldr	r6, [sp, #24]
 800a95e:	9f08      	ldr	r7, [sp, #32]
 800a960:	4645      	mov	r5, r8
 800a962:	e74c      	b.n	800a7fe <_dtoa_r+0x76e>
 800a964:	9a06      	ldr	r2, [sp, #24]
 800a966:	e775      	b.n	800a854 <_dtoa_r+0x7c4>
 800a968:	9b05      	ldr	r3, [sp, #20]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	dc18      	bgt.n	800a9a0 <_dtoa_r+0x910>
 800a96e:	9b02      	ldr	r3, [sp, #8]
 800a970:	b9b3      	cbnz	r3, 800a9a0 <_dtoa_r+0x910>
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a978:	b9a3      	cbnz	r3, 800a9a4 <_dtoa_r+0x914>
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a980:	0d1b      	lsrs	r3, r3, #20
 800a982:	051b      	lsls	r3, r3, #20
 800a984:	b12b      	cbz	r3, 800a992 <_dtoa_r+0x902>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	3301      	adds	r3, #1
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	f108 0801 	add.w	r8, r8, #1
 800a990:	2301      	movs	r3, #1
 800a992:	9306      	str	r3, [sp, #24]
 800a994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a996:	2b00      	cmp	r3, #0
 800a998:	f47f af74 	bne.w	800a884 <_dtoa_r+0x7f4>
 800a99c:	2001      	movs	r0, #1
 800a99e:	e779      	b.n	800a894 <_dtoa_r+0x804>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e7f6      	b.n	800a992 <_dtoa_r+0x902>
 800a9a4:	9b02      	ldr	r3, [sp, #8]
 800a9a6:	e7f4      	b.n	800a992 <_dtoa_r+0x902>
 800a9a8:	d085      	beq.n	800a8b6 <_dtoa_r+0x826>
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	301c      	adds	r0, #28
 800a9ae:	e77d      	b.n	800a8ac <_dtoa_r+0x81c>
 800a9b0:	40240000 	.word	0x40240000
 800a9b4:	9b01      	ldr	r3, [sp, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	dc38      	bgt.n	800aa2c <_dtoa_r+0x99c>
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	dd35      	ble.n	800aa2c <_dtoa_r+0x99c>
 800a9c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9c4:	f1b9 0f00 	cmp.w	r9, #0
 800a9c8:	d10d      	bne.n	800a9e6 <_dtoa_r+0x956>
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	2205      	movs	r2, #5
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 ff77 	bl	800b8c4 <__multadd>
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	4606      	mov	r6, r0
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f001 f9d8 	bl	800bd90 <__mcmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f73f adbd 	bgt.w	800a560 <_dtoa_r+0x4d0>
 800a9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e8:	9d00      	ldr	r5, [sp, #0]
 800a9ea:	ea6f 0a03 	mvn.w	sl, r3
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 ff43 	bl	800b880 <_Bfree>
 800a9fa:	2f00      	cmp	r7, #0
 800a9fc:	f43f aeb4 	beq.w	800a768 <_dtoa_r+0x6d8>
 800aa00:	f1b8 0f00 	cmp.w	r8, #0
 800aa04:	d005      	beq.n	800aa12 <_dtoa_r+0x982>
 800aa06:	45b8      	cmp	r8, r7
 800aa08:	d003      	beq.n	800aa12 <_dtoa_r+0x982>
 800aa0a:	4641      	mov	r1, r8
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f000 ff37 	bl	800b880 <_Bfree>
 800aa12:	4639      	mov	r1, r7
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 ff33 	bl	800b880 <_Bfree>
 800aa1a:	e6a5      	b.n	800a768 <_dtoa_r+0x6d8>
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	4637      	mov	r7, r6
 800aa20:	e7e1      	b.n	800a9e6 <_dtoa_r+0x956>
 800aa22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa28:	4637      	mov	r7, r6
 800aa2a:	e599      	b.n	800a560 <_dtoa_r+0x4d0>
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 80fd 	beq.w	800ac32 <_dtoa_r+0xba2>
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	dd05      	ble.n	800aa48 <_dtoa_r+0x9b8>
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4620      	mov	r0, r4
 800aa42:	f001 f939 	bl	800bcb8 <__lshift>
 800aa46:	4607      	mov	r7, r0
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d05c      	beq.n	800ab08 <_dtoa_r+0xa78>
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 fed5 	bl	800b800 <_Balloc>
 800aa56:	4605      	mov	r5, r0
 800aa58:	b928      	cbnz	r0, 800aa66 <_dtoa_r+0x9d6>
 800aa5a:	4b80      	ldr	r3, [pc, #512]	; (800ac5c <_dtoa_r+0xbcc>)
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa62:	f7ff bb2e 	b.w	800a0c2 <_dtoa_r+0x32>
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	3202      	adds	r2, #2
 800aa6a:	0092      	lsls	r2, r2, #2
 800aa6c:	f107 010c 	add.w	r1, r7, #12
 800aa70:	300c      	adds	r0, #12
 800aa72:	f000 feb7 	bl	800b7e4 <memcpy>
 800aa76:	2201      	movs	r2, #1
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f001 f91c 	bl	800bcb8 <__lshift>
 800aa80:	9b00      	ldr	r3, [sp, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	9b00      	ldr	r3, [sp, #0]
 800aa88:	444b      	add	r3, r9
 800aa8a:	9307      	str	r3, [sp, #28]
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	46b8      	mov	r8, r7
 800aa94:	9306      	str	r3, [sp, #24]
 800aa96:	4607      	mov	r7, r0
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	4658      	mov	r0, fp
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	f7ff fa69 	bl	8009f78 <quorem>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	3330      	adds	r3, #48	; 0x30
 800aaaa:	9004      	str	r0, [sp, #16]
 800aaac:	4641      	mov	r1, r8
 800aaae:	4658      	mov	r0, fp
 800aab0:	9308      	str	r3, [sp, #32]
 800aab2:	f001 f96d 	bl	800bd90 <__mcmp>
 800aab6:	463a      	mov	r2, r7
 800aab8:	4681      	mov	r9, r0
 800aaba:	4631      	mov	r1, r6
 800aabc:	4620      	mov	r0, r4
 800aabe:	f001 f983 	bl	800bdc8 <__mdiff>
 800aac2:	68c2      	ldr	r2, [r0, #12]
 800aac4:	9b08      	ldr	r3, [sp, #32]
 800aac6:	4605      	mov	r5, r0
 800aac8:	bb02      	cbnz	r2, 800ab0c <_dtoa_r+0xa7c>
 800aaca:	4601      	mov	r1, r0
 800aacc:	4658      	mov	r0, fp
 800aace:	f001 f95f 	bl	800bd90 <__mcmp>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	4602      	mov	r2, r0
 800aad6:	4629      	mov	r1, r5
 800aad8:	4620      	mov	r0, r4
 800aada:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aade:	f000 fecf 	bl	800b880 <_Bfree>
 800aae2:	9b05      	ldr	r3, [sp, #20]
 800aae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aae6:	9d01      	ldr	r5, [sp, #4]
 800aae8:	ea43 0102 	orr.w	r1, r3, r2
 800aaec:	9b06      	ldr	r3, [sp, #24]
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	9b08      	ldr	r3, [sp, #32]
 800aaf2:	d10d      	bne.n	800ab10 <_dtoa_r+0xa80>
 800aaf4:	2b39      	cmp	r3, #57	; 0x39
 800aaf6:	d029      	beq.n	800ab4c <_dtoa_r+0xabc>
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	dd01      	ble.n	800ab02 <_dtoa_r+0xa72>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	3331      	adds	r3, #49	; 0x31
 800ab02:	9a02      	ldr	r2, [sp, #8]
 800ab04:	7013      	strb	r3, [r2, #0]
 800ab06:	e774      	b.n	800a9f2 <_dtoa_r+0x962>
 800ab08:	4638      	mov	r0, r7
 800ab0a:	e7b9      	b.n	800aa80 <_dtoa_r+0x9f0>
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	e7e2      	b.n	800aad6 <_dtoa_r+0xa46>
 800ab10:	f1b9 0f00 	cmp.w	r9, #0
 800ab14:	db06      	blt.n	800ab24 <_dtoa_r+0xa94>
 800ab16:	9905      	ldr	r1, [sp, #20]
 800ab18:	ea41 0909 	orr.w	r9, r1, r9
 800ab1c:	9906      	ldr	r1, [sp, #24]
 800ab1e:	ea59 0101 	orrs.w	r1, r9, r1
 800ab22:	d120      	bne.n	800ab66 <_dtoa_r+0xad6>
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	ddec      	ble.n	800ab02 <_dtoa_r+0xa72>
 800ab28:	4659      	mov	r1, fp
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	f001 f8c2 	bl	800bcb8 <__lshift>
 800ab34:	4631      	mov	r1, r6
 800ab36:	4683      	mov	fp, r0
 800ab38:	f001 f92a 	bl	800bd90 <__mcmp>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	dc02      	bgt.n	800ab48 <_dtoa_r+0xab8>
 800ab42:	d1de      	bne.n	800ab02 <_dtoa_r+0xa72>
 800ab44:	07da      	lsls	r2, r3, #31
 800ab46:	d5dc      	bpl.n	800ab02 <_dtoa_r+0xa72>
 800ab48:	2b39      	cmp	r3, #57	; 0x39
 800ab4a:	d1d8      	bne.n	800aafe <_dtoa_r+0xa6e>
 800ab4c:	9a02      	ldr	r2, [sp, #8]
 800ab4e:	2339      	movs	r3, #57	; 0x39
 800ab50:	7013      	strb	r3, [r2, #0]
 800ab52:	462b      	mov	r3, r5
 800ab54:	461d      	mov	r5, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab5c:	2a39      	cmp	r2, #57	; 0x39
 800ab5e:	d050      	beq.n	800ac02 <_dtoa_r+0xb72>
 800ab60:	3201      	adds	r2, #1
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	e745      	b.n	800a9f2 <_dtoa_r+0x962>
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	dd03      	ble.n	800ab72 <_dtoa_r+0xae2>
 800ab6a:	2b39      	cmp	r3, #57	; 0x39
 800ab6c:	d0ee      	beq.n	800ab4c <_dtoa_r+0xabc>
 800ab6e:	3301      	adds	r3, #1
 800ab70:	e7c7      	b.n	800ab02 <_dtoa_r+0xa72>
 800ab72:	9a01      	ldr	r2, [sp, #4]
 800ab74:	9907      	ldr	r1, [sp, #28]
 800ab76:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab7a:	428a      	cmp	r2, r1
 800ab7c:	d02a      	beq.n	800abd4 <_dtoa_r+0xb44>
 800ab7e:	4659      	mov	r1, fp
 800ab80:	2300      	movs	r3, #0
 800ab82:	220a      	movs	r2, #10
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fe9d 	bl	800b8c4 <__multadd>
 800ab8a:	45b8      	cmp	r8, r7
 800ab8c:	4683      	mov	fp, r0
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	f04f 020a 	mov.w	r2, #10
 800ab96:	4641      	mov	r1, r8
 800ab98:	4620      	mov	r0, r4
 800ab9a:	d107      	bne.n	800abac <_dtoa_r+0xb1c>
 800ab9c:	f000 fe92 	bl	800b8c4 <__multadd>
 800aba0:	4680      	mov	r8, r0
 800aba2:	4607      	mov	r7, r0
 800aba4:	9b01      	ldr	r3, [sp, #4]
 800aba6:	3301      	adds	r3, #1
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	e775      	b.n	800aa98 <_dtoa_r+0xa08>
 800abac:	f000 fe8a 	bl	800b8c4 <__multadd>
 800abb0:	4639      	mov	r1, r7
 800abb2:	4680      	mov	r8, r0
 800abb4:	2300      	movs	r3, #0
 800abb6:	220a      	movs	r2, #10
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fe83 	bl	800b8c4 <__multadd>
 800abbe:	4607      	mov	r7, r0
 800abc0:	e7f0      	b.n	800aba4 <_dtoa_r+0xb14>
 800abc2:	f1b9 0f00 	cmp.w	r9, #0
 800abc6:	9a00      	ldr	r2, [sp, #0]
 800abc8:	bfcc      	ite	gt
 800abca:	464d      	movgt	r5, r9
 800abcc:	2501      	movle	r5, #1
 800abce:	4415      	add	r5, r2
 800abd0:	f04f 0800 	mov.w	r8, #0
 800abd4:	4659      	mov	r1, fp
 800abd6:	2201      	movs	r2, #1
 800abd8:	4620      	mov	r0, r4
 800abda:	9301      	str	r3, [sp, #4]
 800abdc:	f001 f86c 	bl	800bcb8 <__lshift>
 800abe0:	4631      	mov	r1, r6
 800abe2:	4683      	mov	fp, r0
 800abe4:	f001 f8d4 	bl	800bd90 <__mcmp>
 800abe8:	2800      	cmp	r0, #0
 800abea:	dcb2      	bgt.n	800ab52 <_dtoa_r+0xac2>
 800abec:	d102      	bne.n	800abf4 <_dtoa_r+0xb64>
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	07db      	lsls	r3, r3, #31
 800abf2:	d4ae      	bmi.n	800ab52 <_dtoa_r+0xac2>
 800abf4:	462b      	mov	r3, r5
 800abf6:	461d      	mov	r5, r3
 800abf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abfc:	2a30      	cmp	r2, #48	; 0x30
 800abfe:	d0fa      	beq.n	800abf6 <_dtoa_r+0xb66>
 800ac00:	e6f7      	b.n	800a9f2 <_dtoa_r+0x962>
 800ac02:	9a00      	ldr	r2, [sp, #0]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d1a5      	bne.n	800ab54 <_dtoa_r+0xac4>
 800ac08:	f10a 0a01 	add.w	sl, sl, #1
 800ac0c:	2331      	movs	r3, #49	; 0x31
 800ac0e:	e779      	b.n	800ab04 <_dtoa_r+0xa74>
 800ac10:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <_dtoa_r+0xbd0>)
 800ac12:	f7ff baaf 	b.w	800a174 <_dtoa_r+0xe4>
 800ac16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f47f aa86 	bne.w	800a12a <_dtoa_r+0x9a>
 800ac1e:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <_dtoa_r+0xbd4>)
 800ac20:	f7ff baa8 	b.w	800a174 <_dtoa_r+0xe4>
 800ac24:	f1b9 0f00 	cmp.w	r9, #0
 800ac28:	dc03      	bgt.n	800ac32 <_dtoa_r+0xba2>
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	f73f aec9 	bgt.w	800a9c4 <_dtoa_r+0x934>
 800ac32:	9d00      	ldr	r5, [sp, #0]
 800ac34:	4631      	mov	r1, r6
 800ac36:	4658      	mov	r0, fp
 800ac38:	f7ff f99e 	bl	8009f78 <quorem>
 800ac3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac40:	f805 3b01 	strb.w	r3, [r5], #1
 800ac44:	9a00      	ldr	r2, [sp, #0]
 800ac46:	1aaa      	subs	r2, r5, r2
 800ac48:	4591      	cmp	r9, r2
 800ac4a:	ddba      	ble.n	800abc2 <_dtoa_r+0xb32>
 800ac4c:	4659      	mov	r1, fp
 800ac4e:	2300      	movs	r3, #0
 800ac50:	220a      	movs	r2, #10
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 fe36 	bl	800b8c4 <__multadd>
 800ac58:	4683      	mov	fp, r0
 800ac5a:	e7eb      	b.n	800ac34 <_dtoa_r+0xba4>
 800ac5c:	0800ec51 	.word	0x0800ec51
 800ac60:	0800e9b4 	.word	0x0800e9b4
 800ac64:	0800ebe5 	.word	0x0800ebe5

0800ac68 <__sflush_r>:
 800ac68:	898a      	ldrh	r2, [r1, #12]
 800ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	4605      	mov	r5, r0
 800ac70:	0710      	lsls	r0, r2, #28
 800ac72:	460c      	mov	r4, r1
 800ac74:	d458      	bmi.n	800ad28 <__sflush_r+0xc0>
 800ac76:	684b      	ldr	r3, [r1, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc05      	bgt.n	800ac88 <__sflush_r+0x20>
 800ac7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dc02      	bgt.n	800ac88 <__sflush_r+0x20>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac8a:	2e00      	cmp	r6, #0
 800ac8c:	d0f9      	beq.n	800ac82 <__sflush_r+0x1a>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac94:	682f      	ldr	r7, [r5, #0]
 800ac96:	602b      	str	r3, [r5, #0]
 800ac98:	d032      	beq.n	800ad00 <__sflush_r+0x98>
 800ac9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	075a      	lsls	r2, r3, #29
 800aca0:	d505      	bpl.n	800acae <__sflush_r+0x46>
 800aca2:	6863      	ldr	r3, [r4, #4]
 800aca4:	1ac0      	subs	r0, r0, r3
 800aca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aca8:	b10b      	cbz	r3, 800acae <__sflush_r+0x46>
 800acaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acac:	1ac0      	subs	r0, r0, r3
 800acae:	2300      	movs	r3, #0
 800acb0:	4602      	mov	r2, r0
 800acb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acb4:	6a21      	ldr	r1, [r4, #32]
 800acb6:	4628      	mov	r0, r5
 800acb8:	47b0      	blx	r6
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	d106      	bne.n	800acce <__sflush_r+0x66>
 800acc0:	6829      	ldr	r1, [r5, #0]
 800acc2:	291d      	cmp	r1, #29
 800acc4:	d82c      	bhi.n	800ad20 <__sflush_r+0xb8>
 800acc6:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <__sflush_r+0x108>)
 800acc8:	40ca      	lsrs	r2, r1
 800acca:	07d6      	lsls	r6, r2, #31
 800accc:	d528      	bpl.n	800ad20 <__sflush_r+0xb8>
 800acce:	2200      	movs	r2, #0
 800acd0:	6062      	str	r2, [r4, #4]
 800acd2:	04d9      	lsls	r1, r3, #19
 800acd4:	6922      	ldr	r2, [r4, #16]
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	d504      	bpl.n	800ace4 <__sflush_r+0x7c>
 800acda:	1c42      	adds	r2, r0, #1
 800acdc:	d101      	bne.n	800ace2 <__sflush_r+0x7a>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b903      	cbnz	r3, 800ace4 <__sflush_r+0x7c>
 800ace2:	6560      	str	r0, [r4, #84]	; 0x54
 800ace4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ace6:	602f      	str	r7, [r5, #0]
 800ace8:	2900      	cmp	r1, #0
 800acea:	d0ca      	beq.n	800ac82 <__sflush_r+0x1a>
 800acec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <__sflush_r+0x92>
 800acf4:	4628      	mov	r0, r5
 800acf6:	f001 fa4d 	bl	800c194 <_free_r>
 800acfa:	2000      	movs	r0, #0
 800acfc:	6360      	str	r0, [r4, #52]	; 0x34
 800acfe:	e7c1      	b.n	800ac84 <__sflush_r+0x1c>
 800ad00:	6a21      	ldr	r1, [r4, #32]
 800ad02:	2301      	movs	r3, #1
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b0      	blx	r6
 800ad08:	1c41      	adds	r1, r0, #1
 800ad0a:	d1c7      	bne.n	800ac9c <__sflush_r+0x34>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0c4      	beq.n	800ac9c <__sflush_r+0x34>
 800ad12:	2b1d      	cmp	r3, #29
 800ad14:	d001      	beq.n	800ad1a <__sflush_r+0xb2>
 800ad16:	2b16      	cmp	r3, #22
 800ad18:	d101      	bne.n	800ad1e <__sflush_r+0xb6>
 800ad1a:	602f      	str	r7, [r5, #0]
 800ad1c:	e7b1      	b.n	800ac82 <__sflush_r+0x1a>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	e7ad      	b.n	800ac84 <__sflush_r+0x1c>
 800ad28:	690f      	ldr	r7, [r1, #16]
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	d0a9      	beq.n	800ac82 <__sflush_r+0x1a>
 800ad2e:	0793      	lsls	r3, r2, #30
 800ad30:	680e      	ldr	r6, [r1, #0]
 800ad32:	bf08      	it	eq
 800ad34:	694b      	ldreq	r3, [r1, #20]
 800ad36:	600f      	str	r7, [r1, #0]
 800ad38:	bf18      	it	ne
 800ad3a:	2300      	movne	r3, #0
 800ad3c:	eba6 0807 	sub.w	r8, r6, r7
 800ad40:	608b      	str	r3, [r1, #8]
 800ad42:	f1b8 0f00 	cmp.w	r8, #0
 800ad46:	dd9c      	ble.n	800ac82 <__sflush_r+0x1a>
 800ad48:	6a21      	ldr	r1, [r4, #32]
 800ad4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad4c:	4643      	mov	r3, r8
 800ad4e:	463a      	mov	r2, r7
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b0      	blx	r6
 800ad54:	2800      	cmp	r0, #0
 800ad56:	dc06      	bgt.n	800ad66 <__sflush_r+0xfe>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	e78e      	b.n	800ac84 <__sflush_r+0x1c>
 800ad66:	4407      	add	r7, r0
 800ad68:	eba8 0800 	sub.w	r8, r8, r0
 800ad6c:	e7e9      	b.n	800ad42 <__sflush_r+0xda>
 800ad6e:	bf00      	nop
 800ad70:	20400001 	.word	0x20400001

0800ad74 <_fflush_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	690b      	ldr	r3, [r1, #16]
 800ad78:	4605      	mov	r5, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	b913      	cbnz	r3, 800ad84 <_fflush_r+0x10>
 800ad7e:	2500      	movs	r5, #0
 800ad80:	4628      	mov	r0, r5
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	b118      	cbz	r0, 800ad8e <_fflush_r+0x1a>
 800ad86:	6983      	ldr	r3, [r0, #24]
 800ad88:	b90b      	cbnz	r3, 800ad8e <_fflush_r+0x1a>
 800ad8a:	f000 f887 	bl	800ae9c <__sinit>
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <_fflush_r+0x6c>)
 800ad90:	429c      	cmp	r4, r3
 800ad92:	d11b      	bne.n	800adcc <_fflush_r+0x58>
 800ad94:	686c      	ldr	r4, [r5, #4]
 800ad96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0ef      	beq.n	800ad7e <_fflush_r+0xa>
 800ad9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ada0:	07d0      	lsls	r0, r2, #31
 800ada2:	d404      	bmi.n	800adae <_fflush_r+0x3a>
 800ada4:	0599      	lsls	r1, r3, #22
 800ada6:	d402      	bmi.n	800adae <_fflush_r+0x3a>
 800ada8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adaa:	f000 fc9a 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 800adae:	4628      	mov	r0, r5
 800adb0:	4621      	mov	r1, r4
 800adb2:	f7ff ff59 	bl	800ac68 <__sflush_r>
 800adb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adb8:	07da      	lsls	r2, r3, #31
 800adba:	4605      	mov	r5, r0
 800adbc:	d4e0      	bmi.n	800ad80 <_fflush_r+0xc>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	059b      	lsls	r3, r3, #22
 800adc2:	d4dd      	bmi.n	800ad80 <_fflush_r+0xc>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f000 fc8d 	bl	800b6e4 <__retarget_lock_release_recursive>
 800adca:	e7d9      	b.n	800ad80 <_fflush_r+0xc>
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <_fflush_r+0x70>)
 800adce:	429c      	cmp	r4, r3
 800add0:	d101      	bne.n	800add6 <_fflush_r+0x62>
 800add2:	68ac      	ldr	r4, [r5, #8]
 800add4:	e7df      	b.n	800ad96 <_fflush_r+0x22>
 800add6:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <_fflush_r+0x74>)
 800add8:	429c      	cmp	r4, r3
 800adda:	bf08      	it	eq
 800addc:	68ec      	ldreq	r4, [r5, #12]
 800adde:	e7da      	b.n	800ad96 <_fflush_r+0x22>
 800ade0:	0800ec84 	.word	0x0800ec84
 800ade4:	0800eca4 	.word	0x0800eca4
 800ade8:	0800ec64 	.word	0x0800ec64

0800adec <std>:
 800adec:	2300      	movs	r3, #0
 800adee:	b510      	push	{r4, lr}
 800adf0:	4604      	mov	r4, r0
 800adf2:	e9c0 3300 	strd	r3, r3, [r0]
 800adf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adfa:	6083      	str	r3, [r0, #8]
 800adfc:	8181      	strh	r1, [r0, #12]
 800adfe:	6643      	str	r3, [r0, #100]	; 0x64
 800ae00:	81c2      	strh	r2, [r0, #14]
 800ae02:	6183      	str	r3, [r0, #24]
 800ae04:	4619      	mov	r1, r3
 800ae06:	2208      	movs	r2, #8
 800ae08:	305c      	adds	r0, #92	; 0x5c
 800ae0a:	f7fd f94b 	bl	80080a4 <memset>
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <std+0x38>)
 800ae10:	6263      	str	r3, [r4, #36]	; 0x24
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <std+0x3c>)
 800ae14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae16:	4b05      	ldr	r3, [pc, #20]	; (800ae2c <std+0x40>)
 800ae18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae1a:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <std+0x44>)
 800ae1c:	6224      	str	r4, [r4, #32]
 800ae1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae20:	bd10      	pop	{r4, pc}
 800ae22:	bf00      	nop
 800ae24:	0800c919 	.word	0x0800c919
 800ae28:	0800c93b 	.word	0x0800c93b
 800ae2c:	0800c973 	.word	0x0800c973
 800ae30:	0800c997 	.word	0x0800c997

0800ae34 <_cleanup_r>:
 800ae34:	4901      	ldr	r1, [pc, #4]	; (800ae3c <_cleanup_r+0x8>)
 800ae36:	f000 b8c1 	b.w	800afbc <_fwalk_reent>
 800ae3a:	bf00      	nop
 800ae3c:	0800ad75 	.word	0x0800ad75

0800ae40 <__sfmoreglue>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	1e4a      	subs	r2, r1, #1
 800ae44:	2568      	movs	r5, #104	; 0x68
 800ae46:	4355      	muls	r5, r2
 800ae48:	460e      	mov	r6, r1
 800ae4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae4e:	f001 f9f1 	bl	800c234 <_malloc_r>
 800ae52:	4604      	mov	r4, r0
 800ae54:	b140      	cbz	r0, 800ae68 <__sfmoreglue+0x28>
 800ae56:	2100      	movs	r1, #0
 800ae58:	e9c0 1600 	strd	r1, r6, [r0]
 800ae5c:	300c      	adds	r0, #12
 800ae5e:	60a0      	str	r0, [r4, #8]
 800ae60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae64:	f7fd f91e 	bl	80080a4 <memset>
 800ae68:	4620      	mov	r0, r4
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}

0800ae6c <__sfp_lock_acquire>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	; (800ae74 <__sfp_lock_acquire+0x8>)
 800ae6e:	f000 bc38 	b.w	800b6e2 <__retarget_lock_acquire_recursive>
 800ae72:	bf00      	nop
 800ae74:	2000089c 	.word	0x2000089c

0800ae78 <__sfp_lock_release>:
 800ae78:	4801      	ldr	r0, [pc, #4]	; (800ae80 <__sfp_lock_release+0x8>)
 800ae7a:	f000 bc33 	b.w	800b6e4 <__retarget_lock_release_recursive>
 800ae7e:	bf00      	nop
 800ae80:	2000089c 	.word	0x2000089c

0800ae84 <__sinit_lock_acquire>:
 800ae84:	4801      	ldr	r0, [pc, #4]	; (800ae8c <__sinit_lock_acquire+0x8>)
 800ae86:	f000 bc2c 	b.w	800b6e2 <__retarget_lock_acquire_recursive>
 800ae8a:	bf00      	nop
 800ae8c:	20000897 	.word	0x20000897

0800ae90 <__sinit_lock_release>:
 800ae90:	4801      	ldr	r0, [pc, #4]	; (800ae98 <__sinit_lock_release+0x8>)
 800ae92:	f000 bc27 	b.w	800b6e4 <__retarget_lock_release_recursive>
 800ae96:	bf00      	nop
 800ae98:	20000897 	.word	0x20000897

0800ae9c <__sinit>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	4604      	mov	r4, r0
 800aea0:	f7ff fff0 	bl	800ae84 <__sinit_lock_acquire>
 800aea4:	69a3      	ldr	r3, [r4, #24]
 800aea6:	b11b      	cbz	r3, 800aeb0 <__sinit+0x14>
 800aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeac:	f7ff bff0 	b.w	800ae90 <__sinit_lock_release>
 800aeb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aeb4:	6523      	str	r3, [r4, #80]	; 0x50
 800aeb6:	4b13      	ldr	r3, [pc, #76]	; (800af04 <__sinit+0x68>)
 800aeb8:	4a13      	ldr	r2, [pc, #76]	; (800af08 <__sinit+0x6c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	bf04      	itt	eq
 800aec2:	2301      	moveq	r3, #1
 800aec4:	61a3      	streq	r3, [r4, #24]
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 f820 	bl	800af0c <__sfp>
 800aecc:	6060      	str	r0, [r4, #4]
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 f81c 	bl	800af0c <__sfp>
 800aed4:	60a0      	str	r0, [r4, #8]
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 f818 	bl	800af0c <__sfp>
 800aedc:	2200      	movs	r2, #0
 800aede:	60e0      	str	r0, [r4, #12]
 800aee0:	2104      	movs	r1, #4
 800aee2:	6860      	ldr	r0, [r4, #4]
 800aee4:	f7ff ff82 	bl	800adec <std>
 800aee8:	68a0      	ldr	r0, [r4, #8]
 800aeea:	2201      	movs	r2, #1
 800aeec:	2109      	movs	r1, #9
 800aeee:	f7ff ff7d 	bl	800adec <std>
 800aef2:	68e0      	ldr	r0, [r4, #12]
 800aef4:	2202      	movs	r2, #2
 800aef6:	2112      	movs	r1, #18
 800aef8:	f7ff ff78 	bl	800adec <std>
 800aefc:	2301      	movs	r3, #1
 800aefe:	61a3      	str	r3, [r4, #24]
 800af00:	e7d2      	b.n	800aea8 <__sinit+0xc>
 800af02:	bf00      	nop
 800af04:	0800e9a0 	.word	0x0800e9a0
 800af08:	0800ae35 	.word	0x0800ae35

0800af0c <__sfp>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	4607      	mov	r7, r0
 800af10:	f7ff ffac 	bl	800ae6c <__sfp_lock_acquire>
 800af14:	4b1e      	ldr	r3, [pc, #120]	; (800af90 <__sfp+0x84>)
 800af16:	681e      	ldr	r6, [r3, #0]
 800af18:	69b3      	ldr	r3, [r6, #24]
 800af1a:	b913      	cbnz	r3, 800af22 <__sfp+0x16>
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff ffbd 	bl	800ae9c <__sinit>
 800af22:	3648      	adds	r6, #72	; 0x48
 800af24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af28:	3b01      	subs	r3, #1
 800af2a:	d503      	bpl.n	800af34 <__sfp+0x28>
 800af2c:	6833      	ldr	r3, [r6, #0]
 800af2e:	b30b      	cbz	r3, 800af74 <__sfp+0x68>
 800af30:	6836      	ldr	r6, [r6, #0]
 800af32:	e7f7      	b.n	800af24 <__sfp+0x18>
 800af34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af38:	b9d5      	cbnz	r5, 800af70 <__sfp+0x64>
 800af3a:	4b16      	ldr	r3, [pc, #88]	; (800af94 <__sfp+0x88>)
 800af3c:	60e3      	str	r3, [r4, #12]
 800af3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af42:	6665      	str	r5, [r4, #100]	; 0x64
 800af44:	f000 fbcc 	bl	800b6e0 <__retarget_lock_init_recursive>
 800af48:	f7ff ff96 	bl	800ae78 <__sfp_lock_release>
 800af4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af54:	6025      	str	r5, [r4, #0]
 800af56:	61a5      	str	r5, [r4, #24]
 800af58:	2208      	movs	r2, #8
 800af5a:	4629      	mov	r1, r5
 800af5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af60:	f7fd f8a0 	bl	80080a4 <memset>
 800af64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af6c:	4620      	mov	r0, r4
 800af6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af70:	3468      	adds	r4, #104	; 0x68
 800af72:	e7d9      	b.n	800af28 <__sfp+0x1c>
 800af74:	2104      	movs	r1, #4
 800af76:	4638      	mov	r0, r7
 800af78:	f7ff ff62 	bl	800ae40 <__sfmoreglue>
 800af7c:	4604      	mov	r4, r0
 800af7e:	6030      	str	r0, [r6, #0]
 800af80:	2800      	cmp	r0, #0
 800af82:	d1d5      	bne.n	800af30 <__sfp+0x24>
 800af84:	f7ff ff78 	bl	800ae78 <__sfp_lock_release>
 800af88:	230c      	movs	r3, #12
 800af8a:	603b      	str	r3, [r7, #0]
 800af8c:	e7ee      	b.n	800af6c <__sfp+0x60>
 800af8e:	bf00      	nop
 800af90:	0800e9a0 	.word	0x0800e9a0
 800af94:	ffff0001 	.word	0xffff0001

0800af98 <fiprintf>:
 800af98:	b40e      	push	{r1, r2, r3}
 800af9a:	b503      	push	{r0, r1, lr}
 800af9c:	4601      	mov	r1, r0
 800af9e:	ab03      	add	r3, sp, #12
 800afa0:	4805      	ldr	r0, [pc, #20]	; (800afb8 <fiprintf+0x20>)
 800afa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa6:	6800      	ldr	r0, [r0, #0]
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	f001 fb23 	bl	800c5f4 <_vfiprintf_r>
 800afae:	b002      	add	sp, #8
 800afb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afb4:	b003      	add	sp, #12
 800afb6:	4770      	bx	lr
 800afb8:	2000000c 	.word	0x2000000c

0800afbc <_fwalk_reent>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	4606      	mov	r6, r0
 800afc2:	4688      	mov	r8, r1
 800afc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afc8:	2700      	movs	r7, #0
 800afca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afce:	f1b9 0901 	subs.w	r9, r9, #1
 800afd2:	d505      	bpl.n	800afe0 <_fwalk_reent+0x24>
 800afd4:	6824      	ldr	r4, [r4, #0]
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	d1f7      	bne.n	800afca <_fwalk_reent+0xe>
 800afda:	4638      	mov	r0, r7
 800afdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe0:	89ab      	ldrh	r3, [r5, #12]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d907      	bls.n	800aff6 <_fwalk_reent+0x3a>
 800afe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afea:	3301      	adds	r3, #1
 800afec:	d003      	beq.n	800aff6 <_fwalk_reent+0x3a>
 800afee:	4629      	mov	r1, r5
 800aff0:	4630      	mov	r0, r6
 800aff2:	47c0      	blx	r8
 800aff4:	4307      	orrs	r7, r0
 800aff6:	3568      	adds	r5, #104	; 0x68
 800aff8:	e7e9      	b.n	800afce <_fwalk_reent+0x12>

0800affa <rshift>:
 800affa:	6903      	ldr	r3, [r0, #16]
 800affc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b004:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b008:	f100 0414 	add.w	r4, r0, #20
 800b00c:	dd45      	ble.n	800b09a <rshift+0xa0>
 800b00e:	f011 011f 	ands.w	r1, r1, #31
 800b012:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b016:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b01a:	d10c      	bne.n	800b036 <rshift+0x3c>
 800b01c:	f100 0710 	add.w	r7, r0, #16
 800b020:	4629      	mov	r1, r5
 800b022:	42b1      	cmp	r1, r6
 800b024:	d334      	bcc.n	800b090 <rshift+0x96>
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	1eea      	subs	r2, r5, #3
 800b02c:	4296      	cmp	r6, r2
 800b02e:	bf38      	it	cc
 800b030:	2300      	movcc	r3, #0
 800b032:	4423      	add	r3, r4
 800b034:	e015      	b.n	800b062 <rshift+0x68>
 800b036:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b03a:	f1c1 0820 	rsb	r8, r1, #32
 800b03e:	40cf      	lsrs	r7, r1
 800b040:	f105 0e04 	add.w	lr, r5, #4
 800b044:	46a1      	mov	r9, r4
 800b046:	4576      	cmp	r6, lr
 800b048:	46f4      	mov	ip, lr
 800b04a:	d815      	bhi.n	800b078 <rshift+0x7e>
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	009a      	lsls	r2, r3, #2
 800b050:	3a04      	subs	r2, #4
 800b052:	3501      	adds	r5, #1
 800b054:	42ae      	cmp	r6, r5
 800b056:	bf38      	it	cc
 800b058:	2200      	movcc	r2, #0
 800b05a:	18a3      	adds	r3, r4, r2
 800b05c:	50a7      	str	r7, [r4, r2]
 800b05e:	b107      	cbz	r7, 800b062 <rshift+0x68>
 800b060:	3304      	adds	r3, #4
 800b062:	1b1a      	subs	r2, r3, r4
 800b064:	42a3      	cmp	r3, r4
 800b066:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b06a:	bf08      	it	eq
 800b06c:	2300      	moveq	r3, #0
 800b06e:	6102      	str	r2, [r0, #16]
 800b070:	bf08      	it	eq
 800b072:	6143      	streq	r3, [r0, #20]
 800b074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b078:	f8dc c000 	ldr.w	ip, [ip]
 800b07c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b080:	ea4c 0707 	orr.w	r7, ip, r7
 800b084:	f849 7b04 	str.w	r7, [r9], #4
 800b088:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b08c:	40cf      	lsrs	r7, r1
 800b08e:	e7da      	b.n	800b046 <rshift+0x4c>
 800b090:	f851 cb04 	ldr.w	ip, [r1], #4
 800b094:	f847 cf04 	str.w	ip, [r7, #4]!
 800b098:	e7c3      	b.n	800b022 <rshift+0x28>
 800b09a:	4623      	mov	r3, r4
 800b09c:	e7e1      	b.n	800b062 <rshift+0x68>

0800b09e <__hexdig_fun>:
 800b09e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0a2:	2b09      	cmp	r3, #9
 800b0a4:	d802      	bhi.n	800b0ac <__hexdig_fun+0xe>
 800b0a6:	3820      	subs	r0, #32
 800b0a8:	b2c0      	uxtb	r0, r0
 800b0aa:	4770      	bx	lr
 800b0ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0b0:	2b05      	cmp	r3, #5
 800b0b2:	d801      	bhi.n	800b0b8 <__hexdig_fun+0x1a>
 800b0b4:	3847      	subs	r0, #71	; 0x47
 800b0b6:	e7f7      	b.n	800b0a8 <__hexdig_fun+0xa>
 800b0b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d801      	bhi.n	800b0c4 <__hexdig_fun+0x26>
 800b0c0:	3827      	subs	r0, #39	; 0x27
 800b0c2:	e7f1      	b.n	800b0a8 <__hexdig_fun+0xa>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	4770      	bx	lr

0800b0c8 <__gethex>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	ed2d 8b02 	vpush	{d8}
 800b0d0:	b089      	sub	sp, #36	; 0x24
 800b0d2:	ee08 0a10 	vmov	s16, r0
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	4bbc      	ldr	r3, [pc, #752]	; (800b3cc <__gethex+0x304>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	468b      	mov	fp, r1
 800b0e2:	4690      	mov	r8, r2
 800b0e4:	f7f5 f8a6 	bl	8000234 <strlen>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	f8db 2000 	ldr.w	r2, [fp]
 800b0ee:	4403      	add	r3, r0
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b0f6:	9305      	str	r3, [sp, #20]
 800b0f8:	1c93      	adds	r3, r2, #2
 800b0fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b102:	32fe      	adds	r2, #254	; 0xfe
 800b104:	18d1      	adds	r1, r2, r3
 800b106:	461f      	mov	r7, r3
 800b108:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b10c:	9100      	str	r1, [sp, #0]
 800b10e:	2830      	cmp	r0, #48	; 0x30
 800b110:	d0f8      	beq.n	800b104 <__gethex+0x3c>
 800b112:	f7ff ffc4 	bl	800b09e <__hexdig_fun>
 800b116:	4604      	mov	r4, r0
 800b118:	2800      	cmp	r0, #0
 800b11a:	d13a      	bne.n	800b192 <__gethex+0xca>
 800b11c:	9901      	ldr	r1, [sp, #4]
 800b11e:	4652      	mov	r2, sl
 800b120:	4638      	mov	r0, r7
 800b122:	f001 fc3c 	bl	800c99e <strncmp>
 800b126:	4605      	mov	r5, r0
 800b128:	2800      	cmp	r0, #0
 800b12a:	d168      	bne.n	800b1fe <__gethex+0x136>
 800b12c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b130:	eb07 060a 	add.w	r6, r7, sl
 800b134:	f7ff ffb3 	bl	800b09e <__hexdig_fun>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d062      	beq.n	800b202 <__gethex+0x13a>
 800b13c:	4633      	mov	r3, r6
 800b13e:	7818      	ldrb	r0, [r3, #0]
 800b140:	2830      	cmp	r0, #48	; 0x30
 800b142:	461f      	mov	r7, r3
 800b144:	f103 0301 	add.w	r3, r3, #1
 800b148:	d0f9      	beq.n	800b13e <__gethex+0x76>
 800b14a:	f7ff ffa8 	bl	800b09e <__hexdig_fun>
 800b14e:	2301      	movs	r3, #1
 800b150:	fab0 f480 	clz	r4, r0
 800b154:	0964      	lsrs	r4, r4, #5
 800b156:	4635      	mov	r5, r6
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	463a      	mov	r2, r7
 800b15c:	4616      	mov	r6, r2
 800b15e:	3201      	adds	r2, #1
 800b160:	7830      	ldrb	r0, [r6, #0]
 800b162:	f7ff ff9c 	bl	800b09e <__hexdig_fun>
 800b166:	2800      	cmp	r0, #0
 800b168:	d1f8      	bne.n	800b15c <__gethex+0x94>
 800b16a:	9901      	ldr	r1, [sp, #4]
 800b16c:	4652      	mov	r2, sl
 800b16e:	4630      	mov	r0, r6
 800b170:	f001 fc15 	bl	800c99e <strncmp>
 800b174:	b980      	cbnz	r0, 800b198 <__gethex+0xd0>
 800b176:	b94d      	cbnz	r5, 800b18c <__gethex+0xc4>
 800b178:	eb06 050a 	add.w	r5, r6, sl
 800b17c:	462a      	mov	r2, r5
 800b17e:	4616      	mov	r6, r2
 800b180:	3201      	adds	r2, #1
 800b182:	7830      	ldrb	r0, [r6, #0]
 800b184:	f7ff ff8b 	bl	800b09e <__hexdig_fun>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1f8      	bne.n	800b17e <__gethex+0xb6>
 800b18c:	1bad      	subs	r5, r5, r6
 800b18e:	00ad      	lsls	r5, r5, #2
 800b190:	e004      	b.n	800b19c <__gethex+0xd4>
 800b192:	2400      	movs	r4, #0
 800b194:	4625      	mov	r5, r4
 800b196:	e7e0      	b.n	800b15a <__gethex+0x92>
 800b198:	2d00      	cmp	r5, #0
 800b19a:	d1f7      	bne.n	800b18c <__gethex+0xc4>
 800b19c:	7833      	ldrb	r3, [r6, #0]
 800b19e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1a2:	2b50      	cmp	r3, #80	; 0x50
 800b1a4:	d13b      	bne.n	800b21e <__gethex+0x156>
 800b1a6:	7873      	ldrb	r3, [r6, #1]
 800b1a8:	2b2b      	cmp	r3, #43	; 0x2b
 800b1aa:	d02c      	beq.n	800b206 <__gethex+0x13e>
 800b1ac:	2b2d      	cmp	r3, #45	; 0x2d
 800b1ae:	d02e      	beq.n	800b20e <__gethex+0x146>
 800b1b0:	1c71      	adds	r1, r6, #1
 800b1b2:	f04f 0900 	mov.w	r9, #0
 800b1b6:	7808      	ldrb	r0, [r1, #0]
 800b1b8:	f7ff ff71 	bl	800b09e <__hexdig_fun>
 800b1bc:	1e43      	subs	r3, r0, #1
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b18      	cmp	r3, #24
 800b1c2:	d82c      	bhi.n	800b21e <__gethex+0x156>
 800b1c4:	f1a0 0210 	sub.w	r2, r0, #16
 800b1c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1cc:	f7ff ff67 	bl	800b09e <__hexdig_fun>
 800b1d0:	1e43      	subs	r3, r0, #1
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b18      	cmp	r3, #24
 800b1d6:	d91d      	bls.n	800b214 <__gethex+0x14c>
 800b1d8:	f1b9 0f00 	cmp.w	r9, #0
 800b1dc:	d000      	beq.n	800b1e0 <__gethex+0x118>
 800b1de:	4252      	negs	r2, r2
 800b1e0:	4415      	add	r5, r2
 800b1e2:	f8cb 1000 	str.w	r1, [fp]
 800b1e6:	b1e4      	cbz	r4, 800b222 <__gethex+0x15a>
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	bf14      	ite	ne
 800b1ee:	2700      	movne	r7, #0
 800b1f0:	2706      	moveq	r7, #6
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	b009      	add	sp, #36	; 0x24
 800b1f6:	ecbd 8b02 	vpop	{d8}
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	463e      	mov	r6, r7
 800b200:	4625      	mov	r5, r4
 800b202:	2401      	movs	r4, #1
 800b204:	e7ca      	b.n	800b19c <__gethex+0xd4>
 800b206:	f04f 0900 	mov.w	r9, #0
 800b20a:	1cb1      	adds	r1, r6, #2
 800b20c:	e7d3      	b.n	800b1b6 <__gethex+0xee>
 800b20e:	f04f 0901 	mov.w	r9, #1
 800b212:	e7fa      	b.n	800b20a <__gethex+0x142>
 800b214:	230a      	movs	r3, #10
 800b216:	fb03 0202 	mla	r2, r3, r2, r0
 800b21a:	3a10      	subs	r2, #16
 800b21c:	e7d4      	b.n	800b1c8 <__gethex+0x100>
 800b21e:	4631      	mov	r1, r6
 800b220:	e7df      	b.n	800b1e2 <__gethex+0x11a>
 800b222:	1bf3      	subs	r3, r6, r7
 800b224:	3b01      	subs	r3, #1
 800b226:	4621      	mov	r1, r4
 800b228:	2b07      	cmp	r3, #7
 800b22a:	dc0b      	bgt.n	800b244 <__gethex+0x17c>
 800b22c:	ee18 0a10 	vmov	r0, s16
 800b230:	f000 fae6 	bl	800b800 <_Balloc>
 800b234:	4604      	mov	r4, r0
 800b236:	b940      	cbnz	r0, 800b24a <__gethex+0x182>
 800b238:	4b65      	ldr	r3, [pc, #404]	; (800b3d0 <__gethex+0x308>)
 800b23a:	4602      	mov	r2, r0
 800b23c:	21de      	movs	r1, #222	; 0xde
 800b23e:	4865      	ldr	r0, [pc, #404]	; (800b3d4 <__gethex+0x30c>)
 800b240:	f7fe fe7c 	bl	8009f3c <__assert_func>
 800b244:	3101      	adds	r1, #1
 800b246:	105b      	asrs	r3, r3, #1
 800b248:	e7ee      	b.n	800b228 <__gethex+0x160>
 800b24a:	f100 0914 	add.w	r9, r0, #20
 800b24e:	f04f 0b00 	mov.w	fp, #0
 800b252:	f1ca 0301 	rsb	r3, sl, #1
 800b256:	f8cd 9008 	str.w	r9, [sp, #8]
 800b25a:	f8cd b000 	str.w	fp, [sp]
 800b25e:	9306      	str	r3, [sp, #24]
 800b260:	42b7      	cmp	r7, r6
 800b262:	d340      	bcc.n	800b2e6 <__gethex+0x21e>
 800b264:	9802      	ldr	r0, [sp, #8]
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	f840 3b04 	str.w	r3, [r0], #4
 800b26c:	eba0 0009 	sub.w	r0, r0, r9
 800b270:	1080      	asrs	r0, r0, #2
 800b272:	0146      	lsls	r6, r0, #5
 800b274:	6120      	str	r0, [r4, #16]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fbb8 	bl	800b9ec <__hi0bits>
 800b27c:	1a30      	subs	r0, r6, r0
 800b27e:	f8d8 6000 	ldr.w	r6, [r8]
 800b282:	42b0      	cmp	r0, r6
 800b284:	dd63      	ble.n	800b34e <__gethex+0x286>
 800b286:	1b87      	subs	r7, r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 ff52 	bl	800c134 <__any_on>
 800b290:	4682      	mov	sl, r0
 800b292:	b1a8      	cbz	r0, 800b2c0 <__gethex+0x1f8>
 800b294:	1e7b      	subs	r3, r7, #1
 800b296:	1159      	asrs	r1, r3, #5
 800b298:	f003 021f 	and.w	r2, r3, #31
 800b29c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2a0:	f04f 0a01 	mov.w	sl, #1
 800b2a4:	fa0a f202 	lsl.w	r2, sl, r2
 800b2a8:	420a      	tst	r2, r1
 800b2aa:	d009      	beq.n	800b2c0 <__gethex+0x1f8>
 800b2ac:	4553      	cmp	r3, sl
 800b2ae:	dd05      	ble.n	800b2bc <__gethex+0x1f4>
 800b2b0:	1eb9      	subs	r1, r7, #2
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 ff3e 	bl	800c134 <__any_on>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d145      	bne.n	800b348 <__gethex+0x280>
 800b2bc:	f04f 0a02 	mov.w	sl, #2
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff fe99 	bl	800affa <rshift>
 800b2c8:	443d      	add	r5, r7
 800b2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2ce:	42ab      	cmp	r3, r5
 800b2d0:	da4c      	bge.n	800b36c <__gethex+0x2a4>
 800b2d2:	ee18 0a10 	vmov	r0, s16
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	f000 fad2 	bl	800b880 <_Bfree>
 800b2dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	27a3      	movs	r7, #163	; 0xa3
 800b2e4:	e785      	b.n	800b1f2 <__gethex+0x12a>
 800b2e6:	1e73      	subs	r3, r6, #1
 800b2e8:	9a05      	ldr	r2, [sp, #20]
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d019      	beq.n	800b328 <__gethex+0x260>
 800b2f4:	f1bb 0f20 	cmp.w	fp, #32
 800b2f8:	d107      	bne.n	800b30a <__gethex+0x242>
 800b2fa:	9b02      	ldr	r3, [sp, #8]
 800b2fc:	9a00      	ldr	r2, [sp, #0]
 800b2fe:	f843 2b04 	str.w	r2, [r3], #4
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	2300      	movs	r3, #0
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	469b      	mov	fp, r3
 800b30a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b30e:	f7ff fec6 	bl	800b09e <__hexdig_fun>
 800b312:	9b00      	ldr	r3, [sp, #0]
 800b314:	f000 000f 	and.w	r0, r0, #15
 800b318:	fa00 f00b 	lsl.w	r0, r0, fp
 800b31c:	4303      	orrs	r3, r0
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	f10b 0b04 	add.w	fp, fp, #4
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	e00d      	b.n	800b344 <__gethex+0x27c>
 800b328:	9b03      	ldr	r3, [sp, #12]
 800b32a:	9a06      	ldr	r2, [sp, #24]
 800b32c:	4413      	add	r3, r2
 800b32e:	42bb      	cmp	r3, r7
 800b330:	d3e0      	bcc.n	800b2f4 <__gethex+0x22c>
 800b332:	4618      	mov	r0, r3
 800b334:	9901      	ldr	r1, [sp, #4]
 800b336:	9307      	str	r3, [sp, #28]
 800b338:	4652      	mov	r2, sl
 800b33a:	f001 fb30 	bl	800c99e <strncmp>
 800b33e:	9b07      	ldr	r3, [sp, #28]
 800b340:	2800      	cmp	r0, #0
 800b342:	d1d7      	bne.n	800b2f4 <__gethex+0x22c>
 800b344:	461e      	mov	r6, r3
 800b346:	e78b      	b.n	800b260 <__gethex+0x198>
 800b348:	f04f 0a03 	mov.w	sl, #3
 800b34c:	e7b8      	b.n	800b2c0 <__gethex+0x1f8>
 800b34e:	da0a      	bge.n	800b366 <__gethex+0x29e>
 800b350:	1a37      	subs	r7, r6, r0
 800b352:	4621      	mov	r1, r4
 800b354:	ee18 0a10 	vmov	r0, s16
 800b358:	463a      	mov	r2, r7
 800b35a:	f000 fcad 	bl	800bcb8 <__lshift>
 800b35e:	1bed      	subs	r5, r5, r7
 800b360:	4604      	mov	r4, r0
 800b362:	f100 0914 	add.w	r9, r0, #20
 800b366:	f04f 0a00 	mov.w	sl, #0
 800b36a:	e7ae      	b.n	800b2ca <__gethex+0x202>
 800b36c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b370:	42a8      	cmp	r0, r5
 800b372:	dd72      	ble.n	800b45a <__gethex+0x392>
 800b374:	1b45      	subs	r5, r0, r5
 800b376:	42ae      	cmp	r6, r5
 800b378:	dc36      	bgt.n	800b3e8 <__gethex+0x320>
 800b37a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d02a      	beq.n	800b3d8 <__gethex+0x310>
 800b382:	2b03      	cmp	r3, #3
 800b384:	d02c      	beq.n	800b3e0 <__gethex+0x318>
 800b386:	2b01      	cmp	r3, #1
 800b388:	d115      	bne.n	800b3b6 <__gethex+0x2ee>
 800b38a:	42ae      	cmp	r6, r5
 800b38c:	d113      	bne.n	800b3b6 <__gethex+0x2ee>
 800b38e:	2e01      	cmp	r6, #1
 800b390:	d10b      	bne.n	800b3aa <__gethex+0x2e2>
 800b392:	9a04      	ldr	r2, [sp, #16]
 800b394:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	2301      	movs	r3, #1
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	f8c9 3000 	str.w	r3, [r9]
 800b3a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3a4:	2762      	movs	r7, #98	; 0x62
 800b3a6:	601c      	str	r4, [r3, #0]
 800b3a8:	e723      	b.n	800b1f2 <__gethex+0x12a>
 800b3aa:	1e71      	subs	r1, r6, #1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fec1 	bl	800c134 <__any_on>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d1ed      	bne.n	800b392 <__gethex+0x2ca>
 800b3b6:	ee18 0a10 	vmov	r0, s16
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	f000 fa60 	bl	800b880 <_Bfree>
 800b3c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	2750      	movs	r7, #80	; 0x50
 800b3c8:	e713      	b.n	800b1f2 <__gethex+0x12a>
 800b3ca:	bf00      	nop
 800b3cc:	0800ed30 	.word	0x0800ed30
 800b3d0:	0800ec51 	.word	0x0800ec51
 800b3d4:	0800ecc4 	.word	0x0800ecc4
 800b3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1eb      	bne.n	800b3b6 <__gethex+0x2ee>
 800b3de:	e7d8      	b.n	800b392 <__gethex+0x2ca>
 800b3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1d5      	bne.n	800b392 <__gethex+0x2ca>
 800b3e6:	e7e6      	b.n	800b3b6 <__gethex+0x2ee>
 800b3e8:	1e6f      	subs	r7, r5, #1
 800b3ea:	f1ba 0f00 	cmp.w	sl, #0
 800b3ee:	d131      	bne.n	800b454 <__gethex+0x38c>
 800b3f0:	b127      	cbz	r7, 800b3fc <__gethex+0x334>
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fe9d 	bl	800c134 <__any_on>
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	117b      	asrs	r3, r7, #5
 800b3fe:	2101      	movs	r1, #1
 800b400:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b404:	f007 071f 	and.w	r7, r7, #31
 800b408:	fa01 f707 	lsl.w	r7, r1, r7
 800b40c:	421f      	tst	r7, r3
 800b40e:	4629      	mov	r1, r5
 800b410:	4620      	mov	r0, r4
 800b412:	bf18      	it	ne
 800b414:	f04a 0a02 	orrne.w	sl, sl, #2
 800b418:	1b76      	subs	r6, r6, r5
 800b41a:	f7ff fdee 	bl	800affa <rshift>
 800b41e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b422:	2702      	movs	r7, #2
 800b424:	f1ba 0f00 	cmp.w	sl, #0
 800b428:	d048      	beq.n	800b4bc <__gethex+0x3f4>
 800b42a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d015      	beq.n	800b45e <__gethex+0x396>
 800b432:	2b03      	cmp	r3, #3
 800b434:	d017      	beq.n	800b466 <__gethex+0x39e>
 800b436:	2b01      	cmp	r3, #1
 800b438:	d109      	bne.n	800b44e <__gethex+0x386>
 800b43a:	f01a 0f02 	tst.w	sl, #2
 800b43e:	d006      	beq.n	800b44e <__gethex+0x386>
 800b440:	f8d9 0000 	ldr.w	r0, [r9]
 800b444:	ea4a 0a00 	orr.w	sl, sl, r0
 800b448:	f01a 0f01 	tst.w	sl, #1
 800b44c:	d10e      	bne.n	800b46c <__gethex+0x3a4>
 800b44e:	f047 0710 	orr.w	r7, r7, #16
 800b452:	e033      	b.n	800b4bc <__gethex+0x3f4>
 800b454:	f04f 0a01 	mov.w	sl, #1
 800b458:	e7d0      	b.n	800b3fc <__gethex+0x334>
 800b45a:	2701      	movs	r7, #1
 800b45c:	e7e2      	b.n	800b424 <__gethex+0x35c>
 800b45e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b460:	f1c3 0301 	rsb	r3, r3, #1
 800b464:	9315      	str	r3, [sp, #84]	; 0x54
 800b466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0f0      	beq.n	800b44e <__gethex+0x386>
 800b46c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b470:	f104 0314 	add.w	r3, r4, #20
 800b474:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b478:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b47c:	f04f 0c00 	mov.w	ip, #0
 800b480:	4618      	mov	r0, r3
 800b482:	f853 2b04 	ldr.w	r2, [r3], #4
 800b486:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b48a:	d01c      	beq.n	800b4c6 <__gethex+0x3fe>
 800b48c:	3201      	adds	r2, #1
 800b48e:	6002      	str	r2, [r0, #0]
 800b490:	2f02      	cmp	r7, #2
 800b492:	f104 0314 	add.w	r3, r4, #20
 800b496:	d13f      	bne.n	800b518 <__gethex+0x450>
 800b498:	f8d8 2000 	ldr.w	r2, [r8]
 800b49c:	3a01      	subs	r2, #1
 800b49e:	42b2      	cmp	r2, r6
 800b4a0:	d10a      	bne.n	800b4b8 <__gethex+0x3f0>
 800b4a2:	1171      	asrs	r1, r6, #5
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4aa:	f006 061f 	and.w	r6, r6, #31
 800b4ae:	fa02 f606 	lsl.w	r6, r2, r6
 800b4b2:	421e      	tst	r6, r3
 800b4b4:	bf18      	it	ne
 800b4b6:	4617      	movne	r7, r2
 800b4b8:	f047 0720 	orr.w	r7, r7, #32
 800b4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4be:	601c      	str	r4, [r3, #0]
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	601d      	str	r5, [r3, #0]
 800b4c4:	e695      	b.n	800b1f2 <__gethex+0x12a>
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4cc:	d8d8      	bhi.n	800b480 <__gethex+0x3b8>
 800b4ce:	68a3      	ldr	r3, [r4, #8]
 800b4d0:	459b      	cmp	fp, r3
 800b4d2:	db19      	blt.n	800b508 <__gethex+0x440>
 800b4d4:	6861      	ldr	r1, [r4, #4]
 800b4d6:	ee18 0a10 	vmov	r0, s16
 800b4da:	3101      	adds	r1, #1
 800b4dc:	f000 f990 	bl	800b800 <_Balloc>
 800b4e0:	4681      	mov	r9, r0
 800b4e2:	b918      	cbnz	r0, 800b4ec <__gethex+0x424>
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <__gethex+0x488>)
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	2184      	movs	r1, #132	; 0x84
 800b4ea:	e6a8      	b.n	800b23e <__gethex+0x176>
 800b4ec:	6922      	ldr	r2, [r4, #16]
 800b4ee:	3202      	adds	r2, #2
 800b4f0:	f104 010c 	add.w	r1, r4, #12
 800b4f4:	0092      	lsls	r2, r2, #2
 800b4f6:	300c      	adds	r0, #12
 800b4f8:	f000 f974 	bl	800b7e4 <memcpy>
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	ee18 0a10 	vmov	r0, s16
 800b502:	f000 f9bd 	bl	800b880 <_Bfree>
 800b506:	464c      	mov	r4, r9
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b510:	6122      	str	r2, [r4, #16]
 800b512:	2201      	movs	r2, #1
 800b514:	615a      	str	r2, [r3, #20]
 800b516:	e7bb      	b.n	800b490 <__gethex+0x3c8>
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	455a      	cmp	r2, fp
 800b51c:	dd0b      	ble.n	800b536 <__gethex+0x46e>
 800b51e:	2101      	movs	r1, #1
 800b520:	4620      	mov	r0, r4
 800b522:	f7ff fd6a 	bl	800affa <rshift>
 800b526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b52a:	3501      	adds	r5, #1
 800b52c:	42ab      	cmp	r3, r5
 800b52e:	f6ff aed0 	blt.w	800b2d2 <__gethex+0x20a>
 800b532:	2701      	movs	r7, #1
 800b534:	e7c0      	b.n	800b4b8 <__gethex+0x3f0>
 800b536:	f016 061f 	ands.w	r6, r6, #31
 800b53a:	d0fa      	beq.n	800b532 <__gethex+0x46a>
 800b53c:	449a      	add	sl, r3
 800b53e:	f1c6 0620 	rsb	r6, r6, #32
 800b542:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b546:	f000 fa51 	bl	800b9ec <__hi0bits>
 800b54a:	42b0      	cmp	r0, r6
 800b54c:	dbe7      	blt.n	800b51e <__gethex+0x456>
 800b54e:	e7f0      	b.n	800b532 <__gethex+0x46a>
 800b550:	0800ec51 	.word	0x0800ec51

0800b554 <L_shift>:
 800b554:	f1c2 0208 	rsb	r2, r2, #8
 800b558:	0092      	lsls	r2, r2, #2
 800b55a:	b570      	push	{r4, r5, r6, lr}
 800b55c:	f1c2 0620 	rsb	r6, r2, #32
 800b560:	6843      	ldr	r3, [r0, #4]
 800b562:	6804      	ldr	r4, [r0, #0]
 800b564:	fa03 f506 	lsl.w	r5, r3, r6
 800b568:	432c      	orrs	r4, r5
 800b56a:	40d3      	lsrs	r3, r2
 800b56c:	6004      	str	r4, [r0, #0]
 800b56e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b572:	4288      	cmp	r0, r1
 800b574:	d3f4      	bcc.n	800b560 <L_shift+0xc>
 800b576:	bd70      	pop	{r4, r5, r6, pc}

0800b578 <__match>:
 800b578:	b530      	push	{r4, r5, lr}
 800b57a:	6803      	ldr	r3, [r0, #0]
 800b57c:	3301      	adds	r3, #1
 800b57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b582:	b914      	cbnz	r4, 800b58a <__match+0x12>
 800b584:	6003      	str	r3, [r0, #0]
 800b586:	2001      	movs	r0, #1
 800b588:	bd30      	pop	{r4, r5, pc}
 800b58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b58e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b592:	2d19      	cmp	r5, #25
 800b594:	bf98      	it	ls
 800b596:	3220      	addls	r2, #32
 800b598:	42a2      	cmp	r2, r4
 800b59a:	d0f0      	beq.n	800b57e <__match+0x6>
 800b59c:	2000      	movs	r0, #0
 800b59e:	e7f3      	b.n	800b588 <__match+0x10>

0800b5a0 <__hexnan>:
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	680b      	ldr	r3, [r1, #0]
 800b5a6:	6801      	ldr	r1, [r0, #0]
 800b5a8:	115e      	asrs	r6, r3, #5
 800b5aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5ae:	f013 031f 	ands.w	r3, r3, #31
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	bf18      	it	ne
 800b5b6:	3604      	addne	r6, #4
 800b5b8:	2500      	movs	r5, #0
 800b5ba:	1f37      	subs	r7, r6, #4
 800b5bc:	4682      	mov	sl, r0
 800b5be:	4690      	mov	r8, r2
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5c6:	46b9      	mov	r9, r7
 800b5c8:	463c      	mov	r4, r7
 800b5ca:	9502      	str	r5, [sp, #8]
 800b5cc:	46ab      	mov	fp, r5
 800b5ce:	784a      	ldrb	r2, [r1, #1]
 800b5d0:	1c4b      	adds	r3, r1, #1
 800b5d2:	9303      	str	r3, [sp, #12]
 800b5d4:	b342      	cbz	r2, 800b628 <__hexnan+0x88>
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	9105      	str	r1, [sp, #20]
 800b5da:	9204      	str	r2, [sp, #16]
 800b5dc:	f7ff fd5f 	bl	800b09e <__hexdig_fun>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d14f      	bne.n	800b684 <__hexnan+0xe4>
 800b5e4:	9a04      	ldr	r2, [sp, #16]
 800b5e6:	9905      	ldr	r1, [sp, #20]
 800b5e8:	2a20      	cmp	r2, #32
 800b5ea:	d818      	bhi.n	800b61e <__hexnan+0x7e>
 800b5ec:	9b02      	ldr	r3, [sp, #8]
 800b5ee:	459b      	cmp	fp, r3
 800b5f0:	dd13      	ble.n	800b61a <__hexnan+0x7a>
 800b5f2:	454c      	cmp	r4, r9
 800b5f4:	d206      	bcs.n	800b604 <__hexnan+0x64>
 800b5f6:	2d07      	cmp	r5, #7
 800b5f8:	dc04      	bgt.n	800b604 <__hexnan+0x64>
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4620      	mov	r0, r4
 800b600:	f7ff ffa8 	bl	800b554 <L_shift>
 800b604:	4544      	cmp	r4, r8
 800b606:	d950      	bls.n	800b6aa <__hexnan+0x10a>
 800b608:	2300      	movs	r3, #0
 800b60a:	f1a4 0904 	sub.w	r9, r4, #4
 800b60e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b612:	f8cd b008 	str.w	fp, [sp, #8]
 800b616:	464c      	mov	r4, r9
 800b618:	461d      	mov	r5, r3
 800b61a:	9903      	ldr	r1, [sp, #12]
 800b61c:	e7d7      	b.n	800b5ce <__hexnan+0x2e>
 800b61e:	2a29      	cmp	r2, #41	; 0x29
 800b620:	d156      	bne.n	800b6d0 <__hexnan+0x130>
 800b622:	3102      	adds	r1, #2
 800b624:	f8ca 1000 	str.w	r1, [sl]
 800b628:	f1bb 0f00 	cmp.w	fp, #0
 800b62c:	d050      	beq.n	800b6d0 <__hexnan+0x130>
 800b62e:	454c      	cmp	r4, r9
 800b630:	d206      	bcs.n	800b640 <__hexnan+0xa0>
 800b632:	2d07      	cmp	r5, #7
 800b634:	dc04      	bgt.n	800b640 <__hexnan+0xa0>
 800b636:	462a      	mov	r2, r5
 800b638:	4649      	mov	r1, r9
 800b63a:	4620      	mov	r0, r4
 800b63c:	f7ff ff8a 	bl	800b554 <L_shift>
 800b640:	4544      	cmp	r4, r8
 800b642:	d934      	bls.n	800b6ae <__hexnan+0x10e>
 800b644:	f1a8 0204 	sub.w	r2, r8, #4
 800b648:	4623      	mov	r3, r4
 800b64a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b64e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b652:	429f      	cmp	r7, r3
 800b654:	d2f9      	bcs.n	800b64a <__hexnan+0xaa>
 800b656:	1b3b      	subs	r3, r7, r4
 800b658:	f023 0303 	bic.w	r3, r3, #3
 800b65c:	3304      	adds	r3, #4
 800b65e:	3401      	adds	r4, #1
 800b660:	3e03      	subs	r6, #3
 800b662:	42b4      	cmp	r4, r6
 800b664:	bf88      	it	hi
 800b666:	2304      	movhi	r3, #4
 800b668:	4443      	add	r3, r8
 800b66a:	2200      	movs	r2, #0
 800b66c:	f843 2b04 	str.w	r2, [r3], #4
 800b670:	429f      	cmp	r7, r3
 800b672:	d2fb      	bcs.n	800b66c <__hexnan+0xcc>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	b91b      	cbnz	r3, 800b680 <__hexnan+0xe0>
 800b678:	4547      	cmp	r7, r8
 800b67a:	d127      	bne.n	800b6cc <__hexnan+0x12c>
 800b67c:	2301      	movs	r3, #1
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	2005      	movs	r0, #5
 800b682:	e026      	b.n	800b6d2 <__hexnan+0x132>
 800b684:	3501      	adds	r5, #1
 800b686:	2d08      	cmp	r5, #8
 800b688:	f10b 0b01 	add.w	fp, fp, #1
 800b68c:	dd06      	ble.n	800b69c <__hexnan+0xfc>
 800b68e:	4544      	cmp	r4, r8
 800b690:	d9c3      	bls.n	800b61a <__hexnan+0x7a>
 800b692:	2300      	movs	r3, #0
 800b694:	f844 3c04 	str.w	r3, [r4, #-4]
 800b698:	2501      	movs	r5, #1
 800b69a:	3c04      	subs	r4, #4
 800b69c:	6822      	ldr	r2, [r4, #0]
 800b69e:	f000 000f 	and.w	r0, r0, #15
 800b6a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6a6:	6022      	str	r2, [r4, #0]
 800b6a8:	e7b7      	b.n	800b61a <__hexnan+0x7a>
 800b6aa:	2508      	movs	r5, #8
 800b6ac:	e7b5      	b.n	800b61a <__hexnan+0x7a>
 800b6ae:	9b01      	ldr	r3, [sp, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0df      	beq.n	800b674 <__hexnan+0xd4>
 800b6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b8:	f1c3 0320 	rsb	r3, r3, #32
 800b6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6c4:	401a      	ands	r2, r3
 800b6c6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6ca:	e7d3      	b.n	800b674 <__hexnan+0xd4>
 800b6cc:	3f04      	subs	r7, #4
 800b6ce:	e7d1      	b.n	800b674 <__hexnan+0xd4>
 800b6d0:	2004      	movs	r0, #4
 800b6d2:	b007      	add	sp, #28
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6d8 <_localeconv_r>:
 800b6d8:	4800      	ldr	r0, [pc, #0]	; (800b6dc <_localeconv_r+0x4>)
 800b6da:	4770      	bx	lr
 800b6dc:	20000164 	.word	0x20000164

0800b6e0 <__retarget_lock_init_recursive>:
 800b6e0:	4770      	bx	lr

0800b6e2 <__retarget_lock_acquire_recursive>:
 800b6e2:	4770      	bx	lr

0800b6e4 <__retarget_lock_release_recursive>:
 800b6e4:	4770      	bx	lr

0800b6e6 <__swhatbuf_r>:
 800b6e6:	b570      	push	{r4, r5, r6, lr}
 800b6e8:	460e      	mov	r6, r1
 800b6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ee:	2900      	cmp	r1, #0
 800b6f0:	b096      	sub	sp, #88	; 0x58
 800b6f2:	4614      	mov	r4, r2
 800b6f4:	461d      	mov	r5, r3
 800b6f6:	da07      	bge.n	800b708 <__swhatbuf_r+0x22>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	89b3      	ldrh	r3, [r6, #12]
 800b6fe:	061a      	lsls	r2, r3, #24
 800b700:	d410      	bmi.n	800b724 <__swhatbuf_r+0x3e>
 800b702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b706:	e00e      	b.n	800b726 <__swhatbuf_r+0x40>
 800b708:	466a      	mov	r2, sp
 800b70a:	f001 f991 	bl	800ca30 <_fstat_r>
 800b70e:	2800      	cmp	r0, #0
 800b710:	dbf2      	blt.n	800b6f8 <__swhatbuf_r+0x12>
 800b712:	9a01      	ldr	r2, [sp, #4]
 800b714:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b718:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b71c:	425a      	negs	r2, r3
 800b71e:	415a      	adcs	r2, r3
 800b720:	602a      	str	r2, [r5, #0]
 800b722:	e7ee      	b.n	800b702 <__swhatbuf_r+0x1c>
 800b724:	2340      	movs	r3, #64	; 0x40
 800b726:	2000      	movs	r0, #0
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	b016      	add	sp, #88	; 0x58
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b730 <__smakebuf_r>:
 800b730:	898b      	ldrh	r3, [r1, #12]
 800b732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b734:	079d      	lsls	r5, r3, #30
 800b736:	4606      	mov	r6, r0
 800b738:	460c      	mov	r4, r1
 800b73a:	d507      	bpl.n	800b74c <__smakebuf_r+0x1c>
 800b73c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	6123      	str	r3, [r4, #16]
 800b744:	2301      	movs	r3, #1
 800b746:	6163      	str	r3, [r4, #20]
 800b748:	b002      	add	sp, #8
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	ab01      	add	r3, sp, #4
 800b74e:	466a      	mov	r2, sp
 800b750:	f7ff ffc9 	bl	800b6e6 <__swhatbuf_r>
 800b754:	9900      	ldr	r1, [sp, #0]
 800b756:	4605      	mov	r5, r0
 800b758:	4630      	mov	r0, r6
 800b75a:	f000 fd6b 	bl	800c234 <_malloc_r>
 800b75e:	b948      	cbnz	r0, 800b774 <__smakebuf_r+0x44>
 800b760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b764:	059a      	lsls	r2, r3, #22
 800b766:	d4ef      	bmi.n	800b748 <__smakebuf_r+0x18>
 800b768:	f023 0303 	bic.w	r3, r3, #3
 800b76c:	f043 0302 	orr.w	r3, r3, #2
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	e7e3      	b.n	800b73c <__smakebuf_r+0xc>
 800b774:	4b0d      	ldr	r3, [pc, #52]	; (800b7ac <__smakebuf_r+0x7c>)
 800b776:	62b3      	str	r3, [r6, #40]	; 0x28
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	6020      	str	r0, [r4, #0]
 800b77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	9b00      	ldr	r3, [sp, #0]
 800b784:	6163      	str	r3, [r4, #20]
 800b786:	9b01      	ldr	r3, [sp, #4]
 800b788:	6120      	str	r0, [r4, #16]
 800b78a:	b15b      	cbz	r3, 800b7a4 <__smakebuf_r+0x74>
 800b78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b790:	4630      	mov	r0, r6
 800b792:	f001 f95f 	bl	800ca54 <_isatty_r>
 800b796:	b128      	cbz	r0, 800b7a4 <__smakebuf_r+0x74>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	f043 0301 	orr.w	r3, r3, #1
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	89a0      	ldrh	r0, [r4, #12]
 800b7a6:	4305      	orrs	r5, r0
 800b7a8:	81a5      	strh	r5, [r4, #12]
 800b7aa:	e7cd      	b.n	800b748 <__smakebuf_r+0x18>
 800b7ac:	0800ae35 	.word	0x0800ae35

0800b7b0 <malloc>:
 800b7b0:	4b02      	ldr	r3, [pc, #8]	; (800b7bc <malloc+0xc>)
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	f000 bd3d 	b.w	800c234 <_malloc_r>
 800b7ba:	bf00      	nop
 800b7bc:	2000000c 	.word	0x2000000c

0800b7c0 <__ascii_mbtowc>:
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	b901      	cbnz	r1, 800b7c6 <__ascii_mbtowc+0x6>
 800b7c4:	a901      	add	r1, sp, #4
 800b7c6:	b142      	cbz	r2, 800b7da <__ascii_mbtowc+0x1a>
 800b7c8:	b14b      	cbz	r3, 800b7de <__ascii_mbtowc+0x1e>
 800b7ca:	7813      	ldrb	r3, [r2, #0]
 800b7cc:	600b      	str	r3, [r1, #0]
 800b7ce:	7812      	ldrb	r2, [r2, #0]
 800b7d0:	1e10      	subs	r0, r2, #0
 800b7d2:	bf18      	it	ne
 800b7d4:	2001      	movne	r0, #1
 800b7d6:	b002      	add	sp, #8
 800b7d8:	4770      	bx	lr
 800b7da:	4610      	mov	r0, r2
 800b7dc:	e7fb      	b.n	800b7d6 <__ascii_mbtowc+0x16>
 800b7de:	f06f 0001 	mvn.w	r0, #1
 800b7e2:	e7f8      	b.n	800b7d6 <__ascii_mbtowc+0x16>

0800b7e4 <memcpy>:
 800b7e4:	440a      	add	r2, r1
 800b7e6:	4291      	cmp	r1, r2
 800b7e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7ec:	d100      	bne.n	800b7f0 <memcpy+0xc>
 800b7ee:	4770      	bx	lr
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7fa:	4291      	cmp	r1, r2
 800b7fc:	d1f9      	bne.n	800b7f2 <memcpy+0xe>
 800b7fe:	bd10      	pop	{r4, pc}

0800b800 <_Balloc>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b804:	4604      	mov	r4, r0
 800b806:	460d      	mov	r5, r1
 800b808:	b976      	cbnz	r6, 800b828 <_Balloc+0x28>
 800b80a:	2010      	movs	r0, #16
 800b80c:	f7ff ffd0 	bl	800b7b0 <malloc>
 800b810:	4602      	mov	r2, r0
 800b812:	6260      	str	r0, [r4, #36]	; 0x24
 800b814:	b920      	cbnz	r0, 800b820 <_Balloc+0x20>
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <_Balloc+0x78>)
 800b818:	4818      	ldr	r0, [pc, #96]	; (800b87c <_Balloc+0x7c>)
 800b81a:	2166      	movs	r1, #102	; 0x66
 800b81c:	f7fe fb8e 	bl	8009f3c <__assert_func>
 800b820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b824:	6006      	str	r6, [r0, #0]
 800b826:	60c6      	str	r6, [r0, #12]
 800b828:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b82a:	68f3      	ldr	r3, [r6, #12]
 800b82c:	b183      	cbz	r3, 800b850 <_Balloc+0x50>
 800b82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b836:	b9b8      	cbnz	r0, 800b868 <_Balloc+0x68>
 800b838:	2101      	movs	r1, #1
 800b83a:	fa01 f605 	lsl.w	r6, r1, r5
 800b83e:	1d72      	adds	r2, r6, #5
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	4620      	mov	r0, r4
 800b844:	f000 fc97 	bl	800c176 <_calloc_r>
 800b848:	b160      	cbz	r0, 800b864 <_Balloc+0x64>
 800b84a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b84e:	e00e      	b.n	800b86e <_Balloc+0x6e>
 800b850:	2221      	movs	r2, #33	; 0x21
 800b852:	2104      	movs	r1, #4
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fc8e 	bl	800c176 <_calloc_r>
 800b85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b85c:	60f0      	str	r0, [r6, #12]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e4      	bne.n	800b82e <_Balloc+0x2e>
 800b864:	2000      	movs	r0, #0
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	6802      	ldr	r2, [r0, #0]
 800b86a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b86e:	2300      	movs	r3, #0
 800b870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b874:	e7f7      	b.n	800b866 <_Balloc+0x66>
 800b876:	bf00      	nop
 800b878:	0800ea30 	.word	0x0800ea30
 800b87c:	0800ed44 	.word	0x0800ed44

0800b880 <_Bfree>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b884:	4605      	mov	r5, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b976      	cbnz	r6, 800b8a8 <_Bfree+0x28>
 800b88a:	2010      	movs	r0, #16
 800b88c:	f7ff ff90 	bl	800b7b0 <malloc>
 800b890:	4602      	mov	r2, r0
 800b892:	6268      	str	r0, [r5, #36]	; 0x24
 800b894:	b920      	cbnz	r0, 800b8a0 <_Bfree+0x20>
 800b896:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <_Bfree+0x3c>)
 800b898:	4809      	ldr	r0, [pc, #36]	; (800b8c0 <_Bfree+0x40>)
 800b89a:	218a      	movs	r1, #138	; 0x8a
 800b89c:	f7fe fb4e 	bl	8009f3c <__assert_func>
 800b8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8a4:	6006      	str	r6, [r0, #0]
 800b8a6:	60c6      	str	r6, [r0, #12]
 800b8a8:	b13c      	cbz	r4, 800b8ba <_Bfree+0x3a>
 800b8aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8ac:	6862      	ldr	r2, [r4, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8b4:	6021      	str	r1, [r4, #0]
 800b8b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	0800ea30 	.word	0x0800ea30
 800b8c0:	0800ed44 	.word	0x0800ed44

0800b8c4 <__multadd>:
 800b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c8:	690e      	ldr	r6, [r1, #16]
 800b8ca:	4607      	mov	r7, r0
 800b8cc:	4698      	mov	r8, r3
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	f101 0014 	add.w	r0, r1, #20
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	6805      	ldr	r5, [r0, #0]
 800b8d8:	b2a9      	uxth	r1, r5
 800b8da:	fb02 8101 	mla	r1, r2, r1, r8
 800b8de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b8e2:	0c2d      	lsrs	r5, r5, #16
 800b8e4:	fb02 c505 	mla	r5, r2, r5, ip
 800b8e8:	b289      	uxth	r1, r1
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b8f0:	429e      	cmp	r6, r3
 800b8f2:	f840 1b04 	str.w	r1, [r0], #4
 800b8f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b8fa:	dcec      	bgt.n	800b8d6 <__multadd+0x12>
 800b8fc:	f1b8 0f00 	cmp.w	r8, #0
 800b900:	d022      	beq.n	800b948 <__multadd+0x84>
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	42b3      	cmp	r3, r6
 800b906:	dc19      	bgt.n	800b93c <__multadd+0x78>
 800b908:	6861      	ldr	r1, [r4, #4]
 800b90a:	4638      	mov	r0, r7
 800b90c:	3101      	adds	r1, #1
 800b90e:	f7ff ff77 	bl	800b800 <_Balloc>
 800b912:	4605      	mov	r5, r0
 800b914:	b928      	cbnz	r0, 800b922 <__multadd+0x5e>
 800b916:	4602      	mov	r2, r0
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <__multadd+0x8c>)
 800b91a:	480e      	ldr	r0, [pc, #56]	; (800b954 <__multadd+0x90>)
 800b91c:	21b5      	movs	r1, #181	; 0xb5
 800b91e:	f7fe fb0d 	bl	8009f3c <__assert_func>
 800b922:	6922      	ldr	r2, [r4, #16]
 800b924:	3202      	adds	r2, #2
 800b926:	f104 010c 	add.w	r1, r4, #12
 800b92a:	0092      	lsls	r2, r2, #2
 800b92c:	300c      	adds	r0, #12
 800b92e:	f7ff ff59 	bl	800b7e4 <memcpy>
 800b932:	4621      	mov	r1, r4
 800b934:	4638      	mov	r0, r7
 800b936:	f7ff ffa3 	bl	800b880 <_Bfree>
 800b93a:	462c      	mov	r4, r5
 800b93c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b940:	3601      	adds	r6, #1
 800b942:	f8c3 8014 	str.w	r8, [r3, #20]
 800b946:	6126      	str	r6, [r4, #16]
 800b948:	4620      	mov	r0, r4
 800b94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94e:	bf00      	nop
 800b950:	0800ec51 	.word	0x0800ec51
 800b954:	0800ed44 	.word	0x0800ed44

0800b958 <__s2b>:
 800b958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b95c:	460c      	mov	r4, r1
 800b95e:	4615      	mov	r5, r2
 800b960:	461f      	mov	r7, r3
 800b962:	2209      	movs	r2, #9
 800b964:	3308      	adds	r3, #8
 800b966:	4606      	mov	r6, r0
 800b968:	fb93 f3f2 	sdiv	r3, r3, r2
 800b96c:	2100      	movs	r1, #0
 800b96e:	2201      	movs	r2, #1
 800b970:	429a      	cmp	r2, r3
 800b972:	db09      	blt.n	800b988 <__s2b+0x30>
 800b974:	4630      	mov	r0, r6
 800b976:	f7ff ff43 	bl	800b800 <_Balloc>
 800b97a:	b940      	cbnz	r0, 800b98e <__s2b+0x36>
 800b97c:	4602      	mov	r2, r0
 800b97e:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <__s2b+0x8c>)
 800b980:	4819      	ldr	r0, [pc, #100]	; (800b9e8 <__s2b+0x90>)
 800b982:	21ce      	movs	r1, #206	; 0xce
 800b984:	f7fe fada 	bl	8009f3c <__assert_func>
 800b988:	0052      	lsls	r2, r2, #1
 800b98a:	3101      	adds	r1, #1
 800b98c:	e7f0      	b.n	800b970 <__s2b+0x18>
 800b98e:	9b08      	ldr	r3, [sp, #32]
 800b990:	6143      	str	r3, [r0, #20]
 800b992:	2d09      	cmp	r5, #9
 800b994:	f04f 0301 	mov.w	r3, #1
 800b998:	6103      	str	r3, [r0, #16]
 800b99a:	dd16      	ble.n	800b9ca <__s2b+0x72>
 800b99c:	f104 0909 	add.w	r9, r4, #9
 800b9a0:	46c8      	mov	r8, r9
 800b9a2:	442c      	add	r4, r5
 800b9a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	3b30      	subs	r3, #48	; 0x30
 800b9ac:	220a      	movs	r2, #10
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f7ff ff88 	bl	800b8c4 <__multadd>
 800b9b4:	45a0      	cmp	r8, r4
 800b9b6:	d1f5      	bne.n	800b9a4 <__s2b+0x4c>
 800b9b8:	f1a5 0408 	sub.w	r4, r5, #8
 800b9bc:	444c      	add	r4, r9
 800b9be:	1b2d      	subs	r5, r5, r4
 800b9c0:	1963      	adds	r3, r4, r5
 800b9c2:	42bb      	cmp	r3, r7
 800b9c4:	db04      	blt.n	800b9d0 <__s2b+0x78>
 800b9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ca:	340a      	adds	r4, #10
 800b9cc:	2509      	movs	r5, #9
 800b9ce:	e7f6      	b.n	800b9be <__s2b+0x66>
 800b9d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9d4:	4601      	mov	r1, r0
 800b9d6:	3b30      	subs	r3, #48	; 0x30
 800b9d8:	220a      	movs	r2, #10
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7ff ff72 	bl	800b8c4 <__multadd>
 800b9e0:	e7ee      	b.n	800b9c0 <__s2b+0x68>
 800b9e2:	bf00      	nop
 800b9e4:	0800ec51 	.word	0x0800ec51
 800b9e8:	0800ed44 	.word	0x0800ed44

0800b9ec <__hi0bits>:
 800b9ec:	0c03      	lsrs	r3, r0, #16
 800b9ee:	041b      	lsls	r3, r3, #16
 800b9f0:	b9d3      	cbnz	r3, 800ba28 <__hi0bits+0x3c>
 800b9f2:	0400      	lsls	r0, r0, #16
 800b9f4:	2310      	movs	r3, #16
 800b9f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9fa:	bf04      	itt	eq
 800b9fc:	0200      	lsleq	r0, r0, #8
 800b9fe:	3308      	addeq	r3, #8
 800ba00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba04:	bf04      	itt	eq
 800ba06:	0100      	lsleq	r0, r0, #4
 800ba08:	3304      	addeq	r3, #4
 800ba0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba0e:	bf04      	itt	eq
 800ba10:	0080      	lsleq	r0, r0, #2
 800ba12:	3302      	addeq	r3, #2
 800ba14:	2800      	cmp	r0, #0
 800ba16:	db05      	blt.n	800ba24 <__hi0bits+0x38>
 800ba18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba1c:	f103 0301 	add.w	r3, r3, #1
 800ba20:	bf08      	it	eq
 800ba22:	2320      	moveq	r3, #32
 800ba24:	4618      	mov	r0, r3
 800ba26:	4770      	bx	lr
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e7e4      	b.n	800b9f6 <__hi0bits+0xa>

0800ba2c <__lo0bits>:
 800ba2c:	6803      	ldr	r3, [r0, #0]
 800ba2e:	f013 0207 	ands.w	r2, r3, #7
 800ba32:	4601      	mov	r1, r0
 800ba34:	d00b      	beq.n	800ba4e <__lo0bits+0x22>
 800ba36:	07da      	lsls	r2, r3, #31
 800ba38:	d424      	bmi.n	800ba84 <__lo0bits+0x58>
 800ba3a:	0798      	lsls	r0, r3, #30
 800ba3c:	bf49      	itett	mi
 800ba3e:	085b      	lsrmi	r3, r3, #1
 800ba40:	089b      	lsrpl	r3, r3, #2
 800ba42:	2001      	movmi	r0, #1
 800ba44:	600b      	strmi	r3, [r1, #0]
 800ba46:	bf5c      	itt	pl
 800ba48:	600b      	strpl	r3, [r1, #0]
 800ba4a:	2002      	movpl	r0, #2
 800ba4c:	4770      	bx	lr
 800ba4e:	b298      	uxth	r0, r3
 800ba50:	b9b0      	cbnz	r0, 800ba80 <__lo0bits+0x54>
 800ba52:	0c1b      	lsrs	r3, r3, #16
 800ba54:	2010      	movs	r0, #16
 800ba56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba5a:	bf04      	itt	eq
 800ba5c:	0a1b      	lsreq	r3, r3, #8
 800ba5e:	3008      	addeq	r0, #8
 800ba60:	071a      	lsls	r2, r3, #28
 800ba62:	bf04      	itt	eq
 800ba64:	091b      	lsreq	r3, r3, #4
 800ba66:	3004      	addeq	r0, #4
 800ba68:	079a      	lsls	r2, r3, #30
 800ba6a:	bf04      	itt	eq
 800ba6c:	089b      	lsreq	r3, r3, #2
 800ba6e:	3002      	addeq	r0, #2
 800ba70:	07da      	lsls	r2, r3, #31
 800ba72:	d403      	bmi.n	800ba7c <__lo0bits+0x50>
 800ba74:	085b      	lsrs	r3, r3, #1
 800ba76:	f100 0001 	add.w	r0, r0, #1
 800ba7a:	d005      	beq.n	800ba88 <__lo0bits+0x5c>
 800ba7c:	600b      	str	r3, [r1, #0]
 800ba7e:	4770      	bx	lr
 800ba80:	4610      	mov	r0, r2
 800ba82:	e7e8      	b.n	800ba56 <__lo0bits+0x2a>
 800ba84:	2000      	movs	r0, #0
 800ba86:	4770      	bx	lr
 800ba88:	2020      	movs	r0, #32
 800ba8a:	4770      	bx	lr

0800ba8c <__i2b>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	460c      	mov	r4, r1
 800ba90:	2101      	movs	r1, #1
 800ba92:	f7ff feb5 	bl	800b800 <_Balloc>
 800ba96:	4602      	mov	r2, r0
 800ba98:	b928      	cbnz	r0, 800baa6 <__i2b+0x1a>
 800ba9a:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <__i2b+0x24>)
 800ba9c:	4805      	ldr	r0, [pc, #20]	; (800bab4 <__i2b+0x28>)
 800ba9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800baa2:	f7fe fa4b 	bl	8009f3c <__assert_func>
 800baa6:	2301      	movs	r3, #1
 800baa8:	6144      	str	r4, [r0, #20]
 800baaa:	6103      	str	r3, [r0, #16]
 800baac:	bd10      	pop	{r4, pc}
 800baae:	bf00      	nop
 800bab0:	0800ec51 	.word	0x0800ec51
 800bab4:	0800ed44 	.word	0x0800ed44

0800bab8 <__multiply>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4614      	mov	r4, r2
 800babe:	690a      	ldr	r2, [r1, #16]
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	bfb8      	it	lt
 800bac6:	460b      	movlt	r3, r1
 800bac8:	460d      	mov	r5, r1
 800baca:	bfbc      	itt	lt
 800bacc:	4625      	movlt	r5, r4
 800bace:	461c      	movlt	r4, r3
 800bad0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bad4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bad8:	68ab      	ldr	r3, [r5, #8]
 800bada:	6869      	ldr	r1, [r5, #4]
 800badc:	eb0a 0709 	add.w	r7, sl, r9
 800bae0:	42bb      	cmp	r3, r7
 800bae2:	b085      	sub	sp, #20
 800bae4:	bfb8      	it	lt
 800bae6:	3101      	addlt	r1, #1
 800bae8:	f7ff fe8a 	bl	800b800 <_Balloc>
 800baec:	b930      	cbnz	r0, 800bafc <__multiply+0x44>
 800baee:	4602      	mov	r2, r0
 800baf0:	4b42      	ldr	r3, [pc, #264]	; (800bbfc <__multiply+0x144>)
 800baf2:	4843      	ldr	r0, [pc, #268]	; (800bc00 <__multiply+0x148>)
 800baf4:	f240 115d 	movw	r1, #349	; 0x15d
 800baf8:	f7fe fa20 	bl	8009f3c <__assert_func>
 800bafc:	f100 0614 	add.w	r6, r0, #20
 800bb00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bb04:	4633      	mov	r3, r6
 800bb06:	2200      	movs	r2, #0
 800bb08:	4543      	cmp	r3, r8
 800bb0a:	d31e      	bcc.n	800bb4a <__multiply+0x92>
 800bb0c:	f105 0c14 	add.w	ip, r5, #20
 800bb10:	f104 0314 	add.w	r3, r4, #20
 800bb14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bb18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bb1c:	9202      	str	r2, [sp, #8]
 800bb1e:	ebac 0205 	sub.w	r2, ip, r5
 800bb22:	3a15      	subs	r2, #21
 800bb24:	f022 0203 	bic.w	r2, r2, #3
 800bb28:	3204      	adds	r2, #4
 800bb2a:	f105 0115 	add.w	r1, r5, #21
 800bb2e:	458c      	cmp	ip, r1
 800bb30:	bf38      	it	cc
 800bb32:	2204      	movcc	r2, #4
 800bb34:	9201      	str	r2, [sp, #4]
 800bb36:	9a02      	ldr	r2, [sp, #8]
 800bb38:	9303      	str	r3, [sp, #12]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d808      	bhi.n	800bb50 <__multiply+0x98>
 800bb3e:	2f00      	cmp	r7, #0
 800bb40:	dc55      	bgt.n	800bbee <__multiply+0x136>
 800bb42:	6107      	str	r7, [r0, #16]
 800bb44:	b005      	add	sp, #20
 800bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4a:	f843 2b04 	str.w	r2, [r3], #4
 800bb4e:	e7db      	b.n	800bb08 <__multiply+0x50>
 800bb50:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb54:	f1ba 0f00 	cmp.w	sl, #0
 800bb58:	d020      	beq.n	800bb9c <__multiply+0xe4>
 800bb5a:	f105 0e14 	add.w	lr, r5, #20
 800bb5e:	46b1      	mov	r9, r6
 800bb60:	2200      	movs	r2, #0
 800bb62:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bb66:	f8d9 b000 	ldr.w	fp, [r9]
 800bb6a:	b2a1      	uxth	r1, r4
 800bb6c:	fa1f fb8b 	uxth.w	fp, fp
 800bb70:	fb0a b101 	mla	r1, sl, r1, fp
 800bb74:	4411      	add	r1, r2
 800bb76:	f8d9 2000 	ldr.w	r2, [r9]
 800bb7a:	0c24      	lsrs	r4, r4, #16
 800bb7c:	0c12      	lsrs	r2, r2, #16
 800bb7e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bb82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bb86:	b289      	uxth	r1, r1
 800bb88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb8c:	45f4      	cmp	ip, lr
 800bb8e:	f849 1b04 	str.w	r1, [r9], #4
 800bb92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb96:	d8e4      	bhi.n	800bb62 <__multiply+0xaa>
 800bb98:	9901      	ldr	r1, [sp, #4]
 800bb9a:	5072      	str	r2, [r6, r1]
 800bb9c:	9a03      	ldr	r2, [sp, #12]
 800bb9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bba2:	3304      	adds	r3, #4
 800bba4:	f1b9 0f00 	cmp.w	r9, #0
 800bba8:	d01f      	beq.n	800bbea <__multiply+0x132>
 800bbaa:	6834      	ldr	r4, [r6, #0]
 800bbac:	f105 0114 	add.w	r1, r5, #20
 800bbb0:	46b6      	mov	lr, r6
 800bbb2:	f04f 0a00 	mov.w	sl, #0
 800bbb6:	880a      	ldrh	r2, [r1, #0]
 800bbb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bbbc:	fb09 b202 	mla	r2, r9, r2, fp
 800bbc0:	4492      	add	sl, r2
 800bbc2:	b2a4      	uxth	r4, r4
 800bbc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bbc8:	f84e 4b04 	str.w	r4, [lr], #4
 800bbcc:	f851 4b04 	ldr.w	r4, [r1], #4
 800bbd0:	f8be 2000 	ldrh.w	r2, [lr]
 800bbd4:	0c24      	lsrs	r4, r4, #16
 800bbd6:	fb09 2404 	mla	r4, r9, r4, r2
 800bbda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bbde:	458c      	cmp	ip, r1
 800bbe0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbe4:	d8e7      	bhi.n	800bbb6 <__multiply+0xfe>
 800bbe6:	9a01      	ldr	r2, [sp, #4]
 800bbe8:	50b4      	str	r4, [r6, r2]
 800bbea:	3604      	adds	r6, #4
 800bbec:	e7a3      	b.n	800bb36 <__multiply+0x7e>
 800bbee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1a5      	bne.n	800bb42 <__multiply+0x8a>
 800bbf6:	3f01      	subs	r7, #1
 800bbf8:	e7a1      	b.n	800bb3e <__multiply+0x86>
 800bbfa:	bf00      	nop
 800bbfc:	0800ec51 	.word	0x0800ec51
 800bc00:	0800ed44 	.word	0x0800ed44

0800bc04 <__pow5mult>:
 800bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc08:	4615      	mov	r5, r2
 800bc0a:	f012 0203 	ands.w	r2, r2, #3
 800bc0e:	4606      	mov	r6, r0
 800bc10:	460f      	mov	r7, r1
 800bc12:	d007      	beq.n	800bc24 <__pow5mult+0x20>
 800bc14:	4c25      	ldr	r4, [pc, #148]	; (800bcac <__pow5mult+0xa8>)
 800bc16:	3a01      	subs	r2, #1
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc1e:	f7ff fe51 	bl	800b8c4 <__multadd>
 800bc22:	4607      	mov	r7, r0
 800bc24:	10ad      	asrs	r5, r5, #2
 800bc26:	d03d      	beq.n	800bca4 <__pow5mult+0xa0>
 800bc28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc2a:	b97c      	cbnz	r4, 800bc4c <__pow5mult+0x48>
 800bc2c:	2010      	movs	r0, #16
 800bc2e:	f7ff fdbf 	bl	800b7b0 <malloc>
 800bc32:	4602      	mov	r2, r0
 800bc34:	6270      	str	r0, [r6, #36]	; 0x24
 800bc36:	b928      	cbnz	r0, 800bc44 <__pow5mult+0x40>
 800bc38:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <__pow5mult+0xac>)
 800bc3a:	481e      	ldr	r0, [pc, #120]	; (800bcb4 <__pow5mult+0xb0>)
 800bc3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc40:	f7fe f97c 	bl	8009f3c <__assert_func>
 800bc44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc48:	6004      	str	r4, [r0, #0]
 800bc4a:	60c4      	str	r4, [r0, #12]
 800bc4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc54:	b94c      	cbnz	r4, 800bc6a <__pow5mult+0x66>
 800bc56:	f240 2171 	movw	r1, #625	; 0x271
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff ff16 	bl	800ba8c <__i2b>
 800bc60:	2300      	movs	r3, #0
 800bc62:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc66:	4604      	mov	r4, r0
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	f04f 0900 	mov.w	r9, #0
 800bc6e:	07eb      	lsls	r3, r5, #31
 800bc70:	d50a      	bpl.n	800bc88 <__pow5mult+0x84>
 800bc72:	4639      	mov	r1, r7
 800bc74:	4622      	mov	r2, r4
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff ff1e 	bl	800bab8 <__multiply>
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	4680      	mov	r8, r0
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff fdfd 	bl	800b880 <_Bfree>
 800bc86:	4647      	mov	r7, r8
 800bc88:	106d      	asrs	r5, r5, #1
 800bc8a:	d00b      	beq.n	800bca4 <__pow5mult+0xa0>
 800bc8c:	6820      	ldr	r0, [r4, #0]
 800bc8e:	b938      	cbnz	r0, 800bca0 <__pow5mult+0x9c>
 800bc90:	4622      	mov	r2, r4
 800bc92:	4621      	mov	r1, r4
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff ff0f 	bl	800bab8 <__multiply>
 800bc9a:	6020      	str	r0, [r4, #0]
 800bc9c:	f8c0 9000 	str.w	r9, [r0]
 800bca0:	4604      	mov	r4, r0
 800bca2:	e7e4      	b.n	800bc6e <__pow5mult+0x6a>
 800bca4:	4638      	mov	r0, r7
 800bca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcaa:	bf00      	nop
 800bcac:	0800ee98 	.word	0x0800ee98
 800bcb0:	0800ea30 	.word	0x0800ea30
 800bcb4:	0800ed44 	.word	0x0800ed44

0800bcb8 <__lshift>:
 800bcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	6849      	ldr	r1, [r1, #4]
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	4607      	mov	r7, r0
 800bcca:	4691      	mov	r9, r2
 800bccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcd0:	f108 0601 	add.w	r6, r8, #1
 800bcd4:	42b3      	cmp	r3, r6
 800bcd6:	db0b      	blt.n	800bcf0 <__lshift+0x38>
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7ff fd91 	bl	800b800 <_Balloc>
 800bcde:	4605      	mov	r5, r0
 800bce0:	b948      	cbnz	r0, 800bcf6 <__lshift+0x3e>
 800bce2:	4602      	mov	r2, r0
 800bce4:	4b28      	ldr	r3, [pc, #160]	; (800bd88 <__lshift+0xd0>)
 800bce6:	4829      	ldr	r0, [pc, #164]	; (800bd8c <__lshift+0xd4>)
 800bce8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcec:	f7fe f926 	bl	8009f3c <__assert_func>
 800bcf0:	3101      	adds	r1, #1
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	e7ee      	b.n	800bcd4 <__lshift+0x1c>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f100 0114 	add.w	r1, r0, #20
 800bcfc:	f100 0210 	add.w	r2, r0, #16
 800bd00:	4618      	mov	r0, r3
 800bd02:	4553      	cmp	r3, sl
 800bd04:	db33      	blt.n	800bd6e <__lshift+0xb6>
 800bd06:	6920      	ldr	r0, [r4, #16]
 800bd08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd0c:	f104 0314 	add.w	r3, r4, #20
 800bd10:	f019 091f 	ands.w	r9, r9, #31
 800bd14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd1c:	d02b      	beq.n	800bd76 <__lshift+0xbe>
 800bd1e:	f1c9 0e20 	rsb	lr, r9, #32
 800bd22:	468a      	mov	sl, r1
 800bd24:	2200      	movs	r2, #0
 800bd26:	6818      	ldr	r0, [r3, #0]
 800bd28:	fa00 f009 	lsl.w	r0, r0, r9
 800bd2c:	4302      	orrs	r2, r0
 800bd2e:	f84a 2b04 	str.w	r2, [sl], #4
 800bd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd36:	459c      	cmp	ip, r3
 800bd38:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd3c:	d8f3      	bhi.n	800bd26 <__lshift+0x6e>
 800bd3e:	ebac 0304 	sub.w	r3, ip, r4
 800bd42:	3b15      	subs	r3, #21
 800bd44:	f023 0303 	bic.w	r3, r3, #3
 800bd48:	3304      	adds	r3, #4
 800bd4a:	f104 0015 	add.w	r0, r4, #21
 800bd4e:	4584      	cmp	ip, r0
 800bd50:	bf38      	it	cc
 800bd52:	2304      	movcc	r3, #4
 800bd54:	50ca      	str	r2, [r1, r3]
 800bd56:	b10a      	cbz	r2, 800bd5c <__lshift+0xa4>
 800bd58:	f108 0602 	add.w	r6, r8, #2
 800bd5c:	3e01      	subs	r6, #1
 800bd5e:	4638      	mov	r0, r7
 800bd60:	612e      	str	r6, [r5, #16]
 800bd62:	4621      	mov	r1, r4
 800bd64:	f7ff fd8c 	bl	800b880 <_Bfree>
 800bd68:	4628      	mov	r0, r5
 800bd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd72:	3301      	adds	r3, #1
 800bd74:	e7c5      	b.n	800bd02 <__lshift+0x4a>
 800bd76:	3904      	subs	r1, #4
 800bd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd80:	459c      	cmp	ip, r3
 800bd82:	d8f9      	bhi.n	800bd78 <__lshift+0xc0>
 800bd84:	e7ea      	b.n	800bd5c <__lshift+0xa4>
 800bd86:	bf00      	nop
 800bd88:	0800ec51 	.word	0x0800ec51
 800bd8c:	0800ed44 	.word	0x0800ed44

0800bd90 <__mcmp>:
 800bd90:	b530      	push	{r4, r5, lr}
 800bd92:	6902      	ldr	r2, [r0, #16]
 800bd94:	690c      	ldr	r4, [r1, #16]
 800bd96:	1b12      	subs	r2, r2, r4
 800bd98:	d10e      	bne.n	800bdb8 <__mcmp+0x28>
 800bd9a:	f100 0314 	add.w	r3, r0, #20
 800bd9e:	3114      	adds	r1, #20
 800bda0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bda4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bda8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bdac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bdb0:	42a5      	cmp	r5, r4
 800bdb2:	d003      	beq.n	800bdbc <__mcmp+0x2c>
 800bdb4:	d305      	bcc.n	800bdc2 <__mcmp+0x32>
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	4610      	mov	r0, r2
 800bdba:	bd30      	pop	{r4, r5, pc}
 800bdbc:	4283      	cmp	r3, r0
 800bdbe:	d3f3      	bcc.n	800bda8 <__mcmp+0x18>
 800bdc0:	e7fa      	b.n	800bdb8 <__mcmp+0x28>
 800bdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc6:	e7f7      	b.n	800bdb8 <__mcmp+0x28>

0800bdc8 <__mdiff>:
 800bdc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	460c      	mov	r4, r1
 800bdce:	4606      	mov	r6, r0
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	4617      	mov	r7, r2
 800bdd6:	f7ff ffdb 	bl	800bd90 <__mcmp>
 800bdda:	1e05      	subs	r5, r0, #0
 800bddc:	d110      	bne.n	800be00 <__mdiff+0x38>
 800bdde:	4629      	mov	r1, r5
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff fd0d 	bl	800b800 <_Balloc>
 800bde6:	b930      	cbnz	r0, 800bdf6 <__mdiff+0x2e>
 800bde8:	4b39      	ldr	r3, [pc, #228]	; (800bed0 <__mdiff+0x108>)
 800bdea:	4602      	mov	r2, r0
 800bdec:	f240 2132 	movw	r1, #562	; 0x232
 800bdf0:	4838      	ldr	r0, [pc, #224]	; (800bed4 <__mdiff+0x10c>)
 800bdf2:	f7fe f8a3 	bl	8009f3c <__assert_func>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be00:	bfa4      	itt	ge
 800be02:	463b      	movge	r3, r7
 800be04:	4627      	movge	r7, r4
 800be06:	4630      	mov	r0, r6
 800be08:	6879      	ldr	r1, [r7, #4]
 800be0a:	bfa6      	itte	ge
 800be0c:	461c      	movge	r4, r3
 800be0e:	2500      	movge	r5, #0
 800be10:	2501      	movlt	r5, #1
 800be12:	f7ff fcf5 	bl	800b800 <_Balloc>
 800be16:	b920      	cbnz	r0, 800be22 <__mdiff+0x5a>
 800be18:	4b2d      	ldr	r3, [pc, #180]	; (800bed0 <__mdiff+0x108>)
 800be1a:	4602      	mov	r2, r0
 800be1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be20:	e7e6      	b.n	800bdf0 <__mdiff+0x28>
 800be22:	693e      	ldr	r6, [r7, #16]
 800be24:	60c5      	str	r5, [r0, #12]
 800be26:	6925      	ldr	r5, [r4, #16]
 800be28:	f107 0114 	add.w	r1, r7, #20
 800be2c:	f104 0914 	add.w	r9, r4, #20
 800be30:	f100 0e14 	add.w	lr, r0, #20
 800be34:	f107 0210 	add.w	r2, r7, #16
 800be38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800be3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800be40:	46f2      	mov	sl, lr
 800be42:	2700      	movs	r7, #0
 800be44:	f859 3b04 	ldr.w	r3, [r9], #4
 800be48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be4c:	fa1f f883 	uxth.w	r8, r3
 800be50:	fa17 f78b 	uxtah	r7, r7, fp
 800be54:	0c1b      	lsrs	r3, r3, #16
 800be56:	eba7 0808 	sub.w	r8, r7, r8
 800be5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be62:	fa1f f888 	uxth.w	r8, r8
 800be66:	141f      	asrs	r7, r3, #16
 800be68:	454d      	cmp	r5, r9
 800be6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be6e:	f84a 3b04 	str.w	r3, [sl], #4
 800be72:	d8e7      	bhi.n	800be44 <__mdiff+0x7c>
 800be74:	1b2b      	subs	r3, r5, r4
 800be76:	3b15      	subs	r3, #21
 800be78:	f023 0303 	bic.w	r3, r3, #3
 800be7c:	3304      	adds	r3, #4
 800be7e:	3415      	adds	r4, #21
 800be80:	42a5      	cmp	r5, r4
 800be82:	bf38      	it	cc
 800be84:	2304      	movcc	r3, #4
 800be86:	4419      	add	r1, r3
 800be88:	4473      	add	r3, lr
 800be8a:	469e      	mov	lr, r3
 800be8c:	460d      	mov	r5, r1
 800be8e:	4565      	cmp	r5, ip
 800be90:	d30e      	bcc.n	800beb0 <__mdiff+0xe8>
 800be92:	f10c 0203 	add.w	r2, ip, #3
 800be96:	1a52      	subs	r2, r2, r1
 800be98:	f022 0203 	bic.w	r2, r2, #3
 800be9c:	3903      	subs	r1, #3
 800be9e:	458c      	cmp	ip, r1
 800bea0:	bf38      	it	cc
 800bea2:	2200      	movcc	r2, #0
 800bea4:	441a      	add	r2, r3
 800bea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800beaa:	b17b      	cbz	r3, 800becc <__mdiff+0x104>
 800beac:	6106      	str	r6, [r0, #16]
 800beae:	e7a5      	b.n	800bdfc <__mdiff+0x34>
 800beb0:	f855 8b04 	ldr.w	r8, [r5], #4
 800beb4:	fa17 f488 	uxtah	r4, r7, r8
 800beb8:	1422      	asrs	r2, r4, #16
 800beba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bebe:	b2a4      	uxth	r4, r4
 800bec0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bec4:	f84e 4b04 	str.w	r4, [lr], #4
 800bec8:	1417      	asrs	r7, r2, #16
 800beca:	e7e0      	b.n	800be8e <__mdiff+0xc6>
 800becc:	3e01      	subs	r6, #1
 800bece:	e7ea      	b.n	800bea6 <__mdiff+0xde>
 800bed0:	0800ec51 	.word	0x0800ec51
 800bed4:	0800ed44 	.word	0x0800ed44

0800bed8 <__ulp>:
 800bed8:	b082      	sub	sp, #8
 800beda:	ed8d 0b00 	vstr	d0, [sp]
 800bede:	9b01      	ldr	r3, [sp, #4]
 800bee0:	4912      	ldr	r1, [pc, #72]	; (800bf2c <__ulp+0x54>)
 800bee2:	4019      	ands	r1, r3
 800bee4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bee8:	2900      	cmp	r1, #0
 800beea:	dd05      	ble.n	800bef8 <__ulp+0x20>
 800beec:	2200      	movs	r2, #0
 800beee:	460b      	mov	r3, r1
 800bef0:	ec43 2b10 	vmov	d0, r2, r3
 800bef4:	b002      	add	sp, #8
 800bef6:	4770      	bx	lr
 800bef8:	4249      	negs	r1, r1
 800befa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800befe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	da04      	bge.n	800bf16 <__ulp+0x3e>
 800bf0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bf10:	fa41 f300 	asr.w	r3, r1, r0
 800bf14:	e7ec      	b.n	800bef0 <__ulp+0x18>
 800bf16:	f1a0 0114 	sub.w	r1, r0, #20
 800bf1a:	291e      	cmp	r1, #30
 800bf1c:	bfda      	itte	le
 800bf1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bf22:	fa20 f101 	lsrle.w	r1, r0, r1
 800bf26:	2101      	movgt	r1, #1
 800bf28:	460a      	mov	r2, r1
 800bf2a:	e7e1      	b.n	800bef0 <__ulp+0x18>
 800bf2c:	7ff00000 	.word	0x7ff00000

0800bf30 <__b2d>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	6905      	ldr	r5, [r0, #16]
 800bf34:	f100 0714 	add.w	r7, r0, #20
 800bf38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bf3c:	1f2e      	subs	r6, r5, #4
 800bf3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff fd52 	bl	800b9ec <__hi0bits>
 800bf48:	f1c0 0320 	rsb	r3, r0, #32
 800bf4c:	280a      	cmp	r0, #10
 800bf4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bfcc <__b2d+0x9c>
 800bf52:	600b      	str	r3, [r1, #0]
 800bf54:	dc14      	bgt.n	800bf80 <__b2d+0x50>
 800bf56:	f1c0 0e0b 	rsb	lr, r0, #11
 800bf5a:	fa24 f10e 	lsr.w	r1, r4, lr
 800bf5e:	42b7      	cmp	r7, r6
 800bf60:	ea41 030c 	orr.w	r3, r1, ip
 800bf64:	bf34      	ite	cc
 800bf66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf6a:	2100      	movcs	r1, #0
 800bf6c:	3015      	adds	r0, #21
 800bf6e:	fa04 f000 	lsl.w	r0, r4, r0
 800bf72:	fa21 f10e 	lsr.w	r1, r1, lr
 800bf76:	ea40 0201 	orr.w	r2, r0, r1
 800bf7a:	ec43 2b10 	vmov	d0, r2, r3
 800bf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf80:	42b7      	cmp	r7, r6
 800bf82:	bf3a      	itte	cc
 800bf84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf88:	f1a5 0608 	subcc.w	r6, r5, #8
 800bf8c:	2100      	movcs	r1, #0
 800bf8e:	380b      	subs	r0, #11
 800bf90:	d017      	beq.n	800bfc2 <__b2d+0x92>
 800bf92:	f1c0 0c20 	rsb	ip, r0, #32
 800bf96:	fa04 f500 	lsl.w	r5, r4, r0
 800bf9a:	42be      	cmp	r6, r7
 800bf9c:	fa21 f40c 	lsr.w	r4, r1, ip
 800bfa0:	ea45 0504 	orr.w	r5, r5, r4
 800bfa4:	bf8c      	ite	hi
 800bfa6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bfaa:	2400      	movls	r4, #0
 800bfac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bfb0:	fa01 f000 	lsl.w	r0, r1, r0
 800bfb4:	fa24 f40c 	lsr.w	r4, r4, ip
 800bfb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bfbc:	ea40 0204 	orr.w	r2, r0, r4
 800bfc0:	e7db      	b.n	800bf7a <__b2d+0x4a>
 800bfc2:	ea44 030c 	orr.w	r3, r4, ip
 800bfc6:	460a      	mov	r2, r1
 800bfc8:	e7d7      	b.n	800bf7a <__b2d+0x4a>
 800bfca:	bf00      	nop
 800bfcc:	3ff00000 	.word	0x3ff00000

0800bfd0 <__d2b>:
 800bfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	4689      	mov	r9, r1
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	ec57 6b10 	vmov	r6, r7, d0
 800bfdc:	4690      	mov	r8, r2
 800bfde:	f7ff fc0f 	bl	800b800 <_Balloc>
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	b930      	cbnz	r0, 800bff4 <__d2b+0x24>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	4b25      	ldr	r3, [pc, #148]	; (800c080 <__d2b+0xb0>)
 800bfea:	4826      	ldr	r0, [pc, #152]	; (800c084 <__d2b+0xb4>)
 800bfec:	f240 310a 	movw	r1, #778	; 0x30a
 800bff0:	f7fd ffa4 	bl	8009f3c <__assert_func>
 800bff4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bffc:	bb35      	cbnz	r5, 800c04c <__d2b+0x7c>
 800bffe:	2e00      	cmp	r6, #0
 800c000:	9301      	str	r3, [sp, #4]
 800c002:	d028      	beq.n	800c056 <__d2b+0x86>
 800c004:	4668      	mov	r0, sp
 800c006:	9600      	str	r6, [sp, #0]
 800c008:	f7ff fd10 	bl	800ba2c <__lo0bits>
 800c00c:	9900      	ldr	r1, [sp, #0]
 800c00e:	b300      	cbz	r0, 800c052 <__d2b+0x82>
 800c010:	9a01      	ldr	r2, [sp, #4]
 800c012:	f1c0 0320 	rsb	r3, r0, #32
 800c016:	fa02 f303 	lsl.w	r3, r2, r3
 800c01a:	430b      	orrs	r3, r1
 800c01c:	40c2      	lsrs	r2, r0
 800c01e:	6163      	str	r3, [r4, #20]
 800c020:	9201      	str	r2, [sp, #4]
 800c022:	9b01      	ldr	r3, [sp, #4]
 800c024:	61a3      	str	r3, [r4, #24]
 800c026:	2b00      	cmp	r3, #0
 800c028:	bf14      	ite	ne
 800c02a:	2202      	movne	r2, #2
 800c02c:	2201      	moveq	r2, #1
 800c02e:	6122      	str	r2, [r4, #16]
 800c030:	b1d5      	cbz	r5, 800c068 <__d2b+0x98>
 800c032:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c036:	4405      	add	r5, r0
 800c038:	f8c9 5000 	str.w	r5, [r9]
 800c03c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c040:	f8c8 0000 	str.w	r0, [r8]
 800c044:	4620      	mov	r0, r4
 800c046:	b003      	add	sp, #12
 800c048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c050:	e7d5      	b.n	800bffe <__d2b+0x2e>
 800c052:	6161      	str	r1, [r4, #20]
 800c054:	e7e5      	b.n	800c022 <__d2b+0x52>
 800c056:	a801      	add	r0, sp, #4
 800c058:	f7ff fce8 	bl	800ba2c <__lo0bits>
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	6163      	str	r3, [r4, #20]
 800c060:	2201      	movs	r2, #1
 800c062:	6122      	str	r2, [r4, #16]
 800c064:	3020      	adds	r0, #32
 800c066:	e7e3      	b.n	800c030 <__d2b+0x60>
 800c068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c06c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c070:	f8c9 0000 	str.w	r0, [r9]
 800c074:	6918      	ldr	r0, [r3, #16]
 800c076:	f7ff fcb9 	bl	800b9ec <__hi0bits>
 800c07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c07e:	e7df      	b.n	800c040 <__d2b+0x70>
 800c080:	0800ec51 	.word	0x0800ec51
 800c084:	0800ed44 	.word	0x0800ed44

0800c088 <__ratio>:
 800c088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	4688      	mov	r8, r1
 800c08e:	4669      	mov	r1, sp
 800c090:	4681      	mov	r9, r0
 800c092:	f7ff ff4d 	bl	800bf30 <__b2d>
 800c096:	a901      	add	r1, sp, #4
 800c098:	4640      	mov	r0, r8
 800c09a:	ec55 4b10 	vmov	r4, r5, d0
 800c09e:	f7ff ff47 	bl	800bf30 <__b2d>
 800c0a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0aa:	eba3 0c02 	sub.w	ip, r3, r2
 800c0ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c0b2:	1a9b      	subs	r3, r3, r2
 800c0b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c0b8:	ec51 0b10 	vmov	r0, r1, d0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	bfd6      	itet	le
 800c0c0:	460a      	movle	r2, r1
 800c0c2:	462a      	movgt	r2, r5
 800c0c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c0c8:	468b      	mov	fp, r1
 800c0ca:	462f      	mov	r7, r5
 800c0cc:	bfd4      	ite	le
 800c0ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c0d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	ee10 2a10 	vmov	r2, s0
 800c0dc:	465b      	mov	r3, fp
 800c0de:	4639      	mov	r1, r7
 800c0e0:	f7f4 fbec 	bl	80008bc <__aeabi_ddiv>
 800c0e4:	ec41 0b10 	vmov	d0, r0, r1
 800c0e8:	b003      	add	sp, #12
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0ee <__copybits>:
 800c0ee:	3901      	subs	r1, #1
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	1149      	asrs	r1, r1, #5
 800c0f4:	6914      	ldr	r4, [r2, #16]
 800c0f6:	3101      	adds	r1, #1
 800c0f8:	f102 0314 	add.w	r3, r2, #20
 800c0fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c100:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c104:	1f05      	subs	r5, r0, #4
 800c106:	42a3      	cmp	r3, r4
 800c108:	d30c      	bcc.n	800c124 <__copybits+0x36>
 800c10a:	1aa3      	subs	r3, r4, r2
 800c10c:	3b11      	subs	r3, #17
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	3211      	adds	r2, #17
 800c114:	42a2      	cmp	r2, r4
 800c116:	bf88      	it	hi
 800c118:	2300      	movhi	r3, #0
 800c11a:	4418      	add	r0, r3
 800c11c:	2300      	movs	r3, #0
 800c11e:	4288      	cmp	r0, r1
 800c120:	d305      	bcc.n	800c12e <__copybits+0x40>
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	f853 6b04 	ldr.w	r6, [r3], #4
 800c128:	f845 6f04 	str.w	r6, [r5, #4]!
 800c12c:	e7eb      	b.n	800c106 <__copybits+0x18>
 800c12e:	f840 3b04 	str.w	r3, [r0], #4
 800c132:	e7f4      	b.n	800c11e <__copybits+0x30>

0800c134 <__any_on>:
 800c134:	f100 0214 	add.w	r2, r0, #20
 800c138:	6900      	ldr	r0, [r0, #16]
 800c13a:	114b      	asrs	r3, r1, #5
 800c13c:	4298      	cmp	r0, r3
 800c13e:	b510      	push	{r4, lr}
 800c140:	db11      	blt.n	800c166 <__any_on+0x32>
 800c142:	dd0a      	ble.n	800c15a <__any_on+0x26>
 800c144:	f011 011f 	ands.w	r1, r1, #31
 800c148:	d007      	beq.n	800c15a <__any_on+0x26>
 800c14a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c14e:	fa24 f001 	lsr.w	r0, r4, r1
 800c152:	fa00 f101 	lsl.w	r1, r0, r1
 800c156:	428c      	cmp	r4, r1
 800c158:	d10b      	bne.n	800c172 <__any_on+0x3e>
 800c15a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c15e:	4293      	cmp	r3, r2
 800c160:	d803      	bhi.n	800c16a <__any_on+0x36>
 800c162:	2000      	movs	r0, #0
 800c164:	bd10      	pop	{r4, pc}
 800c166:	4603      	mov	r3, r0
 800c168:	e7f7      	b.n	800c15a <__any_on+0x26>
 800c16a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c16e:	2900      	cmp	r1, #0
 800c170:	d0f5      	beq.n	800c15e <__any_on+0x2a>
 800c172:	2001      	movs	r0, #1
 800c174:	e7f6      	b.n	800c164 <__any_on+0x30>

0800c176 <_calloc_r>:
 800c176:	b513      	push	{r0, r1, r4, lr}
 800c178:	434a      	muls	r2, r1
 800c17a:	4611      	mov	r1, r2
 800c17c:	9201      	str	r2, [sp, #4]
 800c17e:	f000 f859 	bl	800c234 <_malloc_r>
 800c182:	4604      	mov	r4, r0
 800c184:	b118      	cbz	r0, 800c18e <_calloc_r+0x18>
 800c186:	9a01      	ldr	r2, [sp, #4]
 800c188:	2100      	movs	r1, #0
 800c18a:	f7fb ff8b 	bl	80080a4 <memset>
 800c18e:	4620      	mov	r0, r4
 800c190:	b002      	add	sp, #8
 800c192:	bd10      	pop	{r4, pc}

0800c194 <_free_r>:
 800c194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c196:	2900      	cmp	r1, #0
 800c198:	d048      	beq.n	800c22c <_free_r+0x98>
 800c19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c19e:	9001      	str	r0, [sp, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c1a6:	bfb8      	it	lt
 800c1a8:	18e4      	addlt	r4, r4, r3
 800c1aa:	f000 fc8f 	bl	800cacc <__malloc_lock>
 800c1ae:	4a20      	ldr	r2, [pc, #128]	; (800c230 <_free_r+0x9c>)
 800c1b0:	9801      	ldr	r0, [sp, #4]
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	4615      	mov	r5, r2
 800c1b6:	b933      	cbnz	r3, 800c1c6 <_free_r+0x32>
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	6014      	str	r4, [r2, #0]
 800c1bc:	b003      	add	sp, #12
 800c1be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1c2:	f000 bc89 	b.w	800cad8 <__malloc_unlock>
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	d90b      	bls.n	800c1e2 <_free_r+0x4e>
 800c1ca:	6821      	ldr	r1, [r4, #0]
 800c1cc:	1862      	adds	r2, r4, r1
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	bf04      	itt	eq
 800c1d2:	681a      	ldreq	r2, [r3, #0]
 800c1d4:	685b      	ldreq	r3, [r3, #4]
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	bf04      	itt	eq
 800c1da:	1852      	addeq	r2, r2, r1
 800c1dc:	6022      	streq	r2, [r4, #0]
 800c1de:	602c      	str	r4, [r5, #0]
 800c1e0:	e7ec      	b.n	800c1bc <_free_r+0x28>
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	b10b      	cbz	r3, 800c1ec <_free_r+0x58>
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d9fa      	bls.n	800c1e2 <_free_r+0x4e>
 800c1ec:	6811      	ldr	r1, [r2, #0]
 800c1ee:	1855      	adds	r5, r2, r1
 800c1f0:	42a5      	cmp	r5, r4
 800c1f2:	d10b      	bne.n	800c20c <_free_r+0x78>
 800c1f4:	6824      	ldr	r4, [r4, #0]
 800c1f6:	4421      	add	r1, r4
 800c1f8:	1854      	adds	r4, r2, r1
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	6011      	str	r1, [r2, #0]
 800c1fe:	d1dd      	bne.n	800c1bc <_free_r+0x28>
 800c200:	681c      	ldr	r4, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	6053      	str	r3, [r2, #4]
 800c206:	4421      	add	r1, r4
 800c208:	6011      	str	r1, [r2, #0]
 800c20a:	e7d7      	b.n	800c1bc <_free_r+0x28>
 800c20c:	d902      	bls.n	800c214 <_free_r+0x80>
 800c20e:	230c      	movs	r3, #12
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	e7d3      	b.n	800c1bc <_free_r+0x28>
 800c214:	6825      	ldr	r5, [r4, #0]
 800c216:	1961      	adds	r1, r4, r5
 800c218:	428b      	cmp	r3, r1
 800c21a:	bf04      	itt	eq
 800c21c:	6819      	ldreq	r1, [r3, #0]
 800c21e:	685b      	ldreq	r3, [r3, #4]
 800c220:	6063      	str	r3, [r4, #4]
 800c222:	bf04      	itt	eq
 800c224:	1949      	addeq	r1, r1, r5
 800c226:	6021      	streq	r1, [r4, #0]
 800c228:	6054      	str	r4, [r2, #4]
 800c22a:	e7c7      	b.n	800c1bc <_free_r+0x28>
 800c22c:	b003      	add	sp, #12
 800c22e:	bd30      	pop	{r4, r5, pc}
 800c230:	2000060c 	.word	0x2000060c

0800c234 <_malloc_r>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	1ccd      	adds	r5, r1, #3
 800c238:	f025 0503 	bic.w	r5, r5, #3
 800c23c:	3508      	adds	r5, #8
 800c23e:	2d0c      	cmp	r5, #12
 800c240:	bf38      	it	cc
 800c242:	250c      	movcc	r5, #12
 800c244:	2d00      	cmp	r5, #0
 800c246:	4606      	mov	r6, r0
 800c248:	db01      	blt.n	800c24e <_malloc_r+0x1a>
 800c24a:	42a9      	cmp	r1, r5
 800c24c:	d903      	bls.n	800c256 <_malloc_r+0x22>
 800c24e:	230c      	movs	r3, #12
 800c250:	6033      	str	r3, [r6, #0]
 800c252:	2000      	movs	r0, #0
 800c254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c256:	f000 fc39 	bl	800cacc <__malloc_lock>
 800c25a:	4921      	ldr	r1, [pc, #132]	; (800c2e0 <_malloc_r+0xac>)
 800c25c:	680a      	ldr	r2, [r1, #0]
 800c25e:	4614      	mov	r4, r2
 800c260:	b99c      	cbnz	r4, 800c28a <_malloc_r+0x56>
 800c262:	4f20      	ldr	r7, [pc, #128]	; (800c2e4 <_malloc_r+0xb0>)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	b923      	cbnz	r3, 800c272 <_malloc_r+0x3e>
 800c268:	4621      	mov	r1, r4
 800c26a:	4630      	mov	r0, r6
 800c26c:	f000 fb44 	bl	800c8f8 <_sbrk_r>
 800c270:	6038      	str	r0, [r7, #0]
 800c272:	4629      	mov	r1, r5
 800c274:	4630      	mov	r0, r6
 800c276:	f000 fb3f 	bl	800c8f8 <_sbrk_r>
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	d123      	bne.n	800c2c6 <_malloc_r+0x92>
 800c27e:	230c      	movs	r3, #12
 800c280:	6033      	str	r3, [r6, #0]
 800c282:	4630      	mov	r0, r6
 800c284:	f000 fc28 	bl	800cad8 <__malloc_unlock>
 800c288:	e7e3      	b.n	800c252 <_malloc_r+0x1e>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	1b5b      	subs	r3, r3, r5
 800c28e:	d417      	bmi.n	800c2c0 <_malloc_r+0x8c>
 800c290:	2b0b      	cmp	r3, #11
 800c292:	d903      	bls.n	800c29c <_malloc_r+0x68>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	441c      	add	r4, r3
 800c298:	6025      	str	r5, [r4, #0]
 800c29a:	e004      	b.n	800c2a6 <_malloc_r+0x72>
 800c29c:	6863      	ldr	r3, [r4, #4]
 800c29e:	42a2      	cmp	r2, r4
 800c2a0:	bf0c      	ite	eq
 800c2a2:	600b      	streq	r3, [r1, #0]
 800c2a4:	6053      	strne	r3, [r2, #4]
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 fc16 	bl	800cad8 <__malloc_unlock>
 800c2ac:	f104 000b 	add.w	r0, r4, #11
 800c2b0:	1d23      	adds	r3, r4, #4
 800c2b2:	f020 0007 	bic.w	r0, r0, #7
 800c2b6:	1ac2      	subs	r2, r0, r3
 800c2b8:	d0cc      	beq.n	800c254 <_malloc_r+0x20>
 800c2ba:	1a1b      	subs	r3, r3, r0
 800c2bc:	50a3      	str	r3, [r4, r2]
 800c2be:	e7c9      	b.n	800c254 <_malloc_r+0x20>
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	6864      	ldr	r4, [r4, #4]
 800c2c4:	e7cc      	b.n	800c260 <_malloc_r+0x2c>
 800c2c6:	1cc4      	adds	r4, r0, #3
 800c2c8:	f024 0403 	bic.w	r4, r4, #3
 800c2cc:	42a0      	cmp	r0, r4
 800c2ce:	d0e3      	beq.n	800c298 <_malloc_r+0x64>
 800c2d0:	1a21      	subs	r1, r4, r0
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 fb10 	bl	800c8f8 <_sbrk_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d1dd      	bne.n	800c298 <_malloc_r+0x64>
 800c2dc:	e7cf      	b.n	800c27e <_malloc_r+0x4a>
 800c2de:	bf00      	nop
 800c2e0:	2000060c 	.word	0x2000060c
 800c2e4:	20000610 	.word	0x20000610

0800c2e8 <__ssputs_r>:
 800c2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ec:	688e      	ldr	r6, [r1, #8]
 800c2ee:	429e      	cmp	r6, r3
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	4690      	mov	r8, r2
 800c2f6:	461f      	mov	r7, r3
 800c2f8:	d838      	bhi.n	800c36c <__ssputs_r+0x84>
 800c2fa:	898a      	ldrh	r2, [r1, #12]
 800c2fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c300:	d032      	beq.n	800c368 <__ssputs_r+0x80>
 800c302:	6825      	ldr	r5, [r4, #0]
 800c304:	6909      	ldr	r1, [r1, #16]
 800c306:	eba5 0901 	sub.w	r9, r5, r1
 800c30a:	6965      	ldr	r5, [r4, #20]
 800c30c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c314:	3301      	adds	r3, #1
 800c316:	444b      	add	r3, r9
 800c318:	106d      	asrs	r5, r5, #1
 800c31a:	429d      	cmp	r5, r3
 800c31c:	bf38      	it	cc
 800c31e:	461d      	movcc	r5, r3
 800c320:	0553      	lsls	r3, r2, #21
 800c322:	d531      	bpl.n	800c388 <__ssputs_r+0xa0>
 800c324:	4629      	mov	r1, r5
 800c326:	f7ff ff85 	bl	800c234 <_malloc_r>
 800c32a:	4606      	mov	r6, r0
 800c32c:	b950      	cbnz	r0, 800c344 <__ssputs_r+0x5c>
 800c32e:	230c      	movs	r3, #12
 800c330:	f8ca 3000 	str.w	r3, [sl]
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33a:	81a3      	strh	r3, [r4, #12]
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c344:	6921      	ldr	r1, [r4, #16]
 800c346:	464a      	mov	r2, r9
 800c348:	f7ff fa4c 	bl	800b7e4 <memcpy>
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c356:	81a3      	strh	r3, [r4, #12]
 800c358:	6126      	str	r6, [r4, #16]
 800c35a:	6165      	str	r5, [r4, #20]
 800c35c:	444e      	add	r6, r9
 800c35e:	eba5 0509 	sub.w	r5, r5, r9
 800c362:	6026      	str	r6, [r4, #0]
 800c364:	60a5      	str	r5, [r4, #8]
 800c366:	463e      	mov	r6, r7
 800c368:	42be      	cmp	r6, r7
 800c36a:	d900      	bls.n	800c36e <__ssputs_r+0x86>
 800c36c:	463e      	mov	r6, r7
 800c36e:	4632      	mov	r2, r6
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	4641      	mov	r1, r8
 800c374:	f000 fb90 	bl	800ca98 <memmove>
 800c378:	68a3      	ldr	r3, [r4, #8]
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	1b9b      	subs	r3, r3, r6
 800c37e:	4432      	add	r2, r6
 800c380:	60a3      	str	r3, [r4, #8]
 800c382:	6022      	str	r2, [r4, #0]
 800c384:	2000      	movs	r0, #0
 800c386:	e7db      	b.n	800c340 <__ssputs_r+0x58>
 800c388:	462a      	mov	r2, r5
 800c38a:	f000 fbab 	bl	800cae4 <_realloc_r>
 800c38e:	4606      	mov	r6, r0
 800c390:	2800      	cmp	r0, #0
 800c392:	d1e1      	bne.n	800c358 <__ssputs_r+0x70>
 800c394:	6921      	ldr	r1, [r4, #16]
 800c396:	4650      	mov	r0, sl
 800c398:	f7ff fefc 	bl	800c194 <_free_r>
 800c39c:	e7c7      	b.n	800c32e <__ssputs_r+0x46>
	...

0800c3a0 <_svfiprintf_r>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	4698      	mov	r8, r3
 800c3a6:	898b      	ldrh	r3, [r1, #12]
 800c3a8:	061b      	lsls	r3, r3, #24
 800c3aa:	b09d      	sub	sp, #116	; 0x74
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	d50e      	bpl.n	800c3d2 <_svfiprintf_r+0x32>
 800c3b4:	690b      	ldr	r3, [r1, #16]
 800c3b6:	b963      	cbnz	r3, 800c3d2 <_svfiprintf_r+0x32>
 800c3b8:	2140      	movs	r1, #64	; 0x40
 800c3ba:	f7ff ff3b 	bl	800c234 <_malloc_r>
 800c3be:	6028      	str	r0, [r5, #0]
 800c3c0:	6128      	str	r0, [r5, #16]
 800c3c2:	b920      	cbnz	r0, 800c3ce <_svfiprintf_r+0x2e>
 800c3c4:	230c      	movs	r3, #12
 800c3c6:	603b      	str	r3, [r7, #0]
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3cc:	e0d1      	b.n	800c572 <_svfiprintf_r+0x1d2>
 800c3ce:	2340      	movs	r3, #64	; 0x40
 800c3d0:	616b      	str	r3, [r5, #20]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d6:	2320      	movs	r3, #32
 800c3d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3e0:	2330      	movs	r3, #48	; 0x30
 800c3e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c58c <_svfiprintf_r+0x1ec>
 800c3e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3ea:	f04f 0901 	mov.w	r9, #1
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	469a      	mov	sl, r3
 800c3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f6:	b10a      	cbz	r2, 800c3fc <_svfiprintf_r+0x5c>
 800c3f8:	2a25      	cmp	r2, #37	; 0x25
 800c3fa:	d1f9      	bne.n	800c3f0 <_svfiprintf_r+0x50>
 800c3fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c400:	d00b      	beq.n	800c41a <_svfiprintf_r+0x7a>
 800c402:	465b      	mov	r3, fp
 800c404:	4622      	mov	r2, r4
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ff6d 	bl	800c2e8 <__ssputs_r>
 800c40e:	3001      	adds	r0, #1
 800c410:	f000 80aa 	beq.w	800c568 <_svfiprintf_r+0x1c8>
 800c414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c416:	445a      	add	r2, fp
 800c418:	9209      	str	r2, [sp, #36]	; 0x24
 800c41a:	f89a 3000 	ldrb.w	r3, [sl]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 80a2 	beq.w	800c568 <_svfiprintf_r+0x1c8>
 800c424:	2300      	movs	r3, #0
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c42e:	f10a 0a01 	add.w	sl, sl, #1
 800c432:	9304      	str	r3, [sp, #16]
 800c434:	9307      	str	r3, [sp, #28]
 800c436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c43a:	931a      	str	r3, [sp, #104]	; 0x68
 800c43c:	4654      	mov	r4, sl
 800c43e:	2205      	movs	r2, #5
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	4851      	ldr	r0, [pc, #324]	; (800c58c <_svfiprintf_r+0x1ec>)
 800c446:	f7f3 ff03 	bl	8000250 <memchr>
 800c44a:	9a04      	ldr	r2, [sp, #16]
 800c44c:	b9d8      	cbnz	r0, 800c486 <_svfiprintf_r+0xe6>
 800c44e:	06d0      	lsls	r0, r2, #27
 800c450:	bf44      	itt	mi
 800c452:	2320      	movmi	r3, #32
 800c454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c458:	0711      	lsls	r1, r2, #28
 800c45a:	bf44      	itt	mi
 800c45c:	232b      	movmi	r3, #43	; 0x2b
 800c45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b2a      	cmp	r3, #42	; 0x2a
 800c468:	d015      	beq.n	800c496 <_svfiprintf_r+0xf6>
 800c46a:	9a07      	ldr	r2, [sp, #28]
 800c46c:	4654      	mov	r4, sl
 800c46e:	2000      	movs	r0, #0
 800c470:	f04f 0c0a 	mov.w	ip, #10
 800c474:	4621      	mov	r1, r4
 800c476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c47a:	3b30      	subs	r3, #48	; 0x30
 800c47c:	2b09      	cmp	r3, #9
 800c47e:	d94e      	bls.n	800c51e <_svfiprintf_r+0x17e>
 800c480:	b1b0      	cbz	r0, 800c4b0 <_svfiprintf_r+0x110>
 800c482:	9207      	str	r2, [sp, #28]
 800c484:	e014      	b.n	800c4b0 <_svfiprintf_r+0x110>
 800c486:	eba0 0308 	sub.w	r3, r0, r8
 800c48a:	fa09 f303 	lsl.w	r3, r9, r3
 800c48e:	4313      	orrs	r3, r2
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	46a2      	mov	sl, r4
 800c494:	e7d2      	b.n	800c43c <_svfiprintf_r+0x9c>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	1d19      	adds	r1, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9103      	str	r1, [sp, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfbb      	ittet	lt
 800c4a2:	425b      	neglt	r3, r3
 800c4a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a8:	9307      	strge	r3, [sp, #28]
 800c4aa:	9307      	strlt	r3, [sp, #28]
 800c4ac:	bfb8      	it	lt
 800c4ae:	9204      	strlt	r2, [sp, #16]
 800c4b0:	7823      	ldrb	r3, [r4, #0]
 800c4b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b4:	d10c      	bne.n	800c4d0 <_svfiprintf_r+0x130>
 800c4b6:	7863      	ldrb	r3, [r4, #1]
 800c4b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ba:	d135      	bne.n	800c528 <_svfiprintf_r+0x188>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	9203      	str	r2, [sp, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bfb8      	it	lt
 800c4c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4cc:	3402      	adds	r4, #2
 800c4ce:	9305      	str	r3, [sp, #20]
 800c4d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c59c <_svfiprintf_r+0x1fc>
 800c4d4:	7821      	ldrb	r1, [r4, #0]
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	4650      	mov	r0, sl
 800c4da:	f7f3 feb9 	bl	8000250 <memchr>
 800c4de:	b140      	cbz	r0, 800c4f2 <_svfiprintf_r+0x152>
 800c4e0:	2340      	movs	r3, #64	; 0x40
 800c4e2:	eba0 000a 	sub.w	r0, r0, sl
 800c4e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	4303      	orrs	r3, r0
 800c4ee:	3401      	adds	r4, #1
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f6:	4826      	ldr	r0, [pc, #152]	; (800c590 <_svfiprintf_r+0x1f0>)
 800c4f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4fc:	2206      	movs	r2, #6
 800c4fe:	f7f3 fea7 	bl	8000250 <memchr>
 800c502:	2800      	cmp	r0, #0
 800c504:	d038      	beq.n	800c578 <_svfiprintf_r+0x1d8>
 800c506:	4b23      	ldr	r3, [pc, #140]	; (800c594 <_svfiprintf_r+0x1f4>)
 800c508:	bb1b      	cbnz	r3, 800c552 <_svfiprintf_r+0x1b2>
 800c50a:	9b03      	ldr	r3, [sp, #12]
 800c50c:	3307      	adds	r3, #7
 800c50e:	f023 0307 	bic.w	r3, r3, #7
 800c512:	3308      	adds	r3, #8
 800c514:	9303      	str	r3, [sp, #12]
 800c516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c518:	4433      	add	r3, r6
 800c51a:	9309      	str	r3, [sp, #36]	; 0x24
 800c51c:	e767      	b.n	800c3ee <_svfiprintf_r+0x4e>
 800c51e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c522:	460c      	mov	r4, r1
 800c524:	2001      	movs	r0, #1
 800c526:	e7a5      	b.n	800c474 <_svfiprintf_r+0xd4>
 800c528:	2300      	movs	r3, #0
 800c52a:	3401      	adds	r4, #1
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	4619      	mov	r1, r3
 800c530:	f04f 0c0a 	mov.w	ip, #10
 800c534:	4620      	mov	r0, r4
 800c536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c53a:	3a30      	subs	r2, #48	; 0x30
 800c53c:	2a09      	cmp	r2, #9
 800c53e:	d903      	bls.n	800c548 <_svfiprintf_r+0x1a8>
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0c5      	beq.n	800c4d0 <_svfiprintf_r+0x130>
 800c544:	9105      	str	r1, [sp, #20]
 800c546:	e7c3      	b.n	800c4d0 <_svfiprintf_r+0x130>
 800c548:	fb0c 2101 	mla	r1, ip, r1, r2
 800c54c:	4604      	mov	r4, r0
 800c54e:	2301      	movs	r3, #1
 800c550:	e7f0      	b.n	800c534 <_svfiprintf_r+0x194>
 800c552:	ab03      	add	r3, sp, #12
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	462a      	mov	r2, r5
 800c558:	4b0f      	ldr	r3, [pc, #60]	; (800c598 <_svfiprintf_r+0x1f8>)
 800c55a:	a904      	add	r1, sp, #16
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7fb fe49 	bl	80081f4 <_printf_float>
 800c562:	1c42      	adds	r2, r0, #1
 800c564:	4606      	mov	r6, r0
 800c566:	d1d6      	bne.n	800c516 <_svfiprintf_r+0x176>
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	065b      	lsls	r3, r3, #25
 800c56c:	f53f af2c 	bmi.w	800c3c8 <_svfiprintf_r+0x28>
 800c570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c572:	b01d      	add	sp, #116	; 0x74
 800c574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c578:	ab03      	add	r3, sp, #12
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	462a      	mov	r2, r5
 800c57e:	4b06      	ldr	r3, [pc, #24]	; (800c598 <_svfiprintf_r+0x1f8>)
 800c580:	a904      	add	r1, sp, #16
 800c582:	4638      	mov	r0, r7
 800c584:	f7fc f8da 	bl	800873c <_printf_i>
 800c588:	e7eb      	b.n	800c562 <_svfiprintf_r+0x1c2>
 800c58a:	bf00      	nop
 800c58c:	0800eea4 	.word	0x0800eea4
 800c590:	0800eeae 	.word	0x0800eeae
 800c594:	080081f5 	.word	0x080081f5
 800c598:	0800c2e9 	.word	0x0800c2e9
 800c59c:	0800eeaa 	.word	0x0800eeaa

0800c5a0 <__sfputc_r>:
 800c5a0:	6893      	ldr	r3, [r2, #8]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	b410      	push	{r4}
 800c5a8:	6093      	str	r3, [r2, #8]
 800c5aa:	da08      	bge.n	800c5be <__sfputc_r+0x1e>
 800c5ac:	6994      	ldr	r4, [r2, #24]
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	db01      	blt.n	800c5b6 <__sfputc_r+0x16>
 800c5b2:	290a      	cmp	r1, #10
 800c5b4:	d103      	bne.n	800c5be <__sfputc_r+0x1e>
 800c5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ba:	f7fd bbff 	b.w	8009dbc <__swbuf_r>
 800c5be:	6813      	ldr	r3, [r2, #0]
 800c5c0:	1c58      	adds	r0, r3, #1
 800c5c2:	6010      	str	r0, [r2, #0]
 800c5c4:	7019      	strb	r1, [r3, #0]
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <__sfputs_r>:
 800c5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	18d5      	adds	r5, r2, r3
 800c5d8:	42ac      	cmp	r4, r5
 800c5da:	d101      	bne.n	800c5e0 <__sfputs_r+0x12>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e007      	b.n	800c5f0 <__sfputs_r+0x22>
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	463a      	mov	r2, r7
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7ff ffda 	bl	800c5a0 <__sfputc_r>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d1f3      	bne.n	800c5d8 <__sfputs_r+0xa>
 800c5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5f4 <_vfiprintf_r>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	b09d      	sub	sp, #116	; 0x74
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	4698      	mov	r8, r3
 800c600:	4606      	mov	r6, r0
 800c602:	b118      	cbz	r0, 800c60c <_vfiprintf_r+0x18>
 800c604:	6983      	ldr	r3, [r0, #24]
 800c606:	b90b      	cbnz	r3, 800c60c <_vfiprintf_r+0x18>
 800c608:	f7fe fc48 	bl	800ae9c <__sinit>
 800c60c:	4b89      	ldr	r3, [pc, #548]	; (800c834 <_vfiprintf_r+0x240>)
 800c60e:	429d      	cmp	r5, r3
 800c610:	d11b      	bne.n	800c64a <_vfiprintf_r+0x56>
 800c612:	6875      	ldr	r5, [r6, #4]
 800c614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c616:	07d9      	lsls	r1, r3, #31
 800c618:	d405      	bmi.n	800c626 <_vfiprintf_r+0x32>
 800c61a:	89ab      	ldrh	r3, [r5, #12]
 800c61c:	059a      	lsls	r2, r3, #22
 800c61e:	d402      	bmi.n	800c626 <_vfiprintf_r+0x32>
 800c620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c622:	f7ff f85e 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 800c626:	89ab      	ldrh	r3, [r5, #12]
 800c628:	071b      	lsls	r3, r3, #28
 800c62a:	d501      	bpl.n	800c630 <_vfiprintf_r+0x3c>
 800c62c:	692b      	ldr	r3, [r5, #16]
 800c62e:	b9eb      	cbnz	r3, 800c66c <_vfiprintf_r+0x78>
 800c630:	4629      	mov	r1, r5
 800c632:	4630      	mov	r0, r6
 800c634:	f7fd fc14 	bl	8009e60 <__swsetup_r>
 800c638:	b1c0      	cbz	r0, 800c66c <_vfiprintf_r+0x78>
 800c63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c63c:	07dc      	lsls	r4, r3, #31
 800c63e:	d50e      	bpl.n	800c65e <_vfiprintf_r+0x6a>
 800c640:	f04f 30ff 	mov.w	r0, #4294967295
 800c644:	b01d      	add	sp, #116	; 0x74
 800c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64a:	4b7b      	ldr	r3, [pc, #492]	; (800c838 <_vfiprintf_r+0x244>)
 800c64c:	429d      	cmp	r5, r3
 800c64e:	d101      	bne.n	800c654 <_vfiprintf_r+0x60>
 800c650:	68b5      	ldr	r5, [r6, #8]
 800c652:	e7df      	b.n	800c614 <_vfiprintf_r+0x20>
 800c654:	4b79      	ldr	r3, [pc, #484]	; (800c83c <_vfiprintf_r+0x248>)
 800c656:	429d      	cmp	r5, r3
 800c658:	bf08      	it	eq
 800c65a:	68f5      	ldreq	r5, [r6, #12]
 800c65c:	e7da      	b.n	800c614 <_vfiprintf_r+0x20>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	0598      	lsls	r0, r3, #22
 800c662:	d4ed      	bmi.n	800c640 <_vfiprintf_r+0x4c>
 800c664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c666:	f7ff f83d 	bl	800b6e4 <__retarget_lock_release_recursive>
 800c66a:	e7e9      	b.n	800c640 <_vfiprintf_r+0x4c>
 800c66c:	2300      	movs	r3, #0
 800c66e:	9309      	str	r3, [sp, #36]	; 0x24
 800c670:	2320      	movs	r3, #32
 800c672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c676:	f8cd 800c 	str.w	r8, [sp, #12]
 800c67a:	2330      	movs	r3, #48	; 0x30
 800c67c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c840 <_vfiprintf_r+0x24c>
 800c680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c684:	f04f 0901 	mov.w	r9, #1
 800c688:	4623      	mov	r3, r4
 800c68a:	469a      	mov	sl, r3
 800c68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c690:	b10a      	cbz	r2, 800c696 <_vfiprintf_r+0xa2>
 800c692:	2a25      	cmp	r2, #37	; 0x25
 800c694:	d1f9      	bne.n	800c68a <_vfiprintf_r+0x96>
 800c696:	ebba 0b04 	subs.w	fp, sl, r4
 800c69a:	d00b      	beq.n	800c6b4 <_vfiprintf_r+0xc0>
 800c69c:	465b      	mov	r3, fp
 800c69e:	4622      	mov	r2, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f7ff ff93 	bl	800c5ce <__sfputs_r>
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	f000 80aa 	beq.w	800c802 <_vfiprintf_r+0x20e>
 800c6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b0:	445a      	add	r2, fp
 800c6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 80a2 	beq.w	800c802 <_vfiprintf_r+0x20e>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c8:	f10a 0a01 	add.w	sl, sl, #1
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	9307      	str	r3, [sp, #28]
 800c6d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6d4:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d6:	4654      	mov	r4, sl
 800c6d8:	2205      	movs	r2, #5
 800c6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6de:	4858      	ldr	r0, [pc, #352]	; (800c840 <_vfiprintf_r+0x24c>)
 800c6e0:	f7f3 fdb6 	bl	8000250 <memchr>
 800c6e4:	9a04      	ldr	r2, [sp, #16]
 800c6e6:	b9d8      	cbnz	r0, 800c720 <_vfiprintf_r+0x12c>
 800c6e8:	06d1      	lsls	r1, r2, #27
 800c6ea:	bf44      	itt	mi
 800c6ec:	2320      	movmi	r3, #32
 800c6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f2:	0713      	lsls	r3, r2, #28
 800c6f4:	bf44      	itt	mi
 800c6f6:	232b      	movmi	r3, #43	; 0x2b
 800c6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c700:	2b2a      	cmp	r3, #42	; 0x2a
 800c702:	d015      	beq.n	800c730 <_vfiprintf_r+0x13c>
 800c704:	9a07      	ldr	r2, [sp, #28]
 800c706:	4654      	mov	r4, sl
 800c708:	2000      	movs	r0, #0
 800c70a:	f04f 0c0a 	mov.w	ip, #10
 800c70e:	4621      	mov	r1, r4
 800c710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c714:	3b30      	subs	r3, #48	; 0x30
 800c716:	2b09      	cmp	r3, #9
 800c718:	d94e      	bls.n	800c7b8 <_vfiprintf_r+0x1c4>
 800c71a:	b1b0      	cbz	r0, 800c74a <_vfiprintf_r+0x156>
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	e014      	b.n	800c74a <_vfiprintf_r+0x156>
 800c720:	eba0 0308 	sub.w	r3, r0, r8
 800c724:	fa09 f303 	lsl.w	r3, r9, r3
 800c728:	4313      	orrs	r3, r2
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	46a2      	mov	sl, r4
 800c72e:	e7d2      	b.n	800c6d6 <_vfiprintf_r+0xe2>
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	1d19      	adds	r1, r3, #4
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	9103      	str	r1, [sp, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bfbb      	ittet	lt
 800c73c:	425b      	neglt	r3, r3
 800c73e:	f042 0202 	orrlt.w	r2, r2, #2
 800c742:	9307      	strge	r3, [sp, #28]
 800c744:	9307      	strlt	r3, [sp, #28]
 800c746:	bfb8      	it	lt
 800c748:	9204      	strlt	r2, [sp, #16]
 800c74a:	7823      	ldrb	r3, [r4, #0]
 800c74c:	2b2e      	cmp	r3, #46	; 0x2e
 800c74e:	d10c      	bne.n	800c76a <_vfiprintf_r+0x176>
 800c750:	7863      	ldrb	r3, [r4, #1]
 800c752:	2b2a      	cmp	r3, #42	; 0x2a
 800c754:	d135      	bne.n	800c7c2 <_vfiprintf_r+0x1ce>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	1d1a      	adds	r2, r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	9203      	str	r2, [sp, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfb8      	it	lt
 800c762:	f04f 33ff 	movlt.w	r3, #4294967295
 800c766:	3402      	adds	r4, #2
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c850 <_vfiprintf_r+0x25c>
 800c76e:	7821      	ldrb	r1, [r4, #0]
 800c770:	2203      	movs	r2, #3
 800c772:	4650      	mov	r0, sl
 800c774:	f7f3 fd6c 	bl	8000250 <memchr>
 800c778:	b140      	cbz	r0, 800c78c <_vfiprintf_r+0x198>
 800c77a:	2340      	movs	r3, #64	; 0x40
 800c77c:	eba0 000a 	sub.w	r0, r0, sl
 800c780:	fa03 f000 	lsl.w	r0, r3, r0
 800c784:	9b04      	ldr	r3, [sp, #16]
 800c786:	4303      	orrs	r3, r0
 800c788:	3401      	adds	r4, #1
 800c78a:	9304      	str	r3, [sp, #16]
 800c78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c790:	482c      	ldr	r0, [pc, #176]	; (800c844 <_vfiprintf_r+0x250>)
 800c792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c796:	2206      	movs	r2, #6
 800c798:	f7f3 fd5a 	bl	8000250 <memchr>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d03f      	beq.n	800c820 <_vfiprintf_r+0x22c>
 800c7a0:	4b29      	ldr	r3, [pc, #164]	; (800c848 <_vfiprintf_r+0x254>)
 800c7a2:	bb1b      	cbnz	r3, 800c7ec <_vfiprintf_r+0x1f8>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	3307      	adds	r3, #7
 800c7a8:	f023 0307 	bic.w	r3, r3, #7
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b2:	443b      	add	r3, r7
 800c7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b6:	e767      	b.n	800c688 <_vfiprintf_r+0x94>
 800c7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7bc:	460c      	mov	r4, r1
 800c7be:	2001      	movs	r0, #1
 800c7c0:	e7a5      	b.n	800c70e <_vfiprintf_r+0x11a>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	3401      	adds	r4, #1
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	f04f 0c0a 	mov.w	ip, #10
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7d4:	3a30      	subs	r2, #48	; 0x30
 800c7d6:	2a09      	cmp	r2, #9
 800c7d8:	d903      	bls.n	800c7e2 <_vfiprintf_r+0x1ee>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0c5      	beq.n	800c76a <_vfiprintf_r+0x176>
 800c7de:	9105      	str	r1, [sp, #20]
 800c7e0:	e7c3      	b.n	800c76a <_vfiprintf_r+0x176>
 800c7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e7f0      	b.n	800c7ce <_vfiprintf_r+0x1da>
 800c7ec:	ab03      	add	r3, sp, #12
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	4b16      	ldr	r3, [pc, #88]	; (800c84c <_vfiprintf_r+0x258>)
 800c7f4:	a904      	add	r1, sp, #16
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7fb fcfc 	bl	80081f4 <_printf_float>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	1c78      	adds	r0, r7, #1
 800c800:	d1d6      	bne.n	800c7b0 <_vfiprintf_r+0x1bc>
 800c802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c804:	07d9      	lsls	r1, r3, #31
 800c806:	d405      	bmi.n	800c814 <_vfiprintf_r+0x220>
 800c808:	89ab      	ldrh	r3, [r5, #12]
 800c80a:	059a      	lsls	r2, r3, #22
 800c80c:	d402      	bmi.n	800c814 <_vfiprintf_r+0x220>
 800c80e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c810:	f7fe ff68 	bl	800b6e4 <__retarget_lock_release_recursive>
 800c814:	89ab      	ldrh	r3, [r5, #12]
 800c816:	065b      	lsls	r3, r3, #25
 800c818:	f53f af12 	bmi.w	800c640 <_vfiprintf_r+0x4c>
 800c81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c81e:	e711      	b.n	800c644 <_vfiprintf_r+0x50>
 800c820:	ab03      	add	r3, sp, #12
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	462a      	mov	r2, r5
 800c826:	4b09      	ldr	r3, [pc, #36]	; (800c84c <_vfiprintf_r+0x258>)
 800c828:	a904      	add	r1, sp, #16
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7fb ff86 	bl	800873c <_printf_i>
 800c830:	e7e4      	b.n	800c7fc <_vfiprintf_r+0x208>
 800c832:	bf00      	nop
 800c834:	0800ec84 	.word	0x0800ec84
 800c838:	0800eca4 	.word	0x0800eca4
 800c83c:	0800ec64 	.word	0x0800ec64
 800c840:	0800eea4 	.word	0x0800eea4
 800c844:	0800eeae 	.word	0x0800eeae
 800c848:	080081f5 	.word	0x080081f5
 800c84c:	0800c5cf 	.word	0x0800c5cf
 800c850:	0800eeaa 	.word	0x0800eeaa

0800c854 <_putc_r>:
 800c854:	b570      	push	{r4, r5, r6, lr}
 800c856:	460d      	mov	r5, r1
 800c858:	4614      	mov	r4, r2
 800c85a:	4606      	mov	r6, r0
 800c85c:	b118      	cbz	r0, 800c866 <_putc_r+0x12>
 800c85e:	6983      	ldr	r3, [r0, #24]
 800c860:	b90b      	cbnz	r3, 800c866 <_putc_r+0x12>
 800c862:	f7fe fb1b 	bl	800ae9c <__sinit>
 800c866:	4b1c      	ldr	r3, [pc, #112]	; (800c8d8 <_putc_r+0x84>)
 800c868:	429c      	cmp	r4, r3
 800c86a:	d124      	bne.n	800c8b6 <_putc_r+0x62>
 800c86c:	6874      	ldr	r4, [r6, #4]
 800c86e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c870:	07d8      	lsls	r0, r3, #31
 800c872:	d405      	bmi.n	800c880 <_putc_r+0x2c>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	0599      	lsls	r1, r3, #22
 800c878:	d402      	bmi.n	800c880 <_putc_r+0x2c>
 800c87a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c87c:	f7fe ff31 	bl	800b6e2 <__retarget_lock_acquire_recursive>
 800c880:	68a3      	ldr	r3, [r4, #8]
 800c882:	3b01      	subs	r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	60a3      	str	r3, [r4, #8]
 800c888:	da05      	bge.n	800c896 <_putc_r+0x42>
 800c88a:	69a2      	ldr	r2, [r4, #24]
 800c88c:	4293      	cmp	r3, r2
 800c88e:	db1c      	blt.n	800c8ca <_putc_r+0x76>
 800c890:	b2eb      	uxtb	r3, r5
 800c892:	2b0a      	cmp	r3, #10
 800c894:	d019      	beq.n	800c8ca <_putc_r+0x76>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	6022      	str	r2, [r4, #0]
 800c89c:	701d      	strb	r5, [r3, #0]
 800c89e:	b2ed      	uxtb	r5, r5
 800c8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8a2:	07da      	lsls	r2, r3, #31
 800c8a4:	d405      	bmi.n	800c8b2 <_putc_r+0x5e>
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	059b      	lsls	r3, r3, #22
 800c8aa:	d402      	bmi.n	800c8b2 <_putc_r+0x5e>
 800c8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ae:	f7fe ff19 	bl	800b6e4 <__retarget_lock_release_recursive>
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
 800c8b6:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <_putc_r+0x88>)
 800c8b8:	429c      	cmp	r4, r3
 800c8ba:	d101      	bne.n	800c8c0 <_putc_r+0x6c>
 800c8bc:	68b4      	ldr	r4, [r6, #8]
 800c8be:	e7d6      	b.n	800c86e <_putc_r+0x1a>
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <_putc_r+0x8c>)
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	bf08      	it	eq
 800c8c6:	68f4      	ldreq	r4, [r6, #12]
 800c8c8:	e7d1      	b.n	800c86e <_putc_r+0x1a>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7fd fa74 	bl	8009dbc <__swbuf_r>
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	e7e3      	b.n	800c8a0 <_putc_r+0x4c>
 800c8d8:	0800ec84 	.word	0x0800ec84
 800c8dc:	0800eca4 	.word	0x0800eca4
 800c8e0:	0800ec64 	.word	0x0800ec64
 800c8e4:	00000000 	.word	0x00000000

0800c8e8 <nan>:
 800c8e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c8f0 <nan+0x8>
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	7ff80000 	.word	0x7ff80000

0800c8f8 <_sbrk_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_sbrk_r+0x1c>)
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f7 f944 	bl	8003b90 <_sbrk>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_sbrk_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_sbrk_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	200008a0 	.word	0x200008a0

0800c918 <__sread>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	460c      	mov	r4, r1
 800c91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c920:	f000 f906 	bl	800cb30 <_read_r>
 800c924:	2800      	cmp	r0, #0
 800c926:	bfab      	itete	ge
 800c928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c92a:	89a3      	ldrhlt	r3, [r4, #12]
 800c92c:	181b      	addge	r3, r3, r0
 800c92e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c932:	bfac      	ite	ge
 800c934:	6563      	strge	r3, [r4, #84]	; 0x54
 800c936:	81a3      	strhlt	r3, [r4, #12]
 800c938:	bd10      	pop	{r4, pc}

0800c93a <__swrite>:
 800c93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93e:	461f      	mov	r7, r3
 800c940:	898b      	ldrh	r3, [r1, #12]
 800c942:	05db      	lsls	r3, r3, #23
 800c944:	4605      	mov	r5, r0
 800c946:	460c      	mov	r4, r1
 800c948:	4616      	mov	r6, r2
 800c94a:	d505      	bpl.n	800c958 <__swrite+0x1e>
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2302      	movs	r3, #2
 800c952:	2200      	movs	r2, #0
 800c954:	f000 f88e 	bl	800ca74 <_lseek_r>
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c95e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	4632      	mov	r2, r6
 800c966:	463b      	mov	r3, r7
 800c968:	4628      	mov	r0, r5
 800c96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c96e:	f000 b835 	b.w	800c9dc <_write_r>

0800c972 <__sseek>:
 800c972:	b510      	push	{r4, lr}
 800c974:	460c      	mov	r4, r1
 800c976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c97a:	f000 f87b 	bl	800ca74 <_lseek_r>
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	bf15      	itete	ne
 800c984:	6560      	strne	r0, [r4, #84]	; 0x54
 800c986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c98a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c98e:	81a3      	strheq	r3, [r4, #12]
 800c990:	bf18      	it	ne
 800c992:	81a3      	strhne	r3, [r4, #12]
 800c994:	bd10      	pop	{r4, pc}

0800c996 <__sclose>:
 800c996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99a:	f000 b839 	b.w	800ca10 <_close_r>

0800c99e <strncmp>:
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	b16a      	cbz	r2, 800c9be <strncmp+0x20>
 800c9a2:	3901      	subs	r1, #1
 800c9a4:	1884      	adds	r4, r0, r2
 800c9a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d103      	bne.n	800c9ba <strncmp+0x1c>
 800c9b2:	42a0      	cmp	r0, r4
 800c9b4:	d001      	beq.n	800c9ba <strncmp+0x1c>
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1f5      	bne.n	800c9a6 <strncmp+0x8>
 800c9ba:	1a98      	subs	r0, r3, r2
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	4610      	mov	r0, r2
 800c9c0:	e7fc      	b.n	800c9bc <strncmp+0x1e>

0800c9c2 <__ascii_wctomb>:
 800c9c2:	b149      	cbz	r1, 800c9d8 <__ascii_wctomb+0x16>
 800c9c4:	2aff      	cmp	r2, #255	; 0xff
 800c9c6:	bf85      	ittet	hi
 800c9c8:	238a      	movhi	r3, #138	; 0x8a
 800c9ca:	6003      	strhi	r3, [r0, #0]
 800c9cc:	700a      	strbls	r2, [r1, #0]
 800c9ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9d2:	bf98      	it	ls
 800c9d4:	2001      	movls	r0, #1
 800c9d6:	4770      	bx	lr
 800c9d8:	4608      	mov	r0, r1
 800c9da:	4770      	bx	lr

0800c9dc <_write_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d07      	ldr	r5, [pc, #28]	; (800c9fc <_write_r+0x20>)
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	4608      	mov	r0, r1
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	602a      	str	r2, [r5, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f7f6 feb2 	bl	8003754 <_write>
 800c9f0:	1c43      	adds	r3, r0, #1
 800c9f2:	d102      	bne.n	800c9fa <_write_r+0x1e>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	b103      	cbz	r3, 800c9fa <_write_r+0x1e>
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	200008a0 	.word	0x200008a0

0800ca00 <abort>:
 800ca00:	b508      	push	{r3, lr}
 800ca02:	2006      	movs	r0, #6
 800ca04:	f000 f8ce 	bl	800cba4 <raise>
 800ca08:	2001      	movs	r0, #1
 800ca0a:	f7f7 f865 	bl	8003ad8 <_exit>
	...

0800ca10 <_close_r>:
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	4d06      	ldr	r5, [pc, #24]	; (800ca2c <_close_r+0x1c>)
 800ca14:	2300      	movs	r3, #0
 800ca16:	4604      	mov	r4, r0
 800ca18:	4608      	mov	r0, r1
 800ca1a:	602b      	str	r3, [r5, #0]
 800ca1c:	f7f7 f883 	bl	8003b26 <_close>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	d102      	bne.n	800ca2a <_close_r+0x1a>
 800ca24:	682b      	ldr	r3, [r5, #0]
 800ca26:	b103      	cbz	r3, 800ca2a <_close_r+0x1a>
 800ca28:	6023      	str	r3, [r4, #0]
 800ca2a:	bd38      	pop	{r3, r4, r5, pc}
 800ca2c:	200008a0 	.word	0x200008a0

0800ca30 <_fstat_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4d07      	ldr	r5, [pc, #28]	; (800ca50 <_fstat_r+0x20>)
 800ca34:	2300      	movs	r3, #0
 800ca36:	4604      	mov	r4, r0
 800ca38:	4608      	mov	r0, r1
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	602b      	str	r3, [r5, #0]
 800ca3e:	f7f7 f87e 	bl	8003b3e <_fstat>
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	d102      	bne.n	800ca4c <_fstat_r+0x1c>
 800ca46:	682b      	ldr	r3, [r5, #0]
 800ca48:	b103      	cbz	r3, 800ca4c <_fstat_r+0x1c>
 800ca4a:	6023      	str	r3, [r4, #0]
 800ca4c:	bd38      	pop	{r3, r4, r5, pc}
 800ca4e:	bf00      	nop
 800ca50:	200008a0 	.word	0x200008a0

0800ca54 <_isatty_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d06      	ldr	r5, [pc, #24]	; (800ca70 <_isatty_r+0x1c>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	602b      	str	r3, [r5, #0]
 800ca60:	f7f7 f87d 	bl	8003b5e <_isatty>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_isatty_r+0x1a>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_isatty_r+0x1a>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	200008a0 	.word	0x200008a0

0800ca74 <_lseek_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d07      	ldr	r5, [pc, #28]	; (800ca94 <_lseek_r+0x20>)
 800ca78:	4604      	mov	r4, r0
 800ca7a:	4608      	mov	r0, r1
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	2200      	movs	r2, #0
 800ca80:	602a      	str	r2, [r5, #0]
 800ca82:	461a      	mov	r2, r3
 800ca84:	f7f7 f876 	bl	8003b74 <_lseek>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	d102      	bne.n	800ca92 <_lseek_r+0x1e>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b103      	cbz	r3, 800ca92 <_lseek_r+0x1e>
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
 800ca94:	200008a0 	.word	0x200008a0

0800ca98 <memmove>:
 800ca98:	4288      	cmp	r0, r1
 800ca9a:	b510      	push	{r4, lr}
 800ca9c:	eb01 0402 	add.w	r4, r1, r2
 800caa0:	d902      	bls.n	800caa8 <memmove+0x10>
 800caa2:	4284      	cmp	r4, r0
 800caa4:	4623      	mov	r3, r4
 800caa6:	d807      	bhi.n	800cab8 <memmove+0x20>
 800caa8:	1e43      	subs	r3, r0, #1
 800caaa:	42a1      	cmp	r1, r4
 800caac:	d008      	beq.n	800cac0 <memmove+0x28>
 800caae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cab6:	e7f8      	b.n	800caaa <memmove+0x12>
 800cab8:	4402      	add	r2, r0
 800caba:	4601      	mov	r1, r0
 800cabc:	428a      	cmp	r2, r1
 800cabe:	d100      	bne.n	800cac2 <memmove+0x2a>
 800cac0:	bd10      	pop	{r4, pc}
 800cac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caca:	e7f7      	b.n	800cabc <memmove+0x24>

0800cacc <__malloc_lock>:
 800cacc:	4801      	ldr	r0, [pc, #4]	; (800cad4 <__malloc_lock+0x8>)
 800cace:	f7fe be08 	b.w	800b6e2 <__retarget_lock_acquire_recursive>
 800cad2:	bf00      	nop
 800cad4:	20000898 	.word	0x20000898

0800cad8 <__malloc_unlock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__malloc_unlock+0x8>)
 800cada:	f7fe be03 	b.w	800b6e4 <__retarget_lock_release_recursive>
 800cade:	bf00      	nop
 800cae0:	20000898 	.word	0x20000898

0800cae4 <_realloc_r>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	4607      	mov	r7, r0
 800cae8:	4614      	mov	r4, r2
 800caea:	460e      	mov	r6, r1
 800caec:	b921      	cbnz	r1, 800caf8 <_realloc_r+0x14>
 800caee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800caf2:	4611      	mov	r1, r2
 800caf4:	f7ff bb9e 	b.w	800c234 <_malloc_r>
 800caf8:	b922      	cbnz	r2, 800cb04 <_realloc_r+0x20>
 800cafa:	f7ff fb4b 	bl	800c194 <_free_r>
 800cafe:	4625      	mov	r5, r4
 800cb00:	4628      	mov	r0, r5
 800cb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb04:	f000 f86a 	bl	800cbdc <_malloc_usable_size_r>
 800cb08:	42a0      	cmp	r0, r4
 800cb0a:	d20f      	bcs.n	800cb2c <_realloc_r+0x48>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4638      	mov	r0, r7
 800cb10:	f7ff fb90 	bl	800c234 <_malloc_r>
 800cb14:	4605      	mov	r5, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d0f2      	beq.n	800cb00 <_realloc_r+0x1c>
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	f7fe fe61 	bl	800b7e4 <memcpy>
 800cb22:	4631      	mov	r1, r6
 800cb24:	4638      	mov	r0, r7
 800cb26:	f7ff fb35 	bl	800c194 <_free_r>
 800cb2a:	e7e9      	b.n	800cb00 <_realloc_r+0x1c>
 800cb2c:	4635      	mov	r5, r6
 800cb2e:	e7e7      	b.n	800cb00 <_realloc_r+0x1c>

0800cb30 <_read_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	; (800cb50 <_read_r+0x20>)
 800cb34:	4604      	mov	r4, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	4611      	mov	r1, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	602a      	str	r2, [r5, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f7f6 ffd4 	bl	8003aec <_read>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_read_r+0x1e>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_read_r+0x1e>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	200008a0 	.word	0x200008a0

0800cb54 <_raise_r>:
 800cb54:	291f      	cmp	r1, #31
 800cb56:	b538      	push	{r3, r4, r5, lr}
 800cb58:	4604      	mov	r4, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	d904      	bls.n	800cb68 <_raise_r+0x14>
 800cb5e:	2316      	movs	r3, #22
 800cb60:	6003      	str	r3, [r0, #0]
 800cb62:	f04f 30ff 	mov.w	r0, #4294967295
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb6a:	b112      	cbz	r2, 800cb72 <_raise_r+0x1e>
 800cb6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb70:	b94b      	cbnz	r3, 800cb86 <_raise_r+0x32>
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 f830 	bl	800cbd8 <_getpid_r>
 800cb78:	462a      	mov	r2, r5
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb82:	f000 b817 	b.w	800cbb4 <_kill_r>
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d00a      	beq.n	800cba0 <_raise_r+0x4c>
 800cb8a:	1c59      	adds	r1, r3, #1
 800cb8c:	d103      	bne.n	800cb96 <_raise_r+0x42>
 800cb8e:	2316      	movs	r3, #22
 800cb90:	6003      	str	r3, [r0, #0]
 800cb92:	2001      	movs	r0, #1
 800cb94:	e7e7      	b.n	800cb66 <_raise_r+0x12>
 800cb96:	2400      	movs	r4, #0
 800cb98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	4798      	blx	r3
 800cba0:	2000      	movs	r0, #0
 800cba2:	e7e0      	b.n	800cb66 <_raise_r+0x12>

0800cba4 <raise>:
 800cba4:	4b02      	ldr	r3, [pc, #8]	; (800cbb0 <raise+0xc>)
 800cba6:	4601      	mov	r1, r0
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	f7ff bfd3 	b.w	800cb54 <_raise_r>
 800cbae:	bf00      	nop
 800cbb0:	2000000c 	.word	0x2000000c

0800cbb4 <_kill_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d07      	ldr	r5, [pc, #28]	; (800cbd4 <_kill_r+0x20>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	602b      	str	r3, [r5, #0]
 800cbc2:	f7f6 ff79 	bl	8003ab8 <_kill>
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	d102      	bne.n	800cbd0 <_kill_r+0x1c>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	b103      	cbz	r3, 800cbd0 <_kill_r+0x1c>
 800cbce:	6023      	str	r3, [r4, #0]
 800cbd0:	bd38      	pop	{r3, r4, r5, pc}
 800cbd2:	bf00      	nop
 800cbd4:	200008a0 	.word	0x200008a0

0800cbd8 <_getpid_r>:
 800cbd8:	f7f6 bf66 	b.w	8003aa8 <_getpid>

0800cbdc <_malloc_usable_size_r>:
 800cbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbe0:	1f18      	subs	r0, r3, #4
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	bfbc      	itt	lt
 800cbe6:	580b      	ldrlt	r3, [r1, r0]
 800cbe8:	18c0      	addlt	r0, r0, r3
 800cbea:	4770      	bx	lr
 800cbec:	0000      	movs	r0, r0
	...

0800cbf0 <hypot>:
 800cbf0:	b508      	push	{r3, lr}
 800cbf2:	ed2d 8b06 	vpush	{d8-d10}
 800cbf6:	eeb0 aa40 	vmov.f32	s20, s0
 800cbfa:	eef0 aa60 	vmov.f32	s21, s1
 800cbfe:	eeb0 9a41 	vmov.f32	s18, s2
 800cc02:	eef0 9a61 	vmov.f32	s19, s3
 800cc06:	f000 f82d 	bl	800cc64 <__ieee754_hypot>
 800cc0a:	4b15      	ldr	r3, [pc, #84]	; (800cc60 <hypot+0x70>)
 800cc0c:	eeb0 8a40 	vmov.f32	s16, s0
 800cc10:	eef0 8a60 	vmov.f32	s17, s1
 800cc14:	f993 3000 	ldrsb.w	r3, [r3]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	d016      	beq.n	800cc4a <hypot+0x5a>
 800cc1c:	f000 f9f8 	bl	800d010 <finite>
 800cc20:	b998      	cbnz	r0, 800cc4a <hypot+0x5a>
 800cc22:	eeb0 0a4a 	vmov.f32	s0, s20
 800cc26:	eef0 0a6a 	vmov.f32	s1, s21
 800cc2a:	f000 f9f1 	bl	800d010 <finite>
 800cc2e:	b160      	cbz	r0, 800cc4a <hypot+0x5a>
 800cc30:	eeb0 0a49 	vmov.f32	s0, s18
 800cc34:	eef0 0a69 	vmov.f32	s1, s19
 800cc38:	f000 f9ea 	bl	800d010 <finite>
 800cc3c:	b128      	cbz	r0, 800cc4a <hypot+0x5a>
 800cc3e:	f7fb fa07 	bl	8008050 <__errno>
 800cc42:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800cc58 <hypot+0x68>
 800cc46:	2322      	movs	r3, #34	; 0x22
 800cc48:	6003      	str	r3, [r0, #0]
 800cc4a:	eeb0 0a48 	vmov.f32	s0, s16
 800cc4e:	eef0 0a68 	vmov.f32	s1, s17
 800cc52:	ecbd 8b06 	vpop	{d8-d10}
 800cc56:	bd08      	pop	{r3, pc}
 800cc58:	00000000 	.word	0x00000000
 800cc5c:	7ff00000 	.word	0x7ff00000
 800cc60:	200001e0 	.word	0x200001e0

0800cc64 <__ieee754_hypot>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	ec51 0b10 	vmov	r0, r1, d0
 800cc6c:	ec59 8b11 	vmov	r8, r9, d1
 800cc70:	ed2d 8b06 	vpush	{d8-d10}
 800cc74:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800cc78:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800cc7c:	42b7      	cmp	r7, r6
 800cc7e:	b083      	sub	sp, #12
 800cc80:	da06      	bge.n	800cc90 <__ieee754_hypot+0x2c>
 800cc82:	463b      	mov	r3, r7
 800cc84:	ee11 0a10 	vmov	r0, s2
 800cc88:	ee10 8a10 	vmov	r8, s0
 800cc8c:	4637      	mov	r7, r6
 800cc8e:	461e      	mov	r6, r3
 800cc90:	1bbb      	subs	r3, r7, r6
 800cc92:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800cc96:	4639      	mov	r1, r7
 800cc98:	4682      	mov	sl, r0
 800cc9a:	46bb      	mov	fp, r7
 800cc9c:	46b1      	mov	r9, r6
 800cc9e:	dd06      	ble.n	800ccae <__ieee754_hypot+0x4a>
 800cca0:	4642      	mov	r2, r8
 800cca2:	4633      	mov	r3, r6
 800cca4:	f7f3 fb2a 	bl	80002fc <__adddf3>
 800cca8:	4682      	mov	sl, r0
 800ccaa:	468b      	mov	fp, r1
 800ccac:	e01a      	b.n	800cce4 <__ieee754_hypot+0x80>
 800ccae:	4b7a      	ldr	r3, [pc, #488]	; (800ce98 <__ieee754_hypot+0x234>)
 800ccb0:	429f      	cmp	r7, r3
 800ccb2:	f340 80a0 	ble.w	800cdf6 <__ieee754_hypot+0x192>
 800ccb6:	4b79      	ldr	r3, [pc, #484]	; (800ce9c <__ieee754_hypot+0x238>)
 800ccb8:	429f      	cmp	r7, r3
 800ccba:	dd1a      	ble.n	800ccf2 <__ieee754_hypot+0x8e>
 800ccbc:	f3c7 0713 	ubfx	r7, r7, #0, #20
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	433b      	orrs	r3, r7
 800ccc4:	d005      	beq.n	800ccd2 <__ieee754_hypot+0x6e>
 800ccc6:	4642      	mov	r2, r8
 800ccc8:	4633      	mov	r3, r6
 800ccca:	f7f3 fb17 	bl	80002fc <__adddf3>
 800ccce:	4682      	mov	sl, r0
 800ccd0:	468b      	mov	fp, r1
 800ccd2:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 800ccd6:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 800ccda:	4643      	mov	r3, r8
 800ccdc:	4333      	orrs	r3, r6
 800ccde:	d101      	bne.n	800cce4 <__ieee754_hypot+0x80>
 800cce0:	46c2      	mov	sl, r8
 800cce2:	46cb      	mov	fp, r9
 800cce4:	ec4b ab10 	vmov	d0, sl, fp
 800cce8:	b003      	add	sp, #12
 800ccea:	ecbd 8b06 	vpop	{d8-d10}
 800ccee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf2:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 800ccf6:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 800ccfa:	46bb      	mov	fp, r7
 800ccfc:	46b1      	mov	r9, r6
 800ccfe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	4b66      	ldr	r3, [pc, #408]	; (800cea0 <__ieee754_hypot+0x23c>)
 800cd06:	429e      	cmp	r6, r3
 800cd08:	dc1b      	bgt.n	800cd42 <__ieee754_hypot+0xde>
 800cd0a:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 800cd0e:	da74      	bge.n	800cdfa <__ieee754_hypot+0x196>
 800cd10:	4643      	mov	r3, r8
 800cd12:	4333      	orrs	r3, r6
 800cd14:	d0e6      	beq.n	800cce4 <__ieee754_hypot+0x80>
 800cd16:	4d63      	ldr	r5, [pc, #396]	; (800cea4 <__ieee754_hypot+0x240>)
 800cd18:	2400      	movs	r4, #0
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	4640      	mov	r0, r8
 800cd20:	4649      	mov	r1, r9
 800cd22:	f7f3 fca1 	bl	8000668 <__aeabi_dmul>
 800cd26:	462b      	mov	r3, r5
 800cd28:	4680      	mov	r8, r0
 800cd2a:	4689      	mov	r9, r1
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	4659      	mov	r1, fp
 800cd30:	4622      	mov	r2, r4
 800cd32:	f7f3 fc99 	bl	8000668 <__aeabi_dmul>
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	468b      	mov	fp, r1
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	4642      	mov	r2, r8
 800cd44:	464b      	mov	r3, r9
 800cd46:	4650      	mov	r0, sl
 800cd48:	4659      	mov	r1, fp
 800cd4a:	f7f3 fad5 	bl	80002f8 <__aeabi_dsub>
 800cd4e:	4604      	mov	r4, r0
 800cd50:	460d      	mov	r5, r1
 800cd52:	4602      	mov	r2, r0
 800cd54:	460b      	mov	r3, r1
 800cd56:	4640      	mov	r0, r8
 800cd58:	4649      	mov	r1, r9
 800cd5a:	f7f3 fef7 	bl	8000b4c <__aeabi_dcmplt>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d056      	beq.n	800ce10 <__ieee754_hypot+0x1ac>
 800cd62:	2400      	movs	r4, #0
 800cd64:	463b      	mov	r3, r7
 800cd66:	4622      	mov	r2, r4
 800cd68:	4639      	mov	r1, r7
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7f3 fc7c 	bl	8000668 <__aeabi_dmul>
 800cd70:	4642      	mov	r2, r8
 800cd72:	ec41 0b18 	vmov	d8, r0, r1
 800cd76:	464b      	mov	r3, r9
 800cd78:	4640      	mov	r0, r8
 800cd7a:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800cd7e:	f7f3 fc73 	bl	8000668 <__aeabi_dmul>
 800cd82:	463d      	mov	r5, r7
 800cd84:	4606      	mov	r6, r0
 800cd86:	460f      	mov	r7, r1
 800cd88:	4622      	mov	r2, r4
 800cd8a:	462b      	mov	r3, r5
 800cd8c:	4650      	mov	r0, sl
 800cd8e:	4659      	mov	r1, fp
 800cd90:	f7f3 fab4 	bl	80002fc <__adddf3>
 800cd94:	4622      	mov	r2, r4
 800cd96:	4680      	mov	r8, r0
 800cd98:	4689      	mov	r9, r1
 800cd9a:	462b      	mov	r3, r5
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	4659      	mov	r1, fp
 800cda0:	f7f3 faaa 	bl	80002f8 <__aeabi_dsub>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f7f3 fc5c 	bl	8000668 <__aeabi_dmul>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f7f3 fa9e 	bl	80002f8 <__aeabi_dsub>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	ec51 0b18 	vmov	r0, r1, d8
 800cdc4:	f7f3 fa98 	bl	80002f8 <__aeabi_dsub>
 800cdc8:	ec41 0b10 	vmov	d0, r0, r1
 800cdcc:	f000 f86c 	bl	800cea8 <__ieee754_sqrt>
 800cdd0:	9b01      	ldr	r3, [sp, #4]
 800cdd2:	ec5b ab10 	vmov	sl, fp, d0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d084      	beq.n	800cce4 <__ieee754_hypot+0x80>
 800cdda:	051b      	lsls	r3, r3, #20
 800cddc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800cde0:	2000      	movs	r0, #0
 800cde2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800cde6:	4602      	mov	r2, r0
 800cde8:	460b      	mov	r3, r1
 800cdea:	ee10 0a10 	vmov	r0, s0
 800cdee:	4659      	mov	r1, fp
 800cdf0:	f7f3 fc3a 	bl	8000668 <__aeabi_dmul>
 800cdf4:	e758      	b.n	800cca8 <__ieee754_hypot+0x44>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	e783      	b.n	800cd02 <__ieee754_hypot+0x9e>
 800cdfa:	9b01      	ldr	r3, [sp, #4]
 800cdfc:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 800ce00:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 800ce04:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	46bb      	mov	fp, r7
 800ce0c:	46b1      	mov	r9, r6
 800ce0e:	e798      	b.n	800cd42 <__ieee754_hypot+0xde>
 800ce10:	4633      	mov	r3, r6
 800ce12:	2200      	movs	r2, #0
 800ce14:	ec43 2b18 	vmov	d8, r2, r3
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 800ce1e:	ec51 0b18 	vmov	r0, r1, d8
 800ce22:	4616      	mov	r6, r2
 800ce24:	461f      	mov	r7, r3
 800ce26:	f7f3 fc1f 	bl	8000668 <__aeabi_dmul>
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	ec41 0b19 	vmov	d9, r0, r1
 800ce30:	462b      	mov	r3, r5
 800ce32:	4620      	mov	r0, r4
 800ce34:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800ce38:	f7f3 fc16 	bl	8000668 <__aeabi_dmul>
 800ce3c:	4652      	mov	r2, sl
 800ce3e:	ec41 0b1a 	vmov	d10, r0, r1
 800ce42:	465b      	mov	r3, fp
 800ce44:	4650      	mov	r0, sl
 800ce46:	4659      	mov	r1, fp
 800ce48:	f7f3 fa58 	bl	80002fc <__adddf3>
 800ce4c:	4632      	mov	r2, r6
 800ce4e:	463b      	mov	r3, r7
 800ce50:	f7f3 fa52 	bl	80002f8 <__aeabi_dsub>
 800ce54:	4642      	mov	r2, r8
 800ce56:	464b      	mov	r3, r9
 800ce58:	f7f3 fc06 	bl	8000668 <__aeabi_dmul>
 800ce5c:	ec53 2b18 	vmov	r2, r3, d8
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	4640      	mov	r0, r8
 800ce66:	4649      	mov	r1, r9
 800ce68:	f7f3 fa46 	bl	80002f8 <__aeabi_dsub>
 800ce6c:	4632      	mov	r2, r6
 800ce6e:	463b      	mov	r3, r7
 800ce70:	f7f3 fbfa 	bl	8000668 <__aeabi_dmul>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4620      	mov	r0, r4
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	f7f3 fa3e 	bl	80002fc <__adddf3>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	ec51 0b1a 	vmov	r0, r1, d10
 800ce88:	f7f3 fa36 	bl	80002f8 <__aeabi_dsub>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	ec51 0b19 	vmov	r0, r1, d9
 800ce94:	e796      	b.n	800cdc4 <__ieee754_hypot+0x160>
 800ce96:	bf00      	nop
 800ce98:	5f300000 	.word	0x5f300000
 800ce9c:	7fefffff 	.word	0x7fefffff
 800cea0:	20afffff 	.word	0x20afffff
 800cea4:	7fd00000 	.word	0x7fd00000

0800cea8 <__ieee754_sqrt>:
 800cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceac:	ec55 4b10 	vmov	r4, r5, d0
 800ceb0:	4e56      	ldr	r6, [pc, #344]	; (800d00c <__ieee754_sqrt+0x164>)
 800ceb2:	43ae      	bics	r6, r5
 800ceb4:	ee10 0a10 	vmov	r0, s0
 800ceb8:	ee10 3a10 	vmov	r3, s0
 800cebc:	4629      	mov	r1, r5
 800cebe:	462a      	mov	r2, r5
 800cec0:	d110      	bne.n	800cee4 <__ieee754_sqrt+0x3c>
 800cec2:	ee10 2a10 	vmov	r2, s0
 800cec6:	462b      	mov	r3, r5
 800cec8:	f7f3 fbce 	bl	8000668 <__aeabi_dmul>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4620      	mov	r0, r4
 800ced2:	4629      	mov	r1, r5
 800ced4:	f7f3 fa12 	bl	80002fc <__adddf3>
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	ec45 4b10 	vmov	d0, r4, r5
 800cee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee4:	2d00      	cmp	r5, #0
 800cee6:	dc10      	bgt.n	800cf0a <__ieee754_sqrt+0x62>
 800cee8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ceec:	4330      	orrs	r0, r6
 800ceee:	d0f5      	beq.n	800cedc <__ieee754_sqrt+0x34>
 800cef0:	b15d      	cbz	r5, 800cf0a <__ieee754_sqrt+0x62>
 800cef2:	ee10 2a10 	vmov	r2, s0
 800cef6:	462b      	mov	r3, r5
 800cef8:	ee10 0a10 	vmov	r0, s0
 800cefc:	f7f3 f9fc 	bl	80002f8 <__aeabi_dsub>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	f7f3 fcda 	bl	80008bc <__aeabi_ddiv>
 800cf08:	e7e6      	b.n	800ced8 <__ieee754_sqrt+0x30>
 800cf0a:	1509      	asrs	r1, r1, #20
 800cf0c:	d076      	beq.n	800cffc <__ieee754_sqrt+0x154>
 800cf0e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cf12:	07ce      	lsls	r6, r1, #31
 800cf14:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cf18:	bf5e      	ittt	pl
 800cf1a:	0fda      	lsrpl	r2, r3, #31
 800cf1c:	005b      	lslpl	r3, r3, #1
 800cf1e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cf22:	0fda      	lsrs	r2, r3, #31
 800cf24:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cf28:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	106d      	asrs	r5, r5, #1
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	f04f 0e16 	mov.w	lr, #22
 800cf36:	4684      	mov	ip, r0
 800cf38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf3c:	eb0c 0401 	add.w	r4, ip, r1
 800cf40:	4294      	cmp	r4, r2
 800cf42:	bfde      	ittt	le
 800cf44:	1b12      	suble	r2, r2, r4
 800cf46:	eb04 0c01 	addle.w	ip, r4, r1
 800cf4a:	1840      	addle	r0, r0, r1
 800cf4c:	0052      	lsls	r2, r2, #1
 800cf4e:	f1be 0e01 	subs.w	lr, lr, #1
 800cf52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cf56:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cf5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf5e:	d1ed      	bne.n	800cf3c <__ieee754_sqrt+0x94>
 800cf60:	4671      	mov	r1, lr
 800cf62:	2720      	movs	r7, #32
 800cf64:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cf68:	4562      	cmp	r2, ip
 800cf6a:	eb04 060e 	add.w	r6, r4, lr
 800cf6e:	dc02      	bgt.n	800cf76 <__ieee754_sqrt+0xce>
 800cf70:	d113      	bne.n	800cf9a <__ieee754_sqrt+0xf2>
 800cf72:	429e      	cmp	r6, r3
 800cf74:	d811      	bhi.n	800cf9a <__ieee754_sqrt+0xf2>
 800cf76:	2e00      	cmp	r6, #0
 800cf78:	eb06 0e04 	add.w	lr, r6, r4
 800cf7c:	da43      	bge.n	800d006 <__ieee754_sqrt+0x15e>
 800cf7e:	f1be 0f00 	cmp.w	lr, #0
 800cf82:	db40      	blt.n	800d006 <__ieee754_sqrt+0x15e>
 800cf84:	f10c 0801 	add.w	r8, ip, #1
 800cf88:	eba2 020c 	sub.w	r2, r2, ip
 800cf8c:	429e      	cmp	r6, r3
 800cf8e:	bf88      	it	hi
 800cf90:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cf94:	1b9b      	subs	r3, r3, r6
 800cf96:	4421      	add	r1, r4
 800cf98:	46c4      	mov	ip, r8
 800cf9a:	0052      	lsls	r2, r2, #1
 800cf9c:	3f01      	subs	r7, #1
 800cf9e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cfa2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cfa6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfaa:	d1dd      	bne.n	800cf68 <__ieee754_sqrt+0xc0>
 800cfac:	4313      	orrs	r3, r2
 800cfae:	d006      	beq.n	800cfbe <__ieee754_sqrt+0x116>
 800cfb0:	1c4c      	adds	r4, r1, #1
 800cfb2:	bf13      	iteet	ne
 800cfb4:	3101      	addne	r1, #1
 800cfb6:	3001      	addeq	r0, #1
 800cfb8:	4639      	moveq	r1, r7
 800cfba:	f021 0101 	bicne.w	r1, r1, #1
 800cfbe:	1043      	asrs	r3, r0, #1
 800cfc0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cfc4:	0849      	lsrs	r1, r1, #1
 800cfc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cfca:	07c2      	lsls	r2, r0, #31
 800cfcc:	bf48      	it	mi
 800cfce:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cfd2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	463d      	mov	r5, r7
 800cfda:	e77f      	b.n	800cedc <__ieee754_sqrt+0x34>
 800cfdc:	0ada      	lsrs	r2, r3, #11
 800cfde:	3815      	subs	r0, #21
 800cfe0:	055b      	lsls	r3, r3, #21
 800cfe2:	2a00      	cmp	r2, #0
 800cfe4:	d0fa      	beq.n	800cfdc <__ieee754_sqrt+0x134>
 800cfe6:	02d7      	lsls	r7, r2, #11
 800cfe8:	d50a      	bpl.n	800d000 <__ieee754_sqrt+0x158>
 800cfea:	f1c1 0420 	rsb	r4, r1, #32
 800cfee:	fa23 f404 	lsr.w	r4, r3, r4
 800cff2:	1e4d      	subs	r5, r1, #1
 800cff4:	408b      	lsls	r3, r1
 800cff6:	4322      	orrs	r2, r4
 800cff8:	1b41      	subs	r1, r0, r5
 800cffa:	e788      	b.n	800cf0e <__ieee754_sqrt+0x66>
 800cffc:	4608      	mov	r0, r1
 800cffe:	e7f0      	b.n	800cfe2 <__ieee754_sqrt+0x13a>
 800d000:	0052      	lsls	r2, r2, #1
 800d002:	3101      	adds	r1, #1
 800d004:	e7ef      	b.n	800cfe6 <__ieee754_sqrt+0x13e>
 800d006:	46e0      	mov	r8, ip
 800d008:	e7be      	b.n	800cf88 <__ieee754_sqrt+0xe0>
 800d00a:	bf00      	nop
 800d00c:	7ff00000 	.word	0x7ff00000

0800d010 <finite>:
 800d010:	b082      	sub	sp, #8
 800d012:	ed8d 0b00 	vstr	d0, [sp]
 800d016:	9801      	ldr	r0, [sp, #4]
 800d018:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d01c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d020:	0fc0      	lsrs	r0, r0, #31
 800d022:	b002      	add	sp, #8
 800d024:	4770      	bx	lr
	...

0800d028 <_init>:
 800d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02a:	bf00      	nop
 800d02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02e:	bc08      	pop	{r3}
 800d030:	469e      	mov	lr, r3
 800d032:	4770      	bx	lr

0800d034 <_fini>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	bf00      	nop
 800d038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03a:	bc08      	pop	{r3}
 800d03c:	469e      	mov	lr, r3
 800d03e:	4770      	bx	lr
