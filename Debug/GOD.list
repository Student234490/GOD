
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f4  080068f4  00020a30  2**0
                  CONTENTS
  4 .ARM          00000008  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068fc  080068fc  00020a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a30  20000000  08006904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000a30  08007334  00020a30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  08007334  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001799c  00000000  00000000  00020a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd2  00000000  00000000  000383fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f861  00000000  00000000  0003cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001302e  00000000  00000000  0005c569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbf88  00000000  00000000  0006f597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b51f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  0012b574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a30 	.word	0x20000a30
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005f3c 	.word	0x08005f3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a34 	.word	0x20000a34
 800021c:	08005f3c 	.word	0x08005f3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9b9 	b.w	8000654 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <Rational>:

    return (uint32_t)(approx);
}


int32_t Rational(int a, int b) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f844 	bl	80006f0 <convert>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000670:	1415      	asrs	r5, r2, #16
 8000672:	0414      	lsls	r4, r2, #16
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f000 f83b 	bl	80006f0 <convert>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000682:	4620      	mov	r0, r4
 8000684:	4629      	mov	r1, r5
 8000686:	f7ff fe1b 	bl	80002c0 <__aeabi_ldivmod>
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	4613      	mov	r3, r2
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bdb0      	pop	{r4, r5, r7, pc}

08000698 <printFix>:

void printFix(int32_t i) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da05      	bge.n	80006b2 <printFix+0x1a>
            printf("-");
 80006a6:	202d      	movs	r0, #45	; 0x2d
 80006a8:	f004 fc36 	bl	8004f18 <putchar>
            i = ~i + 1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	425b      	negs	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, 10000 * (uint32_t)(i & 0xFFFF) >> 16);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1419      	asrs	r1, r3, #16
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	461a      	mov	r2, r3
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <printFix+0x3c>)
 80006c8:	f004 fc0e 	bl	8004ee8 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08005f54 	.word	0x08005f54

080006d8 <expand>:

int32_t expand(int32_t i) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	009b      	lsls	r3, r3, #2
   }
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <convert>:

int32_t convert(int32_t i) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	041b      	lsls	r3, r3, #16
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <inconvert>:

int32_t inconvert(int32_t i) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000716:	141b      	asrs	r3, r3, #16
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <I2C_Scan+0x58>)
 800072e:	f004 fc77 	bl	8005020 <puts>

    for (i = 1; i < 128; i++) {
 8000732:	2301      	movs	r3, #1
 8000734:	73fb      	strb	r3, [r7, #15]
 8000736:	e015      	b.n	8000764 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	b29b      	uxth	r3, r3
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b299      	uxth	r1, r3
 8000740:	230a      	movs	r3, #10
 8000742:	2201      	movs	r2, #1
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f002 f98f 	bl	8002a68 <HAL_I2C_IsDeviceReady>
 800074a:	4603      	mov	r3, r0
 800074c:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d104      	bne.n	800075e <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4619      	mov	r1, r3
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <I2C_Scan+0x5c>)
 800075a:	f004 fbc5 	bl	8004ee8 <iprintf>
    for (i = 1; i < 128; i++) {
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3301      	adds	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	dae5      	bge.n	8000738 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <I2C_Scan+0x60>)
 800076e:	f004 fc57 	bl	8005020 <puts>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	08005f60 	.word	0x08005f60
 8000780:	08005f78 	.word	0x08005f78
 8000784:	08005fa0 	.word	0x08005fa0

08000788 <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af02      	add	r7, sp, #8
 800078e:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8000790:	f240 5322 	movw	r3, #1314	; 0x522
 8000794:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8000796:	f107 021c 	add.w	r2, r7, #28
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2302      	movs	r3, #2
 80007a2:	21d6      	movs	r1, #214	; 0xd6
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f002 f847 	bl	8002838 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f001 fd20 	bl	80021f0 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 80007b0:	f246 0320 	movw	r3, #24608	; 0x6020
 80007b4:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 80007b6:	f107 0218 	add.w	r2, r7, #24
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2302      	movs	r3, #2
 80007c2:	21d6      	movs	r1, #214	; 0xd6
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f002 f837 	bl	8002838 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f001 fd10 	bl	80021f0 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 80007d0:	f247 0320 	movw	r3, #28704	; 0x7020
 80007d4:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 80007d6:	f107 0214 	add.w	r2, r7, #20
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	213c      	movs	r1, #60	; 0x3c
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f002 f827 	bl	8002838 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 fd00 	bl	80021f0 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 80007f0:	2322      	movs	r3, #34	; 0x22
 80007f2:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 80007f4:	f107 0210 	add.w	r2, r7, #16
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2302      	movs	r3, #2
 8000800:	213c      	movs	r1, #60	; 0x3c
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f002 f818 	bl	8002838 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000808:	200a      	movs	r0, #10
 800080a:	f001 fcf1 	bl	80021f0 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 800080e:	f640 4323 	movw	r3, #3107	; 0xc23
 8000812:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8000814:	f107 020c 	add.w	r2, r7, #12
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2302      	movs	r3, #2
 8000820:	213c      	movs	r1, #60	; 0x3c
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f002 f808 	bl	8002838 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f001 fce1 	bl	80021f0 <HAL_Delay>
}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <sinus>:
    -704,   -603,   -503,   -402,   -302,   -201,   -101
};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 8000840:	e003      	b.n	800084a <sinus+0x12>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dbf8      	blt.n	8000842 <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	425a      	negs	r2, r3
 8000854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000858:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800085c:	bf58      	it	pl
 800085e:	4253      	negpl	r3, r2
 8000860:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <sinus+0x44>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800086a:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff ff33 	bl	80006d8 <expand>
 8000872:	4603      	mov	r3, r0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	0800601c 	.word	0x0800601c

08000880 <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800088e:	425a      	negs	r2, r3
 8000890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000894:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000898:	bf58      	it	pl
 800089a:	4253      	negpl	r3, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffcb 	bl	8000838 <sinus>
 80008a2:	4603      	mov	r3, r0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 80008ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 80008b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008ba:	f7ff ff19 	bl	80006f0 <convert>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80008c6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80008ca:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff ff0e 	bl	80006f0 <convert>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461c      	mov	r4, r3
 80008d8:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80008dc:	4622      	mov	r2, r4
 80008de:	462b      	mov	r3, r5
 80008e0:	1891      	adds	r1, r2, r2
 80008e2:	6039      	str	r1, [r7, #0]
 80008e4:	415b      	adcs	r3, r3
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008ec:	1912      	adds	r2, r2, r4
 80008ee:	eb45 0303 	adc.w	r3, r5, r3
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	f04f 0100 	mov.w	r1, #0
 80008fa:	0199      	lsls	r1, r3, #6
 80008fc:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8000900:	0190      	lsls	r0, r2, #6
 8000902:	1812      	adds	r2, r2, r0
 8000904:	eb41 0303 	adc.w	r3, r1, r3
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	f04f 0100 	mov.w	r1, #0
 8000910:	0159      	lsls	r1, r3, #5
 8000912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000916:	0150      	lsls	r0, r2, #5
 8000918:	4602      	mov	r2, r0
 800091a:	460b      	mov	r3, r1
 800091c:	1b12      	subs	r2, r2, r4
 800091e:	eb63 0305 	sbc.w	r3, r3, r5
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 0100 	mov.w	r1, #0
 800092a:	0159      	lsls	r1, r3, #5
 800092c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000930:	0150      	lsls	r0, r2, #5
 8000932:	eb12 0800 	adds.w	r8, r2, r0
 8000936:	eb43 0901 	adc.w	r9, r3, r1
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8000946:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 800094a:	ea4f 4329 	mov.w	r3, r9, asr #16
 800094e:	4613      	mov	r3, r2
 8000950:	461a      	mov	r2, r3
 8000952:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000956:	4650      	mov	r0, sl
 8000958:	4659      	mov	r1, fp
 800095a:	f7ff fcb1 	bl	80002c0 <__aeabi_ldivmod>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	4613      	mov	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4618      	mov	r0, r3
 800096a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	461a      	mov	r2, r3
 8000972:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000976:	fb02 f501 	mul.w	r5, r2, r1
 800097a:	fb00 f403 	mul.w	r4, r0, r3
 800097e:	442c      	add	r4, r5
 8000980:	fba0 2302 	umull	r2, r3, r0, r2
 8000984:	18e1      	adds	r1, r4, r3
 8000986:	460b      	mov	r3, r1
 8000988:	f04f 0000 	mov.w	r0, #0
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	0c10      	lsrs	r0, r2, #16
 8000992:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000996:	1419      	asrs	r1, r3, #16
 8000998:	4603      	mov	r3, r0
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff feb4 	bl	8000708 <inconvert>
 80009a0:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	f7ff ff48 	bl	8000838 <sinus>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080009b4 <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 80009b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 80009be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009c2:	f7ff fe95 	bl	80006f0 <convert>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009ce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80009d2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff fe8a 	bl	80006f0 <convert>
 80009dc:	4603      	mov	r3, r0
 80009de:	461c      	mov	r4, r3
 80009e0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80009e4:	4622      	mov	r2, r4
 80009e6:	462b      	mov	r3, r5
 80009e8:	1891      	adds	r1, r2, r2
 80009ea:	6039      	str	r1, [r7, #0]
 80009ec:	415b      	adcs	r3, r3
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009f4:	1912      	adds	r2, r2, r4
 80009f6:	eb45 0303 	adc.w	r3, r5, r3
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	f04f 0100 	mov.w	r1, #0
 8000a02:	0199      	lsls	r1, r3, #6
 8000a04:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8000a08:	0190      	lsls	r0, r2, #6
 8000a0a:	1812      	adds	r2, r2, r0
 8000a0c:	eb41 0303 	adc.w	r3, r1, r3
 8000a10:	f04f 0000 	mov.w	r0, #0
 8000a14:	f04f 0100 	mov.w	r1, #0
 8000a18:	0159      	lsls	r1, r3, #5
 8000a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000a1e:	0150      	lsls	r0, r2, #5
 8000a20:	4602      	mov	r2, r0
 8000a22:	460b      	mov	r3, r1
 8000a24:	1b12      	subs	r2, r2, r4
 8000a26:	eb63 0305 	sbc.w	r3, r3, r5
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	f04f 0100 	mov.w	r1, #0
 8000a32:	0159      	lsls	r1, r3, #5
 8000a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000a38:	0150      	lsls	r0, r2, #5
 8000a3a:	eb12 0800 	adds.w	r8, r2, r0
 8000a3e:	eb43 0901 	adc.w	r9, r3, r1
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8000a4e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8000a52:	ea4f 4329 	mov.w	r3, r9, asr #16
 8000a56:	4613      	mov	r3, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a5e:	4650      	mov	r0, sl
 8000a60:	4659      	mov	r1, fp
 8000a62:	f7ff fc2d 	bl	80002c0 <__aeabi_ldivmod>
 8000a66:	4602      	mov	r2, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4618      	mov	r0, r3
 8000a72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a7e:	fb02 f501 	mul.w	r5, r2, r1
 8000a82:	fb00 f403 	mul.w	r4, r0, r3
 8000a86:	442c      	add	r4, r5
 8000a88:	fba0 2302 	umull	r2, r3, r0, r2
 8000a8c:	18e1      	adds	r1, r4, r3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	f04f 0100 	mov.w	r1, #0
 8000a98:	0c10      	lsrs	r0, r2, #16
 8000a9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a9e:	1419      	asrs	r1, r3, #16
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fe30 	bl	8000708 <inconvert>
 8000aa8:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 8000aaa:	6938      	ldr	r0, [r7, #16]
 8000aac:	f7ff fee8 	bl	8000880 <cosinus>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000abc <normalizeTheta>:

int32_t HVs[104] = {
0x00000000, 0xFFEACCCD, 0x00000000, 0xFFD8AE14, 0xFFF663D7, 0x00000000, 0x00112666, 0xFFF74A3D, 0xFFF9AE14, 0x00000000, 0x00096B85, 0x0003E8F6, 0x000AAB85, 0xFFFFC7AE, 0x00000000, 0xFFFCF333, 0x000B87AE, 0x000968F6, 0x00086E14, 0xFFFFA666, 0x00000000, 0xFFF2C51F, 0xFFE5199A, 0xFFFE028F, 0xFFFDD1EC, 0xFFFF87AE, 0x0001028F, 0x00000000, 0x0018D47B, 0x0008B0A4, 0x00020CCD, 0x0003B333, 0xFFFB0F5C, 0xFFFFC28F, 0x00002148, 0x00000000, 0xFFF2970A, 0x00059C29, 0x000C6E14, 0x000AB0A4, 0x00017AE1, 0xFFFDF0A4, 0x00010000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

int32_t normalizeTheta(int32_t theta) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    int32_t result;
    if ((theta > -1) && (theta<1)) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db05      	blt.n	8000ad6 <normalizeTheta+0x1a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dc02      	bgt.n	8000ad6 <normalizeTheta+0x1a>
        result = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e00c      	b.n	8000af0 <normalizeTheta+0x34>
    }
    else {
    	if ((theta < ((180 << 16) + 1)) && (theta > ((179 << 16) + 65535))) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8000adc:	dc06      	bgt.n	8000aec <normalizeTheta+0x30>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8000ae4:	db02      	blt.n	8000aec <normalizeTheta+0x30>
            result = (179<<16)+65535;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <normalizeTheta+0x44>)
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	e001      	b.n	8000af0 <normalizeTheta+0x34>
        }
        else {
            result = theta;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60fb      	str	r3, [r7, #12]
        }
    }
    return result;
 8000af0:	68fb      	ldr	r3, [r7, #12]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	00b3ffff 	.word	0x00b3ffff

08000b04 <toRad>:

int32_t toRad(int32_t angledeg) {
 8000b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
    return DIV(MULT(angledeg,PI),180<<16);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	461c      	mov	r4, r3
 8000b12:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000b16:	4622      	mov	r2, r4
 8000b18:	462b      	mov	r3, r5
 8000b1a:	1891      	adds	r1, r2, r2
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	415b      	adcs	r3, r3
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b26:	1912      	adds	r2, r2, r4
 8000b28:	eb45 0303 	adc.w	r3, r5, r3
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	f04f 0100 	mov.w	r1, #0
 8000b34:	0199      	lsls	r1, r3, #6
 8000b36:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8000b3a:	0190      	lsls	r0, r2, #6
 8000b3c:	1812      	adds	r2, r2, r0
 8000b3e:	eb41 0303 	adc.w	r3, r1, r3
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	f04f 0100 	mov.w	r1, #0
 8000b4a:	0159      	lsls	r1, r3, #5
 8000b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000b50:	0150      	lsls	r0, r2, #5
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	1b12      	subs	r2, r2, r4
 8000b58:	eb63 0305 	sbc.w	r3, r3, r5
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	f04f 0100 	mov.w	r1, #0
 8000b64:	0159      	lsls	r1, r3, #5
 8000b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000b6a:	0150      	lsls	r0, r2, #5
 8000b6c:	eb12 0800 	adds.w	r8, r2, r0
 8000b70:	eb43 0901 	adc.w	r9, r3, r1
 8000b74:	f04f 0200 	mov.w	r2, #0
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8000b80:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8000b84:	ea4f 4329 	mov.w	r3, r9, asr #16
 8000b88:	4613      	mov	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8000b94:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8000b98:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	4650      	mov	r0, sl
 8000ba2:	4659      	mov	r1, fp
 8000ba4:	f7ff fb8c 	bl	80002c0 <__aeabi_ldivmod>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4613      	mov	r3, r2
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000bb8 <magnet>:

void magnet(int32_t r, int32_t theta, int32_t phi, int32_t days, int32_t buffer[3]) {
 8000bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bbc:	b0b9      	sub	sp, #228	; 0xe4
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8000bc4:	637a      	str	r2, [r7, #52]	; 0x34
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8000bc8:	466b      	mov	r3, sp
 8000bca:	60bb      	str	r3, [r7, #8]
	printf("Theta input: ");
 8000bcc:	4892      	ldr	r0, [pc, #584]	; (8000e18 <magnet+0x260>)
 8000bce:	f004 f98b 	bl	8004ee8 <iprintf>
	printFix(theta);
 8000bd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bd4:	f7ff fd60 	bl	8000698 <printFix>
	printf("\r\n");
 8000bd8:	4890      	ldr	r0, [pc, #576]	; (8000e1c <magnet+0x264>)
 8000bda:	f004 fa21 	bl	8005020 <puts>

	printf("Phi input: ");
 8000bde:	4890      	ldr	r0, [pc, #576]	; (8000e20 <magnet+0x268>)
 8000be0:	f004 f982 	bl	8004ee8 <iprintf>
	printFix(phi);
 8000be4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000be6:	f7ff fd57 	bl	8000698 <printFix>
	printf("\r\n");
 8000bea:	488c      	ldr	r0, [pc, #560]	; (8000e1c <magnet+0x264>)
 8000bec:	f004 fa18 	bl	8005020 <puts>

	printf("Normalized theta: ");
 8000bf0:	488c      	ldr	r0, [pc, #560]	; (8000e24 <magnet+0x26c>)
 8000bf2:	f004 f979 	bl	8004ee8 <iprintf>
    theta = normalizeTheta(theta);
 8000bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bf8:	f7ff ff60 	bl	8000abc <normalizeTheta>
 8000bfc:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 8000bfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c00:	f7ff fd4a 	bl	8000698 <printFix>
    printf("\r\n");
 8000c04:	4885      	ldr	r0, [pc, #532]	; (8000e1c <magnet+0x264>)
 8000c06:	f004 fa0b 	bl	8005020 <puts>

    printf("Theta radians: ");
 8000c0a:	4887      	ldr	r0, [pc, #540]	; (8000e28 <magnet+0x270>)
 8000c0c:	f004 f96c 	bl	8004ee8 <iprintf>
    theta = toRad(5898240-theta);
 8000c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c12:	f5c3 03b4 	rsb	r3, r3, #5898240	; 0x5a0000
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff74 	bl	8000b04 <toRad>
 8000c1c:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 8000c1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c20:	f7ff fd3a 	bl	8000698 <printFix>
    printf("\r\n");
 8000c24:	487d      	ldr	r0, [pc, #500]	; (8000e1c <magnet+0x264>)
 8000c26:	f004 f9fb 	bl	8005020 <puts>

    printf("Phi radians: ");
 8000c2a:	4880      	ldr	r0, [pc, #512]	; (8000e2c <magnet+0x274>)
 8000c2c:	f004 f95c 	bl	8004ee8 <iprintf>
    phi = toRad(phi);
 8000c30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c32:	f7ff ff67 	bl	8000b04 <toRad>
 8000c36:	6378      	str	r0, [r7, #52]	; 0x34
    printFix(phi);
 8000c38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c3a:	f7ff fd2d 	bl	8000698 <printFix>
    printf("\r\n");
 8000c3e:	4877      	ldr	r0, [pc, #476]	; (8000e1c <magnet+0x264>)
 8000c40:	f004 f9ee 	bl	8005020 <puts>
    int32_t a = 417542963;
 8000c44:	4b7a      	ldr	r3, [pc, #488]	; (8000e30 <magnet+0x278>)
 8000c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int Nmodel = 2; // hard code
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int Nmax = Nmodel * (Nmodel + 3 ) / 2;
 8000c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c54:	3303      	adds	r3, #3
 8000c56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	0fda      	lsrs	r2, r3, #31
 8000c60:	4413      	add	r3, r2
 8000c62:	105b      	asrs	r3, r3, #1
 8000c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    int32_t g[Nmodel][Nmodel+1];
 8000c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c6c:	f103 0c01 	add.w	ip, r3, #1
 8000c70:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8000c74:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	f04f 0100 	mov.w	r1, #0
 8000c8c:	0159      	lsls	r1, r3, #5
 8000c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c92:	0150      	lsls	r0, r2, #5
 8000c94:	4663      	mov	r3, ip
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	4633      	mov	r3, r6
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f04f 0100 	mov.w	r1, #0
 8000caa:	4633      	mov	r3, r6
 8000cac:	461a      	mov	r2, r3
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	fb02 f501 	mul.w	r5, r2, r1
 8000cb6:	fb00 f403 	mul.w	r4, r0, r3
 8000cba:	442c      	add	r4, r5
 8000cbc:	fba0 0102 	umull	r0, r1, r0, r2
 8000cc0:	1863      	adds	r3, r4, r1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	014b      	lsls	r3, r1, #5
 8000cce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000cd2:	0142      	lsls	r2, r0, #5
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f04f 0100 	mov.w	r1, #0
 8000cdc:	4633      	mov	r3, r6
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	fb02 f501 	mul.w	r5, r2, r1
 8000ce8:	fb00 f403 	mul.w	r4, r0, r3
 8000cec:	442c      	add	r4, r5
 8000cee:	fba0 0102 	umull	r0, r1, r0, r2
 8000cf2:	1863      	adds	r3, r4, r1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	f04f 0300 	mov.w	r3, #0
 8000cfe:	014b      	lsls	r3, r1, #5
 8000d00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000d04:	0142      	lsls	r2, r0, #5
 8000d06:	4662      	mov	r2, ip
 8000d08:	607e      	str	r6, [r7, #4]
 8000d0a:	4633      	mov	r3, r6
 8000d0c:	fb03 f302 	mul.w	r3, r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	3307      	adds	r3, #7
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	ebad 0d03 	sub.w	sp, sp, r3
 8000d1c:	466b      	mov	r3, sp
 8000d1e:	3303      	adds	r3, #3
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t h[Nmodel][Nmodel+1];
 8000d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000d2c:	1c5e      	adds	r6, r3, #1
 8000d2e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8000d32:	1e73      	subs	r3, r6, #1
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d38:	4633      	mov	r3, r6
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	f04f 0000 	mov.w	r0, #0
 8000d44:	f04f 0100 	mov.w	r1, #0
 8000d48:	0159      	lsls	r1, r3, #5
 8000d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000d4e:	0150      	lsls	r0, r2, #5
 8000d50:	4633      	mov	r3, r6
 8000d52:	009a      	lsls	r2, r3, #2
 8000d54:	60fa      	str	r2, [r7, #12]
 8000d56:	4622      	mov	r2, r4
 8000d58:	1e53      	subs	r3, r2, #1
 8000d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d5e:	4633      	mov	r3, r6
 8000d60:	4618      	mov	r0, r3
 8000d62:	f04f 0100 	mov.w	r1, #0
 8000d66:	613c      	str	r4, [r7, #16]
 8000d68:	4623      	mov	r3, r4
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	fb02 f501 	mul.w	r5, r2, r1
 8000d74:	fb00 f403 	mul.w	r4, r0, r3
 8000d78:	442c      	add	r4, r5
 8000d7a:	fba0 0102 	umull	r0, r1, r0, r2
 8000d7e:	1863      	adds	r3, r4, r1
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	014b      	lsls	r3, r1, #5
 8000d8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000d90:	0142      	lsls	r2, r0, #5
 8000d92:	4633      	mov	r3, r6
 8000d94:	4618      	mov	r0, r3
 8000d96:	f04f 0100 	mov.w	r1, #0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	fb02 f501 	mul.w	r5, r2, r1
 8000da6:	fb00 f403 	mul.w	r4, r0, r3
 8000daa:	442c      	add	r4, r5
 8000dac:	fba0 0102 	umull	r0, r1, r0, r2
 8000db0:	1863      	adds	r3, r4, r1
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	014b      	lsls	r3, r1, #5
 8000dbe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000dc2:	0142      	lsls	r2, r0, #5
 8000dc4:	4632      	mov	r2, r6
 8000dc6:	693c      	ldr	r4, [r7, #16]
 8000dc8:	4623      	mov	r3, r4
 8000dca:	fb03 f302 	mul.w	r3, r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dda:	466b      	mov	r3, sp
 8000ddc:	3303      	adds	r3, #3
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(g, 0, sizeof(g));
 8000de4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000de8:	4662      	mov	r2, ip
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	fb03 f302 	mul.w	r3, r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	461a      	mov	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f004 f86f 	bl	8004ed8 <memset>
    memset(h, 0, sizeof(h));
 8000dfa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000dfc:	4632      	mov	r2, r6
 8000dfe:	4623      	mov	r3, r4
 8000e00:	fb03 f302 	mul.w	r3, r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	461a      	mov	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f004 f865 	bl	8004ed8 <memset>


    int i;
    for (i = 0; i < Nmax; i++) { // 0 to 103
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e14:	e0a8      	b.n	8000f68 <magnet+0x3b0>
 8000e16:	bf00      	nop
 8000e18:	08005fb0 	.word	0x08005fb0
 8000e1c:	08005fc0 	.word	0x08005fc0
 8000e20:	08005fc4 	.word	0x08005fc4
 8000e24:	08005fd0 	.word	0x08005fd0
 8000e28:	08005fe4 	.word	0x08005fe4
 8000e2c:	08005ff4 	.word	0x08005ff4
 8000e30:	18e33333 	.word	0x18e33333
        g[Ns[i]-1][Ms[i]] = (Gs[i] + MULT(GVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2; // 360 til 16.16
 8000e34:	4adc      	ldr	r2, [pc, #880]	; (80011a8 <magnet+0x5f0>)
 8000e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000e3a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8000e3e:	4adb      	ldr	r2, [pc, #876]	; (80011ac <magnet+0x5f4>)
 8000e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	461c      	mov	r4, r3
 8000e4a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	461a      	mov	r2, r3
 8000e52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e56:	ea4f 4922 	mov.w	r9, r2, asr #16
 8000e5a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8000e5e:	4ad4      	ldr	r2, [pc, #848]	; (80011b0 <magnet+0x5f8>)
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	4640      	mov	r0, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	f7ff fa2a 	bl	80002c0 <__aeabi_ldivmod>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4613      	mov	r3, r2
 8000e72:	461a      	mov	r2, r3
 8000e74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e78:	fb02 f005 	mul.w	r0, r2, r5
 8000e7c:	fb04 f103 	mul.w	r1, r4, r3
 8000e80:	4401      	add	r1, r0
 8000e82:	fba4 2302 	umull	r2, r3, r4, r2
 8000e86:	4419      	add	r1, r3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	f04f 0100 	mov.w	r1, #0
 8000e92:	0c10      	lsrs	r0, r2, #16
 8000e94:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e98:	1419      	asrs	r1, r3, #16
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4433      	add	r3, r6
 8000e9e:	1c99      	adds	r1, r3, #2
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089d      	lsrs	r5, r3, #2
 8000ea4:	4ac3      	ldr	r2, [pc, #780]	; (80011b4 <magnet+0x5fc>)
 8000ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	1e5c      	subs	r4, r3, #1
 8000eb0:	4ac1      	ldr	r2, [pc, #772]	; (80011b8 <magnet+0x600>)
 8000eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000eb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eba:	1089      	asrs	r1, r1, #2
 8000ebc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000ec0:	fb04 f305 	mul.w	r3, r4, r5
 8000ec4:	4403      	add	r3, r0
 8000ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        h[Ns[i]-1][Ms[i]] = (Hs[i] + MULT(HVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2;
 8000eca:	4abc      	ldr	r2, [pc, #752]	; (80011bc <magnet+0x604>)
 8000ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000ed0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8000ed4:	4aba      	ldr	r2, [pc, #744]	; (80011c0 <magnet+0x608>)
 8000ed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	461c      	mov	r4, r3
 8000ee0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000eec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8000ef0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8000ef4:	4aae      	ldr	r2, [pc, #696]	; (80011b0 <magnet+0x5f8>)
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	4650      	mov	r0, sl
 8000efc:	4659      	mov	r1, fp
 8000efe:	f7ff f9df 	bl	80002c0 <__aeabi_ldivmod>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4613      	mov	r3, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f0e:	fb02 f005 	mul.w	r0, r2, r5
 8000f12:	fb04 f103 	mul.w	r1, r4, r3
 8000f16:	4401      	add	r1, r0
 8000f18:	fba4 2302 	umull	r2, r3, r4, r2
 8000f1c:	4419      	add	r1, r3
 8000f1e:	460b      	mov	r3, r1
 8000f20:	f04f 0000 	mov.w	r0, #0
 8000f24:	f04f 0100 	mov.w	r1, #0
 8000f28:	0c10      	lsrs	r0, r2, #16
 8000f2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f2e:	1419      	asrs	r1, r3, #16
 8000f30:	4603      	mov	r3, r0
 8000f32:	4433      	add	r3, r6
 8000f34:	1c99      	adds	r1, r3, #2
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	089d      	lsrs	r5, r3, #2
 8000f3a:	4a9e      	ldr	r2, [pc, #632]	; (80011b4 <magnet+0x5fc>)
 8000f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	1e5c      	subs	r4, r3, #1
 8000f46:	4a9c      	ldr	r2, [pc, #624]	; (80011b8 <magnet+0x600>)
 8000f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000f4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f50:	1089      	asrs	r1, r1, #2
 8000f52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f54:	fb04 f305 	mul.w	r3, r4, r5
 8000f58:	4403      	add	r3, r0
 8000f5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < Nmax; i++) { // 0 to 103
 8000f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000f62:	3301      	adds	r3, #1
 8000f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000f68:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f6ff af5f 	blt.w	8000e34 <magnet+0x27c>
    }

    int32_t Bt = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int32_t Br = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int32_t Bp = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    int32_t P11 = 1<<16;
 8000f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    int32_t P10 = 1<<16;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int32_t dP11 = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t dP10 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    int32_t K;

    int16_t m;
    int16_t n;

    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000faa:	f000 bc99 	b.w	80018e0 <magnet+0xd28>
        for (n = 1; n <= Nmodel; n++) {
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8000fb4:	f000 bc86 	b.w	80018c4 <magnet+0xd0c>
            if ( m <= n ) {
 8000fb8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8000fbc:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f300 8478 	bgt.w	80018b6 <magnet+0xcfe>
                if (m == n) {
 8000fc6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8000fca:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d175      	bne.n	80010be <magnet+0x506>
                    P2 = MULT(sinrad(theta), P11);
 8000fd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fd4:	f7ff fc6a 	bl	80008ac <sinrad>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fea:	fb02 f501 	mul.w	r5, r2, r1
 8000fee:	fb00 f403 	mul.w	r4, r0, r3
 8000ff2:	442c      	add	r4, r5
 8000ff4:	fba0 2302 	umull	r2, r3, r0, r2
 8000ff8:	18e1      	adds	r1, r4, r3
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	f04f 0000 	mov.w	r0, #0
 8001000:	f04f 0100 	mov.w	r1, #0
 8001004:	0c10      	lsrs	r0, r2, #16
 8001006:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100a:	1419      	asrs	r1, r3, #16
 800100c:	4603      	mov	r3, r0
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    dP2 = MULT(sinrad(theta), dP11) + MULT(cosrad(theta), P11);
 8001012:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001014:	f7ff fc4a 	bl	80008ac <sinrad>
 8001018:	4603      	mov	r3, r0
 800101a:	4618      	mov	r0, r3
 800101c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001024:	461a      	mov	r2, r3
 8001026:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800102a:	fb02 f501 	mul.w	r5, r2, r1
 800102e:	fb00 f403 	mul.w	r4, r0, r3
 8001032:	442c      	add	r4, r5
 8001034:	fba0 2302 	umull	r2, r3, r0, r2
 8001038:	18e1      	adds	r1, r4, r3
 800103a:	460b      	mov	r3, r1
 800103c:	f04f 0000 	mov.w	r0, #0
 8001040:	f04f 0100 	mov.w	r1, #0
 8001044:	0c10      	lsrs	r0, r2, #16
 8001046:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800104a:	1419      	asrs	r1, r3, #16
 800104c:	4606      	mov	r6, r0
 800104e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001050:	f7ff fcb0 	bl	80009b4 <cosrad>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800105c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001060:	4608      	mov	r0, r1
 8001062:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001066:	fb00 f503 	mul.w	r5, r0, r3
 800106a:	fb02 f401 	mul.w	r4, r2, r1
 800106e:	442c      	add	r4, r5
 8001070:	fba2 2300 	umull	r2, r3, r2, r0
 8001074:	18e1      	adds	r1, r4, r3
 8001076:	460b      	mov	r3, r1
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	f04f 0100 	mov.w	r1, #0
 8001080:	0c10      	lsrs	r0, r2, #16
 8001082:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001086:	1419      	asrs	r1, r3, #16
 8001088:	4603      	mov	r3, r0
 800108a:	4433      	add	r3, r6
 800108c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    P11 = P2;
 8001090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    P10 = P11;
 8001098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800109c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    P20 = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    dP11 = dP2;
 80010a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80010aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    dP10 = dP11;
 80010ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    dP20 = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80010bc:	e1b1      	b.n	8001422 <magnet+0x86a>
                } else {
                    if (n == 1) {
 80010be:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d17e      	bne.n	80011c4 <magnet+0x60c>
                        P2 = MULT(cosrad(theta), P10);
 80010c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80010c8:	f7ff fc74 	bl	80009b4 <cosrad>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4618      	mov	r0, r3
 80010d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80010d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010d8:	461a      	mov	r2, r3
 80010da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80010de:	fb02 f501 	mul.w	r5, r2, r1
 80010e2:	fb00 f403 	mul.w	r4, r0, r3
 80010e6:	442c      	add	r4, r5
 80010e8:	fba0 2302 	umull	r2, r3, r0, r2
 80010ec:	18e1      	adds	r1, r4, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	f04f 0100 	mov.w	r1, #0
 80010f8:	0c10      	lsrs	r0, r2, #16
 80010fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010fe:	1419      	asrs	r1, r3, #16
 8001100:	4603      	mov	r3, r0
 8001102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10);
 8001106:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001108:	f7ff fc54 	bl	80009b4 <cosrad>
 800110c:	4603      	mov	r3, r0
 800110e:	4618      	mov	r0, r3
 8001110:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001114:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001118:	461a      	mov	r2, r3
 800111a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800111e:	fb02 f501 	mul.w	r5, r2, r1
 8001122:	fb00 f403 	mul.w	r4, r0, r3
 8001126:	442c      	add	r4, r5
 8001128:	fba0 2302 	umull	r2, r3, r0, r2
 800112c:	18e1      	adds	r1, r4, r3
 800112e:	460b      	mov	r3, r1
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	f04f 0100 	mov.w	r1, #0
 8001138:	0c10      	lsrs	r0, r2, #16
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	1419      	asrs	r1, r3, #16
 8001140:	4606      	mov	r6, r0
 8001142:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001144:	f7ff fbb2 	bl	80008ac <sinrad>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001150:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001154:	4608      	mov	r0, r1
 8001156:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800115a:	fb00 f503 	mul.w	r5, r0, r3
 800115e:	fb02 f401 	mul.w	r4, r2, r1
 8001162:	442c      	add	r4, r5
 8001164:	fba2 2300 	umull	r2, r3, r2, r0
 8001168:	18e1      	adds	r1, r4, r3
 800116a:	460b      	mov	r3, r1
 800116c:	f04f 0000 	mov.w	r0, #0
 8001170:	f04f 0100 	mov.w	r1, #0
 8001174:	0c10      	lsrs	r0, r2, #16
 8001176:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117a:	1419      	asrs	r1, r3, #16
 800117c:	4603      	mov	r3, r0
 800117e:	1af3      	subs	r3, r6, r3
 8001180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 800118c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 800119c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80011a4:	e13d      	b.n	8001422 <magnet+0x86a>
 80011a6:	bf00      	nop
 80011a8:	20000340 	.word	0x20000340
 80011ac:	200004e0 	.word	0x200004e0
 80011b0:	016d0000 	.word	0x016d0000
 80011b4:	20000000 	.word	0x20000000
 80011b8:	200001a0 	.word	0x200001a0
 80011bc:	20000680 	.word	0x20000680
 80011c0:	20000820 	.word	0x20000820
                    } else {
                    	int32_t nm1 = convert(n-1);           // 16.16
 80011c4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fa90 	bl	80006f0 <convert>
 80011d0:	67b8      	str	r0, [r7, #120]	; 0x78
                    	int32_t mfix = convert(m);
 80011d2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fa8a 	bl	80006f0 <convert>
 80011dc:	6778      	str	r0, [r7, #116]	; 0x74
                    	int32_t num  = FIX16_MULT(nm1,nm1) - FIX16_MULT(mfix,mfix);
 80011de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011e0:	4618      	mov	r0, r3
 80011e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80011e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011e8:	461a      	mov	r2, r3
 80011ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011ee:	fb02 f501 	mul.w	r5, r2, r1
 80011f2:	fb00 f403 	mul.w	r4, r0, r3
 80011f6:	442c      	add	r4, r5
 80011f8:	fba0 2302 	umull	r2, r3, r0, r2
 80011fc:	18e1      	adds	r1, r4, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	f04f 0100 	mov.w	r1, #0
 8001208:	0c10      	lsrs	r0, r2, #16
 800120a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800120e:	1419      	asrs	r1, r3, #16
 8001210:	4606      	mov	r6, r0
 8001212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001214:	461a      	mov	r2, r3
 8001216:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800121a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800121c:	4608      	mov	r0, r1
 800121e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001222:	fb00 f503 	mul.w	r5, r0, r3
 8001226:	fb02 f401 	mul.w	r4, r2, r1
 800122a:	442c      	add	r4, r5
 800122c:	fba2 2300 	umull	r2, r3, r2, r0
 8001230:	18e1      	adds	r1, r4, r3
 8001232:	460b      	mov	r3, r1
 8001234:	f04f 0000 	mov.w	r0, #0
 8001238:	f04f 0100 	mov.w	r1, #0
 800123c:	0c10      	lsrs	r0, r2, #16
 800123e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001242:	1419      	asrs	r1, r3, #16
 8001244:	4603      	mov	r3, r0
 8001246:	1af3      	subs	r3, r6, r3
 8001248:	673b      	str	r3, [r7, #112]	; 0x70
                    	int32_t den  = FIX16_MULT(convert(2*n)-convert(1),
 800124a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fa4d 	bl	80006f0 <convert>
 8001256:	4604      	mov	r4, r0
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fa49 	bl	80006f0 <convert>
 800125e:	4603      	mov	r3, r0
 8001260:	1ae3      	subs	r3, r4, r3
 8001262:	461c      	mov	r4, r3
 8001264:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001268:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa3e 	bl	80006f0 <convert>
 8001274:	4606      	mov	r6, r0
 8001276:	2003      	movs	r0, #3
 8001278:	f7ff fa3a 	bl	80006f0 <convert>
 800127c:	4603      	mov	r3, r0
 800127e:	1af3      	subs	r3, r6, r3
 8001280:	461a      	mov	r2, r3
 8001282:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001286:	fb02 f005 	mul.w	r0, r2, r5
 800128a:	fb04 f103 	mul.w	r1, r4, r3
 800128e:	4401      	add	r1, r0
 8001290:	fba4 2302 	umull	r2, r3, r4, r2
 8001294:	4419      	add	r1, r3
 8001296:	460b      	mov	r3, r1
 8001298:	f04f 0000 	mov.w	r0, #0
 800129c:	f04f 0100 	mov.w	r1, #0
 80012a0:	0c10      	lsrs	r0, r2, #16
 80012a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012a6:	1419      	asrs	r1, r3, #16
 80012a8:	4603      	mov	r3, r0
 80012aa:	66fb      	str	r3, [r7, #108]	; 0x6c
                    	                          convert(2*n)-convert(3));
                    	K = FIX16_DIV(num, den);
 80012ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012ae:	461a      	mov	r2, r3
 80012b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012b4:	1411      	asrs	r1, r2, #16
 80012b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80012b8:	0413      	lsls	r3, r2, #16
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80012bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012be:	461a      	mov	r2, r3
 80012c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012c8:	f7fe fffa 	bl	80002c0 <__aeabi_ldivmod>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	66bb      	str	r3, [r7, #104]	; 0x68
                    	P2 = MULT(cosrad(theta), P10) - MULT(K, P20);
 80012d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012d6:	f7ff fb6d 	bl	80009b4 <cosrad>
 80012da:	4603      	mov	r3, r0
 80012dc:	4618      	mov	r0, r3
 80012de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80012e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012e6:	461a      	mov	r2, r3
 80012e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ec:	fb02 f501 	mul.w	r5, r2, r1
 80012f0:	fb00 f403 	mul.w	r4, r0, r3
 80012f4:	442c      	add	r4, r5
 80012f6:	fba0 2302 	umull	r2, r3, r0, r2
 80012fa:	18e1      	adds	r1, r4, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	f04f 0000 	mov.w	r0, #0
 8001302:	f04f 0100 	mov.w	r1, #0
 8001306:	0c10      	lsrs	r0, r2, #16
 8001308:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800130c:	1419      	asrs	r1, r3, #16
 800130e:	4606      	mov	r6, r0
 8001310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001312:	461a      	mov	r2, r3
 8001314:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001318:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800131c:	4608      	mov	r0, r1
 800131e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001322:	fb00 f503 	mul.w	r5, r0, r3
 8001326:	fb02 f401 	mul.w	r4, r2, r1
 800132a:	442c      	add	r4, r5
 800132c:	fba2 2300 	umull	r2, r3, r2, r0
 8001330:	18e1      	adds	r1, r4, r3
 8001332:	460b      	mov	r3, r1
 8001334:	f04f 0000 	mov.w	r0, #0
 8001338:	f04f 0100 	mov.w	r1, #0
 800133c:	0c10      	lsrs	r0, r2, #16
 800133e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001342:	1419      	asrs	r1, r3, #16
 8001344:	4603      	mov	r3, r0
 8001346:	1af3      	subs	r3, r6, r3
 8001348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10) - MULT(K, dP20);
 800134c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800134e:	f7ff fb31 	bl	80009b4 <cosrad>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800135a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800135e:	461a      	mov	r2, r3
 8001360:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001364:	fb02 f501 	mul.w	r5, r2, r1
 8001368:	fb00 f403 	mul.w	r4, r0, r3
 800136c:	442c      	add	r4, r5
 800136e:	fba0 2302 	umull	r2, r3, r0, r2
 8001372:	18e1      	adds	r1, r4, r3
 8001374:	460b      	mov	r3, r1
 8001376:	f04f 0000 	mov.w	r0, #0
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	0c10      	lsrs	r0, r2, #16
 8001380:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001384:	1419      	asrs	r1, r3, #16
 8001386:	4606      	mov	r6, r0
 8001388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800138a:	f7ff fa8f 	bl	80008ac <sinrad>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001396:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800139a:	4608      	mov	r0, r1
 800139c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013a0:	fb00 f503 	mul.w	r5, r0, r3
 80013a4:	fb02 f401 	mul.w	r4, r2, r1
 80013a8:	442c      	add	r4, r5
 80013aa:	fba2 2300 	umull	r2, r3, r2, r0
 80013ae:	18e1      	adds	r1, r4, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	f04f 0000 	mov.w	r0, #0
 80013b6:	f04f 0100 	mov.w	r1, #0
 80013ba:	0c10      	lsrs	r0, r2, #16
 80013bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013c0:	1419      	asrs	r1, r3, #16
 80013c2:	4603      	mov	r3, r0
 80013c4:	1af6      	subs	r6, r6, r3
 80013c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c8:	461a      	mov	r2, r3
 80013ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80013d2:	4608      	mov	r0, r1
 80013d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013d8:	fb00 f503 	mul.w	r5, r0, r3
 80013dc:	fb02 f401 	mul.w	r4, r2, r1
 80013e0:	442c      	add	r4, r5
 80013e2:	fba2 2300 	umull	r2, r3, r2, r0
 80013e6:	18e1      	adds	r1, r4, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	f04f 0000 	mov.w	r0, #0
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	0c10      	lsrs	r0, r2, #16
 80013f4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013f8:	1419      	asrs	r1, r3, #16
 80013fa:	4603      	mov	r3, r0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 800140a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 800141a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800141e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    }
                }
                // Precompute repeated terms
                int32_t ar_pow = POW(DIV(a, r), (n + 2)<<16);
 8001422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001426:	461a      	mov	r2, r3
 8001428:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800142c:	1411      	asrs	r1, r2, #16
 800142e:	6279      	str	r1, [r7, #36]	; 0x24
 8001430:	0413      	lsls	r3, r2, #16
 8001432:	623b      	str	r3, [r7, #32]
 8001434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001436:	461a      	mov	r2, r3
 8001438:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800143c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001440:	f7fe ff3e 	bl	80002c0 <__aeabi_ldivmod>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4613      	mov	r3, r2
 800144a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001456:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800145a:	3302      	adds	r3, #2
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	141b      	asrs	r3, r3, #16
 8001460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001468:	2b00      	cmp	r3, #0
 800146a:	da5c      	bge.n	8001526 <magnet+0x96e>
 800146c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001470:	425b      	negs	r3, r3
 8001472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800147a:	461a      	mov	r2, r3
 800147c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0101 	mov.w	r1, #1
 8001488:	f7fe ff1a 	bl	80002c0 <__aeabi_ldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001496:	e046      	b.n	8001526 <magnet+0x96e>
 8001498:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01d      	beq.n	80014e0 <magnet+0x928>
 80014a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014a8:	4618      	mov	r0, r3
 80014aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014b2:	461a      	mov	r2, r3
 80014b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014b8:	fb02 f501 	mul.w	r5, r2, r1
 80014bc:	fb00 f403 	mul.w	r4, r0, r3
 80014c0:	442c      	add	r4, r5
 80014c2:	fba0 2302 	umull	r2, r3, r0, r2
 80014c6:	18e1      	adds	r1, r4, r3
 80014c8:	460b      	mov	r3, r1
 80014ca:	f04f 0000 	mov.w	r0, #0
 80014ce:	f04f 0100 	mov.w	r1, #0
 80014d2:	0c10      	lsrs	r0, r2, #16
 80014d4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014d8:	1419      	asrs	r1, r3, #16
 80014da:	4603      	mov	r3, r0
 80014dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80014e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014e4:	4618      	mov	r0, r3
 80014e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014ee:	461a      	mov	r2, r3
 80014f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014f4:	fb02 f501 	mul.w	r5, r2, r1
 80014f8:	fb00 f403 	mul.w	r4, r0, r3
 80014fc:	442c      	add	r4, r5
 80014fe:	fba0 2302 	umull	r2, r3, r0, r2
 8001502:	18e1      	adds	r1, r4, r3
 8001504:	460b      	mov	r3, r1
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	0c10      	lsrs	r0, r2, #16
 8001510:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001514:	1419      	asrs	r1, r3, #16
 8001516:	4603      	mov	r3, r0
 8001518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800151c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001520:	105b      	asrs	r3, r3, #1
 8001522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1b4      	bne.n	8001498 <magnet+0x8e0>
 800152e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001532:	667b      	str	r3, [r7, #100]	; 0x64
                int32_t mphi = MULT(m<<16, phi);
 8001534:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	4618      	mov	r0, r3
 800153c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001542:	461a      	mov	r2, r3
 8001544:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001548:	fb02 f501 	mul.w	r5, r2, r1
 800154c:	fb00 f403 	mul.w	r4, r0, r3
 8001550:	442c      	add	r4, r5
 8001552:	fba0 2302 	umull	r2, r3, r0, r2
 8001556:	18e1      	adds	r1, r4, r3
 8001558:	460b      	mov	r3, r1
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	0c10      	lsrs	r0, r2, #16
 8001564:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001568:	1419      	asrs	r1, r3, #16
 800156a:	4603      	mov	r3, r0
 800156c:	663b      	str	r3, [r7, #96]	; 0x60
                int32_t cos_mphi = cosrad(mphi);
 800156e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001570:	f7ff fa20 	bl	80009b4 <cosrad>
 8001574:	65f8      	str	r0, [r7, #92]	; 0x5c
                int32_t sin_mphi = sinrad(mphi);
 8001576:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001578:	f7ff f998 	bl	80008ac <sinrad>
 800157c:	65b8      	str	r0, [r7, #88]	; 0x58

                int32_t gnm = g[n - 1][m];
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	0899      	lsrs	r1, r3, #2
 8001582:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800158c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001590:	fb00 f101 	mul.w	r1, r0, r1
 8001594:	440a      	add	r2, r1
 8001596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159a:	657b      	str	r3, [r7, #84]	; 0x54
                int32_t hnm = h[n - 1][m];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0899      	lsrs	r1, r3, #2
 80015a0:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80015a4:	1e58      	subs	r0, r3, #1
 80015a6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80015aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ac:	fb00 f101 	mul.w	r1, r0, r1
 80015b0:	440a      	add	r2, r1
 80015b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b6:	653b      	str	r3, [r7, #80]	; 0x50

                int32_t gcos = MULT(gnm, cos_mphi);
 80015b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ba:	4618      	mov	r0, r3
 80015bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80015c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c2:	461a      	mov	r2, r3
 80015c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015c8:	fb02 f501 	mul.w	r5, r2, r1
 80015cc:	fb00 f403 	mul.w	r4, r0, r3
 80015d0:	442c      	add	r4, r5
 80015d2:	fba0 2302 	umull	r2, r3, r0, r2
 80015d6:	18e1      	adds	r1, r4, r3
 80015d8:	460b      	mov	r3, r1
 80015da:	f04f 0000 	mov.w	r0, #0
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	0c10      	lsrs	r0, r2, #16
 80015e4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80015e8:	1419      	asrs	r1, r3, #16
 80015ea:	4603      	mov	r3, r0
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c
                int32_t hsin = MULT(hnm, sin_mphi);
 80015ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015f0:	4618      	mov	r0, r3
 80015f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80015f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f8:	461a      	mov	r2, r3
 80015fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015fe:	fb02 f501 	mul.w	r5, r2, r1
 8001602:	fb00 f403 	mul.w	r4, r0, r3
 8001606:	442c      	add	r4, r5
 8001608:	fba0 2302 	umull	r2, r3, r0, r2
 800160c:	18e1      	adds	r1, r4, r3
 800160e:	460b      	mov	r3, r1
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	0c10      	lsrs	r0, r2, #16
 800161a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800161e:	1419      	asrs	r1, r3, #16
 8001620:	4603      	mov	r3, r0
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
                int32_t gsin = MULT(gnm, sin_mphi);
 8001624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001626:	4618      	mov	r0, r3
 8001628:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800162c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162e:	461a      	mov	r2, r3
 8001630:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001634:	fb02 f501 	mul.w	r5, r2, r1
 8001638:	fb00 f403 	mul.w	r4, r0, r3
 800163c:	442c      	add	r4, r5
 800163e:	fba0 2302 	umull	r2, r3, r0, r2
 8001642:	18e1      	adds	r1, r4, r3
 8001644:	460b      	mov	r3, r1
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	0c10      	lsrs	r0, r2, #16
 8001650:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001654:	1419      	asrs	r1, r3, #16
 8001656:	4603      	mov	r3, r0
 8001658:	647b      	str	r3, [r7, #68]	; 0x44
                int32_t hcos = MULT(hnm, cos_mphi);
 800165a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800165c:	4618      	mov	r0, r3
 800165e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001664:	461a      	mov	r2, r3
 8001666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800166a:	fb02 f501 	mul.w	r5, r2, r1
 800166e:	fb00 f403 	mul.w	r4, r0, r3
 8001672:	442c      	add	r4, r5
 8001674:	fba0 2302 	umull	r2, r3, r0, r2
 8001678:	18e1      	adds	r1, r4, r3
 800167a:	460b      	mov	r3, r1
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	0c10      	lsrs	r0, r2, #16
 8001686:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800168a:	1419      	asrs	r1, r3, #16
 800168c:	4603      	mov	r3, r0
 800168e:	643b      	str	r3, [r7, #64]	; 0x40

                // Magnetic field component updates
                Br = Br + MULT(MULT(ar_pow, (n + 1)<<16), MULT((gcos + hsin), P2));
 8001690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001692:	4618      	mov	r0, r3
 8001694:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001698:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800169c:	3301      	adds	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	461a      	mov	r2, r3
 80016a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016a6:	fb02 f501 	mul.w	r5, r2, r1
 80016aa:	fb00 f403 	mul.w	r4, r0, r3
 80016ae:	442c      	add	r4, r5
 80016b0:	fba0 2302 	umull	r2, r3, r0, r2
 80016b4:	18e1      	adds	r1, r4, r3
 80016b6:	460b      	mov	r3, r1
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	0c10      	lsrs	r0, r2, #16
 80016c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80016c6:	1419      	asrs	r1, r3, #16
 80016c8:	4603      	mov	r3, r0
 80016ca:	4698      	mov	r8, r3
 80016cc:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80016d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d4:	4413      	add	r3, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016e0:	461a      	mov	r2, r3
 80016e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016e6:	fb02 f501 	mul.w	r5, r2, r1
 80016ea:	fb00 f403 	mul.w	r4, r0, r3
 80016ee:	442c      	add	r4, r5
 80016f0:	fba0 0102 	umull	r0, r1, r0, r2
 80016f4:	1863      	adds	r3, r4, r1
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	0c02      	lsrs	r2, r0, #16
 8001702:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001706:	140b      	asrs	r3, r1, #16
 8001708:	4613      	mov	r3, r2
 800170a:	461a      	mov	r2, r3
 800170c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001710:	fb02 f009 	mul.w	r0, r2, r9
 8001714:	fb08 f103 	mul.w	r1, r8, r3
 8001718:	4401      	add	r1, r0
 800171a:	fba8 2302 	umull	r2, r3, r8, r2
 800171e:	4419      	add	r1, r3
 8001720:	460b      	mov	r3, r1
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	0c10      	lsrs	r0, r2, #16
 800172c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001730:	1419      	asrs	r1, r3, #16
 8001732:	4602      	mov	r2, r0
 8001734:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001738:	4413      	add	r3, r2
 800173a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                Bt = Bt + MULT(MULT(ar_pow, 1<<16), MULT((gcos + hsin), dP2));
 800173e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001740:	4618      	mov	r0, r3
 8001742:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	040b      	lsls	r3, r1, #16
 8001750:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001754:	0402      	lsls	r2, r0, #16
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	0c10      	lsrs	r0, r2, #16
 8001760:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001764:	1419      	asrs	r1, r3, #16
 8001766:	4603      	mov	r3, r0
 8001768:	4698      	mov	r8, r3
 800176a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800176e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001772:	4413      	add	r3, r2
 8001774:	4618      	mov	r0, r3
 8001776:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800177a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800177e:	461a      	mov	r2, r3
 8001780:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001784:	fb02 f501 	mul.w	r5, r2, r1
 8001788:	fb00 f403 	mul.w	r4, r0, r3
 800178c:	442c      	add	r4, r5
 800178e:	fba0 0102 	umull	r0, r1, r0, r2
 8001792:	1863      	adds	r3, r4, r1
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	0c02      	lsrs	r2, r0, #16
 80017a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80017a4:	140b      	asrs	r3, r1, #16
 80017a6:	4613      	mov	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ae:	fb02 f009 	mul.w	r0, r2, r9
 80017b2:	fb08 f103 	mul.w	r1, r8, r3
 80017b6:	4401      	add	r1, r0
 80017b8:	fba8 2302 	umull	r2, r3, r8, r2
 80017bc:	4419      	add	r1, r3
 80017be:	460b      	mov	r3, r1
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	0c10      	lsrs	r0, r2, #16
 80017ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80017ce:	1419      	asrs	r1, r3, #16
 80017d0:	4602      	mov	r2, r0
 80017d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017d6:	4413      	add	r3, r2
 80017d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                Bp = Bp + MULT(MULT(ar_pow, 1<<16), MULT(MULT(convert(m), (-gsin + hcos)), P2));
 80017dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017de:	4618      	mov	r0, r3
 80017e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	040b      	lsls	r3, r1, #16
 80017ee:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80017f2:	0402      	lsls	r2, r0, #16
 80017f4:	f04f 0000 	mov.w	r0, #0
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	0c10      	lsrs	r0, r2, #16
 80017fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001802:	1419      	asrs	r1, r3, #16
 8001804:	4603      	mov	r3, r0
 8001806:	4698      	mov	r8, r3
 8001808:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800180c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ff6d 	bl	80006f0 <convert>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800181e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	461a      	mov	r2, r3
 8001826:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800182a:	fb02 f501 	mul.w	r5, r2, r1
 800182e:	fb00 f403 	mul.w	r4, r0, r3
 8001832:	442c      	add	r4, r5
 8001834:	fba0 0102 	umull	r0, r1, r0, r2
 8001838:	1863      	adds	r3, r4, r1
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	0c02      	lsrs	r2, r0, #16
 8001846:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800184a:	140b      	asrs	r3, r1, #16
 800184c:	4613      	mov	r3, r2
 800184e:	4618      	mov	r0, r3
 8001850:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001858:	461a      	mov	r2, r3
 800185a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800185e:	fb02 f501 	mul.w	r5, r2, r1
 8001862:	fb00 f403 	mul.w	r4, r0, r3
 8001866:	442c      	add	r4, r5
 8001868:	fba0 0102 	umull	r0, r1, r0, r2
 800186c:	1863      	adds	r3, r4, r1
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	0c02      	lsrs	r2, r0, #16
 800187a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800187e:	140b      	asrs	r3, r1, #16
 8001880:	4613      	mov	r3, r2
 8001882:	461a      	mov	r2, r3
 8001884:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001888:	fb02 f009 	mul.w	r0, r2, r9
 800188c:	fb08 f103 	mul.w	r1, r8, r3
 8001890:	4401      	add	r1, r0
 8001892:	fba8 2302 	umull	r2, r3, r8, r2
 8001896:	4419      	add	r1, r3
 8001898:	460b      	mov	r3, r1
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	0c10      	lsrs	r0, r2, #16
 80018a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80018a8:	1419      	asrs	r1, r3, #16
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018b0:	4413      	add	r3, r2
 80018b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        for (n = 1; n <= Nmodel; n++) {
 80018b6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80018c4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80018c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f6bf ab73 	bge.w	8000fb8 <magnet+0x400>
    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 80018d2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3301      	adds	r3, #1
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80018e0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80018e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f6bf ab60 	bge.w	8000fae <magnet+0x3f6>
            }
        }
    }
    Bt = -Bt;
 80018ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018f2:	425b      	negs	r3, r3
 80018f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    Bp = -DIV(Bp, sinrad(theta));
 80018f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018fc:	461a      	mov	r2, r3
 80018fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001902:	1411      	asrs	r1, r2, #16
 8001904:	61f9      	str	r1, [r7, #28]
 8001906:	0413      	lsls	r3, r2, #16
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800190c:	f7fe ffce 	bl	80008ac <sinrad>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001918:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191c:	f7fe fcd0 	bl	80002c0 <__aeabi_ldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	425b      	negs	r3, r3
 8001928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    buffer[0] = Br;
 800192c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001930:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001934:	601a      	str	r2, [r3, #0]
    buffer[1] = Bt;
 8001936:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800193a:	3304      	adds	r3, #4
 800193c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001940:	601a      	str	r2, [r3, #0]
    buffer[2] = Bp;
 8001942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001946:	3308      	adds	r3, #8
 8001948:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001952:	bf00      	nop
 8001954:	37e4      	adds	r7, #228	; 0xe4
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001962:	f000 fbd4 	bl	800210e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 f859 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f000 f96f 	bl	8001c4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800196e:	f000 f921 	bl	8001bb4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001972:	f000 f8d3 	bl	8001b1c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001976:	f000 f891 	bl	8001a9c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 800197a:	4821      	ldr	r0, [pc, #132]	; (8001a00 <main+0xa4>)
 800197c:	f7fe ff04 	bl	8000788 <lsmCtrlReg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  I2C_Scan(&hi2c3);
 8001980:	481f      	ldr	r0, [pc, #124]	; (8001a00 <main+0xa4>)
 8001982:	f7fe fecf 	bl	8000724 <I2C_Scan>
int32_t r = REarth16km + Rational(2,10); // Earth's radius in fixed point 16.16 format
 8001986:	210a      	movs	r1, #10
 8001988:	2002      	movs	r0, #2
 800198a:	f7fe fe65 	bl	8000658 <Rational>
 800198e:	4602      	mov	r2, r0
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <main+0xa8>)
 8001992:	4413      	add	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
printf("r : ");
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <main+0xac>)
 8001998:	f003 faa6 	bl	8004ee8 <iprintf>
printFix(r);
 800199c:	69b8      	ldr	r0, [r7, #24]
 800199e:	f7fe fe7b 	bl	8000698 <printFix>
printf("\r\n");
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <main+0xb0>)
 80019a4:	f003 fb3c 	bl	8005020 <puts>
int32_t phi = convert(87); // 30 degrees in fixed point 16.16 format
 80019a8:	2057      	movs	r0, #87	; 0x57
 80019aa:	f7fe fea1 	bl	80006f0 <convert>
 80019ae:	6178      	str	r0, [r7, #20]
int32_t theta = 5701691; // 30 degrees in fixed point 16.16 format
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <main+0xb4>)
 80019b2:	613b      	str	r3, [r7, #16]
int32_t days = 478740480; // 15 years in fixed point 16.16 format (15 * 365.25 * 24 * 3600, converted to fixed point)
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <main+0xb8>)
 80019b6:	60fb      	str	r3, [r7, #12]
int32_t vector[3];
magnet(r, theta, phi, days, vector);
 80019b8:	463b      	mov	r3, r7
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	69b8      	ldr	r0, [r7, #24]
 80019c4:	f7ff f8f8 	bl	8000bb8 <magnet>
int i;
for (i=0; i<3; i++) {
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e013      	b.n	80019f6 <main+0x9a>
	printf("Res %i: ", i);
 80019ce:	69f9      	ldr	r1, [r7, #28]
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <main+0xbc>)
 80019d2:	f003 fa89 	bl	8004ee8 <iprintf>
	printFix(vector[i]);
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f107 0220 	add.w	r2, r7, #32
 80019de:	4413      	add	r3, r2
 80019e0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fe57 	bl	8000698 <printFix>
	printf("\r\n");
 80019ea:	4808      	ldr	r0, [pc, #32]	; (8001a0c <main+0xb0>)
 80019ec:	f003 fb18 	bl	8005020 <puts>
for (i=0; i<3; i++) {
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	dde8      	ble.n	80019ce <main+0x72>
}
  while (1)
 80019fc:	e7fe      	b.n	80019fc <main+0xa0>
 80019fe:	bf00      	nop
 8001a00:	20000a58 	.word	0x20000a58
 8001a04:	18e33333 	.word	0x18e33333
 8001a08:	08006004 	.word	0x08006004
 8001a0c:	0800600c 	.word	0x0800600c
 8001a10:	0057003b 	.word	0x0057003b
 8001a14:	1c890000 	.word	0x1c890000
 8001a18:	08006010 	.word	0x08006010

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	; 0x50
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	2238      	movs	r2, #56	; 0x38
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fa54 	bl	8004ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a42:	f001 fbaf 	bl	80031a4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a50:	2340      	movs	r3, #64	; 0x40
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fc55 	bl	800330c <HAL_RCC_OscConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a68:	f000 f92a 	bl	8001cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a70:	2301      	movs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 ff55 	bl	8003934 <HAL_RCC_ClockConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001a90:	f000 f916 	bl	8001cc0 <Error_Handler>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3750      	adds	r7, #80	; 0x50
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <MX_I2C3_Init+0x78>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <MX_I2C3_Init+0x7c>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001ad8:	f000 fe12 	bl	8002700 <HAL_I2C_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ae2:	f000 f8ed 	bl	8001cc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001aea:	f001 fac3 	bl	8003074 <HAL_I2CEx_ConfigAnalogFilter>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001af4:	f000 f8e4 	bl	8001cc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_I2C3_Init+0x74>)
 8001afc:	f001 fb05 	bl	800310a <HAL_I2CEx_ConfigDigitalFilter>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f000 f8db 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000a58 	.word	0x20000a58
 8001b14:	40007800 	.word	0x40007800
 8001b18:	0010061a 	.word	0x0010061a

08001b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <MX_USART1_UART_Init+0x94>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b66:	f002 faf1 	bl	800414c <HAL_UART_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b70:	f000 f8a6 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b78:	f003 f8ba 	bl	8004cf0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b82:	f000 f89d 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b86:	2100      	movs	r1, #0
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b8a:	f003 f8ef 	bl	8004d6c <HAL_UARTEx_SetRxFifoThreshold>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b94:	f000 f894 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_USART1_UART_Init+0x90>)
 8001b9a:	f003 f870 	bl	8004c7e <HAL_UARTEx_DisableFifoMode>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba4:	f000 f88c 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000aac 	.word	0x20000aac
 8001bb0:	40013800 	.word	0x40013800

08001bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <MX_USART2_UART_Init+0x94>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfc:	4811      	ldr	r0, [pc, #68]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001bfe:	f002 faa5 	bl	800414c <HAL_UART_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c08:	f000 f85a 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001c10:	f003 f86e 	bl	8004cf0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c1a:	f000 f851 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4808      	ldr	r0, [pc, #32]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001c22:	f003 f8a3 	bl	8004d6c <HAL_UARTEx_SetRxFifoThreshold>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c2c:	f000 f848 	bl	8001cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_USART2_UART_Init+0x90>)
 8001c32:	f003 f824 	bl	8004c7e <HAL_UARTEx_DisableFifoMode>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c3c:	f000 f840 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000b40 	.word	0x20000b40
 8001c48:	40004400 	.word	0x40004400

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_GPIO_Init+0x44>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <MX_GPIO_Init+0x44>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_GPIO_Init+0x44>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_GPIO_Init+0x44>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <MX_GPIO_Init+0x44>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_GPIO_Init+0x44>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000

08001c94 <_write>:
// code for setting printf to uart
//
extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	4804      	ldr	r0, [pc, #16]	; (8001cbc <_write+0x28>)
 8001cac:	f002 fa9e 	bl	80041ec <HAL_UART_Transmit>
    return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000b40 	.word	0x20000b40

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_MspInit+0x44>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_MspInit+0x44>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_MspInit+0x44>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_MspInit+0x44>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_MspInit+0x44>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d02:	f001 faf3 	bl	80032ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b09c      	sub	sp, #112	; 0x70
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	2244      	movs	r2, #68	; 0x44
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f8cf 	bl	8004ed8 <memset>
  if(hi2c->Instance==I2C3)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <HAL_I2C_MspInit+0xe4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d154      	bne.n	8001dee <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 f80a 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d5e:	f7ff ffaf 	bl	8001cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d96:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001da4:	2302      	movs	r3, #2
 8001da6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db2:	f000 fb23 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001db6:	2320      	movs	r3, #32
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dba:	2312      	movs	r3, #18
 8001dbc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <HAL_I2C_MspInit+0xec>)
 8001dd2:	f000 fb13 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_I2C_MspInit+0xe8>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3770      	adds	r7, #112	; 0x70
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40007800 	.word	0x40007800
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09c      	sub	sp, #112	; 0x70
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	2244      	movs	r2, #68	; 0x44
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 f857 	bl	8004ed8 <memset>
  if(huart->Instance==USART1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <HAL_UART_MspInit+0x124>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d138      	bne.n	8001ea6 <HAL_UART_MspInit+0xa2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 ff93 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e4c:	f7ff ff38 	bl	8001cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e74:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e92:	2307      	movs	r3, #7
 8001e94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea0:	f000 faac 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea4:	e03b      	b.n	8001f1e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_UART_MspInit+0x12c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d136      	bne.n	8001f1e <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 ff55 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001ec8:	f7ff fefa 	bl	8001cc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_UART_MspInit+0x128>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001efc:	230c      	movs	r3, #12
 8001efe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f000 fa6f 	bl	80023fc <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3770      	adds	r7, #112	; 0x70
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40004400 	.word	0x40004400

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f918 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e00a      	b.n	8001fb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f9a:	f3af 8000 	nop.w
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf0      	blt.n	8001f9a <_read+0x12>
	}

return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	605a      	str	r2, [r3, #4]
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f002 ff12 	bl	8004e84 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20008000 	.word	0x20008000
 800208c:	00000400 	.word	0x00000400
 8002090:	20000a4c 	.word	0x20000a4c
 8002094:	20000be8 	.word	0x20000be8

08002098 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020bc:	480d      	ldr	r0, [pc, #52]	; (80020f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c0:	f7ff ffea 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <LoopForever+0xe>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <LoopForever+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f002 fed1 	bl	8004e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ee:	f7ff fc35 	bl	800195c <main>

080020f2 <LoopForever>:

LoopForever:
    b LoopForever
 80020f2:	e7fe      	b.n	80020f2 <LoopForever>
  ldr   r0, =_estack
 80020f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	20000a30 	.word	0x20000a30
  ldr r2, =_sidata
 8002100:	08006904 	.word	0x08006904
  ldr r2, =_sbss
 8002104:	20000a30 	.word	0x20000a30
  ldr r4, =_ebss
 8002108:	20000be8 	.word	0x20000be8

0800210c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC1_2_IRQHandler>

0800210e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f000 f93d 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800211e:	200f      	movs	r0, #15
 8002120:	f000 f80e 	bl	8002140 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	e001      	b.n	8002134 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002130:	f7ff fdcc 	bl	8001ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002134:	79fb      	ldrb	r3, [r7, #7]

}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_InitTick+0x68>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d022      	beq.n	800219a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_InitTick+0x6c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_InitTick+0x68>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002160:	fbb1 f3f3 	udiv	r3, r1, r3
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f93a 	bl	80023e2 <HAL_SYSTICK_Config>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10f      	bne.n	8002194 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	d809      	bhi.n	800218e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217a:	2200      	movs	r2, #0
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	f04f 30ff 	mov.w	r0, #4294967295
 8002182:	f000 f914 	bl	80023ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_InitTick+0x70>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e007      	b.n	800219e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e004      	b.n	800219e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200009c8 	.word	0x200009c8
 80021ac:	200009c0 	.word	0x200009c0
 80021b0:	200009c4 	.word	0x200009c4

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x1c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_IncTick+0x20>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_IncTick+0x1c>)
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000bd4 	.word	0x20000bd4
 80021d4:	200009c8 	.word	0x200009c8

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000bd4 	.word	0x20000bd4

080021f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d004      	beq.n	8002214 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_Delay+0x40>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002214:	bf00      	nop
 8002216:	f7ff ffdf 	bl	80021d8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	d8f7      	bhi.n	8002216 <HAL_Delay+0x26>
  {
  }
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200009c8 	.word	0x200009c8

08002234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800225c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60d3      	str	r3, [r2, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__NVIC_GetPriorityGrouping+0x18>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0307 	and.w	r3, r3, #7
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff47 	bl	8002234 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff5e 	bl	800227c <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff90 	bl	80022ec <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5f 	bl	8002298 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffb2 	bl	8002354 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800240a:	e15a      	b.n	80026c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 814c 	beq.w	80026bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d005      	beq.n	800243c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002438:	2b02      	cmp	r3, #2
 800243a:	d130      	bne.n	800249e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002472:	2201      	movs	r2, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d017      	beq.n	80024da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d123      	bne.n	800252e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80a6 	beq.w	80026bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <HAL_GPIO_Init+0x2e4>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	4a5a      	ldr	r2, [pc, #360]	; (80026e0 <HAL_GPIO_Init+0x2e4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6613      	str	r3, [r2, #96]	; 0x60
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HAL_GPIO_Init+0x2e4>)
 800257e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002588:	4a56      	ldr	r2, [pc, #344]	; (80026e4 <HAL_GPIO_Init+0x2e8>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b2:	d01f      	beq.n	80025f4 <HAL_GPIO_Init+0x1f8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4c      	ldr	r2, [pc, #304]	; (80026e8 <HAL_GPIO_Init+0x2ec>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d019      	beq.n	80025f0 <HAL_GPIO_Init+0x1f4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4b      	ldr	r2, [pc, #300]	; (80026ec <HAL_GPIO_Init+0x2f0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <HAL_GPIO_Init+0x1f0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4a      	ldr	r2, [pc, #296]	; (80026f0 <HAL_GPIO_Init+0x2f4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00d      	beq.n	80025e8 <HAL_GPIO_Init+0x1ec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a49      	ldr	r2, [pc, #292]	; (80026f4 <HAL_GPIO_Init+0x2f8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x1e8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_GPIO_Init+0x2fc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_GPIO_Init+0x1e4>
 80025dc:	2305      	movs	r3, #5
 80025de:	e00a      	b.n	80025f6 <HAL_GPIO_Init+0x1fa>
 80025e0:	2306      	movs	r3, #6
 80025e2:	e008      	b.n	80025f6 <HAL_GPIO_Init+0x1fa>
 80025e4:	2304      	movs	r3, #4
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x1fa>
 80025e8:	2303      	movs	r3, #3
 80025ea:	e004      	b.n	80025f6 <HAL_GPIO_Init+0x1fa>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x1fa>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_Init+0x1fa>
 80025f4:	2300      	movs	r3, #0
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002606:	4937      	ldr	r1, [pc, #220]	; (80026e4 <HAL_GPIO_Init+0x2e8>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_GPIO_Init+0x300>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002638:	4a30      	ldr	r2, [pc, #192]	; (80026fc <HAL_GPIO_Init+0x300>)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_GPIO_Init+0x300>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002662:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_GPIO_Init+0x300>)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_GPIO_Init+0x300>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_GPIO_Init+0x300>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_GPIO_Init+0x300>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_GPIO_Init+0x300>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3301      	adds	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f ae9d 	bne.w	800240c <HAL_GPIO_Init+0x10>
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010000 	.word	0x40010000
 80026e8:	48000400 	.word	0x48000400
 80026ec:	48000800 	.word	0x48000800
 80026f0:	48000c00 	.word	0x48000c00
 80026f4:	48001000 	.word	0x48001000
 80026f8:	48001400 	.word	0x48001400
 80026fc:	40010400 	.word	0x40010400

08002700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e08d      	b.n	800282e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff faf4 	bl	8001d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002750:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002760:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	e006      	b.n	8002788 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002786:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d108      	bne.n	80027a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	e007      	b.n	80027b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69d9      	ldr	r1, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	f040 80fd 	bne.w	8002a54 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_I2C_Master_Transmit+0x30>
 8002864:	2302      	movs	r3, #2
 8002866:	e0f6      	b.n	8002a56 <HAL_I2C_Master_Transmit+0x21e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002870:	f7ff fcb2 	bl	80021d8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2319      	movs	r3, #25
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa00 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0e1      	b.n	8002a56 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2221      	movs	r2, #33	; 0x21
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2210      	movs	r2, #16
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2bff      	cmp	r3, #255	; 0xff
 80028c2:	d906      	bls.n	80028d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80028ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e007      	b.n	80028e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d024      	beq.n	8002934 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	4b4e      	ldr	r3, [pc, #312]	; (8002a60 <HAL_I2C_Master_Transmit+0x228>)
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb6f 	bl	8003010 <I2C_TransferConfig>
 8002932:	e066      	b.n	8002a02 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_I2C_Master_Transmit+0x228>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fb64 	bl	8003010 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002948:	e05b      	b.n	8002a02 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	6a39      	ldr	r1, [r7, #32]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f9f3 	bl	8002d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e07b      	b.n	8002a56 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d034      	beq.n	8002a02 <HAL_I2C_Master_Transmit+0x1ca>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	d130      	bne.n	8002a02 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f96c 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e04d      	b.n	8002a56 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2bff      	cmp	r3, #255	; 0xff
 80029c2:	d90e      	bls.n	80029e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	22ff      	movs	r2, #255	; 0xff
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fb18 	bl	8003010 <I2C_TransferConfig>
 80029e0:	e00f      	b.n	8002a02 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	8979      	ldrh	r1, [r7, #10]
 80029f4:	2300      	movs	r3, #0
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fb07 	bl	8003010 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d19e      	bne.n	800294a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f9d9 	bl	8002dc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e01a      	b.n	8002a56 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_I2C_Master_Transmit+0x22c>)
 8002a34:	400b      	ands	r3, r1
 8002a36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	80002000 	.word	0x80002000
 8002a64:	fe00e800 	.word	0xfe00e800

08002a68 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 80d6 	bne.w	8002c36 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a98:	d101      	bne.n	8002a9e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0cc      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_I2C_IsDeviceReady+0x44>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e0c5      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2224      	movs	r2, #36	; 0x24
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_IsDeviceReady+0x72>
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ad8:	e006      	b.n	8002ae8 <HAL_I2C_IsDeviceReady+0x80>
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002aee:	f7ff fb73 	bl	80021d8 <HAL_GetTick>
 8002af2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b20:	e034      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d01a      	beq.n	8002b60 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7ff fb55 	bl	80021d8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <HAL_I2C_IsDeviceReady+0xd8>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10f      	bne.n	8002b60 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e06b      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_I2C_IsDeviceReady+0x130>
 8002b92:	7fbb      	ldrb	r3, [r7, #30]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0c4      	beq.n	8002b22 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d01a      	beq.n	8002bdc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2120      	movs	r1, #32
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f869 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e03b      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e02d      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2120      	movs	r1, #32
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f84e 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e020      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f63f af56 	bhi.w	8002ac2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d103      	bne.n	8002c5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d007      	beq.n	8002c7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	619a      	str	r2, [r3, #24]
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c98:	e03b      	b.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f8d6 	bl	8002e50 <I2C_IsErrorOccurred>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e041      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d02d      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7ff fa8f 	bl	80021d8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnFlagUntilTimeout+0x44>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d122      	bne.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d113      	bne.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d0b4      	beq.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d46:	e033      	b.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f87f 	bl	8002e50 <I2C_IsErrorOccurred>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e031      	b.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d025      	beq.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d64:	f7ff fa38 	bl	80021d8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d302      	bcc.n	8002d7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11a      	bne.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d013      	beq.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e007      	b.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d1c4      	bne.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd4:	e02f      	b.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f838 	bl	8002e50 <I2C_IsErrorOccurred>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02d      	b.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7ff f9f5 	bl	80021d8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11a      	bne.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d013      	beq.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d1c8      	bne.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d068      	beq.n	8002f4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2210      	movs	r2, #16
 8002e82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e84:	e049      	b.n	8002f1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d045      	beq.n	8002f1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7ff f9a3 	bl	80021d8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_IsErrorOccurred+0x54>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d13a      	bne.n	8002f1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d121      	bne.n	8002f0c <I2C_IsErrorOccurred+0xbc>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ece:	d01d      	beq.n	8002f0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d01a      	beq.n	8002f0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ee6:	f7ff f977 	bl	80021d8 <HAL_GetTick>
 8002eea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eec:	e00e      	b.n	8002f0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eee:	f7ff f973 	bl	80021d8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b19      	cmp	r3, #25
 8002efa:	d907      	bls.n	8002f0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f043 0320 	orr.w	r3, r3, #32
 8002f02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f0a:	e006      	b.n	8002f1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d1e9      	bne.n	8002eee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d003      	beq.n	8002f30 <I2C_IsErrorOccurred+0xe0>
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0aa      	beq.n	8002e86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fe3b 	bl	8002c40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <I2C_IsErrorOccurred+0x1bc>)
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003002:	4618      	mov	r0, r3
 8003004:	3728      	adds	r7, #40	; 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	fe00e800 	.word	0xfe00e800

08003010 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	817b      	strh	r3, [r7, #10]
 800301e:	4613      	mov	r3, r2
 8003020:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003028:	7a7b      	ldrb	r3, [r7, #9]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003030:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	4313      	orrs	r3, r2
 800303a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800303e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	0d5b      	lsrs	r3, r3, #21
 800304a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <I2C_TransferConfig+0x60>)
 8003050:	430b      	orrs	r3, r1
 8003052:	43db      	mvns	r3, r3
 8003054:	ea02 0103 	and.w	r1, r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	03ff63ff 	.word	0x03ff63ff

08003074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d138      	bne.n	80030fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003094:	2302      	movs	r3, #2
 8003096:	e032      	b.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b20      	cmp	r3, #32
 800311e:	d139      	bne.n	8003194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800312a:	2302      	movs	r3, #2
 800312c:	e033      	b.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2224      	movs	r2, #36	; 0x24
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800315c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d141      	bne.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031b2:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031be:	d131      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c0:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c6:	4a46      	ldr	r2, [pc, #280]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d8:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e0:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2232      	movs	r2, #50	; 0x32
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	0c9b      	lsrs	r3, r3, #18
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f6:	e002      	b.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	d102      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f2      	bne.n	80031f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d158      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e057      	b.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003224:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003234:	e04d      	b.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d141      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d131      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003252:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003264:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2232      	movs	r2, #50	; 0x32
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	0c9b      	lsrs	r3, r3, #18
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003282:	e002      	b.n	800328a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3b01      	subs	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d102      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f2      	bne.n	8003284 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032aa:	d112      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e011      	b.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c0:	e007      	b.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ca:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40007000 	.word	0x40007000
 80032e4:	200009c0 	.word	0x200009c0
 80032e8:	431bde83 	.word	0x431bde83

080032ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fa:	6093      	str	r3, [r2, #8]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40007000 	.word	0x40007000

0800330c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e301      	b.n	8003922 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d075      	beq.n	8003416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	4ba3      	ldr	r3, [pc, #652]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003334:	4ba0      	ldr	r3, [pc, #640]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d102      	bne.n	800334a <HAL_RCC_OscConfig+0x3e>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d002      	beq.n	8003350 <HAL_RCC_OscConfig+0x44>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d10b      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	4b99      	ldr	r3, [pc, #612]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05b      	beq.n	8003414 <HAL_RCC_OscConfig+0x108>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d157      	bne.n	8003414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e2dc      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x74>
 8003372:	4b91      	ldr	r3, [pc, #580]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x98>
 800338a:	4b8b      	ldr	r3, [pc, #556]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a8a      	ldr	r2, [pc, #552]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a87      	ldr	r2, [pc, #540]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 80033a4:	4b84      	ldr	r3, [pc, #528]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a83      	ldr	r2, [pc, #524]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a80      	ldr	r2, [pc, #512]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe ff08 	bl	80021d8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe ff04 	bl	80021d8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e2a1      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fef4 	bl	80021d8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe fef0 	bl	80021d8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e28d      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003406:	4b6c      	ldr	r3, [pc, #432]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0xe8>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d075      	beq.n	800350e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003422:	4b65      	ldr	r3, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800342c:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d102      	bne.n	8003442 <HAL_RCC_OscConfig+0x136>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d002      	beq.n	8003448 <HAL_RCC_OscConfig+0x13c>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d11f      	bne.n	8003488 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_OscConfig+0x154>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e260      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4952      	ldr	r1, [pc, #328]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003474:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_RCC_OscConfig+0x2b0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fe61 	bl	8002140 <HAL_InitTick>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d043      	beq.n	800350c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e24c      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fe9c 	bl	80021d8 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fe fe98 	bl	80021d8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e235      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b6:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	4939      	ldr	r1, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
 80034d6:	e01a      	b.n	800350e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d8:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a36      	ldr	r2, [pc, #216]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fe78 	bl	80021d8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe fe74 	bl	80021d8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e211      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1e0>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03c      	beq.n	8003594 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01c      	beq.n	800355c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003522:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003528:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe fe51 	bl	80021d8 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fe fe4d 	bl	80021d8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1ea      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ef      	beq.n	800353a <HAL_RCC_OscConfig+0x22e>
 800355a:	e01b      	b.n	8003594 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fe34 	bl	80021d8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fe30 	bl	80021d8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1cd      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ef      	bne.n	8003574 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ab 	beq.w	80036f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x2b4>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e005      	b.n	80035c2 <HAL_RCC_OscConfig+0x2b6>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	200009c4 	.word	0x200009c4
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	4bad      	ldr	r3, [pc, #692]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	4aac      	ldr	r2, [pc, #688]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
 80035d2:	4baa      	ldr	r3, [pc, #680]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035de:	2301      	movs	r3, #1
 80035e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e2:	4ba7      	ldr	r3, [pc, #668]	; (8003880 <HAL_RCC_OscConfig+0x574>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ee:	4ba4      	ldr	r3, [pc, #656]	; (8003880 <HAL_RCC_OscConfig+0x574>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4aa3      	ldr	r2, [pc, #652]	; (8003880 <HAL_RCC_OscConfig+0x574>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fa:	f7fe fded 	bl	80021d8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fe fde9 	bl	80021d8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e186      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003614:	4b9a      	ldr	r3, [pc, #616]	; (8003880 <HAL_RCC_OscConfig+0x574>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_RCC_OscConfig+0x32e>
 8003628:	4b94      	ldr	r3, [pc, #592]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	4a93      	ldr	r2, [pc, #588]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003638:	e024      	b.n	8003684 <HAL_RCC_OscConfig+0x378>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d110      	bne.n	8003664 <HAL_RCC_OscConfig+0x358>
 8003642:	4b8e      	ldr	r3, [pc, #568]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	4a8c      	ldr	r2, [pc, #560]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003652:	4b8a      	ldr	r3, [pc, #552]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	4a88      	ldr	r2, [pc, #544]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003662:	e00f      	b.n	8003684 <HAL_RCC_OscConfig+0x378>
 8003664:	4b85      	ldr	r3, [pc, #532]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a84      	ldr	r2, [pc, #528]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	4b81      	ldr	r3, [pc, #516]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a80      	ldr	r2, [pc, #512]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d016      	beq.n	80036ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe fda4 	bl	80021d8 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe fda0 	bl	80021d8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e13b      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036aa:	4b74      	ldr	r3, [pc, #464]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ed      	beq.n	8003694 <HAL_RCC_OscConfig+0x388>
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe fd8d 	bl	80021d8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe fd89 	bl	80021d8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e124      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d8:	4b68      	ldr	r3, [pc, #416]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ed      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	4a62      	ldr	r2, [pc, #392]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03c      	beq.n	800377e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800370c:	4b5b      	ldr	r3, [pc, #364]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800370e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003712:	4a5a      	ldr	r2, [pc, #360]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fd5c 	bl	80021d8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003724:	f7fe fd58 	bl	80021d8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0f5      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003736:	4b51      	ldr	r3, [pc, #324]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <HAL_RCC_OscConfig+0x418>
 8003744:	e01b      	b.n	800377e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003746:	4b4d      	ldr	r3, [pc, #308]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374c:	4a4b      	ldr	r2, [pc, #300]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fd3f 	bl	80021d8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800375e:	f7fe fd3b 	bl	80021d8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0d8      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003770:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1ef      	bne.n	800375e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80cc 	beq.w	8003920 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b0c      	cmp	r3, #12
 8003792:	f000 8086 	beq.w	80038a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d15a      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a36      	ldr	r2, [pc, #216]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80037a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe fd15 	bl	80021d8 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe fd11 	bl	80021d8 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0ae      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c4:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <HAL_RCC_OscConfig+0x570>)
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_RCC_OscConfig+0x578>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6a11      	ldr	r1, [r2, #32]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e0:	3a01      	subs	r2, #1
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037ea:	0212      	lsls	r2, r2, #8
 80037ec:	4311      	orrs	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037f2:	0852      	lsrs	r2, r2, #1
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0552      	lsls	r2, r2, #21
 80037f8:	4311      	orrs	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037fe:	0852      	lsrs	r2, r2, #1
 8003800:	3a01      	subs	r2, #1
 8003802:	0652      	lsls	r2, r2, #25
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800380a:	06d2      	lsls	r2, r2, #27
 800380c:	430a      	orrs	r2, r1
 800380e:	491b      	ldr	r1, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003810:	4313      	orrs	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800381a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fcd4 	bl	80021d8 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe fcd0 	bl	80021d8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e06d      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x528>
 8003852:	e065      	b.n	8003920 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_OscConfig+0x570>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a08      	ldr	r2, [pc, #32]	; (800387c <HAL_RCC_OscConfig+0x570>)
 800385a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe fcba 	bl	80021d8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003866:	e00f      	b.n	8003888 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fcb6 	bl	80021d8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d908      	bls.n	8003888 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e053      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40007000 	.word	0x40007000
 8003884:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_RCC_OscConfig+0x620>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e9      	bne.n	8003868 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_OscConfig+0x620>)
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	4924      	ldr	r1, [pc, #144]	; (800392c <HAL_RCC_OscConfig+0x620>)
 800389a:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_RCC_OscConfig+0x624>)
 800389c:	4013      	ands	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e03e      	b.n	8003920 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e039      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCC_OscConfig+0x620>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0203 	and.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d12c      	bne.n	800391c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	3b01      	subs	r3, #1
 80038ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d123      	bne.n	800391c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d11b      	bne.n	800391c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d113      	bne.n	800391c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	3b01      	subs	r3, #1
 8003902:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d109      	bne.n	800391c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	3b01      	subs	r3, #1
 8003916:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	feeefffc 	.word	0xfeeefffc

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e11e      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b91      	ldr	r3, [pc, #580]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d910      	bls.n	800397c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b8e      	ldr	r3, [pc, #568]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 020f 	bic.w	r2, r3, #15
 8003962:	498c      	ldr	r1, [pc, #560]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b8a      	ldr	r3, [pc, #552]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e106      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d073      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d129      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003990:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0f4      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039a0:	f000 f99e 	bl	8003ce0 <RCC_GetSysClockFreqFromPLLSource>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4a7c      	ldr	r2, [pc, #496]	; (8003b9c <HAL_RCC_ClockConfig+0x268>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d93f      	bls.n	8003a2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ae:	4b7a      	ldr	r3, [pc, #488]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d033      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d12f      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ce:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d6:	4a70      	ldr	r2, [pc, #448]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 80039d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e024      	b.n	8003a2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ec:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0c6      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fc:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0be      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a0c:	f000 f8ce 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4a61      	ldr	r2, [pc, #388]	; (8003b9c <HAL_RCC_ClockConfig+0x268>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d909      	bls.n	8003a2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a22:	4a5d      	ldr	r2, [pc, #372]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 0203 	bic.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4957      	ldr	r1, [pc, #348]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fe fbca 	bl	80021d8 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a48:	f7fe fbc6 	bl	80021d8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e095      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	4b4e      	ldr	r3, [pc, #312]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 020c 	and.w	r2, r3, #12
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1eb      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a42      	ldr	r2, [pc, #264]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4936      	ldr	r1, [pc, #216]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d21d      	bcs.n	8003b20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 020f 	bic.w	r2, r3, #15
 8003aec:	4929      	ldr	r1, [pc, #164]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003af4:	f7fe fb70 	bl	80021d8 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fe fb6c 	bl	80021d8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e03b      	b.n	8003b8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1ed      	bne.n	8003afc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4917      	ldr	r1, [pc, #92]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	490f      	ldr	r1, [pc, #60]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b5e:	f000 f825 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <HAL_RCC_ClockConfig+0x264>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490c      	ldr	r1, [pc, #48]	; (8003ba0 <HAL_RCC_ClockConfig+0x26c>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <HAL_RCC_ClockConfig+0x270>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x274>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fadc 	bl	8002140 <HAL_InitTick>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40022000 	.word	0x40022000
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	04c4b400 	.word	0x04c4b400
 8003ba0:	0800681c 	.word	0x0800681c
 8003ba4:	200009c0 	.word	0x200009c0
 8003ba8:	200009c4 	.word	0x200009c4

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d102      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e047      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d102      	bne.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bd0:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e03e      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d136      	bne.n	8003c50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0a:	68d2      	ldr	r2, [r2, #12]
 8003c0c:	0a12      	lsrs	r2, r2, #8
 8003c0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
      break;
 8003c18:	e00c      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	0a12      	lsrs	r2, r2, #8
 8003c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
      break;
 8003c32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0e5b      	lsrs	r3, r3, #25
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e001      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c54:	693b      	ldr	r3, [r7, #16]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	00f42400 	.word	0x00f42400
 8003c6c:	007a1200 	.word	0x007a1200

08003c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	200009c0 	.word	0x200009c0

08003c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c8c:	f7ff fff0 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	0800682c 	.word	0x0800682c

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cb8:	f7ff ffda 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4904      	ldr	r1, [pc, #16]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	0800682c 	.word	0x0800682c

08003ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d10c      	bne.n	8003d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0e:	68d2      	ldr	r2, [r2, #12]
 8003d10:	0a12      	lsrs	r2, r2, #8
 8003d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
    break;
 8003d1c:	e00c      	b.n	8003d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	0a12      	lsrs	r2, r2, #8
 8003d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    break;
 8003d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	0e5b      	lsrs	r3, r3, #25
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d52:	687b      	ldr	r3, [r7, #4]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40021000 	.word	0x40021000
 8003d64:	007a1200 	.word	0x007a1200
 8003d68:	00f42400 	.word	0x00f42400

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d74:	2300      	movs	r3, #0
 8003d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8098 	beq.w	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a3f      	ldr	r2, [pc, #252]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a39      	ldr	r2, [pc, #228]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fe fa09 	bl	80021d8 <HAL_GetTick>
 8003dc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc8:	e009      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fe fa05 	bl	80021d8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	74fb      	strb	r3, [r7, #19]
        break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ef      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d159      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe f9c5 	bl	80021d8 <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e50:	e00b      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe f9c1 	bl	80021d8 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d902      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	74fb      	strb	r3, [r7, #19]
            break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ec      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	74bb      	strb	r3, [r7, #18]
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea8:	7c7b      	ldrb	r3, [r7, #17]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4ba6      	ldr	r3, [pc, #664]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4aa5      	ldr	r2, [pc, #660]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec6:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 0203 	bic.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	499c      	ldr	r1, [pc, #624]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee8:	4b97      	ldr	r3, [pc, #604]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 020c 	bic.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4994      	ldr	r1, [pc, #592]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0a:	4b8f      	ldr	r3, [pc, #572]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	498b      	ldr	r1, [pc, #556]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4983      	ldr	r1, [pc, #524]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4e:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	497a      	ldr	r1, [pc, #488]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f70:	4b75      	ldr	r3, [pc, #468]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	4972      	ldr	r1, [pc, #456]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4969      	ldr	r1, [pc, #420]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb4:	4b64      	ldr	r3, [pc, #400]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4961      	ldr	r1, [pc, #388]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b5c      	ldr	r3, [pc, #368]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	4958      	ldr	r1, [pc, #352]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	4950      	ldr	r1, [pc, #320]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004030:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4942      	ldr	r1, [pc, #264]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4934      	ldr	r1, [pc, #208]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a0:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	4926      	ldr	r1, [pc, #152]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4918      	ldr	r1, [pc, #96]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d105      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a12      	ldr	r2, [pc, #72]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412e:	d105      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800413c:	7cbb      	ldrb	r3, [r7, #18]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e042      	b.n	80041e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fd fe47 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fb52 	bl	8004840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8b3 	bl	8004308 <UART_SetConfig>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e01b      	b.n	80041e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fbd1 	bl	8004984 <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	2b20      	cmp	r3, #32
 8004204:	d17b      	bne.n	80042fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_UART_Transmit+0x26>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e074      	b.n	8004300 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	; 0x21
 8004222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004226:	f7fd ffd7 	bl	80021d8 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d108      	bne.n	8004258 <HAL_UART_Transmit+0x6c>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e003      	b.n	8004260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004260:	e030      	b.n	80042c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fc33 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e03d      	b.n	8004300 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	3302      	adds	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	e007      	b.n	80042b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	3301      	adds	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1c8      	bne.n	8004262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fbfc 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e006      	b.n	8004300 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	b5b0      	push	{r4, r5, r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4baf      	ldr	r3, [pc, #700]	; (80045f0 <UART_SetConfig+0x2e8>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4aa4      	ldr	r2, [pc, #656]	; (80045f4 <UART_SetConfig+0x2ec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	4313      	orrs	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800437a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	430b      	orrs	r3, r1
 8004386:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f023 010f 	bic.w	r1, r3, #15
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a95      	ldr	r2, [pc, #596]	; (80045f8 <UART_SetConfig+0x2f0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d120      	bne.n	80043ea <UART_SetConfig+0xe2>
 80043a8:	4b94      	ldr	r3, [pc, #592]	; (80045fc <UART_SetConfig+0x2f4>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d816      	bhi.n	80043e4 <UART_SetConfig+0xdc>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0xb4>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043cd 	.word	0x080043cd
 80043c0:	080043d9 	.word	0x080043d9
 80043c4:	080043d3 	.word	0x080043d3
 80043c8:	080043df 	.word	0x080043df
 80043cc:	2301      	movs	r3, #1
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e0bc      	b.n	800454c <UART_SetConfig+0x244>
 80043d2:	2302      	movs	r3, #2
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e0b9      	b.n	800454c <UART_SetConfig+0x244>
 80043d8:	2304      	movs	r3, #4
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e0b6      	b.n	800454c <UART_SetConfig+0x244>
 80043de:	2308      	movs	r3, #8
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e0b3      	b.n	800454c <UART_SetConfig+0x244>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e0b0      	b.n	800454c <UART_SetConfig+0x244>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a84      	ldr	r2, [pc, #528]	; (8004600 <UART_SetConfig+0x2f8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d132      	bne.n	800445a <UART_SetConfig+0x152>
 80043f4:	4b81      	ldr	r3, [pc, #516]	; (80045fc <UART_SetConfig+0x2f4>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d828      	bhi.n	8004454 <UART_SetConfig+0x14c>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x100>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800443d 	.word	0x0800443d
 800440c:	08004455 	.word	0x08004455
 8004410:	08004455 	.word	0x08004455
 8004414:	08004455 	.word	0x08004455
 8004418:	08004449 	.word	0x08004449
 800441c:	08004455 	.word	0x08004455
 8004420:	08004455 	.word	0x08004455
 8004424:	08004455 	.word	0x08004455
 8004428:	08004443 	.word	0x08004443
 800442c:	08004455 	.word	0x08004455
 8004430:	08004455 	.word	0x08004455
 8004434:	08004455 	.word	0x08004455
 8004438:	0800444f 	.word	0x0800444f
 800443c:	2300      	movs	r3, #0
 800443e:	76fb      	strb	r3, [r7, #27]
 8004440:	e084      	b.n	800454c <UART_SetConfig+0x244>
 8004442:	2302      	movs	r3, #2
 8004444:	76fb      	strb	r3, [r7, #27]
 8004446:	e081      	b.n	800454c <UART_SetConfig+0x244>
 8004448:	2304      	movs	r3, #4
 800444a:	76fb      	strb	r3, [r7, #27]
 800444c:	e07e      	b.n	800454c <UART_SetConfig+0x244>
 800444e:	2308      	movs	r3, #8
 8004450:	76fb      	strb	r3, [r7, #27]
 8004452:	e07b      	b.n	800454c <UART_SetConfig+0x244>
 8004454:	2310      	movs	r3, #16
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e078      	b.n	800454c <UART_SetConfig+0x244>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a69      	ldr	r2, [pc, #420]	; (8004604 <UART_SetConfig+0x2fc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d120      	bne.n	80044a6 <UART_SetConfig+0x19e>
 8004464:	4b65      	ldr	r3, [pc, #404]	; (80045fc <UART_SetConfig+0x2f4>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800446e:	2b30      	cmp	r3, #48	; 0x30
 8004470:	d013      	beq.n	800449a <UART_SetConfig+0x192>
 8004472:	2b30      	cmp	r3, #48	; 0x30
 8004474:	d814      	bhi.n	80044a0 <UART_SetConfig+0x198>
 8004476:	2b20      	cmp	r3, #32
 8004478:	d009      	beq.n	800448e <UART_SetConfig+0x186>
 800447a:	2b20      	cmp	r3, #32
 800447c:	d810      	bhi.n	80044a0 <UART_SetConfig+0x198>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <UART_SetConfig+0x180>
 8004482:	2b10      	cmp	r3, #16
 8004484:	d006      	beq.n	8004494 <UART_SetConfig+0x18c>
 8004486:	e00b      	b.n	80044a0 <UART_SetConfig+0x198>
 8004488:	2300      	movs	r3, #0
 800448a:	76fb      	strb	r3, [r7, #27]
 800448c:	e05e      	b.n	800454c <UART_SetConfig+0x244>
 800448e:	2302      	movs	r3, #2
 8004490:	76fb      	strb	r3, [r7, #27]
 8004492:	e05b      	b.n	800454c <UART_SetConfig+0x244>
 8004494:	2304      	movs	r3, #4
 8004496:	76fb      	strb	r3, [r7, #27]
 8004498:	e058      	b.n	800454c <UART_SetConfig+0x244>
 800449a:	2308      	movs	r3, #8
 800449c:	76fb      	strb	r3, [r7, #27]
 800449e:	e055      	b.n	800454c <UART_SetConfig+0x244>
 80044a0:	2310      	movs	r3, #16
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e052      	b.n	800454c <UART_SetConfig+0x244>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a57      	ldr	r2, [pc, #348]	; (8004608 <UART_SetConfig+0x300>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d120      	bne.n	80044f2 <UART_SetConfig+0x1ea>
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <UART_SetConfig+0x2f4>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044ba:	2bc0      	cmp	r3, #192	; 0xc0
 80044bc:	d013      	beq.n	80044e6 <UART_SetConfig+0x1de>
 80044be:	2bc0      	cmp	r3, #192	; 0xc0
 80044c0:	d814      	bhi.n	80044ec <UART_SetConfig+0x1e4>
 80044c2:	2b80      	cmp	r3, #128	; 0x80
 80044c4:	d009      	beq.n	80044da <UART_SetConfig+0x1d2>
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d810      	bhi.n	80044ec <UART_SetConfig+0x1e4>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <UART_SetConfig+0x1cc>
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d006      	beq.n	80044e0 <UART_SetConfig+0x1d8>
 80044d2:	e00b      	b.n	80044ec <UART_SetConfig+0x1e4>
 80044d4:	2300      	movs	r3, #0
 80044d6:	76fb      	strb	r3, [r7, #27]
 80044d8:	e038      	b.n	800454c <UART_SetConfig+0x244>
 80044da:	2302      	movs	r3, #2
 80044dc:	76fb      	strb	r3, [r7, #27]
 80044de:	e035      	b.n	800454c <UART_SetConfig+0x244>
 80044e0:	2304      	movs	r3, #4
 80044e2:	76fb      	strb	r3, [r7, #27]
 80044e4:	e032      	b.n	800454c <UART_SetConfig+0x244>
 80044e6:	2308      	movs	r3, #8
 80044e8:	76fb      	strb	r3, [r7, #27]
 80044ea:	e02f      	b.n	800454c <UART_SetConfig+0x244>
 80044ec:	2310      	movs	r3, #16
 80044ee:	76fb      	strb	r3, [r7, #27]
 80044f0:	e02c      	b.n	800454c <UART_SetConfig+0x244>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <UART_SetConfig+0x2ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d125      	bne.n	8004548 <UART_SetConfig+0x240>
 80044fc:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <UART_SetConfig+0x2f4>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800450a:	d017      	beq.n	800453c <UART_SetConfig+0x234>
 800450c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004510:	d817      	bhi.n	8004542 <UART_SetConfig+0x23a>
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	d00b      	beq.n	8004530 <UART_SetConfig+0x228>
 8004518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451c:	d811      	bhi.n	8004542 <UART_SetConfig+0x23a>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <UART_SetConfig+0x222>
 8004522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004526:	d006      	beq.n	8004536 <UART_SetConfig+0x22e>
 8004528:	e00b      	b.n	8004542 <UART_SetConfig+0x23a>
 800452a:	2300      	movs	r3, #0
 800452c:	76fb      	strb	r3, [r7, #27]
 800452e:	e00d      	b.n	800454c <UART_SetConfig+0x244>
 8004530:	2302      	movs	r3, #2
 8004532:	76fb      	strb	r3, [r7, #27]
 8004534:	e00a      	b.n	800454c <UART_SetConfig+0x244>
 8004536:	2304      	movs	r3, #4
 8004538:	76fb      	strb	r3, [r7, #27]
 800453a:	e007      	b.n	800454c <UART_SetConfig+0x244>
 800453c:	2308      	movs	r3, #8
 800453e:	76fb      	strb	r3, [r7, #27]
 8004540:	e004      	b.n	800454c <UART_SetConfig+0x244>
 8004542:	2310      	movs	r3, #16
 8004544:	76fb      	strb	r3, [r7, #27]
 8004546:	e001      	b.n	800454c <UART_SetConfig+0x244>
 8004548:	2310      	movs	r3, #16
 800454a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <UART_SetConfig+0x2ec>)
 8004552:	4293      	cmp	r3, r2
 8004554:	f040 809e 	bne.w	8004694 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004558:	7efb      	ldrb	r3, [r7, #27]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d823      	bhi.n	80045a6 <UART_SetConfig+0x29e>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x25c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004589 	.word	0x08004589
 8004568:	080045a7 	.word	0x080045a7
 800456c:	08004591 	.word	0x08004591
 8004570:	080045a7 	.word	0x080045a7
 8004574:	08004597 	.word	0x08004597
 8004578:	080045a7 	.word	0x080045a7
 800457c:	080045a7 	.word	0x080045a7
 8004580:	080045a7 	.word	0x080045a7
 8004584:	0800459f 	.word	0x0800459f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7ff fb7e 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 800458c:	6178      	str	r0, [r7, #20]
        break;
 800458e:	e00f      	b.n	80045b0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004590:	4b1e      	ldr	r3, [pc, #120]	; (800460c <UART_SetConfig+0x304>)
 8004592:	617b      	str	r3, [r7, #20]
        break;
 8004594:	e00c      	b.n	80045b0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004596:	f7ff fb09 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 800459a:	6178      	str	r0, [r7, #20]
        break;
 800459c:	e008      	b.n	80045b0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	617b      	str	r3, [r7, #20]
        break;
 80045a4:	e004      	b.n	80045b0 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	76bb      	strb	r3, [r7, #26]
        break;
 80045ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 812c 	beq.w	8004810 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <UART_SetConfig+0x308>)
 80045be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045c2:	461a      	mov	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d305      	bcc.n	80045e8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d915      	bls.n	8004614 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	76bb      	strb	r3, [r7, #26]
 80045ec:	e110      	b.n	8004810 <UART_SetConfig+0x508>
 80045ee:	bf00      	nop
 80045f0:	cfff69f3 	.word	0xcfff69f3
 80045f4:	40008000 	.word	0x40008000
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40021000 	.word	0x40021000
 8004600:	40004400 	.word	0x40004400
 8004604:	40004800 	.word	0x40004800
 8004608:	40004c00 	.word	0x40004c00
 800460c:	00f42400 	.word	0x00f42400
 8004610:	08006834 	.word	0x08006834
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4618      	mov	r0, r3
 8004618:	f04f 0100 	mov.w	r1, #0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	4a85      	ldr	r2, [pc, #532]	; (8004838 <UART_SetConfig+0x530>)
 8004622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004626:	b29a      	uxth	r2, r3
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f7fb fe98 	bl	8000360 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	020b      	lsls	r3, r1, #8
 8004642:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004646:	0202      	lsls	r2, r0, #8
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	6849      	ldr	r1, [r1, #4]
 800464c:	0849      	lsrs	r1, r1, #1
 800464e:	4608      	mov	r0, r1
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	1814      	adds	r4, r2, r0
 8004656:	eb43 0501 	adc.w	r5, r3, r1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	f7fb fe7a 	bl	8000360 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4613      	mov	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467a:	d308      	bcc.n	800468e <UART_SetConfig+0x386>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004682:	d204      	bcs.n	800468e <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e0c0      	b.n	8004810 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	76bb      	strb	r3, [r7, #26]
 8004692:	e0bd      	b.n	8004810 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d164      	bne.n	8004768 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800469e:	7efb      	ldrb	r3, [r7, #27]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d828      	bhi.n	80046f6 <UART_SetConfig+0x3ee>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0x3a4>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	080046f7 	.word	0x080046f7
 80046bc:	080046e7 	.word	0x080046e7
 80046c0:	080046f7 	.word	0x080046f7
 80046c4:	080046f7 	.word	0x080046f7
 80046c8:	080046f7 	.word	0x080046f7
 80046cc:	080046ef 	.word	0x080046ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d0:	f7ff fada 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 80046d4:	6178      	str	r0, [r7, #20]
        break;
 80046d6:	e013      	b.n	8004700 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d8:	f7ff faec 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 80046dc:	6178      	str	r0, [r7, #20]
        break;
 80046de:	e00f      	b.n	8004700 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e0:	4b56      	ldr	r3, [pc, #344]	; (800483c <UART_SetConfig+0x534>)
 80046e2:	617b      	str	r3, [r7, #20]
        break;
 80046e4:	e00c      	b.n	8004700 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e6:	f7ff fa61 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 80046ea:	6178      	str	r0, [r7, #20]
        break;
 80046ec:	e008      	b.n	8004700 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f2:	617b      	str	r3, [r7, #20]
        break;
 80046f4:	e004      	b.n	8004700 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	76bb      	strb	r3, [r7, #26]
        break;
 80046fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8084 	beq.w	8004810 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <UART_SetConfig+0x530>)
 800470e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004712:	461a      	mov	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	fbb3 f3f2 	udiv	r3, r3, r2
 800471a:	005a      	lsls	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	441a      	add	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b0f      	cmp	r3, #15
 8004732:	d916      	bls.n	8004762 <UART_SetConfig+0x45a>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d212      	bcs.n	8004762 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	b29b      	uxth	r3, r3
 8004740:	f023 030f 	bic.w	r3, r3, #15
 8004744:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	b29b      	uxth	r3, r3
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	b29a      	uxth	r2, r3
 8004752:	89fb      	ldrh	r3, [r7, #14]
 8004754:	4313      	orrs	r3, r2
 8004756:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	89fa      	ldrh	r2, [r7, #14]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e056      	b.n	8004810 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	76bb      	strb	r3, [r7, #26]
 8004766:	e053      	b.n	8004810 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004768:	7efb      	ldrb	r3, [r7, #27]
 800476a:	2b08      	cmp	r3, #8
 800476c:	d827      	bhi.n	80047be <UART_SetConfig+0x4b6>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x46c>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004799 	.word	0x08004799
 8004778:	080047a1 	.word	0x080047a1
 800477c:	080047a9 	.word	0x080047a9
 8004780:	080047bf 	.word	0x080047bf
 8004784:	080047af 	.word	0x080047af
 8004788:	080047bf 	.word	0x080047bf
 800478c:	080047bf 	.word	0x080047bf
 8004790:	080047bf 	.word	0x080047bf
 8004794:	080047b7 	.word	0x080047b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7ff fa76 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 800479c:	6178      	str	r0, [r7, #20]
        break;
 800479e:	e013      	b.n	80047c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a0:	f7ff fa88 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 80047a4:	6178      	str	r0, [r7, #20]
        break;
 80047a6:	e00f      	b.n	80047c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <UART_SetConfig+0x534>)
 80047aa:	617b      	str	r3, [r7, #20]
        break;
 80047ac:	e00c      	b.n	80047c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ae:	f7ff f9fd 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 80047b2:	6178      	str	r0, [r7, #20]
        break;
 80047b4:	e008      	b.n	80047c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	617b      	str	r3, [r7, #20]
        break;
 80047bc:	e004      	b.n	80047c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	76bb      	strb	r3, [r7, #26]
        break;
 80047c6:	bf00      	nop
    }

    if (pclk != 0U)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <UART_SetConfig+0x530>)
 80047d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d8:	461a      	mov	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	441a      	add	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d909      	bls.n	800480c <UART_SetConfig+0x504>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d205      	bcs.n	800480c <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	e001      	b.n	8004810 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800482c:	7ebb      	ldrb	r3, [r7, #26]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bdb0      	pop	{r4, r5, r7, pc}
 8004836:	bf00      	nop
 8004838:	08006834 	.word	0x08006834
 800483c:	00f42400 	.word	0x00f42400

08004840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01a      	beq.n	8004956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493e:	d10a      	bne.n	8004956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b098      	sub	sp, #96	; 0x60
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004994:	f7fd fc20 	bl	80021d8 <HAL_GetTick>
 8004998:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d12f      	bne.n	8004a08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b0:	2200      	movs	r2, #0
 80049b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f88e 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d022      	beq.n	8004a08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e0:	647b      	str	r3, [r7, #68]	; 0x44
 80049e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e063      	b.n	8004ad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d149      	bne.n	8004aaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f857 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d03c      	beq.n	8004aaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a82:	61fa      	str	r2, [r7, #28]
 8004a84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e012      	b.n	8004ad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3758      	adds	r7, #88	; 0x58
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae8:	e04f      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d04b      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fd fb71 	bl	80021d8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e04e      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d037      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d034      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d031      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d110      	bne.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f838 	bl	8004bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2208      	movs	r2, #8
 8004b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e029      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b64:	d111      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f81e 	bl	8004bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e00f      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d0a0      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b095      	sub	sp, #84	; 0x54
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e6      	bne.n	8004bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d118      	bne.n	8004c5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 0310 	bic.w	r3, r3, #16
 8004c40:	647b      	str	r3, [r7, #68]	; 0x44
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	613b      	str	r3, [r7, #16]
   return(result);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e6      	bne.n	8004c2c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c72:	bf00      	nop
 8004c74:	3754      	adds	r7, #84	; 0x54
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e027      	b.n	8004ce4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2224      	movs	r2, #36	; 0x24
 8004ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e02d      	b.n	8004d64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	; 0x24
 8004d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f84f 	bl	8004de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e02d      	b.n	8004de0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2224      	movs	r2, #36	; 0x24
 8004d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f811 	bl	8004de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e08:	e031      	b.n	8004e6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e0e:	2308      	movs	r3, #8
 8004e10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	0e5b      	lsrs	r3, r3, #25
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	0f5b      	lsrs	r3, r3, #29
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e32:	7bbb      	ldrb	r3, [r7, #14]
 8004e34:	7b3a      	ldrb	r2, [r7, #12]
 8004e36:	4911      	ldr	r1, [pc, #68]	; (8004e7c <UARTEx_SetNbDataToProcess+0x94>)
 8004e38:	5c8a      	ldrb	r2, [r1, r2]
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e3e:	7b3a      	ldrb	r2, [r7, #12]
 8004e40:	490f      	ldr	r1, [pc, #60]	; (8004e80 <UARTEx_SetNbDataToProcess+0x98>)
 8004e42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	7b7a      	ldrb	r2, [r7, #13]
 8004e54:	4909      	ldr	r1, [pc, #36]	; (8004e7c <UARTEx_SetNbDataToProcess+0x94>)
 8004e56:	5c8a      	ldrb	r2, [r1, r2]
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e5c:	7b7a      	ldrb	r2, [r7, #13]
 8004e5e:	4908      	ldr	r1, [pc, #32]	; (8004e80 <UARTEx_SetNbDataToProcess+0x98>)
 8004e60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	0800684c 	.word	0x0800684c
 8004e80:	08006854 	.word	0x08006854

08004e84 <__errno>:
 8004e84:	4b01      	ldr	r3, [pc, #4]	; (8004e8c <__errno+0x8>)
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	200009cc 	.word	0x200009cc

08004e90 <__libc_init_array>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	4d0d      	ldr	r5, [pc, #52]	; (8004ec8 <__libc_init_array+0x38>)
 8004e94:	4c0d      	ldr	r4, [pc, #52]	; (8004ecc <__libc_init_array+0x3c>)
 8004e96:	1b64      	subs	r4, r4, r5
 8004e98:	10a4      	asrs	r4, r4, #2
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	42a6      	cmp	r6, r4
 8004e9e:	d109      	bne.n	8004eb4 <__libc_init_array+0x24>
 8004ea0:	4d0b      	ldr	r5, [pc, #44]	; (8004ed0 <__libc_init_array+0x40>)
 8004ea2:	4c0c      	ldr	r4, [pc, #48]	; (8004ed4 <__libc_init_array+0x44>)
 8004ea4:	f001 f84a 	bl	8005f3c <_init>
 8004ea8:	1b64      	subs	r4, r4, r5
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	2600      	movs	r6, #0
 8004eae:	42a6      	cmp	r6, r4
 8004eb0:	d105      	bne.n	8004ebe <__libc_init_array+0x2e>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb8:	4798      	blx	r3
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7ee      	b.n	8004e9c <__libc_init_array+0xc>
 8004ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec2:	4798      	blx	r3
 8004ec4:	3601      	adds	r6, #1
 8004ec6:	e7f2      	b.n	8004eae <__libc_init_array+0x1e>
 8004ec8:	080068fc 	.word	0x080068fc
 8004ecc:	080068fc 	.word	0x080068fc
 8004ed0:	080068fc 	.word	0x080068fc
 8004ed4:	08006900 	.word	0x08006900

08004ed8 <memset>:
 8004ed8:	4402      	add	r2, r0
 8004eda:	4603      	mov	r3, r0
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <memset+0xa>
 8004ee0:	4770      	bx	lr
 8004ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee6:	e7f9      	b.n	8004edc <memset+0x4>

08004ee8 <iprintf>:
 8004ee8:	b40f      	push	{r0, r1, r2, r3}
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <iprintf+0x2c>)
 8004eec:	b513      	push	{r0, r1, r4, lr}
 8004eee:	681c      	ldr	r4, [r3, #0]
 8004ef0:	b124      	cbz	r4, 8004efc <iprintf+0x14>
 8004ef2:	69a3      	ldr	r3, [r4, #24]
 8004ef4:	b913      	cbnz	r3, 8004efc <iprintf+0x14>
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 fa74 	bl	80053e4 <__sinit>
 8004efc:	ab05      	add	r3, sp, #20
 8004efe:	9a04      	ldr	r2, [sp, #16]
 8004f00:	68a1      	ldr	r1, [r4, #8]
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fc45 	bl	8005794 <_vfiprintf_r>
 8004f0a:	b002      	add	sp, #8
 8004f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f10:	b004      	add	sp, #16
 8004f12:	4770      	bx	lr
 8004f14:	200009cc 	.word	0x200009cc

08004f18 <putchar>:
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <putchar+0x28>)
 8004f1a:	b513      	push	{r0, r1, r4, lr}
 8004f1c:	681c      	ldr	r4, [r3, #0]
 8004f1e:	4601      	mov	r1, r0
 8004f20:	b134      	cbz	r4, 8004f30 <putchar+0x18>
 8004f22:	69a3      	ldr	r3, [r4, #24]
 8004f24:	b923      	cbnz	r3, 8004f30 <putchar+0x18>
 8004f26:	9001      	str	r0, [sp, #4]
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 fa5b 	bl	80053e4 <__sinit>
 8004f2e:	9901      	ldr	r1, [sp, #4]
 8004f30:	68a2      	ldr	r2, [r4, #8]
 8004f32:	4620      	mov	r0, r4
 8004f34:	b002      	add	sp, #8
 8004f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3a:	f000 beef 	b.w	8005d1c <_putc_r>
 8004f3e:	bf00      	nop
 8004f40:	200009cc 	.word	0x200009cc

08004f44 <_puts_r>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	460e      	mov	r6, r1
 8004f48:	4605      	mov	r5, r0
 8004f4a:	b118      	cbz	r0, 8004f54 <_puts_r+0x10>
 8004f4c:	6983      	ldr	r3, [r0, #24]
 8004f4e:	b90b      	cbnz	r3, 8004f54 <_puts_r+0x10>
 8004f50:	f000 fa48 	bl	80053e4 <__sinit>
 8004f54:	69ab      	ldr	r3, [r5, #24]
 8004f56:	68ac      	ldr	r4, [r5, #8]
 8004f58:	b913      	cbnz	r3, 8004f60 <_puts_r+0x1c>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 fa42 	bl	80053e4 <__sinit>
 8004f60:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <_puts_r+0xd0>)
 8004f62:	429c      	cmp	r4, r3
 8004f64:	d120      	bne.n	8004fa8 <_puts_r+0x64>
 8004f66:	686c      	ldr	r4, [r5, #4]
 8004f68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f6a:	07db      	lsls	r3, r3, #31
 8004f6c:	d405      	bmi.n	8004f7a <_puts_r+0x36>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	0598      	lsls	r0, r3, #22
 8004f72:	d402      	bmi.n	8004f7a <_puts_r+0x36>
 8004f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f76:	f000 fad3 	bl	8005520 <__retarget_lock_acquire_recursive>
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	0719      	lsls	r1, r3, #28
 8004f7e:	d51d      	bpl.n	8004fbc <_puts_r+0x78>
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	b1db      	cbz	r3, 8004fbc <_puts_r+0x78>
 8004f84:	3e01      	subs	r6, #1
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	bb39      	cbnz	r1, 8004fe2 <_puts_r+0x9e>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da38      	bge.n	8005008 <_puts_r+0xc4>
 8004f96:	4622      	mov	r2, r4
 8004f98:	210a      	movs	r1, #10
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 f848 	bl	8005030 <__swbuf_r>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d011      	beq.n	8004fc8 <_puts_r+0x84>
 8004fa4:	250a      	movs	r5, #10
 8004fa6:	e011      	b.n	8004fcc <_puts_r+0x88>
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <_puts_r+0xd4>)
 8004faa:	429c      	cmp	r4, r3
 8004fac:	d101      	bne.n	8004fb2 <_puts_r+0x6e>
 8004fae:	68ac      	ldr	r4, [r5, #8]
 8004fb0:	e7da      	b.n	8004f68 <_puts_r+0x24>
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <_puts_r+0xd8>)
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	bf08      	it	eq
 8004fb8:	68ec      	ldreq	r4, [r5, #12]
 8004fba:	e7d5      	b.n	8004f68 <_puts_r+0x24>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 f888 	bl	80050d4 <__swsetup_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d0dd      	beq.n	8004f84 <_puts_r+0x40>
 8004fc8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fce:	07da      	lsls	r2, r3, #31
 8004fd0:	d405      	bmi.n	8004fde <_puts_r+0x9a>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	059b      	lsls	r3, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_puts_r+0x9a>
 8004fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fda:	f000 faa2 	bl	8005522 <__retarget_lock_release_recursive>
 8004fde:	4628      	mov	r0, r5
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da04      	bge.n	8004ff0 <_puts_r+0xac>
 8004fe6:	69a2      	ldr	r2, [r4, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	dc06      	bgt.n	8004ffa <_puts_r+0xb6>
 8004fec:	290a      	cmp	r1, #10
 8004fee:	d004      	beq.n	8004ffa <_puts_r+0xb6>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	6022      	str	r2, [r4, #0]
 8004ff6:	7019      	strb	r1, [r3, #0]
 8004ff8:	e7c5      	b.n	8004f86 <_puts_r+0x42>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 f817 	bl	8005030 <__swbuf_r>
 8005002:	3001      	adds	r0, #1
 8005004:	d1bf      	bne.n	8004f86 <_puts_r+0x42>
 8005006:	e7df      	b.n	8004fc8 <_puts_r+0x84>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	250a      	movs	r5, #10
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	6022      	str	r2, [r4, #0]
 8005010:	701d      	strb	r5, [r3, #0]
 8005012:	e7db      	b.n	8004fcc <_puts_r+0x88>
 8005014:	08006880 	.word	0x08006880
 8005018:	080068a0 	.word	0x080068a0
 800501c:	08006860 	.word	0x08006860

08005020 <puts>:
 8005020:	4b02      	ldr	r3, [pc, #8]	; (800502c <puts+0xc>)
 8005022:	4601      	mov	r1, r0
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	f7ff bf8d 	b.w	8004f44 <_puts_r>
 800502a:	bf00      	nop
 800502c:	200009cc 	.word	0x200009cc

08005030 <__swbuf_r>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	460e      	mov	r6, r1
 8005034:	4614      	mov	r4, r2
 8005036:	4605      	mov	r5, r0
 8005038:	b118      	cbz	r0, 8005042 <__swbuf_r+0x12>
 800503a:	6983      	ldr	r3, [r0, #24]
 800503c:	b90b      	cbnz	r3, 8005042 <__swbuf_r+0x12>
 800503e:	f000 f9d1 	bl	80053e4 <__sinit>
 8005042:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <__swbuf_r+0x98>)
 8005044:	429c      	cmp	r4, r3
 8005046:	d12b      	bne.n	80050a0 <__swbuf_r+0x70>
 8005048:	686c      	ldr	r4, [r5, #4]
 800504a:	69a3      	ldr	r3, [r4, #24]
 800504c:	60a3      	str	r3, [r4, #8]
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	071a      	lsls	r2, r3, #28
 8005052:	d52f      	bpl.n	80050b4 <__swbuf_r+0x84>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	b36b      	cbz	r3, 80050b4 <__swbuf_r+0x84>
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	1ac0      	subs	r0, r0, r3
 800505e:	6963      	ldr	r3, [r4, #20]
 8005060:	b2f6      	uxtb	r6, r6
 8005062:	4283      	cmp	r3, r0
 8005064:	4637      	mov	r7, r6
 8005066:	dc04      	bgt.n	8005072 <__swbuf_r+0x42>
 8005068:	4621      	mov	r1, r4
 800506a:	4628      	mov	r0, r5
 800506c:	f000 f926 	bl	80052bc <_fflush_r>
 8005070:	bb30      	cbnz	r0, 80050c0 <__swbuf_r+0x90>
 8005072:	68a3      	ldr	r3, [r4, #8]
 8005074:	3b01      	subs	r3, #1
 8005076:	60a3      	str	r3, [r4, #8]
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	6022      	str	r2, [r4, #0]
 800507e:	701e      	strb	r6, [r3, #0]
 8005080:	6963      	ldr	r3, [r4, #20]
 8005082:	3001      	adds	r0, #1
 8005084:	4283      	cmp	r3, r0
 8005086:	d004      	beq.n	8005092 <__swbuf_r+0x62>
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	07db      	lsls	r3, r3, #31
 800508c:	d506      	bpl.n	800509c <__swbuf_r+0x6c>
 800508e:	2e0a      	cmp	r6, #10
 8005090:	d104      	bne.n	800509c <__swbuf_r+0x6c>
 8005092:	4621      	mov	r1, r4
 8005094:	4628      	mov	r0, r5
 8005096:	f000 f911 	bl	80052bc <_fflush_r>
 800509a:	b988      	cbnz	r0, 80050c0 <__swbuf_r+0x90>
 800509c:	4638      	mov	r0, r7
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <__swbuf_r+0x9c>)
 80050a2:	429c      	cmp	r4, r3
 80050a4:	d101      	bne.n	80050aa <__swbuf_r+0x7a>
 80050a6:	68ac      	ldr	r4, [r5, #8]
 80050a8:	e7cf      	b.n	800504a <__swbuf_r+0x1a>
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <__swbuf_r+0xa0>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	bf08      	it	eq
 80050b0:	68ec      	ldreq	r4, [r5, #12]
 80050b2:	e7ca      	b.n	800504a <__swbuf_r+0x1a>
 80050b4:	4621      	mov	r1, r4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 f80c 	bl	80050d4 <__swsetup_r>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d0cb      	beq.n	8005058 <__swbuf_r+0x28>
 80050c0:	f04f 37ff 	mov.w	r7, #4294967295
 80050c4:	e7ea      	b.n	800509c <__swbuf_r+0x6c>
 80050c6:	bf00      	nop
 80050c8:	08006880 	.word	0x08006880
 80050cc:	080068a0 	.word	0x080068a0
 80050d0:	08006860 	.word	0x08006860

080050d4 <__swsetup_r>:
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <__swsetup_r+0xcc>)
 80050d6:	b570      	push	{r4, r5, r6, lr}
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	4606      	mov	r6, r0
 80050dc:	460c      	mov	r4, r1
 80050de:	b125      	cbz	r5, 80050ea <__swsetup_r+0x16>
 80050e0:	69ab      	ldr	r3, [r5, #24]
 80050e2:	b913      	cbnz	r3, 80050ea <__swsetup_r+0x16>
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f97d 	bl	80053e4 <__sinit>
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <__swsetup_r+0xd0>)
 80050ec:	429c      	cmp	r4, r3
 80050ee:	d10f      	bne.n	8005110 <__swsetup_r+0x3c>
 80050f0:	686c      	ldr	r4, [r5, #4]
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050f8:	0719      	lsls	r1, r3, #28
 80050fa:	d42c      	bmi.n	8005156 <__swsetup_r+0x82>
 80050fc:	06dd      	lsls	r5, r3, #27
 80050fe:	d411      	bmi.n	8005124 <__swsetup_r+0x50>
 8005100:	2309      	movs	r3, #9
 8005102:	6033      	str	r3, [r6, #0]
 8005104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	f04f 30ff 	mov.w	r0, #4294967295
 800510e:	e03e      	b.n	800518e <__swsetup_r+0xba>
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <__swsetup_r+0xd4>)
 8005112:	429c      	cmp	r4, r3
 8005114:	d101      	bne.n	800511a <__swsetup_r+0x46>
 8005116:	68ac      	ldr	r4, [r5, #8]
 8005118:	e7eb      	b.n	80050f2 <__swsetup_r+0x1e>
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <__swsetup_r+0xd8>)
 800511c:	429c      	cmp	r4, r3
 800511e:	bf08      	it	eq
 8005120:	68ec      	ldreq	r4, [r5, #12]
 8005122:	e7e6      	b.n	80050f2 <__swsetup_r+0x1e>
 8005124:	0758      	lsls	r0, r3, #29
 8005126:	d512      	bpl.n	800514e <__swsetup_r+0x7a>
 8005128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800512a:	b141      	cbz	r1, 800513e <__swsetup_r+0x6a>
 800512c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__swsetup_r+0x66>
 8005134:	4630      	mov	r0, r6
 8005136:	f000 fa59 	bl	80055ec <_free_r>
 800513a:	2300      	movs	r3, #0
 800513c:	6363      	str	r3, [r4, #52]	; 0x34
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005144:	81a3      	strh	r3, [r4, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	b94b      	cbnz	r3, 800516e <__swsetup_r+0x9a>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005164:	d003      	beq.n	800516e <__swsetup_r+0x9a>
 8005166:	4621      	mov	r1, r4
 8005168:	4630      	mov	r0, r6
 800516a:	f000 f9ff 	bl	800556c <__smakebuf_r>
 800516e:	89a0      	ldrh	r0, [r4, #12]
 8005170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005174:	f010 0301 	ands.w	r3, r0, #1
 8005178:	d00a      	beq.n	8005190 <__swsetup_r+0xbc>
 800517a:	2300      	movs	r3, #0
 800517c:	60a3      	str	r3, [r4, #8]
 800517e:	6963      	ldr	r3, [r4, #20]
 8005180:	425b      	negs	r3, r3
 8005182:	61a3      	str	r3, [r4, #24]
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	b943      	cbnz	r3, 800519a <__swsetup_r+0xc6>
 8005188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800518c:	d1ba      	bne.n	8005104 <__swsetup_r+0x30>
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	0781      	lsls	r1, r0, #30
 8005192:	bf58      	it	pl
 8005194:	6963      	ldrpl	r3, [r4, #20]
 8005196:	60a3      	str	r3, [r4, #8]
 8005198:	e7f4      	b.n	8005184 <__swsetup_r+0xb0>
 800519a:	2000      	movs	r0, #0
 800519c:	e7f7      	b.n	800518e <__swsetup_r+0xba>
 800519e:	bf00      	nop
 80051a0:	200009cc 	.word	0x200009cc
 80051a4:	08006880 	.word	0x08006880
 80051a8:	080068a0 	.word	0x080068a0
 80051ac:	08006860 	.word	0x08006860

080051b0 <__sflush_r>:
 80051b0:	898a      	ldrh	r2, [r1, #12]
 80051b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b6:	4605      	mov	r5, r0
 80051b8:	0710      	lsls	r0, r2, #28
 80051ba:	460c      	mov	r4, r1
 80051bc:	d458      	bmi.n	8005270 <__sflush_r+0xc0>
 80051be:	684b      	ldr	r3, [r1, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dc05      	bgt.n	80051d0 <__sflush_r+0x20>
 80051c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	dc02      	bgt.n	80051d0 <__sflush_r+0x20>
 80051ca:	2000      	movs	r0, #0
 80051cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d0f9      	beq.n	80051ca <__sflush_r+0x1a>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051dc:	682f      	ldr	r7, [r5, #0]
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	d032      	beq.n	8005248 <__sflush_r+0x98>
 80051e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	075a      	lsls	r2, r3, #29
 80051e8:	d505      	bpl.n	80051f6 <__sflush_r+0x46>
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	1ac0      	subs	r0, r0, r3
 80051ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051f0:	b10b      	cbz	r3, 80051f6 <__sflush_r+0x46>
 80051f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051f4:	1ac0      	subs	r0, r0, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	4602      	mov	r2, r0
 80051fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051fc:	6a21      	ldr	r1, [r4, #32]
 80051fe:	4628      	mov	r0, r5
 8005200:	47b0      	blx	r6
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	d106      	bne.n	8005216 <__sflush_r+0x66>
 8005208:	6829      	ldr	r1, [r5, #0]
 800520a:	291d      	cmp	r1, #29
 800520c:	d82c      	bhi.n	8005268 <__sflush_r+0xb8>
 800520e:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <__sflush_r+0x108>)
 8005210:	40ca      	lsrs	r2, r1
 8005212:	07d6      	lsls	r6, r2, #31
 8005214:	d528      	bpl.n	8005268 <__sflush_r+0xb8>
 8005216:	2200      	movs	r2, #0
 8005218:	6062      	str	r2, [r4, #4]
 800521a:	04d9      	lsls	r1, r3, #19
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	d504      	bpl.n	800522c <__sflush_r+0x7c>
 8005222:	1c42      	adds	r2, r0, #1
 8005224:	d101      	bne.n	800522a <__sflush_r+0x7a>
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	b903      	cbnz	r3, 800522c <__sflush_r+0x7c>
 800522a:	6560      	str	r0, [r4, #84]	; 0x54
 800522c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522e:	602f      	str	r7, [r5, #0]
 8005230:	2900      	cmp	r1, #0
 8005232:	d0ca      	beq.n	80051ca <__sflush_r+0x1a>
 8005234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005238:	4299      	cmp	r1, r3
 800523a:	d002      	beq.n	8005242 <__sflush_r+0x92>
 800523c:	4628      	mov	r0, r5
 800523e:	f000 f9d5 	bl	80055ec <_free_r>
 8005242:	2000      	movs	r0, #0
 8005244:	6360      	str	r0, [r4, #52]	; 0x34
 8005246:	e7c1      	b.n	80051cc <__sflush_r+0x1c>
 8005248:	6a21      	ldr	r1, [r4, #32]
 800524a:	2301      	movs	r3, #1
 800524c:	4628      	mov	r0, r5
 800524e:	47b0      	blx	r6
 8005250:	1c41      	adds	r1, r0, #1
 8005252:	d1c7      	bne.n	80051e4 <__sflush_r+0x34>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0c4      	beq.n	80051e4 <__sflush_r+0x34>
 800525a:	2b1d      	cmp	r3, #29
 800525c:	d001      	beq.n	8005262 <__sflush_r+0xb2>
 800525e:	2b16      	cmp	r3, #22
 8005260:	d101      	bne.n	8005266 <__sflush_r+0xb6>
 8005262:	602f      	str	r7, [r5, #0]
 8005264:	e7b1      	b.n	80051ca <__sflush_r+0x1a>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800526c:	81a3      	strh	r3, [r4, #12]
 800526e:	e7ad      	b.n	80051cc <__sflush_r+0x1c>
 8005270:	690f      	ldr	r7, [r1, #16]
 8005272:	2f00      	cmp	r7, #0
 8005274:	d0a9      	beq.n	80051ca <__sflush_r+0x1a>
 8005276:	0793      	lsls	r3, r2, #30
 8005278:	680e      	ldr	r6, [r1, #0]
 800527a:	bf08      	it	eq
 800527c:	694b      	ldreq	r3, [r1, #20]
 800527e:	600f      	str	r7, [r1, #0]
 8005280:	bf18      	it	ne
 8005282:	2300      	movne	r3, #0
 8005284:	eba6 0807 	sub.w	r8, r6, r7
 8005288:	608b      	str	r3, [r1, #8]
 800528a:	f1b8 0f00 	cmp.w	r8, #0
 800528e:	dd9c      	ble.n	80051ca <__sflush_r+0x1a>
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005294:	4643      	mov	r3, r8
 8005296:	463a      	mov	r2, r7
 8005298:	4628      	mov	r0, r5
 800529a:	47b0      	blx	r6
 800529c:	2800      	cmp	r0, #0
 800529e:	dc06      	bgt.n	80052ae <__sflush_r+0xfe>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	e78e      	b.n	80051cc <__sflush_r+0x1c>
 80052ae:	4407      	add	r7, r0
 80052b0:	eba8 0800 	sub.w	r8, r8, r0
 80052b4:	e7e9      	b.n	800528a <__sflush_r+0xda>
 80052b6:	bf00      	nop
 80052b8:	20400001 	.word	0x20400001

080052bc <_fflush_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	690b      	ldr	r3, [r1, #16]
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	b913      	cbnz	r3, 80052cc <_fflush_r+0x10>
 80052c6:	2500      	movs	r5, #0
 80052c8:	4628      	mov	r0, r5
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	b118      	cbz	r0, 80052d6 <_fflush_r+0x1a>
 80052ce:	6983      	ldr	r3, [r0, #24]
 80052d0:	b90b      	cbnz	r3, 80052d6 <_fflush_r+0x1a>
 80052d2:	f000 f887 	bl	80053e4 <__sinit>
 80052d6:	4b14      	ldr	r3, [pc, #80]	; (8005328 <_fflush_r+0x6c>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	d11b      	bne.n	8005314 <_fflush_r+0x58>
 80052dc:	686c      	ldr	r4, [r5, #4]
 80052de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0ef      	beq.n	80052c6 <_fflush_r+0xa>
 80052e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052e8:	07d0      	lsls	r0, r2, #31
 80052ea:	d404      	bmi.n	80052f6 <_fflush_r+0x3a>
 80052ec:	0599      	lsls	r1, r3, #22
 80052ee:	d402      	bmi.n	80052f6 <_fflush_r+0x3a>
 80052f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f2:	f000 f915 	bl	8005520 <__retarget_lock_acquire_recursive>
 80052f6:	4628      	mov	r0, r5
 80052f8:	4621      	mov	r1, r4
 80052fa:	f7ff ff59 	bl	80051b0 <__sflush_r>
 80052fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005300:	07da      	lsls	r2, r3, #31
 8005302:	4605      	mov	r5, r0
 8005304:	d4e0      	bmi.n	80052c8 <_fflush_r+0xc>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	059b      	lsls	r3, r3, #22
 800530a:	d4dd      	bmi.n	80052c8 <_fflush_r+0xc>
 800530c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800530e:	f000 f908 	bl	8005522 <__retarget_lock_release_recursive>
 8005312:	e7d9      	b.n	80052c8 <_fflush_r+0xc>
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <_fflush_r+0x70>)
 8005316:	429c      	cmp	r4, r3
 8005318:	d101      	bne.n	800531e <_fflush_r+0x62>
 800531a:	68ac      	ldr	r4, [r5, #8]
 800531c:	e7df      	b.n	80052de <_fflush_r+0x22>
 800531e:	4b04      	ldr	r3, [pc, #16]	; (8005330 <_fflush_r+0x74>)
 8005320:	429c      	cmp	r4, r3
 8005322:	bf08      	it	eq
 8005324:	68ec      	ldreq	r4, [r5, #12]
 8005326:	e7da      	b.n	80052de <_fflush_r+0x22>
 8005328:	08006880 	.word	0x08006880
 800532c:	080068a0 	.word	0x080068a0
 8005330:	08006860 	.word	0x08006860

08005334 <std>:
 8005334:	2300      	movs	r3, #0
 8005336:	b510      	push	{r4, lr}
 8005338:	4604      	mov	r4, r0
 800533a:	e9c0 3300 	strd	r3, r3, [r0]
 800533e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005342:	6083      	str	r3, [r0, #8]
 8005344:	8181      	strh	r1, [r0, #12]
 8005346:	6643      	str	r3, [r0, #100]	; 0x64
 8005348:	81c2      	strh	r2, [r0, #14]
 800534a:	6183      	str	r3, [r0, #24]
 800534c:	4619      	mov	r1, r3
 800534e:	2208      	movs	r2, #8
 8005350:	305c      	adds	r0, #92	; 0x5c
 8005352:	f7ff fdc1 	bl	8004ed8 <memset>
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <std+0x38>)
 8005358:	6263      	str	r3, [r4, #36]	; 0x24
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <std+0x3c>)
 800535c:	62a3      	str	r3, [r4, #40]	; 0x28
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <std+0x40>)
 8005360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <std+0x44>)
 8005364:	6224      	str	r4, [r4, #32]
 8005366:	6323      	str	r3, [r4, #48]	; 0x30
 8005368:	bd10      	pop	{r4, pc}
 800536a:	bf00      	nop
 800536c:	08005dcd 	.word	0x08005dcd
 8005370:	08005def 	.word	0x08005def
 8005374:	08005e27 	.word	0x08005e27
 8005378:	08005e4b 	.word	0x08005e4b

0800537c <_cleanup_r>:
 800537c:	4901      	ldr	r1, [pc, #4]	; (8005384 <_cleanup_r+0x8>)
 800537e:	f000 b8af 	b.w	80054e0 <_fwalk_reent>
 8005382:	bf00      	nop
 8005384:	080052bd 	.word	0x080052bd

08005388 <__sfmoreglue>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	1e4a      	subs	r2, r1, #1
 800538c:	2568      	movs	r5, #104	; 0x68
 800538e:	4355      	muls	r5, r2
 8005390:	460e      	mov	r6, r1
 8005392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005396:	f000 f979 	bl	800568c <_malloc_r>
 800539a:	4604      	mov	r4, r0
 800539c:	b140      	cbz	r0, 80053b0 <__sfmoreglue+0x28>
 800539e:	2100      	movs	r1, #0
 80053a0:	e9c0 1600 	strd	r1, r6, [r0]
 80053a4:	300c      	adds	r0, #12
 80053a6:	60a0      	str	r0, [r4, #8]
 80053a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053ac:	f7ff fd94 	bl	8004ed8 <memset>
 80053b0:	4620      	mov	r0, r4
 80053b2:	bd70      	pop	{r4, r5, r6, pc}

080053b4 <__sfp_lock_acquire>:
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <__sfp_lock_acquire+0x8>)
 80053b6:	f000 b8b3 	b.w	8005520 <__retarget_lock_acquire_recursive>
 80053ba:	bf00      	nop
 80053bc:	20000be0 	.word	0x20000be0

080053c0 <__sfp_lock_release>:
 80053c0:	4801      	ldr	r0, [pc, #4]	; (80053c8 <__sfp_lock_release+0x8>)
 80053c2:	f000 b8ae 	b.w	8005522 <__retarget_lock_release_recursive>
 80053c6:	bf00      	nop
 80053c8:	20000be0 	.word	0x20000be0

080053cc <__sinit_lock_acquire>:
 80053cc:	4801      	ldr	r0, [pc, #4]	; (80053d4 <__sinit_lock_acquire+0x8>)
 80053ce:	f000 b8a7 	b.w	8005520 <__retarget_lock_acquire_recursive>
 80053d2:	bf00      	nop
 80053d4:	20000bdb 	.word	0x20000bdb

080053d8 <__sinit_lock_release>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__sinit_lock_release+0x8>)
 80053da:	f000 b8a2 	b.w	8005522 <__retarget_lock_release_recursive>
 80053de:	bf00      	nop
 80053e0:	20000bdb 	.word	0x20000bdb

080053e4 <__sinit>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	4604      	mov	r4, r0
 80053e8:	f7ff fff0 	bl	80053cc <__sinit_lock_acquire>
 80053ec:	69a3      	ldr	r3, [r4, #24]
 80053ee:	b11b      	cbz	r3, 80053f8 <__sinit+0x14>
 80053f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f4:	f7ff bff0 	b.w	80053d8 <__sinit_lock_release>
 80053f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053fc:	6523      	str	r3, [r4, #80]	; 0x50
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <__sinit+0x68>)
 8005400:	4a13      	ldr	r2, [pc, #76]	; (8005450 <__sinit+0x6c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	62a2      	str	r2, [r4, #40]	; 0x28
 8005406:	42a3      	cmp	r3, r4
 8005408:	bf04      	itt	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	61a3      	streq	r3, [r4, #24]
 800540e:	4620      	mov	r0, r4
 8005410:	f000 f820 	bl	8005454 <__sfp>
 8005414:	6060      	str	r0, [r4, #4]
 8005416:	4620      	mov	r0, r4
 8005418:	f000 f81c 	bl	8005454 <__sfp>
 800541c:	60a0      	str	r0, [r4, #8]
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f818 	bl	8005454 <__sfp>
 8005424:	2200      	movs	r2, #0
 8005426:	60e0      	str	r0, [r4, #12]
 8005428:	2104      	movs	r1, #4
 800542a:	6860      	ldr	r0, [r4, #4]
 800542c:	f7ff ff82 	bl	8005334 <std>
 8005430:	68a0      	ldr	r0, [r4, #8]
 8005432:	2201      	movs	r2, #1
 8005434:	2109      	movs	r1, #9
 8005436:	f7ff ff7d 	bl	8005334 <std>
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	2202      	movs	r2, #2
 800543e:	2112      	movs	r1, #18
 8005440:	f7ff ff78 	bl	8005334 <std>
 8005444:	2301      	movs	r3, #1
 8005446:	61a3      	str	r3, [r4, #24]
 8005448:	e7d2      	b.n	80053f0 <__sinit+0xc>
 800544a:	bf00      	nop
 800544c:	0800685c 	.word	0x0800685c
 8005450:	0800537d 	.word	0x0800537d

08005454 <__sfp>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	4607      	mov	r7, r0
 8005458:	f7ff ffac 	bl	80053b4 <__sfp_lock_acquire>
 800545c:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <__sfp+0x84>)
 800545e:	681e      	ldr	r6, [r3, #0]
 8005460:	69b3      	ldr	r3, [r6, #24]
 8005462:	b913      	cbnz	r3, 800546a <__sfp+0x16>
 8005464:	4630      	mov	r0, r6
 8005466:	f7ff ffbd 	bl	80053e4 <__sinit>
 800546a:	3648      	adds	r6, #72	; 0x48
 800546c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005470:	3b01      	subs	r3, #1
 8005472:	d503      	bpl.n	800547c <__sfp+0x28>
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	b30b      	cbz	r3, 80054bc <__sfp+0x68>
 8005478:	6836      	ldr	r6, [r6, #0]
 800547a:	e7f7      	b.n	800546c <__sfp+0x18>
 800547c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005480:	b9d5      	cbnz	r5, 80054b8 <__sfp+0x64>
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <__sfp+0x88>)
 8005484:	60e3      	str	r3, [r4, #12]
 8005486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800548a:	6665      	str	r5, [r4, #100]	; 0x64
 800548c:	f000 f847 	bl	800551e <__retarget_lock_init_recursive>
 8005490:	f7ff ff96 	bl	80053c0 <__sfp_lock_release>
 8005494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800549c:	6025      	str	r5, [r4, #0]
 800549e:	61a5      	str	r5, [r4, #24]
 80054a0:	2208      	movs	r2, #8
 80054a2:	4629      	mov	r1, r5
 80054a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054a8:	f7ff fd16 	bl	8004ed8 <memset>
 80054ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054b4:	4620      	mov	r0, r4
 80054b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b8:	3468      	adds	r4, #104	; 0x68
 80054ba:	e7d9      	b.n	8005470 <__sfp+0x1c>
 80054bc:	2104      	movs	r1, #4
 80054be:	4638      	mov	r0, r7
 80054c0:	f7ff ff62 	bl	8005388 <__sfmoreglue>
 80054c4:	4604      	mov	r4, r0
 80054c6:	6030      	str	r0, [r6, #0]
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1d5      	bne.n	8005478 <__sfp+0x24>
 80054cc:	f7ff ff78 	bl	80053c0 <__sfp_lock_release>
 80054d0:	230c      	movs	r3, #12
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	e7ee      	b.n	80054b4 <__sfp+0x60>
 80054d6:	bf00      	nop
 80054d8:	0800685c 	.word	0x0800685c
 80054dc:	ffff0001 	.word	0xffff0001

080054e0 <_fwalk_reent>:
 80054e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e4:	4606      	mov	r6, r0
 80054e6:	4688      	mov	r8, r1
 80054e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054ec:	2700      	movs	r7, #0
 80054ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054f2:	f1b9 0901 	subs.w	r9, r9, #1
 80054f6:	d505      	bpl.n	8005504 <_fwalk_reent+0x24>
 80054f8:	6824      	ldr	r4, [r4, #0]
 80054fa:	2c00      	cmp	r4, #0
 80054fc:	d1f7      	bne.n	80054ee <_fwalk_reent+0xe>
 80054fe:	4638      	mov	r0, r7
 8005500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005504:	89ab      	ldrh	r3, [r5, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d907      	bls.n	800551a <_fwalk_reent+0x3a>
 800550a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800550e:	3301      	adds	r3, #1
 8005510:	d003      	beq.n	800551a <_fwalk_reent+0x3a>
 8005512:	4629      	mov	r1, r5
 8005514:	4630      	mov	r0, r6
 8005516:	47c0      	blx	r8
 8005518:	4307      	orrs	r7, r0
 800551a:	3568      	adds	r5, #104	; 0x68
 800551c:	e7e9      	b.n	80054f2 <_fwalk_reent+0x12>

0800551e <__retarget_lock_init_recursive>:
 800551e:	4770      	bx	lr

08005520 <__retarget_lock_acquire_recursive>:
 8005520:	4770      	bx	lr

08005522 <__retarget_lock_release_recursive>:
 8005522:	4770      	bx	lr

08005524 <__swhatbuf_r>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	460e      	mov	r6, r1
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	2900      	cmp	r1, #0
 800552e:	b096      	sub	sp, #88	; 0x58
 8005530:	4614      	mov	r4, r2
 8005532:	461d      	mov	r5, r3
 8005534:	da07      	bge.n	8005546 <__swhatbuf_r+0x22>
 8005536:	2300      	movs	r3, #0
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	89b3      	ldrh	r3, [r6, #12]
 800553c:	061a      	lsls	r2, r3, #24
 800553e:	d410      	bmi.n	8005562 <__swhatbuf_r+0x3e>
 8005540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005544:	e00e      	b.n	8005564 <__swhatbuf_r+0x40>
 8005546:	466a      	mov	r2, sp
 8005548:	f000 fca6 	bl	8005e98 <_fstat_r>
 800554c:	2800      	cmp	r0, #0
 800554e:	dbf2      	blt.n	8005536 <__swhatbuf_r+0x12>
 8005550:	9a01      	ldr	r2, [sp, #4]
 8005552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800555a:	425a      	negs	r2, r3
 800555c:	415a      	adcs	r2, r3
 800555e:	602a      	str	r2, [r5, #0]
 8005560:	e7ee      	b.n	8005540 <__swhatbuf_r+0x1c>
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	2000      	movs	r0, #0
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	b016      	add	sp, #88	; 0x58
 800556a:	bd70      	pop	{r4, r5, r6, pc}

0800556c <__smakebuf_r>:
 800556c:	898b      	ldrh	r3, [r1, #12]
 800556e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005570:	079d      	lsls	r5, r3, #30
 8005572:	4606      	mov	r6, r0
 8005574:	460c      	mov	r4, r1
 8005576:	d507      	bpl.n	8005588 <__smakebuf_r+0x1c>
 8005578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	2301      	movs	r3, #1
 8005582:	6163      	str	r3, [r4, #20]
 8005584:	b002      	add	sp, #8
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	ab01      	add	r3, sp, #4
 800558a:	466a      	mov	r2, sp
 800558c:	f7ff ffca 	bl	8005524 <__swhatbuf_r>
 8005590:	9900      	ldr	r1, [sp, #0]
 8005592:	4605      	mov	r5, r0
 8005594:	4630      	mov	r0, r6
 8005596:	f000 f879 	bl	800568c <_malloc_r>
 800559a:	b948      	cbnz	r0, 80055b0 <__smakebuf_r+0x44>
 800559c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a0:	059a      	lsls	r2, r3, #22
 80055a2:	d4ef      	bmi.n	8005584 <__smakebuf_r+0x18>
 80055a4:	f023 0303 	bic.w	r3, r3, #3
 80055a8:	f043 0302 	orr.w	r3, r3, #2
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	e7e3      	b.n	8005578 <__smakebuf_r+0xc>
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <__smakebuf_r+0x7c>)
 80055b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	6020      	str	r0, [r4, #0]
 80055b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	9b00      	ldr	r3, [sp, #0]
 80055c0:	6163      	str	r3, [r4, #20]
 80055c2:	9b01      	ldr	r3, [sp, #4]
 80055c4:	6120      	str	r0, [r4, #16]
 80055c6:	b15b      	cbz	r3, 80055e0 <__smakebuf_r+0x74>
 80055c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055cc:	4630      	mov	r0, r6
 80055ce:	f000 fc75 	bl	8005ebc <_isatty_r>
 80055d2:	b128      	cbz	r0, 80055e0 <__smakebuf_r+0x74>
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	81a3      	strh	r3, [r4, #12]
 80055e0:	89a0      	ldrh	r0, [r4, #12]
 80055e2:	4305      	orrs	r5, r0
 80055e4:	81a5      	strh	r5, [r4, #12]
 80055e6:	e7cd      	b.n	8005584 <__smakebuf_r+0x18>
 80055e8:	0800537d 	.word	0x0800537d

080055ec <_free_r>:
 80055ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ee:	2900      	cmp	r1, #0
 80055f0:	d048      	beq.n	8005684 <_free_r+0x98>
 80055f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f6:	9001      	str	r0, [sp, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f1a1 0404 	sub.w	r4, r1, #4
 80055fe:	bfb8      	it	lt
 8005600:	18e4      	addlt	r4, r4, r3
 8005602:	f000 fc7d 	bl	8005f00 <__malloc_lock>
 8005606:	4a20      	ldr	r2, [pc, #128]	; (8005688 <_free_r+0x9c>)
 8005608:	9801      	ldr	r0, [sp, #4]
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	4615      	mov	r5, r2
 800560e:	b933      	cbnz	r3, 800561e <_free_r+0x32>
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	6014      	str	r4, [r2, #0]
 8005614:	b003      	add	sp, #12
 8005616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800561a:	f000 bc77 	b.w	8005f0c <__malloc_unlock>
 800561e:	42a3      	cmp	r3, r4
 8005620:	d90b      	bls.n	800563a <_free_r+0x4e>
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	1862      	adds	r2, r4, r1
 8005626:	4293      	cmp	r3, r2
 8005628:	bf04      	itt	eq
 800562a:	681a      	ldreq	r2, [r3, #0]
 800562c:	685b      	ldreq	r3, [r3, #4]
 800562e:	6063      	str	r3, [r4, #4]
 8005630:	bf04      	itt	eq
 8005632:	1852      	addeq	r2, r2, r1
 8005634:	6022      	streq	r2, [r4, #0]
 8005636:	602c      	str	r4, [r5, #0]
 8005638:	e7ec      	b.n	8005614 <_free_r+0x28>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x58>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x4e>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1855      	adds	r5, r2, r1
 8005648:	42a5      	cmp	r5, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x78>
 800564c:	6824      	ldr	r4, [r4, #0]
 800564e:	4421      	add	r1, r4
 8005650:	1854      	adds	r4, r2, r1
 8005652:	42a3      	cmp	r3, r4
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1dd      	bne.n	8005614 <_free_r+0x28>
 8005658:	681c      	ldr	r4, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	6053      	str	r3, [r2, #4]
 800565e:	4421      	add	r1, r4
 8005660:	6011      	str	r1, [r2, #0]
 8005662:	e7d7      	b.n	8005614 <_free_r+0x28>
 8005664:	d902      	bls.n	800566c <_free_r+0x80>
 8005666:	230c      	movs	r3, #12
 8005668:	6003      	str	r3, [r0, #0]
 800566a:	e7d3      	b.n	8005614 <_free_r+0x28>
 800566c:	6825      	ldr	r5, [r4, #0]
 800566e:	1961      	adds	r1, r4, r5
 8005670:	428b      	cmp	r3, r1
 8005672:	bf04      	itt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	bf04      	itt	eq
 800567c:	1949      	addeq	r1, r1, r5
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	6054      	str	r4, [r2, #4]
 8005682:	e7c7      	b.n	8005614 <_free_r+0x28>
 8005684:	b003      	add	sp, #12
 8005686:	bd30      	pop	{r4, r5, pc}
 8005688:	20000a50 	.word	0x20000a50

0800568c <_malloc_r>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	1ccd      	adds	r5, r1, #3
 8005690:	f025 0503 	bic.w	r5, r5, #3
 8005694:	3508      	adds	r5, #8
 8005696:	2d0c      	cmp	r5, #12
 8005698:	bf38      	it	cc
 800569a:	250c      	movcc	r5, #12
 800569c:	2d00      	cmp	r5, #0
 800569e:	4606      	mov	r6, r0
 80056a0:	db01      	blt.n	80056a6 <_malloc_r+0x1a>
 80056a2:	42a9      	cmp	r1, r5
 80056a4:	d903      	bls.n	80056ae <_malloc_r+0x22>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	2000      	movs	r0, #0
 80056ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ae:	f000 fc27 	bl	8005f00 <__malloc_lock>
 80056b2:	4921      	ldr	r1, [pc, #132]	; (8005738 <_malloc_r+0xac>)
 80056b4:	680a      	ldr	r2, [r1, #0]
 80056b6:	4614      	mov	r4, r2
 80056b8:	b99c      	cbnz	r4, 80056e2 <_malloc_r+0x56>
 80056ba:	4f20      	ldr	r7, [pc, #128]	; (800573c <_malloc_r+0xb0>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	b923      	cbnz	r3, 80056ca <_malloc_r+0x3e>
 80056c0:	4621      	mov	r1, r4
 80056c2:	4630      	mov	r0, r6
 80056c4:	f000 fb72 	bl	8005dac <_sbrk_r>
 80056c8:	6038      	str	r0, [r7, #0]
 80056ca:	4629      	mov	r1, r5
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 fb6d 	bl	8005dac <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d123      	bne.n	800571e <_malloc_r+0x92>
 80056d6:	230c      	movs	r3, #12
 80056d8:	6033      	str	r3, [r6, #0]
 80056da:	4630      	mov	r0, r6
 80056dc:	f000 fc16 	bl	8005f0c <__malloc_unlock>
 80056e0:	e7e3      	b.n	80056aa <_malloc_r+0x1e>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	1b5b      	subs	r3, r3, r5
 80056e6:	d417      	bmi.n	8005718 <_malloc_r+0x8c>
 80056e8:	2b0b      	cmp	r3, #11
 80056ea:	d903      	bls.n	80056f4 <_malloc_r+0x68>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	441c      	add	r4, r3
 80056f0:	6025      	str	r5, [r4, #0]
 80056f2:	e004      	b.n	80056fe <_malloc_r+0x72>
 80056f4:	6863      	ldr	r3, [r4, #4]
 80056f6:	42a2      	cmp	r2, r4
 80056f8:	bf0c      	ite	eq
 80056fa:	600b      	streq	r3, [r1, #0]
 80056fc:	6053      	strne	r3, [r2, #4]
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 fc04 	bl	8005f0c <__malloc_unlock>
 8005704:	f104 000b 	add.w	r0, r4, #11
 8005708:	1d23      	adds	r3, r4, #4
 800570a:	f020 0007 	bic.w	r0, r0, #7
 800570e:	1ac2      	subs	r2, r0, r3
 8005710:	d0cc      	beq.n	80056ac <_malloc_r+0x20>
 8005712:	1a1b      	subs	r3, r3, r0
 8005714:	50a3      	str	r3, [r4, r2]
 8005716:	e7c9      	b.n	80056ac <_malloc_r+0x20>
 8005718:	4622      	mov	r2, r4
 800571a:	6864      	ldr	r4, [r4, #4]
 800571c:	e7cc      	b.n	80056b8 <_malloc_r+0x2c>
 800571e:	1cc4      	adds	r4, r0, #3
 8005720:	f024 0403 	bic.w	r4, r4, #3
 8005724:	42a0      	cmp	r0, r4
 8005726:	d0e3      	beq.n	80056f0 <_malloc_r+0x64>
 8005728:	1a21      	subs	r1, r4, r0
 800572a:	4630      	mov	r0, r6
 800572c:	f000 fb3e 	bl	8005dac <_sbrk_r>
 8005730:	3001      	adds	r0, #1
 8005732:	d1dd      	bne.n	80056f0 <_malloc_r+0x64>
 8005734:	e7cf      	b.n	80056d6 <_malloc_r+0x4a>
 8005736:	bf00      	nop
 8005738:	20000a50 	.word	0x20000a50
 800573c:	20000a54 	.word	0x20000a54

08005740 <__sfputc_r>:
 8005740:	6893      	ldr	r3, [r2, #8]
 8005742:	3b01      	subs	r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	b410      	push	{r4}
 8005748:	6093      	str	r3, [r2, #8]
 800574a:	da08      	bge.n	800575e <__sfputc_r+0x1e>
 800574c:	6994      	ldr	r4, [r2, #24]
 800574e:	42a3      	cmp	r3, r4
 8005750:	db01      	blt.n	8005756 <__sfputc_r+0x16>
 8005752:	290a      	cmp	r1, #10
 8005754:	d103      	bne.n	800575e <__sfputc_r+0x1e>
 8005756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575a:	f7ff bc69 	b.w	8005030 <__swbuf_r>
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	1c58      	adds	r0, r3, #1
 8005762:	6010      	str	r0, [r2, #0]
 8005764:	7019      	strb	r1, [r3, #0]
 8005766:	4608      	mov	r0, r1
 8005768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576c:	4770      	bx	lr

0800576e <__sfputs_r>:
 800576e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005770:	4606      	mov	r6, r0
 8005772:	460f      	mov	r7, r1
 8005774:	4614      	mov	r4, r2
 8005776:	18d5      	adds	r5, r2, r3
 8005778:	42ac      	cmp	r4, r5
 800577a:	d101      	bne.n	8005780 <__sfputs_r+0x12>
 800577c:	2000      	movs	r0, #0
 800577e:	e007      	b.n	8005790 <__sfputs_r+0x22>
 8005780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005784:	463a      	mov	r2, r7
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ffda 	bl	8005740 <__sfputc_r>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d1f3      	bne.n	8005778 <__sfputs_r+0xa>
 8005790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005794 <_vfiprintf_r>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	460d      	mov	r5, r1
 800579a:	b09d      	sub	sp, #116	; 0x74
 800579c:	4614      	mov	r4, r2
 800579e:	4698      	mov	r8, r3
 80057a0:	4606      	mov	r6, r0
 80057a2:	b118      	cbz	r0, 80057ac <_vfiprintf_r+0x18>
 80057a4:	6983      	ldr	r3, [r0, #24]
 80057a6:	b90b      	cbnz	r3, 80057ac <_vfiprintf_r+0x18>
 80057a8:	f7ff fe1c 	bl	80053e4 <__sinit>
 80057ac:	4b89      	ldr	r3, [pc, #548]	; (80059d4 <_vfiprintf_r+0x240>)
 80057ae:	429d      	cmp	r5, r3
 80057b0:	d11b      	bne.n	80057ea <_vfiprintf_r+0x56>
 80057b2:	6875      	ldr	r5, [r6, #4]
 80057b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b6:	07d9      	lsls	r1, r3, #31
 80057b8:	d405      	bmi.n	80057c6 <_vfiprintf_r+0x32>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	059a      	lsls	r2, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_vfiprintf_r+0x32>
 80057c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c2:	f7ff fead 	bl	8005520 <__retarget_lock_acquire_recursive>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	071b      	lsls	r3, r3, #28
 80057ca:	d501      	bpl.n	80057d0 <_vfiprintf_r+0x3c>
 80057cc:	692b      	ldr	r3, [r5, #16]
 80057ce:	b9eb      	cbnz	r3, 800580c <_vfiprintf_r+0x78>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff fc7e 	bl	80050d4 <__swsetup_r>
 80057d8:	b1c0      	cbz	r0, 800580c <_vfiprintf_r+0x78>
 80057da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057dc:	07dc      	lsls	r4, r3, #31
 80057de:	d50e      	bpl.n	80057fe <_vfiprintf_r+0x6a>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	b01d      	add	sp, #116	; 0x74
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	4b7b      	ldr	r3, [pc, #492]	; (80059d8 <_vfiprintf_r+0x244>)
 80057ec:	429d      	cmp	r5, r3
 80057ee:	d101      	bne.n	80057f4 <_vfiprintf_r+0x60>
 80057f0:	68b5      	ldr	r5, [r6, #8]
 80057f2:	e7df      	b.n	80057b4 <_vfiprintf_r+0x20>
 80057f4:	4b79      	ldr	r3, [pc, #484]	; (80059dc <_vfiprintf_r+0x248>)
 80057f6:	429d      	cmp	r5, r3
 80057f8:	bf08      	it	eq
 80057fa:	68f5      	ldreq	r5, [r6, #12]
 80057fc:	e7da      	b.n	80057b4 <_vfiprintf_r+0x20>
 80057fe:	89ab      	ldrh	r3, [r5, #12]
 8005800:	0598      	lsls	r0, r3, #22
 8005802:	d4ed      	bmi.n	80057e0 <_vfiprintf_r+0x4c>
 8005804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005806:	f7ff fe8c 	bl	8005522 <__retarget_lock_release_recursive>
 800580a:	e7e9      	b.n	80057e0 <_vfiprintf_r+0x4c>
 800580c:	2300      	movs	r3, #0
 800580e:	9309      	str	r3, [sp, #36]	; 0x24
 8005810:	2320      	movs	r3, #32
 8005812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005816:	f8cd 800c 	str.w	r8, [sp, #12]
 800581a:	2330      	movs	r3, #48	; 0x30
 800581c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059e0 <_vfiprintf_r+0x24c>
 8005820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005824:	f04f 0901 	mov.w	r9, #1
 8005828:	4623      	mov	r3, r4
 800582a:	469a      	mov	sl, r3
 800582c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005830:	b10a      	cbz	r2, 8005836 <_vfiprintf_r+0xa2>
 8005832:	2a25      	cmp	r2, #37	; 0x25
 8005834:	d1f9      	bne.n	800582a <_vfiprintf_r+0x96>
 8005836:	ebba 0b04 	subs.w	fp, sl, r4
 800583a:	d00b      	beq.n	8005854 <_vfiprintf_r+0xc0>
 800583c:	465b      	mov	r3, fp
 800583e:	4622      	mov	r2, r4
 8005840:	4629      	mov	r1, r5
 8005842:	4630      	mov	r0, r6
 8005844:	f7ff ff93 	bl	800576e <__sfputs_r>
 8005848:	3001      	adds	r0, #1
 800584a:	f000 80aa 	beq.w	80059a2 <_vfiprintf_r+0x20e>
 800584e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005850:	445a      	add	r2, fp
 8005852:	9209      	str	r2, [sp, #36]	; 0x24
 8005854:	f89a 3000 	ldrb.w	r3, [sl]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a2 	beq.w	80059a2 <_vfiprintf_r+0x20e>
 800585e:	2300      	movs	r3, #0
 8005860:	f04f 32ff 	mov.w	r2, #4294967295
 8005864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005868:	f10a 0a01 	add.w	sl, sl, #1
 800586c:	9304      	str	r3, [sp, #16]
 800586e:	9307      	str	r3, [sp, #28]
 8005870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005874:	931a      	str	r3, [sp, #104]	; 0x68
 8005876:	4654      	mov	r4, sl
 8005878:	2205      	movs	r2, #5
 800587a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587e:	4858      	ldr	r0, [pc, #352]	; (80059e0 <_vfiprintf_r+0x24c>)
 8005880:	f7fa fcce 	bl	8000220 <memchr>
 8005884:	9a04      	ldr	r2, [sp, #16]
 8005886:	b9d8      	cbnz	r0, 80058c0 <_vfiprintf_r+0x12c>
 8005888:	06d1      	lsls	r1, r2, #27
 800588a:	bf44      	itt	mi
 800588c:	2320      	movmi	r3, #32
 800588e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005892:	0713      	lsls	r3, r2, #28
 8005894:	bf44      	itt	mi
 8005896:	232b      	movmi	r3, #43	; 0x2b
 8005898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800589c:	f89a 3000 	ldrb.w	r3, [sl]
 80058a0:	2b2a      	cmp	r3, #42	; 0x2a
 80058a2:	d015      	beq.n	80058d0 <_vfiprintf_r+0x13c>
 80058a4:	9a07      	ldr	r2, [sp, #28]
 80058a6:	4654      	mov	r4, sl
 80058a8:	2000      	movs	r0, #0
 80058aa:	f04f 0c0a 	mov.w	ip, #10
 80058ae:	4621      	mov	r1, r4
 80058b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b4:	3b30      	subs	r3, #48	; 0x30
 80058b6:	2b09      	cmp	r3, #9
 80058b8:	d94e      	bls.n	8005958 <_vfiprintf_r+0x1c4>
 80058ba:	b1b0      	cbz	r0, 80058ea <_vfiprintf_r+0x156>
 80058bc:	9207      	str	r2, [sp, #28]
 80058be:	e014      	b.n	80058ea <_vfiprintf_r+0x156>
 80058c0:	eba0 0308 	sub.w	r3, r0, r8
 80058c4:	fa09 f303 	lsl.w	r3, r9, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	46a2      	mov	sl, r4
 80058ce:	e7d2      	b.n	8005876 <_vfiprintf_r+0xe2>
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	1d19      	adds	r1, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	9103      	str	r1, [sp, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfbb      	ittet	lt
 80058dc:	425b      	neglt	r3, r3
 80058de:	f042 0202 	orrlt.w	r2, r2, #2
 80058e2:	9307      	strge	r3, [sp, #28]
 80058e4:	9307      	strlt	r3, [sp, #28]
 80058e6:	bfb8      	it	lt
 80058e8:	9204      	strlt	r2, [sp, #16]
 80058ea:	7823      	ldrb	r3, [r4, #0]
 80058ec:	2b2e      	cmp	r3, #46	; 0x2e
 80058ee:	d10c      	bne.n	800590a <_vfiprintf_r+0x176>
 80058f0:	7863      	ldrb	r3, [r4, #1]
 80058f2:	2b2a      	cmp	r3, #42	; 0x2a
 80058f4:	d135      	bne.n	8005962 <_vfiprintf_r+0x1ce>
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	1d1a      	adds	r2, r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	9203      	str	r2, [sp, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfb8      	it	lt
 8005902:	f04f 33ff 	movlt.w	r3, #4294967295
 8005906:	3402      	adds	r4, #2
 8005908:	9305      	str	r3, [sp, #20]
 800590a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059f0 <_vfiprintf_r+0x25c>
 800590e:	7821      	ldrb	r1, [r4, #0]
 8005910:	2203      	movs	r2, #3
 8005912:	4650      	mov	r0, sl
 8005914:	f7fa fc84 	bl	8000220 <memchr>
 8005918:	b140      	cbz	r0, 800592c <_vfiprintf_r+0x198>
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	eba0 000a 	sub.w	r0, r0, sl
 8005920:	fa03 f000 	lsl.w	r0, r3, r0
 8005924:	9b04      	ldr	r3, [sp, #16]
 8005926:	4303      	orrs	r3, r0
 8005928:	3401      	adds	r4, #1
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	482c      	ldr	r0, [pc, #176]	; (80059e4 <_vfiprintf_r+0x250>)
 8005932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005936:	2206      	movs	r2, #6
 8005938:	f7fa fc72 	bl	8000220 <memchr>
 800593c:	2800      	cmp	r0, #0
 800593e:	d03f      	beq.n	80059c0 <_vfiprintf_r+0x22c>
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <_vfiprintf_r+0x254>)
 8005942:	bb1b      	cbnz	r3, 800598c <_vfiprintf_r+0x1f8>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	3307      	adds	r3, #7
 8005948:	f023 0307 	bic.w	r3, r3, #7
 800594c:	3308      	adds	r3, #8
 800594e:	9303      	str	r3, [sp, #12]
 8005950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005952:	443b      	add	r3, r7
 8005954:	9309      	str	r3, [sp, #36]	; 0x24
 8005956:	e767      	b.n	8005828 <_vfiprintf_r+0x94>
 8005958:	fb0c 3202 	mla	r2, ip, r2, r3
 800595c:	460c      	mov	r4, r1
 800595e:	2001      	movs	r0, #1
 8005960:	e7a5      	b.n	80058ae <_vfiprintf_r+0x11a>
 8005962:	2300      	movs	r3, #0
 8005964:	3401      	adds	r4, #1
 8005966:	9305      	str	r3, [sp, #20]
 8005968:	4619      	mov	r1, r3
 800596a:	f04f 0c0a 	mov.w	ip, #10
 800596e:	4620      	mov	r0, r4
 8005970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005974:	3a30      	subs	r2, #48	; 0x30
 8005976:	2a09      	cmp	r2, #9
 8005978:	d903      	bls.n	8005982 <_vfiprintf_r+0x1ee>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0c5      	beq.n	800590a <_vfiprintf_r+0x176>
 800597e:	9105      	str	r1, [sp, #20]
 8005980:	e7c3      	b.n	800590a <_vfiprintf_r+0x176>
 8005982:	fb0c 2101 	mla	r1, ip, r1, r2
 8005986:	4604      	mov	r4, r0
 8005988:	2301      	movs	r3, #1
 800598a:	e7f0      	b.n	800596e <_vfiprintf_r+0x1da>
 800598c:	ab03      	add	r3, sp, #12
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	462a      	mov	r2, r5
 8005992:	4b16      	ldr	r3, [pc, #88]	; (80059ec <_vfiprintf_r+0x258>)
 8005994:	a904      	add	r1, sp, #16
 8005996:	4630      	mov	r0, r6
 8005998:	f3af 8000 	nop.w
 800599c:	4607      	mov	r7, r0
 800599e:	1c78      	adds	r0, r7, #1
 80059a0:	d1d6      	bne.n	8005950 <_vfiprintf_r+0x1bc>
 80059a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a4:	07d9      	lsls	r1, r3, #31
 80059a6:	d405      	bmi.n	80059b4 <_vfiprintf_r+0x220>
 80059a8:	89ab      	ldrh	r3, [r5, #12]
 80059aa:	059a      	lsls	r2, r3, #22
 80059ac:	d402      	bmi.n	80059b4 <_vfiprintf_r+0x220>
 80059ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059b0:	f7ff fdb7 	bl	8005522 <__retarget_lock_release_recursive>
 80059b4:	89ab      	ldrh	r3, [r5, #12]
 80059b6:	065b      	lsls	r3, r3, #25
 80059b8:	f53f af12 	bmi.w	80057e0 <_vfiprintf_r+0x4c>
 80059bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059be:	e711      	b.n	80057e4 <_vfiprintf_r+0x50>
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	462a      	mov	r2, r5
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <_vfiprintf_r+0x258>)
 80059c8:	a904      	add	r1, sp, #16
 80059ca:	4630      	mov	r0, r6
 80059cc:	f000 f880 	bl	8005ad0 <_printf_i>
 80059d0:	e7e4      	b.n	800599c <_vfiprintf_r+0x208>
 80059d2:	bf00      	nop
 80059d4:	08006880 	.word	0x08006880
 80059d8:	080068a0 	.word	0x080068a0
 80059dc:	08006860 	.word	0x08006860
 80059e0:	080068c0 	.word	0x080068c0
 80059e4:	080068ca 	.word	0x080068ca
 80059e8:	00000000 	.word	0x00000000
 80059ec:	0800576f 	.word	0x0800576f
 80059f0:	080068c6 	.word	0x080068c6

080059f4 <_printf_common>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	4616      	mov	r6, r2
 80059fa:	4699      	mov	r9, r3
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bfb8      	it	lt
 8005a08:	4613      	movlt	r3, r2
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a10:	4607      	mov	r7, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b10a      	cbz	r2, 8005a1a <_printf_common+0x26>
 8005a16:	3301      	adds	r3, #1
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	0699      	lsls	r1, r3, #26
 8005a1e:	bf42      	ittt	mi
 8005a20:	6833      	ldrmi	r3, [r6, #0]
 8005a22:	3302      	addmi	r3, #2
 8005a24:	6033      	strmi	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f015 0506 	ands.w	r5, r5, #6
 8005a2c:	d106      	bne.n	8005a3c <_printf_common+0x48>
 8005a2e:	f104 0a19 	add.w	sl, r4, #25
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	6832      	ldr	r2, [r6, #0]
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dc26      	bgt.n	8005a8a <_printf_common+0x96>
 8005a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a40:	1e13      	subs	r3, r2, #0
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	bf18      	it	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	0692      	lsls	r2, r2, #26
 8005a4a:	d42b      	bmi.n	8005aa4 <_printf_common+0xb0>
 8005a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d01e      	beq.n	8005a98 <_printf_common+0xa4>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	68e5      	ldr	r5, [r4, #12]
 8005a5e:	6832      	ldr	r2, [r6, #0]
 8005a60:	f003 0306 	and.w	r3, r3, #6
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	bf08      	it	eq
 8005a68:	1aad      	subeq	r5, r5, r2
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	bf0c      	ite	eq
 8005a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a74:	2500      	movne	r5, #0
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bfc4      	itt	gt
 8005a7a:	1a9b      	subgt	r3, r3, r2
 8005a7c:	18ed      	addgt	r5, r5, r3
 8005a7e:	2600      	movs	r6, #0
 8005a80:	341a      	adds	r4, #26
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	d11a      	bne.n	8005abc <_printf_common+0xc8>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e008      	b.n	8005a9c <_printf_common+0xa8>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d103      	bne.n	8005aa0 <_printf_common+0xac>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7c6      	b.n	8005a32 <_printf_common+0x3e>
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	2030      	movs	r0, #48	; 0x30
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aae:	4422      	add	r2, r4
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7c7      	b.n	8005a4c <_printf_common+0x58>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0e6      	beq.n	8005a98 <_printf_common+0xa4>
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7d9      	b.n	8005a82 <_printf_common+0x8e>
	...

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4691      	mov	r9, r2
 8005ad8:	7e27      	ldrb	r7, [r4, #24]
 8005ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005adc:	2f78      	cmp	r7, #120	; 0x78
 8005ade:	4680      	mov	r8, r0
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	; 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d8 	beq.w	8005ca2 <_printf_i+0x1d2>
 8005af2:	2f58      	cmp	r7, #88	; 0x58
 8005af4:	f000 80a3 	beq.w	8005c3e <_printf_i+0x16e>
 8005af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a001      	add	r0, pc, #4	; (adr r0, 8005b10 <_printf_i+0x40>)
 8005b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005c6b 	.word	0x08005c6b
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005cab 	.word	0x08005cab
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c73 	.word	0x08005c73
 8005b68:	680b      	ldr	r3, [r1, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	600a      	str	r2, [r1, #0]
 8005b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0a3      	b.n	8005cc4 <_printf_i+0x1f4>
 8005b7c:	6825      	ldr	r5, [r4, #0]
 8005b7e:	6808      	ldr	r0, [r1, #0]
 8005b80:	062e      	lsls	r6, r5, #24
 8005b82:	f100 0304 	add.w	r3, r0, #4
 8005b86:	d50a      	bpl.n	8005b9e <_printf_i+0xce>
 8005b88:	6805      	ldr	r5, [r0, #0]
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	da03      	bge.n	8005b98 <_printf_i+0xc8>
 8005b90:	232d      	movs	r3, #45	; 0x2d
 8005b92:	426d      	negs	r5, r5
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b98:	485e      	ldr	r0, [pc, #376]	; (8005d14 <_printf_i+0x244>)
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e019      	b.n	8005bd2 <_printf_i+0x102>
 8005b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ba2:	6805      	ldr	r5, [r0, #0]
 8005ba4:	600b      	str	r3, [r1, #0]
 8005ba6:	bf18      	it	ne
 8005ba8:	b22d      	sxthne	r5, r5
 8005baa:	e7ef      	b.n	8005b8c <_printf_i+0xbc>
 8005bac:	680b      	ldr	r3, [r1, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	1d18      	adds	r0, r3, #4
 8005bb2:	6008      	str	r0, [r1, #0]
 8005bb4:	0628      	lsls	r0, r5, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0xec>
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0xf2>
 8005bbc:	0669      	lsls	r1, r5, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0xe8>
 8005bc0:	881d      	ldrh	r5, [r3, #0]
 8005bc2:	4854      	ldr	r0, [pc, #336]	; (8005d14 <_printf_i+0x244>)
 8005bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2308      	moveq	r3, #8
 8005bca:	230a      	movne	r3, #10
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bd2:	6866      	ldr	r6, [r4, #4]
 8005bd4:	60a6      	str	r6, [r4, #8]
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	bfa2      	ittt	ge
 8005bda:	6821      	ldrge	r1, [r4, #0]
 8005bdc:	f021 0104 	bicge.w	r1, r1, #4
 8005be0:	6021      	strge	r1, [r4, #0]
 8005be2:	b90d      	cbnz	r5, 8005be8 <_printf_i+0x118>
 8005be4:	2e00      	cmp	r6, #0
 8005be6:	d04d      	beq.n	8005c84 <_printf_i+0x1b4>
 8005be8:	4616      	mov	r6, r2
 8005bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bee:	fb03 5711 	mls	r7, r3, r1, r5
 8005bf2:	5dc7      	ldrb	r7, [r0, r7]
 8005bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf8:	462f      	mov	r7, r5
 8005bfa:	42bb      	cmp	r3, r7
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	d9f4      	bls.n	8005bea <_printf_i+0x11a>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d10b      	bne.n	8005c1c <_printf_i+0x14c>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07df      	lsls	r7, r3, #31
 8005c08:	d508      	bpl.n	8005c1c <_printf_i+0x14c>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	bfde      	ittt	le
 8005c12:	2330      	movle	r3, #48	; 0x30
 8005c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c1c:	1b92      	subs	r2, r2, r6
 8005c1e:	6122      	str	r2, [r4, #16]
 8005c20:	f8cd a000 	str.w	sl, [sp]
 8005c24:	464b      	mov	r3, r9
 8005c26:	aa03      	add	r2, sp, #12
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7ff fee2 	bl	80059f4 <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d14c      	bne.n	8005cce <_printf_i+0x1fe>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	b004      	add	sp, #16
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	4835      	ldr	r0, [pc, #212]	; (8005d14 <_printf_i+0x244>)
 8005c40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	680e      	ldr	r6, [r1, #0]
 8005c48:	061f      	lsls	r7, r3, #24
 8005c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c4e:	600e      	str	r6, [r1, #0]
 8005c50:	d514      	bpl.n	8005c7c <_printf_i+0x1ac>
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f043 0320 	orrmi.w	r3, r3, #32
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b91d      	cbnz	r5, 8005c66 <_printf_i+0x196>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f023 0320 	bic.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2310      	movs	r3, #16
 8005c68:	e7b0      	b.n	8005bcc <_printf_i+0xfc>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2378      	movs	r3, #120	; 0x78
 8005c74:	4828      	ldr	r0, [pc, #160]	; (8005d18 <_printf_i+0x248>)
 8005c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c7a:	e7e3      	b.n	8005c44 <_printf_i+0x174>
 8005c7c:	065e      	lsls	r6, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2ad      	uxthmi	r5, r5
 8005c82:	e7e6      	b.n	8005c52 <_printf_i+0x182>
 8005c84:	4616      	mov	r6, r2
 8005c86:	e7bb      	b.n	8005c00 <_printf_i+0x130>
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	6826      	ldr	r6, [r4, #0]
 8005c8c:	6960      	ldr	r0, [r4, #20]
 8005c8e:	1d1d      	adds	r5, r3, #4
 8005c90:	600d      	str	r5, [r1, #0]
 8005c92:	0635      	lsls	r5, r6, #24
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	d501      	bpl.n	8005c9c <_printf_i+0x1cc>
 8005c98:	6018      	str	r0, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <_printf_i+0x1d2>
 8005c9c:	0671      	lsls	r1, r6, #25
 8005c9e:	d5fb      	bpl.n	8005c98 <_printf_i+0x1c8>
 8005ca0:	8018      	strh	r0, [r3, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	4616      	mov	r6, r2
 8005ca8:	e7ba      	b.n	8005c20 <_printf_i+0x150>
 8005caa:	680b      	ldr	r3, [r1, #0]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	600a      	str	r2, [r1, #0]
 8005cb0:	681e      	ldr	r6, [r3, #0]
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7fa fab2 	bl	8000220 <memchr>
 8005cbc:	b108      	cbz	r0, 8005cc2 <_printf_i+0x1f2>
 8005cbe:	1b80      	subs	r0, r0, r6
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	e7a8      	b.n	8005c20 <_printf_i+0x150>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d0ab      	beq.n	8005c34 <_printf_i+0x164>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	d413      	bmi.n	8005d0a <_printf_i+0x23a>
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	bfb8      	it	lt
 8005cea:	4618      	movlt	r0, r3
 8005cec:	e7a4      	b.n	8005c38 <_printf_i+0x168>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d09b      	beq.n	8005c34 <_printf_i+0x164>
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dcf2      	bgt.n	8005cee <_printf_i+0x21e>
 8005d08:	e7eb      	b.n	8005ce2 <_printf_i+0x212>
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	f104 0619 	add.w	r6, r4, #25
 8005d10:	e7f5      	b.n	8005cfe <_printf_i+0x22e>
 8005d12:	bf00      	nop
 8005d14:	080068d1 	.word	0x080068d1
 8005d18:	080068e2 	.word	0x080068e2

08005d1c <_putc_r>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	460d      	mov	r5, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	4606      	mov	r6, r0
 8005d24:	b118      	cbz	r0, 8005d2e <_putc_r+0x12>
 8005d26:	6983      	ldr	r3, [r0, #24]
 8005d28:	b90b      	cbnz	r3, 8005d2e <_putc_r+0x12>
 8005d2a:	f7ff fb5b 	bl	80053e4 <__sinit>
 8005d2e:	4b1c      	ldr	r3, [pc, #112]	; (8005da0 <_putc_r+0x84>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d124      	bne.n	8005d7e <_putc_r+0x62>
 8005d34:	6874      	ldr	r4, [r6, #4]
 8005d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d38:	07d8      	lsls	r0, r3, #31
 8005d3a:	d405      	bmi.n	8005d48 <_putc_r+0x2c>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	0599      	lsls	r1, r3, #22
 8005d40:	d402      	bmi.n	8005d48 <_putc_r+0x2c>
 8005d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d44:	f7ff fbec 	bl	8005520 <__retarget_lock_acquire_recursive>
 8005d48:	68a3      	ldr	r3, [r4, #8]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	da05      	bge.n	8005d5e <_putc_r+0x42>
 8005d52:	69a2      	ldr	r2, [r4, #24]
 8005d54:	4293      	cmp	r3, r2
 8005d56:	db1c      	blt.n	8005d92 <_putc_r+0x76>
 8005d58:	b2eb      	uxtb	r3, r5
 8005d5a:	2b0a      	cmp	r3, #10
 8005d5c:	d019      	beq.n	8005d92 <_putc_r+0x76>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	6022      	str	r2, [r4, #0]
 8005d64:	701d      	strb	r5, [r3, #0]
 8005d66:	b2ed      	uxtb	r5, r5
 8005d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d6a:	07da      	lsls	r2, r3, #31
 8005d6c:	d405      	bmi.n	8005d7a <_putc_r+0x5e>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	059b      	lsls	r3, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <_putc_r+0x5e>
 8005d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d76:	f7ff fbd4 	bl	8005522 <__retarget_lock_release_recursive>
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <_putc_r+0x88>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d101      	bne.n	8005d88 <_putc_r+0x6c>
 8005d84:	68b4      	ldr	r4, [r6, #8]
 8005d86:	e7d6      	b.n	8005d36 <_putc_r+0x1a>
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <_putc_r+0x8c>)
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	bf08      	it	eq
 8005d8e:	68f4      	ldreq	r4, [r6, #12]
 8005d90:	e7d1      	b.n	8005d36 <_putc_r+0x1a>
 8005d92:	4629      	mov	r1, r5
 8005d94:	4622      	mov	r2, r4
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff f94a 	bl	8005030 <__swbuf_r>
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	e7e3      	b.n	8005d68 <_putc_r+0x4c>
 8005da0:	08006880 	.word	0x08006880
 8005da4:	080068a0 	.word	0x080068a0
 8005da8:	08006860 	.word	0x08006860

08005dac <_sbrk_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_sbrk_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fc f938 	bl	800202c <_sbrk>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_sbrk_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_sbrk_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000be4 	.word	0x20000be4

08005dcc <__sread>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	460c      	mov	r4, r1
 8005dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd4:	f000 f8a0 	bl	8005f18 <_read_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	bfab      	itete	ge
 8005ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dde:	89a3      	ldrhlt	r3, [r4, #12]
 8005de0:	181b      	addge	r3, r3, r0
 8005de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005de6:	bfac      	ite	ge
 8005de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dea:	81a3      	strhlt	r3, [r4, #12]
 8005dec:	bd10      	pop	{r4, pc}

08005dee <__swrite>:
 8005dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df2:	461f      	mov	r7, r3
 8005df4:	898b      	ldrh	r3, [r1, #12]
 8005df6:	05db      	lsls	r3, r3, #23
 8005df8:	4605      	mov	r5, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	d505      	bpl.n	8005e0c <__swrite+0x1e>
 8005e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e04:	2302      	movs	r3, #2
 8005e06:	2200      	movs	r2, #0
 8005e08:	f000 f868 	bl	8005edc <_lseek_r>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	4632      	mov	r2, r6
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	f000 b817 	b.w	8005e54 <_write_r>

08005e26 <__sseek>:
 8005e26:	b510      	push	{r4, lr}
 8005e28:	460c      	mov	r4, r1
 8005e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2e:	f000 f855 	bl	8005edc <_lseek_r>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	bf15      	itete	ne
 8005e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e42:	81a3      	strheq	r3, [r4, #12]
 8005e44:	bf18      	it	ne
 8005e46:	81a3      	strhne	r3, [r4, #12]
 8005e48:	bd10      	pop	{r4, pc}

08005e4a <__sclose>:
 8005e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4e:	f000 b813 	b.w	8005e78 <_close_r>
	...

08005e54 <_write_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	; (8005e74 <_write_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fb ff16 	bl	8001c94 <_write>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_write_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_write_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20000be4 	.word	0x20000be4

08005e78 <_close_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d06      	ldr	r5, [pc, #24]	; (8005e94 <_close_r+0x1c>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	602b      	str	r3, [r5, #0]
 8005e84:	f7fc f89d 	bl	8001fc2 <_close>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_close_r+0x1a>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_close_r+0x1a>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20000be4 	.word	0x20000be4

08005e98 <_fstat_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	; (8005eb8 <_fstat_r+0x20>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	f7fc f898 	bl	8001fda <_fstat>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d102      	bne.n	8005eb4 <_fstat_r+0x1c>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	b103      	cbz	r3, 8005eb4 <_fstat_r+0x1c>
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000be4 	.word	0x20000be4

08005ebc <_isatty_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d06      	ldr	r5, [pc, #24]	; (8005ed8 <_isatty_r+0x1c>)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fc f897 	bl	8001ffa <_isatty>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_isatty_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_isatty_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20000be4 	.word	0x20000be4

08005edc <_lseek_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d07      	ldr	r5, [pc, #28]	; (8005efc <_lseek_r+0x20>)
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f7fc f890 	bl	8002010 <_lseek>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_lseek_r+0x1e>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_lseek_r+0x1e>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	20000be4 	.word	0x20000be4

08005f00 <__malloc_lock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__malloc_lock+0x8>)
 8005f02:	f7ff bb0d 	b.w	8005520 <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	20000bdc 	.word	0x20000bdc

08005f0c <__malloc_unlock>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__malloc_unlock+0x8>)
 8005f0e:	f7ff bb08 	b.w	8005522 <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	20000bdc 	.word	0x20000bdc

08005f18 <_read_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	; (8005f38 <_read_r+0x20>)
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	4611      	mov	r1, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fc f82e 	bl	8001f88 <_read>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_read_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_read_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20000be4 	.word	0x20000be4

08005f3c <_init>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr

08005f48 <_fini>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr
