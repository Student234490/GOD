
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004930  08004930  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  080049a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080049a8  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bde  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002542  00000000  00000000  00032c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000351c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00035e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e868  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f159  00000000  00000000  00055260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba6f1  00000000  00000000  000643b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011eaaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  0011eb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004420 	.word	0x08004420

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004420 	.word	0x08004420

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9b9 	b.w	8000654 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <Rational>:

    return (uint32_t)(approx);
}


int32_t Rational(int a, int b) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f844 	bl	80006f0 <convert>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000670:	1415      	asrs	r5, r2, #16
 8000672:	0414      	lsls	r4, r2, #16
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f000 f83b 	bl	80006f0 <convert>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000682:	4620      	mov	r0, r4
 8000684:	4629      	mov	r1, r5
 8000686:	f7ff fe1b 	bl	80002c0 <__aeabi_ldivmod>
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	4613      	mov	r3, r2
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bdb0      	pop	{r4, r5, r7, pc}

08000698 <printFix>:

void printFix(int32_t i) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da05      	bge.n	80006b2 <printFix+0x1a>
            printf("-");
 80006a6:	202d      	movs	r0, #45	; 0x2d
 80006a8:	f002 fea8 	bl	80033fc <putchar>
            i = ~i + 1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	425b      	negs	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, 10000 * (uint32_t)(i & 0xFFFF) >> 16);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1419      	asrs	r1, r3, #16
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	461a      	mov	r2, r3
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <printFix+0x3c>)
 80006c8:	f002 fe80 	bl	80033cc <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08004438 	.word	0x08004438

080006d8 <expand>:

int32_t expand(int32_t i) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	009b      	lsls	r3, r3, #2
   }
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <convert>:

int32_t convert(int32_t i) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	041b      	lsls	r3, r3, #16
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <inconvert>:

int32_t inconvert(int32_t i) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000716:	141b      	asrs	r3, r3, #16
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <sinus>:
 -1606, -1406, -1205, -1005,  -804,  -603,  -402,
  -201 };

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 800072c:	e003      	b.n	8000736 <sinus+0x12>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	dbf8      	blt.n	800072e <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	425a      	negs	r2, r3
 8000740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000748:	bf58      	it	pl
 800074a:	4253      	negpl	r3, r2
 800074c:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <sinus+0x44>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000756:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f7ff ffbd 	bl	80006d8 <expand>
 800075e:	4603      	mov	r3, r0
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08004450 	.word	0x08004450

0800076c <sinrad>:

int32_t cosinus(int t) { // takes integer representing a 512th degree
	return(sinus(LUTCOUNT+128)); // returns 16.16 decimal
}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 800076c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8000776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077a:	f7ff ffb9 	bl	80006f0 <convert>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000786:	ea4f 4922 	mov.w	r9, r2, asr #16
 800078a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff ffae 	bl	80006f0 <convert>
 8000794:	4603      	mov	r3, r0
 8000796:	461c      	mov	r4, r3
 8000798:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800079c:	2171      	movs	r1, #113	; 0x71
 800079e:	f240 1063 	movw	r0, #355	; 0x163
 80007a2:	f7ff ff59 	bl	8000658 <Rational>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80007ae:	fb02 f005 	mul.w	r0, r2, r5
 80007b2:	fb04 f103 	mul.w	r1, r4, r3
 80007b6:	4401      	add	r1, r0
 80007b8:	fba4 2302 	umull	r2, r3, r4, r2
 80007bc:	4419      	add	r1, r3
 80007be:	460b      	mov	r3, r1
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	0c10      	lsrs	r0, r2, #16
 80007ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ce:	1419      	asrs	r1, r3, #16
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80007d8:	4640      	mov	r0, r8
 80007da:	4649      	mov	r1, r9
 80007dc:	f7ff fd70 	bl	80002c0 <__aeabi_ldivmod>
 80007e0:	4602      	mov	r2, r0
 80007e2:	460b      	mov	r3, r1
 80007e4:	4613      	mov	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4618      	mov	r0, r3
 80007ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	461a      	mov	r2, r3
 80007f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80007f8:	fb02 f501 	mul.w	r5, r2, r1
 80007fc:	fb00 f403 	mul.w	r4, r0, r3
 8000800:	442c      	add	r4, r5
 8000802:	fba0 2302 	umull	r2, r3, r0, r2
 8000806:	18e1      	adds	r1, r4, r3
 8000808:	460b      	mov	r3, r1
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	f04f 0100 	mov.w	r1, #0
 8000812:	0c10      	lsrs	r0, r2, #16
 8000814:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000818:	1419      	asrs	r1, r3, #16
 800081a:	4603      	mov	r3, r0
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff73 	bl	8000708 <inconvert>
 8000822:	60b8      	str	r0, [r7, #8]
	printf("%i,", integer);
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <sinrad+0xd4>)
 8000828:	f002 fdd0 	bl	80033cc <iprintf>
	return sinus(integer); // returns 16.16 decimal
 800082c:	68b8      	ldr	r0, [r7, #8]
 800082e:	f7ff ff79 	bl	8000724 <sinus>
 8000832:	4603      	mov	r3, r0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800083e:	bf00      	nop
 8000840:	08004444 	.word	0x08004444

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fb99 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f866 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f000 f976 	bl	8000b44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000858:	f000 f928 	bl	8000aac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800085c:	f000 f8a0 	bl	80009a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000860:	f000 f8d8 	bl	8000a14 <MX_USART1_UART_Init>
  while (1)
  {
	  int i;
	  int32_t input;
	  int32_t sine;
	  int nmax = 1024;
 8000864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000868:	60bb      	str	r3, [r7, #8]
	  for (i = 0; i <= nmax; i++) {
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e04e      	b.n	800090e <main+0xca>
		  printf("%i,", i);
 8000870:	68f9      	ldr	r1, [r7, #12]
 8000872:	4829      	ldr	r0, [pc, #164]	; (8000918 <main+0xd4>)
 8000874:	f002 fdaa 	bl	80033cc <iprintf>
		  input = FIX16_MULT(convert(i), FIX16_DIV(PI16, convert(nmax)));
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff ff39 	bl	80006f0 <convert>
 800087e:	4603      	mov	r3, r0
 8000880:	461c      	mov	r4, r3
 8000882:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000886:	2171      	movs	r1, #113	; 0x71
 8000888:	f240 1063 	movw	r0, #355	; 0x163
 800088c:	f7ff fee4 	bl	8000658 <Rational>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000898:	ea4f 4922 	mov.w	r9, r2, asr #16
 800089c:	ea4f 4802 	mov.w	r8, r2, lsl #16
 80008a0:	68b8      	ldr	r0, [r7, #8]
 80008a2:	f7ff ff25 	bl	80006f0 <convert>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80008ae:	4640      	mov	r0, r8
 80008b0:	4649      	mov	r1, r9
 80008b2:	f7ff fd05 	bl	80002c0 <__aeabi_ldivmod>
 80008b6:	4602      	mov	r2, r0
 80008b8:	460b      	mov	r3, r1
 80008ba:	4613      	mov	r3, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80008c2:	fb02 f005 	mul.w	r0, r2, r5
 80008c6:	fb04 f103 	mul.w	r1, r4, r3
 80008ca:	4401      	add	r1, r0
 80008cc:	fba4 2302 	umull	r2, r3, r4, r2
 80008d0:	4419      	add	r1, r3
 80008d2:	460b      	mov	r3, r1
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	f04f 0100 	mov.w	r1, #0
 80008dc:	0c10      	lsrs	r0, r2, #16
 80008de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e2:	1419      	asrs	r1, r3, #16
 80008e4:	4603      	mov	r3, r0
 80008e6:	607b      	str	r3, [r7, #4]
		  printFix(input);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fed5 	bl	8000698 <printFix>
		  printf(",");
 80008ee:	202c      	movs	r0, #44	; 0x2c
 80008f0:	f002 fd84 	bl	80033fc <putchar>
		  sine = sinrad(input);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff39 	bl	800076c <sinrad>
 80008fa:	6038      	str	r0, [r7, #0]
		  printFix(sine);
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f7ff fecb 	bl	8000698 <printFix>
		  printf("\r\n");
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <main+0xd8>)
 8000904:	f002 fdfe 	bl	8003504 <puts>
	  for (i = 0; i <= nmax; i++) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	429a      	cmp	r2, r3
 8000914:	ddac      	ble.n	8000870 <main+0x2c>
  {
 8000916:	e7a5      	b.n	8000864 <main+0x20>
 8000918:	08004448 	.word	0x08004448
 800091c:	0800444c 	.word	0x0800444c

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	2238      	movs	r2, #56	; 0x38
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fd44 	bl	80033bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000946:	f000 fdf3 	bl	8001530 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fe99 	bl	8001698 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800096c:	f000 f918 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000974:	2301      	movs	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f001 f999 	bl	8001cc0 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000994:	f000 f904 	bl	8000ba0 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3750      	adds	r7, #80	; 0x50
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <MX_SPI1_Init+0x70>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009e6:	2207      	movs	r2, #7
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009f8:	f001 fd6e 	bl	80024d8 <HAL_SPI_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000a02:	f000 f8cd 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000012c 	.word	0x2000012c
 8000a10:	40013000 	.word	0x40013000

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART1_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f001 fde6 	bl	800262e <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f89a 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a70:	f002 fbb0 	bl	80031d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f891 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a82:	f002 fbe5 	bl	8003250 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f888 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f002 fb66 	bl	8003162 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f880 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000098 	.word	0x20000098
 8000aa8:	40013800 	.word	0x40013800

08000aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_USART2_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000af6:	f001 fd9a 	bl	800262e <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f84e 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b08:	f002 fb64 	bl	80031d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f845 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b1a:	f002 fb99 	bl	8003250 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f83c 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b2a:	f002 fb1a 	bl	8003162 <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f834 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000190 	.word	0x20000190
 8000b40:	40004400 	.word	0x40004400

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_GPIO_Init+0x2c>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <MX_GPIO_Init+0x2c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x2c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <_write>:
/* USER CODE BEGIN 4 */

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <_write+0x28>)
 8000b8c:	f001 fd9f 	bl	80026ce <HAL_UART_Transmit>
    return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000190 	.word	0x20000190

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000be2:	f000 fd49 	bl	8001678 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_SPI_MspInit+0x7c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d128      	bne.n	8000c68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fae2 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	; 0x70
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2244      	movs	r2, #68	; 0x44
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fb8f 	bl	80033bc <memset>
  if(huart->Instance==USART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <HAL_UART_MspInit+0x124>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d138      	bne.n	8000d1a <HAL_UART_MspInit+0xa2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fa1f 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ff6e 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	4a35      	ldr	r2, [pc, #212]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd0:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cf4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d06:	2307      	movs	r3, #7
 8000d08:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f000 fa8a 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d18:	e03b      	b.n	8000d92 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_UART_MspInit+0x12c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d136      	bne.n	8000d92 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 f9e1 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000d3c:	f7ff ff30 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_MspInit+0x128>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d70:	230c      	movs	r3, #12
 8000d72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d80:	2307      	movs	r3, #7
 8000d82:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f000 fa4d 	bl	800122c <HAL_GPIO_Init>
}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	; 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40004400 	.word	0x40004400

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f918 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4601      	mov	r1, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf0      	blt.n	8000e0e <_read+0x12>
	}

return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f002 fa4a 	bl	8003368 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20008000 	.word	0x20008000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	2000008c 	.word	0x2000008c
 8000f08:	20000238 	.word	0x20000238

08000f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f002 fa09 	bl	8003374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff fc6f 	bl	8000844 <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f74:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 8000f78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f7c:	20000238 	.word	0x20000238

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>

08000f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f91b 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f80e 	bl	8000fb4 <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e001      	b.n	8000fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa4:	f7ff fe02 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]

}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d022      	beq.n	800100e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_InitTick+0x6c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_InitTick+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f918 	bl	8001212 <HAL_SYSTICK_Config>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10f      	bne.n	8001008 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d809      	bhi.n	8001002 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	f000 f8f2 	bl	80011de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_InitTick+0x70>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e007      	b.n	8001012 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e004      	b.n	8001012 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x1c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x20>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4413      	add	r3, r2
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x1c>)
 8001038:	6013      	str	r3, [r2, #0]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000224 	.word	0x20000224
 8001048:	20000008 	.word	0x20000008

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000224 	.word	0x20000224

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff47 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff5e 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff90 	bl	800111c <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5f 	bl	80010c8 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffb2 	bl	8001184 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800123a:	e15a      	b.n	80014f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 814c 	beq.w	80014ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d005      	beq.n	800126c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001268:	2b02      	cmp	r3, #2
 800126a:	d130      	bne.n	80012ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 0201 	and.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d017      	beq.n	800130a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d123      	bne.n	800135e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0203 	and.w	r2, r3, #3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80a6 	beq.w	80014ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	4a5a      	ldr	r2, [pc, #360]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6613      	str	r3, [r2, #96]	; 0x60
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <HAL_GPIO_Init+0x2e4>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b8:	4a56      	ldr	r2, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x2e8>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013e2:	d01f      	beq.n	8001424 <HAL_GPIO_Init+0x1f8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x2ec>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d019      	beq.n	8001420 <HAL_GPIO_Init+0x1f4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_GPIO_Init+0x2f0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d013      	beq.n	800141c <HAL_GPIO_Init+0x1f0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_GPIO_Init+0x2f4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_Init+0x1ec>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_GPIO_Init+0x2f8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x1e8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a48      	ldr	r2, [pc, #288]	; (8001528 <HAL_GPIO_Init+0x2fc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_Init+0x1e4>
 800140c:	2305      	movs	r3, #5
 800140e:	e00a      	b.n	8001426 <HAL_GPIO_Init+0x1fa>
 8001410:	2306      	movs	r3, #6
 8001412:	e008      	b.n	8001426 <HAL_GPIO_Init+0x1fa>
 8001414:	2304      	movs	r3, #4
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x1fa>
 8001418:	2303      	movs	r3, #3
 800141a:	e004      	b.n	8001426 <HAL_GPIO_Init+0x1fa>
 800141c:	2302      	movs	r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x1fa>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_GPIO_Init+0x1fa>
 8001424:	2300      	movs	r3, #0
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001436:	4937      	ldr	r1, [pc, #220]	; (8001514 <HAL_GPIO_Init+0x2e8>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_GPIO_Init+0x300>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001468:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_GPIO_Init+0x300>)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_GPIO_Init+0x300>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001492:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_GPIO_Init+0x300>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_GPIO_Init+0x300>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_GPIO_Init+0x300>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_GPIO_Init+0x300>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_GPIO_Init+0x300>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f47f ae9d 	bne.w	800123c <HAL_GPIO_Init+0x10>
  }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	48000400 	.word	0x48000400
 800151c:	48000800 	.word	0x48000800
 8001520:	48000c00 	.word	0x48000c00
 8001524:	48001000 	.word	0x48001000
 8001528:	48001400 	.word	0x48001400
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d141      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	d131      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800154c:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001552:	4a46      	ldr	r2, [pc, #280]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001564:	4a41      	ldr	r2, [pc, #260]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800156c:	4b40      	ldr	r3, [pc, #256]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2232      	movs	r2, #50	; 0x32
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001582:	e002      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3b01      	subs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d102      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f2      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015aa:	d158      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e057      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015b6:	4a2d      	ldr	r2, [pc, #180]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015c0:	e04d      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c8:	d141      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d6:	d131      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f0:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2232      	movs	r2, #50	; 0x32
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800160e:	e002      	b.n	8001616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3b01      	subs	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001622:	d102      	bne.n	800162a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f2      	bne.n	8001610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001636:	d112      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e011      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800164c:	e007      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40007000 	.word	0x40007000
 8001670:	20000000 	.word	0x20000000
 8001674:	431bde83 	.word	0x431bde83

08001678 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001686:	6093      	str	r3, [r2, #8]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40007000 	.word	0x40007000

08001698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e301      	b.n	8001cae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b6:	4ba3      	ldr	r3, [pc, #652]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c0:	4ba0      	ldr	r3, [pc, #640]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3e>
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e2dc      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b91      	ldr	r3, [pc, #580]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a90      	ldr	r2, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a8a      	ldr	r2, [pc, #552]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a87      	ldr	r2, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b84      	ldr	r3, [pc, #528]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a80      	ldr	r2, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fc7c 	bl	800104c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc78 	bl	800104c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e2a1      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fc68 	bl	800104c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc64 	bl	800104c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e28d      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d075      	beq.n	800189a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b8:	4b62      	ldr	r3, [pc, #392]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x136>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_OscConfig+0x13c>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d11f      	bne.n	8001814 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x154>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e260      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b55      	ldr	r3, [pc, #340]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	4952      	ldr	r1, [pc, #328]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001800:	4b51      	ldr	r3, [pc, #324]	; (8001948 <HAL_RCC_OscConfig+0x2b0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fbd5 	bl	8000fb4 <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d043      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e24c      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d023      	beq.n	8001864 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181c:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a48      	ldr	r2, [pc, #288]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fc10 	bl	800104c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fc0c 	bl	800104c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e235      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	061b      	lsls	r3, r3, #24
 800185c:	4939      	ldr	r1, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e01a      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fbec 	bl	800104c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fbe8 	bl	800104c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e211      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d03c      	beq.n	8001920 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	4a23      	ldr	r2, [pc, #140]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff fbc5 	bl	800104c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fbc1 	bl	800104c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1ea      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ef      	beq.n	80018c6 <HAL_RCC_OscConfig+0x22e>
 80018e6:	e01b      	b.n	8001920 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fba8 	bl	800104c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fba4 	bl	800104c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1cd      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ef      	bne.n	8001900 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80ab 	beq.w	8001a84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x2b4>
 800193e:	2301      	movs	r3, #1
 8001940:	e005      	b.n	800194e <HAL_RCC_OscConfig+0x2b6>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	20000004 	.word	0x20000004
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00d      	beq.n	800196e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4bad      	ldr	r3, [pc, #692]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	4aac      	ldr	r2, [pc, #688]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6593      	str	r3, [r2, #88]	; 0x58
 800195e:	4baa      	ldr	r3, [pc, #680]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	4ba7      	ldr	r3, [pc, #668]	; (8001c0c <HAL_RCC_OscConfig+0x574>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197a:	4ba4      	ldr	r3, [pc, #656]	; (8001c0c <HAL_RCC_OscConfig+0x574>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4aa3      	ldr	r2, [pc, #652]	; (8001c0c <HAL_RCC_OscConfig+0x574>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb61 	bl	800104c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff fb5d 	bl	800104c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e186      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a0:	4b9a      	ldr	r3, [pc, #616]	; (8001c0c <HAL_RCC_OscConfig+0x574>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <HAL_RCC_OscConfig+0x32e>
 80019b4:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	4a93      	ldr	r2, [pc, #588]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c4:	e024      	b.n	8001a10 <HAL_RCC_OscConfig+0x378>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d110      	bne.n	80019f0 <HAL_RCC_OscConfig+0x358>
 80019ce:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d4:	4a8c      	ldr	r2, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019de:	4b8a      	ldr	r3, [pc, #552]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	4a88      	ldr	r2, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ee:	e00f      	b.n	8001a10 <HAL_RCC_OscConfig+0x378>
 80019f0:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f6:	4a84      	ldr	r2, [pc, #528]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a00:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	4a80      	ldr	r2, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d016      	beq.n	8001a46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb18 	bl	800104c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff fb14 	bl	800104c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e13b      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a36:	4b74      	ldr	r3, [pc, #464]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ed      	beq.n	8001a20 <HAL_RCC_OscConfig+0x388>
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff fb01 	bl	800104c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fafd 	bl	800104c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e124      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ed      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	4a62      	ldr	r2, [pc, #392]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a98:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fad0 	bl	800104c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab0:	f7ff facc 	bl	800104c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0f5      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac2:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ef      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x418>
 8001ad0:	e01b      	b.n	8001b0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad8:	4a4b      	ldr	r2, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fab3 	bl	800104c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aea:	f7ff faaf 	bl	800104c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0d8      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80cc 	beq.w	8001cac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	f000 8086 	beq.w	8001c2e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d15a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fa89 	bl	800104c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fa85 	bl	800104c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0ae      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_OscConfig+0x578>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6a11      	ldr	r1, [r2, #32]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b76:	0212      	lsls	r2, r2, #8
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b7e:	0852      	lsrs	r2, r2, #1
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0552      	lsls	r2, r2, #21
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8a:	0852      	lsrs	r2, r2, #1
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	0652      	lsls	r2, r2, #25
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b96:	06d2      	lsls	r2, r2, #27
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fa48 	bl	800104c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff fa44 	bl	800104c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e06d      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x528>
 8001bde:	e065      	b.n	8001cac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x570>)
 8001be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff fa2e 	bl	800104c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff fa2a 	bl	800104c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e053      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x620>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e9      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x620>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4924      	ldr	r1, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x620>)
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_OscConfig+0x624>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
 8001c2c:	e03e      	b.n	8001cac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e039      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_RCC_OscConfig+0x620>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d12c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d123      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d113      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d109      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	feeefffc 	.word	0xfeeefffc

08001cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e11e      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b91      	ldr	r3, [pc, #580]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 020f 	bic.w	r2, r3, #15
 8001cee:	498c      	ldr	r1, [pc, #560]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b8a      	ldr	r3, [pc, #552]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e106      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d073      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d129      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b81      	ldr	r3, [pc, #516]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0f4      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d2c:	f000 f99e 	bl	800206c <RCC_GetSysClockFreqFromPLLSource>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4a7c      	ldr	r2, [pc, #496]	; (8001f28 <HAL_RCC_ClockConfig+0x268>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d93f      	bls.n	8001dba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d3a:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d033      	beq.n	8001dba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d12f      	bne.n	8001dba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d5a:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d62:	4a70      	ldr	r2, [pc, #448]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e024      	b.n	8001dba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0c6      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0be      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d98:	f000 f8ce 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <HAL_RCC_ClockConfig+0x268>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d909      	bls.n	8001dba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001da6:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dae:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4957      	ldr	r1, [pc, #348]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f93e 	bl	800104c <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f93a 	bl	800104c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e095      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a42      	ldr	r2, [pc, #264]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e34:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4936      	ldr	r1, [pc, #216]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d21d      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 020f 	bic.w	r2, r3, #15
 8001e78:	4929      	ldr	r1, [pc, #164]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e80:	f7ff f8e4 	bl	800104c <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff f8e0 	bl	800104c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e03b      	b.n	8001f16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1ed      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4917      	ldr	r1, [pc, #92]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490f      	ldr	r1, [pc, #60]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eea:	f000 f825 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_RCC_ClockConfig+0x264>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490c      	ldr	r1, [pc, #48]	; (8001f2c <HAL_RCC_ClockConfig+0x26c>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x270>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_ClockConfig+0x274>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f850 	bl	8000fb4 <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	04c4b400 	.word	0x04c4b400
 8001f2c:	08004850 	.word	0x08004850
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e047      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e03e      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d136      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3301      	adds	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f96:	68d2      	ldr	r2, [r2, #12]
 8001f98:	0a12      	lsrs	r2, r2, #8
 8001f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
      break;
 8001fa4:	e00c      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	0a12      	lsrs	r2, r2, #8
 8001fb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
      break;
 8001fbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0e5b      	lsrs	r3, r3, #25
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e001      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fe0:	693b      	ldr	r3, [r7, #16]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002018:	f7ff fff0 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCC_GetPCLK1Freq+0x28>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08004860 	.word	0x08004860

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002044:	f7ff ffda 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08004860 	.word	0x08004860

0800206c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3301      	adds	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d10c      	bne.n	80020aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800209a:	68d2      	ldr	r2, [r2, #12]
 800209c:	0a12      	lsrs	r2, r2, #8
 800209e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
    break;
 80020a8:	e00c      	b.n	80020c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b4:	68d2      	ldr	r2, [r2, #12]
 80020b6:	0a12      	lsrs	r2, r2, #8
 80020b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    break;
 80020c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0e5b      	lsrs	r3, r3, #25
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	00f42400 	.word	0x00f42400

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002100:	2300      	movs	r3, #0
 8002102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002104:	2300      	movs	r3, #0
 8002106:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8098 	beq.w	8002246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10d      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213e:	2301      	movs	r3, #1
 8002140:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800214e:	f7fe ff7d 	bl	800104c <HAL_GetTick>
 8002152:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002154:	e009      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe ff79 	bl	800104c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d902      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	74fb      	strb	r3, [r7, #19]
        break;
 8002168:	e005      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ef      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d159      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01e      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	d019      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe ff39 	bl	800104c <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021dc:	e00b      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe ff35 	bl	800104c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	74fb      	strb	r3, [r7, #19]
            break;
 80021f4:	e006      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ec      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10b      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002220:	e008      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	74bb      	strb	r3, [r7, #18]
 8002226:	e005      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002234:	7c7b      	ldrb	r3, [r7, #17]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4ba6      	ldr	r3, [pc, #664]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	4aa5      	ldr	r2, [pc, #660]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002244:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002252:	4ba0      	ldr	r3, [pc, #640]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f023 0203 	bic.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	499c      	ldr	r1, [pc, #624]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002274:	4b97      	ldr	r3, [pc, #604]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 020c 	bic.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4994      	ldr	r1, [pc, #592]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002296:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	498b      	ldr	r1, [pc, #556]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b8:	4b86      	ldr	r3, [pc, #536]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	4983      	ldr	r1, [pc, #524]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022da:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	497a      	ldr	r1, [pc, #488]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fc:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4972      	ldr	r1, [pc, #456]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4969      	ldr	r1, [pc, #420]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002340:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4961      	ldr	r1, [pc, #388]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	4958      	ldr	r1, [pc, #352]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	4950      	ldr	r1, [pc, #320]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d015      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023bc:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	4942      	ldr	r1, [pc, #264]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023da:	d105      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023dc:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a3c      	ldr	r2, [pc, #240]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4934      	ldr	r1, [pc, #208]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002412:	d105      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	4926      	ldr	r1, [pc, #152]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244a:	d105      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	4918      	ldr	r1, [pc, #96]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002482:	d105      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d015      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	490a      	ldr	r1, [pc, #40]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ba:	d105      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e09d      	b.n	8002626 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fa:	d009      	beq.n	8002510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
 8002502:	e005      	b.n	8002510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fb62 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002546:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002550:	d902      	bls.n	8002558 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e002      	b.n	800255e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002566:	d007      	beq.n	8002578 <HAL_SPI_Init+0xa0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002570:	d002      	beq.n	8002578 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	f003 0204 	and.w	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e042      	b.n	80026c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fb10 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fb53 	bl	8002d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8b4 	bl	80027ec <UART_SetConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e01b      	b.n	80026c6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fbd2 	bl	8002e68 <UART_CheckIdleState>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08a      	sub	sp, #40	; 0x28
 80026d2:	af02      	add	r7, sp, #8
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d17b      	bne.n	80027e0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_UART_Transmit+0x26>
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e074      	b.n	80027e2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2221      	movs	r2, #33	; 0x21
 8002704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002708:	f7fe fca0 	bl	800104c <HAL_GetTick>
 800270c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002726:	d108      	bne.n	800273a <HAL_UART_Transmit+0x6c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e003      	b.n	8002742 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002742:	e030      	b.n	80027a6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2200      	movs	r2, #0
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fc34 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e03d      	b.n	80027e2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	3302      	adds	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e007      	b.n	8002794 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1c8      	bne.n	8002744 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fbfd 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e006      	b.n	80027e2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b5b0      	push	{r4, r5, r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4313      	orrs	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4baf      	ldr	r3, [pc, #700]	; (8002ad4 <UART_SetConfig+0x2e8>)
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	69f9      	ldr	r1, [r7, #28]
 8002820:	430b      	orrs	r3, r1
 8002822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4aa4      	ldr	r2, [pc, #656]	; (8002ad8 <UART_SetConfig+0x2ec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800285e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	69f9      	ldr	r1, [r7, #28]
 8002868:	430b      	orrs	r3, r1
 800286a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	f023 010f 	bic.w	r1, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a95      	ldr	r2, [pc, #596]	; (8002adc <UART_SetConfig+0x2f0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d120      	bne.n	80028ce <UART_SetConfig+0xe2>
 800288c:	4b94      	ldr	r3, [pc, #592]	; (8002ae0 <UART_SetConfig+0x2f4>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d816      	bhi.n	80028c8 <UART_SetConfig+0xdc>
 800289a:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <UART_SetConfig+0xb4>)
 800289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028bd 	.word	0x080028bd
 80028a8:	080028b7 	.word	0x080028b7
 80028ac:	080028c3 	.word	0x080028c3
 80028b0:	2301      	movs	r3, #1
 80028b2:	76fb      	strb	r3, [r7, #27]
 80028b4:	e0bc      	b.n	8002a30 <UART_SetConfig+0x244>
 80028b6:	2302      	movs	r3, #2
 80028b8:	76fb      	strb	r3, [r7, #27]
 80028ba:	e0b9      	b.n	8002a30 <UART_SetConfig+0x244>
 80028bc:	2304      	movs	r3, #4
 80028be:	76fb      	strb	r3, [r7, #27]
 80028c0:	e0b6      	b.n	8002a30 <UART_SetConfig+0x244>
 80028c2:	2308      	movs	r3, #8
 80028c4:	76fb      	strb	r3, [r7, #27]
 80028c6:	e0b3      	b.n	8002a30 <UART_SetConfig+0x244>
 80028c8:	2310      	movs	r3, #16
 80028ca:	76fb      	strb	r3, [r7, #27]
 80028cc:	e0b0      	b.n	8002a30 <UART_SetConfig+0x244>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a84      	ldr	r2, [pc, #528]	; (8002ae4 <UART_SetConfig+0x2f8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d132      	bne.n	800293e <UART_SetConfig+0x152>
 80028d8:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <UART_SetConfig+0x2f4>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d828      	bhi.n	8002938 <UART_SetConfig+0x14c>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <UART_SetConfig+0x100>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	08002921 	.word	0x08002921
 80028f0:	08002939 	.word	0x08002939
 80028f4:	08002939 	.word	0x08002939
 80028f8:	08002939 	.word	0x08002939
 80028fc:	0800292d 	.word	0x0800292d
 8002900:	08002939 	.word	0x08002939
 8002904:	08002939 	.word	0x08002939
 8002908:	08002939 	.word	0x08002939
 800290c:	08002927 	.word	0x08002927
 8002910:	08002939 	.word	0x08002939
 8002914:	08002939 	.word	0x08002939
 8002918:	08002939 	.word	0x08002939
 800291c:	08002933 	.word	0x08002933
 8002920:	2300      	movs	r3, #0
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	e084      	b.n	8002a30 <UART_SetConfig+0x244>
 8002926:	2302      	movs	r3, #2
 8002928:	76fb      	strb	r3, [r7, #27]
 800292a:	e081      	b.n	8002a30 <UART_SetConfig+0x244>
 800292c:	2304      	movs	r3, #4
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	e07e      	b.n	8002a30 <UART_SetConfig+0x244>
 8002932:	2308      	movs	r3, #8
 8002934:	76fb      	strb	r3, [r7, #27]
 8002936:	e07b      	b.n	8002a30 <UART_SetConfig+0x244>
 8002938:	2310      	movs	r3, #16
 800293a:	76fb      	strb	r3, [r7, #27]
 800293c:	e078      	b.n	8002a30 <UART_SetConfig+0x244>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a69      	ldr	r2, [pc, #420]	; (8002ae8 <UART_SetConfig+0x2fc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d120      	bne.n	800298a <UART_SetConfig+0x19e>
 8002948:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <UART_SetConfig+0x2f4>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002952:	2b30      	cmp	r3, #48	; 0x30
 8002954:	d013      	beq.n	800297e <UART_SetConfig+0x192>
 8002956:	2b30      	cmp	r3, #48	; 0x30
 8002958:	d814      	bhi.n	8002984 <UART_SetConfig+0x198>
 800295a:	2b20      	cmp	r3, #32
 800295c:	d009      	beq.n	8002972 <UART_SetConfig+0x186>
 800295e:	2b20      	cmp	r3, #32
 8002960:	d810      	bhi.n	8002984 <UART_SetConfig+0x198>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <UART_SetConfig+0x180>
 8002966:	2b10      	cmp	r3, #16
 8002968:	d006      	beq.n	8002978 <UART_SetConfig+0x18c>
 800296a:	e00b      	b.n	8002984 <UART_SetConfig+0x198>
 800296c:	2300      	movs	r3, #0
 800296e:	76fb      	strb	r3, [r7, #27]
 8002970:	e05e      	b.n	8002a30 <UART_SetConfig+0x244>
 8002972:	2302      	movs	r3, #2
 8002974:	76fb      	strb	r3, [r7, #27]
 8002976:	e05b      	b.n	8002a30 <UART_SetConfig+0x244>
 8002978:	2304      	movs	r3, #4
 800297a:	76fb      	strb	r3, [r7, #27]
 800297c:	e058      	b.n	8002a30 <UART_SetConfig+0x244>
 800297e:	2308      	movs	r3, #8
 8002980:	76fb      	strb	r3, [r7, #27]
 8002982:	e055      	b.n	8002a30 <UART_SetConfig+0x244>
 8002984:	2310      	movs	r3, #16
 8002986:	76fb      	strb	r3, [r7, #27]
 8002988:	e052      	b.n	8002a30 <UART_SetConfig+0x244>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a57      	ldr	r2, [pc, #348]	; (8002aec <UART_SetConfig+0x300>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d120      	bne.n	80029d6 <UART_SetConfig+0x1ea>
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <UART_SetConfig+0x2f4>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800299e:	2bc0      	cmp	r3, #192	; 0xc0
 80029a0:	d013      	beq.n	80029ca <UART_SetConfig+0x1de>
 80029a2:	2bc0      	cmp	r3, #192	; 0xc0
 80029a4:	d814      	bhi.n	80029d0 <UART_SetConfig+0x1e4>
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d009      	beq.n	80029be <UART_SetConfig+0x1d2>
 80029aa:	2b80      	cmp	r3, #128	; 0x80
 80029ac:	d810      	bhi.n	80029d0 <UART_SetConfig+0x1e4>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <UART_SetConfig+0x1cc>
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d006      	beq.n	80029c4 <UART_SetConfig+0x1d8>
 80029b6:	e00b      	b.n	80029d0 <UART_SetConfig+0x1e4>
 80029b8:	2300      	movs	r3, #0
 80029ba:	76fb      	strb	r3, [r7, #27]
 80029bc:	e038      	b.n	8002a30 <UART_SetConfig+0x244>
 80029be:	2302      	movs	r3, #2
 80029c0:	76fb      	strb	r3, [r7, #27]
 80029c2:	e035      	b.n	8002a30 <UART_SetConfig+0x244>
 80029c4:	2304      	movs	r3, #4
 80029c6:	76fb      	strb	r3, [r7, #27]
 80029c8:	e032      	b.n	8002a30 <UART_SetConfig+0x244>
 80029ca:	2308      	movs	r3, #8
 80029cc:	76fb      	strb	r3, [r7, #27]
 80029ce:	e02f      	b.n	8002a30 <UART_SetConfig+0x244>
 80029d0:	2310      	movs	r3, #16
 80029d2:	76fb      	strb	r3, [r7, #27]
 80029d4:	e02c      	b.n	8002a30 <UART_SetConfig+0x244>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3f      	ldr	r2, [pc, #252]	; (8002ad8 <UART_SetConfig+0x2ec>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d125      	bne.n	8002a2c <UART_SetConfig+0x240>
 80029e0:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <UART_SetConfig+0x2f4>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029ee:	d017      	beq.n	8002a20 <UART_SetConfig+0x234>
 80029f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029f4:	d817      	bhi.n	8002a26 <UART_SetConfig+0x23a>
 80029f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fa:	d00b      	beq.n	8002a14 <UART_SetConfig+0x228>
 80029fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a00:	d811      	bhi.n	8002a26 <UART_SetConfig+0x23a>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <UART_SetConfig+0x222>
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0a:	d006      	beq.n	8002a1a <UART_SetConfig+0x22e>
 8002a0c:	e00b      	b.n	8002a26 <UART_SetConfig+0x23a>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	76fb      	strb	r3, [r7, #27]
 8002a12:	e00d      	b.n	8002a30 <UART_SetConfig+0x244>
 8002a14:	2302      	movs	r3, #2
 8002a16:	76fb      	strb	r3, [r7, #27]
 8002a18:	e00a      	b.n	8002a30 <UART_SetConfig+0x244>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	76fb      	strb	r3, [r7, #27]
 8002a1e:	e007      	b.n	8002a30 <UART_SetConfig+0x244>
 8002a20:	2308      	movs	r3, #8
 8002a22:	76fb      	strb	r3, [r7, #27]
 8002a24:	e004      	b.n	8002a30 <UART_SetConfig+0x244>
 8002a26:	2310      	movs	r3, #16
 8002a28:	76fb      	strb	r3, [r7, #27]
 8002a2a:	e001      	b.n	8002a30 <UART_SetConfig+0x244>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <UART_SetConfig+0x2ec>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f040 809e 	bne.w	8002b78 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a3c:	7efb      	ldrb	r3, [r7, #27]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d823      	bhi.n	8002a8a <UART_SetConfig+0x29e>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <UART_SetConfig+0x25c>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002a8b 	.word	0x08002a8b
 8002a50:	08002a75 	.word	0x08002a75
 8002a54:	08002a8b 	.word	0x08002a8b
 8002a58:	08002a7b 	.word	0x08002a7b
 8002a5c:	08002a8b 	.word	0x08002a8b
 8002a60:	08002a8b 	.word	0x08002a8b
 8002a64:	08002a8b 	.word	0x08002a8b
 8002a68:	08002a83 	.word	0x08002a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f7ff fad2 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002a70:	6178      	str	r0, [r7, #20]
        break;
 8002a72:	e00f      	b.n	8002a94 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <UART_SetConfig+0x304>)
 8002a76:	617b      	str	r3, [r7, #20]
        break;
 8002a78:	e00c      	b.n	8002a94 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a7a:	f7ff fa5d 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8002a7e:	6178      	str	r0, [r7, #20]
        break;
 8002a80:	e008      	b.n	8002a94 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a86:	617b      	str	r3, [r7, #20]
        break;
 8002a88:	e004      	b.n	8002a94 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	76bb      	strb	r3, [r7, #26]
        break;
 8002a92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 812c 	beq.w	8002cf4 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <UART_SetConfig+0x308>)
 8002aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d305      	bcc.n	8002acc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d915      	bls.n	8002af8 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	76bb      	strb	r3, [r7, #26]
 8002ad0:	e110      	b.n	8002cf4 <UART_SetConfig+0x508>
 8002ad2:	bf00      	nop
 8002ad4:	cfff69f3 	.word	0xcfff69f3
 8002ad8:	40008000 	.word	0x40008000
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40004400 	.word	0x40004400
 8002ae8:	40004800 	.word	0x40004800
 8002aec:	40004c00 	.word	0x40004c00
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	08004868 	.word	0x08004868
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	4a85      	ldr	r2, [pc, #532]	; (8002d1c <UART_SetConfig+0x530>)
 8002b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	f7fd fc26 	bl	8000360 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	020b      	lsls	r3, r1, #8
 8002b26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b2a:	0202      	lsls	r2, r0, #8
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6849      	ldr	r1, [r1, #4]
 8002b30:	0849      	lsrs	r1, r1, #1
 8002b32:	4608      	mov	r0, r1
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	1814      	adds	r4, r2, r0
 8002b3a:	eb43 0501 	adc.w	r5, r3, r1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fc08 	bl	8000360 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5e:	d308      	bcc.n	8002b72 <UART_SetConfig+0x386>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b66:	d204      	bcs.n	8002b72 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e0c0      	b.n	8002cf4 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	76bb      	strb	r3, [r7, #26]
 8002b76:	e0bd      	b.n	8002cf4 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b80:	d164      	bne.n	8002c4c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002b82:	7efb      	ldrb	r3, [r7, #27]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d828      	bhi.n	8002bda <UART_SetConfig+0x3ee>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <UART_SetConfig+0x3a4>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bbd 	.word	0x08002bbd
 8002b98:	08002bc5 	.word	0x08002bc5
 8002b9c:	08002bdb 	.word	0x08002bdb
 8002ba0:	08002bcb 	.word	0x08002bcb
 8002ba4:	08002bdb 	.word	0x08002bdb
 8002ba8:	08002bdb 	.word	0x08002bdb
 8002bac:	08002bdb 	.word	0x08002bdb
 8002bb0:	08002bd3 	.word	0x08002bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff fa2e 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	6178      	str	r0, [r7, #20]
        break;
 8002bba:	e013      	b.n	8002be4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff fa40 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	6178      	str	r0, [r7, #20]
        break;
 8002bc2:	e00f      	b.n	8002be4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc4:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <UART_SetConfig+0x534>)
 8002bc6:	617b      	str	r3, [r7, #20]
        break;
 8002bc8:	e00c      	b.n	8002be4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bca:	f7ff f9b5 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8002bce:	6178      	str	r0, [r7, #20]
        break;
 8002bd0:	e008      	b.n	8002be4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd6:	617b      	str	r3, [r7, #20]
        break;
 8002bd8:	e004      	b.n	8002be4 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	76bb      	strb	r3, [r7, #26]
        break;
 8002be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8084 	beq.w	8002cf4 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <UART_SetConfig+0x530>)
 8002bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bfe:	005a      	lsls	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	d916      	bls.n	8002c46 <UART_SetConfig+0x45a>
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d212      	bcs.n	8002c46 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f023 030f 	bic.w	r3, r3, #15
 8002c28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	89fb      	ldrh	r3, [r7, #14]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	89fa      	ldrh	r2, [r7, #14]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e056      	b.n	8002cf4 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	76bb      	strb	r3, [r7, #26]
 8002c4a:	e053      	b.n	8002cf4 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c4c:	7efb      	ldrb	r3, [r7, #27]
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d827      	bhi.n	8002ca2 <UART_SetConfig+0x4b6>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <UART_SetConfig+0x46c>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	08002c8d 	.word	0x08002c8d
 8002c64:	08002ca3 	.word	0x08002ca3
 8002c68:	08002c93 	.word	0x08002c93
 8002c6c:	08002ca3 	.word	0x08002ca3
 8002c70:	08002ca3 	.word	0x08002ca3
 8002c74:	08002ca3 	.word	0x08002ca3
 8002c78:	08002c9b 	.word	0x08002c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff f9ca 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002c80:	6178      	str	r0, [r7, #20]
        break;
 8002c82:	e013      	b.n	8002cac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c84:	f7ff f9dc 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 8002c88:	6178      	str	r0, [r7, #20]
        break;
 8002c8a:	e00f      	b.n	8002cac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <UART_SetConfig+0x534>)
 8002c8e:	617b      	str	r3, [r7, #20]
        break;
 8002c90:	e00c      	b.n	8002cac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c92:	f7ff f951 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8002c96:	6178      	str	r0, [r7, #20]
        break;
 8002c98:	e008      	b.n	8002cac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9e:	617b      	str	r3, [r7, #20]
        break;
 8002ca0:	e004      	b.n	8002cac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	76bb      	strb	r3, [r7, #26]
        break;
 8002caa:	bf00      	nop
    }

    if (pclk != 0U)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d020      	beq.n	8002cf4 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <UART_SetConfig+0x530>)
 8002cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	441a      	add	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d909      	bls.n	8002cf0 <UART_SetConfig+0x504>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d205      	bcs.n	8002cf0 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e001      	b.n	8002cf4 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d10:	7ebb      	ldrb	r3, [r7, #26]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	08004868 	.word	0x08004868
 8002d20:	00f42400 	.word	0x00f42400

08002d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01a      	beq.n	8002e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e22:	d10a      	bne.n	8002e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b098      	sub	sp, #96	; 0x60
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e78:	f7fe f8e8 	bl	800104c <HAL_GetTick>
 8002e7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d12f      	bne.n	8002eec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f88e 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d022      	beq.n	8002eec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e6      	bne.n	8002ea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e063      	b.n	8002fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d149      	bne.n	8002f8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f02:	2200      	movs	r2, #0
 8002f04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f857 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d03c      	beq.n	8002f8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	623b      	str	r3, [r7, #32]
   return(result);
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
 8002f34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e6      	bne.n	8002f14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3308      	adds	r3, #8
 8002f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f66:	61fa      	str	r2, [r7, #28]
 8002f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	617b      	str	r3, [r7, #20]
   return(result);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e5      	bne.n	8002f46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e012      	b.n	8002fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3758      	adds	r7, #88	; 0x58
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	e04f      	b.n	800306e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d04b      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe f839 	bl	800104c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e04e      	b.n	800308e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d037      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d034      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d031      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d110      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2208      	movs	r2, #8
 800301e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f838 	bl	8003096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2208      	movs	r2, #8
 800302a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e029      	b.n	800308e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003048:	d111      	bne.n	800306e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f81e 	bl	8003096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e00f      	b.n	800308e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	429a      	cmp	r2, r3
 800308a:	d0a0      	beq.n	8002fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003096:	b480      	push	{r7}
 8003098:	b095      	sub	sp, #84	; 0x54
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	643b      	str	r3, [r7, #64]	; 0x40
 80030be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e6      	bne.n	800309e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3308      	adds	r3, #8
 80030d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3308      	adds	r3, #8
 80030f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e3      	bne.n	80030d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d118      	bne.n	8003142 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	60bb      	str	r3, [r7, #8]
   return(result);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	613b      	str	r3, [r7, #16]
   return(result);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e6      	bne.n	8003110 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003156:	bf00      	nop
 8003158:	3754      	adds	r7, #84	; 0x54
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_UARTEx_DisableFifoMode+0x16>
 8003174:	2302      	movs	r3, #2
 8003176:	e027      	b.n	80031c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80031a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e02d      	b.n	8003248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f84f 	bl	80032cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003264:	2302      	movs	r3, #2
 8003266:	e02d      	b.n	80032c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f811 	bl	80032cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d108      	bne.n	80032ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032ec:	e031      	b.n	8003352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032ee:	2308      	movs	r3, #8
 80032f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032f2:	2308      	movs	r3, #8
 80032f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	0e5b      	lsrs	r3, r3, #25
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	0f5b      	lsrs	r3, r3, #29
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003316:	7bbb      	ldrb	r3, [r7, #14]
 8003318:	7b3a      	ldrb	r2, [r7, #12]
 800331a:	4911      	ldr	r1, [pc, #68]	; (8003360 <UARTEx_SetNbDataToProcess+0x94>)
 800331c:	5c8a      	ldrb	r2, [r1, r2]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003322:	7b3a      	ldrb	r2, [r7, #12]
 8003324:	490f      	ldr	r1, [pc, #60]	; (8003364 <UARTEx_SetNbDataToProcess+0x98>)
 8003326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003328:	fb93 f3f2 	sdiv	r3, r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	7b7a      	ldrb	r2, [r7, #13]
 8003338:	4909      	ldr	r1, [pc, #36]	; (8003360 <UARTEx_SetNbDataToProcess+0x94>)
 800333a:	5c8a      	ldrb	r2, [r1, r2]
 800333c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003340:	7b7a      	ldrb	r2, [r7, #13]
 8003342:	4908      	ldr	r1, [pc, #32]	; (8003364 <UARTEx_SetNbDataToProcess+0x98>)
 8003344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003346:	fb93 f3f2 	sdiv	r3, r3, r2
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	08004880 	.word	0x08004880
 8003364:	08004888 	.word	0x08004888

08003368 <__errno>:
 8003368:	4b01      	ldr	r3, [pc, #4]	; (8003370 <__errno+0x8>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c

08003374 <__libc_init_array>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4d0d      	ldr	r5, [pc, #52]	; (80033ac <__libc_init_array+0x38>)
 8003378:	4c0d      	ldr	r4, [pc, #52]	; (80033b0 <__libc_init_array+0x3c>)
 800337a:	1b64      	subs	r4, r4, r5
 800337c:	10a4      	asrs	r4, r4, #2
 800337e:	2600      	movs	r6, #0
 8003380:	42a6      	cmp	r6, r4
 8003382:	d109      	bne.n	8003398 <__libc_init_array+0x24>
 8003384:	4d0b      	ldr	r5, [pc, #44]	; (80033b4 <__libc_init_array+0x40>)
 8003386:	4c0c      	ldr	r4, [pc, #48]	; (80033b8 <__libc_init_array+0x44>)
 8003388:	f001 f84a 	bl	8004420 <_init>
 800338c:	1b64      	subs	r4, r4, r5
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	2600      	movs	r6, #0
 8003392:	42a6      	cmp	r6, r4
 8003394:	d105      	bne.n	80033a2 <__libc_init_array+0x2e>
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	f855 3b04 	ldr.w	r3, [r5], #4
 800339c:	4798      	blx	r3
 800339e:	3601      	adds	r6, #1
 80033a0:	e7ee      	b.n	8003380 <__libc_init_array+0xc>
 80033a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a6:	4798      	blx	r3
 80033a8:	3601      	adds	r6, #1
 80033aa:	e7f2      	b.n	8003392 <__libc_init_array+0x1e>
 80033ac:	08004930 	.word	0x08004930
 80033b0:	08004930 	.word	0x08004930
 80033b4:	08004930 	.word	0x08004930
 80033b8:	08004934 	.word	0x08004934

080033bc <memset>:
 80033bc:	4402      	add	r2, r0
 80033be:	4603      	mov	r3, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <iprintf>:
 80033cc:	b40f      	push	{r0, r1, r2, r3}
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <iprintf+0x2c>)
 80033d0:	b513      	push	{r0, r1, r4, lr}
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	b124      	cbz	r4, 80033e0 <iprintf+0x14>
 80033d6:	69a3      	ldr	r3, [r4, #24]
 80033d8:	b913      	cbnz	r3, 80033e0 <iprintf+0x14>
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 fa74 	bl	80038c8 <__sinit>
 80033e0:	ab05      	add	r3, sp, #20
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	68a1      	ldr	r1, [r4, #8]
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 fc45 	bl	8003c78 <_vfiprintf_r>
 80033ee:	b002      	add	sp, #8
 80033f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f4:	b004      	add	sp, #16
 80033f6:	4770      	bx	lr
 80033f8:	2000000c 	.word	0x2000000c

080033fc <putchar>:
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <putchar+0x28>)
 80033fe:	b513      	push	{r0, r1, r4, lr}
 8003400:	681c      	ldr	r4, [r3, #0]
 8003402:	4601      	mov	r1, r0
 8003404:	b134      	cbz	r4, 8003414 <putchar+0x18>
 8003406:	69a3      	ldr	r3, [r4, #24]
 8003408:	b923      	cbnz	r3, 8003414 <putchar+0x18>
 800340a:	9001      	str	r0, [sp, #4]
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fa5b 	bl	80038c8 <__sinit>
 8003412:	9901      	ldr	r1, [sp, #4]
 8003414:	68a2      	ldr	r2, [r4, #8]
 8003416:	4620      	mov	r0, r4
 8003418:	b002      	add	sp, #8
 800341a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341e:	f000 beef 	b.w	8004200 <_putc_r>
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c

08003428 <_puts_r>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	460e      	mov	r6, r1
 800342c:	4605      	mov	r5, r0
 800342e:	b118      	cbz	r0, 8003438 <_puts_r+0x10>
 8003430:	6983      	ldr	r3, [r0, #24]
 8003432:	b90b      	cbnz	r3, 8003438 <_puts_r+0x10>
 8003434:	f000 fa48 	bl	80038c8 <__sinit>
 8003438:	69ab      	ldr	r3, [r5, #24]
 800343a:	68ac      	ldr	r4, [r5, #8]
 800343c:	b913      	cbnz	r3, 8003444 <_puts_r+0x1c>
 800343e:	4628      	mov	r0, r5
 8003440:	f000 fa42 	bl	80038c8 <__sinit>
 8003444:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <_puts_r+0xd0>)
 8003446:	429c      	cmp	r4, r3
 8003448:	d120      	bne.n	800348c <_puts_r+0x64>
 800344a:	686c      	ldr	r4, [r5, #4]
 800344c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800344e:	07db      	lsls	r3, r3, #31
 8003450:	d405      	bmi.n	800345e <_puts_r+0x36>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	0598      	lsls	r0, r3, #22
 8003456:	d402      	bmi.n	800345e <_puts_r+0x36>
 8003458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800345a:	f000 fad3 	bl	8003a04 <__retarget_lock_acquire_recursive>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	0719      	lsls	r1, r3, #28
 8003462:	d51d      	bpl.n	80034a0 <_puts_r+0x78>
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	b1db      	cbz	r3, 80034a0 <_puts_r+0x78>
 8003468:	3e01      	subs	r6, #1
 800346a:	68a3      	ldr	r3, [r4, #8]
 800346c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003470:	3b01      	subs	r3, #1
 8003472:	60a3      	str	r3, [r4, #8]
 8003474:	bb39      	cbnz	r1, 80034c6 <_puts_r+0x9e>
 8003476:	2b00      	cmp	r3, #0
 8003478:	da38      	bge.n	80034ec <_puts_r+0xc4>
 800347a:	4622      	mov	r2, r4
 800347c:	210a      	movs	r1, #10
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f848 	bl	8003514 <__swbuf_r>
 8003484:	3001      	adds	r0, #1
 8003486:	d011      	beq.n	80034ac <_puts_r+0x84>
 8003488:	250a      	movs	r5, #10
 800348a:	e011      	b.n	80034b0 <_puts_r+0x88>
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <_puts_r+0xd4>)
 800348e:	429c      	cmp	r4, r3
 8003490:	d101      	bne.n	8003496 <_puts_r+0x6e>
 8003492:	68ac      	ldr	r4, [r5, #8]
 8003494:	e7da      	b.n	800344c <_puts_r+0x24>
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <_puts_r+0xd8>)
 8003498:	429c      	cmp	r4, r3
 800349a:	bf08      	it	eq
 800349c:	68ec      	ldreq	r4, [r5, #12]
 800349e:	e7d5      	b.n	800344c <_puts_r+0x24>
 80034a0:	4621      	mov	r1, r4
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 f888 	bl	80035b8 <__swsetup_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d0dd      	beq.n	8003468 <_puts_r+0x40>
 80034ac:	f04f 35ff 	mov.w	r5, #4294967295
 80034b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b2:	07da      	lsls	r2, r3, #31
 80034b4:	d405      	bmi.n	80034c2 <_puts_r+0x9a>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	059b      	lsls	r3, r3, #22
 80034ba:	d402      	bmi.n	80034c2 <_puts_r+0x9a>
 80034bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034be:	f000 faa2 	bl	8003a06 <__retarget_lock_release_recursive>
 80034c2:	4628      	mov	r0, r5
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da04      	bge.n	80034d4 <_puts_r+0xac>
 80034ca:	69a2      	ldr	r2, [r4, #24]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	dc06      	bgt.n	80034de <_puts_r+0xb6>
 80034d0:	290a      	cmp	r1, #10
 80034d2:	d004      	beq.n	80034de <_puts_r+0xb6>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	6022      	str	r2, [r4, #0]
 80034da:	7019      	strb	r1, [r3, #0]
 80034dc:	e7c5      	b.n	800346a <_puts_r+0x42>
 80034de:	4622      	mov	r2, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 f817 	bl	8003514 <__swbuf_r>
 80034e6:	3001      	adds	r0, #1
 80034e8:	d1bf      	bne.n	800346a <_puts_r+0x42>
 80034ea:	e7df      	b.n	80034ac <_puts_r+0x84>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	250a      	movs	r5, #10
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	6022      	str	r2, [r4, #0]
 80034f4:	701d      	strb	r5, [r3, #0]
 80034f6:	e7db      	b.n	80034b0 <_puts_r+0x88>
 80034f8:	080048b4 	.word	0x080048b4
 80034fc:	080048d4 	.word	0x080048d4
 8003500:	08004894 	.word	0x08004894

08003504 <puts>:
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <puts+0xc>)
 8003506:	4601      	mov	r1, r0
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f7ff bf8d 	b.w	8003428 <_puts_r>
 800350e:	bf00      	nop
 8003510:	2000000c 	.word	0x2000000c

08003514 <__swbuf_r>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	460e      	mov	r6, r1
 8003518:	4614      	mov	r4, r2
 800351a:	4605      	mov	r5, r0
 800351c:	b118      	cbz	r0, 8003526 <__swbuf_r+0x12>
 800351e:	6983      	ldr	r3, [r0, #24]
 8003520:	b90b      	cbnz	r3, 8003526 <__swbuf_r+0x12>
 8003522:	f000 f9d1 	bl	80038c8 <__sinit>
 8003526:	4b21      	ldr	r3, [pc, #132]	; (80035ac <__swbuf_r+0x98>)
 8003528:	429c      	cmp	r4, r3
 800352a:	d12b      	bne.n	8003584 <__swbuf_r+0x70>
 800352c:	686c      	ldr	r4, [r5, #4]
 800352e:	69a3      	ldr	r3, [r4, #24]
 8003530:	60a3      	str	r3, [r4, #8]
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	071a      	lsls	r2, r3, #28
 8003536:	d52f      	bpl.n	8003598 <__swbuf_r+0x84>
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	b36b      	cbz	r3, 8003598 <__swbuf_r+0x84>
 800353c:	6923      	ldr	r3, [r4, #16]
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	1ac0      	subs	r0, r0, r3
 8003542:	6963      	ldr	r3, [r4, #20]
 8003544:	b2f6      	uxtb	r6, r6
 8003546:	4283      	cmp	r3, r0
 8003548:	4637      	mov	r7, r6
 800354a:	dc04      	bgt.n	8003556 <__swbuf_r+0x42>
 800354c:	4621      	mov	r1, r4
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f926 	bl	80037a0 <_fflush_r>
 8003554:	bb30      	cbnz	r0, 80035a4 <__swbuf_r+0x90>
 8003556:	68a3      	ldr	r3, [r4, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	60a3      	str	r3, [r4, #8]
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	6022      	str	r2, [r4, #0]
 8003562:	701e      	strb	r6, [r3, #0]
 8003564:	6963      	ldr	r3, [r4, #20]
 8003566:	3001      	adds	r0, #1
 8003568:	4283      	cmp	r3, r0
 800356a:	d004      	beq.n	8003576 <__swbuf_r+0x62>
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	07db      	lsls	r3, r3, #31
 8003570:	d506      	bpl.n	8003580 <__swbuf_r+0x6c>
 8003572:	2e0a      	cmp	r6, #10
 8003574:	d104      	bne.n	8003580 <__swbuf_r+0x6c>
 8003576:	4621      	mov	r1, r4
 8003578:	4628      	mov	r0, r5
 800357a:	f000 f911 	bl	80037a0 <_fflush_r>
 800357e:	b988      	cbnz	r0, 80035a4 <__swbuf_r+0x90>
 8003580:	4638      	mov	r0, r7
 8003582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <__swbuf_r+0x9c>)
 8003586:	429c      	cmp	r4, r3
 8003588:	d101      	bne.n	800358e <__swbuf_r+0x7a>
 800358a:	68ac      	ldr	r4, [r5, #8]
 800358c:	e7cf      	b.n	800352e <__swbuf_r+0x1a>
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <__swbuf_r+0xa0>)
 8003590:	429c      	cmp	r4, r3
 8003592:	bf08      	it	eq
 8003594:	68ec      	ldreq	r4, [r5, #12]
 8003596:	e7ca      	b.n	800352e <__swbuf_r+0x1a>
 8003598:	4621      	mov	r1, r4
 800359a:	4628      	mov	r0, r5
 800359c:	f000 f80c 	bl	80035b8 <__swsetup_r>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d0cb      	beq.n	800353c <__swbuf_r+0x28>
 80035a4:	f04f 37ff 	mov.w	r7, #4294967295
 80035a8:	e7ea      	b.n	8003580 <__swbuf_r+0x6c>
 80035aa:	bf00      	nop
 80035ac:	080048b4 	.word	0x080048b4
 80035b0:	080048d4 	.word	0x080048d4
 80035b4:	08004894 	.word	0x08004894

080035b8 <__swsetup_r>:
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <__swsetup_r+0xcc>)
 80035ba:	b570      	push	{r4, r5, r6, lr}
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	4606      	mov	r6, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	b125      	cbz	r5, 80035ce <__swsetup_r+0x16>
 80035c4:	69ab      	ldr	r3, [r5, #24]
 80035c6:	b913      	cbnz	r3, 80035ce <__swsetup_r+0x16>
 80035c8:	4628      	mov	r0, r5
 80035ca:	f000 f97d 	bl	80038c8 <__sinit>
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <__swsetup_r+0xd0>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d10f      	bne.n	80035f4 <__swsetup_r+0x3c>
 80035d4:	686c      	ldr	r4, [r5, #4]
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035dc:	0719      	lsls	r1, r3, #28
 80035de:	d42c      	bmi.n	800363a <__swsetup_r+0x82>
 80035e0:	06dd      	lsls	r5, r3, #27
 80035e2:	d411      	bmi.n	8003608 <__swsetup_r+0x50>
 80035e4:	2309      	movs	r3, #9
 80035e6:	6033      	str	r3, [r6, #0]
 80035e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
 80035f2:	e03e      	b.n	8003672 <__swsetup_r+0xba>
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <__swsetup_r+0xd4>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <__swsetup_r+0x46>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7eb      	b.n	80035d6 <__swsetup_r+0x1e>
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <__swsetup_r+0xd8>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7e6      	b.n	80035d6 <__swsetup_r+0x1e>
 8003608:	0758      	lsls	r0, r3, #29
 800360a:	d512      	bpl.n	8003632 <__swsetup_r+0x7a>
 800360c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800360e:	b141      	cbz	r1, 8003622 <__swsetup_r+0x6a>
 8003610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003614:	4299      	cmp	r1, r3
 8003616:	d002      	beq.n	800361e <__swsetup_r+0x66>
 8003618:	4630      	mov	r0, r6
 800361a:	f000 fa59 	bl	8003ad0 <_free_r>
 800361e:	2300      	movs	r3, #0
 8003620:	6363      	str	r3, [r4, #52]	; 0x34
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	6063      	str	r3, [r4, #4]
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	b94b      	cbnz	r3, 8003652 <__swsetup_r+0x9a>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d003      	beq.n	8003652 <__swsetup_r+0x9a>
 800364a:	4621      	mov	r1, r4
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f9ff 	bl	8003a50 <__smakebuf_r>
 8003652:	89a0      	ldrh	r0, [r4, #12]
 8003654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003658:	f010 0301 	ands.w	r3, r0, #1
 800365c:	d00a      	beq.n	8003674 <__swsetup_r+0xbc>
 800365e:	2300      	movs	r3, #0
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	6963      	ldr	r3, [r4, #20]
 8003664:	425b      	negs	r3, r3
 8003666:	61a3      	str	r3, [r4, #24]
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	b943      	cbnz	r3, 800367e <__swsetup_r+0xc6>
 800366c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003670:	d1ba      	bne.n	80035e8 <__swsetup_r+0x30>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	0781      	lsls	r1, r0, #30
 8003676:	bf58      	it	pl
 8003678:	6963      	ldrpl	r3, [r4, #20]
 800367a:	60a3      	str	r3, [r4, #8]
 800367c:	e7f4      	b.n	8003668 <__swsetup_r+0xb0>
 800367e:	2000      	movs	r0, #0
 8003680:	e7f7      	b.n	8003672 <__swsetup_r+0xba>
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c
 8003688:	080048b4 	.word	0x080048b4
 800368c:	080048d4 	.word	0x080048d4
 8003690:	08004894 	.word	0x08004894

08003694 <__sflush_r>:
 8003694:	898a      	ldrh	r2, [r1, #12]
 8003696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	4605      	mov	r5, r0
 800369c:	0710      	lsls	r0, r2, #28
 800369e:	460c      	mov	r4, r1
 80036a0:	d458      	bmi.n	8003754 <__sflush_r+0xc0>
 80036a2:	684b      	ldr	r3, [r1, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	dc05      	bgt.n	80036b4 <__sflush_r+0x20>
 80036a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dc02      	bgt.n	80036b4 <__sflush_r+0x20>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	d0f9      	beq.n	80036ae <__sflush_r+0x1a>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c0:	682f      	ldr	r7, [r5, #0]
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	d032      	beq.n	800372c <__sflush_r+0x98>
 80036c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	075a      	lsls	r2, r3, #29
 80036cc:	d505      	bpl.n	80036da <__sflush_r+0x46>
 80036ce:	6863      	ldr	r3, [r4, #4]
 80036d0:	1ac0      	subs	r0, r0, r3
 80036d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d4:	b10b      	cbz	r3, 80036da <__sflush_r+0x46>
 80036d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d8:	1ac0      	subs	r0, r0, r3
 80036da:	2300      	movs	r3, #0
 80036dc:	4602      	mov	r2, r0
 80036de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e0:	6a21      	ldr	r1, [r4, #32]
 80036e2:	4628      	mov	r0, r5
 80036e4:	47b0      	blx	r6
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	d106      	bne.n	80036fa <__sflush_r+0x66>
 80036ec:	6829      	ldr	r1, [r5, #0]
 80036ee:	291d      	cmp	r1, #29
 80036f0:	d82c      	bhi.n	800374c <__sflush_r+0xb8>
 80036f2:	4a2a      	ldr	r2, [pc, #168]	; (800379c <__sflush_r+0x108>)
 80036f4:	40ca      	lsrs	r2, r1
 80036f6:	07d6      	lsls	r6, r2, #31
 80036f8:	d528      	bpl.n	800374c <__sflush_r+0xb8>
 80036fa:	2200      	movs	r2, #0
 80036fc:	6062      	str	r2, [r4, #4]
 80036fe:	04d9      	lsls	r1, r3, #19
 8003700:	6922      	ldr	r2, [r4, #16]
 8003702:	6022      	str	r2, [r4, #0]
 8003704:	d504      	bpl.n	8003710 <__sflush_r+0x7c>
 8003706:	1c42      	adds	r2, r0, #1
 8003708:	d101      	bne.n	800370e <__sflush_r+0x7a>
 800370a:	682b      	ldr	r3, [r5, #0]
 800370c:	b903      	cbnz	r3, 8003710 <__sflush_r+0x7c>
 800370e:	6560      	str	r0, [r4, #84]	; 0x54
 8003710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003712:	602f      	str	r7, [r5, #0]
 8003714:	2900      	cmp	r1, #0
 8003716:	d0ca      	beq.n	80036ae <__sflush_r+0x1a>
 8003718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800371c:	4299      	cmp	r1, r3
 800371e:	d002      	beq.n	8003726 <__sflush_r+0x92>
 8003720:	4628      	mov	r0, r5
 8003722:	f000 f9d5 	bl	8003ad0 <_free_r>
 8003726:	2000      	movs	r0, #0
 8003728:	6360      	str	r0, [r4, #52]	; 0x34
 800372a:	e7c1      	b.n	80036b0 <__sflush_r+0x1c>
 800372c:	6a21      	ldr	r1, [r4, #32]
 800372e:	2301      	movs	r3, #1
 8003730:	4628      	mov	r0, r5
 8003732:	47b0      	blx	r6
 8003734:	1c41      	adds	r1, r0, #1
 8003736:	d1c7      	bne.n	80036c8 <__sflush_r+0x34>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0c4      	beq.n	80036c8 <__sflush_r+0x34>
 800373e:	2b1d      	cmp	r3, #29
 8003740:	d001      	beq.n	8003746 <__sflush_r+0xb2>
 8003742:	2b16      	cmp	r3, #22
 8003744:	d101      	bne.n	800374a <__sflush_r+0xb6>
 8003746:	602f      	str	r7, [r5, #0]
 8003748:	e7b1      	b.n	80036ae <__sflush_r+0x1a>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	e7ad      	b.n	80036b0 <__sflush_r+0x1c>
 8003754:	690f      	ldr	r7, [r1, #16]
 8003756:	2f00      	cmp	r7, #0
 8003758:	d0a9      	beq.n	80036ae <__sflush_r+0x1a>
 800375a:	0793      	lsls	r3, r2, #30
 800375c:	680e      	ldr	r6, [r1, #0]
 800375e:	bf08      	it	eq
 8003760:	694b      	ldreq	r3, [r1, #20]
 8003762:	600f      	str	r7, [r1, #0]
 8003764:	bf18      	it	ne
 8003766:	2300      	movne	r3, #0
 8003768:	eba6 0807 	sub.w	r8, r6, r7
 800376c:	608b      	str	r3, [r1, #8]
 800376e:	f1b8 0f00 	cmp.w	r8, #0
 8003772:	dd9c      	ble.n	80036ae <__sflush_r+0x1a>
 8003774:	6a21      	ldr	r1, [r4, #32]
 8003776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003778:	4643      	mov	r3, r8
 800377a:	463a      	mov	r2, r7
 800377c:	4628      	mov	r0, r5
 800377e:	47b0      	blx	r6
 8003780:	2800      	cmp	r0, #0
 8003782:	dc06      	bgt.n	8003792 <__sflush_r+0xfe>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	e78e      	b.n	80036b0 <__sflush_r+0x1c>
 8003792:	4407      	add	r7, r0
 8003794:	eba8 0800 	sub.w	r8, r8, r0
 8003798:	e7e9      	b.n	800376e <__sflush_r+0xda>
 800379a:	bf00      	nop
 800379c:	20400001 	.word	0x20400001

080037a0 <_fflush_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	4605      	mov	r5, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	b913      	cbnz	r3, 80037b0 <_fflush_r+0x10>
 80037aa:	2500      	movs	r5, #0
 80037ac:	4628      	mov	r0, r5
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	b118      	cbz	r0, 80037ba <_fflush_r+0x1a>
 80037b2:	6983      	ldr	r3, [r0, #24]
 80037b4:	b90b      	cbnz	r3, 80037ba <_fflush_r+0x1a>
 80037b6:	f000 f887 	bl	80038c8 <__sinit>
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <_fflush_r+0x6c>)
 80037bc:	429c      	cmp	r4, r3
 80037be:	d11b      	bne.n	80037f8 <_fflush_r+0x58>
 80037c0:	686c      	ldr	r4, [r5, #4]
 80037c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <_fflush_r+0xa>
 80037ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037cc:	07d0      	lsls	r0, r2, #31
 80037ce:	d404      	bmi.n	80037da <_fflush_r+0x3a>
 80037d0:	0599      	lsls	r1, r3, #22
 80037d2:	d402      	bmi.n	80037da <_fflush_r+0x3a>
 80037d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037d6:	f000 f915 	bl	8003a04 <__retarget_lock_acquire_recursive>
 80037da:	4628      	mov	r0, r5
 80037dc:	4621      	mov	r1, r4
 80037de:	f7ff ff59 	bl	8003694 <__sflush_r>
 80037e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e4:	07da      	lsls	r2, r3, #31
 80037e6:	4605      	mov	r5, r0
 80037e8:	d4e0      	bmi.n	80037ac <_fflush_r+0xc>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	059b      	lsls	r3, r3, #22
 80037ee:	d4dd      	bmi.n	80037ac <_fflush_r+0xc>
 80037f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037f2:	f000 f908 	bl	8003a06 <__retarget_lock_release_recursive>
 80037f6:	e7d9      	b.n	80037ac <_fflush_r+0xc>
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <_fflush_r+0x70>)
 80037fa:	429c      	cmp	r4, r3
 80037fc:	d101      	bne.n	8003802 <_fflush_r+0x62>
 80037fe:	68ac      	ldr	r4, [r5, #8]
 8003800:	e7df      	b.n	80037c2 <_fflush_r+0x22>
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <_fflush_r+0x74>)
 8003804:	429c      	cmp	r4, r3
 8003806:	bf08      	it	eq
 8003808:	68ec      	ldreq	r4, [r5, #12]
 800380a:	e7da      	b.n	80037c2 <_fflush_r+0x22>
 800380c:	080048b4 	.word	0x080048b4
 8003810:	080048d4 	.word	0x080048d4
 8003814:	08004894 	.word	0x08004894

08003818 <std>:
 8003818:	2300      	movs	r3, #0
 800381a:	b510      	push	{r4, lr}
 800381c:	4604      	mov	r4, r0
 800381e:	e9c0 3300 	strd	r3, r3, [r0]
 8003822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003826:	6083      	str	r3, [r0, #8]
 8003828:	8181      	strh	r1, [r0, #12]
 800382a:	6643      	str	r3, [r0, #100]	; 0x64
 800382c:	81c2      	strh	r2, [r0, #14]
 800382e:	6183      	str	r3, [r0, #24]
 8003830:	4619      	mov	r1, r3
 8003832:	2208      	movs	r2, #8
 8003834:	305c      	adds	r0, #92	; 0x5c
 8003836:	f7ff fdc1 	bl	80033bc <memset>
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <std+0x38>)
 800383c:	6263      	str	r3, [r4, #36]	; 0x24
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <std+0x3c>)
 8003840:	62a3      	str	r3, [r4, #40]	; 0x28
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std+0x40>)
 8003844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <std+0x44>)
 8003848:	6224      	str	r4, [r4, #32]
 800384a:	6323      	str	r3, [r4, #48]	; 0x30
 800384c:	bd10      	pop	{r4, pc}
 800384e:	bf00      	nop
 8003850:	080042b1 	.word	0x080042b1
 8003854:	080042d3 	.word	0x080042d3
 8003858:	0800430b 	.word	0x0800430b
 800385c:	0800432f 	.word	0x0800432f

08003860 <_cleanup_r>:
 8003860:	4901      	ldr	r1, [pc, #4]	; (8003868 <_cleanup_r+0x8>)
 8003862:	f000 b8af 	b.w	80039c4 <_fwalk_reent>
 8003866:	bf00      	nop
 8003868:	080037a1 	.word	0x080037a1

0800386c <__sfmoreglue>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	1e4a      	subs	r2, r1, #1
 8003870:	2568      	movs	r5, #104	; 0x68
 8003872:	4355      	muls	r5, r2
 8003874:	460e      	mov	r6, r1
 8003876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800387a:	f000 f979 	bl	8003b70 <_malloc_r>
 800387e:	4604      	mov	r4, r0
 8003880:	b140      	cbz	r0, 8003894 <__sfmoreglue+0x28>
 8003882:	2100      	movs	r1, #0
 8003884:	e9c0 1600 	strd	r1, r6, [r0]
 8003888:	300c      	adds	r0, #12
 800388a:	60a0      	str	r0, [r4, #8]
 800388c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003890:	f7ff fd94 	bl	80033bc <memset>
 8003894:	4620      	mov	r0, r4
 8003896:	bd70      	pop	{r4, r5, r6, pc}

08003898 <__sfp_lock_acquire>:
 8003898:	4801      	ldr	r0, [pc, #4]	; (80038a0 <__sfp_lock_acquire+0x8>)
 800389a:	f000 b8b3 	b.w	8003a04 <__retarget_lock_acquire_recursive>
 800389e:	bf00      	nop
 80038a0:	20000230 	.word	0x20000230

080038a4 <__sfp_lock_release>:
 80038a4:	4801      	ldr	r0, [pc, #4]	; (80038ac <__sfp_lock_release+0x8>)
 80038a6:	f000 b8ae 	b.w	8003a06 <__retarget_lock_release_recursive>
 80038aa:	bf00      	nop
 80038ac:	20000230 	.word	0x20000230

080038b0 <__sinit_lock_acquire>:
 80038b0:	4801      	ldr	r0, [pc, #4]	; (80038b8 <__sinit_lock_acquire+0x8>)
 80038b2:	f000 b8a7 	b.w	8003a04 <__retarget_lock_acquire_recursive>
 80038b6:	bf00      	nop
 80038b8:	2000022b 	.word	0x2000022b

080038bc <__sinit_lock_release>:
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <__sinit_lock_release+0x8>)
 80038be:	f000 b8a2 	b.w	8003a06 <__retarget_lock_release_recursive>
 80038c2:	bf00      	nop
 80038c4:	2000022b 	.word	0x2000022b

080038c8 <__sinit>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4604      	mov	r4, r0
 80038cc:	f7ff fff0 	bl	80038b0 <__sinit_lock_acquire>
 80038d0:	69a3      	ldr	r3, [r4, #24]
 80038d2:	b11b      	cbz	r3, 80038dc <__sinit+0x14>
 80038d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d8:	f7ff bff0 	b.w	80038bc <__sinit_lock_release>
 80038dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038e0:	6523      	str	r3, [r4, #80]	; 0x50
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <__sinit+0x68>)
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <__sinit+0x6c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	bf04      	itt	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	61a3      	streq	r3, [r4, #24]
 80038f2:	4620      	mov	r0, r4
 80038f4:	f000 f820 	bl	8003938 <__sfp>
 80038f8:	6060      	str	r0, [r4, #4]
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 f81c 	bl	8003938 <__sfp>
 8003900:	60a0      	str	r0, [r4, #8]
 8003902:	4620      	mov	r0, r4
 8003904:	f000 f818 	bl	8003938 <__sfp>
 8003908:	2200      	movs	r2, #0
 800390a:	60e0      	str	r0, [r4, #12]
 800390c:	2104      	movs	r1, #4
 800390e:	6860      	ldr	r0, [r4, #4]
 8003910:	f7ff ff82 	bl	8003818 <std>
 8003914:	68a0      	ldr	r0, [r4, #8]
 8003916:	2201      	movs	r2, #1
 8003918:	2109      	movs	r1, #9
 800391a:	f7ff ff7d 	bl	8003818 <std>
 800391e:	68e0      	ldr	r0, [r4, #12]
 8003920:	2202      	movs	r2, #2
 8003922:	2112      	movs	r1, #18
 8003924:	f7ff ff78 	bl	8003818 <std>
 8003928:	2301      	movs	r3, #1
 800392a:	61a3      	str	r3, [r4, #24]
 800392c:	e7d2      	b.n	80038d4 <__sinit+0xc>
 800392e:	bf00      	nop
 8003930:	08004890 	.word	0x08004890
 8003934:	08003861 	.word	0x08003861

08003938 <__sfp>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	4607      	mov	r7, r0
 800393c:	f7ff ffac 	bl	8003898 <__sfp_lock_acquire>
 8003940:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <__sfp+0x84>)
 8003942:	681e      	ldr	r6, [r3, #0]
 8003944:	69b3      	ldr	r3, [r6, #24]
 8003946:	b913      	cbnz	r3, 800394e <__sfp+0x16>
 8003948:	4630      	mov	r0, r6
 800394a:	f7ff ffbd 	bl	80038c8 <__sinit>
 800394e:	3648      	adds	r6, #72	; 0x48
 8003950:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003954:	3b01      	subs	r3, #1
 8003956:	d503      	bpl.n	8003960 <__sfp+0x28>
 8003958:	6833      	ldr	r3, [r6, #0]
 800395a:	b30b      	cbz	r3, 80039a0 <__sfp+0x68>
 800395c:	6836      	ldr	r6, [r6, #0]
 800395e:	e7f7      	b.n	8003950 <__sfp+0x18>
 8003960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003964:	b9d5      	cbnz	r5, 800399c <__sfp+0x64>
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <__sfp+0x88>)
 8003968:	60e3      	str	r3, [r4, #12]
 800396a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800396e:	6665      	str	r5, [r4, #100]	; 0x64
 8003970:	f000 f847 	bl	8003a02 <__retarget_lock_init_recursive>
 8003974:	f7ff ff96 	bl	80038a4 <__sfp_lock_release>
 8003978:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800397c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003980:	6025      	str	r5, [r4, #0]
 8003982:	61a5      	str	r5, [r4, #24]
 8003984:	2208      	movs	r2, #8
 8003986:	4629      	mov	r1, r5
 8003988:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800398c:	f7ff fd16 	bl	80033bc <memset>
 8003990:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003994:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003998:	4620      	mov	r0, r4
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800399c:	3468      	adds	r4, #104	; 0x68
 800399e:	e7d9      	b.n	8003954 <__sfp+0x1c>
 80039a0:	2104      	movs	r1, #4
 80039a2:	4638      	mov	r0, r7
 80039a4:	f7ff ff62 	bl	800386c <__sfmoreglue>
 80039a8:	4604      	mov	r4, r0
 80039aa:	6030      	str	r0, [r6, #0]
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d1d5      	bne.n	800395c <__sfp+0x24>
 80039b0:	f7ff ff78 	bl	80038a4 <__sfp_lock_release>
 80039b4:	230c      	movs	r3, #12
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	e7ee      	b.n	8003998 <__sfp+0x60>
 80039ba:	bf00      	nop
 80039bc:	08004890 	.word	0x08004890
 80039c0:	ffff0001 	.word	0xffff0001

080039c4 <_fwalk_reent>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	4606      	mov	r6, r0
 80039ca:	4688      	mov	r8, r1
 80039cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039d0:	2700      	movs	r7, #0
 80039d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039d6:	f1b9 0901 	subs.w	r9, r9, #1
 80039da:	d505      	bpl.n	80039e8 <_fwalk_reent+0x24>
 80039dc:	6824      	ldr	r4, [r4, #0]
 80039de:	2c00      	cmp	r4, #0
 80039e0:	d1f7      	bne.n	80039d2 <_fwalk_reent+0xe>
 80039e2:	4638      	mov	r0, r7
 80039e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039e8:	89ab      	ldrh	r3, [r5, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d907      	bls.n	80039fe <_fwalk_reent+0x3a>
 80039ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039f2:	3301      	adds	r3, #1
 80039f4:	d003      	beq.n	80039fe <_fwalk_reent+0x3a>
 80039f6:	4629      	mov	r1, r5
 80039f8:	4630      	mov	r0, r6
 80039fa:	47c0      	blx	r8
 80039fc:	4307      	orrs	r7, r0
 80039fe:	3568      	adds	r5, #104	; 0x68
 8003a00:	e7e9      	b.n	80039d6 <_fwalk_reent+0x12>

08003a02 <__retarget_lock_init_recursive>:
 8003a02:	4770      	bx	lr

08003a04 <__retarget_lock_acquire_recursive>:
 8003a04:	4770      	bx	lr

08003a06 <__retarget_lock_release_recursive>:
 8003a06:	4770      	bx	lr

08003a08 <__swhatbuf_r>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	460e      	mov	r6, r1
 8003a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a10:	2900      	cmp	r1, #0
 8003a12:	b096      	sub	sp, #88	; 0x58
 8003a14:	4614      	mov	r4, r2
 8003a16:	461d      	mov	r5, r3
 8003a18:	da07      	bge.n	8003a2a <__swhatbuf_r+0x22>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	602b      	str	r3, [r5, #0]
 8003a1e:	89b3      	ldrh	r3, [r6, #12]
 8003a20:	061a      	lsls	r2, r3, #24
 8003a22:	d410      	bmi.n	8003a46 <__swhatbuf_r+0x3e>
 8003a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a28:	e00e      	b.n	8003a48 <__swhatbuf_r+0x40>
 8003a2a:	466a      	mov	r2, sp
 8003a2c:	f000 fca6 	bl	800437c <_fstat_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	dbf2      	blt.n	8003a1a <__swhatbuf_r+0x12>
 8003a34:	9a01      	ldr	r2, [sp, #4]
 8003a36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a3e:	425a      	negs	r2, r3
 8003a40:	415a      	adcs	r2, r3
 8003a42:	602a      	str	r2, [r5, #0]
 8003a44:	e7ee      	b.n	8003a24 <__swhatbuf_r+0x1c>
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	2000      	movs	r0, #0
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	b016      	add	sp, #88	; 0x58
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}

08003a50 <__smakebuf_r>:
 8003a50:	898b      	ldrh	r3, [r1, #12]
 8003a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a54:	079d      	lsls	r5, r3, #30
 8003a56:	4606      	mov	r6, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	d507      	bpl.n	8003a6c <__smakebuf_r+0x1c>
 8003a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	2301      	movs	r3, #1
 8003a66:	6163      	str	r3, [r4, #20]
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	ab01      	add	r3, sp, #4
 8003a6e:	466a      	mov	r2, sp
 8003a70:	f7ff ffca 	bl	8003a08 <__swhatbuf_r>
 8003a74:	9900      	ldr	r1, [sp, #0]
 8003a76:	4605      	mov	r5, r0
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 f879 	bl	8003b70 <_malloc_r>
 8003a7e:	b948      	cbnz	r0, 8003a94 <__smakebuf_r+0x44>
 8003a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a84:	059a      	lsls	r2, r3, #22
 8003a86:	d4ef      	bmi.n	8003a68 <__smakebuf_r+0x18>
 8003a88:	f023 0303 	bic.w	r3, r3, #3
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	e7e3      	b.n	8003a5c <__smakebuf_r+0xc>
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <__smakebuf_r+0x7c>)
 8003a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	6020      	str	r0, [r4, #0]
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	9b00      	ldr	r3, [sp, #0]
 8003aa4:	6163      	str	r3, [r4, #20]
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	6120      	str	r0, [r4, #16]
 8003aaa:	b15b      	cbz	r3, 8003ac4 <__smakebuf_r+0x74>
 8003aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f000 fc75 	bl	80043a0 <_isatty_r>
 8003ab6:	b128      	cbz	r0, 8003ac4 <__smakebuf_r+0x74>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	89a0      	ldrh	r0, [r4, #12]
 8003ac6:	4305      	orrs	r5, r0
 8003ac8:	81a5      	strh	r5, [r4, #12]
 8003aca:	e7cd      	b.n	8003a68 <__smakebuf_r+0x18>
 8003acc:	08003861 	.word	0x08003861

08003ad0 <_free_r>:
 8003ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ad2:	2900      	cmp	r1, #0
 8003ad4:	d048      	beq.n	8003b68 <_free_r+0x98>
 8003ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ada:	9001      	str	r0, [sp, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f1a1 0404 	sub.w	r4, r1, #4
 8003ae2:	bfb8      	it	lt
 8003ae4:	18e4      	addlt	r4, r4, r3
 8003ae6:	f000 fc7d 	bl	80043e4 <__malloc_lock>
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <_free_r+0x9c>)
 8003aec:	9801      	ldr	r0, [sp, #4]
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	4615      	mov	r5, r2
 8003af2:	b933      	cbnz	r3, 8003b02 <_free_r+0x32>
 8003af4:	6063      	str	r3, [r4, #4]
 8003af6:	6014      	str	r4, [r2, #0]
 8003af8:	b003      	add	sp, #12
 8003afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003afe:	f000 bc77 	b.w	80043f0 <__malloc_unlock>
 8003b02:	42a3      	cmp	r3, r4
 8003b04:	d90b      	bls.n	8003b1e <_free_r+0x4e>
 8003b06:	6821      	ldr	r1, [r4, #0]
 8003b08:	1862      	adds	r2, r4, r1
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bf04      	itt	eq
 8003b0e:	681a      	ldreq	r2, [r3, #0]
 8003b10:	685b      	ldreq	r3, [r3, #4]
 8003b12:	6063      	str	r3, [r4, #4]
 8003b14:	bf04      	itt	eq
 8003b16:	1852      	addeq	r2, r2, r1
 8003b18:	6022      	streq	r2, [r4, #0]
 8003b1a:	602c      	str	r4, [r5, #0]
 8003b1c:	e7ec      	b.n	8003af8 <_free_r+0x28>
 8003b1e:	461a      	mov	r2, r3
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	b10b      	cbz	r3, 8003b28 <_free_r+0x58>
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	d9fa      	bls.n	8003b1e <_free_r+0x4e>
 8003b28:	6811      	ldr	r1, [r2, #0]
 8003b2a:	1855      	adds	r5, r2, r1
 8003b2c:	42a5      	cmp	r5, r4
 8003b2e:	d10b      	bne.n	8003b48 <_free_r+0x78>
 8003b30:	6824      	ldr	r4, [r4, #0]
 8003b32:	4421      	add	r1, r4
 8003b34:	1854      	adds	r4, r2, r1
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	6011      	str	r1, [r2, #0]
 8003b3a:	d1dd      	bne.n	8003af8 <_free_r+0x28>
 8003b3c:	681c      	ldr	r4, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	6053      	str	r3, [r2, #4]
 8003b42:	4421      	add	r1, r4
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	e7d7      	b.n	8003af8 <_free_r+0x28>
 8003b48:	d902      	bls.n	8003b50 <_free_r+0x80>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	6003      	str	r3, [r0, #0]
 8003b4e:	e7d3      	b.n	8003af8 <_free_r+0x28>
 8003b50:	6825      	ldr	r5, [r4, #0]
 8003b52:	1961      	adds	r1, r4, r5
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf04      	itt	eq
 8003b58:	6819      	ldreq	r1, [r3, #0]
 8003b5a:	685b      	ldreq	r3, [r3, #4]
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	bf04      	itt	eq
 8003b60:	1949      	addeq	r1, r1, r5
 8003b62:	6021      	streq	r1, [r4, #0]
 8003b64:	6054      	str	r4, [r2, #4]
 8003b66:	e7c7      	b.n	8003af8 <_free_r+0x28>
 8003b68:	b003      	add	sp, #12
 8003b6a:	bd30      	pop	{r4, r5, pc}
 8003b6c:	20000090 	.word	0x20000090

08003b70 <_malloc_r>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	1ccd      	adds	r5, r1, #3
 8003b74:	f025 0503 	bic.w	r5, r5, #3
 8003b78:	3508      	adds	r5, #8
 8003b7a:	2d0c      	cmp	r5, #12
 8003b7c:	bf38      	it	cc
 8003b7e:	250c      	movcc	r5, #12
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	4606      	mov	r6, r0
 8003b84:	db01      	blt.n	8003b8a <_malloc_r+0x1a>
 8003b86:	42a9      	cmp	r1, r5
 8003b88:	d903      	bls.n	8003b92 <_malloc_r+0x22>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b92:	f000 fc27 	bl	80043e4 <__malloc_lock>
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <_malloc_r+0xac>)
 8003b98:	680a      	ldr	r2, [r1, #0]
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	b99c      	cbnz	r4, 8003bc6 <_malloc_r+0x56>
 8003b9e:	4f20      	ldr	r7, [pc, #128]	; (8003c20 <_malloc_r+0xb0>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b923      	cbnz	r3, 8003bae <_malloc_r+0x3e>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f000 fb72 	bl	8004290 <_sbrk_r>
 8003bac:	6038      	str	r0, [r7, #0]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 fb6d 	bl	8004290 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d123      	bne.n	8003c02 <_malloc_r+0x92>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6033      	str	r3, [r6, #0]
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 fc16 	bl	80043f0 <__malloc_unlock>
 8003bc4:	e7e3      	b.n	8003b8e <_malloc_r+0x1e>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	1b5b      	subs	r3, r3, r5
 8003bca:	d417      	bmi.n	8003bfc <_malloc_r+0x8c>
 8003bcc:	2b0b      	cmp	r3, #11
 8003bce:	d903      	bls.n	8003bd8 <_malloc_r+0x68>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	441c      	add	r4, r3
 8003bd4:	6025      	str	r5, [r4, #0]
 8003bd6:	e004      	b.n	8003be2 <_malloc_r+0x72>
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	42a2      	cmp	r2, r4
 8003bdc:	bf0c      	ite	eq
 8003bde:	600b      	streq	r3, [r1, #0]
 8003be0:	6053      	strne	r3, [r2, #4]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 fc04 	bl	80043f0 <__malloc_unlock>
 8003be8:	f104 000b 	add.w	r0, r4, #11
 8003bec:	1d23      	adds	r3, r4, #4
 8003bee:	f020 0007 	bic.w	r0, r0, #7
 8003bf2:	1ac2      	subs	r2, r0, r3
 8003bf4:	d0cc      	beq.n	8003b90 <_malloc_r+0x20>
 8003bf6:	1a1b      	subs	r3, r3, r0
 8003bf8:	50a3      	str	r3, [r4, r2]
 8003bfa:	e7c9      	b.n	8003b90 <_malloc_r+0x20>
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	6864      	ldr	r4, [r4, #4]
 8003c00:	e7cc      	b.n	8003b9c <_malloc_r+0x2c>
 8003c02:	1cc4      	adds	r4, r0, #3
 8003c04:	f024 0403 	bic.w	r4, r4, #3
 8003c08:	42a0      	cmp	r0, r4
 8003c0a:	d0e3      	beq.n	8003bd4 <_malloc_r+0x64>
 8003c0c:	1a21      	subs	r1, r4, r0
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f000 fb3e 	bl	8004290 <_sbrk_r>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d1dd      	bne.n	8003bd4 <_malloc_r+0x64>
 8003c18:	e7cf      	b.n	8003bba <_malloc_r+0x4a>
 8003c1a:	bf00      	nop
 8003c1c:	20000090 	.word	0x20000090
 8003c20:	20000094 	.word	0x20000094

08003c24 <__sfputc_r>:
 8003c24:	6893      	ldr	r3, [r2, #8]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	b410      	push	{r4}
 8003c2c:	6093      	str	r3, [r2, #8]
 8003c2e:	da08      	bge.n	8003c42 <__sfputc_r+0x1e>
 8003c30:	6994      	ldr	r4, [r2, #24]
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	db01      	blt.n	8003c3a <__sfputc_r+0x16>
 8003c36:	290a      	cmp	r1, #10
 8003c38:	d103      	bne.n	8003c42 <__sfputc_r+0x1e>
 8003c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c3e:	f7ff bc69 	b.w	8003514 <__swbuf_r>
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	1c58      	adds	r0, r3, #1
 8003c46:	6010      	str	r0, [r2, #0]
 8003c48:	7019      	strb	r1, [r3, #0]
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <__sfputs_r>:
 8003c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c54:	4606      	mov	r6, r0
 8003c56:	460f      	mov	r7, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	18d5      	adds	r5, r2, r3
 8003c5c:	42ac      	cmp	r4, r5
 8003c5e:	d101      	bne.n	8003c64 <__sfputs_r+0x12>
 8003c60:	2000      	movs	r0, #0
 8003c62:	e007      	b.n	8003c74 <__sfputs_r+0x22>
 8003c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c68:	463a      	mov	r2, r7
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f7ff ffda 	bl	8003c24 <__sfputc_r>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d1f3      	bne.n	8003c5c <__sfputs_r+0xa>
 8003c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c78 <_vfiprintf_r>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	460d      	mov	r5, r1
 8003c7e:	b09d      	sub	sp, #116	; 0x74
 8003c80:	4614      	mov	r4, r2
 8003c82:	4698      	mov	r8, r3
 8003c84:	4606      	mov	r6, r0
 8003c86:	b118      	cbz	r0, 8003c90 <_vfiprintf_r+0x18>
 8003c88:	6983      	ldr	r3, [r0, #24]
 8003c8a:	b90b      	cbnz	r3, 8003c90 <_vfiprintf_r+0x18>
 8003c8c:	f7ff fe1c 	bl	80038c8 <__sinit>
 8003c90:	4b89      	ldr	r3, [pc, #548]	; (8003eb8 <_vfiprintf_r+0x240>)
 8003c92:	429d      	cmp	r5, r3
 8003c94:	d11b      	bne.n	8003cce <_vfiprintf_r+0x56>
 8003c96:	6875      	ldr	r5, [r6, #4]
 8003c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c9a:	07d9      	lsls	r1, r3, #31
 8003c9c:	d405      	bmi.n	8003caa <_vfiprintf_r+0x32>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	059a      	lsls	r2, r3, #22
 8003ca2:	d402      	bmi.n	8003caa <_vfiprintf_r+0x32>
 8003ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca6:	f7ff fead 	bl	8003a04 <__retarget_lock_acquire_recursive>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	d501      	bpl.n	8003cb4 <_vfiprintf_r+0x3c>
 8003cb0:	692b      	ldr	r3, [r5, #16]
 8003cb2:	b9eb      	cbnz	r3, 8003cf0 <_vfiprintf_r+0x78>
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f7ff fc7e 	bl	80035b8 <__swsetup_r>
 8003cbc:	b1c0      	cbz	r0, 8003cf0 <_vfiprintf_r+0x78>
 8003cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cc0:	07dc      	lsls	r4, r3, #31
 8003cc2:	d50e      	bpl.n	8003ce2 <_vfiprintf_r+0x6a>
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	b01d      	add	sp, #116	; 0x74
 8003cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cce:	4b7b      	ldr	r3, [pc, #492]	; (8003ebc <_vfiprintf_r+0x244>)
 8003cd0:	429d      	cmp	r5, r3
 8003cd2:	d101      	bne.n	8003cd8 <_vfiprintf_r+0x60>
 8003cd4:	68b5      	ldr	r5, [r6, #8]
 8003cd6:	e7df      	b.n	8003c98 <_vfiprintf_r+0x20>
 8003cd8:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <_vfiprintf_r+0x248>)
 8003cda:	429d      	cmp	r5, r3
 8003cdc:	bf08      	it	eq
 8003cde:	68f5      	ldreq	r5, [r6, #12]
 8003ce0:	e7da      	b.n	8003c98 <_vfiprintf_r+0x20>
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	0598      	lsls	r0, r3, #22
 8003ce6:	d4ed      	bmi.n	8003cc4 <_vfiprintf_r+0x4c>
 8003ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cea:	f7ff fe8c 	bl	8003a06 <__retarget_lock_release_recursive>
 8003cee:	e7e9      	b.n	8003cc4 <_vfiprintf_r+0x4c>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cfe:	2330      	movs	r3, #48	; 0x30
 8003d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ec4 <_vfiprintf_r+0x24c>
 8003d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d08:	f04f 0901 	mov.w	r9, #1
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	469a      	mov	sl, r3
 8003d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d14:	b10a      	cbz	r2, 8003d1a <_vfiprintf_r+0xa2>
 8003d16:	2a25      	cmp	r2, #37	; 0x25
 8003d18:	d1f9      	bne.n	8003d0e <_vfiprintf_r+0x96>
 8003d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d1e:	d00b      	beq.n	8003d38 <_vfiprintf_r+0xc0>
 8003d20:	465b      	mov	r3, fp
 8003d22:	4622      	mov	r2, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	4630      	mov	r0, r6
 8003d28:	f7ff ff93 	bl	8003c52 <__sfputs_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	f000 80aa 	beq.w	8003e86 <_vfiprintf_r+0x20e>
 8003d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d34:	445a      	add	r2, fp
 8003d36:	9209      	str	r2, [sp, #36]	; 0x24
 8003d38:	f89a 3000 	ldrb.w	r3, [sl]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a2 	beq.w	8003e86 <_vfiprintf_r+0x20e>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d4c:	f10a 0a01 	add.w	sl, sl, #1
 8003d50:	9304      	str	r3, [sp, #16]
 8003d52:	9307      	str	r3, [sp, #28]
 8003d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d58:	931a      	str	r3, [sp, #104]	; 0x68
 8003d5a:	4654      	mov	r4, sl
 8003d5c:	2205      	movs	r2, #5
 8003d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d62:	4858      	ldr	r0, [pc, #352]	; (8003ec4 <_vfiprintf_r+0x24c>)
 8003d64:	f7fc fa5c 	bl	8000220 <memchr>
 8003d68:	9a04      	ldr	r2, [sp, #16]
 8003d6a:	b9d8      	cbnz	r0, 8003da4 <_vfiprintf_r+0x12c>
 8003d6c:	06d1      	lsls	r1, r2, #27
 8003d6e:	bf44      	itt	mi
 8003d70:	2320      	movmi	r3, #32
 8003d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d76:	0713      	lsls	r3, r2, #28
 8003d78:	bf44      	itt	mi
 8003d7a:	232b      	movmi	r3, #43	; 0x2b
 8003d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d80:	f89a 3000 	ldrb.w	r3, [sl]
 8003d84:	2b2a      	cmp	r3, #42	; 0x2a
 8003d86:	d015      	beq.n	8003db4 <_vfiprintf_r+0x13c>
 8003d88:	9a07      	ldr	r2, [sp, #28]
 8003d8a:	4654      	mov	r4, sl
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f04f 0c0a 	mov.w	ip, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d98:	3b30      	subs	r3, #48	; 0x30
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	d94e      	bls.n	8003e3c <_vfiprintf_r+0x1c4>
 8003d9e:	b1b0      	cbz	r0, 8003dce <_vfiprintf_r+0x156>
 8003da0:	9207      	str	r2, [sp, #28]
 8003da2:	e014      	b.n	8003dce <_vfiprintf_r+0x156>
 8003da4:	eba0 0308 	sub.w	r3, r0, r8
 8003da8:	fa09 f303 	lsl.w	r3, r9, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	9304      	str	r3, [sp, #16]
 8003db0:	46a2      	mov	sl, r4
 8003db2:	e7d2      	b.n	8003d5a <_vfiprintf_r+0xe2>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	1d19      	adds	r1, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	9103      	str	r1, [sp, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bfbb      	ittet	lt
 8003dc0:	425b      	neglt	r3, r3
 8003dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8003dc6:	9307      	strge	r3, [sp, #28]
 8003dc8:	9307      	strlt	r3, [sp, #28]
 8003dca:	bfb8      	it	lt
 8003dcc:	9204      	strlt	r2, [sp, #16]
 8003dce:	7823      	ldrb	r3, [r4, #0]
 8003dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd2:	d10c      	bne.n	8003dee <_vfiprintf_r+0x176>
 8003dd4:	7863      	ldrb	r3, [r4, #1]
 8003dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd8:	d135      	bne.n	8003e46 <_vfiprintf_r+0x1ce>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9203      	str	r2, [sp, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfb8      	it	lt
 8003de6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dea:	3402      	adds	r4, #2
 8003dec:	9305      	str	r3, [sp, #20]
 8003dee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ed4 <_vfiprintf_r+0x25c>
 8003df2:	7821      	ldrb	r1, [r4, #0]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4650      	mov	r0, sl
 8003df8:	f7fc fa12 	bl	8000220 <memchr>
 8003dfc:	b140      	cbz	r0, 8003e10 <_vfiprintf_r+0x198>
 8003dfe:	2340      	movs	r3, #64	; 0x40
 8003e00:	eba0 000a 	sub.w	r0, r0, sl
 8003e04:	fa03 f000 	lsl.w	r0, r3, r0
 8003e08:	9b04      	ldr	r3, [sp, #16]
 8003e0a:	4303      	orrs	r3, r0
 8003e0c:	3401      	adds	r4, #1
 8003e0e:	9304      	str	r3, [sp, #16]
 8003e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e14:	482c      	ldr	r0, [pc, #176]	; (8003ec8 <_vfiprintf_r+0x250>)
 8003e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	f7fc fa00 	bl	8000220 <memchr>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d03f      	beq.n	8003ea4 <_vfiprintf_r+0x22c>
 8003e24:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <_vfiprintf_r+0x254>)
 8003e26:	bb1b      	cbnz	r3, 8003e70 <_vfiprintf_r+0x1f8>
 8003e28:	9b03      	ldr	r3, [sp, #12]
 8003e2a:	3307      	adds	r3, #7
 8003e2c:	f023 0307 	bic.w	r3, r3, #7
 8003e30:	3308      	adds	r3, #8
 8003e32:	9303      	str	r3, [sp, #12]
 8003e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e36:	443b      	add	r3, r7
 8003e38:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3a:	e767      	b.n	8003d0c <_vfiprintf_r+0x94>
 8003e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e40:	460c      	mov	r4, r1
 8003e42:	2001      	movs	r0, #1
 8003e44:	e7a5      	b.n	8003d92 <_vfiprintf_r+0x11a>
 8003e46:	2300      	movs	r3, #0
 8003e48:	3401      	adds	r4, #1
 8003e4a:	9305      	str	r3, [sp, #20]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f04f 0c0a 	mov.w	ip, #10
 8003e52:	4620      	mov	r0, r4
 8003e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e58:	3a30      	subs	r2, #48	; 0x30
 8003e5a:	2a09      	cmp	r2, #9
 8003e5c:	d903      	bls.n	8003e66 <_vfiprintf_r+0x1ee>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0c5      	beq.n	8003dee <_vfiprintf_r+0x176>
 8003e62:	9105      	str	r1, [sp, #20]
 8003e64:	e7c3      	b.n	8003dee <_vfiprintf_r+0x176>
 8003e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e7f0      	b.n	8003e52 <_vfiprintf_r+0x1da>
 8003e70:	ab03      	add	r3, sp, #12
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	462a      	mov	r2, r5
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <_vfiprintf_r+0x258>)
 8003e78:	a904      	add	r1, sp, #16
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f3af 8000 	nop.w
 8003e80:	4607      	mov	r7, r0
 8003e82:	1c78      	adds	r0, r7, #1
 8003e84:	d1d6      	bne.n	8003e34 <_vfiprintf_r+0x1bc>
 8003e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e88:	07d9      	lsls	r1, r3, #31
 8003e8a:	d405      	bmi.n	8003e98 <_vfiprintf_r+0x220>
 8003e8c:	89ab      	ldrh	r3, [r5, #12]
 8003e8e:	059a      	lsls	r2, r3, #22
 8003e90:	d402      	bmi.n	8003e98 <_vfiprintf_r+0x220>
 8003e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e94:	f7ff fdb7 	bl	8003a06 <__retarget_lock_release_recursive>
 8003e98:	89ab      	ldrh	r3, [r5, #12]
 8003e9a:	065b      	lsls	r3, r3, #25
 8003e9c:	f53f af12 	bmi.w	8003cc4 <_vfiprintf_r+0x4c>
 8003ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ea2:	e711      	b.n	8003cc8 <_vfiprintf_r+0x50>
 8003ea4:	ab03      	add	r3, sp, #12
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <_vfiprintf_r+0x258>)
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f000 f880 	bl	8003fb4 <_printf_i>
 8003eb4:	e7e4      	b.n	8003e80 <_vfiprintf_r+0x208>
 8003eb6:	bf00      	nop
 8003eb8:	080048b4 	.word	0x080048b4
 8003ebc:	080048d4 	.word	0x080048d4
 8003ec0:	08004894 	.word	0x08004894
 8003ec4:	080048f4 	.word	0x080048f4
 8003ec8:	080048fe 	.word	0x080048fe
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	08003c53 	.word	0x08003c53
 8003ed4:	080048fa 	.word	0x080048fa

08003ed8 <_printf_common>:
 8003ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	4616      	mov	r6, r2
 8003ede:	4699      	mov	r9, r3
 8003ee0:	688a      	ldr	r2, [r1, #8]
 8003ee2:	690b      	ldr	r3, [r1, #16]
 8003ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	bfb8      	it	lt
 8003eec:	4613      	movlt	r3, r2
 8003eee:	6033      	str	r3, [r6, #0]
 8003ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	b10a      	cbz	r2, 8003efe <_printf_common+0x26>
 8003efa:	3301      	adds	r3, #1
 8003efc:	6033      	str	r3, [r6, #0]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	0699      	lsls	r1, r3, #26
 8003f02:	bf42      	ittt	mi
 8003f04:	6833      	ldrmi	r3, [r6, #0]
 8003f06:	3302      	addmi	r3, #2
 8003f08:	6033      	strmi	r3, [r6, #0]
 8003f0a:	6825      	ldr	r5, [r4, #0]
 8003f0c:	f015 0506 	ands.w	r5, r5, #6
 8003f10:	d106      	bne.n	8003f20 <_printf_common+0x48>
 8003f12:	f104 0a19 	add.w	sl, r4, #25
 8003f16:	68e3      	ldr	r3, [r4, #12]
 8003f18:	6832      	ldr	r2, [r6, #0]
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	dc26      	bgt.n	8003f6e <_printf_common+0x96>
 8003f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f24:	1e13      	subs	r3, r2, #0
 8003f26:	6822      	ldr	r2, [r4, #0]
 8003f28:	bf18      	it	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	0692      	lsls	r2, r2, #26
 8003f2e:	d42b      	bmi.n	8003f88 <_printf_common+0xb0>
 8003f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f34:	4649      	mov	r1, r9
 8003f36:	4638      	mov	r0, r7
 8003f38:	47c0      	blx	r8
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d01e      	beq.n	8003f7c <_printf_common+0xa4>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	68e5      	ldr	r5, [r4, #12]
 8003f42:	6832      	ldr	r2, [r6, #0]
 8003f44:	f003 0306 	and.w	r3, r3, #6
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	bf08      	it	eq
 8003f4c:	1aad      	subeq	r5, r5, r2
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	bf0c      	ite	eq
 8003f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f58:	2500      	movne	r5, #0
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	bfc4      	itt	gt
 8003f5e:	1a9b      	subgt	r3, r3, r2
 8003f60:	18ed      	addgt	r5, r5, r3
 8003f62:	2600      	movs	r6, #0
 8003f64:	341a      	adds	r4, #26
 8003f66:	42b5      	cmp	r5, r6
 8003f68:	d11a      	bne.n	8003fa0 <_printf_common+0xc8>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e008      	b.n	8003f80 <_printf_common+0xa8>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4652      	mov	r2, sl
 8003f72:	4649      	mov	r1, r9
 8003f74:	4638      	mov	r0, r7
 8003f76:	47c0      	blx	r8
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d103      	bne.n	8003f84 <_printf_common+0xac>
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f84:	3501      	adds	r5, #1
 8003f86:	e7c6      	b.n	8003f16 <_printf_common+0x3e>
 8003f88:	18e1      	adds	r1, r4, r3
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	2030      	movs	r0, #48	; 0x30
 8003f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f92:	4422      	add	r2, r4
 8003f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	e7c7      	b.n	8003f30 <_printf_common+0x58>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c0      	blx	r8
 8003faa:	3001      	adds	r0, #1
 8003fac:	d0e6      	beq.n	8003f7c <_printf_common+0xa4>
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7d9      	b.n	8003f66 <_printf_common+0x8e>
	...

08003fb4 <_printf_i>:
 8003fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	460c      	mov	r4, r1
 8003fba:	4691      	mov	r9, r2
 8003fbc:	7e27      	ldrb	r7, [r4, #24]
 8003fbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fc0:	2f78      	cmp	r7, #120	; 0x78
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	469a      	mov	sl, r3
 8003fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fca:	d807      	bhi.n	8003fdc <_printf_i+0x28>
 8003fcc:	2f62      	cmp	r7, #98	; 0x62
 8003fce:	d80a      	bhi.n	8003fe6 <_printf_i+0x32>
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	f000 80d8 	beq.w	8004186 <_printf_i+0x1d2>
 8003fd6:	2f58      	cmp	r7, #88	; 0x58
 8003fd8:	f000 80a3 	beq.w	8004122 <_printf_i+0x16e>
 8003fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fe4:	e03a      	b.n	800405c <_printf_i+0xa8>
 8003fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fea:	2b15      	cmp	r3, #21
 8003fec:	d8f6      	bhi.n	8003fdc <_printf_i+0x28>
 8003fee:	a001      	add	r0, pc, #4	; (adr r0, 8003ff4 <_printf_i+0x40>)
 8003ff0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ff4:	0800404d 	.word	0x0800404d
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08003fdd 	.word	0x08003fdd
 8004000:	08003fdd 	.word	0x08003fdd
 8004004:	08003fdd 	.word	0x08003fdd
 8004008:	08003fdd 	.word	0x08003fdd
 800400c:	08004061 	.word	0x08004061
 8004010:	08003fdd 	.word	0x08003fdd
 8004014:	08003fdd 	.word	0x08003fdd
 8004018:	08003fdd 	.word	0x08003fdd
 800401c:	08003fdd 	.word	0x08003fdd
 8004020:	0800416d 	.word	0x0800416d
 8004024:	08004091 	.word	0x08004091
 8004028:	0800414f 	.word	0x0800414f
 800402c:	08003fdd 	.word	0x08003fdd
 8004030:	08003fdd 	.word	0x08003fdd
 8004034:	0800418f 	.word	0x0800418f
 8004038:	08003fdd 	.word	0x08003fdd
 800403c:	08004091 	.word	0x08004091
 8004040:	08003fdd 	.word	0x08003fdd
 8004044:	08003fdd 	.word	0x08003fdd
 8004048:	08004157 	.word	0x08004157
 800404c:	680b      	ldr	r3, [r1, #0]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	600a      	str	r2, [r1, #0]
 8004054:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800405c:	2301      	movs	r3, #1
 800405e:	e0a3      	b.n	80041a8 <_printf_i+0x1f4>
 8004060:	6825      	ldr	r5, [r4, #0]
 8004062:	6808      	ldr	r0, [r1, #0]
 8004064:	062e      	lsls	r6, r5, #24
 8004066:	f100 0304 	add.w	r3, r0, #4
 800406a:	d50a      	bpl.n	8004082 <_printf_i+0xce>
 800406c:	6805      	ldr	r5, [r0, #0]
 800406e:	600b      	str	r3, [r1, #0]
 8004070:	2d00      	cmp	r5, #0
 8004072:	da03      	bge.n	800407c <_printf_i+0xc8>
 8004074:	232d      	movs	r3, #45	; 0x2d
 8004076:	426d      	negs	r5, r5
 8004078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407c:	485e      	ldr	r0, [pc, #376]	; (80041f8 <_printf_i+0x244>)
 800407e:	230a      	movs	r3, #10
 8004080:	e019      	b.n	80040b6 <_printf_i+0x102>
 8004082:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004086:	6805      	ldr	r5, [r0, #0]
 8004088:	600b      	str	r3, [r1, #0]
 800408a:	bf18      	it	ne
 800408c:	b22d      	sxthne	r5, r5
 800408e:	e7ef      	b.n	8004070 <_printf_i+0xbc>
 8004090:	680b      	ldr	r3, [r1, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	1d18      	adds	r0, r3, #4
 8004096:	6008      	str	r0, [r1, #0]
 8004098:	0628      	lsls	r0, r5, #24
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0xec>
 800409c:	681d      	ldr	r5, [r3, #0]
 800409e:	e002      	b.n	80040a6 <_printf_i+0xf2>
 80040a0:	0669      	lsls	r1, r5, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0xe8>
 80040a4:	881d      	ldrh	r5, [r3, #0]
 80040a6:	4854      	ldr	r0, [pc, #336]	; (80041f8 <_printf_i+0x244>)
 80040a8:	2f6f      	cmp	r7, #111	; 0x6f
 80040aa:	bf0c      	ite	eq
 80040ac:	2308      	moveq	r3, #8
 80040ae:	230a      	movne	r3, #10
 80040b0:	2100      	movs	r1, #0
 80040b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040b6:	6866      	ldr	r6, [r4, #4]
 80040b8:	60a6      	str	r6, [r4, #8]
 80040ba:	2e00      	cmp	r6, #0
 80040bc:	bfa2      	ittt	ge
 80040be:	6821      	ldrge	r1, [r4, #0]
 80040c0:	f021 0104 	bicge.w	r1, r1, #4
 80040c4:	6021      	strge	r1, [r4, #0]
 80040c6:	b90d      	cbnz	r5, 80040cc <_printf_i+0x118>
 80040c8:	2e00      	cmp	r6, #0
 80040ca:	d04d      	beq.n	8004168 <_printf_i+0x1b4>
 80040cc:	4616      	mov	r6, r2
 80040ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80040d2:	fb03 5711 	mls	r7, r3, r1, r5
 80040d6:	5dc7      	ldrb	r7, [r0, r7]
 80040d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040dc:	462f      	mov	r7, r5
 80040de:	42bb      	cmp	r3, r7
 80040e0:	460d      	mov	r5, r1
 80040e2:	d9f4      	bls.n	80040ce <_printf_i+0x11a>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d10b      	bne.n	8004100 <_printf_i+0x14c>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	07df      	lsls	r7, r3, #31
 80040ec:	d508      	bpl.n	8004100 <_printf_i+0x14c>
 80040ee:	6923      	ldr	r3, [r4, #16]
 80040f0:	6861      	ldr	r1, [r4, #4]
 80040f2:	4299      	cmp	r1, r3
 80040f4:	bfde      	ittt	le
 80040f6:	2330      	movle	r3, #48	; 0x30
 80040f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004100:	1b92      	subs	r2, r2, r6
 8004102:	6122      	str	r2, [r4, #16]
 8004104:	f8cd a000 	str.w	sl, [sp]
 8004108:	464b      	mov	r3, r9
 800410a:	aa03      	add	r2, sp, #12
 800410c:	4621      	mov	r1, r4
 800410e:	4640      	mov	r0, r8
 8004110:	f7ff fee2 	bl	8003ed8 <_printf_common>
 8004114:	3001      	adds	r0, #1
 8004116:	d14c      	bne.n	80041b2 <_printf_i+0x1fe>
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	b004      	add	sp, #16
 800411e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004122:	4835      	ldr	r0, [pc, #212]	; (80041f8 <_printf_i+0x244>)
 8004124:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	680e      	ldr	r6, [r1, #0]
 800412c:	061f      	lsls	r7, r3, #24
 800412e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004132:	600e      	str	r6, [r1, #0]
 8004134:	d514      	bpl.n	8004160 <_printf_i+0x1ac>
 8004136:	07d9      	lsls	r1, r3, #31
 8004138:	bf44      	itt	mi
 800413a:	f043 0320 	orrmi.w	r3, r3, #32
 800413e:	6023      	strmi	r3, [r4, #0]
 8004140:	b91d      	cbnz	r5, 800414a <_printf_i+0x196>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f023 0320 	bic.w	r3, r3, #32
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	2310      	movs	r3, #16
 800414c:	e7b0      	b.n	80040b0 <_printf_i+0xfc>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	f043 0320 	orr.w	r3, r3, #32
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	2378      	movs	r3, #120	; 0x78
 8004158:	4828      	ldr	r0, [pc, #160]	; (80041fc <_printf_i+0x248>)
 800415a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800415e:	e7e3      	b.n	8004128 <_printf_i+0x174>
 8004160:	065e      	lsls	r6, r3, #25
 8004162:	bf48      	it	mi
 8004164:	b2ad      	uxthmi	r5, r5
 8004166:	e7e6      	b.n	8004136 <_printf_i+0x182>
 8004168:	4616      	mov	r6, r2
 800416a:	e7bb      	b.n	80040e4 <_printf_i+0x130>
 800416c:	680b      	ldr	r3, [r1, #0]
 800416e:	6826      	ldr	r6, [r4, #0]
 8004170:	6960      	ldr	r0, [r4, #20]
 8004172:	1d1d      	adds	r5, r3, #4
 8004174:	600d      	str	r5, [r1, #0]
 8004176:	0635      	lsls	r5, r6, #24
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	d501      	bpl.n	8004180 <_printf_i+0x1cc>
 800417c:	6018      	str	r0, [r3, #0]
 800417e:	e002      	b.n	8004186 <_printf_i+0x1d2>
 8004180:	0671      	lsls	r1, r6, #25
 8004182:	d5fb      	bpl.n	800417c <_printf_i+0x1c8>
 8004184:	8018      	strh	r0, [r3, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	6123      	str	r3, [r4, #16]
 800418a:	4616      	mov	r6, r2
 800418c:	e7ba      	b.n	8004104 <_printf_i+0x150>
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	600a      	str	r2, [r1, #0]
 8004194:	681e      	ldr	r6, [r3, #0]
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	2100      	movs	r1, #0
 800419a:	4630      	mov	r0, r6
 800419c:	f7fc f840 	bl	8000220 <memchr>
 80041a0:	b108      	cbz	r0, 80041a6 <_printf_i+0x1f2>
 80041a2:	1b80      	subs	r0, r0, r6
 80041a4:	6060      	str	r0, [r4, #4]
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	2300      	movs	r3, #0
 80041ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b0:	e7a8      	b.n	8004104 <_printf_i+0x150>
 80041b2:	6923      	ldr	r3, [r4, #16]
 80041b4:	4632      	mov	r2, r6
 80041b6:	4649      	mov	r1, r9
 80041b8:	4640      	mov	r0, r8
 80041ba:	47d0      	blx	sl
 80041bc:	3001      	adds	r0, #1
 80041be:	d0ab      	beq.n	8004118 <_printf_i+0x164>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	079b      	lsls	r3, r3, #30
 80041c4:	d413      	bmi.n	80041ee <_printf_i+0x23a>
 80041c6:	68e0      	ldr	r0, [r4, #12]
 80041c8:	9b03      	ldr	r3, [sp, #12]
 80041ca:	4298      	cmp	r0, r3
 80041cc:	bfb8      	it	lt
 80041ce:	4618      	movlt	r0, r3
 80041d0:	e7a4      	b.n	800411c <_printf_i+0x168>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	47d0      	blx	sl
 80041dc:	3001      	adds	r0, #1
 80041de:	d09b      	beq.n	8004118 <_printf_i+0x164>
 80041e0:	3501      	adds	r5, #1
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	9903      	ldr	r1, [sp, #12]
 80041e6:	1a5b      	subs	r3, r3, r1
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	dcf2      	bgt.n	80041d2 <_printf_i+0x21e>
 80041ec:	e7eb      	b.n	80041c6 <_printf_i+0x212>
 80041ee:	2500      	movs	r5, #0
 80041f0:	f104 0619 	add.w	r6, r4, #25
 80041f4:	e7f5      	b.n	80041e2 <_printf_i+0x22e>
 80041f6:	bf00      	nop
 80041f8:	08004905 	.word	0x08004905
 80041fc:	08004916 	.word	0x08004916

08004200 <_putc_r>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	460d      	mov	r5, r1
 8004204:	4614      	mov	r4, r2
 8004206:	4606      	mov	r6, r0
 8004208:	b118      	cbz	r0, 8004212 <_putc_r+0x12>
 800420a:	6983      	ldr	r3, [r0, #24]
 800420c:	b90b      	cbnz	r3, 8004212 <_putc_r+0x12>
 800420e:	f7ff fb5b 	bl	80038c8 <__sinit>
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <_putc_r+0x84>)
 8004214:	429c      	cmp	r4, r3
 8004216:	d124      	bne.n	8004262 <_putc_r+0x62>
 8004218:	6874      	ldr	r4, [r6, #4]
 800421a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800421c:	07d8      	lsls	r0, r3, #31
 800421e:	d405      	bmi.n	800422c <_putc_r+0x2c>
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	0599      	lsls	r1, r3, #22
 8004224:	d402      	bmi.n	800422c <_putc_r+0x2c>
 8004226:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004228:	f7ff fbec 	bl	8003a04 <__retarget_lock_acquire_recursive>
 800422c:	68a3      	ldr	r3, [r4, #8]
 800422e:	3b01      	subs	r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	60a3      	str	r3, [r4, #8]
 8004234:	da05      	bge.n	8004242 <_putc_r+0x42>
 8004236:	69a2      	ldr	r2, [r4, #24]
 8004238:	4293      	cmp	r3, r2
 800423a:	db1c      	blt.n	8004276 <_putc_r+0x76>
 800423c:	b2eb      	uxtb	r3, r5
 800423e:	2b0a      	cmp	r3, #10
 8004240:	d019      	beq.n	8004276 <_putc_r+0x76>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	701d      	strb	r5, [r3, #0]
 800424a:	b2ed      	uxtb	r5, r5
 800424c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800424e:	07da      	lsls	r2, r3, #31
 8004250:	d405      	bmi.n	800425e <_putc_r+0x5e>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	059b      	lsls	r3, r3, #22
 8004256:	d402      	bmi.n	800425e <_putc_r+0x5e>
 8004258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425a:	f7ff fbd4 	bl	8003a06 <__retarget_lock_release_recursive>
 800425e:	4628      	mov	r0, r5
 8004260:	bd70      	pop	{r4, r5, r6, pc}
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <_putc_r+0x88>)
 8004264:	429c      	cmp	r4, r3
 8004266:	d101      	bne.n	800426c <_putc_r+0x6c>
 8004268:	68b4      	ldr	r4, [r6, #8]
 800426a:	e7d6      	b.n	800421a <_putc_r+0x1a>
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <_putc_r+0x8c>)
 800426e:	429c      	cmp	r4, r3
 8004270:	bf08      	it	eq
 8004272:	68f4      	ldreq	r4, [r6, #12]
 8004274:	e7d1      	b.n	800421a <_putc_r+0x1a>
 8004276:	4629      	mov	r1, r5
 8004278:	4622      	mov	r2, r4
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff f94a 	bl	8003514 <__swbuf_r>
 8004280:	4605      	mov	r5, r0
 8004282:	e7e3      	b.n	800424c <_putc_r+0x4c>
 8004284:	080048b4 	.word	0x080048b4
 8004288:	080048d4 	.word	0x080048d4
 800428c:	08004894 	.word	0x08004894

08004290 <_sbrk_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4d06      	ldr	r5, [pc, #24]	; (80042ac <_sbrk_r+0x1c>)
 8004294:	2300      	movs	r3, #0
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fc fe00 	bl	8000ea0 <_sbrk>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_sbrk_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_sbrk_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	20000234 	.word	0x20000234

080042b0 <__sread>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	460c      	mov	r4, r1
 80042b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b8:	f000 f8a0 	bl	80043fc <_read_r>
 80042bc:	2800      	cmp	r0, #0
 80042be:	bfab      	itete	ge
 80042c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042c2:	89a3      	ldrhlt	r3, [r4, #12]
 80042c4:	181b      	addge	r3, r3, r0
 80042c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ca:	bfac      	ite	ge
 80042cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ce:	81a3      	strhlt	r3, [r4, #12]
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <__swrite>:
 80042d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d6:	461f      	mov	r7, r3
 80042d8:	898b      	ldrh	r3, [r1, #12]
 80042da:	05db      	lsls	r3, r3, #23
 80042dc:	4605      	mov	r5, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	4616      	mov	r6, r2
 80042e2:	d505      	bpl.n	80042f0 <__swrite+0x1e>
 80042e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e8:	2302      	movs	r3, #2
 80042ea:	2200      	movs	r2, #0
 80042ec:	f000 f868 	bl	80043c0 <_lseek_r>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	4632      	mov	r2, r6
 80042fe:	463b      	mov	r3, r7
 8004300:	4628      	mov	r0, r5
 8004302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004306:	f000 b817 	b.w	8004338 <_write_r>

0800430a <__sseek>:
 800430a:	b510      	push	{r4, lr}
 800430c:	460c      	mov	r4, r1
 800430e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004312:	f000 f855 	bl	80043c0 <_lseek_r>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	bf15      	itete	ne
 800431c:	6560      	strne	r0, [r4, #84]	; 0x54
 800431e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004326:	81a3      	strheq	r3, [r4, #12]
 8004328:	bf18      	it	ne
 800432a:	81a3      	strhne	r3, [r4, #12]
 800432c:	bd10      	pop	{r4, pc}

0800432e <__sclose>:
 800432e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004332:	f000 b813 	b.w	800435c <_close_r>
	...

08004338 <_write_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d07      	ldr	r5, [pc, #28]	; (8004358 <_write_r+0x20>)
 800433c:	4604      	mov	r4, r0
 800433e:	4608      	mov	r0, r1
 8004340:	4611      	mov	r1, r2
 8004342:	2200      	movs	r2, #0
 8004344:	602a      	str	r2, [r5, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	f7fc fc14 	bl	8000b74 <_write>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_write_r+0x1e>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_write_r+0x1e>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	20000234 	.word	0x20000234

0800435c <_close_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d06      	ldr	r5, [pc, #24]	; (8004378 <_close_r+0x1c>)
 8004360:	2300      	movs	r3, #0
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc fd65 	bl	8000e36 <_close>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_close_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_close_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000234 	.word	0x20000234

0800437c <_fstat_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d07      	ldr	r5, [pc, #28]	; (800439c <_fstat_r+0x20>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	f7fc fd60 	bl	8000e4e <_fstat>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d102      	bne.n	8004398 <_fstat_r+0x1c>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	b103      	cbz	r3, 8004398 <_fstat_r+0x1c>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000234 	.word	0x20000234

080043a0 <_isatty_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4d06      	ldr	r5, [pc, #24]	; (80043bc <_isatty_r+0x1c>)
 80043a4:	2300      	movs	r3, #0
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	f7fc fd5f 	bl	8000e6e <_isatty>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_isatty_r+0x1a>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_isatty_r+0x1a>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000234 	.word	0x20000234

080043c0 <_lseek_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d07      	ldr	r5, [pc, #28]	; (80043e0 <_lseek_r+0x20>)
 80043c4:	4604      	mov	r4, r0
 80043c6:	4608      	mov	r0, r1
 80043c8:	4611      	mov	r1, r2
 80043ca:	2200      	movs	r2, #0
 80043cc:	602a      	str	r2, [r5, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f7fc fd58 	bl	8000e84 <_lseek>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_lseek_r+0x1e>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_lseek_r+0x1e>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000234 	.word	0x20000234

080043e4 <__malloc_lock>:
 80043e4:	4801      	ldr	r0, [pc, #4]	; (80043ec <__malloc_lock+0x8>)
 80043e6:	f7ff bb0d 	b.w	8003a04 <__retarget_lock_acquire_recursive>
 80043ea:	bf00      	nop
 80043ec:	2000022c 	.word	0x2000022c

080043f0 <__malloc_unlock>:
 80043f0:	4801      	ldr	r0, [pc, #4]	; (80043f8 <__malloc_unlock+0x8>)
 80043f2:	f7ff bb08 	b.w	8003a06 <__retarget_lock_release_recursive>
 80043f6:	bf00      	nop
 80043f8:	2000022c 	.word	0x2000022c

080043fc <_read_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d07      	ldr	r5, [pc, #28]	; (800441c <_read_r+0x20>)
 8004400:	4604      	mov	r4, r0
 8004402:	4608      	mov	r0, r1
 8004404:	4611      	mov	r1, r2
 8004406:	2200      	movs	r2, #0
 8004408:	602a      	str	r2, [r5, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f7fc fcf6 	bl	8000dfc <_read>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_read_r+0x1e>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_read_r+0x1e>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	20000234 	.word	0x20000234

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
