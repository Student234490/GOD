
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001408  08008160  08008160  00018160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009568  08009568  00020a30  2**0
                  CONTENTS
  4 .ARM          00000008  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009570  08009570  00020a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a30  20000000  08009578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000a30  08009fa8  00020a30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  08009fa8  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3f5  00000000  00000000  00020a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350b  00000000  00000000  0003ae55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  0003f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fea1  00000000  00000000  00040160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150d3  00000000  00000000  00060001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc583  00000000  00000000  000750d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab8  00000000  00000000  001316ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a30 	.word	0x20000a30
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008148 	.word	0x08008148

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a34 	.word	0x20000a34
 800021c:	08008148 	.word	0x08008148

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b9 	b.w	8000684 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f844 	bl	8000720 <convert>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006a0:	1415      	asrs	r5, r2, #16
 80006a2:	0414      	lsls	r4, r2, #16
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f000 f83b 	bl	8000720 <convert>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006b2:	4620      	mov	r0, r4
 80006b4:	4629      	mov	r1, r5
 80006b6:	f7ff fe1b 	bl	80002f0 <__aeabi_ldivmod>
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	4613      	mov	r3, r2
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}

080006c8 <printFix>:

void printFix(int32_t i) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	da05      	bge.n	80006e2 <printFix+0x1a>
            printf("-");
 80006d6:	202d      	movs	r0, #45	; 0x2d
 80006d8:	f006 fc12 	bl	8006f00 <putchar>
            i = ~i + 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	425b      	negs	r3, r3
 80006e0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1419      	asrs	r1, r3, #16
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	0c1b      	lsrs	r3, r3, #16
 80006f4:	461a      	mov	r2, r3
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <printFix+0x3c>)
 80006f8:	f006 fbea 	bl	8006ed0 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08008160 	.word	0x08008160

08000708 <expand>:

int32_t expand(int32_t i) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	009b      	lsls	r3, r3, #2
   }
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <convert>:

int32_t convert(int32_t i) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	041b      	lsls	r3, r3, #16
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <inconvert>:

int32_t inconvert(int32_t i) {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000746:	141b      	asrs	r3, r3, #16
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000766:	b29b      	uxth	r3, r3
 8000768:	3301      	adds	r3, #1
 800076a:	425a      	negs	r2, r3
 800076c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000770:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000774:	bf58      	it	pl
 8000776:	4253      	negpl	r3, r2
 8000778:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000780:	b29b      	uxth	r3, r3
 8000782:	89fa      	ldrh	r2, [r7, #14]
 8000784:	429a      	cmp	r2, r3
 8000786:	d00c      	beq.n	80007a2 <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800078e:	b29b      	uxth	r3, r3
 8000790:	4619      	mov	r1, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	78fa      	ldrb	r2, [r7, #3]
 8000796:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	89fa      	ldrh	r2, [r7, #14]
 800079c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 80007a0:	e002      	b.n	80007a8 <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <RingBuffer_Write+0x5c>)
 80007a4:	f006 fb94 	bl	8006ed0 <iprintf>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08008170 	.word	0x08008170

080007b4 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    int result = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80007c0:	e015      	b.n	80007ee <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b2f      	cmp	r3, #47	; 0x2f
 80007c8:	d90e      	bls.n	80007e8 <string_to_int+0x34>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b39      	cmp	r3, #57	; 0x39
 80007d0:	d80a      	bhi.n	80007e8 <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3b30      	subs	r3, #48	; 0x30
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
        }
        str++;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3301      	adds	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
    while (*str) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1e5      	bne.n	80007c2 <string_to_int+0xe>
    }
    return result;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <powten>:

int powten(int x) {
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	int i = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	dd0f      	ble.n	8000836 <powten+0x32>
		for (int j = 0; j < x; j++) {
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	e008      	b.n	800082e <powten+0x2a>
			i *= 10;
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	429a      	cmp	r2, r3
 8000834:	dbf2      	blt.n	800081c <powten+0x18>
		}
	}
	return i;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <Altxx>:

int32_t Altxx(char *data) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 800084c:	4921      	ldr	r1, [pc, #132]	; (80008d4 <Altxx+0x90>)
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f006 fc14 	bl	800707c <strtok>
 8000854:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
	int j = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 8000866:	e01a      	b.n	800089e <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 8000868:	69f8      	ldr	r0, [r7, #28]
 800086a:	f7ff ffa3 	bl	80007b4 <string_to_int>
 800086e:	4602      	mov	r2, r0
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f107 0120 	add.w	r1, r7, #32
 8000878:	440b      	add	r3, r1
 800087a:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d104      	bne.n	800088e <Altxx+0x4a>
 8000884:	69f8      	ldr	r0, [r7, #28]
 8000886:	f7ff fcd5 	bl	8000234 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 8000894:	490f      	ldr	r1, [pc, #60]	; (80008d4 <Altxx+0x90>)
 8000896:	2000      	movs	r0, #0
 8000898:	f006 fbf0 	bl	800707c <strtok>
 800089c:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1e1      	bne.n	8000868 <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff3a 	bl	8000720 <convert>
 80008ac:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 80008ae:	68fc      	ldr	r4, [r7, #12]
 80008b0:	69b8      	ldr	r0, [r7, #24]
 80008b2:	f7ff ffa7 	bl	8000804 <powten>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4620      	mov	r0, r4
 80008bc:	f7ff fee4 	bl	8000688 <Rational>
 80008c0:	4602      	mov	r2, r0
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	4413      	add	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 80008c8:	693b      	ldr	r3, [r7, #16]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08008208 	.word	0x08008208

080008d8 <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <DDmmmmmm+0x90>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	82bb      	strh	r3, [r7, #20]
 80008e6:	2300      	movs	r3, #0
 80008e8:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2202      	movs	r2, #2
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fb94 	bl	8007028 <strncpy>
    strcpy(mm_str, data + 2);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1c9a      	adds	r2, r3, #2
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f006 fb84 	bl	8007018 <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff4d 	bl	80007b4 <string_to_int>
 800091a:	4603      	mov	r3, r0
 800091c:	041b      	lsls	r3, r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff45 	bl	80007b4 <string_to_int>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000932:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	141d      	asrs	r5, r3, #16
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	041c      	lsls	r4, r3, #16
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <DDmmmmmm+0x94>)
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	4620      	mov	r0, r4
 8000946:	4629      	mov	r1, r5
 8000948:	f7ff fcd2 	bl	80002f0 <__aeabi_ldivmod>
 800094c:	4602      	mov	r2, r0
 800094e:	460b      	mov	r3, r1
 8000950:	4613      	mov	r3, r2
 8000952:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000958:	4413      	add	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]

    return cords;
 800095c:	69bb      	ldr	r3, [r7, #24]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bdb0      	pop	{r4, r5, r7, pc}
 8000966:	bf00      	nop
 8000968:	0800820c 	.word	0x0800820c
 800096c:	000927c0 	.word	0x000927c0

08000970 <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2203      	movs	r2, #3
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f006 fb48 	bl	8007028 <strncpy>
	strcpy(mm_str, data + 3);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	1cda      	adds	r2, r3, #3
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 fb38 	bl	8007018 <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff01 	bl	80007b4 <string_to_int>
 80009b2:	4603      	mov	r3, r0
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fef9 	bl	80007b4 <string_to_int>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	141d      	asrs	r5, r3, #16
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	041c      	lsls	r4, r3, #16
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <DDDmmmmmm+0x90>)
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	4620      	mov	r0, r4
 80009de:	4629      	mov	r1, r5
 80009e0:	f7ff fc86 	bl	80002f0 <__aeabi_ldivmod>
 80009e4:	4602      	mov	r2, r0
 80009e6:	460b      	mov	r3, r1
 80009e8:	4613      	mov	r3, r2
 80009ea:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 80009ec:	69fa      	ldr	r2, [r7, #28]
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	4413      	add	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
	return cords;
 80009f4:	69bb      	ldr	r3, [r7, #24]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	000927c0 	.word	0x000927c0

08000a04 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d101      	bne.n	8000a26 <RingBuffer_Read+0x22>
        return 0;  // No data
 8000a22:	2300      	movs	r3, #0
 8000a24:	e019      	b.n	8000a5a <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	5c9a      	ldrb	r2, [r3, r2]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	3301      	adds	r3, #1
 8000a42:	425a      	negs	r2, r3
 8000a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a4c:	bf58      	it	pl
 8000a4e:	4253      	negpl	r3, r2
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    return 1;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	7b1b      	ldrb	r3, [r3, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 8097 	beq.w	8000baa <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 8000a7c:	4a6c      	ldr	r2, [pc, #432]	; (8000c30 <getGPGGA+0x1c8>)
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	8019      	strh	r1, [r3, #0]
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	0c0a      	lsrs	r2, r1, #16
 8000a90:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f006 fad8 	bl	800704e <strstr>
 8000a9e:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80bf 	beq.w	8000c26 <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 8000aa8:	69b8      	ldr	r0, [r7, #24]
 8000aaa:	f7ff fbc3 	bl	8000234 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b28      	cmp	r3, #40	; 0x28
 8000ab2:	d973      	bls.n	8000b9c <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 8000ab4:	495f      	ldr	r1, [pc, #380]	; (8000c34 <getGPGGA+0x1cc>)
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f006 fae0 	bl	800707c <strtok>
 8000abc:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 8000ac2:	e067      	b.n	8000b94 <getGPGGA+0x12c>
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	3b03      	subs	r3, #3
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d85a      	bhi.n	8000b82 <getGPGGA+0x11a>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <getGPGGA+0x6c>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000af5 	.word	0x08000af5
 8000ad8:	08000b03 	.word	0x08000b03
 8000adc:	08000b35 	.word	0x08000b35
 8000ae0:	08000b43 	.word	0x08000b43
 8000ae4:	08000b83 	.word	0x08000b83
 8000ae8:	08000b83 	.word	0x08000b83
 8000aec:	08000b83 	.word	0x08000b83
 8000af0:	08000b75 	.word	0x08000b75
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8000af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000af6:	f7ff feef 	bl	80008d8 <DDmmmmmm>
 8000afa:	4602      	mov	r2, r0
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	601a      	str	r2, [r3, #0]
							break;
 8000b00:	e040      	b.n	8000b84 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8000b02:	494d      	ldr	r1, [pc, #308]	; (8000c38 <getGPGGA+0x1d0>)
 8000b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b06:	f7ff fb8b 	bl	8000220 <strcmp>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b18:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 8000b20:	e030      	b.n	8000b84 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	425a      	negs	r2, r3
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	601a      	str	r2, [r3, #0]
							break;
 8000b32:	e027      	b.n	8000b84 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 8000b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b36:	f7ff ff1b 	bl	8000970 <DDDmmmmmm>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
							break;
 8000b40:	e020      	b.n	8000b84 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 8000b42:	493e      	ldr	r1, [pc, #248]	; (8000c3c <getGPGGA+0x1d4>)
 8000b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b46:	f7ff fb6b 	bl	8000220 <strcmp>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 8000b60:	e010      	b.n	8000b84 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	425a      	negs	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	605a      	str	r2, [r3, #4]
							break;
 8000b72:	e007      	b.n	8000b84 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 8000b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b76:	f7ff fe65 	bl	8000844 <Altxx>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	609a      	str	r2, [r3, #8]
							break;
 8000b80:	e000      	b.n	8000b84 <getGPGGA+0x11c>
						}
						default: {
							break;
 8000b82:	bf00      	nop
						}
					}
					i++;
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	3301      	adds	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000b8a:	492a      	ldr	r1, [pc, #168]	; (8000c34 <getGPGGA+0x1cc>)
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f006 fa75 	bl	800707c <strtok>
 8000b92:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d194      	bne.n	8000ac4 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s \r\n", filter);
		}
	}
}
 8000b9a:	e044      	b.n	8000c26 <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 8000b9c:	4828      	ldr	r0, [pc, #160]	; (8000c40 <getGPGGA+0x1d8>)
 8000b9e:	f006 fa33 	bl	8007008 <puts>
				gps->active = 0;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	731a      	strb	r2, [r3, #12]
}
 8000ba8:	e03d      	b.n	8000c26 <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 8000baa:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <getGPGGA+0x1dc>)
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb4:	6018      	str	r0, [r3, #0]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	8019      	strh	r1, [r3, #0]
 8000bba:	3302      	adds	r3, #2
 8000bbc:	0c0a      	lsrs	r2, r1, #16
 8000bbe:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f006 fa41 	bl	800704e <strstr>
 8000bcc:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d028      	beq.n	8000c26 <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 8000bd4:	4917      	ldr	r1, [pc, #92]	; (8000c34 <getGPGGA+0x1cc>)
 8000bd6:	69f8      	ldr	r0, [r7, #28]
 8000bd8:	f006 fa50 	bl	800707c <strtok>
 8000bdc:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8000be2:	e01d      	b.n	8000c20 <getGPGGA+0x1b8>
				i++;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	3301      	adds	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000bea:	4912      	ldr	r1, [pc, #72]	; (8000c34 <getGPGGA+0x1cc>)
 8000bec:	2000      	movs	r0, #0
 8000bee:	f006 fa45 	bl	800707c <strtok>
 8000bf2:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d112      	bne.n	8000c20 <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 8000bfa:	4913      	ldr	r1, [pc, #76]	; (8000c48 <getGPGGA+0x1e0>)
 8000bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bfe:	f7ff fb0f 	bl	8000220 <strcmp>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d106      	bne.n	8000c16 <getGPGGA+0x1ae>
							gps->active = 1;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <getGPGGA+0x1e4>)
 8000c10:	f006 f9fa 	bl	8007008 <puts>
 8000c14:	e003      	b.n	8000c1e <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <getGPGGA+0x1e8>)
 8000c1a:	f006 f959 	bl	8006ed0 <iprintf>
						break;
 8000c1e:	bf00      	nop
			while (tokPtr != NULL) {
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1de      	bne.n	8000be4 <getGPGGA+0x17c>
}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	0800826c 	.word	0x0800826c
 8000c34:	08008210 	.word	0x08008210
 8000c38:	08008214 	.word	0x08008214
 8000c3c:	08008218 	.word	0x08008218
 8000c40:	0800821c 	.word	0x0800821c
 8000c44:	08008274 	.word	0x08008274
 8000c48:	08008238 	.word	0x08008238
 8000c4c:	0800823c 	.word	0x0800823c
 8000c50:	08008250 	.word	0x08008250

08000c54 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 8000c5e:	e01d      	b.n	8000c9c <process_uart_data+0x48>
        if (indx < sizeof(sentence) - 1) {
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <process_uart_data+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2bf8      	cmp	r3, #248	; 0xf8
 8000c66:	d807      	bhi.n	8000c78 <process_uart_data+0x24>
            sentence[indx++] = c;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <process_uart_data+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	4912      	ldr	r1, [pc, #72]	; (8000cb8 <process_uart_data+0x64>)
 8000c70:	600a      	str	r2, [r1, #0]
 8000c72:	7bf9      	ldrb	r1, [r7, #15]
 8000c74:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <process_uart_data+0x68>)
 8000c76:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	d10e      	bne.n	8000c9c <process_uart_data+0x48>
            sentence[indx] = '\0';  // Null-terminate the string
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <process_uart_data+0x64>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <process_uart_data+0x68>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	54d1      	strb	r1, [r2, r3]
            printf("Log:   UART Sentence received \r\n");
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <process_uart_data+0x6c>)
 8000c8a:	f006 f9bd 	bl	8007008 <puts>
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <process_uart_data+0x68>)
 8000c92:	f7ff fee9 	bl	8000a68 <getGPGGA>
            indx = 0;  // Reset for next line
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <process_uart_data+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8000c9c:	f107 030f 	add.w	r3, r7, #15
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff feae 	bl	8000a04 <RingBuffer_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1d8      	bne.n	8000c60 <process_uart_data+0xc>
        }
    }
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000a4c 	.word	0x20000a4c
 8000cbc:	20000e60 	.word	0x20000e60
 8000cc0:	0800827c 	.word	0x0800827c

08000cc4 <printGPS>:

void printGPS(GPSRead_t GPS) {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	463c      	mov	r4, r7
 8000ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (GPS.active) {
 8000cd0:	7b3b      	ldrb	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d01a      	beq.n	8000d0c <printGPS+0x48>
		printf("Active: %i ~ Latitude: ", GPS.active);
 8000cd6:	7b3b      	ldrb	r3, [r7, #12]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <printGPS+0x58>)
 8000cdc:	f006 f8f8 	bl	8006ed0 <iprintf>
		printFix(GPS.latitude);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fcf0 	bl	80006c8 <printFix>
		printf("deg ~ Longitude: ");
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <printGPS+0x5c>)
 8000cea:	f006 f8f1 	bl	8006ed0 <iprintf>
		printFix(GPS.longitude);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fce9 	bl	80006c8 <printFix>
		printf("deg ~ Altitude: ");
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <printGPS+0x60>)
 8000cf8:	f006 f8ea 	bl	8006ed0 <iprintf>
		printFix(GPS.altitude);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fce2 	bl	80006c8 <printFix>
		printf("m. \r\n");
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <printGPS+0x64>)
 8000d06:	f006 f97f 	bl	8007008 <puts>
	} else {
		printf("Error: GPS inactive \r\n");
	}
}
 8000d0a:	e002      	b.n	8000d12 <printGPS+0x4e>
		printf("Error: GPS inactive \r\n");
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <printGPS+0x68>)
 8000d0e:	f006 f97b 	bl	8007008 <puts>
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	0800829c 	.word	0x0800829c
 8000d20:	080082b4 	.word	0x080082b4
 8000d24:	080082c8 	.word	0x080082c8
 8000d28:	080082dc 	.word	0x080082dc
 8000d2c:	080082e4 	.word	0x080082e4

08000d30 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <I2C_Scan+0x58>)
 8000d3a:	f006 f965 	bl	8007008 <puts>

    for (i = 1; i < 128; i++) {
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e015      	b.n	8000d70 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	b299      	uxth	r1, r3
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f002 fc4d 	bl	80035f0 <HAL_I2C_IsDeviceReady>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d104      	bne.n	8000d6a <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	4619      	mov	r1, r3
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <I2C_Scan+0x5c>)
 8000d66:	f006 f8b3 	bl	8006ed0 <iprintf>
    for (i = 1; i < 128; i++) {
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dae5      	bge.n	8000d44 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <I2C_Scan+0x60>)
 8000d7a:	f006 f945 	bl	8007008 <puts>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	080082fc 	.word	0x080082fc
 8000d8c:	08008314 	.word	0x08008314
 8000d90:	0800833c 	.word	0x0800833c

08000d94 <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f002 fa5a 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f001 fee3 	bl	8002b70 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f002 fa51 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f001 feda 	bl	8002b70 <HAL_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f002 fa3d 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	2120      	movs	r1, #32
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f002 fa31 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f002 fa25 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <LCD_Send4Bits+0x70>)
 8000e20:	f002 fa1a 	bl	8003258 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000e24:	f7ff ffb6 	bl	8000d94 <LCD_EnablePulse>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	48000400 	.word	0x48000400

08000e34 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2101      	movs	r1, #1
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f002 fa07 	bl	8003258 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ffb5 	bl	8000dc0 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffae 	bl	8000dc0 <LCD_Send4Bits>
    HAL_Delay(2);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f001 fe83 	bl	8002b70 <HAL_Delay>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LCD_SendChar>:

void LCD_SendChar(char c) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2101      	movs	r1, #1
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f002 f9e8 	bl	8003258 <HAL_GPIO_WritePin>
    LCD_Send4Bits(c >> 4);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff96 	bl	8000dc0 <LCD_Send4Bits>
    LCD_Send4Bits(c & 0x0F);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff8f 	bl	8000dc0 <LCD_Send4Bits>
    HAL_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f001 fe64 	bl	8002b70 <HAL_Delay>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LCD_SendString>:

void LCD_SendString(char* str) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000eb8:	e006      	b.n	8000ec8 <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffd5 	bl	8000e72 <LCD_SendChar>
    while (*str) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f4      	bne.n	8000eba <LCD_SendString+0xa>
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <LCD_SetCursor+0x1a>
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	e000      	b.n	8000ef6 <LCD_SetCursor+0x1c>
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	4413      	add	r3, r2
 8000efa:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | addr);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff95 	bl	8000e34 <LCD_SendCommand>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LCD_Init>:

void LCD_Init(void) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 8000f16:	2028      	movs	r0, #40	; 0x28
 8000f18:	f001 fe2a 	bl	8002b70 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f7ff ff4f 	bl	8000dc0 <LCD_Send4Bits>
 8000f22:	2005      	movs	r0, #5
 8000f24:	f001 fe24 	bl	8002b70 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f7ff ff49 	bl	8000dc0 <LCD_Send4Bits>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f001 fe1e 	bl	8002b70 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f7ff ff43 	bl	8000dc0 <LCD_Send4Bits>
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f001 fe18 	bl	8002b70 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff ff3d 	bl	8000dc0 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8000f46:	2028      	movs	r0, #40	; 0x28
 8000f48:	f7ff ff74 	bl	8000e34 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8000f4c:	200c      	movs	r0, #12
 8000f4e:	f7ff ff71 	bl	8000e34 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 8000f52:	2006      	movs	r0, #6
 8000f54:	f7ff ff6e 	bl	8000e34 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ff6b 	bl	8000e34 <LCD_SendCommand>
    HAL_Delay(2);
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f001 fe06 	bl	8002b70 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8000f70:	f240 5322 	movw	r3, #1314	; 0x522
 8000f74:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8000f76:	f107 021c 	add.w	r2, r7, #28
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2302      	movs	r3, #2
 8000f82:	21d6      	movs	r1, #214	; 0xd6
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f002 fa1b 	bl	80033c0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f001 fdf0 	bl	8002b70 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 8000f90:	f246 0320 	movw	r3, #24608	; 0x6020
 8000f94:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 8000f96:	f107 0218 	add.w	r2, r7, #24
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	21d6      	movs	r1, #214	; 0xd6
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f002 fa0b 	bl	80033c0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f001 fde0 	bl	8002b70 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 8000fb0:	f247 0320 	movw	r3, #28704	; 0x7020
 8000fb4:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8000fb6:	f107 0214 	add.w	r2, r7, #20
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	213c      	movs	r1, #60	; 0x3c
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f002 f9fb 	bl	80033c0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f001 fdd0 	bl	8002b70 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8000fd0:	2322      	movs	r3, #34	; 0x22
 8000fd2:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8000fd4:	f107 0210 	add.w	r2, r7, #16
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	213c      	movs	r1, #60	; 0x3c
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f002 f9ec 	bl	80033c0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f001 fdc1 	bl	8002b70 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8000fee:	f640 4323 	movw	r3, #3107	; 0xc23
 8000ff2:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8000ff4:	f107 020c 	add.w	r2, r7, #12
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2302      	movs	r3, #2
 8001000:	213c      	movs	r1, #60	; 0x3c
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 f9dc 	bl	80033c0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8001008:	200a      	movs	r0, #10
 800100a:	f001 fdb1 	bl	8002b70 <HAL_Delay>
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <sinus>:
      -402,   -352,   -302,   -251,   -201,   -151,   -101,    -50,
};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 8001020:	e003      	b.n	800102a <sinus+0x12>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dbf8      	blt.n	8001022 <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	425a      	negs	r2, r3
 8001034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001038:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800103c:	bf58      	it	pl
 800103e:	4253      	negpl	r3, r2
 8001040:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <sinus+0x44>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800104a:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff fb5b 	bl	8000708 <expand>
 8001052:	4603      	mov	r3, r0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	080083dc 	.word	0x080083dc

08001060 <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800106e:	425a      	negs	r2, r3
 8001070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001074:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001078:	bf58      	it	pl
 800107a:	4253      	negpl	r3, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ffcb 	bl	8001018 <sinus>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 800108c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8001096:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800109a:	f7ff fb41 	bl	8000720 <convert>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80010a6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80010aa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff fb36 	bl	8000720 <convert>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461c      	mov	r4, r3
 80010b8:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80010bc:	4622      	mov	r2, r4
 80010be:	462b      	mov	r3, r5
 80010c0:	1891      	adds	r1, r2, r2
 80010c2:	6039      	str	r1, [r7, #0]
 80010c4:	415b      	adcs	r3, r3
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010cc:	1912      	adds	r2, r2, r4
 80010ce:	eb45 0303 	adc.w	r3, r5, r3
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	f04f 0100 	mov.w	r1, #0
 80010da:	0199      	lsls	r1, r3, #6
 80010dc:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80010e0:	0190      	lsls	r0, r2, #6
 80010e2:	1812      	adds	r2, r2, r0
 80010e4:	eb41 0303 	adc.w	r3, r1, r3
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	f04f 0100 	mov.w	r1, #0
 80010f0:	0159      	lsls	r1, r3, #5
 80010f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010f6:	0150      	lsls	r0, r2, #5
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	1b12      	subs	r2, r2, r4
 80010fe:	eb63 0305 	sbc.w	r3, r3, r5
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	0159      	lsls	r1, r3, #5
 800110c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001110:	0150      	lsls	r0, r2, #5
 8001112:	eb12 0800 	adds.w	r8, r2, r0
 8001116:	eb43 0901 	adc.w	r9, r3, r1
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001126:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 800112a:	ea4f 4329 	mov.w	r3, r9, asr #16
 800112e:	4613      	mov	r3, r2
 8001130:	461a      	mov	r2, r3
 8001132:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001136:	4650      	mov	r0, sl
 8001138:	4659      	mov	r1, fp
 800113a:	f7ff f8d9 	bl	80002f0 <__aeabi_ldivmod>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4613      	mov	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	461a      	mov	r2, r3
 8001152:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001156:	fb02 f501 	mul.w	r5, r2, r1
 800115a:	fb00 f403 	mul.w	r4, r0, r3
 800115e:	442c      	add	r4, r5
 8001160:	fba0 2302 	umull	r2, r3, r0, r2
 8001164:	18e1      	adds	r1, r4, r3
 8001166:	460b      	mov	r3, r1
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	f04f 0100 	mov.w	r1, #0
 8001170:	0c10      	lsrs	r0, r2, #16
 8001172:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001176:	1419      	asrs	r1, r3, #16
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fadc 	bl	8000738 <inconvert>
 8001180:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 8001182:	6938      	ldr	r0, [r7, #16]
 8001184:	f7ff ff48 	bl	8001018 <sinus>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001194 <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8001194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 800119e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011a2:	f7ff fabd 	bl	8000720 <convert>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011ae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80011b2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff fab2 	bl	8000720 <convert>
 80011bc:	4603      	mov	r3, r0
 80011be:	461c      	mov	r4, r3
 80011c0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80011c4:	4622      	mov	r2, r4
 80011c6:	462b      	mov	r3, r5
 80011c8:	1891      	adds	r1, r2, r2
 80011ca:	6039      	str	r1, [r7, #0]
 80011cc:	415b      	adcs	r3, r3
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011d4:	1912      	adds	r2, r2, r4
 80011d6:	eb45 0303 	adc.w	r3, r5, r3
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	f04f 0100 	mov.w	r1, #0
 80011e2:	0199      	lsls	r1, r3, #6
 80011e4:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80011e8:	0190      	lsls	r0, r2, #6
 80011ea:	1812      	adds	r2, r2, r0
 80011ec:	eb41 0303 	adc.w	r3, r1, r3
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	f04f 0100 	mov.w	r1, #0
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011fe:	0150      	lsls	r0, r2, #5
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	1b12      	subs	r2, r2, r4
 8001206:	eb63 0305 	sbc.w	r3, r3, r5
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	0159      	lsls	r1, r3, #5
 8001214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001218:	0150      	lsls	r0, r2, #5
 800121a:	eb12 0800 	adds.w	r8, r2, r0
 800121e:	eb43 0901 	adc.w	r9, r3, r1
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 800122e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001232:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001236:	4613      	mov	r3, r2
 8001238:	461a      	mov	r2, r3
 800123a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800123e:	4650      	mov	r0, sl
 8001240:	4659      	mov	r1, fp
 8001242:	f7ff f855 	bl	80002f0 <__aeabi_ldivmod>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4613      	mov	r3, r2
 800124c:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	461a      	mov	r2, r3
 800125a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800125e:	fb02 f501 	mul.w	r5, r2, r1
 8001262:	fb00 f403 	mul.w	r4, r0, r3
 8001266:	442c      	add	r4, r5
 8001268:	fba0 2302 	umull	r2, r3, r0, r2
 800126c:	18e1      	adds	r1, r4, r3
 800126e:	460b      	mov	r3, r1
 8001270:	f04f 0000 	mov.w	r0, #0
 8001274:	f04f 0100 	mov.w	r1, #0
 8001278:	0c10      	lsrs	r0, r2, #16
 800127a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800127e:	1419      	asrs	r1, r3, #16
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa58 	bl	8000738 <inconvert>
 8001288:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 800128a:	6938      	ldr	r0, [r7, #16]
 800128c:	f7ff fee8 	bl	8001060 <cosinus>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800129c <normalizeTheta>:

int32_t HVs[104] = {
0x00000000, 0xFFEACCCD, 0x00000000, 0xFFD8AE14, 0xFFF663D7, 0x00000000, 0x00112666, 0xFFF74A3D, 0xFFF9AE14, 0x00000000, 0x00096B85, 0x0003E8F6, 0x000AAB85, 0xFFFFC7AE, 0x00000000, 0xFFFCF333, 0x000B87AE, 0x000968F6, 0x00086E14, 0xFFFFA666, 0x00000000, 0xFFF2C51F, 0xFFE5199A, 0xFFFE028F, 0xFFFDD1EC, 0xFFFF87AE, 0x0001028F, 0x00000000, 0x0018D47B, 0x0008B0A4, 0x00020CCD, 0x0003B333, 0xFFFB0F5C, 0xFFFFC28F, 0x00002148, 0x00000000, 0xFFF2970A, 0x00059C29, 0x000C6E14, 0x000AB0A4, 0x00017AE1, 0xFFFDF0A4, 0x00010000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

int32_t normalizeTheta(int32_t theta) {
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    int32_t result;
    if ((theta > -1) && (theta<1)) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db05      	blt.n	80012b6 <normalizeTheta+0x1a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dc02      	bgt.n	80012b6 <normalizeTheta+0x1a>
        result = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e00c      	b.n	80012d0 <normalizeTheta+0x34>
    }
    else {
    	if ((theta < ((180 << 16) + 1)) && (theta > ((179 << 16) + 65535))) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80012bc:	dc06      	bgt.n	80012cc <normalizeTheta+0x30>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80012c4:	db02      	blt.n	80012cc <normalizeTheta+0x30>
            result = (179<<16)+65535;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <normalizeTheta+0x44>)
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e001      	b.n	80012d0 <normalizeTheta+0x34>
        }
        else {
            result = theta;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
        }
    }
    return result;
 80012d0:	68fb      	ldr	r3, [r7, #12]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	00b3ffff 	.word	0x00b3ffff

080012e4 <toRad>:

int32_t toRad(int32_t angledeg) {
 80012e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
    return DIV(MULT(angledeg,PI),180<<16);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	461c      	mov	r4, r3
 80012f2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80012f6:	4622      	mov	r2, r4
 80012f8:	462b      	mov	r3, r5
 80012fa:	1891      	adds	r1, r2, r2
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	415b      	adcs	r3, r3
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001306:	1912      	adds	r2, r2, r4
 8001308:	eb45 0303 	adc.w	r3, r5, r3
 800130c:	f04f 0000 	mov.w	r0, #0
 8001310:	f04f 0100 	mov.w	r1, #0
 8001314:	0199      	lsls	r1, r3, #6
 8001316:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800131a:	0190      	lsls	r0, r2, #6
 800131c:	1812      	adds	r2, r2, r0
 800131e:	eb41 0303 	adc.w	r3, r1, r3
 8001322:	f04f 0000 	mov.w	r0, #0
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	0159      	lsls	r1, r3, #5
 800132c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001330:	0150      	lsls	r0, r2, #5
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	1b12      	subs	r2, r2, r4
 8001338:	eb63 0305 	sbc.w	r3, r3, r5
 800133c:	f04f 0000 	mov.w	r0, #0
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	0159      	lsls	r1, r3, #5
 8001346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800134a:	0150      	lsls	r0, r2, #5
 800134c:	eb12 0800 	adds.w	r8, r2, r0
 8001350:	eb43 0901 	adc.w	r9, r3, r1
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001360:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001364:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001368:	4613      	mov	r3, r2
 800136a:	461a      	mov	r2, r3
 800136c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001370:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001374:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001378:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	4650      	mov	r0, sl
 8001382:	4659      	mov	r1, fp
 8001384:	f7fe ffb4 	bl	80002f0 <__aeabi_ldivmod>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4613      	mov	r3, r2
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001398 <magnet>:

void magnet(int32_t r, int32_t theta, int32_t phi, int32_t days, int32_t buffer[3]) {
 8001398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800139c:	b0b9      	sub	sp, #228	; 0xe4
 800139e:	af00      	add	r7, sp, #0
 80013a0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80013a4:	637a      	str	r2, [r7, #52]	; 0x34
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
 80013a8:	466b      	mov	r3, sp
 80013aa:	60bb      	str	r3, [r7, #8]
	 * Input2: 16.16 latitude in degrees, where 0 is equator, 90 is north pole and -90 is south pole
	 * Input3: 16.16 longitude in degrees, ranging from -180 to 180, where 0 is the prime meridian
	 * Input4: 16.16 decimal days since 2000
	 * Input5: 3-array of int32_t to be changed to Br, Bt and Bp respectively, in Rasmus units
	 */
	printf("Theta input: ");
 80013ac:	4892      	ldr	r0, [pc, #584]	; (80015f8 <magnet+0x260>)
 80013ae:	f005 fd8f 	bl	8006ed0 <iprintf>
	printFix(theta);
 80013b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013b4:	f7ff f988 	bl	80006c8 <printFix>
	printf("\r\n");
 80013b8:	4890      	ldr	r0, [pc, #576]	; (80015fc <magnet+0x264>)
 80013ba:	f005 fe25 	bl	8007008 <puts>

	printf("Phi input: ");
 80013be:	4890      	ldr	r0, [pc, #576]	; (8001600 <magnet+0x268>)
 80013c0:	f005 fd86 	bl	8006ed0 <iprintf>
	printFix(phi);
 80013c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013c6:	f7ff f97f 	bl	80006c8 <printFix>
	printf("\r\n");
 80013ca:	488c      	ldr	r0, [pc, #560]	; (80015fc <magnet+0x264>)
 80013cc:	f005 fe1c 	bl	8007008 <puts>

	printf("Normalized theta: ");
 80013d0:	488c      	ldr	r0, [pc, #560]	; (8001604 <magnet+0x26c>)
 80013d2:	f005 fd7d 	bl	8006ed0 <iprintf>
    theta = normalizeTheta(theta);
 80013d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013d8:	f7ff ff60 	bl	800129c <normalizeTheta>
 80013dc:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 80013de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013e0:	f7ff f972 	bl	80006c8 <printFix>
    printf("\r\n");
 80013e4:	4885      	ldr	r0, [pc, #532]	; (80015fc <magnet+0x264>)
 80013e6:	f005 fe0f 	bl	8007008 <puts>

    printf("Theta radians: ");
 80013ea:	4887      	ldr	r0, [pc, #540]	; (8001608 <magnet+0x270>)
 80013ec:	f005 fd70 	bl	8006ed0 <iprintf>
    theta = toRad(5898240-theta);
 80013f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f2:	f5c3 03b4 	rsb	r3, r3, #5898240	; 0x5a0000
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff74 	bl	80012e4 <toRad>
 80013fc:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 80013fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001400:	f7ff f962 	bl	80006c8 <printFix>
    printf("\r\n");
 8001404:	487d      	ldr	r0, [pc, #500]	; (80015fc <magnet+0x264>)
 8001406:	f005 fdff 	bl	8007008 <puts>

    printf("Phi radians: ");
 800140a:	4880      	ldr	r0, [pc, #512]	; (800160c <magnet+0x274>)
 800140c:	f005 fd60 	bl	8006ed0 <iprintf>
    phi = toRad(phi);
 8001410:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001412:	f7ff ff67 	bl	80012e4 <toRad>
 8001416:	6378      	str	r0, [r7, #52]	; 0x34
    printFix(phi);
 8001418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800141a:	f7ff f955 	bl	80006c8 <printFix>
    printf("\r\n");
 800141e:	4877      	ldr	r0, [pc, #476]	; (80015fc <magnet+0x264>)
 8001420:	f005 fdf2 	bl	8007008 <puts>
    int32_t a = 417542963;
 8001424:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <magnet+0x278>)
 8001426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int Nmodel = 13; // hard code
 800142a:	230d      	movs	r3, #13
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int Nmax = Nmodel * (Nmodel + 3 ) / 2;
 8001430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001434:	3303      	adds	r3, #3
 8001436:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	0fda      	lsrs	r2, r3, #31
 8001440:	4413      	add	r3, r2
 8001442:	105b      	asrs	r3, r3, #1
 8001444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    int32_t g[Nmodel][Nmodel+1];
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800144c:	f103 0c01 	add.w	ip, r3, #1
 8001450:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8001454:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800145c:	4663      	mov	r3, ip
 800145e:	461a      	mov	r2, r3
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f04f 0000 	mov.w	r0, #0
 8001468:	f04f 0100 	mov.w	r1, #0
 800146c:	0159      	lsls	r1, r3, #5
 800146e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001472:	0150      	lsls	r0, r2, #5
 8001474:	4663      	mov	r3, ip
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	4633      	mov	r3, r6
 800147c:	3b01      	subs	r3, #1
 800147e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001482:	4663      	mov	r3, ip
 8001484:	4618      	mov	r0, r3
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	4633      	mov	r3, r6
 800148c:	461a      	mov	r2, r3
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	fb02 f501 	mul.w	r5, r2, r1
 8001496:	fb00 f403 	mul.w	r4, r0, r3
 800149a:	442c      	add	r4, r5
 800149c:	fba0 0102 	umull	r0, r1, r0, r2
 80014a0:	1863      	adds	r3, r4, r1
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	014b      	lsls	r3, r1, #5
 80014ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014b2:	0142      	lsls	r2, r0, #5
 80014b4:	4663      	mov	r3, ip
 80014b6:	4618      	mov	r0, r3
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	4633      	mov	r3, r6
 80014be:	461a      	mov	r2, r3
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	fb02 f501 	mul.w	r5, r2, r1
 80014c8:	fb00 f403 	mul.w	r4, r0, r3
 80014cc:	442c      	add	r4, r5
 80014ce:	fba0 0102 	umull	r0, r1, r0, r2
 80014d2:	1863      	adds	r3, r4, r1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	014b      	lsls	r3, r1, #5
 80014e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014e4:	0142      	lsls	r2, r0, #5
 80014e6:	4662      	mov	r2, ip
 80014e8:	607e      	str	r6, [r7, #4]
 80014ea:	4633      	mov	r3, r6
 80014ec:	fb03 f302 	mul.w	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	3307      	adds	r3, #7
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	ebad 0d03 	sub.w	sp, sp, r3
 80014fc:	466b      	mov	r3, sp
 80014fe:	3303      	adds	r3, #3
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t h[Nmodel][Nmodel+1];
 8001508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800150c:	1c5e      	adds	r6, r3, #1
 800150e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8001512:	1e73      	subs	r3, r6, #1
 8001514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001518:	4633      	mov	r3, r6
 800151a:	461a      	mov	r2, r3
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f04f 0000 	mov.w	r0, #0
 8001524:	f04f 0100 	mov.w	r1, #0
 8001528:	0159      	lsls	r1, r3, #5
 800152a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800152e:	0150      	lsls	r0, r2, #5
 8001530:	4633      	mov	r3, r6
 8001532:	009a      	lsls	r2, r3, #2
 8001534:	60fa      	str	r2, [r7, #12]
 8001536:	4622      	mov	r2, r4
 8001538:	1e53      	subs	r3, r2, #1
 800153a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800153e:	4633      	mov	r3, r6
 8001540:	4618      	mov	r0, r3
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	613c      	str	r4, [r7, #16]
 8001548:	4623      	mov	r3, r4
 800154a:	461a      	mov	r2, r3
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	fb02 f501 	mul.w	r5, r2, r1
 8001554:	fb00 f403 	mul.w	r4, r0, r3
 8001558:	442c      	add	r4, r5
 800155a:	fba0 0102 	umull	r0, r1, r0, r2
 800155e:	1863      	adds	r3, r4, r1
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	014b      	lsls	r3, r1, #5
 800156c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001570:	0142      	lsls	r2, r0, #5
 8001572:	4633      	mov	r3, r6
 8001574:	4618      	mov	r0, r3
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	461a      	mov	r2, r3
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	fb02 f501 	mul.w	r5, r2, r1
 8001586:	fb00 f403 	mul.w	r4, r0, r3
 800158a:	442c      	add	r4, r5
 800158c:	fba0 0102 	umull	r0, r1, r0, r2
 8001590:	1863      	adds	r3, r4, r1
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	014b      	lsls	r3, r1, #5
 800159e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015a2:	0142      	lsls	r2, r0, #5
 80015a4:	4632      	mov	r2, r6
 80015a6:	693c      	ldr	r4, [r7, #16]
 80015a8:	4623      	mov	r3, r4
 80015aa:	fb03 f302 	mul.w	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	3307      	adds	r3, #7
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	ebad 0d03 	sub.w	sp, sp, r3
 80015ba:	466b      	mov	r3, sp
 80015bc:	3303      	adds	r3, #3
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(g, 0, sizeof(g));
 80015c4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80015c8:	4662      	mov	r2, ip
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	fb03 f302 	mul.w	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	461a      	mov	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f005 fc73 	bl	8006ec0 <memset>
    memset(h, 0, sizeof(h));
 80015da:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80015dc:	4632      	mov	r2, r6
 80015de:	4623      	mov	r3, r4
 80015e0:	fb03 f302 	mul.w	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	461a      	mov	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	f005 fc69 	bl	8006ec0 <memset>


    int i;
    for (i = 0; i < Nmax; i++) { // 0 to 103
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015f4:	e0a8      	b.n	8001748 <magnet+0x3b0>
 80015f6:	bf00      	nop
 80015f8:	0800834c 	.word	0x0800834c
 80015fc:	0800835c 	.word	0x0800835c
 8001600:	08008360 	.word	0x08008360
 8001604:	0800836c 	.word	0x0800836c
 8001608:	08008380 	.word	0x08008380
 800160c:	08008390 	.word	0x08008390
 8001610:	18e33333 	.word	0x18e33333
        g[Ns[i]-1][Ms[i]] = (Gs[i] + MULT(GVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2; // 360 til 16.16
 8001614:	4adc      	ldr	r2, [pc, #880]	; (8001988 <magnet+0x5f0>)
 8001616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800161a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800161e:	4adb      	ldr	r2, [pc, #876]	; (800198c <magnet+0x5f4>)
 8001620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	461c      	mov	r4, r3
 800162a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	461a      	mov	r2, r3
 8001632:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001636:	ea4f 4922 	mov.w	r9, r2, asr #16
 800163a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800163e:	4ad4      	ldr	r2, [pc, #848]	; (8001990 <magnet+0x5f8>)
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	4640      	mov	r0, r8
 8001646:	4649      	mov	r1, r9
 8001648:	f7fe fe52 	bl	80002f0 <__aeabi_ldivmod>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4613      	mov	r3, r2
 8001652:	461a      	mov	r2, r3
 8001654:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001658:	fb02 f005 	mul.w	r0, r2, r5
 800165c:	fb04 f103 	mul.w	r1, r4, r3
 8001660:	4401      	add	r1, r0
 8001662:	fba4 2302 	umull	r2, r3, r4, r2
 8001666:	4419      	add	r1, r3
 8001668:	460b      	mov	r3, r1
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0c10      	lsrs	r0, r2, #16
 8001674:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001678:	1419      	asrs	r1, r3, #16
 800167a:	4603      	mov	r3, r0
 800167c:	4433      	add	r3, r6
 800167e:	1c99      	adds	r1, r3, #2
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089d      	lsrs	r5, r3, #2
 8001684:	4ac3      	ldr	r2, [pc, #780]	; (8001994 <magnet+0x5fc>)
 8001686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	1e5c      	subs	r4, r3, #1
 8001690:	4ac1      	ldr	r2, [pc, #772]	; (8001998 <magnet+0x600>)
 8001692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001696:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800169a:	1089      	asrs	r1, r1, #2
 800169c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80016a0:	fb04 f305 	mul.w	r3, r4, r5
 80016a4:	4403      	add	r3, r0
 80016a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        h[Ns[i]-1][Ms[i]] = (Hs[i] + MULT(HVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2;
 80016aa:	4abc      	ldr	r2, [pc, #752]	; (800199c <magnet+0x604>)
 80016ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016b0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80016b4:	4aba      	ldr	r2, [pc, #744]	; (80019a0 <magnet+0x608>)
 80016b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	461c      	mov	r4, r3
 80016c0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	461a      	mov	r2, r3
 80016c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80016d0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80016d4:	4aae      	ldr	r2, [pc, #696]	; (8001990 <magnet+0x5f8>)
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	4650      	mov	r0, sl
 80016dc:	4659      	mov	r1, fp
 80016de:	f7fe fe07 	bl	80002f0 <__aeabi_ldivmod>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4613      	mov	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016ee:	fb02 f005 	mul.w	r0, r2, r5
 80016f2:	fb04 f103 	mul.w	r1, r4, r3
 80016f6:	4401      	add	r1, r0
 80016f8:	fba4 2302 	umull	r2, r3, r4, r2
 80016fc:	4419      	add	r1, r3
 80016fe:	460b      	mov	r3, r1
 8001700:	f04f 0000 	mov.w	r0, #0
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	0c10      	lsrs	r0, r2, #16
 800170a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800170e:	1419      	asrs	r1, r3, #16
 8001710:	4603      	mov	r3, r0
 8001712:	4433      	add	r3, r6
 8001714:	1c99      	adds	r1, r3, #2
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	089d      	lsrs	r5, r3, #2
 800171a:	4a9e      	ldr	r2, [pc, #632]	; (8001994 <magnet+0x5fc>)
 800171c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	1e5c      	subs	r4, r3, #1
 8001726:	4a9c      	ldr	r2, [pc, #624]	; (8001998 <magnet+0x600>)
 8001728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800172c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001730:	1089      	asrs	r1, r1, #2
 8001732:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001734:	fb04 f305 	mul.w	r3, r4, r5
 8001738:	4403      	add	r3, r0
 800173a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < Nmax; i++) { // 0 to 103
 800173e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001742:	3301      	adds	r3, #1
 8001744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001748:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800174c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001750:	429a      	cmp	r2, r3
 8001752:	f6ff af5f 	blt.w	8001614 <magnet+0x27c>
    }

    int32_t Bt = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int32_t Br = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int32_t Bp = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    int32_t P11 = 1<<16;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    int32_t P10 = 1<<16;
 8001770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int32_t dP11 = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t dP10 = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    int32_t K;

    int16_t m;
    int16_t n;

    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800178a:	f000 bc99 	b.w	80020c0 <magnet+0xd28>
        for (n = 1; n <= Nmodel; n++) {
 800178e:	2301      	movs	r3, #1
 8001790:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001794:	f000 bc86 	b.w	80020a4 <magnet+0xd0c>
            if ( m <= n ) {
 8001798:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800179c:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f300 8478 	bgt.w	8002096 <magnet+0xcfe>
                if (m == n) {
 80017a6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80017aa:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d175      	bne.n	800189e <magnet+0x506>
                    P2 = MULT(sinrad(theta), P11);
 80017b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017b4:	f7ff fc6a 	bl	800108c <sinrad>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4618      	mov	r0, r3
 80017bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80017c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017c4:	461a      	mov	r2, r3
 80017c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ca:	fb02 f501 	mul.w	r5, r2, r1
 80017ce:	fb00 f403 	mul.w	r4, r0, r3
 80017d2:	442c      	add	r4, r5
 80017d4:	fba0 2302 	umull	r2, r3, r0, r2
 80017d8:	18e1      	adds	r1, r4, r3
 80017da:	460b      	mov	r3, r1
 80017dc:	f04f 0000 	mov.w	r0, #0
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	0c10      	lsrs	r0, r2, #16
 80017e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80017ea:	1419      	asrs	r1, r3, #16
 80017ec:	4603      	mov	r3, r0
 80017ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    dP2 = MULT(sinrad(theta), dP11) + MULT(cosrad(theta), P11);
 80017f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017f4:	f7ff fc4a 	bl	800108c <sinrad>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001804:	461a      	mov	r2, r3
 8001806:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800180a:	fb02 f501 	mul.w	r5, r2, r1
 800180e:	fb00 f403 	mul.w	r4, r0, r3
 8001812:	442c      	add	r4, r5
 8001814:	fba0 2302 	umull	r2, r3, r0, r2
 8001818:	18e1      	adds	r1, r4, r3
 800181a:	460b      	mov	r3, r1
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	0c10      	lsrs	r0, r2, #16
 8001826:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800182a:	1419      	asrs	r1, r3, #16
 800182c:	4606      	mov	r6, r0
 800182e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001830:	f7ff fcb0 	bl	8001194 <cosrad>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800183c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001840:	4608      	mov	r0, r1
 8001842:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001846:	fb00 f503 	mul.w	r5, r0, r3
 800184a:	fb02 f401 	mul.w	r4, r2, r1
 800184e:	442c      	add	r4, r5
 8001850:	fba2 2300 	umull	r2, r3, r2, r0
 8001854:	18e1      	adds	r1, r4, r3
 8001856:	460b      	mov	r3, r1
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0c10      	lsrs	r0, r2, #16
 8001862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001866:	1419      	asrs	r1, r3, #16
 8001868:	4603      	mov	r3, r0
 800186a:	4433      	add	r3, r6
 800186c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    P11 = P2;
 8001870:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    P10 = P11;
 8001878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800187c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    P20 = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    dP11 = dP2;
 8001886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800188a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    dP10 = dP11;
 800188e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    dP20 = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800189c:	e1b1      	b.n	8001c02 <magnet+0x86a>
                } else {
                    if (n == 1) {
 800189e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d17e      	bne.n	80019a4 <magnet+0x60c>
                        P2 = MULT(cosrad(theta), P10);
 80018a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018a8:	f7ff fc74 	bl	8001194 <cosrad>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4618      	mov	r0, r3
 80018b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80018b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018b8:	461a      	mov	r2, r3
 80018ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018be:	fb02 f501 	mul.w	r5, r2, r1
 80018c2:	fb00 f403 	mul.w	r4, r0, r3
 80018c6:	442c      	add	r4, r5
 80018c8:	fba0 2302 	umull	r2, r3, r0, r2
 80018cc:	18e1      	adds	r1, r4, r3
 80018ce:	460b      	mov	r3, r1
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	0c10      	lsrs	r0, r2, #16
 80018da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80018de:	1419      	asrs	r1, r3, #16
 80018e0:	4603      	mov	r3, r0
 80018e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10);
 80018e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018e8:	f7ff fc54 	bl	8001194 <cosrad>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80018f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018f8:	461a      	mov	r2, r3
 80018fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018fe:	fb02 f501 	mul.w	r5, r2, r1
 8001902:	fb00 f403 	mul.w	r4, r0, r3
 8001906:	442c      	add	r4, r5
 8001908:	fba0 2302 	umull	r2, r3, r0, r2
 800190c:	18e1      	adds	r1, r4, r3
 800190e:	460b      	mov	r3, r1
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	0c10      	lsrs	r0, r2, #16
 800191a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800191e:	1419      	asrs	r1, r3, #16
 8001920:	4606      	mov	r6, r0
 8001922:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001924:	f7ff fbb2 	bl	800108c <sinrad>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001930:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001934:	4608      	mov	r0, r1
 8001936:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800193a:	fb00 f503 	mul.w	r5, r0, r3
 800193e:	fb02 f401 	mul.w	r4, r2, r1
 8001942:	442c      	add	r4, r5
 8001944:	fba2 2300 	umull	r2, r3, r2, r0
 8001948:	18e1      	adds	r1, r4, r3
 800194a:	460b      	mov	r3, r1
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	0c10      	lsrs	r0, r2, #16
 8001956:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800195a:	1419      	asrs	r1, r3, #16
 800195c:	4603      	mov	r3, r0
 800195e:	1af3      	subs	r3, r6, r3
 8001960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 800196c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 800197c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001984:	e13d      	b.n	8001c02 <magnet+0x86a>
 8001986:	bf00      	nop
 8001988:	20000340 	.word	0x20000340
 800198c:	200004e0 	.word	0x200004e0
 8001990:	016d0000 	.word	0x016d0000
 8001994:	20000000 	.word	0x20000000
 8001998:	200001a0 	.word	0x200001a0
 800199c:	20000680 	.word	0x20000680
 80019a0:	20000820 	.word	0x20000820
                    } else {
                    	int32_t nm1 = convert(n-1);           // 16.16
 80019a4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80019a8:	3b01      	subs	r3, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe feb8 	bl	8000720 <convert>
 80019b0:	67b8      	str	r0, [r7, #120]	; 0x78
                    	int32_t mfix = convert(m);
 80019b2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe feb2 	bl	8000720 <convert>
 80019bc:	6778      	str	r0, [r7, #116]	; 0x74
                    	int32_t num  = FIX16_MULT(nm1,nm1) - FIX16_MULT(mfix,mfix);
 80019be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c0:	4618      	mov	r0, r3
 80019c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80019c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019c8:	461a      	mov	r2, r3
 80019ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019ce:	fb02 f501 	mul.w	r5, r2, r1
 80019d2:	fb00 f403 	mul.w	r4, r0, r3
 80019d6:	442c      	add	r4, r5
 80019d8:	fba0 2302 	umull	r2, r3, r0, r2
 80019dc:	18e1      	adds	r1, r4, r3
 80019de:	460b      	mov	r3, r1
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0c10      	lsrs	r0, r2, #16
 80019ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80019ee:	1419      	asrs	r1, r3, #16
 80019f0:	4606      	mov	r6, r0
 80019f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f4:	461a      	mov	r2, r3
 80019f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019fa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80019fc:	4608      	mov	r0, r1
 80019fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001a02:	fb00 f503 	mul.w	r5, r0, r3
 8001a06:	fb02 f401 	mul.w	r4, r2, r1
 8001a0a:	442c      	add	r4, r5
 8001a0c:	fba2 2300 	umull	r2, r3, r2, r0
 8001a10:	18e1      	adds	r1, r4, r3
 8001a12:	460b      	mov	r3, r1
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0c10      	lsrs	r0, r2, #16
 8001a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a22:	1419      	asrs	r1, r3, #16
 8001a24:	4603      	mov	r3, r0
 8001a26:	1af3      	subs	r3, r6, r3
 8001a28:	673b      	str	r3, [r7, #112]	; 0x70
                    	int32_t den  = FIX16_MULT(convert(2*n)-convert(1),
 8001a2a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fe75 	bl	8000720 <convert>
 8001a36:	4604      	mov	r4, r0
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7fe fe71 	bl	8000720 <convert>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	1ae3      	subs	r3, r4, r3
 8001a42:	461c      	mov	r4, r3
 8001a44:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001a48:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fe66 	bl	8000720 <convert>
 8001a54:	4606      	mov	r6, r0
 8001a56:	2003      	movs	r0, #3
 8001a58:	f7fe fe62 	bl	8000720 <convert>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	1af3      	subs	r3, r6, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a66:	fb02 f005 	mul.w	r0, r2, r5
 8001a6a:	fb04 f103 	mul.w	r1, r4, r3
 8001a6e:	4401      	add	r1, r0
 8001a70:	fba4 2302 	umull	r2, r3, r4, r2
 8001a74:	4419      	add	r1, r3
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0c10      	lsrs	r0, r2, #16
 8001a82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a86:	1419      	asrs	r1, r3, #16
 8001a88:	4603      	mov	r3, r0
 8001a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    	                          convert(2*n)-convert(3));
                    	K = FIX16_DIV(num, den);
 8001a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a8e:	461a      	mov	r2, r3
 8001a90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a94:	1411      	asrs	r1, r2, #16
 8001a96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a98:	0413      	lsls	r3, r2, #16
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001aa4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aa8:	f7fe fc22 	bl	80002f0 <__aeabi_ldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
                    	P2 = MULT(cosrad(theta), P10) - MULT(K, P20);
 8001ab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ab6:	f7ff fb6d 	bl	8001194 <cosrad>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001acc:	fb02 f501 	mul.w	r5, r2, r1
 8001ad0:	fb00 f403 	mul.w	r4, r0, r3
 8001ad4:	442c      	add	r4, r5
 8001ad6:	fba0 2302 	umull	r2, r3, r0, r2
 8001ada:	18e1      	adds	r1, r4, r3
 8001adc:	460b      	mov	r3, r1
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0c10      	lsrs	r0, r2, #16
 8001ae8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001aec:	1419      	asrs	r1, r3, #16
 8001aee:	4606      	mov	r6, r0
 8001af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af2:	461a      	mov	r2, r3
 8001af4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001af8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001afc:	4608      	mov	r0, r1
 8001afe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b02:	fb00 f503 	mul.w	r5, r0, r3
 8001b06:	fb02 f401 	mul.w	r4, r2, r1
 8001b0a:	442c      	add	r4, r5
 8001b0c:	fba2 2300 	umull	r2, r3, r2, r0
 8001b10:	18e1      	adds	r1, r4, r3
 8001b12:	460b      	mov	r3, r1
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	0c10      	lsrs	r0, r2, #16
 8001b1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b22:	1419      	asrs	r1, r3, #16
 8001b24:	4603      	mov	r3, r0
 8001b26:	1af3      	subs	r3, r6, r3
 8001b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10) - MULT(K, dP20);
 8001b2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b2e:	f7ff fb31 	bl	8001194 <cosrad>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b44:	fb02 f501 	mul.w	r5, r2, r1
 8001b48:	fb00 f403 	mul.w	r4, r0, r3
 8001b4c:	442c      	add	r4, r5
 8001b4e:	fba0 2302 	umull	r2, r3, r0, r2
 8001b52:	18e1      	adds	r1, r4, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	0c10      	lsrs	r0, r2, #16
 8001b60:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b64:	1419      	asrs	r1, r3, #16
 8001b66:	4606      	mov	r6, r0
 8001b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b6a:	f7ff fa8f 	bl	800108c <sinrad>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b76:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b80:	fb00 f503 	mul.w	r5, r0, r3
 8001b84:	fb02 f401 	mul.w	r4, r2, r1
 8001b88:	442c      	add	r4, r5
 8001b8a:	fba2 2300 	umull	r2, r3, r2, r0
 8001b8e:	18e1      	adds	r1, r4, r3
 8001b90:	460b      	mov	r3, r1
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	0c10      	lsrs	r0, r2, #16
 8001b9c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ba0:	1419      	asrs	r1, r3, #16
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	1af6      	subs	r6, r6, r3
 8001ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba8:	461a      	mov	r2, r3
 8001baa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001bae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001bb8:	fb00 f503 	mul.w	r5, r0, r3
 8001bbc:	fb02 f401 	mul.w	r4, r2, r1
 8001bc0:	442c      	add	r4, r5
 8001bc2:	fba2 2300 	umull	r2, r3, r2, r0
 8001bc6:	18e1      	adds	r1, r4, r3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	0c10      	lsrs	r0, r2, #16
 8001bd4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001bd8:	1419      	asrs	r1, r3, #16
 8001bda:	4603      	mov	r3, r0
 8001bdc:	1af3      	subs	r3, r6, r3
 8001bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001bea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001bf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    }
                }
                // Precompute repeated terms
                int32_t ar_pow = POW(DIV(a, r), (n + 2)<<16);
 8001c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c06:	461a      	mov	r2, r3
 8001c08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c0c:	1411      	asrs	r1, r2, #16
 8001c0e:	6279      	str	r1, [r7, #36]	; 0x24
 8001c10:	0413      	lsls	r3, r2, #16
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c16:	461a      	mov	r2, r3
 8001c18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c20:	f7fe fb66 	bl	80002f0 <__aeabi_ldivmod>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c36:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	141b      	asrs	r3, r3, #16
 8001c40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da5c      	bge.n	8001d06 <magnet+0x96e>
 8001c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c50:	425b      	negs	r3, r3
 8001c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c60:	f04f 0000 	mov.w	r0, #0
 8001c64:	f04f 0101 	mov.w	r1, #1
 8001c68:	f7fe fb42 	bl	80002f0 <__aeabi_ldivmod>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4613      	mov	r3, r2
 8001c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c76:	e046      	b.n	8001d06 <magnet+0x96e>
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01d      	beq.n	8001cc0 <magnet+0x928>
 8001c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c88:	4618      	mov	r0, r3
 8001c8a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c92:	461a      	mov	r2, r3
 8001c94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c98:	fb02 f501 	mul.w	r5, r2, r1
 8001c9c:	fb00 f403 	mul.w	r4, r0, r3
 8001ca0:	442c      	add	r4, r5
 8001ca2:	fba0 2302 	umull	r2, r3, r0, r2
 8001ca6:	18e1      	adds	r1, r4, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	0c10      	lsrs	r0, r2, #16
 8001cb4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cb8:	1419      	asrs	r1, r3, #16
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cce:	461a      	mov	r2, r3
 8001cd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cd4:	fb02 f501 	mul.w	r5, r2, r1
 8001cd8:	fb00 f403 	mul.w	r4, r0, r3
 8001cdc:	442c      	add	r4, r5
 8001cde:	fba0 2302 	umull	r2, r3, r0, r2
 8001ce2:	18e1      	adds	r1, r4, r3
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	0c10      	lsrs	r0, r2, #16
 8001cf0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cf4:	1419      	asrs	r1, r3, #16
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d00:	105b      	asrs	r3, r3, #1
 8001d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1b4      	bne.n	8001c78 <magnet+0x8e0>
 8001d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d12:	667b      	str	r3, [r7, #100]	; 0x64
                int32_t mphi = MULT(m<<16, phi);
 8001d14:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d22:	461a      	mov	r2, r3
 8001d24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d28:	fb02 f501 	mul.w	r5, r2, r1
 8001d2c:	fb00 f403 	mul.w	r4, r0, r3
 8001d30:	442c      	add	r4, r5
 8001d32:	fba0 2302 	umull	r2, r3, r0, r2
 8001d36:	18e1      	adds	r1, r4, r3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	f04f 0000 	mov.w	r0, #0
 8001d3e:	f04f 0100 	mov.w	r1, #0
 8001d42:	0c10      	lsrs	r0, r2, #16
 8001d44:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d48:	1419      	asrs	r1, r3, #16
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
                int32_t cos_mphi = cosrad(mphi);
 8001d4e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d50:	f7ff fa20 	bl	8001194 <cosrad>
 8001d54:	65f8      	str	r0, [r7, #92]	; 0x5c
                int32_t sin_mphi = sinrad(mphi);
 8001d56:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d58:	f7ff f998 	bl	800108c <sinrad>
 8001d5c:	65b8      	str	r0, [r7, #88]	; 0x58

                int32_t gnm = g[n - 1][m];
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	0899      	lsrs	r1, r3, #2
 8001d62:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d70:	fb00 f101 	mul.w	r1, r0, r1
 8001d74:	440a      	add	r2, r1
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54
                int32_t hnm = h[n - 1][m];
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0899      	lsrs	r1, r3, #2
 8001d80:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d84:	1e58      	subs	r0, r3, #1
 8001d86:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8c:	fb00 f101 	mul.w	r1, r0, r1
 8001d90:	440a      	add	r2, r1
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	653b      	str	r3, [r7, #80]	; 0x50

                int32_t gcos = MULT(gnm, cos_mphi);
 8001d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	461a      	mov	r2, r3
 8001da4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001da8:	fb02 f501 	mul.w	r5, r2, r1
 8001dac:	fb00 f403 	mul.w	r4, r0, r3
 8001db0:	442c      	add	r4, r5
 8001db2:	fba0 2302 	umull	r2, r3, r0, r2
 8001db6:	18e1      	adds	r1, r4, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	f04f 0100 	mov.w	r1, #0
 8001dc2:	0c10      	lsrs	r0, r2, #16
 8001dc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001dc8:	1419      	asrs	r1, r3, #16
 8001dca:	4603      	mov	r3, r0
 8001dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
                int32_t hsin = MULT(hnm, sin_mphi);
 8001dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd8:	461a      	mov	r2, r3
 8001dda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001dde:	fb02 f501 	mul.w	r5, r2, r1
 8001de2:	fb00 f403 	mul.w	r4, r0, r3
 8001de6:	442c      	add	r4, r5
 8001de8:	fba0 2302 	umull	r2, r3, r0, r2
 8001dec:	18e1      	adds	r1, r4, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0c10      	lsrs	r0, r2, #16
 8001dfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001dfe:	1419      	asrs	r1, r3, #16
 8001e00:	4603      	mov	r3, r0
 8001e02:	64bb      	str	r3, [r7, #72]	; 0x48
                int32_t gsin = MULT(gnm, sin_mphi);
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	4618      	mov	r0, r3
 8001e08:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0e:	461a      	mov	r2, r3
 8001e10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e14:	fb02 f501 	mul.w	r5, r2, r1
 8001e18:	fb00 f403 	mul.w	r4, r0, r3
 8001e1c:	442c      	add	r4, r5
 8001e1e:	fba0 2302 	umull	r2, r3, r0, r2
 8001e22:	18e1      	adds	r1, r4, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	f04f 0000 	mov.w	r0, #0
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	0c10      	lsrs	r0, r2, #16
 8001e30:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e34:	1419      	asrs	r1, r3, #16
 8001e36:	4603      	mov	r3, r0
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
                int32_t hcos = MULT(hnm, cos_mphi);
 8001e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e44:	461a      	mov	r2, r3
 8001e46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e4a:	fb02 f501 	mul.w	r5, r2, r1
 8001e4e:	fb00 f403 	mul.w	r4, r0, r3
 8001e52:	442c      	add	r4, r5
 8001e54:	fba0 2302 	umull	r2, r3, r0, r2
 8001e58:	18e1      	adds	r1, r4, r3
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0c10      	lsrs	r0, r2, #16
 8001e66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e6a:	1419      	asrs	r1, r3, #16
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	643b      	str	r3, [r7, #64]	; 0x40

                // Magnetic field component updates
                Br = Br + MULT(MULT(ar_pow, (n + 1)<<16), MULT((gcos + hsin), P2));
 8001e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e72:	4618      	mov	r0, r3
 8001e74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e78:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	461a      	mov	r2, r3
 8001e82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e86:	fb02 f501 	mul.w	r5, r2, r1
 8001e8a:	fb00 f403 	mul.w	r4, r0, r3
 8001e8e:	442c      	add	r4, r5
 8001e90:	fba0 2302 	umull	r2, r3, r0, r2
 8001e94:	18e1      	adds	r1, r4, r3
 8001e96:	460b      	mov	r3, r1
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	0c10      	lsrs	r0, r2, #16
 8001ea2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ea6:	1419      	asrs	r1, r3, #16
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4698      	mov	r8, r3
 8001eac:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8001eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ec6:	fb02 f501 	mul.w	r5, r2, r1
 8001eca:	fb00 f403 	mul.w	r4, r0, r3
 8001ece:	442c      	add	r4, r5
 8001ed0:	fba0 0102 	umull	r0, r1, r0, r2
 8001ed4:	1863      	adds	r3, r4, r1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	0c02      	lsrs	r2, r0, #16
 8001ee2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ee6:	140b      	asrs	r3, r1, #16
 8001ee8:	4613      	mov	r3, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ef0:	fb02 f009 	mul.w	r0, r2, r9
 8001ef4:	fb08 f103 	mul.w	r1, r8, r3
 8001ef8:	4401      	add	r1, r0
 8001efa:	fba8 2302 	umull	r2, r3, r8, r2
 8001efe:	4419      	add	r1, r3
 8001f00:	460b      	mov	r3, r1
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	0c10      	lsrs	r0, r2, #16
 8001f0c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f10:	1419      	asrs	r1, r3, #16
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f18:	4413      	add	r3, r2
 8001f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                Bt = Bt + MULT(MULT(ar_pow, 1<<16), MULT((gcos + hsin), dP2));
 8001f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f20:	4618      	mov	r0, r3
 8001f22:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	040b      	lsls	r3, r1, #16
 8001f30:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001f34:	0402      	lsls	r2, r0, #16
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0c10      	lsrs	r0, r2, #16
 8001f40:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001f44:	1419      	asrs	r1, r3, #16
 8001f46:	4603      	mov	r3, r0
 8001f48:	4698      	mov	r8, r3
 8001f4a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8001f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f52:	4413      	add	r3, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f5e:	461a      	mov	r2, r3
 8001f60:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f64:	fb02 f501 	mul.w	r5, r2, r1
 8001f68:	fb00 f403 	mul.w	r4, r0, r3
 8001f6c:	442c      	add	r4, r5
 8001f6e:	fba0 0102 	umull	r0, r1, r0, r2
 8001f72:	1863      	adds	r3, r4, r1
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	0c02      	lsrs	r2, r0, #16
 8001f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f84:	140b      	asrs	r3, r1, #16
 8001f86:	4613      	mov	r3, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f8e:	fb02 f009 	mul.w	r0, r2, r9
 8001f92:	fb08 f103 	mul.w	r1, r8, r3
 8001f96:	4401      	add	r1, r0
 8001f98:	fba8 2302 	umull	r2, r3, r8, r2
 8001f9c:	4419      	add	r1, r3
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	f04f 0000 	mov.w	r0, #0
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	0c10      	lsrs	r0, r2, #16
 8001faa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fae:	1419      	asrs	r1, r3, #16
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                Bp = Bp + MULT(MULT(ar_pow, 1<<16), MULT(MULT(convert(m), (-gsin + hcos)), P2));
 8001fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	040b      	lsls	r3, r1, #16
 8001fce:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001fd2:	0402      	lsls	r2, r0, #16
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	0c10      	lsrs	r0, r2, #16
 8001fde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fe2:	1419      	asrs	r1, r3, #16
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4698      	mov	r8, r3
 8001fe8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8001fec:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fb95 	bl	8000720 <convert>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	461a      	mov	r2, r3
 8002006:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800200a:	fb02 f501 	mul.w	r5, r2, r1
 800200e:	fb00 f403 	mul.w	r4, r0, r3
 8002012:	442c      	add	r4, r5
 8002014:	fba0 0102 	umull	r0, r1, r0, r2
 8002018:	1863      	adds	r3, r4, r1
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	0c02      	lsrs	r2, r0, #16
 8002026:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800202a:	140b      	asrs	r3, r1, #16
 800202c:	4613      	mov	r3, r2
 800202e:	4618      	mov	r0, r3
 8002030:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002034:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002038:	461a      	mov	r2, r3
 800203a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800203e:	fb02 f501 	mul.w	r5, r2, r1
 8002042:	fb00 f403 	mul.w	r4, r0, r3
 8002046:	442c      	add	r4, r5
 8002048:	fba0 0102 	umull	r0, r1, r0, r2
 800204c:	1863      	adds	r3, r4, r1
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	0c02      	lsrs	r2, r0, #16
 800205a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800205e:	140b      	asrs	r3, r1, #16
 8002060:	4613      	mov	r3, r2
 8002062:	461a      	mov	r2, r3
 8002064:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002068:	fb02 f009 	mul.w	r0, r2, r9
 800206c:	fb08 f103 	mul.w	r1, r8, r3
 8002070:	4401      	add	r1, r0
 8002072:	fba8 2302 	umull	r2, r3, r8, r2
 8002076:	4419      	add	r1, r3
 8002078:	460b      	mov	r3, r1
 800207a:	f04f 0000 	mov.w	r0, #0
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	0c10      	lsrs	r0, r2, #16
 8002084:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002088:	1419      	asrs	r1, r3, #16
 800208a:	4602      	mov	r2, r0
 800208c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002090:	4413      	add	r3, r2
 8002092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        for (n = 1; n <= Nmodel; n++) {
 8002096:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800209a:	b29b      	uxth	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80020a4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80020a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f6bf ab73 	bge.w	8001798 <magnet+0x400>
    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 80020b2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80020c0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80020c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f6bf ab60 	bge.w	800178e <magnet+0x3f6>
            }
        }
    }
    Bt = -Bt;
 80020ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020d2:	425b      	negs	r3, r3
 80020d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    Bp = -DIV(Bp, sinrad(theta));
 80020d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020dc:	461a      	mov	r2, r3
 80020de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020e2:	1411      	asrs	r1, r2, #16
 80020e4:	61f9      	str	r1, [r7, #28]
 80020e6:	0413      	lsls	r3, r2, #16
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020ec:	f7fe ffce 	bl	800108c <sinrad>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020fc:	f7fe f8f8 	bl	80002f0 <__aeabi_ldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4613      	mov	r3, r2
 8002106:	425b      	negs	r3, r3
 8002108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    buffer[0] = Bt;
 800210c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002110:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002114:	601a      	str	r2, [r3, #0]
    buffer[1] = Bp;
 8002116:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800211a:	3304      	adds	r3, #4
 800211c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002120:	601a      	str	r2, [r3, #0]
    buffer[2] = Br;
 8002122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002126:	3308      	adds	r3, #8
 8002128:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8002132:	bf00      	nop
 8002134:	37e4      	adds	r7, #228	; 0xe4
 8002136:	46bd      	mov	sp, r7
 8002138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800213c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08e      	sub	sp, #56	; 0x38
 8002140:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002142:	f000 fca4 	bl	8002a8e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002146:	f000 f8a7 	bl	8002298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214a:	f000 f9bd 	bl	80024c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800214e:	f000 f96f 	bl	8002430 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002152:	f000 f921 	bl	8002398 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002156:	f000 f8df 	bl	8002318 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 800215a:	4843      	ldr	r0, [pc, #268]	; (8002268 <main+0x12c>)
 800215c:	f7fe ff04 	bl	8000f68 <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
  HAL_Delay(10);
 800216e:	200a      	movs	r0, #10
 8002170:	f000 fcfe 	bl	8002b70 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8002174:	2201      	movs	r2, #1
 8002176:	493d      	ldr	r1, [pc, #244]	; (800226c <main+0x130>)
 8002178:	483d      	ldr	r0, [pc, #244]	; (8002270 <main+0x134>)
 800217a:	f002 fe89 	bl	8004e90 <HAL_UART_Receive_IT>
  LCD_Init();
 800217e:	f7fe fec8 	bl	8000f12 <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 8002182:	4839      	ldr	r0, [pc, #228]	; (8002268 <main+0x12c>)
 8002184:	f7fe fdd4 	bl	8000d30 <I2C_Scan>
int32_t r = REarth16km + Rational(2,10); // Earth's radius in fixed point 16.16 format
 8002188:	210a      	movs	r1, #10
 800218a:	2002      	movs	r0, #2
 800218c:	f7fe fa7c 	bl	8000688 <Rational>
 8002190:	4602      	mov	r2, r0
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <main+0x138>)
 8002194:	4413      	add	r3, r2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
printf("r : ");
 8002198:	4837      	ldr	r0, [pc, #220]	; (8002278 <main+0x13c>)
 800219a:	f004 fe99 	bl	8006ed0 <iprintf>
printFix(r);
 800219e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a0:	f7fe fa92 	bl	80006c8 <printFix>
printf("\r\n");
 80021a4:	4835      	ldr	r0, [pc, #212]	; (800227c <main+0x140>)
 80021a6:	f004 ff2f 	bl	8007008 <puts>
int32_t phi = convert(30);
 80021aa:	201e      	movs	r0, #30
 80021ac:	f7fe fab8 	bl	8000720 <convert>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24
int32_t theta = convert(45);
 80021b2:	202d      	movs	r0, #45	; 0x2d
 80021b4:	f7fe fab4 	bl	8000720 <convert>
 80021b8:	6238      	str	r0, [r7, #32]
int32_t days = 24510000;
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <main+0x144>)
 80021bc:	61fb      	str	r3, [r7, #28]
int32_t vector[3];
magnet(r, theta, phi, days, vector);
 80021be:	463b      	mov	r3, r7
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	6a39      	ldr	r1, [r7, #32]
 80021c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ca:	f7ff f8e5 	bl	8001398 <magnet>
int i;
for (i=0; i<3; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d2:	e013      	b.n	80021fc <main+0xc0>
	printf("Res %i: ", i);
 80021d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021d6:	482b      	ldr	r0, [pc, #172]	; (8002284 <main+0x148>)
 80021d8:	f004 fe7a 	bl	8006ed0 <iprintf>
	printFix(vector[i]);
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021e4:	4413      	add	r3, r2
 80021e6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fa6c 	bl	80006c8 <printFix>
	printf("\r\n");
 80021f0:	4822      	ldr	r0, [pc, #136]	; (800227c <main+0x140>)
 80021f2:	f004 ff09 	bl	8007008 <puts>
for (i=0; i<3; i++) {
 80021f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f8:	3301      	adds	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b02      	cmp	r3, #2
 8002200:	dde8      	ble.n	80021d4 <main+0x98>
}

LCD_SetCursor(0, 0);
 8002202:	2100      	movs	r1, #0
 8002204:	2000      	movs	r0, #0
 8002206:	f7fe fe68 	bl	8000eda <LCD_SetCursor>
    LCD_SendString("Hello STM32!");
 800220a:	481f      	ldr	r0, [pc, #124]	; (8002288 <main+0x14c>)
 800220c:	f7fe fe50 	bl	8000eb0 <LCD_SendString>

    LCD_SetCursor(1, 0);
 8002210:	2100      	movs	r1, #0
 8002212:	2001      	movs	r0, #1
 8002214:	f7fe fe61 	bl	8000eda <LCD_SetCursor>
    LCD_SendString("LCD is working :)");
 8002218:	481c      	ldr	r0, [pc, #112]	; (800228c <main+0x150>)
 800221a:	f7fe fe49 	bl	8000eb0 <LCD_SendString>

i = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c

  while (1)
  {
	  process_uart_data(&uart_rx_buf, &GPS);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4819      	ldr	r0, [pc, #100]	; (8002290 <main+0x154>)
 800222a:	f7fe fd13 	bl	8000c54 <process_uart_data>
	  HAL_Delay(10);
 800222e:	200a      	movs	r0, #10
 8002230:	f000 fc9e 	bl	8002b70 <HAL_Delay>
	  i++;
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	3301      	adds	r3, #1
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  if (!(i % 1000)) {
 800223a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <main+0x158>)
 800223e:	fb83 1302 	smull	r1, r3, r3, r2
 8002242:	1199      	asrs	r1, r3, #6
 8002244:	17d3      	asrs	r3, r2, #31
 8002246:	1acb      	subs	r3, r1, r3
 8002248:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e5      	bne.n	8002222 <main+0xe6>
	  		  i = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
	  		  printGPS(GPS);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002260:	f7fe fd30 	bl	8000cc4 <printGPS>
	  process_uart_data(&uart_rx_buf, &GPS);
 8002264:	e7dd      	b.n	8002222 <main+0xe6>
 8002266:	bf00      	nop
 8002268:	20000f5c 	.word	0x20000f5c
 800226c:	20000fb0 	.word	0x20000fb0
 8002270:	20000fb4 	.word	0x20000fb4
 8002274:	18e33333 	.word	0x18e33333
 8002278:	080083a0 	.word	0x080083a0
 800227c:	080083a8 	.word	0x080083a8
 8002280:	0175fe30 	.word	0x0175fe30
 8002284:	080083ac 	.word	0x080083ac
 8002288:	080083b8 	.word	0x080083b8
 800228c:	080083c8 	.word	0x080083c8
 8002290:	20000a50 	.word	0x20000a50
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b094      	sub	sp, #80	; 0x50
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	2238      	movs	r2, #56	; 0x38
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 fe0a 	bl	8006ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022be:	f001 fd35 	bl	8003d2c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022cc:	2340      	movs	r3, #64	; 0x40
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d4:	f107 0318 	add.w	r3, r7, #24
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 fddb 	bl	8003e94 <HAL_RCC_OscConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80022e4:	f000 f978 	bl	80025d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e8:	230f      	movs	r3, #15
 80022ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022ec:	2301      	movs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f002 f8db 	bl	80044bc <HAL_RCC_ClockConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800230c:	f000 f964 	bl	80025d8 <Error_Handler>
  }
}
 8002310:	bf00      	nop
 8002312:	3750      	adds	r7, #80	; 0x50
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <MX_I2C3_Init+0x74>)
 800231e:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <MX_I2C3_Init+0x78>)
 8002320:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_I2C3_Init+0x74>)
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <MX_I2C3_Init+0x7c>)
 8002326:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_I2C3_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_I2C3_Init+0x74>)
 8002330:	2201      	movs	r2, #1
 8002332:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_I2C3_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_I2C3_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <MX_I2C3_Init+0x74>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_I2C3_Init+0x74>)
 8002348:	2200      	movs	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_I2C3_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002352:	480e      	ldr	r0, [pc, #56]	; (800238c <MX_I2C3_Init+0x74>)
 8002354:	f000 ff98 	bl	8003288 <HAL_I2C_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800235e:	f000 f93b 	bl	80025d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002362:	2100      	movs	r1, #0
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <MX_I2C3_Init+0x74>)
 8002366:	f001 fc49 	bl	8003bfc <HAL_I2CEx_ConfigAnalogFilter>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002370:	f000 f932 	bl	80025d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002374:	2100      	movs	r1, #0
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_I2C3_Init+0x74>)
 8002378:	f001 fc8b 	bl	8003c92 <HAL_I2CEx_ConfigDigitalFilter>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002382:	f000 f929 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000f5c 	.word	0x20000f5c
 8002390:	40007800 	.word	0x40007800
 8002394:	0010061a 	.word	0x0010061a

08002398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <MX_USART1_UART_Init+0x90>)
 800239e:	4a23      	ldr	r2, [pc, #140]	; (800242c <MX_USART1_UART_Init+0x94>)
 80023a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023be:	220c      	movs	r2, #12
 80023c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e0:	4811      	ldr	r0, [pc, #68]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023e2:	f002 fc77 	bl	8004cd4 <HAL_UART_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023ec:	f000 f8f4 	bl	80025d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f0:	2100      	movs	r1, #0
 80023f2:	480d      	ldr	r0, [pc, #52]	; (8002428 <MX_USART1_UART_Init+0x90>)
 80023f4:	f004 fc6f 	bl	8006cd6 <HAL_UARTEx_SetTxFifoThreshold>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023fe:	f000 f8eb 	bl	80025d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002402:	2100      	movs	r1, #0
 8002404:	4808      	ldr	r0, [pc, #32]	; (8002428 <MX_USART1_UART_Init+0x90>)
 8002406:	f004 fca4 	bl	8006d52 <HAL_UARTEx_SetRxFifoThreshold>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002410:	f000 f8e2 	bl	80025d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_USART1_UART_Init+0x90>)
 8002416:	f004 fc25 	bl	8006c64 <HAL_UARTEx_DisableFifoMode>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002420:	f000 f8da 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000fb4 	.word	0x20000fb4
 800242c:	40013800 	.word	0x40013800

08002430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002436:	4a23      	ldr	r2, [pc, #140]	; (80024c4 <MX_USART2_UART_Init+0x94>)
 8002438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800243c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002456:	220c      	movs	r2, #12
 8002458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002478:	4811      	ldr	r0, [pc, #68]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800247a:	f002 fc2b 	bl	8004cd4 <HAL_UART_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002484:	f000 f8a8 	bl	80025d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002488:	2100      	movs	r1, #0
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800248c:	f004 fc23 	bl	8006cd6 <HAL_UARTEx_SetTxFifoThreshold>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002496:	f000 f89f 	bl	80025d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800249a:	2100      	movs	r1, #0
 800249c:	4808      	ldr	r0, [pc, #32]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800249e:	f004 fc58 	bl	8006d52 <HAL_UARTEx_SetRxFifoThreshold>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80024a8:	f000 f896 	bl	80025d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 80024ae:	f004 fbd9 	bl	8006c64 <HAL_UARTEx_DisableFifoMode>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80024b8:	f000 f88e 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20001048 	.word	0x20001048
 80024c4:	40004400 	.word	0x40004400

080024c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <MX_GPIO_Init+0xa0>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <MX_GPIO_Init+0xa0>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <MX_GPIO_Init+0xa0>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <MX_GPIO_Init+0xa0>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <MX_GPIO_Init+0xa0>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <MX_GPIO_Init+0xa0>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800250e:	2200      	movs	r2, #0
 8002510:	2173      	movs	r1, #115	; 0x73
 8002512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002516:	f000 fe9f 	bl	8003258 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	2108      	movs	r1, #8
 800251e:	4813      	ldr	r0, [pc, #76]	; (800256c <MX_GPIO_Init+0xa4>)
 8002520:	f000 fe9a 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002524:	2373      	movs	r3, #115	; 0x73
 8002526:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f000 fd09 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002542:	2308      	movs	r3, #8
 8002544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4619      	mov	r1, r3
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_GPIO_Init+0xa4>)
 800255a:	f000 fcfb 	bl	8002f54 <HAL_GPIO_Init>

}
 800255e:	bf00      	nop
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	48000400 	.word	0x48000400

08002570 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	b29a      	uxth	r2, r3
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <_write+0x28>)
 8002588:	f002 fbf4 	bl	8004d74 <HAL_UART_Transmit>
    return len;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20001048 	.word	0x20001048

0800259c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_UART_RxCpltCallback+0x30>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d10a      	bne.n	80025c2 <HAL_UART_RxCpltCallback+0x26>
		//printf("UART Error: ISR=0x%08lX, SR=0x%08lX\r\n", huart->Instance->ISR, huart->Instance->RQR);
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_UART_RxCpltCallback+0x34>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4808      	ldr	r0, [pc, #32]	; (80025d4 <HAL_UART_RxCpltCallback+0x38>)
 80025b4:	f7fe f8ce 	bl	8000754 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 80025b8:	2201      	movs	r2, #1
 80025ba:	4905      	ldr	r1, [pc, #20]	; (80025d0 <HAL_UART_RxCpltCallback+0x34>)
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <HAL_UART_RxCpltCallback+0x30>)
 80025be:	f002 fc67 	bl	8004e90 <HAL_UART_Receive_IT>
		 //printf("RX: %c (0x%02X)\r\n", rx_buffer[0], rx_buffer[0]);
	}
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000fb4 	.word	0x20000fb4
 80025d0:	20000fb0 	.word	0x20000fb0
 80025d4:	20000a50 	.word	0x20000a50

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <Error_Handler+0x8>
	...

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_MspInit+0x44>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <HAL_MspInit+0x44>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6613      	str	r3, [r2, #96]	; 0x60
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_MspInit+0x44>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_MspInit+0x44>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_MspInit+0x44>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6593      	str	r3, [r2, #88]	; 0x58
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_MspInit+0x44>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800261a:	f001 fc2b 	bl	8003e74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b09c      	sub	sp, #112	; 0x70
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	2244      	movs	r2, #68	; 0x44
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fc37 	bl	8006ec0 <memset>
  if(hi2c->Instance==I2C3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2e      	ldr	r2, [pc, #184]	; (8002710 <HAL_I2C_MspInit+0xe4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d154      	bne.n	8002706 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800265c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002660:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002662:	2300      	movs	r3, #0
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002666:	f107 0318 	add.w	r3, r7, #24
 800266a:	4618      	mov	r0, r3
 800266c:	f002 f942 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002676:	f7ff ffaf 	bl	80025d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	4a25      	ldr	r2, [pc, #148]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b0:	2312      	movs	r3, #18
 80026b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80026bc:	2302      	movs	r3, #2
 80026be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c4:	4619      	mov	r1, r3
 80026c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ca:	f000 fc43 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026ce:	2320      	movs	r3, #32
 80026d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d2:	2312      	movs	r3, #18
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80026de:	2308      	movs	r3, #8
 80026e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026e6:	4619      	mov	r1, r3
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <HAL_I2C_MspInit+0xec>)
 80026ea:	f000 fc33 	bl	8002f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 80026f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_I2C_MspInit+0xe8>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3770      	adds	r7, #112	; 0x70
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40007800 	.word	0x40007800
 8002714:	40021000 	.word	0x40021000
 8002718:	48000400 	.word	0x48000400

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b09c      	sub	sp, #112	; 0x70
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002734:	f107 0318 	add.w	r3, r7, #24
 8002738:	2244      	movs	r2, #68	; 0x44
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f004 fbbf 	bl	8006ec0 <memset>
  if(huart->Instance==USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_UART_MspInit+0x134>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d140      	bne.n	80027ce <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800274c:	2301      	movs	r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	4618      	mov	r0, r3
 800275a:	f002 f8cb 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002764:	f7ff ff38 	bl	80025d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_UART_MspInit+0x138>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_UART_MspInit+0x138>)
 800276e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002772:	6613      	str	r3, [r2, #96]	; 0x60
 8002774:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_UART_MspInit+0x138>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_UART_MspInit+0x138>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_UART_MspInit+0x138>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_UART_MspInit+0x138>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002798:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800279c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027aa:	2307      	movs	r3, #7
 80027ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027b2:	4619      	mov	r1, r3
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f000 fbcc 	bl	8002f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2025      	movs	r0, #37	; 0x25
 80027c2:	f000 fad2 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027c6:	2025      	movs	r0, #37	; 0x25
 80027c8:	f000 fae9 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027cc:	e03b      	b.n	8002846 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_UART_MspInit+0x13c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d136      	bne.n	8002846 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e0:	f107 0318 	add.w	r3, r7, #24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 f885 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80027f0:	f7ff fef2 	bl	80025d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_UART_MspInit+0x138>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <HAL_UART_MspInit+0x138>)
 80027fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_UART_MspInit+0x138>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_UART_MspInit+0x138>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_UART_MspInit+0x138>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_UART_MspInit+0x138>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002824:	230c      	movs	r3, #12
 8002826:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002834:	2307      	movs	r3, #7
 8002836:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800283c:	4619      	mov	r1, r3
 800283e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002842:	f000 fb87 	bl	8002f54 <HAL_GPIO_Init>
}
 8002846:	bf00      	nop
 8002848:	3770      	adds	r7, #112	; 0x70
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40013800 	.word	0x40013800
 8002854:	40021000 	.word	0x40021000
 8002858:	40004400 	.word	0x40004400

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <NMI_Handler+0x4>

08002862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002866:	e7fe      	b.n	8002866 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	e7fe      	b.n	800286c <MemManage_Handler+0x4>

0800286e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <UsageFault_Handler+0x4>

0800287a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a8:	f000 f944 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <USART1_IRQHandler+0x10>)
 80028b6:	f002 fb37 	bl	8004f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000fb4 	.word	0x20000fb4

080028c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_kill>:

int _kill(int pid, int sig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028de:	f004 fac5 	bl	8006e6c <__errno>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2216      	movs	r2, #22
 80028e6:	601a      	str	r2, [r3, #0]
	return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_exit>:

void _exit (int status)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ffe7 	bl	80028d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002906:	e7fe      	b.n	8002906 <_exit+0x12>

08002908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
	}

return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	return -1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296a:	605a      	str	r2, [r3, #4]
	return 0;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_isatty>:

int _isatty(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
	return 0;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <_sbrk+0x5c>)
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <_sbrk+0x60>)
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_sbrk+0x64>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <_sbrk+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d207      	bcs.n	80029ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029dc:	f004 fa46 	bl	8006e6c <__errno>
 80029e0:	4603      	mov	r3, r0
 80029e2:	220c      	movs	r2, #12
 80029e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e009      	b.n	8002a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <_sbrk+0x64>)
 80029fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20008000 	.word	0x20008000
 8002a0c:	00000400 	.word	0x00000400
 8002a10:	20000e54 	.word	0x20000e54
 8002a14:	200010f0 	.word	0x200010f0

08002a18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <SystemInit+0x20>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <SystemInit+0x20>)
 8002a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a40:	f7ff ffea 	bl	8002a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a46:	490d      	ldr	r1, [pc, #52]	; (8002a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <LoopForever+0xe>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	; (8002a88 <LoopForever+0x16>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002a6a:	f004 fa05 	bl	8006e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a6e:	f7ff fb65 	bl	800213c <main>

08002a72 <LoopForever>:

LoopForever:
    b LoopForever
 8002a72:	e7fe      	b.n	8002a72 <LoopForever>
  ldr   r0, =_estack
 8002a74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a7c:	20000a30 	.word	0x20000a30
  ldr r2, =_sidata
 8002a80:	08009578 	.word	0x08009578
  ldr r2, =_sbss
 8002a84:	20000a30 	.word	0x20000a30
  ldr r4, =_ebss
 8002a88:	200010f0 	.word	0x200010f0

08002a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a8c:	e7fe      	b.n	8002a8c <ADC1_2_IRQHandler>

08002a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a98:	2003      	movs	r0, #3
 8002a9a:	f000 f95b 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a9e:	200f      	movs	r0, #15
 8002aa0:	f000 f80e 	bl	8002ac0 <HAL_InitTick>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	e001      	b.n	8002ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ab0:	f7ff fd98 	bl	80025e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ab4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_InitTick+0x68>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_InitTick+0x6c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_InitTick+0x68>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f966 	bl	8002dba <HAL_SYSTICK_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d809      	bhi.n	8002b0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002afa:	2200      	movs	r2, #0
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295
 8002b02:	f000 f932 	bl	8002d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_InitTick+0x70>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e007      	b.n	8002b1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e004      	b.n	8002b1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200009c8 	.word	0x200009c8
 8002b2c:	200009c0 	.word	0x200009c0
 8002b30:	200009c4 	.word	0x200009c4

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_IncTick+0x20>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	200010dc 	.word	0x200010dc
 8002b54:	200009c8 	.word	0x200009c8

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200010dc 	.word	0x200010dc

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d004      	beq.n	8002b94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_Delay+0x40>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b94:	bf00      	nop
 8002b96:	f7ff ffdf 	bl	8002b58 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d8f7      	bhi.n	8002b96 <HAL_Delay+0x26>
  {
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200009c8 	.word	0x200009c8

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4907      	ldr	r1, [pc, #28]	; (8002c50 <__NVIC_EnableIRQ+0x38>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff29 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff40 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff90 	bl	8002ca8 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5f 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff33 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa4 	bl	8002d10 <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d005      	beq.n	8002df6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2204      	movs	r2, #4
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e037      	b.n	8002e66 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 020e 	bic.w	r2, r2, #14
 8002e04:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f202 	lsl.w	r2, r1, r2
 8002e38:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e42:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e64:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e047      	b.n	8002f48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 020e 	bic.w	r2, r2, #14
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8002efa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
    }
  }
  return status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f62:	e15a      	b.n	800321a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 814c 	beq.w	8003214 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d005      	beq.n	8002f94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d130      	bne.n	8002ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fca:	2201      	movs	r2, #1
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0201 	and.w	r2, r3, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d017      	beq.n	8003032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d123      	bne.n	8003086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	08da      	lsrs	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3208      	adds	r2, #8
 8003046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	2203      	movs	r2, #3
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80a6 	beq.w	8003214 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c8:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <HAL_GPIO_Init+0x2e4>)
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_GPIO_Init+0x2e4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6613      	str	r3, [r2, #96]	; 0x60
 80030d4:	4b58      	ldr	r3, [pc, #352]	; (8003238 <HAL_GPIO_Init+0x2e4>)
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e0:	4a56      	ldr	r2, [pc, #344]	; (800323c <HAL_GPIO_Init+0x2e8>)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	3302      	adds	r3, #2
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800310a:	d01f      	beq.n	800314c <HAL_GPIO_Init+0x1f8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a4c      	ldr	r2, [pc, #304]	; (8003240 <HAL_GPIO_Init+0x2ec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d019      	beq.n	8003148 <HAL_GPIO_Init+0x1f4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <HAL_GPIO_Init+0x2f0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_GPIO_Init+0x1f0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <HAL_GPIO_Init+0x2f4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00d      	beq.n	8003140 <HAL_GPIO_Init+0x1ec>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a49      	ldr	r2, [pc, #292]	; (800324c <HAL_GPIO_Init+0x2f8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <HAL_GPIO_Init+0x1e8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a48      	ldr	r2, [pc, #288]	; (8003250 <HAL_GPIO_Init+0x2fc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_GPIO_Init+0x1e4>
 8003134:	2305      	movs	r3, #5
 8003136:	e00a      	b.n	800314e <HAL_GPIO_Init+0x1fa>
 8003138:	2306      	movs	r3, #6
 800313a:	e008      	b.n	800314e <HAL_GPIO_Init+0x1fa>
 800313c:	2304      	movs	r3, #4
 800313e:	e006      	b.n	800314e <HAL_GPIO_Init+0x1fa>
 8003140:	2303      	movs	r3, #3
 8003142:	e004      	b.n	800314e <HAL_GPIO_Init+0x1fa>
 8003144:	2302      	movs	r3, #2
 8003146:	e002      	b.n	800314e <HAL_GPIO_Init+0x1fa>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_GPIO_Init+0x1fa>
 800314c:	2300      	movs	r3, #0
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	f002 0203 	and.w	r2, r2, #3
 8003154:	0092      	lsls	r2, r2, #2
 8003156:	4093      	lsls	r3, r2
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315e:	4937      	ldr	r1, [pc, #220]	; (800323c <HAL_GPIO_Init+0x2e8>)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800316c:	4b39      	ldr	r3, [pc, #228]	; (8003254 <HAL_GPIO_Init+0x300>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003190:	4a30      	ldr	r2, [pc, #192]	; (8003254 <HAL_GPIO_Init+0x300>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_GPIO_Init+0x300>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <HAL_GPIO_Init+0x300>)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_GPIO_Init+0x300>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_GPIO_Init+0x300>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_GPIO_Init+0x300>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <HAL_GPIO_Init+0x300>)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3301      	adds	r3, #1
 8003218:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	f47f ae9d 	bne.w	8002f64 <HAL_GPIO_Init+0x10>
  }
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40021000 	.word	0x40021000
 800323c:	40010000 	.word	0x40010000
 8003240:	48000400 	.word	0x48000400
 8003244:	48000800 	.word	0x48000800
 8003248:	48000c00 	.word	0x48000c00
 800324c:	48001000 	.word	0x48001000
 8003250:	48001400 	.word	0x48001400
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003274:	e002      	b.n	800327c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e08d      	b.n	80033b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff f9bc 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e006      	b.n	8003310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800330e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d108      	bne.n	800332a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e007      	b.n	800333a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69d9      	ldr	r1, [r3, #28]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	460b      	mov	r3, r1
 80033ce:	817b      	strh	r3, [r7, #10]
 80033d0:	4613      	mov	r3, r2
 80033d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b20      	cmp	r3, #32
 80033de:	f040 80fd 	bne.w	80035dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2C_Master_Transmit+0x30>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e0f6      	b.n	80035de <HAL_I2C_Master_Transmit+0x21e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033f8:	f7ff fbae 	bl	8002b58 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2319      	movs	r3, #25
 8003404:	2201      	movs	r2, #1
 8003406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fa00 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0e1      	b.n	80035de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2221      	movs	r2, #33	; 0x21
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2210      	movs	r2, #16
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	893a      	ldrh	r2, [r7, #8]
 800343a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2bff      	cmp	r3, #255	; 0xff
 800344a:	d906      	bls.n	800345a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	22ff      	movs	r2, #255	; 0xff
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e007      	b.n	800346a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003468:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d024      	beq.n	80034bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	4b4e      	ldr	r3, [pc, #312]	; (80035e8 <HAL_I2C_Master_Transmit+0x228>)
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fb6f 	bl	8003b98 <I2C_TransferConfig>
 80034ba:	e066      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	8979      	ldrh	r1, [r7, #10]
 80034c4:	4b48      	ldr	r3, [pc, #288]	; (80035e8 <HAL_I2C_Master_Transmit+0x228>)
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fb64 	bl	8003b98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80034d0:	e05b      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	6a39      	ldr	r1, [r7, #32]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f9f3 	bl	80038c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07b      	b.n	80035de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d034      	beq.n	800358a <HAL_I2C_Master_Transmit+0x1ca>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d130      	bne.n	800358a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	2200      	movs	r2, #0
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f96c 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e04d      	b.n	80035de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2bff      	cmp	r3, #255	; 0xff
 800354a:	d90e      	bls.n	800356a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	22ff      	movs	r2, #255	; 0xff
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	b2da      	uxtb	r2, r3
 8003558:	8979      	ldrh	r1, [r7, #10]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fb18 	bl	8003b98 <I2C_TransferConfig>
 8003568:	e00f      	b.n	800358a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	2300      	movs	r3, #0
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb07 	bl	8003b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d19e      	bne.n	80034d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	6a39      	ldr	r1, [r7, #32]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f9d9 	bl	8003950 <I2C_WaitOnSTOPFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e01a      	b.n	80035de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2220      	movs	r2, #32
 80035ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_I2C_Master_Transmit+0x22c>)
 80035bc:	400b      	ands	r3, r1
 80035be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	80002000 	.word	0x80002000
 80035ec:	fe00e800 	.word	0xfe00e800

080035f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	460b      	mov	r3, r1
 80035fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b20      	cmp	r3, #32
 800360e:	f040 80d6 	bne.w	80037be <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003620:	d101      	bne.n	8003626 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	e0cc      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_I2C_IsDeviceReady+0x44>
 8003630:	2302      	movs	r3, #2
 8003632:	e0c5      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_I2C_IsDeviceReady+0x72>
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003658:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800365c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003660:	e006      	b.n	8003670 <HAL_I2C_IsDeviceReady+0x80>
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800366c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003676:	f7ff fa6f 	bl	8002b58 <HAL_GetTick>
 800367a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80036a8:	e034      	b.n	8003714 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d01a      	beq.n	80036e8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7ff fa51 	bl	8002b58 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <HAL_I2C_IsDeviceReady+0xd8>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10f      	bne.n	80036e8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e06b      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b10      	cmp	r3, #16
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003714:	7ffb      	ldrb	r3, [r7, #31]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_I2C_IsDeviceReady+0x130>
 800371a:	7fbb      	ldrb	r3, [r7, #30]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0c4      	beq.n	80036aa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d01a      	beq.n	8003764 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	2120      	movs	r1, #32
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f869 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e03b      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2220      	movs	r2, #32
 800374e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e02d      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	2120      	movs	r1, #32
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f84e 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e020      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2210      	movs	r2, #16
 8003784:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	f63f af56 	bhi.w	800364a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d103      	bne.n	80037e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d007      	beq.n	8003804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	619a      	str	r2, [r3, #24]
  }
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003820:	e03b      	b.n	800389a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f8d6 	bl	80039d8 <I2C_IsErrorOccurred>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e041      	b.n	80038ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d02d      	beq.n	800389a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7ff f98b 	bl	8002b58 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x44>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d122      	bne.n	800389a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	d113      	bne.n	800389a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00f      	b.n	80038ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d0b4      	beq.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ce:	e033      	b.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f87f 	bl	80039d8 <I2C_IsErrorOccurred>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e031      	b.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d025      	beq.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ec:	f7ff f934 	bl	8002b58 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d11a      	bne.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b02      	cmp	r3, #2
 800390e:	d013      	beq.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d1c4      	bne.n	80038d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395c:	e02f      	b.n	80039be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f838 	bl	80039d8 <I2C_IsErrorOccurred>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e02d      	b.n	80039ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7ff f8f1 	bl	8002b58 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11a      	bne.n	80039be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b20      	cmp	r3, #32
 8003994:	d013      	beq.n	80039be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e007      	b.n	80039ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d1c8      	bne.n	800395e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d068      	beq.n	8003ad6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a0c:	e049      	b.n	8003aa2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d045      	beq.n	8003aa2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7ff f89f 	bl	8002b58 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_IsErrorOccurred+0x54>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d13a      	bne.n	8003aa2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4e:	d121      	bne.n	8003a94 <I2C_IsErrorOccurred+0xbc>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a56:	d01d      	beq.n	8003a94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d01a      	beq.n	8003a94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a6e:	f7ff f873 	bl	8002b58 <HAL_GetTick>
 8003a72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a74:	e00e      	b.n	8003a94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a76:	f7ff f86f 	bl	8002b58 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b19      	cmp	r3, #25
 8003a82:	d907      	bls.n	8003a94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f043 0320 	orr.w	r3, r3, #32
 8003a8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a92:	e006      	b.n	8003aa2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d1e9      	bne.n	8003a76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d003      	beq.n	8003ab8 <I2C_IsErrorOccurred+0xe0>
 8003ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0aa      	beq.n	8003a0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f043 0308 	orr.w	r3, r3, #8
 8003b10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f043 0302 	orr.w	r3, r3, #2
 8003b32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff fe3b 	bl	80037c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <I2C_IsErrorOccurred+0x1bc>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	fe00e800 	.word	0xfe00e800

08003b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bb0:	7a7b      	ldrb	r3, [r7, #9]
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	0d5b      	lsrs	r3, r3, #21
 8003bd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <I2C_TransferConfig+0x60>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	ea02 0103 	and.w	r1, r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	03ff63ff 	.word	0x03ff63ff

08003bfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d138      	bne.n	8003c84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e032      	b.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d139      	bne.n	8003d1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e033      	b.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2224      	movs	r2, #36	; 0x24
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ce4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d141      	bne.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d46:	d131      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d48:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	4a46      	ldr	r2, [pc, #280]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d58:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d60:	4a41      	ldr	r2, [pc, #260]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d68:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2232      	movs	r2, #50	; 0x32
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	4a3f      	ldr	r2, [pc, #252]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	0c9b      	lsrs	r3, r3, #18
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7e:	e002      	b.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d86:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d102      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f2      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9a:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d158      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e057      	b.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db2:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dbc:	e04d      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc4:	d141      	bne.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc6:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d131      	bne.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dda:	4a23      	ldr	r2, [pc, #140]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dec:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2232      	movs	r2, #50	; 0x32
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	0c9b      	lsrs	r3, r3, #18
 8003e06:	3301      	adds	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0a:	e002      	b.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1e:	d102      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f2      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e32:	d112      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e011      	b.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e48:	e007      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	200009c0 	.word	0x200009c0
 8003e70:	431bde83 	.word	0x431bde83

08003e74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e82:	6093      	str	r3, [r2, #8]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40007000 	.word	0x40007000

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e301      	b.n	80044aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d075      	beq.n	8003f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4ba3      	ldr	r3, [pc, #652]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ebc:	4ba0      	ldr	r3, [pc, #640]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d102      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3e>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d002      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x44>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	4b99      	ldr	r3, [pc, #612]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05b      	beq.n	8003f9c <HAL_RCC_OscConfig+0x108>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d157      	bne.n	8003f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e2dc      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_OscConfig+0x74>
 8003efa:	4b91      	ldr	r3, [pc, #580]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a90      	ldr	r2, [pc, #576]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e01d      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x98>
 8003f12:	4b8b      	ldr	r3, [pc, #556]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a8a      	ldr	r2, [pc, #552]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b88      	ldr	r3, [pc, #544]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a87      	ldr	r2, [pc, #540]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	4b84      	ldr	r3, [pc, #528]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a83      	ldr	r2, [pc, #524]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b81      	ldr	r3, [pc, #516]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a80      	ldr	r2, [pc, #512]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fe fe04 	bl	8002b58 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fe fe00 	bl	8002b58 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e2a1      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f66:	4b76      	ldr	r3, [pc, #472]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0xc0>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe fdf0 	bl	8002b58 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fe fdec 	bl	8002b58 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e28d      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8e:	4b6c      	ldr	r3, [pc, #432]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0xe8>
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d075      	beq.n	8004096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb4:	4b62      	ldr	r3, [pc, #392]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d102      	bne.n	8003fca <HAL_RCC_OscConfig+0x136>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x13c>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11f      	bne.n	8004010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	4b5b      	ldr	r3, [pc, #364]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x154>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e260      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b55      	ldr	r3, [pc, #340]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	4952      	ldr	r1, [pc, #328]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ffc:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCC_OscConfig+0x2b0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fd5d 	bl	8002ac0 <HAL_InitTick>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d043      	beq.n	8004094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e24c      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d023      	beq.n	8004060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004018:	4b49      	ldr	r3, [pc, #292]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a48      	ldr	r2, [pc, #288]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fd98 	bl	8002b58 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402c:	f7fe fd94 	bl	8002b58 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e235      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800403e:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404a:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	4939      	ldr	r1, [pc, #228]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
 800405e:	e01a      	b.n	8004096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004060:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a36      	ldr	r2, [pc, #216]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe fd74 	bl	8002b58 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004074:	f7fe fd70 	bl	8002b58 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e211      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004086:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x1e0>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d03c      	beq.n	800411c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b0:	4a23      	ldr	r2, [pc, #140]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ba:	f7fe fd4d 	bl	8002b58 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fe fd49 	bl	8002b58 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1ea      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ef      	beq.n	80040c2 <HAL_RCC_OscConfig+0x22e>
 80040e2:	e01b      	b.n	800411c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe fd30 	bl	8002b58 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fe fd2c 	bl	8002b58 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1cd      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ef      	bne.n	80040fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80ab 	beq.w	8004280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_RCC_OscConfig+0x2b4>
 800413a:	2301      	movs	r3, #1
 800413c:	e005      	b.n	800414a <HAL_RCC_OscConfig+0x2b6>
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	200009c4 	.word	0x200009c4
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4bad      	ldr	r3, [pc, #692]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	4aac      	ldr	r2, [pc, #688]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6593      	str	r3, [r2, #88]	; 0x58
 800415a:	4baa      	ldr	r3, [pc, #680]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416a:	4ba7      	ldr	r3, [pc, #668]	; (8004408 <HAL_RCC_OscConfig+0x574>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004176:	4ba4      	ldr	r3, [pc, #656]	; (8004408 <HAL_RCC_OscConfig+0x574>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4aa3      	ldr	r2, [pc, #652]	; (8004408 <HAL_RCC_OscConfig+0x574>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7fe fce9 	bl	8002b58 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7fe fce5 	bl	8002b58 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e186      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419c:	4b9a      	ldr	r3, [pc, #616]	; (8004408 <HAL_RCC_OscConfig+0x574>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d108      	bne.n	80041c2 <HAL_RCC_OscConfig+0x32e>
 80041b0:	4b94      	ldr	r3, [pc, #592]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	4a93      	ldr	r2, [pc, #588]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c0:	e024      	b.n	800420c <HAL_RCC_OscConfig+0x378>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d110      	bne.n	80041ec <HAL_RCC_OscConfig+0x358>
 80041ca:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	4a8c      	ldr	r2, [pc, #560]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041d2:	f043 0304 	orr.w	r3, r3, #4
 80041d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041da:	4b8a      	ldr	r3, [pc, #552]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	4a88      	ldr	r2, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ea:	e00f      	b.n	800420c <HAL_RCC_OscConfig+0x378>
 80041ec:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	4a84      	ldr	r2, [pc, #528]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041fc:	4b81      	ldr	r3, [pc, #516]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe fca0 	bl	8002b58 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	e00a      	b.n	8004232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fe fc9c 	bl	8002b58 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e13b      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004232:	4b74      	ldr	r3, [pc, #464]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ed      	beq.n	800421c <HAL_RCC_OscConfig+0x388>
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fe fc89 	bl	8002b58 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fe fc85 	bl	8002b58 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e124      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004260:	4b68      	ldr	r3, [pc, #416]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ed      	bne.n	800424a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800426e:	7ffb      	ldrb	r3, [r7, #31]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004274:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	4a62      	ldr	r2, [pc, #392]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d03c      	beq.n	8004306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01c      	beq.n	80042ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004294:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429a:	4a5a      	ldr	r2, [pc, #360]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fe fc58 	bl	8002b58 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ac:	f7fe fc54 	bl	8002b58 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0f5      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042be:	4b51      	ldr	r3, [pc, #324]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80042c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ef      	beq.n	80042ac <HAL_RCC_OscConfig+0x418>
 80042cc:	e01b      	b.n	8004306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80042d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d4:	4a4b      	ldr	r2, [pc, #300]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042de:	f7fe fc3b 	bl	8002b58 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e6:	f7fe fc37 	bl	8002b58 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0d8      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80042fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ef      	bne.n	80042e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80cc 	beq.w	80044a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004310:	4b3c      	ldr	r3, [pc, #240]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b0c      	cmp	r3, #12
 800431a:	f000 8086 	beq.w	800442a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d15a      	bne.n	80043dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b37      	ldr	r3, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe fc11 	bl	8002b58 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe fc0d 	bl	8002b58 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0ae      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x578>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6a11      	ldr	r1, [r2, #32]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004368:	3a01      	subs	r2, #1
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004372:	0212      	lsls	r2, r2, #8
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0552      	lsls	r2, r2, #21
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0652      	lsls	r2, r2, #25
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004392:	06d2      	lsls	r2, r2, #27
 8004394:	430a      	orrs	r2, r1
 8004396:	491b      	ldr	r1, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 8004398:	4313      	orrs	r3, r2
 800439a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe fbd0 	bl	8002b58 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fe fbcc 	bl	8002b58 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e06d      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x528>
 80043da:	e065      	b.n	80044a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_RCC_OscConfig+0x570>)
 80043e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fbb6 	bl	8002b58 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ee:	e00f      	b.n	8004410 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe fbb2 	bl	8002b58 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d908      	bls.n	8004410 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e053      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
 8004408:	40007000 	.word	0x40007000
 800440c:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004410:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_RCC_OscConfig+0x620>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e9      	bne.n	80043f0 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_OscConfig+0x620>)
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4924      	ldr	r1, [pc, #144]	; (80044b4 <HAL_RCC_OscConfig+0x620>)
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x624>)
 8004424:	4013      	ands	r3, r2
 8004426:	60cb      	str	r3, [r1, #12]
 8004428:	e03e      	b.n	80044a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e039      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004436:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <HAL_RCC_OscConfig+0x620>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d12c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	3b01      	subs	r3, #1
 8004456:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d123      	bne.n	80044a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d11b      	bne.n	80044a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d113      	bne.n	80044a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d109      	bne.n	80044a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	feeefffc 	.word	0xfeeefffc

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e11e      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b91      	ldr	r3, [pc, #580]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d910      	bls.n	8004504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b8e      	ldr	r3, [pc, #568]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 020f 	bic.w	r2, r3, #15
 80044ea:	498c      	ldr	r1, [pc, #560]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b8a      	ldr	r3, [pc, #552]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e106      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d073      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d129      	bne.n	800456c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004518:	4b81      	ldr	r3, [pc, #516]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0f4      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004528:	f000 f99e 	bl	8004868 <RCC_GetSysClockFreqFromPLLSource>
 800452c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4a7c      	ldr	r2, [pc, #496]	; (8004724 <HAL_RCC_ClockConfig+0x268>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d93f      	bls.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004536:	4b7a      	ldr	r3, [pc, #488]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800454a:	2b00      	cmp	r3, #0
 800454c:	d033      	beq.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d12f      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004556:	4b72      	ldr	r3, [pc, #456]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455e:	4a70      	ldr	r2, [pc, #448]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e024      	b.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d107      	bne.n	8004584 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0c6      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004584:	4b66      	ldr	r3, [pc, #408]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0be      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004594:	f000 f8ce 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8004598:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4a61      	ldr	r2, [pc, #388]	; (8004724 <HAL_RCC_ClockConfig+0x268>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d909      	bls.n	80045b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045a2:	4b5f      	ldr	r3, [pc, #380]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045aa:	4a5d      	ldr	r2, [pc, #372]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045b6:	4b5a      	ldr	r3, [pc, #360]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0203 	bic.w	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4957      	ldr	r1, [pc, #348]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fe fac6 	bl	8002b58 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d0:	f7fe fac2 	bl	8002b58 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e095      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 020c 	and.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1eb      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d023      	beq.n	800464c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a42      	ldr	r2, [pc, #264]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800461a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004628:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004630:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4936      	ldr	r1, [pc, #216]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
 800464a:	e008      	b.n	800465e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d105      	bne.n	800465e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004652:	4b33      	ldr	r3, [pc, #204]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4a32      	ldr	r2, [pc, #200]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 8004658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800465e:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d21d      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 020f 	bic.w	r2, r3, #15
 8004674:	4929      	ldr	r1, [pc, #164]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800467c:	f7fe fa6c 	bl	8002b58 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	e00a      	b.n	800469a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004684:	f7fe fa68 	bl	8002b58 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e03b      	b.n	8004712 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_RCC_ClockConfig+0x260>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1ed      	bne.n	8004684 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4917      	ldr	r1, [pc, #92]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	490f      	ldr	r1, [pc, #60]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e6:	f000 f825 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCC_ClockConfig+0x264>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	490c      	ldr	r1, [pc, #48]	; (8004728 <HAL_RCC_ClockConfig+0x26c>)
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x270>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x274>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe f9d8 	bl	8002ac0 <HAL_InitTick>
 8004710:	4603      	mov	r3, r0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	04c4b400 	.word	0x04c4b400
 8004728:	080093dc 	.word	0x080093dc
 800472c:	200009c0 	.word	0x200009c0
 8004730:	200009c4 	.word	0x200009c4

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d102      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004746:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e047      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d102      	bne.n	800475e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	e03e      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d136      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	3301      	adds	r3, #1
 8004780:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d10c      	bne.n	80047a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004792:	68d2      	ldr	r2, [r2, #12]
 8004794:	0a12      	lsrs	r2, r2, #8
 8004796:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e00c      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a2:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0a12      	lsrs	r2, r2, #8
 80047b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
      break;
 80047ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0e5b      	lsrs	r3, r3, #25
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e001      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047dc:	693b      	ldr	r3, [r7, #16]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200

080047f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	200009c0 	.word	0x200009c0

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004814:	f7ff fff0 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	080093ec 	.word	0x080093ec

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004840:	f7ff ffda 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0adb      	lsrs	r3, r3, #11
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	080093ec 	.word	0x080093ec

08004868 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d10c      	bne.n	80048a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488c:	4a17      	ldr	r2, [pc, #92]	; (80048ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004896:	68d2      	ldr	r2, [r2, #12]
 8004898:	0a12      	lsrs	r2, r2, #8
 800489a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
    break;
 80048a4:	e00c      	b.n	80048c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	0a12      	lsrs	r2, r2, #8
 80048b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
    break;
 80048be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0e5b      	lsrs	r3, r3, #25
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048da:	687b      	ldr	r3, [r7, #4]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40021000 	.word	0x40021000
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	00f42400 	.word	0x00f42400

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048fc:	2300      	movs	r3, #0
 80048fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004900:	2300      	movs	r3, #0
 8004902:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8098 	beq.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	4a3f      	ldr	r2, [pc, #252]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	; 0x58
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493a:	2301      	movs	r3, #1
 800493c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800493e:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a39      	ldr	r2, [pc, #228]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800494a:	f7fe f905 	bl	8002b58 <HAL_GetTick>
 800494e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004950:	e009      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fe f901 	bl	8002b58 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d902      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	74fb      	strb	r3, [r7, #19]
        break;
 8004964:	e005      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004972:	7cfb      	ldrb	r3, [r7, #19]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d159      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004978:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01e      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	d019      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fe f8c1 	bl	8002b58 <HAL_GetTick>
 80049d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d8:	e00b      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fe f8bd 	bl	8002b58 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d902      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	74fb      	strb	r3, [r7, #19]
            break;
 80049f0:	e006      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ec      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10b      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	4903      	ldr	r1, [pc, #12]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a1c:	e008      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	74bb      	strb	r3, [r7, #18]
 8004a22:	e005      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a30:	7c7b      	ldrb	r3, [r7, #17]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a36:	4ba6      	ldr	r3, [pc, #664]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	4aa5      	ldr	r2, [pc, #660]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a4e:	4ba0      	ldr	r3, [pc, #640]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f023 0203 	bic.w	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	499c      	ldr	r1, [pc, #624]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a70:	4b97      	ldr	r3, [pc, #604]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 020c 	bic.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4994      	ldr	r1, [pc, #592]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a92:	4b8f      	ldr	r3, [pc, #572]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	498b      	ldr	r1, [pc, #556]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab4:	4b86      	ldr	r3, [pc, #536]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	4983      	ldr	r1, [pc, #524]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad6:	4b7e      	ldr	r3, [pc, #504]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	497a      	ldr	r1, [pc, #488]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af8:	4b75      	ldr	r3, [pc, #468]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	4972      	ldr	r1, [pc, #456]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b1a:	4b6d      	ldr	r3, [pc, #436]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4969      	ldr	r1, [pc, #420]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b3c:	4b64      	ldr	r3, [pc, #400]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	4961      	ldr	r1, [pc, #388]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5e:	4b5c      	ldr	r3, [pc, #368]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4958      	ldr	r1, [pc, #352]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	4950      	ldr	r1, [pc, #320]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bb8:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4942      	ldr	r1, [pc, #264]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bf0:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4934      	ldr	r1, [pc, #208]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a2e      	ldr	r2, [pc, #184]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c28:	4b29      	ldr	r3, [pc, #164]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	4926      	ldr	r1, [pc, #152]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	4918      	ldr	r1, [pc, #96]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	490a      	ldr	r1, [pc, #40]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e042      	b.n	8004d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fd fd0f 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2224      	movs	r2, #36	; 0x24
 8004d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fee2 	bl	8005ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fc43 	bl	80055b0 <UART_SetConfig>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e01b      	b.n	8004d6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 ff61 	bl	8005c2c <UART_CheckIdleState>
 8004d6a:	4603      	mov	r3, r0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08a      	sub	sp, #40	; 0x28
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d17b      	bne.n	8004e86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_UART_Transmit+0x26>
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e074      	b.n	8004e88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2221      	movs	r2, #33	; 0x21
 8004daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dae:	f7fd fed3 	bl	8002b58 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d108      	bne.n	8004de0 <HAL_UART_Transmit+0x6c>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e003      	b.n	8004de8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004de8:	e030      	b.n	8004e4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 ffc3 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e03d      	b.n	8004e88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3302      	adds	r3, #2
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e007      	b.n	8004e3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1c8      	bne.n	8004dea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2140      	movs	r1, #64	; 0x40
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 ff8c 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e006      	b.n	8004e88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d137      	bne.n	8004f18 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_UART_Receive_IT+0x24>
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e030      	b.n	8004f1a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a18      	ldr	r2, [pc, #96]	; (8004f24 <HAL_UART_Receive_IT+0x94>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d01f      	beq.n	8004f08 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d018      	beq.n	8004f08 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e6      	bne.n	8004ed6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 ffa4 	bl	8005e5c <UART_Start_Receive_IT>
 8004f14:	4603      	mov	r3, r0
 8004f16:	e000      	b.n	8004f1a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40008000 	.word	0x40008000

08004f28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b0ba      	sub	sp, #232	; 0xe8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f52:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f56:	4013      	ands	r3, r2
 8004f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11b      	bne.n	8004f9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 82e3 	beq.w	8005558 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
      }
      return;
 8004f9a:	e2dd      	b.n	8005558 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8123 	beq.w	80051ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fa6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004faa:	4b8d      	ldr	r3, [pc, #564]	; (80051e0 <HAL_UART_IRQHandler+0x2b8>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fb6:	4b8b      	ldr	r3, [pc, #556]	; (80051e4 <HAL_UART_IRQHandler+0x2bc>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8116 	beq.w	80051ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xc8>
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_UART_IRQHandler+0xf8>
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2202      	movs	r2, #2
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d011      	beq.n	8005050 <HAL_UART_IRQHandler+0x128>
 800502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2204      	movs	r2, #4
 800503e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f043 0202 	orr.w	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d017      	beq.n	800508c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800505c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d105      	bne.n	8005074 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005068:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800506c:	4b5c      	ldr	r3, [pc, #368]	; (80051e0 <HAL_UART_IRQHandler+0x2b8>)
 800506e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2208      	movs	r2, #8
 800507a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f043 0208 	orr.w	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005094:	2b00      	cmp	r3, #0
 8005096:	d012      	beq.n	80050be <HAL_UART_IRQHandler+0x196>
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8249 	beq.w	800555c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d013      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800511a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800511e:	2b00      	cmp	r3, #0
 8005120:	d054      	beq.n	80051cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ffbc 	bl	80060a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d146      	bne.n	80051c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800514c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005162:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800516e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800517a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1d9      	bne.n	8005136 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d017      	beq.n	80051bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_UART_IRQHandler+0x2c0>)
 8005194:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519c:	4618      	mov	r0, r3
 800519e:	f7fd fe71 	bl	8002e84 <HAL_DMA_Abort_IT>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d019      	beq.n	80051dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80051b6:	4610      	mov	r0, r2
 80051b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ba:	e00f      	b.n	80051dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f9e1 	bl	8005584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c2:	e00b      	b.n	80051dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9dd 	bl	8005584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	e007      	b.n	80051dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9d9 	bl	8005584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80051da:	e1bf      	b.n	800555c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	bf00      	nop
    return;
 80051de:	e1bd      	b.n	800555c <HAL_UART_IRQHandler+0x634>
 80051e0:	10000001 	.word	0x10000001
 80051e4:	04000120 	.word	0x04000120
 80051e8:	0800616d 	.word	0x0800616d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	f040 8153 	bne.w	800549c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 814c 	beq.w	800549c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8145 	beq.w	800549c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2210      	movs	r2, #16
 8005218:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	f040 80bb 	bne.w	80053a0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 818f 	beq.w	8005560 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800524c:	429a      	cmp	r2, r3
 800524e:	f080 8187 	bcs.w	8005560 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005258:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 8087 	bne.w	800537e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800529a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800529e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1da      	bne.n	8005270 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e1      	bne.n	80052ba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800531a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800531c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e3      	bne.n	80052f6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534c:	f023 0310 	bic.w	r3, r3, #16
 8005350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800535e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005360:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800536c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e4      	bne.n	800533c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005378:	4618      	mov	r0, r3
 800537a:	f7fd fd2a 	bl	8002dd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005390:	b29b      	uxth	r3, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	b29b      	uxth	r3, r3
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8fd 	bl	8005598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800539e:	e0df      	b.n	8005560 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80d1 	beq.w	8005564 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80053c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 80cc 	beq.w	8005564 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e4      	bne.n	80053cc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	623b      	str	r3, [r7, #32]
   return(result);
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800542a:	633a      	str	r2, [r7, #48]	; 0x30
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e1      	bne.n	8005402 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0310 	bic.w	r3, r3, #16
 8005466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69b9      	ldr	r1, [r7, #24]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	617b      	str	r3, [r7, #20]
   return(result);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e4      	bne.n	8005452 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800548e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f87f 	bl	8005598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800549a:	e063      	b.n	8005564 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <HAL_UART_IRQHandler+0x59e>
 80054a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fbb2 	bl	8006c28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054c4:	e051      	b.n	800556a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d014      	beq.n	80054fc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d03a      	beq.n	8005568 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
    }
    return;
 80054fa:	e035      	b.n	8005568 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d009      	beq.n	800551c <HAL_UART_IRQHandler+0x5f4>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fe3f 	bl	8006198 <UART_EndTransmit_IT>
    return;
 800551a:	e026      	b.n	800556a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_UART_IRQHandler+0x614>
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fb8b 	bl	8006c50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800553a:	e016      	b.n	800556a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d010      	beq.n	800556a <HAL_UART_IRQHandler+0x642>
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554c:	2b00      	cmp	r3, #0
 800554e:	da0c      	bge.n	800556a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f001 fb73 	bl	8006c3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005556:	e008      	b.n	800556a <HAL_UART_IRQHandler+0x642>
      return;
 8005558:	bf00      	nop
 800555a:	e006      	b.n	800556a <HAL_UART_IRQHandler+0x642>
    return;
 800555c:	bf00      	nop
 800555e:	e004      	b.n	800556a <HAL_UART_IRQHandler+0x642>
      return;
 8005560:	bf00      	nop
 8005562:	e002      	b.n	800556a <HAL_UART_IRQHandler+0x642>
      return;
 8005564:	bf00      	nop
 8005566:	e000      	b.n	800556a <HAL_UART_IRQHandler+0x642>
    return;
 8005568:	bf00      	nop
  }
}
 800556a:	37e8      	adds	r7, #232	; 0xe8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b0:	b5b0      	push	{r4, r5, r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4baf      	ldr	r3, [pc, #700]	; (8005898 <UART_SetConfig+0x2e8>)
 80055dc:	4013      	ands	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	69f9      	ldr	r1, [r7, #28]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4aa4      	ldr	r2, [pc, #656]	; (800589c <UART_SetConfig+0x2ec>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	4313      	orrs	r3, r2
 8005616:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005622:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	69f9      	ldr	r1, [r7, #28]
 800562c:	430b      	orrs	r3, r1
 800562e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	f023 010f 	bic.w	r1, r3, #15
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a95      	ldr	r2, [pc, #596]	; (80058a0 <UART_SetConfig+0x2f0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d120      	bne.n	8005692 <UART_SetConfig+0xe2>
 8005650:	4b94      	ldr	r3, [pc, #592]	; (80058a4 <UART_SetConfig+0x2f4>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d816      	bhi.n	800568c <UART_SetConfig+0xdc>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <UART_SetConfig+0xb4>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005675 	.word	0x08005675
 8005668:	08005681 	.word	0x08005681
 800566c:	0800567b 	.word	0x0800567b
 8005670:	08005687 	.word	0x08005687
 8005674:	2301      	movs	r3, #1
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	e0bc      	b.n	80057f4 <UART_SetConfig+0x244>
 800567a:	2302      	movs	r3, #2
 800567c:	76fb      	strb	r3, [r7, #27]
 800567e:	e0b9      	b.n	80057f4 <UART_SetConfig+0x244>
 8005680:	2304      	movs	r3, #4
 8005682:	76fb      	strb	r3, [r7, #27]
 8005684:	e0b6      	b.n	80057f4 <UART_SetConfig+0x244>
 8005686:	2308      	movs	r3, #8
 8005688:	76fb      	strb	r3, [r7, #27]
 800568a:	e0b3      	b.n	80057f4 <UART_SetConfig+0x244>
 800568c:	2310      	movs	r3, #16
 800568e:	76fb      	strb	r3, [r7, #27]
 8005690:	e0b0      	b.n	80057f4 <UART_SetConfig+0x244>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a84      	ldr	r2, [pc, #528]	; (80058a8 <UART_SetConfig+0x2f8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d132      	bne.n	8005702 <UART_SetConfig+0x152>
 800569c:	4b81      	ldr	r3, [pc, #516]	; (80058a4 <UART_SetConfig+0x2f4>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f003 030c 	and.w	r3, r3, #12
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d828      	bhi.n	80056fc <UART_SetConfig+0x14c>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x100>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	080056fd 	.word	0x080056fd
 80056b8:	080056fd 	.word	0x080056fd
 80056bc:	080056fd 	.word	0x080056fd
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	080056fd 	.word	0x080056fd
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	080056fd 	.word	0x080056fd
 80056d0:	080056eb 	.word	0x080056eb
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	080056fd 	.word	0x080056fd
 80056e0:	080056f7 	.word	0x080056f7
 80056e4:	2300      	movs	r3, #0
 80056e6:	76fb      	strb	r3, [r7, #27]
 80056e8:	e084      	b.n	80057f4 <UART_SetConfig+0x244>
 80056ea:	2302      	movs	r3, #2
 80056ec:	76fb      	strb	r3, [r7, #27]
 80056ee:	e081      	b.n	80057f4 <UART_SetConfig+0x244>
 80056f0:	2304      	movs	r3, #4
 80056f2:	76fb      	strb	r3, [r7, #27]
 80056f4:	e07e      	b.n	80057f4 <UART_SetConfig+0x244>
 80056f6:	2308      	movs	r3, #8
 80056f8:	76fb      	strb	r3, [r7, #27]
 80056fa:	e07b      	b.n	80057f4 <UART_SetConfig+0x244>
 80056fc:	2310      	movs	r3, #16
 80056fe:	76fb      	strb	r3, [r7, #27]
 8005700:	e078      	b.n	80057f4 <UART_SetConfig+0x244>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a69      	ldr	r2, [pc, #420]	; (80058ac <UART_SetConfig+0x2fc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d120      	bne.n	800574e <UART_SetConfig+0x19e>
 800570c:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <UART_SetConfig+0x2f4>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005712:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005716:	2b30      	cmp	r3, #48	; 0x30
 8005718:	d013      	beq.n	8005742 <UART_SetConfig+0x192>
 800571a:	2b30      	cmp	r3, #48	; 0x30
 800571c:	d814      	bhi.n	8005748 <UART_SetConfig+0x198>
 800571e:	2b20      	cmp	r3, #32
 8005720:	d009      	beq.n	8005736 <UART_SetConfig+0x186>
 8005722:	2b20      	cmp	r3, #32
 8005724:	d810      	bhi.n	8005748 <UART_SetConfig+0x198>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <UART_SetConfig+0x180>
 800572a:	2b10      	cmp	r3, #16
 800572c:	d006      	beq.n	800573c <UART_SetConfig+0x18c>
 800572e:	e00b      	b.n	8005748 <UART_SetConfig+0x198>
 8005730:	2300      	movs	r3, #0
 8005732:	76fb      	strb	r3, [r7, #27]
 8005734:	e05e      	b.n	80057f4 <UART_SetConfig+0x244>
 8005736:	2302      	movs	r3, #2
 8005738:	76fb      	strb	r3, [r7, #27]
 800573a:	e05b      	b.n	80057f4 <UART_SetConfig+0x244>
 800573c:	2304      	movs	r3, #4
 800573e:	76fb      	strb	r3, [r7, #27]
 8005740:	e058      	b.n	80057f4 <UART_SetConfig+0x244>
 8005742:	2308      	movs	r3, #8
 8005744:	76fb      	strb	r3, [r7, #27]
 8005746:	e055      	b.n	80057f4 <UART_SetConfig+0x244>
 8005748:	2310      	movs	r3, #16
 800574a:	76fb      	strb	r3, [r7, #27]
 800574c:	e052      	b.n	80057f4 <UART_SetConfig+0x244>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a57      	ldr	r2, [pc, #348]	; (80058b0 <UART_SetConfig+0x300>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d120      	bne.n	800579a <UART_SetConfig+0x1ea>
 8005758:	4b52      	ldr	r3, [pc, #328]	; (80058a4 <UART_SetConfig+0x2f4>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005762:	2bc0      	cmp	r3, #192	; 0xc0
 8005764:	d013      	beq.n	800578e <UART_SetConfig+0x1de>
 8005766:	2bc0      	cmp	r3, #192	; 0xc0
 8005768:	d814      	bhi.n	8005794 <UART_SetConfig+0x1e4>
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d009      	beq.n	8005782 <UART_SetConfig+0x1d2>
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d810      	bhi.n	8005794 <UART_SetConfig+0x1e4>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <UART_SetConfig+0x1cc>
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d006      	beq.n	8005788 <UART_SetConfig+0x1d8>
 800577a:	e00b      	b.n	8005794 <UART_SetConfig+0x1e4>
 800577c:	2300      	movs	r3, #0
 800577e:	76fb      	strb	r3, [r7, #27]
 8005780:	e038      	b.n	80057f4 <UART_SetConfig+0x244>
 8005782:	2302      	movs	r3, #2
 8005784:	76fb      	strb	r3, [r7, #27]
 8005786:	e035      	b.n	80057f4 <UART_SetConfig+0x244>
 8005788:	2304      	movs	r3, #4
 800578a:	76fb      	strb	r3, [r7, #27]
 800578c:	e032      	b.n	80057f4 <UART_SetConfig+0x244>
 800578e:	2308      	movs	r3, #8
 8005790:	76fb      	strb	r3, [r7, #27]
 8005792:	e02f      	b.n	80057f4 <UART_SetConfig+0x244>
 8005794:	2310      	movs	r3, #16
 8005796:	76fb      	strb	r3, [r7, #27]
 8005798:	e02c      	b.n	80057f4 <UART_SetConfig+0x244>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3f      	ldr	r2, [pc, #252]	; (800589c <UART_SetConfig+0x2ec>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d125      	bne.n	80057f0 <UART_SetConfig+0x240>
 80057a4:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <UART_SetConfig+0x2f4>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057b2:	d017      	beq.n	80057e4 <UART_SetConfig+0x234>
 80057b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057b8:	d817      	bhi.n	80057ea <UART_SetConfig+0x23a>
 80057ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057be:	d00b      	beq.n	80057d8 <UART_SetConfig+0x228>
 80057c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c4:	d811      	bhi.n	80057ea <UART_SetConfig+0x23a>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <UART_SetConfig+0x222>
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ce:	d006      	beq.n	80057de <UART_SetConfig+0x22e>
 80057d0:	e00b      	b.n	80057ea <UART_SetConfig+0x23a>
 80057d2:	2300      	movs	r3, #0
 80057d4:	76fb      	strb	r3, [r7, #27]
 80057d6:	e00d      	b.n	80057f4 <UART_SetConfig+0x244>
 80057d8:	2302      	movs	r3, #2
 80057da:	76fb      	strb	r3, [r7, #27]
 80057dc:	e00a      	b.n	80057f4 <UART_SetConfig+0x244>
 80057de:	2304      	movs	r3, #4
 80057e0:	76fb      	strb	r3, [r7, #27]
 80057e2:	e007      	b.n	80057f4 <UART_SetConfig+0x244>
 80057e4:	2308      	movs	r3, #8
 80057e6:	76fb      	strb	r3, [r7, #27]
 80057e8:	e004      	b.n	80057f4 <UART_SetConfig+0x244>
 80057ea:	2310      	movs	r3, #16
 80057ec:	76fb      	strb	r3, [r7, #27]
 80057ee:	e001      	b.n	80057f4 <UART_SetConfig+0x244>
 80057f0:	2310      	movs	r3, #16
 80057f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a28      	ldr	r2, [pc, #160]	; (800589c <UART_SetConfig+0x2ec>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	f040 809e 	bne.w	800593c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005800:	7efb      	ldrb	r3, [r7, #27]
 8005802:	2b08      	cmp	r3, #8
 8005804:	d823      	bhi.n	800584e <UART_SetConfig+0x29e>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <UART_SetConfig+0x25c>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005831 	.word	0x08005831
 8005810:	0800584f 	.word	0x0800584f
 8005814:	08005839 	.word	0x08005839
 8005818:	0800584f 	.word	0x0800584f
 800581c:	0800583f 	.word	0x0800583f
 8005820:	0800584f 	.word	0x0800584f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	0800584f 	.word	0x0800584f
 800582c:	08005847 	.word	0x08005847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7fe ffee 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005834:	6178      	str	r0, [r7, #20]
        break;
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <UART_SetConfig+0x304>)
 800583a:	617b      	str	r3, [r7, #20]
        break;
 800583c:	e00c      	b.n	8005858 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583e:	f7fe ff79 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005842:	6178      	str	r0, [r7, #20]
        break;
 8005844:	e008      	b.n	8005858 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584a:	617b      	str	r3, [r7, #20]
        break;
 800584c:	e004      	b.n	8005858 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	76bb      	strb	r3, [r7, #26]
        break;
 8005856:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 812c 	beq.w	8005ab8 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <UART_SetConfig+0x308>)
 8005866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586a:	461a      	mov	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005872:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d305      	bcc.n	8005890 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d915      	bls.n	80058bc <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	76bb      	strb	r3, [r7, #26]
 8005894:	e110      	b.n	8005ab8 <UART_SetConfig+0x508>
 8005896:	bf00      	nop
 8005898:	cfff69f3 	.word	0xcfff69f3
 800589c:	40008000 	.word	0x40008000
 80058a0:	40013800 	.word	0x40013800
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40004400 	.word	0x40004400
 80058ac:	40004800 	.word	0x40004800
 80058b0:	40004c00 	.word	0x40004c00
 80058b4:	00f42400 	.word	0x00f42400
 80058b8:	080093f4 	.word	0x080093f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4618      	mov	r0, r3
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	4a85      	ldr	r2, [pc, #532]	; (8005ae0 <UART_SetConfig+0x530>)
 80058ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	f7fa fd5c 	bl	8000390 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	020b      	lsls	r3, r1, #8
 80058ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ee:	0202      	lsls	r2, r0, #8
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	6849      	ldr	r1, [r1, #4]
 80058f4:	0849      	lsrs	r1, r1, #1
 80058f6:	4608      	mov	r0, r1
 80058f8:	f04f 0100 	mov.w	r1, #0
 80058fc:	1814      	adds	r4, r2, r0
 80058fe:	eb43 0501 	adc.w	r5, r3, r1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	461a      	mov	r2, r3
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	4620      	mov	r0, r4
 800590e:	4629      	mov	r1, r5
 8005910:	f7fa fd3e 	bl	8000390 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4613      	mov	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005922:	d308      	bcc.n	8005936 <UART_SetConfig+0x386>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592a:	d204      	bcs.n	8005936 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e0c0      	b.n	8005ab8 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	76bb      	strb	r3, [r7, #26]
 800593a:	e0bd      	b.n	8005ab8 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005944:	d164      	bne.n	8005a10 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005946:	7efb      	ldrb	r3, [r7, #27]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d828      	bhi.n	800599e <UART_SetConfig+0x3ee>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0x3a4>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005979 	.word	0x08005979
 8005958:	08005981 	.word	0x08005981
 800595c:	08005989 	.word	0x08005989
 8005960:	0800599f 	.word	0x0800599f
 8005964:	0800598f 	.word	0x0800598f
 8005968:	0800599f 	.word	0x0800599f
 800596c:	0800599f 	.word	0x0800599f
 8005970:	0800599f 	.word	0x0800599f
 8005974:	08005997 	.word	0x08005997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fe ff4a 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 800597c:	6178      	str	r0, [r7, #20]
        break;
 800597e:	e013      	b.n	80059a8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005980:	f7fe ff5c 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8005984:	6178      	str	r0, [r7, #20]
        break;
 8005986:	e00f      	b.n	80059a8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005988:	4b56      	ldr	r3, [pc, #344]	; (8005ae4 <UART_SetConfig+0x534>)
 800598a:	617b      	str	r3, [r7, #20]
        break;
 800598c:	e00c      	b.n	80059a8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598e:	f7fe fed1 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005992:	6178      	str	r0, [r7, #20]
        break;
 8005994:	e008      	b.n	80059a8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599a:	617b      	str	r3, [r7, #20]
        break;
 800599c:	e004      	b.n	80059a8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	76bb      	strb	r3, [r7, #26]
        break;
 80059a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8084 	beq.w	8005ab8 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	4a4a      	ldr	r2, [pc, #296]	; (8005ae0 <UART_SetConfig+0x530>)
 80059b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ba:	461a      	mov	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c2:	005a      	lsls	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b0f      	cmp	r3, #15
 80059da:	d916      	bls.n	8005a0a <UART_SetConfig+0x45a>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e2:	d212      	bcs.n	8005a0a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f023 030f 	bic.w	r3, r3, #15
 80059ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	89fb      	ldrh	r3, [r7, #14]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	89fa      	ldrh	r2, [r7, #14]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e056      	b.n	8005ab8 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	76bb      	strb	r3, [r7, #26]
 8005a0e:	e053      	b.n	8005ab8 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a10:	7efb      	ldrb	r3, [r7, #27]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d827      	bhi.n	8005a66 <UART_SetConfig+0x4b6>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0x46c>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a49 	.word	0x08005a49
 8005a24:	08005a51 	.word	0x08005a51
 8005a28:	08005a67 	.word	0x08005a67
 8005a2c:	08005a57 	.word	0x08005a57
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a67 	.word	0x08005a67
 8005a38:	08005a67 	.word	0x08005a67
 8005a3c:	08005a5f 	.word	0x08005a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7fe fee6 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005a44:	6178      	str	r0, [r7, #20]
        break;
 8005a46:	e013      	b.n	8005a70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a48:	f7fe fef8 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8005a4c:	6178      	str	r0, [r7, #20]
        break;
 8005a4e:	e00f      	b.n	8005a70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <UART_SetConfig+0x534>)
 8005a52:	617b      	str	r3, [r7, #20]
        break;
 8005a54:	e00c      	b.n	8005a70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a56:	f7fe fe6d 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005a5a:	6178      	str	r0, [r7, #20]
        break;
 8005a5c:	e008      	b.n	8005a70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	617b      	str	r3, [r7, #20]
        break;
 8005a64:	e004      	b.n	8005a70 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	76bb      	strb	r3, [r7, #26]
        break;
 8005a6e:	bf00      	nop
    }

    if (pclk != 0U)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d020      	beq.n	8005ab8 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <UART_SetConfig+0x530>)
 8005a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a80:	461a      	mov	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	441a      	add	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b0f      	cmp	r3, #15
 8005a9e:	d909      	bls.n	8005ab4 <UART_SetConfig+0x504>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa6:	d205      	bcs.n	8005ab4 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	e001      	b.n	8005ab8 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ad4:	7ebb      	ldrb	r3, [r7, #26]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	080093f4 	.word	0x080093f4
 8005ae4:	00f42400 	.word	0x00f42400

08005ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be6:	d10a      	bne.n	8005bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b098      	sub	sp, #96	; 0x60
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c3c:	f7fc ff8c 	bl	8002b58 <HAL_GetTick>
 8005c40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d12f      	bne.n	8005cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f88e 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d022      	beq.n	8005cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e6      	bne.n	8005c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e063      	b.n	8005d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d149      	bne.n	8005d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f857 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d03c      	beq.n	8005d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e6      	bne.n	8005cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d2a:	61fa      	str	r2, [r7, #28]
 8005d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	69b9      	ldr	r1, [r7, #24]
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	617b      	str	r3, [r7, #20]
   return(result);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e012      	b.n	8005d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3758      	adds	r7, #88	; 0x58
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	e04f      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d04b      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fc fedd 	bl	8002b58 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e04e      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d037      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d034      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d031      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d110      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2208      	movs	r2, #8
 8005de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f95b 	bl	80060a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2208      	movs	r2, #8
 8005dee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e029      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0c:	d111      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f941 	bl	80060a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e00f      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	bf0c      	ite	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	2300      	movne	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d0a0      	beq.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b0a3      	sub	sp, #140	; 0x8c
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d10e      	bne.n	8005eae <UART_Start_Receive_IT+0x52>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <UART_Start_Receive_IT+0x48>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ea2:	e02d      	b.n	8005f00 <UART_Start_Receive_IT+0xa4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	22ff      	movs	r2, #255	; 0xff
 8005ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005eac:	e028      	b.n	8005f00 <UART_Start_Receive_IT+0xa4>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <UART_Start_Receive_IT+0x76>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <UART_Start_Receive_IT+0x6c>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ec6:	e01b      	b.n	8005f00 <UART_Start_Receive_IT+0xa4>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	227f      	movs	r2, #127	; 0x7f
 8005ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ed0:	e016      	b.n	8005f00 <UART_Start_Receive_IT+0xa4>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eda:	d10d      	bne.n	8005ef8 <UART_Start_Receive_IT+0x9c>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <UART_Start_Receive_IT+0x92>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	227f      	movs	r2, #127	; 0x7f
 8005ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005eec:	e008      	b.n	8005f00 <UART_Start_Receive_IT+0xa4>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	223f      	movs	r2, #63	; 0x3f
 8005ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ef6:	e003      	b.n	8005f00 <UART_Start_Receive_IT+0xa4>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2222      	movs	r2, #34	; 0x22
 8005f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005f34:	673a      	str	r2, [r7, #112]	; 0x70
 8005f36:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005f3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f50:	d14f      	bne.n	8005ff2 <UART_Start_Receive_IT+0x196>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d349      	bcc.n	8005ff2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	d107      	bne.n	8005f78 <UART_Start_Receive_IT+0x11c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a47      	ldr	r2, [pc, #284]	; (8006090 <UART_Start_Receive_IT+0x234>)
 8005f74:	675a      	str	r2, [r3, #116]	; 0x74
 8005f76:	e002      	b.n	8005f7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	; (8006094 <UART_Start_Receive_IT+0x238>)
 8005f7c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01a      	beq.n	8005fbc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005faa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e4      	bne.n	8005f86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e5      	bne.n	8005fbc <UART_Start_Receive_IT+0x160>
 8005ff0:	e046      	b.n	8006080 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d107      	bne.n	800600c <UART_Start_Receive_IT+0x1b0>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a24      	ldr	r2, [pc, #144]	; (8006098 <UART_Start_Receive_IT+0x23c>)
 8006008:	675a      	str	r2, [r3, #116]	; 0x74
 800600a:	e002      	b.n	8006012 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a23      	ldr	r2, [pc, #140]	; (800609c <UART_Start_Receive_IT+0x240>)
 8006010:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d019      	beq.n	800604e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800602e:	677b      	str	r3, [r7, #116]	; 0x74
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800603e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e6      	bne.n	800601a <UART_Start_Receive_IT+0x1be>
 800604c:	e018      	b.n	8006080 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	613b      	str	r3, [r7, #16]
   return(result);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f043 0320 	orr.w	r3, r3, #32
 8006062:	67bb      	str	r3, [r7, #120]	; 0x78
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	69f9      	ldr	r1, [r7, #28]
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	61bb      	str	r3, [r7, #24]
   return(result);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e6      	bne.n	800604e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	378c      	adds	r7, #140	; 0x8c
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	080068c1 	.word	0x080068c1
 8006094:	08006561 	.word	0x08006561
 8006098:	080063a9 	.word	0x080063a9
 800609c:	080061f1 	.word	0x080061f1

080060a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b095      	sub	sp, #84	; 0x54
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c6:	643b      	str	r3, [r7, #64]	; 0x40
 80060c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e6      	bne.n	80060a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e3      	bne.n	80060da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d118      	bne.n	800614c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	60bb      	str	r3, [r7, #8]
   return(result);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0310 	bic.w	r3, r3, #16
 800612e:	647b      	str	r3, [r7, #68]	; 0x44
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	613b      	str	r3, [r7, #16]
   return(result);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e6      	bne.n	800611a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006160:	bf00      	nop
 8006162:	3754      	adds	r7, #84	; 0x54
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff f9fa 	bl	8005584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6979      	ldr	r1, [r7, #20]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e6      	bne.n	80061a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff f9c5 	bl	8005570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061e6:	bf00      	nop
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b09c      	sub	sp, #112	; 0x70
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	2b22      	cmp	r3, #34	; 0x22
 800620a:	f040 80be 	bne.w	800638a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006218:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800621c:	b2d9      	uxtb	r1, r3
 800621e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006222:	b2da      	uxtb	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006228:	400a      	ands	r2, r1
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 80a1 	bne.w	800639a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800626c:	66bb      	str	r3, [r7, #104]	; 0x68
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006276:	65bb      	str	r3, [r7, #88]	; 0x58
 8006278:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800627c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e6      	bne.n	8006258 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	f023 0301 	bic.w	r3, r3, #1
 80062a0:	667b      	str	r3, [r7, #100]	; 0x64
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062aa:	647a      	str	r2, [r7, #68]	; 0x44
 80062ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e5      	bne.n	800628a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a33      	ldr	r2, [pc, #204]	; (80063a4 <UART_RxISR_8BIT+0x1b4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01f      	beq.n	800631c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	623b      	str	r3, [r7, #32]
   return(result);
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	633b      	str	r3, [r7, #48]	; 0x30
 800630a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d12e      	bne.n	8006382 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60fb      	str	r3, [r7, #12]
   return(result);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0310 	bic.w	r3, r3, #16
 800633e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	617b      	str	r3, [r7, #20]
   return(result);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e6      	bne.n	800632a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d103      	bne.n	8006372 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2210      	movs	r2, #16
 8006370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff f90c 	bl	8005598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006380:	e00b      	b.n	800639a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fc f90a 	bl	800259c <HAL_UART_RxCpltCallback>
}
 8006388:	e007      	b.n	800639a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0208 	orr.w	r2, r2, #8
 8006398:	619a      	str	r2, [r3, #24]
}
 800639a:	bf00      	nop
 800639c:	3770      	adds	r7, #112	; 0x70
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40008000 	.word	0x40008000

080063a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b09c      	sub	sp, #112	; 0x70
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80063b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c0:	2b22      	cmp	r3, #34	; 0x22
 80063c2:	f040 80be 	bne.w	8006542 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80063d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80063da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80063de:	4013      	ands	r3, r2
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 80a1 	bne.w	8006552 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800641e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006424:	667b      	str	r3, [r7, #100]	; 0x64
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642e:	657b      	str	r3, [r7, #84]	; 0x54
 8006430:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3308      	adds	r3, #8
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	663b      	str	r3, [r7, #96]	; 0x60
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006462:	643a      	str	r2, [r7, #64]	; 0x40
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e5      	bne.n	8006442 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a33      	ldr	r2, [pc, #204]	; (800655c <UART_RxISR_16BIT+0x1b4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d01f      	beq.n	80064d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d018      	beq.n	80064d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e6      	bne.n	80064a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d12e      	bne.n	800653a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e6      	bne.n	80064e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b10      	cmp	r3, #16
 8006520:	d103      	bne.n	800652a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2210      	movs	r2, #16
 8006528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff f830 	bl	8005598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006538:	e00b      	b.n	8006552 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fc f82e 	bl	800259c <HAL_UART_RxCpltCallback>
}
 8006540:	e007      	b.n	8006552 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0208 	orr.w	r2, r2, #8
 8006550:	619a      	str	r2, [r3, #24]
}
 8006552:	bf00      	nop
 8006554:	3770      	adds	r7, #112	; 0x70
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	40008000 	.word	0x40008000

08006560 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b0ac      	sub	sp, #176	; 0xb0
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800656e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006596:	2b22      	cmp	r3, #34	; 0x22
 8006598:	f040 8182 	bne.w	80068a0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065a6:	e125      	b.n	80067f4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80065b6:	b2d9      	uxtb	r1, r3
 80065b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	400a      	ands	r2, r1
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80065ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d053      	beq.n	80066a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d011      	beq.n	800662a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2201      	movs	r2, #1
 8006618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006620:	f043 0201 	orr.w	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800662a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d011      	beq.n	800665a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2202      	movs	r2, #2
 8006648:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006650:	f043 0204 	orr.w	r2, r3, #4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800665a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d011      	beq.n	800668a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2204      	movs	r2, #4
 8006678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006680:	f043 0202 	orr.w	r2, r3, #2
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fe ff75 	bl	8005584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 80a2 	bne.w	80067f4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80066be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066d4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80066d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80066e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e4      	bne.n	80066b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3308      	adds	r3, #8
 80066ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80066f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800670e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006710:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006714:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800671c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e1      	bne.n	80066e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a5f      	ldr	r2, [pc, #380]	; (80068b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d021      	beq.n	8006784 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01a      	beq.n	8006784 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800675c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006770:	657b      	str	r3, [r7, #84]	; 0x54
 8006772:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006776:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e4      	bne.n	800674e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d130      	bne.n	80067ee <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	f023 0310 	bic.w	r3, r3, #16
 80067a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067b4:	643b      	str	r3, [r7, #64]	; 0x40
 80067b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e4      	bne.n	8006792 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b10      	cmp	r3, #16
 80067d4:	d103      	bne.n	80067de <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2210      	movs	r2, #16
 80067dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fe fed6 	bl	8005598 <HAL_UARTEx_RxEventCallback>
 80067ec:	e002      	b.n	80067f4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fb fed4 	bl	800259c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80067fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	f47f aecf 	bne.w	80065a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006810:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006814:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006818:	2b00      	cmp	r3, #0
 800681a:	d049      	beq.n	80068b0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006822:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006826:	429a      	cmp	r2, r3
 8006828:	d242      	bcs.n	80068b0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	61fb      	str	r3, [r7, #28]
   return(result);
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800684e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e3      	bne.n	800682a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a15      	ldr	r2, [pc, #84]	; (80068bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006866:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	60bb      	str	r3, [r7, #8]
   return(result);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f043 0320 	orr.w	r3, r3, #32
 800687c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	613b      	str	r3, [r7, #16]
   return(result);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e4      	bne.n	8006868 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800689e:	e007      	b.n	80068b0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0208 	orr.w	r2, r2, #8
 80068ae:	619a      	str	r2, [r3, #24]
}
 80068b0:	bf00      	nop
 80068b2:	37b0      	adds	r7, #176	; 0xb0
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40008000 	.word	0x40008000
 80068bc:	080061f1 	.word	0x080061f1

080068c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b0ae      	sub	sp, #184	; 0xb8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f6:	2b22      	cmp	r3, #34	; 0x22
 80068f8:	f040 8186 	bne.w	8006c08 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006902:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006906:	e129      	b.n	8006b5c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800691a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800691e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006922:	4013      	ands	r3, r2
 8006924:	b29a      	uxth	r2, r3
 8006926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800692a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006930:	1c9a      	adds	r2, r3, #2
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d053      	beq.n	8006a06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800695e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <UART_RxISR_16BIT_FIFOEN+0xce>
 800696a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006984:	f043 0201 	orr.w	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800698e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d011      	beq.n	80069be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800699a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2202      	movs	r2, #2
 80069ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b4:	f043 0204 	orr.w	r2, r3, #4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d011      	beq.n	80069ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80069ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2204      	movs	r2, #4
 80069dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e4:	f043 0202 	orr.w	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fe fdc3 	bl	8005584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 80a4 	bne.w	8006b5c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a3a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e2      	bne.n	8006a14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e1      	bne.n	8006a4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a5f      	ldr	r2, [pc, #380]	; (8006c20 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d021      	beq.n	8006aec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01a      	beq.n	8006aec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ada:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e4      	bne.n	8006ab6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d130      	bne.n	8006b56 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f023 0310 	bic.w	r3, r3, #16
 8006b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e4      	bne.n	8006afa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d103      	bne.n	8006b46 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe fd22 	bl	8005598 <HAL_UARTEx_RxEventCallback>
 8006b54:	e002      	b.n	8006b5c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb fd20 	bl	800259c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f aecb 	bne.w	8006908 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b78:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d049      	beq.n	8006c18 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b8a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d242      	bcs.n	8006c18 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e3      	bne.n	8006b92 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006bce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f043 0320 	orr.w	r3, r3, #32
 8006be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e4      	bne.n	8006bd0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c06:	e007      	b.n	8006c18 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0208 	orr.w	r2, r2, #8
 8006c16:	619a      	str	r2, [r3, #24]
}
 8006c18:	bf00      	nop
 8006c1a:	37b8      	adds	r7, #184	; 0xb8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40008000 	.word	0x40008000
 8006c24:	080063a9 	.word	0x080063a9

08006c28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UARTEx_DisableFifoMode+0x16>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e027      	b.n	8006cca <HAL_UARTEx_DisableFifoMode+0x66>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ca8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e02d      	b.n	8006d4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	; 0x24
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0201 	bic.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f850 	bl	8006dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e02d      	b.n	8006dc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2224      	movs	r2, #36	; 0x24
 8006d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f812 	bl	8006dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d108      	bne.n	8006df2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006df0:	e031      	b.n	8006e56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006df2:	2308      	movs	r3, #8
 8006df4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006df6:	2308      	movs	r3, #8
 8006df8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	0e5b      	lsrs	r3, r3, #25
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	0f5b      	lsrs	r3, r3, #29
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	7b3a      	ldrb	r2, [r7, #12]
 8006e1e:	4911      	ldr	r1, [pc, #68]	; (8006e64 <UARTEx_SetNbDataToProcess+0x94>)
 8006e20:	5c8a      	ldrb	r2, [r1, r2]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e26:	7b3a      	ldrb	r2, [r7, #12]
 8006e28:	490f      	ldr	r1, [pc, #60]	; (8006e68 <UARTEx_SetNbDataToProcess+0x98>)
 8006e2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	7b7a      	ldrb	r2, [r7, #13]
 8006e3c:	4909      	ldr	r1, [pc, #36]	; (8006e64 <UARTEx_SetNbDataToProcess+0x94>)
 8006e3e:	5c8a      	ldrb	r2, [r1, r2]
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e44:	7b7a      	ldrb	r2, [r7, #13]
 8006e46:	4908      	ldr	r1, [pc, #32]	; (8006e68 <UARTEx_SetNbDataToProcess+0x98>)
 8006e48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	0800940c 	.word	0x0800940c
 8006e68:	08009414 	.word	0x08009414

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200009cc 	.word	0x200009cc

08006e78 <__libc_init_array>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4d0d      	ldr	r5, [pc, #52]	; (8006eb0 <__libc_init_array+0x38>)
 8006e7c:	4c0d      	ldr	r4, [pc, #52]	; (8006eb4 <__libc_init_array+0x3c>)
 8006e7e:	1b64      	subs	r4, r4, r5
 8006e80:	10a4      	asrs	r4, r4, #2
 8006e82:	2600      	movs	r6, #0
 8006e84:	42a6      	cmp	r6, r4
 8006e86:	d109      	bne.n	8006e9c <__libc_init_array+0x24>
 8006e88:	4d0b      	ldr	r5, [pc, #44]	; (8006eb8 <__libc_init_array+0x40>)
 8006e8a:	4c0c      	ldr	r4, [pc, #48]	; (8006ebc <__libc_init_array+0x44>)
 8006e8c:	f001 f95c 	bl	8008148 <_init>
 8006e90:	1b64      	subs	r4, r4, r5
 8006e92:	10a4      	asrs	r4, r4, #2
 8006e94:	2600      	movs	r6, #0
 8006e96:	42a6      	cmp	r6, r4
 8006e98:	d105      	bne.n	8006ea6 <__libc_init_array+0x2e>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea0:	4798      	blx	r3
 8006ea2:	3601      	adds	r6, #1
 8006ea4:	e7ee      	b.n	8006e84 <__libc_init_array+0xc>
 8006ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eaa:	4798      	blx	r3
 8006eac:	3601      	adds	r6, #1
 8006eae:	e7f2      	b.n	8006e96 <__libc_init_array+0x1e>
 8006eb0:	08009570 	.word	0x08009570
 8006eb4:	08009570 	.word	0x08009570
 8006eb8:	08009570 	.word	0x08009570
 8006ebc:	08009574 	.word	0x08009574

08006ec0 <memset>:
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d100      	bne.n	8006eca <memset+0xa>
 8006ec8:	4770      	bx	lr
 8006eca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ece:	e7f9      	b.n	8006ec4 <memset+0x4>

08006ed0 <iprintf>:
 8006ed0:	b40f      	push	{r0, r1, r2, r3}
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <iprintf+0x2c>)
 8006ed4:	b513      	push	{r0, r1, r4, lr}
 8006ed6:	681c      	ldr	r4, [r3, #0]
 8006ed8:	b124      	cbz	r4, 8006ee4 <iprintf+0x14>
 8006eda:	69a3      	ldr	r3, [r4, #24]
 8006edc:	b913      	cbnz	r3, 8006ee4 <iprintf+0x14>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fb20 	bl	8007524 <__sinit>
 8006ee4:	ab05      	add	r3, sp, #20
 8006ee6:	9a04      	ldr	r2, [sp, #16]
 8006ee8:	68a1      	ldr	r1, [r4, #8]
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fd0b 	bl	8007908 <_vfiprintf_r>
 8006ef2:	b002      	add	sp, #8
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	b004      	add	sp, #16
 8006efa:	4770      	bx	lr
 8006efc:	200009cc 	.word	0x200009cc

08006f00 <putchar>:
 8006f00:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <putchar+0x28>)
 8006f02:	b513      	push	{r0, r1, r4, lr}
 8006f04:	681c      	ldr	r4, [r3, #0]
 8006f06:	4601      	mov	r1, r0
 8006f08:	b134      	cbz	r4, 8006f18 <putchar+0x18>
 8006f0a:	69a3      	ldr	r3, [r4, #24]
 8006f0c:	b923      	cbnz	r3, 8006f18 <putchar+0x18>
 8006f0e:	9001      	str	r0, [sp, #4]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fb07 	bl	8007524 <__sinit>
 8006f16:	9901      	ldr	r1, [sp, #4]
 8006f18:	68a2      	ldr	r2, [r4, #8]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	b002      	add	sp, #8
 8006f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f22:	f000 bfb5 	b.w	8007e90 <_putc_r>
 8006f26:	bf00      	nop
 8006f28:	200009cc 	.word	0x200009cc

08006f2c <_puts_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	460e      	mov	r6, r1
 8006f30:	4605      	mov	r5, r0
 8006f32:	b118      	cbz	r0, 8006f3c <_puts_r+0x10>
 8006f34:	6983      	ldr	r3, [r0, #24]
 8006f36:	b90b      	cbnz	r3, 8006f3c <_puts_r+0x10>
 8006f38:	f000 faf4 	bl	8007524 <__sinit>
 8006f3c:	69ab      	ldr	r3, [r5, #24]
 8006f3e:	68ac      	ldr	r4, [r5, #8]
 8006f40:	b913      	cbnz	r3, 8006f48 <_puts_r+0x1c>
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 faee 	bl	8007524 <__sinit>
 8006f48:	4b2c      	ldr	r3, [pc, #176]	; (8006ffc <_puts_r+0xd0>)
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	d120      	bne.n	8006f90 <_puts_r+0x64>
 8006f4e:	686c      	ldr	r4, [r5, #4]
 8006f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f52:	07db      	lsls	r3, r3, #31
 8006f54:	d405      	bmi.n	8006f62 <_puts_r+0x36>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	0598      	lsls	r0, r3, #22
 8006f5a:	d402      	bmi.n	8006f62 <_puts_r+0x36>
 8006f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f5e:	f000 fb91 	bl	8007684 <__retarget_lock_acquire_recursive>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	0719      	lsls	r1, r3, #28
 8006f66:	d51d      	bpl.n	8006fa4 <_puts_r+0x78>
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	b1db      	cbz	r3, 8006fa4 <_puts_r+0x78>
 8006f6c:	3e01      	subs	r6, #1
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f74:	3b01      	subs	r3, #1
 8006f76:	60a3      	str	r3, [r4, #8]
 8006f78:	bb39      	cbnz	r1, 8006fca <_puts_r+0x9e>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da38      	bge.n	8006ff0 <_puts_r+0xc4>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	210a      	movs	r1, #10
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f8d6 	bl	8007134 <__swbuf_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d011      	beq.n	8006fb0 <_puts_r+0x84>
 8006f8c:	250a      	movs	r5, #10
 8006f8e:	e011      	b.n	8006fb4 <_puts_r+0x88>
 8006f90:	4b1b      	ldr	r3, [pc, #108]	; (8007000 <_puts_r+0xd4>)
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d101      	bne.n	8006f9a <_puts_r+0x6e>
 8006f96:	68ac      	ldr	r4, [r5, #8]
 8006f98:	e7da      	b.n	8006f50 <_puts_r+0x24>
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	; (8007004 <_puts_r+0xd8>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	bf08      	it	eq
 8006fa0:	68ec      	ldreq	r4, [r5, #12]
 8006fa2:	e7d5      	b.n	8006f50 <_puts_r+0x24>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 f916 	bl	80071d8 <__swsetup_r>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d0dd      	beq.n	8006f6c <_puts_r+0x40>
 8006fb0:	f04f 35ff 	mov.w	r5, #4294967295
 8006fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb6:	07da      	lsls	r2, r3, #31
 8006fb8:	d405      	bmi.n	8006fc6 <_puts_r+0x9a>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	059b      	lsls	r3, r3, #22
 8006fbe:	d402      	bmi.n	8006fc6 <_puts_r+0x9a>
 8006fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc2:	f000 fb60 	bl	8007686 <__retarget_lock_release_recursive>
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da04      	bge.n	8006fd8 <_puts_r+0xac>
 8006fce:	69a2      	ldr	r2, [r4, #24]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	dc06      	bgt.n	8006fe2 <_puts_r+0xb6>
 8006fd4:	290a      	cmp	r1, #10
 8006fd6:	d004      	beq.n	8006fe2 <_puts_r+0xb6>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	6022      	str	r2, [r4, #0]
 8006fde:	7019      	strb	r1, [r3, #0]
 8006fe0:	e7c5      	b.n	8006f6e <_puts_r+0x42>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 f8a5 	bl	8007134 <__swbuf_r>
 8006fea:	3001      	adds	r0, #1
 8006fec:	d1bf      	bne.n	8006f6e <_puts_r+0x42>
 8006fee:	e7df      	b.n	8006fb0 <_puts_r+0x84>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	250a      	movs	r5, #10
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	6022      	str	r2, [r4, #0]
 8006ff8:	701d      	strb	r5, [r3, #0]
 8006ffa:	e7db      	b.n	8006fb4 <_puts_r+0x88>
 8006ffc:	080094f4 	.word	0x080094f4
 8007000:	08009514 	.word	0x08009514
 8007004:	080094d4 	.word	0x080094d4

08007008 <puts>:
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <puts+0xc>)
 800700a:	4601      	mov	r1, r0
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f7ff bf8d 	b.w	8006f2c <_puts_r>
 8007012:	bf00      	nop
 8007014:	200009cc 	.word	0x200009cc

08007018 <strcpy>:
 8007018:	4603      	mov	r3, r0
 800701a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800701e:	f803 2b01 	strb.w	r2, [r3], #1
 8007022:	2a00      	cmp	r2, #0
 8007024:	d1f9      	bne.n	800701a <strcpy+0x2>
 8007026:	4770      	bx	lr

08007028 <strncpy>:
 8007028:	b510      	push	{r4, lr}
 800702a:	3901      	subs	r1, #1
 800702c:	4603      	mov	r3, r0
 800702e:	b132      	cbz	r2, 800703e <strncpy+0x16>
 8007030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007034:	f803 4b01 	strb.w	r4, [r3], #1
 8007038:	3a01      	subs	r2, #1
 800703a:	2c00      	cmp	r4, #0
 800703c:	d1f7      	bne.n	800702e <strncpy+0x6>
 800703e:	441a      	add	r2, r3
 8007040:	2100      	movs	r1, #0
 8007042:	4293      	cmp	r3, r2
 8007044:	d100      	bne.n	8007048 <strncpy+0x20>
 8007046:	bd10      	pop	{r4, pc}
 8007048:	f803 1b01 	strb.w	r1, [r3], #1
 800704c:	e7f9      	b.n	8007042 <strncpy+0x1a>

0800704e <strstr>:
 800704e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007050:	780c      	ldrb	r4, [r1, #0]
 8007052:	b164      	cbz	r4, 800706e <strstr+0x20>
 8007054:	4603      	mov	r3, r0
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	1c5e      	adds	r6, r3, #1
 800705c:	b90a      	cbnz	r2, 8007062 <strstr+0x14>
 800705e:	4610      	mov	r0, r2
 8007060:	e005      	b.n	800706e <strstr+0x20>
 8007062:	4294      	cmp	r4, r2
 8007064:	d108      	bne.n	8007078 <strstr+0x2a>
 8007066:	460d      	mov	r5, r1
 8007068:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800706c:	b902      	cbnz	r2, 8007070 <strstr+0x22>
 800706e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007070:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007074:	4297      	cmp	r7, r2
 8007076:	d0f7      	beq.n	8007068 <strstr+0x1a>
 8007078:	4633      	mov	r3, r6
 800707a:	e7ec      	b.n	8007056 <strstr+0x8>

0800707c <strtok>:
 800707c:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <strtok+0x5c>)
 800707e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007080:	681e      	ldr	r6, [r3, #0]
 8007082:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007084:	4605      	mov	r5, r0
 8007086:	b9fc      	cbnz	r4, 80070c8 <strtok+0x4c>
 8007088:	2050      	movs	r0, #80	; 0x50
 800708a:	9101      	str	r1, [sp, #4]
 800708c:	f000 fb60 	bl	8007750 <malloc>
 8007090:	9901      	ldr	r1, [sp, #4]
 8007092:	65b0      	str	r0, [r6, #88]	; 0x58
 8007094:	4602      	mov	r2, r0
 8007096:	b920      	cbnz	r0, 80070a2 <strtok+0x26>
 8007098:	4b10      	ldr	r3, [pc, #64]	; (80070dc <strtok+0x60>)
 800709a:	4811      	ldr	r0, [pc, #68]	; (80070e0 <strtok+0x64>)
 800709c:	2157      	movs	r1, #87	; 0x57
 800709e:	f000 f909 	bl	80072b4 <__assert_func>
 80070a2:	e9c0 4400 	strd	r4, r4, [r0]
 80070a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80070aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80070ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80070b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80070b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80070ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80070be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80070c2:	6184      	str	r4, [r0, #24]
 80070c4:	7704      	strb	r4, [r0, #28]
 80070c6:	6244      	str	r4, [r0, #36]	; 0x24
 80070c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80070ca:	2301      	movs	r3, #1
 80070cc:	4628      	mov	r0, r5
 80070ce:	b002      	add	sp, #8
 80070d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070d4:	f000 b806 	b.w	80070e4 <__strtok_r>
 80070d8:	200009cc 	.word	0x200009cc
 80070dc:	08009420 	.word	0x08009420
 80070e0:	08009437 	.word	0x08009437

080070e4 <__strtok_r>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	b908      	cbnz	r0, 80070ec <__strtok_r+0x8>
 80070e8:	6810      	ldr	r0, [r2, #0]
 80070ea:	b188      	cbz	r0, 8007110 <__strtok_r+0x2c>
 80070ec:	4604      	mov	r4, r0
 80070ee:	4620      	mov	r0, r4
 80070f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80070f4:	460f      	mov	r7, r1
 80070f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80070fa:	b91e      	cbnz	r6, 8007104 <__strtok_r+0x20>
 80070fc:	b965      	cbnz	r5, 8007118 <__strtok_r+0x34>
 80070fe:	6015      	str	r5, [r2, #0]
 8007100:	4628      	mov	r0, r5
 8007102:	e005      	b.n	8007110 <__strtok_r+0x2c>
 8007104:	42b5      	cmp	r5, r6
 8007106:	d1f6      	bne.n	80070f6 <__strtok_r+0x12>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1f0      	bne.n	80070ee <__strtok_r+0xa>
 800710c:	6014      	str	r4, [r2, #0]
 800710e:	7003      	strb	r3, [r0, #0]
 8007110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007112:	461c      	mov	r4, r3
 8007114:	e00c      	b.n	8007130 <__strtok_r+0x4c>
 8007116:	b915      	cbnz	r5, 800711e <__strtok_r+0x3a>
 8007118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800711c:	460e      	mov	r6, r1
 800711e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007122:	42ab      	cmp	r3, r5
 8007124:	d1f7      	bne.n	8007116 <__strtok_r+0x32>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f3      	beq.n	8007112 <__strtok_r+0x2e>
 800712a:	2300      	movs	r3, #0
 800712c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007130:	6014      	str	r4, [r2, #0]
 8007132:	e7ed      	b.n	8007110 <__strtok_r+0x2c>

08007134 <__swbuf_r>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	460e      	mov	r6, r1
 8007138:	4614      	mov	r4, r2
 800713a:	4605      	mov	r5, r0
 800713c:	b118      	cbz	r0, 8007146 <__swbuf_r+0x12>
 800713e:	6983      	ldr	r3, [r0, #24]
 8007140:	b90b      	cbnz	r3, 8007146 <__swbuf_r+0x12>
 8007142:	f000 f9ef 	bl	8007524 <__sinit>
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <__swbuf_r+0x98>)
 8007148:	429c      	cmp	r4, r3
 800714a:	d12b      	bne.n	80071a4 <__swbuf_r+0x70>
 800714c:	686c      	ldr	r4, [r5, #4]
 800714e:	69a3      	ldr	r3, [r4, #24]
 8007150:	60a3      	str	r3, [r4, #8]
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	071a      	lsls	r2, r3, #28
 8007156:	d52f      	bpl.n	80071b8 <__swbuf_r+0x84>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	b36b      	cbz	r3, 80071b8 <__swbuf_r+0x84>
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	1ac0      	subs	r0, r0, r3
 8007162:	6963      	ldr	r3, [r4, #20]
 8007164:	b2f6      	uxtb	r6, r6
 8007166:	4283      	cmp	r3, r0
 8007168:	4637      	mov	r7, r6
 800716a:	dc04      	bgt.n	8007176 <__swbuf_r+0x42>
 800716c:	4621      	mov	r1, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f944 	bl	80073fc <_fflush_r>
 8007174:	bb30      	cbnz	r0, 80071c4 <__swbuf_r+0x90>
 8007176:	68a3      	ldr	r3, [r4, #8]
 8007178:	3b01      	subs	r3, #1
 800717a:	60a3      	str	r3, [r4, #8]
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	6022      	str	r2, [r4, #0]
 8007182:	701e      	strb	r6, [r3, #0]
 8007184:	6963      	ldr	r3, [r4, #20]
 8007186:	3001      	adds	r0, #1
 8007188:	4283      	cmp	r3, r0
 800718a:	d004      	beq.n	8007196 <__swbuf_r+0x62>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	07db      	lsls	r3, r3, #31
 8007190:	d506      	bpl.n	80071a0 <__swbuf_r+0x6c>
 8007192:	2e0a      	cmp	r6, #10
 8007194:	d104      	bne.n	80071a0 <__swbuf_r+0x6c>
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 f92f 	bl	80073fc <_fflush_r>
 800719e:	b988      	cbnz	r0, 80071c4 <__swbuf_r+0x90>
 80071a0:	4638      	mov	r0, r7
 80071a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a4:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <__swbuf_r+0x9c>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d101      	bne.n	80071ae <__swbuf_r+0x7a>
 80071aa:	68ac      	ldr	r4, [r5, #8]
 80071ac:	e7cf      	b.n	800714e <__swbuf_r+0x1a>
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <__swbuf_r+0xa0>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	bf08      	it	eq
 80071b4:	68ec      	ldreq	r4, [r5, #12]
 80071b6:	e7ca      	b.n	800714e <__swbuf_r+0x1a>
 80071b8:	4621      	mov	r1, r4
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f80c 	bl	80071d8 <__swsetup_r>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d0cb      	beq.n	800715c <__swbuf_r+0x28>
 80071c4:	f04f 37ff 	mov.w	r7, #4294967295
 80071c8:	e7ea      	b.n	80071a0 <__swbuf_r+0x6c>
 80071ca:	bf00      	nop
 80071cc:	080094f4 	.word	0x080094f4
 80071d0:	08009514 	.word	0x08009514
 80071d4:	080094d4 	.word	0x080094d4

080071d8 <__swsetup_r>:
 80071d8:	4b32      	ldr	r3, [pc, #200]	; (80072a4 <__swsetup_r+0xcc>)
 80071da:	b570      	push	{r4, r5, r6, lr}
 80071dc:	681d      	ldr	r5, [r3, #0]
 80071de:	4606      	mov	r6, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	b125      	cbz	r5, 80071ee <__swsetup_r+0x16>
 80071e4:	69ab      	ldr	r3, [r5, #24]
 80071e6:	b913      	cbnz	r3, 80071ee <__swsetup_r+0x16>
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 f99b 	bl	8007524 <__sinit>
 80071ee:	4b2e      	ldr	r3, [pc, #184]	; (80072a8 <__swsetup_r+0xd0>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d10f      	bne.n	8007214 <__swsetup_r+0x3c>
 80071f4:	686c      	ldr	r4, [r5, #4]
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fc:	0719      	lsls	r1, r3, #28
 80071fe:	d42c      	bmi.n	800725a <__swsetup_r+0x82>
 8007200:	06dd      	lsls	r5, r3, #27
 8007202:	d411      	bmi.n	8007228 <__swsetup_r+0x50>
 8007204:	2309      	movs	r3, #9
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295
 8007212:	e03e      	b.n	8007292 <__swsetup_r+0xba>
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <__swsetup_r+0xd4>)
 8007216:	429c      	cmp	r4, r3
 8007218:	d101      	bne.n	800721e <__swsetup_r+0x46>
 800721a:	68ac      	ldr	r4, [r5, #8]
 800721c:	e7eb      	b.n	80071f6 <__swsetup_r+0x1e>
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <__swsetup_r+0xd8>)
 8007220:	429c      	cmp	r4, r3
 8007222:	bf08      	it	eq
 8007224:	68ec      	ldreq	r4, [r5, #12]
 8007226:	e7e6      	b.n	80071f6 <__swsetup_r+0x1e>
 8007228:	0758      	lsls	r0, r3, #29
 800722a:	d512      	bpl.n	8007252 <__swsetup_r+0x7a>
 800722c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722e:	b141      	cbz	r1, 8007242 <__swsetup_r+0x6a>
 8007230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007234:	4299      	cmp	r1, r3
 8007236:	d002      	beq.n	800723e <__swsetup_r+0x66>
 8007238:	4630      	mov	r0, r6
 800723a:	f000 fa91 	bl	8007760 <_free_r>
 800723e:	2300      	movs	r3, #0
 8007240:	6363      	str	r3, [r4, #52]	; 0x34
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	2300      	movs	r3, #0
 800724c:	6063      	str	r3, [r4, #4]
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f043 0308 	orr.w	r3, r3, #8
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	b94b      	cbnz	r3, 8007272 <__swsetup_r+0x9a>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d003      	beq.n	8007272 <__swsetup_r+0x9a>
 800726a:	4621      	mov	r1, r4
 800726c:	4630      	mov	r0, r6
 800726e:	f000 fa2f 	bl	80076d0 <__smakebuf_r>
 8007272:	89a0      	ldrh	r0, [r4, #12]
 8007274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007278:	f010 0301 	ands.w	r3, r0, #1
 800727c:	d00a      	beq.n	8007294 <__swsetup_r+0xbc>
 800727e:	2300      	movs	r3, #0
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	6963      	ldr	r3, [r4, #20]
 8007284:	425b      	negs	r3, r3
 8007286:	61a3      	str	r3, [r4, #24]
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	b943      	cbnz	r3, 800729e <__swsetup_r+0xc6>
 800728c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007290:	d1ba      	bne.n	8007208 <__swsetup_r+0x30>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	0781      	lsls	r1, r0, #30
 8007296:	bf58      	it	pl
 8007298:	6963      	ldrpl	r3, [r4, #20]
 800729a:	60a3      	str	r3, [r4, #8]
 800729c:	e7f4      	b.n	8007288 <__swsetup_r+0xb0>
 800729e:	2000      	movs	r0, #0
 80072a0:	e7f7      	b.n	8007292 <__swsetup_r+0xba>
 80072a2:	bf00      	nop
 80072a4:	200009cc 	.word	0x200009cc
 80072a8:	080094f4 	.word	0x080094f4
 80072ac:	08009514 	.word	0x08009514
 80072b0:	080094d4 	.word	0x080094d4

080072b4 <__assert_func>:
 80072b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072b6:	4614      	mov	r4, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <__assert_func+0x2c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4605      	mov	r5, r0
 80072c0:	68d8      	ldr	r0, [r3, #12]
 80072c2:	b14c      	cbz	r4, 80072d8 <__assert_func+0x24>
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <__assert_func+0x30>)
 80072c6:	9100      	str	r1, [sp, #0]
 80072c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072cc:	4906      	ldr	r1, [pc, #24]	; (80072e8 <__assert_func+0x34>)
 80072ce:	462b      	mov	r3, r5
 80072d0:	f000 f9a6 	bl	8007620 <fiprintf>
 80072d4:	f000 fe8a 	bl	8007fec <abort>
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <__assert_func+0x38>)
 80072da:	461c      	mov	r4, r3
 80072dc:	e7f3      	b.n	80072c6 <__assert_func+0x12>
 80072de:	bf00      	nop
 80072e0:	200009cc 	.word	0x200009cc
 80072e4:	08009498 	.word	0x08009498
 80072e8:	080094a5 	.word	0x080094a5
 80072ec:	080094d3 	.word	0x080094d3

080072f0 <__sflush_r>:
 80072f0:	898a      	ldrh	r2, [r1, #12]
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	4605      	mov	r5, r0
 80072f8:	0710      	lsls	r0, r2, #28
 80072fa:	460c      	mov	r4, r1
 80072fc:	d458      	bmi.n	80073b0 <__sflush_r+0xc0>
 80072fe:	684b      	ldr	r3, [r1, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc05      	bgt.n	8007310 <__sflush_r+0x20>
 8007304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	dc02      	bgt.n	8007310 <__sflush_r+0x20>
 800730a:	2000      	movs	r0, #0
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007312:	2e00      	cmp	r6, #0
 8007314:	d0f9      	beq.n	800730a <__sflush_r+0x1a>
 8007316:	2300      	movs	r3, #0
 8007318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800731c:	682f      	ldr	r7, [r5, #0]
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	d032      	beq.n	8007388 <__sflush_r+0x98>
 8007322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	075a      	lsls	r2, r3, #29
 8007328:	d505      	bpl.n	8007336 <__sflush_r+0x46>
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	1ac0      	subs	r0, r0, r3
 800732e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007330:	b10b      	cbz	r3, 8007336 <__sflush_r+0x46>
 8007332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007334:	1ac0      	subs	r0, r0, r3
 8007336:	2300      	movs	r3, #0
 8007338:	4602      	mov	r2, r0
 800733a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800733c:	6a21      	ldr	r1, [r4, #32]
 800733e:	4628      	mov	r0, r5
 8007340:	47b0      	blx	r6
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	d106      	bne.n	8007356 <__sflush_r+0x66>
 8007348:	6829      	ldr	r1, [r5, #0]
 800734a:	291d      	cmp	r1, #29
 800734c:	d82c      	bhi.n	80073a8 <__sflush_r+0xb8>
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <__sflush_r+0x108>)
 8007350:	40ca      	lsrs	r2, r1
 8007352:	07d6      	lsls	r6, r2, #31
 8007354:	d528      	bpl.n	80073a8 <__sflush_r+0xb8>
 8007356:	2200      	movs	r2, #0
 8007358:	6062      	str	r2, [r4, #4]
 800735a:	04d9      	lsls	r1, r3, #19
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	d504      	bpl.n	800736c <__sflush_r+0x7c>
 8007362:	1c42      	adds	r2, r0, #1
 8007364:	d101      	bne.n	800736a <__sflush_r+0x7a>
 8007366:	682b      	ldr	r3, [r5, #0]
 8007368:	b903      	cbnz	r3, 800736c <__sflush_r+0x7c>
 800736a:	6560      	str	r0, [r4, #84]	; 0x54
 800736c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800736e:	602f      	str	r7, [r5, #0]
 8007370:	2900      	cmp	r1, #0
 8007372:	d0ca      	beq.n	800730a <__sflush_r+0x1a>
 8007374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <__sflush_r+0x92>
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f9ef 	bl	8007760 <_free_r>
 8007382:	2000      	movs	r0, #0
 8007384:	6360      	str	r0, [r4, #52]	; 0x34
 8007386:	e7c1      	b.n	800730c <__sflush_r+0x1c>
 8007388:	6a21      	ldr	r1, [r4, #32]
 800738a:	2301      	movs	r3, #1
 800738c:	4628      	mov	r0, r5
 800738e:	47b0      	blx	r6
 8007390:	1c41      	adds	r1, r0, #1
 8007392:	d1c7      	bne.n	8007324 <__sflush_r+0x34>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c4      	beq.n	8007324 <__sflush_r+0x34>
 800739a:	2b1d      	cmp	r3, #29
 800739c:	d001      	beq.n	80073a2 <__sflush_r+0xb2>
 800739e:	2b16      	cmp	r3, #22
 80073a0:	d101      	bne.n	80073a6 <__sflush_r+0xb6>
 80073a2:	602f      	str	r7, [r5, #0]
 80073a4:	e7b1      	b.n	800730a <__sflush_r+0x1a>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	e7ad      	b.n	800730c <__sflush_r+0x1c>
 80073b0:	690f      	ldr	r7, [r1, #16]
 80073b2:	2f00      	cmp	r7, #0
 80073b4:	d0a9      	beq.n	800730a <__sflush_r+0x1a>
 80073b6:	0793      	lsls	r3, r2, #30
 80073b8:	680e      	ldr	r6, [r1, #0]
 80073ba:	bf08      	it	eq
 80073bc:	694b      	ldreq	r3, [r1, #20]
 80073be:	600f      	str	r7, [r1, #0]
 80073c0:	bf18      	it	ne
 80073c2:	2300      	movne	r3, #0
 80073c4:	eba6 0807 	sub.w	r8, r6, r7
 80073c8:	608b      	str	r3, [r1, #8]
 80073ca:	f1b8 0f00 	cmp.w	r8, #0
 80073ce:	dd9c      	ble.n	800730a <__sflush_r+0x1a>
 80073d0:	6a21      	ldr	r1, [r4, #32]
 80073d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073d4:	4643      	mov	r3, r8
 80073d6:	463a      	mov	r2, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	2800      	cmp	r0, #0
 80073de:	dc06      	bgt.n	80073ee <__sflush_r+0xfe>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	e78e      	b.n	800730c <__sflush_r+0x1c>
 80073ee:	4407      	add	r7, r0
 80073f0:	eba8 0800 	sub.w	r8, r8, r0
 80073f4:	e7e9      	b.n	80073ca <__sflush_r+0xda>
 80073f6:	bf00      	nop
 80073f8:	20400001 	.word	0x20400001

080073fc <_fflush_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	690b      	ldr	r3, [r1, #16]
 8007400:	4605      	mov	r5, r0
 8007402:	460c      	mov	r4, r1
 8007404:	b913      	cbnz	r3, 800740c <_fflush_r+0x10>
 8007406:	2500      	movs	r5, #0
 8007408:	4628      	mov	r0, r5
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	b118      	cbz	r0, 8007416 <_fflush_r+0x1a>
 800740e:	6983      	ldr	r3, [r0, #24]
 8007410:	b90b      	cbnz	r3, 8007416 <_fflush_r+0x1a>
 8007412:	f000 f887 	bl	8007524 <__sinit>
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <_fflush_r+0x6c>)
 8007418:	429c      	cmp	r4, r3
 800741a:	d11b      	bne.n	8007454 <_fflush_r+0x58>
 800741c:	686c      	ldr	r4, [r5, #4]
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ef      	beq.n	8007406 <_fflush_r+0xa>
 8007426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007428:	07d0      	lsls	r0, r2, #31
 800742a:	d404      	bmi.n	8007436 <_fflush_r+0x3a>
 800742c:	0599      	lsls	r1, r3, #22
 800742e:	d402      	bmi.n	8007436 <_fflush_r+0x3a>
 8007430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007432:	f000 f927 	bl	8007684 <__retarget_lock_acquire_recursive>
 8007436:	4628      	mov	r0, r5
 8007438:	4621      	mov	r1, r4
 800743a:	f7ff ff59 	bl	80072f0 <__sflush_r>
 800743e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007440:	07da      	lsls	r2, r3, #31
 8007442:	4605      	mov	r5, r0
 8007444:	d4e0      	bmi.n	8007408 <_fflush_r+0xc>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	059b      	lsls	r3, r3, #22
 800744a:	d4dd      	bmi.n	8007408 <_fflush_r+0xc>
 800744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744e:	f000 f91a 	bl	8007686 <__retarget_lock_release_recursive>
 8007452:	e7d9      	b.n	8007408 <_fflush_r+0xc>
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_fflush_r+0x70>)
 8007456:	429c      	cmp	r4, r3
 8007458:	d101      	bne.n	800745e <_fflush_r+0x62>
 800745a:	68ac      	ldr	r4, [r5, #8]
 800745c:	e7df      	b.n	800741e <_fflush_r+0x22>
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <_fflush_r+0x74>)
 8007460:	429c      	cmp	r4, r3
 8007462:	bf08      	it	eq
 8007464:	68ec      	ldreq	r4, [r5, #12]
 8007466:	e7da      	b.n	800741e <_fflush_r+0x22>
 8007468:	080094f4 	.word	0x080094f4
 800746c:	08009514 	.word	0x08009514
 8007470:	080094d4 	.word	0x080094d4

08007474 <std>:
 8007474:	2300      	movs	r3, #0
 8007476:	b510      	push	{r4, lr}
 8007478:	4604      	mov	r4, r0
 800747a:	e9c0 3300 	strd	r3, r3, [r0]
 800747e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007482:	6083      	str	r3, [r0, #8]
 8007484:	8181      	strh	r1, [r0, #12]
 8007486:	6643      	str	r3, [r0, #100]	; 0x64
 8007488:	81c2      	strh	r2, [r0, #14]
 800748a:	6183      	str	r3, [r0, #24]
 800748c:	4619      	mov	r1, r3
 800748e:	2208      	movs	r2, #8
 8007490:	305c      	adds	r0, #92	; 0x5c
 8007492:	f7ff fd15 	bl	8006ec0 <memset>
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <std+0x38>)
 8007498:	6263      	str	r3, [r4, #36]	; 0x24
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <std+0x3c>)
 800749c:	62a3      	str	r3, [r4, #40]	; 0x28
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <std+0x40>)
 80074a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <std+0x44>)
 80074a4:	6224      	str	r4, [r4, #32]
 80074a6:	6323      	str	r3, [r4, #48]	; 0x30
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	bf00      	nop
 80074ac:	08007f41 	.word	0x08007f41
 80074b0:	08007f63 	.word	0x08007f63
 80074b4:	08007f9b 	.word	0x08007f9b
 80074b8:	08007fbf 	.word	0x08007fbf

080074bc <_cleanup_r>:
 80074bc:	4901      	ldr	r1, [pc, #4]	; (80074c4 <_cleanup_r+0x8>)
 80074be:	f000 b8c1 	b.w	8007644 <_fwalk_reent>
 80074c2:	bf00      	nop
 80074c4:	080073fd 	.word	0x080073fd

080074c8 <__sfmoreglue>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	1e4a      	subs	r2, r1, #1
 80074cc:	2568      	movs	r5, #104	; 0x68
 80074ce:	4355      	muls	r5, r2
 80074d0:	460e      	mov	r6, r1
 80074d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074d6:	f000 f993 	bl	8007800 <_malloc_r>
 80074da:	4604      	mov	r4, r0
 80074dc:	b140      	cbz	r0, 80074f0 <__sfmoreglue+0x28>
 80074de:	2100      	movs	r1, #0
 80074e0:	e9c0 1600 	strd	r1, r6, [r0]
 80074e4:	300c      	adds	r0, #12
 80074e6:	60a0      	str	r0, [r4, #8]
 80074e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074ec:	f7ff fce8 	bl	8006ec0 <memset>
 80074f0:	4620      	mov	r0, r4
 80074f2:	bd70      	pop	{r4, r5, r6, pc}

080074f4 <__sfp_lock_acquire>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__sfp_lock_acquire+0x8>)
 80074f6:	f000 b8c5 	b.w	8007684 <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	200010e8 	.word	0x200010e8

08007500 <__sfp_lock_release>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__sfp_lock_release+0x8>)
 8007502:	f000 b8c0 	b.w	8007686 <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	200010e8 	.word	0x200010e8

0800750c <__sinit_lock_acquire>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__sinit_lock_acquire+0x8>)
 800750e:	f000 b8b9 	b.w	8007684 <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	200010e3 	.word	0x200010e3

08007518 <__sinit_lock_release>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__sinit_lock_release+0x8>)
 800751a:	f000 b8b4 	b.w	8007686 <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	200010e3 	.word	0x200010e3

08007524 <__sinit>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4604      	mov	r4, r0
 8007528:	f7ff fff0 	bl	800750c <__sinit_lock_acquire>
 800752c:	69a3      	ldr	r3, [r4, #24]
 800752e:	b11b      	cbz	r3, 8007538 <__sinit+0x14>
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	f7ff bff0 	b.w	8007518 <__sinit_lock_release>
 8007538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800753c:	6523      	str	r3, [r4, #80]	; 0x50
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <__sinit+0x68>)
 8007540:	4a13      	ldr	r2, [pc, #76]	; (8007590 <__sinit+0x6c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	62a2      	str	r2, [r4, #40]	; 0x28
 8007546:	42a3      	cmp	r3, r4
 8007548:	bf04      	itt	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	61a3      	streq	r3, [r4, #24]
 800754e:	4620      	mov	r0, r4
 8007550:	f000 f820 	bl	8007594 <__sfp>
 8007554:	6060      	str	r0, [r4, #4]
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f81c 	bl	8007594 <__sfp>
 800755c:	60a0      	str	r0, [r4, #8]
 800755e:	4620      	mov	r0, r4
 8007560:	f000 f818 	bl	8007594 <__sfp>
 8007564:	2200      	movs	r2, #0
 8007566:	60e0      	str	r0, [r4, #12]
 8007568:	2104      	movs	r1, #4
 800756a:	6860      	ldr	r0, [r4, #4]
 800756c:	f7ff ff82 	bl	8007474 <std>
 8007570:	68a0      	ldr	r0, [r4, #8]
 8007572:	2201      	movs	r2, #1
 8007574:	2109      	movs	r1, #9
 8007576:	f7ff ff7d 	bl	8007474 <std>
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	2202      	movs	r2, #2
 800757e:	2112      	movs	r1, #18
 8007580:	f7ff ff78 	bl	8007474 <std>
 8007584:	2301      	movs	r3, #1
 8007586:	61a3      	str	r3, [r4, #24]
 8007588:	e7d2      	b.n	8007530 <__sinit+0xc>
 800758a:	bf00      	nop
 800758c:	0800941c 	.word	0x0800941c
 8007590:	080074bd 	.word	0x080074bd

08007594 <__sfp>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	4607      	mov	r7, r0
 8007598:	f7ff ffac 	bl	80074f4 <__sfp_lock_acquire>
 800759c:	4b1e      	ldr	r3, [pc, #120]	; (8007618 <__sfp+0x84>)
 800759e:	681e      	ldr	r6, [r3, #0]
 80075a0:	69b3      	ldr	r3, [r6, #24]
 80075a2:	b913      	cbnz	r3, 80075aa <__sfp+0x16>
 80075a4:	4630      	mov	r0, r6
 80075a6:	f7ff ffbd 	bl	8007524 <__sinit>
 80075aa:	3648      	adds	r6, #72	; 0x48
 80075ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	d503      	bpl.n	80075bc <__sfp+0x28>
 80075b4:	6833      	ldr	r3, [r6, #0]
 80075b6:	b30b      	cbz	r3, 80075fc <__sfp+0x68>
 80075b8:	6836      	ldr	r6, [r6, #0]
 80075ba:	e7f7      	b.n	80075ac <__sfp+0x18>
 80075bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075c0:	b9d5      	cbnz	r5, 80075f8 <__sfp+0x64>
 80075c2:	4b16      	ldr	r3, [pc, #88]	; (800761c <__sfp+0x88>)
 80075c4:	60e3      	str	r3, [r4, #12]
 80075c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ca:	6665      	str	r5, [r4, #100]	; 0x64
 80075cc:	f000 f859 	bl	8007682 <__retarget_lock_init_recursive>
 80075d0:	f7ff ff96 	bl	8007500 <__sfp_lock_release>
 80075d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075dc:	6025      	str	r5, [r4, #0]
 80075de:	61a5      	str	r5, [r4, #24]
 80075e0:	2208      	movs	r2, #8
 80075e2:	4629      	mov	r1, r5
 80075e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075e8:	f7ff fc6a 	bl	8006ec0 <memset>
 80075ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075f4:	4620      	mov	r0, r4
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	3468      	adds	r4, #104	; 0x68
 80075fa:	e7d9      	b.n	80075b0 <__sfp+0x1c>
 80075fc:	2104      	movs	r1, #4
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff ff62 	bl	80074c8 <__sfmoreglue>
 8007604:	4604      	mov	r4, r0
 8007606:	6030      	str	r0, [r6, #0]
 8007608:	2800      	cmp	r0, #0
 800760a:	d1d5      	bne.n	80075b8 <__sfp+0x24>
 800760c:	f7ff ff78 	bl	8007500 <__sfp_lock_release>
 8007610:	230c      	movs	r3, #12
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	e7ee      	b.n	80075f4 <__sfp+0x60>
 8007616:	bf00      	nop
 8007618:	0800941c 	.word	0x0800941c
 800761c:	ffff0001 	.word	0xffff0001

08007620 <fiprintf>:
 8007620:	b40e      	push	{r1, r2, r3}
 8007622:	b503      	push	{r0, r1, lr}
 8007624:	4601      	mov	r1, r0
 8007626:	ab03      	add	r3, sp, #12
 8007628:	4805      	ldr	r0, [pc, #20]	; (8007640 <fiprintf+0x20>)
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	f000 f969 	bl	8007908 <_vfiprintf_r>
 8007636:	b002      	add	sp, #8
 8007638:	f85d eb04 	ldr.w	lr, [sp], #4
 800763c:	b003      	add	sp, #12
 800763e:	4770      	bx	lr
 8007640:	200009cc 	.word	0x200009cc

08007644 <_fwalk_reent>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	4606      	mov	r6, r0
 800764a:	4688      	mov	r8, r1
 800764c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007650:	2700      	movs	r7, #0
 8007652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007656:	f1b9 0901 	subs.w	r9, r9, #1
 800765a:	d505      	bpl.n	8007668 <_fwalk_reent+0x24>
 800765c:	6824      	ldr	r4, [r4, #0]
 800765e:	2c00      	cmp	r4, #0
 8007660:	d1f7      	bne.n	8007652 <_fwalk_reent+0xe>
 8007662:	4638      	mov	r0, r7
 8007664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007668:	89ab      	ldrh	r3, [r5, #12]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d907      	bls.n	800767e <_fwalk_reent+0x3a>
 800766e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007672:	3301      	adds	r3, #1
 8007674:	d003      	beq.n	800767e <_fwalk_reent+0x3a>
 8007676:	4629      	mov	r1, r5
 8007678:	4630      	mov	r0, r6
 800767a:	47c0      	blx	r8
 800767c:	4307      	orrs	r7, r0
 800767e:	3568      	adds	r5, #104	; 0x68
 8007680:	e7e9      	b.n	8007656 <_fwalk_reent+0x12>

08007682 <__retarget_lock_init_recursive>:
 8007682:	4770      	bx	lr

08007684 <__retarget_lock_acquire_recursive>:
 8007684:	4770      	bx	lr

08007686 <__retarget_lock_release_recursive>:
 8007686:	4770      	bx	lr

08007688 <__swhatbuf_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	460e      	mov	r6, r1
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	2900      	cmp	r1, #0
 8007692:	b096      	sub	sp, #88	; 0x58
 8007694:	4614      	mov	r4, r2
 8007696:	461d      	mov	r5, r3
 8007698:	da07      	bge.n	80076aa <__swhatbuf_r+0x22>
 800769a:	2300      	movs	r3, #0
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	89b3      	ldrh	r3, [r6, #12]
 80076a0:	061a      	lsls	r2, r3, #24
 80076a2:	d410      	bmi.n	80076c6 <__swhatbuf_r+0x3e>
 80076a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a8:	e00e      	b.n	80076c8 <__swhatbuf_r+0x40>
 80076aa:	466a      	mov	r2, sp
 80076ac:	f000 fcb6 	bl	800801c <_fstat_r>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dbf2      	blt.n	800769a <__swhatbuf_r+0x12>
 80076b4:	9a01      	ldr	r2, [sp, #4]
 80076b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076be:	425a      	negs	r2, r3
 80076c0:	415a      	adcs	r2, r3
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	e7ee      	b.n	80076a4 <__swhatbuf_r+0x1c>
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	2000      	movs	r0, #0
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	b016      	add	sp, #88	; 0x58
 80076ce:	bd70      	pop	{r4, r5, r6, pc}

080076d0 <__smakebuf_r>:
 80076d0:	898b      	ldrh	r3, [r1, #12]
 80076d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d4:	079d      	lsls	r5, r3, #30
 80076d6:	4606      	mov	r6, r0
 80076d8:	460c      	mov	r4, r1
 80076da:	d507      	bpl.n	80076ec <__smakebuf_r+0x1c>
 80076dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	2301      	movs	r3, #1
 80076e6:	6163      	str	r3, [r4, #20]
 80076e8:	b002      	add	sp, #8
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	ab01      	add	r3, sp, #4
 80076ee:	466a      	mov	r2, sp
 80076f0:	f7ff ffca 	bl	8007688 <__swhatbuf_r>
 80076f4:	9900      	ldr	r1, [sp, #0]
 80076f6:	4605      	mov	r5, r0
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 f881 	bl	8007800 <_malloc_r>
 80076fe:	b948      	cbnz	r0, 8007714 <__smakebuf_r+0x44>
 8007700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007704:	059a      	lsls	r2, r3, #22
 8007706:	d4ef      	bmi.n	80076e8 <__smakebuf_r+0x18>
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	81a3      	strh	r3, [r4, #12]
 8007712:	e7e3      	b.n	80076dc <__smakebuf_r+0xc>
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <__smakebuf_r+0x7c>)
 8007716:	62b3      	str	r3, [r6, #40]	; 0x28
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	6163      	str	r3, [r4, #20]
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	6120      	str	r0, [r4, #16]
 800772a:	b15b      	cbz	r3, 8007744 <__smakebuf_r+0x74>
 800772c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 fc85 	bl	8008040 <_isatty_r>
 8007736:	b128      	cbz	r0, 8007744 <__smakebuf_r+0x74>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	89a0      	ldrh	r0, [r4, #12]
 8007746:	4305      	orrs	r5, r0
 8007748:	81a5      	strh	r5, [r4, #12]
 800774a:	e7cd      	b.n	80076e8 <__smakebuf_r+0x18>
 800774c:	080074bd 	.word	0x080074bd

08007750 <malloc>:
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <malloc+0xc>)
 8007752:	4601      	mov	r1, r0
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	f000 b853 	b.w	8007800 <_malloc_r>
 800775a:	bf00      	nop
 800775c:	200009cc 	.word	0x200009cc

08007760 <_free_r>:
 8007760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007762:	2900      	cmp	r1, #0
 8007764:	d048      	beq.n	80077f8 <_free_r+0x98>
 8007766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776a:	9001      	str	r0, [sp, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f1a1 0404 	sub.w	r4, r1, #4
 8007772:	bfb8      	it	lt
 8007774:	18e4      	addlt	r4, r4, r3
 8007776:	f000 fc85 	bl	8008084 <__malloc_lock>
 800777a:	4a20      	ldr	r2, [pc, #128]	; (80077fc <_free_r+0x9c>)
 800777c:	9801      	ldr	r0, [sp, #4]
 800777e:	6813      	ldr	r3, [r2, #0]
 8007780:	4615      	mov	r5, r2
 8007782:	b933      	cbnz	r3, 8007792 <_free_r+0x32>
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	6014      	str	r4, [r2, #0]
 8007788:	b003      	add	sp, #12
 800778a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800778e:	f000 bc7f 	b.w	8008090 <__malloc_unlock>
 8007792:	42a3      	cmp	r3, r4
 8007794:	d90b      	bls.n	80077ae <_free_r+0x4e>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	1862      	adds	r2, r4, r1
 800779a:	4293      	cmp	r3, r2
 800779c:	bf04      	itt	eq
 800779e:	681a      	ldreq	r2, [r3, #0]
 80077a0:	685b      	ldreq	r3, [r3, #4]
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	bf04      	itt	eq
 80077a6:	1852      	addeq	r2, r2, r1
 80077a8:	6022      	streq	r2, [r4, #0]
 80077aa:	602c      	str	r4, [r5, #0]
 80077ac:	e7ec      	b.n	8007788 <_free_r+0x28>
 80077ae:	461a      	mov	r2, r3
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	b10b      	cbz	r3, 80077b8 <_free_r+0x58>
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	d9fa      	bls.n	80077ae <_free_r+0x4e>
 80077b8:	6811      	ldr	r1, [r2, #0]
 80077ba:	1855      	adds	r5, r2, r1
 80077bc:	42a5      	cmp	r5, r4
 80077be:	d10b      	bne.n	80077d8 <_free_r+0x78>
 80077c0:	6824      	ldr	r4, [r4, #0]
 80077c2:	4421      	add	r1, r4
 80077c4:	1854      	adds	r4, r2, r1
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	6011      	str	r1, [r2, #0]
 80077ca:	d1dd      	bne.n	8007788 <_free_r+0x28>
 80077cc:	681c      	ldr	r4, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	6053      	str	r3, [r2, #4]
 80077d2:	4421      	add	r1, r4
 80077d4:	6011      	str	r1, [r2, #0]
 80077d6:	e7d7      	b.n	8007788 <_free_r+0x28>
 80077d8:	d902      	bls.n	80077e0 <_free_r+0x80>
 80077da:	230c      	movs	r3, #12
 80077dc:	6003      	str	r3, [r0, #0]
 80077de:	e7d3      	b.n	8007788 <_free_r+0x28>
 80077e0:	6825      	ldr	r5, [r4, #0]
 80077e2:	1961      	adds	r1, r4, r5
 80077e4:	428b      	cmp	r3, r1
 80077e6:	bf04      	itt	eq
 80077e8:	6819      	ldreq	r1, [r3, #0]
 80077ea:	685b      	ldreq	r3, [r3, #4]
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	bf04      	itt	eq
 80077f0:	1949      	addeq	r1, r1, r5
 80077f2:	6021      	streq	r1, [r4, #0]
 80077f4:	6054      	str	r4, [r2, #4]
 80077f6:	e7c7      	b.n	8007788 <_free_r+0x28>
 80077f8:	b003      	add	sp, #12
 80077fa:	bd30      	pop	{r4, r5, pc}
 80077fc:	20000e58 	.word	0x20000e58

08007800 <_malloc_r>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	1ccd      	adds	r5, r1, #3
 8007804:	f025 0503 	bic.w	r5, r5, #3
 8007808:	3508      	adds	r5, #8
 800780a:	2d0c      	cmp	r5, #12
 800780c:	bf38      	it	cc
 800780e:	250c      	movcc	r5, #12
 8007810:	2d00      	cmp	r5, #0
 8007812:	4606      	mov	r6, r0
 8007814:	db01      	blt.n	800781a <_malloc_r+0x1a>
 8007816:	42a9      	cmp	r1, r5
 8007818:	d903      	bls.n	8007822 <_malloc_r+0x22>
 800781a:	230c      	movs	r3, #12
 800781c:	6033      	str	r3, [r6, #0]
 800781e:	2000      	movs	r0, #0
 8007820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007822:	f000 fc2f 	bl	8008084 <__malloc_lock>
 8007826:	4921      	ldr	r1, [pc, #132]	; (80078ac <_malloc_r+0xac>)
 8007828:	680a      	ldr	r2, [r1, #0]
 800782a:	4614      	mov	r4, r2
 800782c:	b99c      	cbnz	r4, 8007856 <_malloc_r+0x56>
 800782e:	4f20      	ldr	r7, [pc, #128]	; (80078b0 <_malloc_r+0xb0>)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	b923      	cbnz	r3, 800783e <_malloc_r+0x3e>
 8007834:	4621      	mov	r1, r4
 8007836:	4630      	mov	r0, r6
 8007838:	f000 fb72 	bl	8007f20 <_sbrk_r>
 800783c:	6038      	str	r0, [r7, #0]
 800783e:	4629      	mov	r1, r5
 8007840:	4630      	mov	r0, r6
 8007842:	f000 fb6d 	bl	8007f20 <_sbrk_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d123      	bne.n	8007892 <_malloc_r+0x92>
 800784a:	230c      	movs	r3, #12
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	4630      	mov	r0, r6
 8007850:	f000 fc1e 	bl	8008090 <__malloc_unlock>
 8007854:	e7e3      	b.n	800781e <_malloc_r+0x1e>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	1b5b      	subs	r3, r3, r5
 800785a:	d417      	bmi.n	800788c <_malloc_r+0x8c>
 800785c:	2b0b      	cmp	r3, #11
 800785e:	d903      	bls.n	8007868 <_malloc_r+0x68>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	441c      	add	r4, r3
 8007864:	6025      	str	r5, [r4, #0]
 8007866:	e004      	b.n	8007872 <_malloc_r+0x72>
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	42a2      	cmp	r2, r4
 800786c:	bf0c      	ite	eq
 800786e:	600b      	streq	r3, [r1, #0]
 8007870:	6053      	strne	r3, [r2, #4]
 8007872:	4630      	mov	r0, r6
 8007874:	f000 fc0c 	bl	8008090 <__malloc_unlock>
 8007878:	f104 000b 	add.w	r0, r4, #11
 800787c:	1d23      	adds	r3, r4, #4
 800787e:	f020 0007 	bic.w	r0, r0, #7
 8007882:	1ac2      	subs	r2, r0, r3
 8007884:	d0cc      	beq.n	8007820 <_malloc_r+0x20>
 8007886:	1a1b      	subs	r3, r3, r0
 8007888:	50a3      	str	r3, [r4, r2]
 800788a:	e7c9      	b.n	8007820 <_malloc_r+0x20>
 800788c:	4622      	mov	r2, r4
 800788e:	6864      	ldr	r4, [r4, #4]
 8007890:	e7cc      	b.n	800782c <_malloc_r+0x2c>
 8007892:	1cc4      	adds	r4, r0, #3
 8007894:	f024 0403 	bic.w	r4, r4, #3
 8007898:	42a0      	cmp	r0, r4
 800789a:	d0e3      	beq.n	8007864 <_malloc_r+0x64>
 800789c:	1a21      	subs	r1, r4, r0
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 fb3e 	bl	8007f20 <_sbrk_r>
 80078a4:	3001      	adds	r0, #1
 80078a6:	d1dd      	bne.n	8007864 <_malloc_r+0x64>
 80078a8:	e7cf      	b.n	800784a <_malloc_r+0x4a>
 80078aa:	bf00      	nop
 80078ac:	20000e58 	.word	0x20000e58
 80078b0:	20000e5c 	.word	0x20000e5c

080078b4 <__sfputc_r>:
 80078b4:	6893      	ldr	r3, [r2, #8]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	b410      	push	{r4}
 80078bc:	6093      	str	r3, [r2, #8]
 80078be:	da08      	bge.n	80078d2 <__sfputc_r+0x1e>
 80078c0:	6994      	ldr	r4, [r2, #24]
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	db01      	blt.n	80078ca <__sfputc_r+0x16>
 80078c6:	290a      	cmp	r1, #10
 80078c8:	d103      	bne.n	80078d2 <__sfputc_r+0x1e>
 80078ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ce:	f7ff bc31 	b.w	8007134 <__swbuf_r>
 80078d2:	6813      	ldr	r3, [r2, #0]
 80078d4:	1c58      	adds	r0, r3, #1
 80078d6:	6010      	str	r0, [r2, #0]
 80078d8:	7019      	strb	r1, [r3, #0]
 80078da:	4608      	mov	r0, r1
 80078dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <__sfputs_r>:
 80078e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e4:	4606      	mov	r6, r0
 80078e6:	460f      	mov	r7, r1
 80078e8:	4614      	mov	r4, r2
 80078ea:	18d5      	adds	r5, r2, r3
 80078ec:	42ac      	cmp	r4, r5
 80078ee:	d101      	bne.n	80078f4 <__sfputs_r+0x12>
 80078f0:	2000      	movs	r0, #0
 80078f2:	e007      	b.n	8007904 <__sfputs_r+0x22>
 80078f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f8:	463a      	mov	r2, r7
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ffda 	bl	80078b4 <__sfputc_r>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d1f3      	bne.n	80078ec <__sfputs_r+0xa>
 8007904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007908 <_vfiprintf_r>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	460d      	mov	r5, r1
 800790e:	b09d      	sub	sp, #116	; 0x74
 8007910:	4614      	mov	r4, r2
 8007912:	4698      	mov	r8, r3
 8007914:	4606      	mov	r6, r0
 8007916:	b118      	cbz	r0, 8007920 <_vfiprintf_r+0x18>
 8007918:	6983      	ldr	r3, [r0, #24]
 800791a:	b90b      	cbnz	r3, 8007920 <_vfiprintf_r+0x18>
 800791c:	f7ff fe02 	bl	8007524 <__sinit>
 8007920:	4b89      	ldr	r3, [pc, #548]	; (8007b48 <_vfiprintf_r+0x240>)
 8007922:	429d      	cmp	r5, r3
 8007924:	d11b      	bne.n	800795e <_vfiprintf_r+0x56>
 8007926:	6875      	ldr	r5, [r6, #4]
 8007928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800792a:	07d9      	lsls	r1, r3, #31
 800792c:	d405      	bmi.n	800793a <_vfiprintf_r+0x32>
 800792e:	89ab      	ldrh	r3, [r5, #12]
 8007930:	059a      	lsls	r2, r3, #22
 8007932:	d402      	bmi.n	800793a <_vfiprintf_r+0x32>
 8007934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007936:	f7ff fea5 	bl	8007684 <__retarget_lock_acquire_recursive>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	071b      	lsls	r3, r3, #28
 800793e:	d501      	bpl.n	8007944 <_vfiprintf_r+0x3c>
 8007940:	692b      	ldr	r3, [r5, #16]
 8007942:	b9eb      	cbnz	r3, 8007980 <_vfiprintf_r+0x78>
 8007944:	4629      	mov	r1, r5
 8007946:	4630      	mov	r0, r6
 8007948:	f7ff fc46 	bl	80071d8 <__swsetup_r>
 800794c:	b1c0      	cbz	r0, 8007980 <_vfiprintf_r+0x78>
 800794e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007950:	07dc      	lsls	r4, r3, #31
 8007952:	d50e      	bpl.n	8007972 <_vfiprintf_r+0x6a>
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	b01d      	add	sp, #116	; 0x74
 800795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	4b7b      	ldr	r3, [pc, #492]	; (8007b4c <_vfiprintf_r+0x244>)
 8007960:	429d      	cmp	r5, r3
 8007962:	d101      	bne.n	8007968 <_vfiprintf_r+0x60>
 8007964:	68b5      	ldr	r5, [r6, #8]
 8007966:	e7df      	b.n	8007928 <_vfiprintf_r+0x20>
 8007968:	4b79      	ldr	r3, [pc, #484]	; (8007b50 <_vfiprintf_r+0x248>)
 800796a:	429d      	cmp	r5, r3
 800796c:	bf08      	it	eq
 800796e:	68f5      	ldreq	r5, [r6, #12]
 8007970:	e7da      	b.n	8007928 <_vfiprintf_r+0x20>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	0598      	lsls	r0, r3, #22
 8007976:	d4ed      	bmi.n	8007954 <_vfiprintf_r+0x4c>
 8007978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800797a:	f7ff fe84 	bl	8007686 <__retarget_lock_release_recursive>
 800797e:	e7e9      	b.n	8007954 <_vfiprintf_r+0x4c>
 8007980:	2300      	movs	r3, #0
 8007982:	9309      	str	r3, [sp, #36]	; 0x24
 8007984:	2320      	movs	r3, #32
 8007986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800798a:	f8cd 800c 	str.w	r8, [sp, #12]
 800798e:	2330      	movs	r3, #48	; 0x30
 8007990:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b54 <_vfiprintf_r+0x24c>
 8007994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007998:	f04f 0901 	mov.w	r9, #1
 800799c:	4623      	mov	r3, r4
 800799e:	469a      	mov	sl, r3
 80079a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079a4:	b10a      	cbz	r2, 80079aa <_vfiprintf_r+0xa2>
 80079a6:	2a25      	cmp	r2, #37	; 0x25
 80079a8:	d1f9      	bne.n	800799e <_vfiprintf_r+0x96>
 80079aa:	ebba 0b04 	subs.w	fp, sl, r4
 80079ae:	d00b      	beq.n	80079c8 <_vfiprintf_r+0xc0>
 80079b0:	465b      	mov	r3, fp
 80079b2:	4622      	mov	r2, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff ff93 	bl	80078e2 <__sfputs_r>
 80079bc:	3001      	adds	r0, #1
 80079be:	f000 80aa 	beq.w	8007b16 <_vfiprintf_r+0x20e>
 80079c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c4:	445a      	add	r2, fp
 80079c6:	9209      	str	r2, [sp, #36]	; 0x24
 80079c8:	f89a 3000 	ldrb.w	r3, [sl]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80a2 	beq.w	8007b16 <_vfiprintf_r+0x20e>
 80079d2:	2300      	movs	r3, #0
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079dc:	f10a 0a01 	add.w	sl, sl, #1
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	9307      	str	r3, [sp, #28]
 80079e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e8:	931a      	str	r3, [sp, #104]	; 0x68
 80079ea:	4654      	mov	r4, sl
 80079ec:	2205      	movs	r2, #5
 80079ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f2:	4858      	ldr	r0, [pc, #352]	; (8007b54 <_vfiprintf_r+0x24c>)
 80079f4:	f7f8 fc2c 	bl	8000250 <memchr>
 80079f8:	9a04      	ldr	r2, [sp, #16]
 80079fa:	b9d8      	cbnz	r0, 8007a34 <_vfiprintf_r+0x12c>
 80079fc:	06d1      	lsls	r1, r2, #27
 80079fe:	bf44      	itt	mi
 8007a00:	2320      	movmi	r3, #32
 8007a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a06:	0713      	lsls	r3, r2, #28
 8007a08:	bf44      	itt	mi
 8007a0a:	232b      	movmi	r3, #43	; 0x2b
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a10:	f89a 3000 	ldrb.w	r3, [sl]
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d015      	beq.n	8007a44 <_vfiprintf_r+0x13c>
 8007a18:	9a07      	ldr	r2, [sp, #28]
 8007a1a:	4654      	mov	r4, sl
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f04f 0c0a 	mov.w	ip, #10
 8007a22:	4621      	mov	r1, r4
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	3b30      	subs	r3, #48	; 0x30
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d94e      	bls.n	8007acc <_vfiprintf_r+0x1c4>
 8007a2e:	b1b0      	cbz	r0, 8007a5e <_vfiprintf_r+0x156>
 8007a30:	9207      	str	r2, [sp, #28]
 8007a32:	e014      	b.n	8007a5e <_vfiprintf_r+0x156>
 8007a34:	eba0 0308 	sub.w	r3, r0, r8
 8007a38:	fa09 f303 	lsl.w	r3, r9, r3
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	46a2      	mov	sl, r4
 8007a42:	e7d2      	b.n	80079ea <_vfiprintf_r+0xe2>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	1d19      	adds	r1, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	9103      	str	r1, [sp, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfbb      	ittet	lt
 8007a50:	425b      	neglt	r3, r3
 8007a52:	f042 0202 	orrlt.w	r2, r2, #2
 8007a56:	9307      	strge	r3, [sp, #28]
 8007a58:	9307      	strlt	r3, [sp, #28]
 8007a5a:	bfb8      	it	lt
 8007a5c:	9204      	strlt	r2, [sp, #16]
 8007a5e:	7823      	ldrb	r3, [r4, #0]
 8007a60:	2b2e      	cmp	r3, #46	; 0x2e
 8007a62:	d10c      	bne.n	8007a7e <_vfiprintf_r+0x176>
 8007a64:	7863      	ldrb	r3, [r4, #1]
 8007a66:	2b2a      	cmp	r3, #42	; 0x2a
 8007a68:	d135      	bne.n	8007ad6 <_vfiprintf_r+0x1ce>
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	9203      	str	r2, [sp, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfb8      	it	lt
 8007a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a7a:	3402      	adds	r4, #2
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b64 <_vfiprintf_r+0x25c>
 8007a82:	7821      	ldrb	r1, [r4, #0]
 8007a84:	2203      	movs	r2, #3
 8007a86:	4650      	mov	r0, sl
 8007a88:	f7f8 fbe2 	bl	8000250 <memchr>
 8007a8c:	b140      	cbz	r0, 8007aa0 <_vfiprintf_r+0x198>
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	eba0 000a 	sub.w	r0, r0, sl
 8007a94:	fa03 f000 	lsl.w	r0, r3, r0
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	4303      	orrs	r3, r0
 8007a9c:	3401      	adds	r4, #1
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa4:	482c      	ldr	r0, [pc, #176]	; (8007b58 <_vfiprintf_r+0x250>)
 8007aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aaa:	2206      	movs	r2, #6
 8007aac:	f7f8 fbd0 	bl	8000250 <memchr>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d03f      	beq.n	8007b34 <_vfiprintf_r+0x22c>
 8007ab4:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <_vfiprintf_r+0x254>)
 8007ab6:	bb1b      	cbnz	r3, 8007b00 <_vfiprintf_r+0x1f8>
 8007ab8:	9b03      	ldr	r3, [sp, #12]
 8007aba:	3307      	adds	r3, #7
 8007abc:	f023 0307 	bic.w	r3, r3, #7
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac6:	443b      	add	r3, r7
 8007ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aca:	e767      	b.n	800799c <_vfiprintf_r+0x94>
 8007acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e7a5      	b.n	8007a22 <_vfiprintf_r+0x11a>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	3401      	adds	r4, #1
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f04f 0c0a 	mov.w	ip, #10
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae8:	3a30      	subs	r2, #48	; 0x30
 8007aea:	2a09      	cmp	r2, #9
 8007aec:	d903      	bls.n	8007af6 <_vfiprintf_r+0x1ee>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0c5      	beq.n	8007a7e <_vfiprintf_r+0x176>
 8007af2:	9105      	str	r1, [sp, #20]
 8007af4:	e7c3      	b.n	8007a7e <_vfiprintf_r+0x176>
 8007af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afa:	4604      	mov	r4, r0
 8007afc:	2301      	movs	r3, #1
 8007afe:	e7f0      	b.n	8007ae2 <_vfiprintf_r+0x1da>
 8007b00:	ab03      	add	r3, sp, #12
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	462a      	mov	r2, r5
 8007b06:	4b16      	ldr	r3, [pc, #88]	; (8007b60 <_vfiprintf_r+0x258>)
 8007b08:	a904      	add	r1, sp, #16
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f3af 8000 	nop.w
 8007b10:	4607      	mov	r7, r0
 8007b12:	1c78      	adds	r0, r7, #1
 8007b14:	d1d6      	bne.n	8007ac4 <_vfiprintf_r+0x1bc>
 8007b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b18:	07d9      	lsls	r1, r3, #31
 8007b1a:	d405      	bmi.n	8007b28 <_vfiprintf_r+0x220>
 8007b1c:	89ab      	ldrh	r3, [r5, #12]
 8007b1e:	059a      	lsls	r2, r3, #22
 8007b20:	d402      	bmi.n	8007b28 <_vfiprintf_r+0x220>
 8007b22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b24:	f7ff fdaf 	bl	8007686 <__retarget_lock_release_recursive>
 8007b28:	89ab      	ldrh	r3, [r5, #12]
 8007b2a:	065b      	lsls	r3, r3, #25
 8007b2c:	f53f af12 	bmi.w	8007954 <_vfiprintf_r+0x4c>
 8007b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b32:	e711      	b.n	8007958 <_vfiprintf_r+0x50>
 8007b34:	ab03      	add	r3, sp, #12
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <_vfiprintf_r+0x258>)
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f000 f880 	bl	8007c44 <_printf_i>
 8007b44:	e7e4      	b.n	8007b10 <_vfiprintf_r+0x208>
 8007b46:	bf00      	nop
 8007b48:	080094f4 	.word	0x080094f4
 8007b4c:	08009514 	.word	0x08009514
 8007b50:	080094d4 	.word	0x080094d4
 8007b54:	08009534 	.word	0x08009534
 8007b58:	0800953e 	.word	0x0800953e
 8007b5c:	00000000 	.word	0x00000000
 8007b60:	080078e3 	.word	0x080078e3
 8007b64:	0800953a 	.word	0x0800953a

08007b68 <_printf_common>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	4699      	mov	r9, r3
 8007b70:	688a      	ldr	r2, [r1, #8]
 8007b72:	690b      	ldr	r3, [r1, #16]
 8007b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bfb8      	it	lt
 8007b7c:	4613      	movlt	r3, r2
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b84:	4607      	mov	r7, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	b10a      	cbz	r2, 8007b8e <_printf_common+0x26>
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	0699      	lsls	r1, r3, #26
 8007b92:	bf42      	ittt	mi
 8007b94:	6833      	ldrmi	r3, [r6, #0]
 8007b96:	3302      	addmi	r3, #2
 8007b98:	6033      	strmi	r3, [r6, #0]
 8007b9a:	6825      	ldr	r5, [r4, #0]
 8007b9c:	f015 0506 	ands.w	r5, r5, #6
 8007ba0:	d106      	bne.n	8007bb0 <_printf_common+0x48>
 8007ba2:	f104 0a19 	add.w	sl, r4, #25
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	6832      	ldr	r2, [r6, #0]
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dc26      	bgt.n	8007bfe <_printf_common+0x96>
 8007bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bb4:	1e13      	subs	r3, r2, #0
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	bf18      	it	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	0692      	lsls	r2, r2, #26
 8007bbe:	d42b      	bmi.n	8007c18 <_printf_common+0xb0>
 8007bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c0      	blx	r8
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d01e      	beq.n	8007c0c <_printf_common+0xa4>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	68e5      	ldr	r5, [r4, #12]
 8007bd2:	6832      	ldr	r2, [r6, #0]
 8007bd4:	f003 0306 	and.w	r3, r3, #6
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	bf08      	it	eq
 8007bdc:	1aad      	subeq	r5, r5, r2
 8007bde:	68a3      	ldr	r3, [r4, #8]
 8007be0:	6922      	ldr	r2, [r4, #16]
 8007be2:	bf0c      	ite	eq
 8007be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be8:	2500      	movne	r5, #0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bfc4      	itt	gt
 8007bee:	1a9b      	subgt	r3, r3, r2
 8007bf0:	18ed      	addgt	r5, r5, r3
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	341a      	adds	r4, #26
 8007bf6:	42b5      	cmp	r5, r6
 8007bf8:	d11a      	bne.n	8007c30 <_printf_common+0xc8>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e008      	b.n	8007c10 <_printf_common+0xa8>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4649      	mov	r1, r9
 8007c04:	4638      	mov	r0, r7
 8007c06:	47c0      	blx	r8
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d103      	bne.n	8007c14 <_printf_common+0xac>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7c6      	b.n	8007ba6 <_printf_common+0x3e>
 8007c18:	18e1      	adds	r1, r4, r3
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	2030      	movs	r0, #48	; 0x30
 8007c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c22:	4422      	add	r2, r4
 8007c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	e7c7      	b.n	8007bc0 <_printf_common+0x58>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4622      	mov	r2, r4
 8007c34:	4649      	mov	r1, r9
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d0e6      	beq.n	8007c0c <_printf_common+0xa4>
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7d9      	b.n	8007bf6 <_printf_common+0x8e>
	...

08007c44 <_printf_i>:
 8007c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	460c      	mov	r4, r1
 8007c4a:	4691      	mov	r9, r2
 8007c4c:	7e27      	ldrb	r7, [r4, #24]
 8007c4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c50:	2f78      	cmp	r7, #120	; 0x78
 8007c52:	4680      	mov	r8, r0
 8007c54:	469a      	mov	sl, r3
 8007c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c5a:	d807      	bhi.n	8007c6c <_printf_i+0x28>
 8007c5c:	2f62      	cmp	r7, #98	; 0x62
 8007c5e:	d80a      	bhi.n	8007c76 <_printf_i+0x32>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	f000 80d8 	beq.w	8007e16 <_printf_i+0x1d2>
 8007c66:	2f58      	cmp	r7, #88	; 0x58
 8007c68:	f000 80a3 	beq.w	8007db2 <_printf_i+0x16e>
 8007c6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c74:	e03a      	b.n	8007cec <_printf_i+0xa8>
 8007c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c7a:	2b15      	cmp	r3, #21
 8007c7c:	d8f6      	bhi.n	8007c6c <_printf_i+0x28>
 8007c7e:	a001      	add	r0, pc, #4	; (adr r0, 8007c84 <_printf_i+0x40>)
 8007c80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007c6d 	.word	0x08007c6d
 8007c90:	08007c6d 	.word	0x08007c6d
 8007c94:	08007c6d 	.word	0x08007c6d
 8007c98:	08007c6d 	.word	0x08007c6d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c6d 	.word	0x08007c6d
 8007ca4:	08007c6d 	.word	0x08007c6d
 8007ca8:	08007c6d 	.word	0x08007c6d
 8007cac:	08007c6d 	.word	0x08007c6d
 8007cb0:	08007dfd 	.word	0x08007dfd
 8007cb4:	08007d21 	.word	0x08007d21
 8007cb8:	08007ddf 	.word	0x08007ddf
 8007cbc:	08007c6d 	.word	0x08007c6d
 8007cc0:	08007c6d 	.word	0x08007c6d
 8007cc4:	08007e1f 	.word	0x08007e1f
 8007cc8:	08007c6d 	.word	0x08007c6d
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007c6d 	.word	0x08007c6d
 8007cd4:	08007c6d 	.word	0x08007c6d
 8007cd8:	08007de7 	.word	0x08007de7
 8007cdc:	680b      	ldr	r3, [r1, #0]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	600a      	str	r2, [r1, #0]
 8007ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0a3      	b.n	8007e38 <_printf_i+0x1f4>
 8007cf0:	6825      	ldr	r5, [r4, #0]
 8007cf2:	6808      	ldr	r0, [r1, #0]
 8007cf4:	062e      	lsls	r6, r5, #24
 8007cf6:	f100 0304 	add.w	r3, r0, #4
 8007cfa:	d50a      	bpl.n	8007d12 <_printf_i+0xce>
 8007cfc:	6805      	ldr	r5, [r0, #0]
 8007cfe:	600b      	str	r3, [r1, #0]
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	da03      	bge.n	8007d0c <_printf_i+0xc8>
 8007d04:	232d      	movs	r3, #45	; 0x2d
 8007d06:	426d      	negs	r5, r5
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d0c:	485e      	ldr	r0, [pc, #376]	; (8007e88 <_printf_i+0x244>)
 8007d0e:	230a      	movs	r3, #10
 8007d10:	e019      	b.n	8007d46 <_printf_i+0x102>
 8007d12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d16:	6805      	ldr	r5, [r0, #0]
 8007d18:	600b      	str	r3, [r1, #0]
 8007d1a:	bf18      	it	ne
 8007d1c:	b22d      	sxthne	r5, r5
 8007d1e:	e7ef      	b.n	8007d00 <_printf_i+0xbc>
 8007d20:	680b      	ldr	r3, [r1, #0]
 8007d22:	6825      	ldr	r5, [r4, #0]
 8007d24:	1d18      	adds	r0, r3, #4
 8007d26:	6008      	str	r0, [r1, #0]
 8007d28:	0628      	lsls	r0, r5, #24
 8007d2a:	d501      	bpl.n	8007d30 <_printf_i+0xec>
 8007d2c:	681d      	ldr	r5, [r3, #0]
 8007d2e:	e002      	b.n	8007d36 <_printf_i+0xf2>
 8007d30:	0669      	lsls	r1, r5, #25
 8007d32:	d5fb      	bpl.n	8007d2c <_printf_i+0xe8>
 8007d34:	881d      	ldrh	r5, [r3, #0]
 8007d36:	4854      	ldr	r0, [pc, #336]	; (8007e88 <_printf_i+0x244>)
 8007d38:	2f6f      	cmp	r7, #111	; 0x6f
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2308      	moveq	r3, #8
 8007d3e:	230a      	movne	r3, #10
 8007d40:	2100      	movs	r1, #0
 8007d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d46:	6866      	ldr	r6, [r4, #4]
 8007d48:	60a6      	str	r6, [r4, #8]
 8007d4a:	2e00      	cmp	r6, #0
 8007d4c:	bfa2      	ittt	ge
 8007d4e:	6821      	ldrge	r1, [r4, #0]
 8007d50:	f021 0104 	bicge.w	r1, r1, #4
 8007d54:	6021      	strge	r1, [r4, #0]
 8007d56:	b90d      	cbnz	r5, 8007d5c <_printf_i+0x118>
 8007d58:	2e00      	cmp	r6, #0
 8007d5a:	d04d      	beq.n	8007df8 <_printf_i+0x1b4>
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d62:	fb03 5711 	mls	r7, r3, r1, r5
 8007d66:	5dc7      	ldrb	r7, [r0, r7]
 8007d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d6c:	462f      	mov	r7, r5
 8007d6e:	42bb      	cmp	r3, r7
 8007d70:	460d      	mov	r5, r1
 8007d72:	d9f4      	bls.n	8007d5e <_printf_i+0x11a>
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d10b      	bne.n	8007d90 <_printf_i+0x14c>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	07df      	lsls	r7, r3, #31
 8007d7c:	d508      	bpl.n	8007d90 <_printf_i+0x14c>
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	6861      	ldr	r1, [r4, #4]
 8007d82:	4299      	cmp	r1, r3
 8007d84:	bfde      	ittt	le
 8007d86:	2330      	movle	r3, #48	; 0x30
 8007d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d90:	1b92      	subs	r2, r2, r6
 8007d92:	6122      	str	r2, [r4, #16]
 8007d94:	f8cd a000 	str.w	sl, [sp]
 8007d98:	464b      	mov	r3, r9
 8007d9a:	aa03      	add	r2, sp, #12
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7ff fee2 	bl	8007b68 <_printf_common>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d14c      	bne.n	8007e42 <_printf_i+0x1fe>
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	b004      	add	sp, #16
 8007dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db2:	4835      	ldr	r0, [pc, #212]	; (8007e88 <_printf_i+0x244>)
 8007db4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	680e      	ldr	r6, [r1, #0]
 8007dbc:	061f      	lsls	r7, r3, #24
 8007dbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007dc2:	600e      	str	r6, [r1, #0]
 8007dc4:	d514      	bpl.n	8007df0 <_printf_i+0x1ac>
 8007dc6:	07d9      	lsls	r1, r3, #31
 8007dc8:	bf44      	itt	mi
 8007dca:	f043 0320 	orrmi.w	r3, r3, #32
 8007dce:	6023      	strmi	r3, [r4, #0]
 8007dd0:	b91d      	cbnz	r5, 8007dda <_printf_i+0x196>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	f023 0320 	bic.w	r3, r3, #32
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	2310      	movs	r3, #16
 8007ddc:	e7b0      	b.n	8007d40 <_printf_i+0xfc>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f043 0320 	orr.w	r3, r3, #32
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	2378      	movs	r3, #120	; 0x78
 8007de8:	4828      	ldr	r0, [pc, #160]	; (8007e8c <_printf_i+0x248>)
 8007dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dee:	e7e3      	b.n	8007db8 <_printf_i+0x174>
 8007df0:	065e      	lsls	r6, r3, #25
 8007df2:	bf48      	it	mi
 8007df4:	b2ad      	uxthmi	r5, r5
 8007df6:	e7e6      	b.n	8007dc6 <_printf_i+0x182>
 8007df8:	4616      	mov	r6, r2
 8007dfa:	e7bb      	b.n	8007d74 <_printf_i+0x130>
 8007dfc:	680b      	ldr	r3, [r1, #0]
 8007dfe:	6826      	ldr	r6, [r4, #0]
 8007e00:	6960      	ldr	r0, [r4, #20]
 8007e02:	1d1d      	adds	r5, r3, #4
 8007e04:	600d      	str	r5, [r1, #0]
 8007e06:	0635      	lsls	r5, r6, #24
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	d501      	bpl.n	8007e10 <_printf_i+0x1cc>
 8007e0c:	6018      	str	r0, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <_printf_i+0x1d2>
 8007e10:	0671      	lsls	r1, r6, #25
 8007e12:	d5fb      	bpl.n	8007e0c <_printf_i+0x1c8>
 8007e14:	8018      	strh	r0, [r3, #0]
 8007e16:	2300      	movs	r3, #0
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	4616      	mov	r6, r2
 8007e1c:	e7ba      	b.n	8007d94 <_printf_i+0x150>
 8007e1e:	680b      	ldr	r3, [r1, #0]
 8007e20:	1d1a      	adds	r2, r3, #4
 8007e22:	600a      	str	r2, [r1, #0]
 8007e24:	681e      	ldr	r6, [r3, #0]
 8007e26:	6862      	ldr	r2, [r4, #4]
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7f8 fa10 	bl	8000250 <memchr>
 8007e30:	b108      	cbz	r0, 8007e36 <_printf_i+0x1f2>
 8007e32:	1b80      	subs	r0, r0, r6
 8007e34:	6060      	str	r0, [r4, #4]
 8007e36:	6863      	ldr	r3, [r4, #4]
 8007e38:	6123      	str	r3, [r4, #16]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e40:	e7a8      	b.n	8007d94 <_printf_i+0x150>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	4632      	mov	r2, r6
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	47d0      	blx	sl
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d0ab      	beq.n	8007da8 <_printf_i+0x164>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	079b      	lsls	r3, r3, #30
 8007e54:	d413      	bmi.n	8007e7e <_printf_i+0x23a>
 8007e56:	68e0      	ldr	r0, [r4, #12]
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	4298      	cmp	r0, r3
 8007e5c:	bfb8      	it	lt
 8007e5e:	4618      	movlt	r0, r3
 8007e60:	e7a4      	b.n	8007dac <_printf_i+0x168>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4632      	mov	r2, r6
 8007e66:	4649      	mov	r1, r9
 8007e68:	4640      	mov	r0, r8
 8007e6a:	47d0      	blx	sl
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d09b      	beq.n	8007da8 <_printf_i+0x164>
 8007e70:	3501      	adds	r5, #1
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	9903      	ldr	r1, [sp, #12]
 8007e76:	1a5b      	subs	r3, r3, r1
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	dcf2      	bgt.n	8007e62 <_printf_i+0x21e>
 8007e7c:	e7eb      	b.n	8007e56 <_printf_i+0x212>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	f104 0619 	add.w	r6, r4, #25
 8007e84:	e7f5      	b.n	8007e72 <_printf_i+0x22e>
 8007e86:	bf00      	nop
 8007e88:	08009545 	.word	0x08009545
 8007e8c:	08009556 	.word	0x08009556

08007e90 <_putc_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460d      	mov	r5, r1
 8007e94:	4614      	mov	r4, r2
 8007e96:	4606      	mov	r6, r0
 8007e98:	b118      	cbz	r0, 8007ea2 <_putc_r+0x12>
 8007e9a:	6983      	ldr	r3, [r0, #24]
 8007e9c:	b90b      	cbnz	r3, 8007ea2 <_putc_r+0x12>
 8007e9e:	f7ff fb41 	bl	8007524 <__sinit>
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <_putc_r+0x84>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	d124      	bne.n	8007ef2 <_putc_r+0x62>
 8007ea8:	6874      	ldr	r4, [r6, #4]
 8007eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eac:	07d8      	lsls	r0, r3, #31
 8007eae:	d405      	bmi.n	8007ebc <_putc_r+0x2c>
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	0599      	lsls	r1, r3, #22
 8007eb4:	d402      	bmi.n	8007ebc <_putc_r+0x2c>
 8007eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb8:	f7ff fbe4 	bl	8007684 <__retarget_lock_acquire_recursive>
 8007ebc:	68a3      	ldr	r3, [r4, #8]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	60a3      	str	r3, [r4, #8]
 8007ec4:	da05      	bge.n	8007ed2 <_putc_r+0x42>
 8007ec6:	69a2      	ldr	r2, [r4, #24]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	db1c      	blt.n	8007f06 <_putc_r+0x76>
 8007ecc:	b2eb      	uxtb	r3, r5
 8007ece:	2b0a      	cmp	r3, #10
 8007ed0:	d019      	beq.n	8007f06 <_putc_r+0x76>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	6022      	str	r2, [r4, #0]
 8007ed8:	701d      	strb	r5, [r3, #0]
 8007eda:	b2ed      	uxtb	r5, r5
 8007edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ede:	07da      	lsls	r2, r3, #31
 8007ee0:	d405      	bmi.n	8007eee <_putc_r+0x5e>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	059b      	lsls	r3, r3, #22
 8007ee6:	d402      	bmi.n	8007eee <_putc_r+0x5e>
 8007ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eea:	f7ff fbcc 	bl	8007686 <__retarget_lock_release_recursive>
 8007eee:	4628      	mov	r0, r5
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <_putc_r+0x88>)
 8007ef4:	429c      	cmp	r4, r3
 8007ef6:	d101      	bne.n	8007efc <_putc_r+0x6c>
 8007ef8:	68b4      	ldr	r4, [r6, #8]
 8007efa:	e7d6      	b.n	8007eaa <_putc_r+0x1a>
 8007efc:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <_putc_r+0x8c>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	bf08      	it	eq
 8007f02:	68f4      	ldreq	r4, [r6, #12]
 8007f04:	e7d1      	b.n	8007eaa <_putc_r+0x1a>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4622      	mov	r2, r4
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff f912 	bl	8007134 <__swbuf_r>
 8007f10:	4605      	mov	r5, r0
 8007f12:	e7e3      	b.n	8007edc <_putc_r+0x4c>
 8007f14:	080094f4 	.word	0x080094f4
 8007f18:	08009514 	.word	0x08009514
 8007f1c:	080094d4 	.word	0x080094d4

08007f20 <_sbrk_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	; (8007f3c <_sbrk_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7fa fd3e 	bl	80029ac <_sbrk>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_sbrk_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_sbrk_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	200010ec 	.word	0x200010ec

08007f40 <__sread>:
 8007f40:	b510      	push	{r4, lr}
 8007f42:	460c      	mov	r4, r1
 8007f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f48:	f000 f8a8 	bl	800809c <_read_r>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	bfab      	itete	ge
 8007f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f52:	89a3      	ldrhlt	r3, [r4, #12]
 8007f54:	181b      	addge	r3, r3, r0
 8007f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f5a:	bfac      	ite	ge
 8007f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f5e:	81a3      	strhlt	r3, [r4, #12]
 8007f60:	bd10      	pop	{r4, pc}

08007f62 <__swrite>:
 8007f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f66:	461f      	mov	r7, r3
 8007f68:	898b      	ldrh	r3, [r1, #12]
 8007f6a:	05db      	lsls	r3, r3, #23
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	4616      	mov	r6, r2
 8007f72:	d505      	bpl.n	8007f80 <__swrite+0x1e>
 8007f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f78:	2302      	movs	r3, #2
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f000 f870 	bl	8008060 <_lseek_r>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	463b      	mov	r3, r7
 8007f90:	4628      	mov	r0, r5
 8007f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f96:	f000 b817 	b.w	8007fc8 <_write_r>

08007f9a <__sseek>:
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa2:	f000 f85d 	bl	8008060 <_lseek_r>
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	bf15      	itete	ne
 8007fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fb6:	81a3      	strheq	r3, [r4, #12]
 8007fb8:	bf18      	it	ne
 8007fba:	81a3      	strhne	r3, [r4, #12]
 8007fbc:	bd10      	pop	{r4, pc}

08007fbe <__sclose>:
 8007fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc2:	f000 b81b 	b.w	8007ffc <_close_r>
	...

08007fc8 <_write_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d07      	ldr	r5, [pc, #28]	; (8007fe8 <_write_r+0x20>)
 8007fcc:	4604      	mov	r4, r0
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	602a      	str	r2, [r5, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7fa faca 	bl	8002570 <_write>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_write_r+0x1e>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_write_r+0x1e>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	200010ec 	.word	0x200010ec

08007fec <abort>:
 8007fec:	b508      	push	{r3, lr}
 8007fee:	2006      	movs	r0, #6
 8007ff0:	f000 f88e 	bl	8008110 <raise>
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f7fa fc7d 	bl	80028f4 <_exit>
	...

08007ffc <_close_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	; (8008018 <_close_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7fa fc9b 	bl	8002942 <_close>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_close_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_close_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	200010ec 	.word	0x200010ec

0800801c <_fstat_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	; (800803c <_fstat_r+0x20>)
 8008020:	2300      	movs	r3, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	602b      	str	r3, [r5, #0]
 800802a:	f7fa fc96 	bl	800295a <_fstat>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d102      	bne.n	8008038 <_fstat_r+0x1c>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b103      	cbz	r3, 8008038 <_fstat_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	200010ec 	.word	0x200010ec

08008040 <_isatty_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d06      	ldr	r5, [pc, #24]	; (800805c <_isatty_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4604      	mov	r4, r0
 8008048:	4608      	mov	r0, r1
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	f7fa fc95 	bl	800297a <_isatty>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_isatty_r+0x1a>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_isatty_r+0x1a>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	200010ec 	.word	0x200010ec

08008060 <_lseek_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d07      	ldr	r5, [pc, #28]	; (8008080 <_lseek_r+0x20>)
 8008064:	4604      	mov	r4, r0
 8008066:	4608      	mov	r0, r1
 8008068:	4611      	mov	r1, r2
 800806a:	2200      	movs	r2, #0
 800806c:	602a      	str	r2, [r5, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	f7fa fc8e 	bl	8002990 <_lseek>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_lseek_r+0x1e>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_lseek_r+0x1e>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	200010ec 	.word	0x200010ec

08008084 <__malloc_lock>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__malloc_lock+0x8>)
 8008086:	f7ff bafd 	b.w	8007684 <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	200010e4 	.word	0x200010e4

08008090 <__malloc_unlock>:
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <__malloc_unlock+0x8>)
 8008092:	f7ff baf8 	b.w	8007686 <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	200010e4 	.word	0x200010e4

0800809c <_read_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	; (80080bc <_read_r+0x20>)
 80080a0:	4604      	mov	r4, r0
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	602a      	str	r2, [r5, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7fa fc2c 	bl	8002908 <_read>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_read_r+0x1e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_read_r+0x1e>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200010ec 	.word	0x200010ec

080080c0 <_raise_r>:
 80080c0:	291f      	cmp	r1, #31
 80080c2:	b538      	push	{r3, r4, r5, lr}
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	d904      	bls.n	80080d4 <_raise_r+0x14>
 80080ca:	2316      	movs	r3, #22
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080d6:	b112      	cbz	r2, 80080de <_raise_r+0x1e>
 80080d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080dc:	b94b      	cbnz	r3, 80080f2 <_raise_r+0x32>
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f830 	bl	8008144 <_getpid_r>
 80080e4:	462a      	mov	r2, r5
 80080e6:	4601      	mov	r1, r0
 80080e8:	4620      	mov	r0, r4
 80080ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ee:	f000 b817 	b.w	8008120 <_kill_r>
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d00a      	beq.n	800810c <_raise_r+0x4c>
 80080f6:	1c59      	adds	r1, r3, #1
 80080f8:	d103      	bne.n	8008102 <_raise_r+0x42>
 80080fa:	2316      	movs	r3, #22
 80080fc:	6003      	str	r3, [r0, #0]
 80080fe:	2001      	movs	r0, #1
 8008100:	e7e7      	b.n	80080d2 <_raise_r+0x12>
 8008102:	2400      	movs	r4, #0
 8008104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008108:	4628      	mov	r0, r5
 800810a:	4798      	blx	r3
 800810c:	2000      	movs	r0, #0
 800810e:	e7e0      	b.n	80080d2 <_raise_r+0x12>

08008110 <raise>:
 8008110:	4b02      	ldr	r3, [pc, #8]	; (800811c <raise+0xc>)
 8008112:	4601      	mov	r1, r0
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	f7ff bfd3 	b.w	80080c0 <_raise_r>
 800811a:	bf00      	nop
 800811c:	200009cc 	.word	0x200009cc

08008120 <_kill_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_kill_r+0x20>)
 8008124:	2300      	movs	r3, #0
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	4611      	mov	r1, r2
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	f7fa fbd1 	bl	80028d4 <_kill>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	d102      	bne.n	800813c <_kill_r+0x1c>
 8008136:	682b      	ldr	r3, [r5, #0]
 8008138:	b103      	cbz	r3, 800813c <_kill_r+0x1c>
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	bd38      	pop	{r3, r4, r5, pc}
 800813e:	bf00      	nop
 8008140:	200010ec 	.word	0x200010ec

08008144 <_getpid_r>:
 8008144:	f7fa bbbe 	b.w	80028c4 <_getpid>

08008148 <_init>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr

08008154 <_fini>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr
