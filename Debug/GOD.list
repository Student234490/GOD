
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  080061c8  080061c8  000161c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b8  080064b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c0  080064c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000070  08006538  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08006538  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  00034671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00036f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00037ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea8b  00000000  00000000  00038948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b3  00000000  00000000  000573d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bab63  00000000  00000000  00067786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001222e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a4  00000000  00000000  0012233c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080061ac 	.word	0x080061ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080061ac 	.word	0x080061ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b9 	b.w	8000684 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f838 	bl	8000708 <convert>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006a0:	1415      	asrs	r5, r2, #16
 80006a2:	0414      	lsls	r4, r2, #16
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f000 f82f 	bl	8000708 <convert>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80006b2:	4620      	mov	r0, r4
 80006b4:	4629      	mov	r1, r5
 80006b6:	f7ff fe1b 	bl	80002f0 <__aeabi_ldivmod>
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	4613      	mov	r3, r2
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}

080006c8 <printFix>:

void printFix(int32_t i) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	da05      	bge.n	80006e2 <printFix+0x1a>
            printf("-");
 80006d6:	202d      	movs	r0, #45	; 0x2d
 80006d8:	f004 fc44 	bl	8004f64 <putchar>
            i = ~i + 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	425b      	negs	r3, r3
 80006e0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1419      	asrs	r1, r3, #16
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	0c1b      	lsrs	r3, r3, #16
 80006f4:	461a      	mov	r2, r3
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <printFix+0x3c>)
 80006f8:	f004 fc1c 	bl	8004f34 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	080061c8 	.word	0x080061c8

08000708 <convert>:
	 */

       return i << 2;
   }

int32_t convert(int32_t i) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	041b      	lsls	r3, r3, #16
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000732:	b29b      	uxth	r3, r3
 8000734:	3301      	adds	r3, #1
 8000736:	425a      	negs	r2, r3
 8000738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800073c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000740:	bf58      	it	pl
 8000742:	4253      	negpl	r3, r2
 8000744:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800074c:	b29b      	uxth	r3, r3
 800074e:	89fa      	ldrh	r2, [r7, #14]
 8000750:	429a      	cmp	r2, r3
 8000752:	d00c      	beq.n	800076e <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800075a:	b29b      	uxth	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	89fa      	ldrh	r2, [r7, #14]
 8000768:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 800076c:	e002      	b.n	8000774 <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <RingBuffer_Write+0x5c>)
 8000770:	f004 fbe0 	bl	8004f34 <iprintf>
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	080061d8 	.word	0x080061d8

08000780 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    int result = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800078c:	e015      	b.n	80007ba <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b2f      	cmp	r3, #47	; 0x2f
 8000794:	d90e      	bls.n	80007b4 <string_to_int+0x34>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b39      	cmp	r3, #57	; 0x39
 800079c:	d80a      	bhi.n	80007b4 <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b30      	subs	r3, #48	; 0x30
 80007b0:	4413      	add	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
        }
        str++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
    while (*str) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1e5      	bne.n	800078e <string_to_int+0xe>
    }
    return result;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <powten>:

int powten(int x) {
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	int i = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd0f      	ble.n	8000802 <powten+0x32>
		for (int j = 0; j < x; j++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	e008      	b.n	80007fa <powten+0x2a>
			i *= 10;
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbf2      	blt.n	80007e8 <powten+0x18>
		}
	}
	return i;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <Altxx>:

int32_t Altxx(char *data) {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 8000818:	4921      	ldr	r1, [pc, #132]	; (80008a0 <Altxx+0x90>)
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f004 fc60 	bl	80050e0 <strtok>
 8000820:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
	int j = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 8000832:	e01a      	b.n	800086a <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 8000834:	69f8      	ldr	r0, [r7, #28]
 8000836:	f7ff ffa3 	bl	8000780 <string_to_int>
 800083a:	4602      	mov	r2, r0
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	f107 0120 	add.w	r1, r7, #32
 8000844:	440b      	add	r3, r1
 8000846:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d104      	bne.n	800085a <Altxx+0x4a>
 8000850:	69f8      	ldr	r0, [r7, #28]
 8000852:	f7ff fcef 	bl	8000234 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 8000860:	490f      	ldr	r1, [pc, #60]	; (80008a0 <Altxx+0x90>)
 8000862:	2000      	movs	r0, #0
 8000864:	f004 fc3c 	bl	80050e0 <strtok>
 8000868:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1e1      	bne.n	8000834 <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff48 	bl	8000708 <convert>
 8000878:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 800087a:	68fc      	ldr	r4, [r7, #12]
 800087c:	69b8      	ldr	r0, [r7, #24]
 800087e:	f7ff ffa7 	bl	80007d0 <powten>
 8000882:	4603      	mov	r3, r0
 8000884:	4619      	mov	r1, r3
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff fefe 	bl	8000688 <Rational>
 800088c:	4602      	mov	r2, r0
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4413      	add	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 8000894:	693b      	ldr	r3, [r7, #16]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	08006270 	.word	0x08006270

080008a4 <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <DDmmmmmm+0x90>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	82bb      	strh	r3, [r7, #20]
 80008b2:	2300      	movs	r3, #0
 80008b4:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2202      	movs	r2, #2
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fbe0 	bl	800508c <strncpy>
    strcpy(mm_str, data + 2);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	1c9a      	adds	r2, r3, #2
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fbd0 	bl	800507c <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff4d 	bl	8000780 <string_to_int>
 80008e6:	4603      	mov	r3, r0
 80008e8:	041b      	lsls	r3, r3, #16
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff45 	bl	8000780 <string_to_int>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80008fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	141d      	asrs	r5, r3, #16
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	041c      	lsls	r4, r3, #16
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <DDmmmmmm+0x94>)
 800090c:	f04f 0300 	mov.w	r3, #0
 8000910:	4620      	mov	r0, r4
 8000912:	4629      	mov	r1, r5
 8000914:	f7ff fcec 	bl	80002f0 <__aeabi_ldivmod>
 8000918:	4602      	mov	r2, r0
 800091a:	460b      	mov	r3, r1
 800091c:	4613      	mov	r3, r2
 800091e:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 8000920:	69fa      	ldr	r2, [r7, #28]
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	4413      	add	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]

    return cords;
 8000928:	69bb      	ldr	r3, [r7, #24]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bdb0      	pop	{r4, r5, r7, pc}
 8000932:	bf00      	nop
 8000934:	08006274 	.word	0x08006274
 8000938:	000927c0 	.word	0x000927c0

0800093c <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2203      	movs	r2, #3
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fb94 	bl	800508c <strncpy>
	strcpy(mm_str, data + 3);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1cda      	adds	r2, r3, #3
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fb84 	bl	800507c <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff01 	bl	8000780 <string_to_int>
 800097e:	4603      	mov	r3, r0
 8000980:	041b      	lsls	r3, r3, #16
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fef9 	bl	8000780 <string_to_int>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000996:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	141d      	asrs	r5, r3, #16
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	041c      	lsls	r4, r3, #16
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <DDDmmmmmm+0x90>)
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	4620      	mov	r0, r4
 80009aa:	4629      	mov	r1, r5
 80009ac:	f7ff fca0 	bl	80002f0 <__aeabi_ldivmod>
 80009b0:	4602      	mov	r2, r0
 80009b2:	460b      	mov	r3, r1
 80009b4:	4613      	mov	r3, r2
 80009b6:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	4413      	add	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
	return cords;
 80009c0:	69bb      	ldr	r3, [r7, #24]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	000927c0 	.word	0x000927c0

080009d0 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d101      	bne.n	80009f2 <RingBuffer_Read+0x22>
        return 0;  // No data
 80009ee:	2300      	movs	r3, #0
 80009f0:	e019      	b.n	8000a26 <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	5c9a      	ldrb	r2, [r3, r2]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	425a      	negs	r2, r3
 8000a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a18:	bf58      	it	pl
 8000a1a:	4253      	negpl	r3, r2
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
    return 1;
 8000a24:	2301      	movs	r3, #1
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	7b1b      	ldrb	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8097 	beq.w	8000b76 <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 8000a48:	4a6c      	ldr	r2, [pc, #432]	; (8000bfc <getGPGGA+0x1c8>)
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a52:	6018      	str	r0, [r3, #0]
 8000a54:	3304      	adds	r3, #4
 8000a56:	8019      	strh	r1, [r3, #0]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	0c0a      	lsrs	r2, r1, #16
 8000a5c:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f004 fb24 	bl	80050b2 <strstr>
 8000a6a:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80bf 	beq.w	8000bf2 <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 8000a74:	69b8      	ldr	r0, [r7, #24]
 8000a76:	f7ff fbdd 	bl	8000234 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b28      	cmp	r3, #40	; 0x28
 8000a7e:	d973      	bls.n	8000b68 <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 8000a80:	495f      	ldr	r1, [pc, #380]	; (8000c00 <getGPGGA+0x1cc>)
 8000a82:	69b8      	ldr	r0, [r7, #24]
 8000a84:	f004 fb2c 	bl	80050e0 <strtok>
 8000a88:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 8000a8e:	e067      	b.n	8000b60 <getGPGGA+0x12c>
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	3b03      	subs	r3, #3
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	d85a      	bhi.n	8000b4e <getGPGGA+0x11a>
 8000a98:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <getGPGGA+0x6c>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ac1 	.word	0x08000ac1
 8000aa4:	08000acf 	.word	0x08000acf
 8000aa8:	08000b01 	.word	0x08000b01
 8000aac:	08000b0f 	.word	0x08000b0f
 8000ab0:	08000b4f 	.word	0x08000b4f
 8000ab4:	08000b4f 	.word	0x08000b4f
 8000ab8:	08000b4f 	.word	0x08000b4f
 8000abc:	08000b41 	.word	0x08000b41
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8000ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ac2:	f7ff feef 	bl	80008a4 <DDmmmmmm>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	601a      	str	r2, [r3, #0]
							break;
 8000acc:	e040      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8000ace:	494d      	ldr	r1, [pc, #308]	; (8000c04 <getGPGGA+0x1d0>)
 8000ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ad2:	f7ff fba5 	bl	8000220 <strcmp>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ae4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 8000aec:	e030      	b.n	8000b50 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bfb8      	it	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	425a      	negs	r2, r3
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	601a      	str	r2, [r3, #0]
							break;
 8000afe:	e027      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 8000b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b02:	f7ff ff1b 	bl	800093c <DDDmmmmmm>
 8000b06:	4602      	mov	r2, r0
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
							break;
 8000b0c:	e020      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 8000b0e:	493e      	ldr	r1, [pc, #248]	; (8000c08 <getGPGGA+0x1d4>)
 8000b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b12:	f7ff fb85 	bl	8000220 <strcmp>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 8000b2c:	e010      	b.n	8000b50 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	425a      	negs	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
							break;
 8000b3e:	e007      	b.n	8000b50 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 8000b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b42:	f7ff fe65 	bl	8000810 <Altxx>
 8000b46:	4602      	mov	r2, r0
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	609a      	str	r2, [r3, #8]
							break;
 8000b4c:	e000      	b.n	8000b50 <getGPGGA+0x11c>
						}
						default: {
							break;
 8000b4e:	bf00      	nop
						}
					}
					i++;
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	3301      	adds	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000b56:	492a      	ldr	r1, [pc, #168]	; (8000c00 <getGPGGA+0x1cc>)
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f004 fac1 	bl	80050e0 <strtok>
 8000b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d194      	bne.n	8000a90 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s: %s \r\n", filter, sentence);
		}
	}
}
 8000b66:	e044      	b.n	8000bf2 <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 8000b68:	4828      	ldr	r0, [pc, #160]	; (8000c0c <getGPGGA+0x1d8>)
 8000b6a:	f004 fa7f 	bl	800506c <puts>
				gps->active = 0;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
}
 8000b74:	e03d      	b.n	8000bf2 <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 8000b76:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <getGPGGA+0x1dc>)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b80:	6018      	str	r0, [r3, #0]
 8000b82:	3304      	adds	r3, #4
 8000b84:	8019      	strh	r1, [r3, #0]
 8000b86:	3302      	adds	r3, #2
 8000b88:	0c0a      	lsrs	r2, r1, #16
 8000b8a:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f004 fa8d 	bl	80050b2 <strstr>
 8000b98:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d028      	beq.n	8000bf2 <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 8000ba0:	4917      	ldr	r1, [pc, #92]	; (8000c00 <getGPGGA+0x1cc>)
 8000ba2:	69f8      	ldr	r0, [r7, #28]
 8000ba4:	f004 fa9c 	bl	80050e0 <strtok>
 8000ba8:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8000bae:	e01d      	b.n	8000bec <getGPGGA+0x1b8>
				i++;
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 8000bb6:	4912      	ldr	r1, [pc, #72]	; (8000c00 <getGPGGA+0x1cc>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f004 fa91 	bl	80050e0 <strtok>
 8000bbe:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d112      	bne.n	8000bec <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 8000bc6:	4913      	ldr	r1, [pc, #76]	; (8000c14 <getGPGGA+0x1e0>)
 8000bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bca:	f7ff fb29 	bl	8000220 <strcmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d106      	bne.n	8000be2 <getGPGGA+0x1ae>
							gps->active = 1;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <getGPGGA+0x1e4>)
 8000bdc:	f004 fa46 	bl	800506c <puts>
 8000be0:	e003      	b.n	8000bea <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <getGPGGA+0x1e8>)
 8000be6:	f004 f9a5 	bl	8004f34 <iprintf>
						break;
 8000bea:	bf00      	nop
			while (tokPtr != NULL) {
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1de      	bne.n	8000bb0 <getGPGGA+0x17c>
}
 8000bf2:	bf00      	nop
 8000bf4:	3730      	adds	r7, #48	; 0x30
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	080062d4 	.word	0x080062d4
 8000c00:	08006278 	.word	0x08006278
 8000c04:	0800627c 	.word	0x0800627c
 8000c08:	08006280 	.word	0x08006280
 8000c0c:	08006284 	.word	0x08006284
 8000c10:	080062dc 	.word	0x080062dc
 8000c14:	080062a0 	.word	0x080062a0
 8000c18:	080062a4 	.word	0x080062a4
 8000c1c:	080062b8 	.word	0x080062b8

08000c20 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 8000c2a:	e01a      	b.n	8000c62 <process_uart_data+0x42>
        if (indx < sizeof(sentence) - 1) {
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <process_uart_data+0x60>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b62      	cmp	r3, #98	; 0x62
 8000c32:	d807      	bhi.n	8000c44 <process_uart_data+0x24>
            sentence[indx++] = c;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <process_uart_data+0x60>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	4911      	ldr	r1, [pc, #68]	; (8000c80 <process_uart_data+0x60>)
 8000c3c:	600a      	str	r2, [r1, #0]
 8000c3e:	7bf9      	ldrb	r1, [r7, #15]
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <process_uart_data+0x64>)
 8000c42:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	d10b      	bne.n	8000c62 <process_uart_data+0x42>
            sentence[indx] = '\0';  // Null-terminate the string
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <process_uart_data+0x60>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <process_uart_data+0x64>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	54d1      	strb	r1, [r2, r3]
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	480b      	ldr	r0, [pc, #44]	; (8000c84 <process_uart_data+0x64>)
 8000c58:	f7ff feec 	bl	8000a34 <getGPGGA>
            indx = 0;  // Reset for next line
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <process_uart_data+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8000c62:	f107 030f 	add.w	r3, r7, #15
 8000c66:	4619      	mov	r1, r3
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff feb1 	bl	80009d0 <RingBuffer_Read>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1db      	bne.n	8000c2c <process_uart_data+0xc>
        }
    }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000008c 	.word	0x2000008c
 8000c84:	200002a0 	.word	0x200002a0

08000c88 <printGPS>:

void printGPS(GPSRead_t GPS) {
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	463c      	mov	r4, r7
 8000c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("Active: %i ~ Latitude: ", GPS.active);
 8000c94:	7b3b      	ldrb	r3, [r7, #12]
 8000c96:	4619      	mov	r1, r3
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <printGPS+0x48>)
 8000c9a:	f004 f94b 	bl	8004f34 <iprintf>
	printFix(GPS.latitude);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd11 	bl	80006c8 <printFix>
	printf("deg ~ Longitude: ");
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <printGPS+0x4c>)
 8000ca8:	f004 f944 	bl	8004f34 <iprintf>
	printFix(GPS.longitude);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fd0a 	bl	80006c8 <printFix>
	printf("deg ~ Altitude: ");
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <printGPS+0x50>)
 8000cb6:	f004 f93d 	bl	8004f34 <iprintf>
	printFix(GPS.altitude);
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd03 	bl	80006c8 <printFix>
	printf("m. \r\n");
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <printGPS+0x54>)
 8000cc4:	f004 f9d2 	bl	800506c <puts>
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	080062e4 	.word	0x080062e4
 8000cd4:	080062fc 	.word	0x080062fc
 8000cd8:	08006310 	.word	0x08006310
 8000cdc:	08006324 	.word	0x08006324

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fbc2 	bl	800146e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f83d 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 f94d 	bl	8000f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cf2:	f000 f8ff 	bl	8000ef4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cf6:	f000 f877 	bl	8000de8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cfa:	f000 f8af 	bl	8000e5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4915      	ldr	r1, [pc, #84]	; (8000d58 <main+0x78>)
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <main+0x7c>)
 8000d04:	f002 f8f6 	bl	8002ef4 <HAL_UART_Receive_IT>
  GPSRead_t GPS = {0,0,0,0} ;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  while (1)
  {
	  HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f000 fc19 	bl	8001550 <HAL_Delay>
	  process_uart_data(&uart_rx_buf, &GPS);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <main+0x80>)
 8000d24:	f7ff ff7c 	bl	8000c20 <process_uart_data>
	  i++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
	  if (!(i % 1000)) {
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <main+0x84>)
 8000d32:	fb83 1302 	smull	r1, r3, r3, r2
 8000d36:	1199      	asrs	r1, r3, #6
 8000d38:	17d3      	asrs	r3, r2, #31
 8000d3a:	1acb      	subs	r3, r1, r3
 8000d3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d40:	fb01 f303 	mul.w	r3, r1, r3
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1e6      	bne.n	8000d18 <main+0x38>
		  i = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
		  printGPS(GPS);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d52:	f7ff ff99 	bl	8000c88 <printGPS>
	  HAL_Delay(10);
 8000d56:	e7df      	b.n	8000d18 <main+0x38>
 8000d58:	20000304 	.word	0x20000304
 8000d5c:	20000308 	.word	0x20000308
 8000d60:	20000090 	.word	0x20000090
 8000d64:	10624dd3 	.word	0x10624dd3

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	; 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2238      	movs	r2, #56	; 0x38
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 f8d4 	bl	8004f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d8e:	f000 ff53 	bl	8001c38 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fff9 	bl	8001da0 <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000db4:	f000 f936 	bl	8001024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 faf9 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ddc:	f000 f922 	bl	8001024 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3750      	adds	r7, #80	; 0x50
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <MX_SPI1_Init+0x70>)
 8000df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e00:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e2e:	2207      	movs	r2, #7
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_SPI1_Init+0x6c>)
 8000e40:	f001 fece 	bl	8002be0 <HAL_SPI_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000e4a:	f000 f8eb 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000039c 	.word	0x2000039c
 8000e58:	40013000 	.word	0x40013000

08000e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <MX_USART1_UART_Init+0x94>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea4:	4811      	ldr	r0, [pc, #68]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000ea6:	f001 ff46 	bl	8002d36 <HAL_UART_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eb0:	f000 f8b8 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000eb8:	f003 ff3f 	bl	8004d3a <HAL_UARTEx_SetTxFifoThreshold>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec2:	f000 f8af 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000eca:	f003 ff74 	bl	8004db6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 f8a6 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000eda:	f003 fef5 	bl	8004cc8 <HAL_UARTEx_DisableFifoMode>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 f89e 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000308 	.word	0x20000308
 8000ef0:	40013800 	.word	0x40013800

08000ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <MX_USART2_UART_Init+0x94>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3c:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f3e:	f001 fefa 	bl	8002d36 <HAL_UART_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f48:	f000 f86c 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f50:	f003 fef3 	bl	8004d3a <HAL_UARTEx_SetTxFifoThreshold>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 f863 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f62:	f003 ff28 	bl	8004db6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f6c:	f000 f85a 	bl	8001024 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_USART2_UART_Init+0x90>)
 8000f72:	f003 fea9 	bl	8004cc8 <HAL_UARTEx_DisableFifoMode>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 f852 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000400 	.word	0x20000400
 8000f88:	40004400 	.word	0x40004400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_GPIO_Init+0x2c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <MX_GPIO_Init+0x2c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_GPIO_Init+0x2c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <_write+0x28>)
 8000fd4:	f001 feff 	bl	8002dd6 <HAL_UART_Transmit>
    return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000400 	.word	0x20000400

08000fe8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_UART_RxCpltCallback+0x30>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d10a      	bne.n	800100e <HAL_UART_RxCpltCallback+0x26>
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_UART_RxCpltCallback+0x34>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <HAL_UART_RxCpltCallback+0x38>)
 8001000:	f7ff fb8e 	bl	8000720 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 8001004:	2201      	movs	r2, #1
 8001006:	4905      	ldr	r1, [pc, #20]	; (800101c <HAL_UART_RxCpltCallback+0x34>)
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_UART_RxCpltCallback+0x30>)
 800100a:	f001 ff73 	bl	8002ef4 <HAL_UART_Receive_IT>
	}
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000308 	.word	0x20000308
 800101c:	20000304 	.word	0x20000304
 8001020:	20000090 	.word	0x20000090

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x44>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x44>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x44>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x44>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001066:	f000 fe8b 	bl	8001d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_SPI_MspInit+0x7c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d128      	bne.n	80010ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0x80>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <HAL_SPI_MspInit+0x80>)
 80010a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_SPI_MspInit+0x80>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0x80>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_SPI_MspInit+0x80>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_SPI_MspInit+0x80>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23e0      	movs	r3, #224	; 0xe0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010da:	2305      	movs	r3, #5
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fc24 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40013000 	.word	0x40013000
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09c      	sub	sp, #112	; 0x70
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	2244      	movs	r2, #68	; 0x44
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f003 ff01 	bl	8004f24 <memset>
  if(huart->Instance==USART1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a42      	ldr	r2, [pc, #264]	; (8001230 <HAL_UART_MspInit+0x134>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d140      	bne.n	80011ae <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb61 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001144:	f7ff ff6e 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_UART_MspInit+0x138>)
 800114a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114c:	4a39      	ldr	r2, [pc, #228]	; (8001234 <HAL_UART_MspInit+0x138>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001152:	6613      	str	r3, [r2, #96]	; 0x60
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_UART_MspInit+0x138>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_UART_MspInit+0x138>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a33      	ldr	r2, [pc, #204]	; (8001234 <HAL_UART_MspInit+0x138>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_UART_MspInit+0x138>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001178:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800118a:	2307      	movs	r3, #7
 800118c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001198:	f000 fbcc 	bl	8001934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2025      	movs	r0, #37	; 0x25
 80011a2:	f000 fad2 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	f000 fae9 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ac:	e03b      	b.n	8001226 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_UART_MspInit+0x13c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d136      	bne.n	8001226 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fb1b 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80011d0:	f7ff ff28 	bl	8001024 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x138>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <HAL_UART_MspInit+0x138>)
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	6593      	str	r3, [r2, #88]	; 0x58
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x138>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_UART_MspInit+0x138>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_UART_MspInit+0x138>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_UART_MspInit+0x138>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001204:	230c      	movs	r3, #12
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001214:	2307      	movs	r3, #7
 8001216:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f000 fb87 	bl	8001934 <HAL_GPIO_Init>
}
 8001226:	bf00      	nop
 8001228:	3770      	adds	r7, #112	; 0x70
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40013800 	.word	0x40013800
 8001234:	40021000 	.word	0x40021000
 8001238:	40004400 	.word	0x40004400

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f944 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <USART1_IRQHandler+0x10>)
 8001296:	f001 fe79 	bl	8002f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000308 	.word	0x20000308

080012a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_kill>:

int _kill(int pid, int sig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012be:	f003 fe07 	bl	8004ed0 <__errno>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2216      	movs	r2, #22
 80012c6:	601a      	str	r2, [r3, #0]
	return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe7 	bl	80012b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012e6:	e7fe      	b.n	80012e6 <_exit+0x12>

080012e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
	}

return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
	return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134a:	605a      	str	r2, [r3, #4]
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_isatty>:

int _isatty(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	return 1;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f003 fd88 	bl	8004ed0 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20008000 	.word	0x20008000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000294 	.word	0x20000294
 80013f4:	200004a8 	.word	0x200004a8

080013f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800141e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001420:	f7ff ffea 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	; (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	; (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f003 fd47 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144e:	f7ff fc47 	bl	8000ce0 <main>

08001452 <LoopForever>:

LoopForever:
    b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   r0, =_estack
 8001454:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001460:	080064c8 	.word	0x080064c8
  ldr r2, =_sbss
 8001464:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001468:	200004a8 	.word	0x200004a8

0800146c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_2_IRQHandler>

0800146e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f95b 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f80e 	bl	80014a0 <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	e001      	b.n	8001494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001490:	f7ff fdce 	bl	8001030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001494:	79fb      	ldrb	r3, [r7, #7]

}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_InitTick+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d022      	beq.n	80014fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_InitTick+0x6c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f966 	bl	800179a <HAL_SYSTICK_Config>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10f      	bne.n	80014f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d809      	bhi.n	80014ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014da:	2200      	movs	r2, #0
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	f000 f932 	bl	800174a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_InitTick+0x70>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e007      	b.n	80014fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e004      	b.n	80014fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000008 	.word	0x20000008
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x1c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x20>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	4a03      	ldr	r2, [pc, #12]	; (8001530 <HAL_IncTick+0x1c>)
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	20000494 	.word	0x20000494
 8001534:	20000008 	.word	0x20000008

08001538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000494 	.word	0x20000494

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff ffee 	bl	8001538 <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d004      	beq.n	8001574 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_Delay+0x40>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001574:	bf00      	nop
 8001576:	f7ff ffdf 	bl	8001538 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8f7      	bhi.n	8001576 <HAL_Delay+0x26>
  {
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000008 	.word	0x20000008

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff40 	bl	80015dc <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff33 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa4 	bl	80016f0 <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d005      	beq.n	80017d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2204      	movs	r2, #4
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e037      	b.n	8001846 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020e 	bic.w	r2, r2, #14
 80017e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f003 021f 	and.w	r2, r3, #31
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001822:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00c      	beq.n	8001846 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001844:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d00d      	beq.n	8001898 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	e047      	b.n	8001928 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001906:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
    }
  }
  return status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001942:	e15a      	b.n	8001bfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 814c 	beq.w	8001bf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d005      	beq.n	8001974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001970:	2b02      	cmp	r3, #2
 8001972:	d130      	bne.n	80019d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019aa:	2201      	movs	r2, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 0201 	and.w	r2, r3, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d017      	beq.n	8001a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	6939      	ldr	r1, [r7, #16]
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0203 	and.w	r2, r3, #3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a6 	beq.w	8001bf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_GPIO_Init+0x2e4>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aac:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_GPIO_Init+0x2e4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab4:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <HAL_GPIO_Init+0x2e4>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac0:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aea:	d01f      	beq.n	8001b2c <HAL_GPIO_Init+0x1f8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_GPIO_Init+0x2ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d019      	beq.n	8001b28 <HAL_GPIO_Init+0x1f4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_GPIO_Init+0x2f0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_GPIO_Init+0x1f0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <HAL_GPIO_Init+0x2f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1ec>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <HAL_GPIO_Init+0x2f8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1e8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2fc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1e4>
 8001b14:	2305      	movs	r3, #5
 8001b16:	e00a      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b18:	2306      	movs	r3, #6
 8001b1a:	e008      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3e:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b70:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b9a:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_GPIO_Init+0x300>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f ae9d 	bne.w	8001944 <HAL_GPIO_Init+0x10>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	48001000 	.word	0x48001000
 8001c30:	48001400 	.word	0x48001400
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d141      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c46:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c52:	d131      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c54:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5a:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c6c:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2232      	movs	r2, #50	; 0x32
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a3f      	ldr	r2, [pc, #252]	; (8001d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8a:	e002      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9e:	d102      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f2      	bne.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb2:	d158      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e057      	b.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cc8:	e04d      	b.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd0:	d141      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cde:	d131      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce6:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2232      	movs	r2, #50	; 0x32
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d16:	e002      	b.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d102      	bne.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f2      	bne.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3e:	d112      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e011      	b.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d54:	e007      	b.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40007000 	.word	0x40007000
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83

08001d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e301      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbe:	4ba3      	ldr	r3, [pc, #652]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	4ba0      	ldr	r3, [pc, #640]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d102      	bne.n	8001dde <HAL_RCC_OscConfig+0x3e>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b99      	ldr	r3, [pc, #612]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e2dc      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a90      	ldr	r2, [pc, #576]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a8a      	ldr	r2, [pc, #552]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a83      	ldr	r2, [pc, #524]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a80      	ldr	r2, [pc, #512]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb6e 	bl	8001538 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fb6a 	bl	8001538 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e2a1      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff fb5a 	bl	8001538 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fb56 	bl	8001538 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e28d      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x136>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_OscConfig+0x13c>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11f      	bne.n	8001f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	4b5b      	ldr	r3, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x154>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e260      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	4952      	ldr	r1, [pc, #328]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f08:	4b51      	ldr	r3, [pc, #324]	; (8002050 <HAL_RCC_OscConfig+0x2b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fac7 	bl	80014a0 <HAL_InitTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d043      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e24c      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	4b49      	ldr	r3, [pc, #292]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a48      	ldr	r2, [pc, #288]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fb02 	bl	8001538 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff fafe 	bl	8001538 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e235      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	4939      	ldr	r1, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
 8001f6a:	e01a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a36      	ldr	r2, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff fade 	bl	8001538 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff fada 	bl	8001538 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e211      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e0>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d03c      	beq.n	8002028 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbc:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fab7 	bl	8001538 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fab3 	bl	8001538 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1ea      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ef      	beq.n	8001fce <HAL_RCC_OscConfig+0x22e>
 8001fee:	e01b      	b.n	8002028 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fa9a 	bl	8001538 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fa96 	bl	8001538 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1cd      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ef      	bne.n	8002008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80ab 	beq.w	800218c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_RCC_OscConfig+0x2b4>
 8002046:	2301      	movs	r3, #1
 8002048:	e005      	b.n	8002056 <HAL_RCC_OscConfig+0x2b6>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	20000004 	.word	0x20000004
 8002054:	2300      	movs	r3, #0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4bad      	ldr	r3, [pc, #692]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4aac      	ldr	r2, [pc, #688]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
 8002066:	4baa      	ldr	r3, [pc, #680]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002076:	4ba7      	ldr	r3, [pc, #668]	; (8002314 <HAL_RCC_OscConfig+0x574>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002082:	4ba4      	ldr	r3, [pc, #656]	; (8002314 <HAL_RCC_OscConfig+0x574>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4aa3      	ldr	r2, [pc, #652]	; (8002314 <HAL_RCC_OscConfig+0x574>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7ff fa53 	bl	8001538 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff fa4f 	bl	8001538 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e186      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b9a      	ldr	r3, [pc, #616]	; (8002314 <HAL_RCC_OscConfig+0x574>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_RCC_OscConfig+0x32e>
 80020bc:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a93      	ldr	r2, [pc, #588]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020cc:	e024      	b.n	8002118 <HAL_RCC_OscConfig+0x378>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d110      	bne.n	80020f8 <HAL_RCC_OscConfig+0x358>
 80020d6:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	4a8c      	ldr	r2, [pc, #560]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e6:	4b8a      	ldr	r3, [pc, #552]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	4a88      	ldr	r2, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f6:	e00f      	b.n	8002118 <HAL_RCC_OscConfig+0x378>
 80020f8:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a84      	ldr	r2, [pc, #528]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a80      	ldr	r2, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d016      	beq.n	800214e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff fa0a 	bl	8001538 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff fa06 	bl	8001538 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e13b      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ed      	beq.n	8002128 <HAL_RCC_OscConfig+0x388>
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff f9f3 	bl	8001538 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff f9ef 	bl	8001538 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e124      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ed      	bne.n	8002156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a62      	ldr	r2, [pc, #392]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03c      	beq.n	8002212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01c      	beq.n	80021da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021a0:	4b5b      	ldr	r3, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80021a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff f9c2 	bl	8001538 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b8:	f7ff f9be 	bl	8001538 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0f5      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ca:	4b51      	ldr	r3, [pc, #324]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80021cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCC_OscConfig+0x418>
 80021d8:	e01b      	b.n	8002212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021da:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80021dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7ff f9a5 	bl	8001538 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f2:	f7ff f9a1 	bl	8001538 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0d8      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ef      	bne.n	80021f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80cc 	beq.w	80023b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b0c      	cmp	r3, #12
 8002226:	f000 8086 	beq.w	8002336 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d15a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a36      	ldr	r2, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff f97b 	bl	8001538 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff f977 	bl	8001538 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0ae      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x578>)
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6a11      	ldr	r1, [r2, #32]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002274:	3a01      	subs	r2, #1
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800227e:	0212      	lsls	r2, r2, #8
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002286:	0852      	lsrs	r2, r2, #1
 8002288:	3a01      	subs	r2, #1
 800228a:	0552      	lsls	r2, r2, #21
 800228c:	4311      	orrs	r1, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002292:	0852      	lsrs	r2, r2, #1
 8002294:	3a01      	subs	r2, #1
 8002296:	0652      	lsls	r2, r2, #25
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800229e:	06d2      	lsls	r2, r2, #27
 80022a0:	430a      	orrs	r2, r1
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f93a 	bl	8001538 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff f936 	bl	8001538 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e06d      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x528>
 80022e6:	e065      	b.n	80023b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_RCC_OscConfig+0x570>)
 80022ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff f920 	bl	8001538 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fa:	e00f      	b.n	800231c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff f91c 	bl	8001538 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d908      	bls.n	800231c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e053      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_RCC_OscConfig+0x620>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e9      	bne.n	80022fc <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_OscConfig+0x620>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4924      	ldr	r1, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x620>)
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x624>)
 8002330:	4013      	ands	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
 8002334:	e03e      	b.n	80023b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e039      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_RCC_OscConfig+0x620>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0203 	and.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	429a      	cmp	r2, r3
 8002354:	d12c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	3b01      	subs	r3, #1
 8002362:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d123      	bne.n	80023b0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d11b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d113      	bne.n	80023b0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	feeefffc 	.word	0xfeeefffc

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e11e      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d910      	bls.n	8002410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b8e      	ldr	r3, [pc, #568]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 020f 	bic.w	r2, r3, #15
 80023f6:	498c      	ldr	r1, [pc, #560]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b8a      	ldr	r3, [pc, #552]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e106      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d073      	beq.n	8002504 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d129      	bne.n	8002478 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0f4      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002434:	f000 f99e 	bl	8002774 <RCC_GetSysClockFreqFromPLLSource>
 8002438:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4a7c      	ldr	r2, [pc, #496]	; (8002630 <HAL_RCC_ClockConfig+0x268>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d93f      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002456:	2b00      	cmp	r3, #0
 8002458:	d033      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d12f      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002462:	4b72      	ldr	r3, [pc, #456]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246a:	4a70      	ldr	r2, [pc, #448]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e024      	b.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d107      	bne.n	8002490 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0c6      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0be      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024a0:	f000 f8ce 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4a61      	ldr	r2, [pc, #388]	; (8002630 <HAL_RCC_ClockConfig+0x268>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d909      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b6:	4a5d      	ldr	r2, [pc, #372]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4957      	ldr	r1, [pc, #348]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7ff f830 	bl	8001538 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff f82c 	bl	8001538 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e095      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d023      	beq.n	8002558 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a42      	ldr	r2, [pc, #264]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002522:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002526:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002534:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800253c:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 800253e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4936      	ldr	r1, [pc, #216]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
 8002556:	e008      	b.n	800256a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b80      	cmp	r3, #128	; 0x80
 800255c:	d105      	bne.n	800256a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 8002564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002568:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d21d      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 020f 	bic.w	r2, r3, #15
 8002580:	4929      	ldr	r1, [pc, #164]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002588:	f7fe ffd6 	bl	8001538 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7fe ffd2 	bl	8001538 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e03b      	b.n	800261e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1ed      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4917      	ldr	r1, [pc, #92]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490f      	ldr	r1, [pc, #60]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f2:	f000 f825 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_RCC_ClockConfig+0x264>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490c      	ldr	r1, [pc, #48]	; (8002634 <HAL_RCC_ClockConfig+0x26c>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x270>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe ff42 	bl	80014a0 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	04c4b400 	.word	0x04c4b400
 8002634:	0800632c 	.word	0x0800632c
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d102      	bne.n	8002658 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	e047      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d102      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e03e      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d136      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800269e:	68d2      	ldr	r2, [r2, #12]
 80026a0:	0a12      	lsrs	r2, r2, #8
 80026a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	617b      	str	r3, [r7, #20]
      break;
 80026ac:	e00c      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	0a12      	lsrs	r2, r2, #8
 80026bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
      break;
 80026c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0e5b      	lsrs	r3, r3, #25
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e001      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026e8:	693b      	ldr	r3, [r7, #16]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	0800633c 	.word	0x0800633c

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800274c:	f7ff ffda 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0adb      	lsrs	r3, r3, #11
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	0800633c 	.word	0x0800633c

08002774 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3301      	adds	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d10c      	bne.n	80027b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a2:	68d2      	ldr	r2, [r2, #12]
 80027a4:	0a12      	lsrs	r2, r2, #8
 80027a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	617b      	str	r3, [r7, #20]
    break;
 80027b0:	e00c      	b.n	80027cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	0a12      	lsrs	r2, r2, #8
 80027c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    break;
 80027ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0e5b      	lsrs	r3, r3, #25
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027e6:	687b      	ldr	r3, [r7, #4]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	00f42400 	.word	0x00f42400

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002808:	2300      	movs	r3, #0
 800280a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800280c:	2300      	movs	r3, #0
 800280e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8098 	beq.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a3f      	ldr	r2, [pc, #252]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
 800283a:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	2301      	movs	r3, #1
 8002848:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284a:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002856:	f7fe fe6f 	bl	8001538 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285c:	e009      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe fe6b 	bl	8001538 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	74fb      	strb	r3, [r7, #19]
        break;
 8002870:	e005      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ef      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d159      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01e      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	d019      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028cc:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fe2b 	bl	8001538 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e4:	e00b      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fe27 	bl	8001538 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d902      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	74fb      	strb	r3, [r7, #19]
            break;
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ec      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002928:	e008      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	74bb      	strb	r3, [r7, #18]
 800292e:	e005      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293c:	7c7b      	ldrb	r3, [r7, #17]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4ba6      	ldr	r3, [pc, #664]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4aa5      	ldr	r2, [pc, #660]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295a:	4ba0      	ldr	r3, [pc, #640]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 0203 	bic.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	499c      	ldr	r1, [pc, #624]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297c:	4b97      	ldr	r3, [pc, #604]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 020c 	bic.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4994      	ldr	r1, [pc, #592]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800299e:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	498b      	ldr	r1, [pc, #556]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c0:	4b86      	ldr	r3, [pc, #536]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4983      	ldr	r1, [pc, #524]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e2:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	497a      	ldr	r1, [pc, #488]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4972      	ldr	r1, [pc, #456]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4969      	ldr	r1, [pc, #420]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4961      	ldr	r1, [pc, #388]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	4958      	ldr	r1, [pc, #352]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	4950      	ldr	r1, [pc, #320]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac4:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4942      	ldr	r1, [pc, #264]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a3c      	ldr	r2, [pc, #240]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4934      	ldr	r1, [pc, #208]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	4926      	ldr	r1, [pc, #152]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	4918      	ldr	r1, [pc, #96]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e09d      	b.n	8002d2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c02:	d009      	beq.n	8002c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fa20 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c58:	d902      	bls.n	8002c60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e002      	b.n	8002c66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c6e:	d007      	beq.n	8002c80 <HAL_SPI_Init+0xa0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	ea42 0103 	orr.w	r1, r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	f003 0204 	and.w	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e042      	b.n	8002dce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe f9ce 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fee3 	bl	8003b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fc44 	bl	8003614 <UART_SetConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e01b      	b.n	8002dce <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 ff62 	bl	8003c90 <UART_CheckIdleState>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b08a      	sub	sp, #40	; 0x28
 8002dda:	af02      	add	r7, sp, #8
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d17b      	bne.n	8002ee8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Transmit+0x26>
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e074      	b.n	8002eea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2221      	movs	r2, #33	; 0x21
 8002e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e10:	f7fe fb92 	bl	8001538 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d108      	bne.n	8002e42 <HAL_UART_Transmit+0x6c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	e003      	b.n	8002e4a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e4a:	e030      	b.n	8002eae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 ffc4 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e03d      	b.n	8002eea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	3302      	adds	r3, #2
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	e007      	b.n	8002e9c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1c8      	bne.n	8002e4c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 ff8d 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e006      	b.n	8002eea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d137      	bne.n	8002f7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_UART_Receive_IT+0x24>
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e030      	b.n	8002f7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_UART_Receive_IT+0x94>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01f      	beq.n	8002f6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d018      	beq.n	8002f6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	613b      	str	r3, [r7, #16]
   return(result);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	69f9      	ldr	r1, [r7, #28]
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e6      	bne.n	8002f3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 ffa4 	bl	8003ec0 <UART_Start_Receive_IT>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40008000 	.word	0x40008000

08002f8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b0ba      	sub	sp, #232	; 0xe8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fba:	4013      	ands	r3, r2
 8002fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11b      	bne.n	8003000 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 82e3 	beq.w	80035bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
      }
      return;
 8002ffe:	e2dd      	b.n	80035bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8123 	beq.w	8003250 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800300a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800300e:	4b8d      	ldr	r3, [pc, #564]	; (8003244 <HAL_UART_IRQHandler+0x2b8>)
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800301a:	4b8b      	ldr	r3, [pc, #556]	; (8003248 <HAL_UART_IRQHandler+0x2bc>)
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8116 	beq.w	8003250 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d011      	beq.n	8003054 <HAL_UART_IRQHandler+0xc8>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2201      	movs	r2, #1
 8003042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d011      	beq.n	8003084 <HAL_UART_IRQHandler+0xf8>
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2202      	movs	r2, #2
 8003072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d011      	beq.n	80030b4 <HAL_UART_IRQHandler+0x128>
 8003090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2204      	movs	r2, #4
 80030a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d017      	beq.n	80030f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030d0:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_UART_IRQHandler+0x2b8>)
 80030d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2208      	movs	r2, #8
 80030de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f043 0208 	orr.w	r2, r3, #8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d012      	beq.n	8003122 <HAL_UART_IRQHandler+0x196>
 80030fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00c      	beq.n	8003122 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8249 	beq.w	80035c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d013      	beq.n	8003162 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800313a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800317a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800317e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003182:	2b00      	cmp	r3, #0
 8003184:	d054      	beq.n	8003230 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 ffbc 	bl	8004104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d146      	bne.n	8003228 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3308      	adds	r3, #8
 80031a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1d9      	bne.n	800319a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <HAL_UART_IRQHandler+0x2c0>)
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fb2f 	bl	8001864 <HAL_DMA_Abort_IT>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d019      	beq.n	8003240 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800321a:	4610      	mov	r0, r2
 800321c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321e:	e00f      	b.n	8003240 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f9e1 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003226:	e00b      	b.n	8003240 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f9dd 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322e:	e007      	b.n	8003240 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f9d9 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800323e:	e1bf      	b.n	80035c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	bf00      	nop
    return;
 8003242:	e1bd      	b.n	80035c0 <HAL_UART_IRQHandler+0x634>
 8003244:	10000001 	.word	0x10000001
 8003248:	04000120 	.word	0x04000120
 800324c:	080041d1 	.word	0x080041d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003254:	2b01      	cmp	r3, #1
 8003256:	f040 8153 	bne.w	8003500 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 814c 	beq.w	8003500 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8145 	beq.w	8003500 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2210      	movs	r2, #16
 800327c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	f040 80bb 	bne.w	8003404 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800329c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 818f 	beq.w	80035c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b0:	429a      	cmp	r2, r3
 80032b2:	f080 8187 	bcs.w	80035c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 8087 	bne.w	80033e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003302:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800330a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1da      	bne.n	80032d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3308      	adds	r3, #8
 8003324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800332e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3308      	adds	r3, #8
 800333e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800334a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e1      	bne.n	800331e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800337e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800338c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b0:	f023 0310 	bic.w	r3, r3, #16
 80033b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80033c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e4      	bne.n	80033a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe f9e8 	bl	80017b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8fd 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003402:	e0df      	b.n	80035c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003410:	b29b      	uxth	r3, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80d1 	beq.w	80035c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80cc 	beq.w	80035c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003452:	647b      	str	r3, [r7, #68]	; 0x44
 8003454:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e4      	bne.n	8003430 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3308      	adds	r3, #8
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	623b      	str	r3, [r7, #32]
   return(result);
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3308      	adds	r3, #8
 800348a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800348e:	633a      	str	r2, [r7, #48]	; 0x30
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e1      	bne.n	8003466 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0310 	bic.w	r3, r3, #16
 80034ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	69b9      	ldr	r1, [r7, #24]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	617b      	str	r3, [r7, #20]
   return(result);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e4      	bne.n	80034b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f87f 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034fe:	e063      	b.n	80035c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <HAL_UART_IRQHandler+0x59e>
 800350c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f001 fbb2 	bl	8004c8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003528:	e051      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03a      	beq.n	80035cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    }
    return;
 800355e:	e035      	b.n	80035cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <HAL_UART_IRQHandler+0x5f4>
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fe3f 	bl	80041fc <UART_EndTransmit_IT>
    return;
 800357e:	e026      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_UART_IRQHandler+0x614>
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fb8b 	bl	8004cb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800359e:	e016      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_UART_IRQHandler+0x642>
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da0c      	bge.n	80035ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f001 fb73 	bl	8004ca0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ba:	e008      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
      return;
 80035bc:	bf00      	nop
 80035be:	e006      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
    return;
 80035c0:	bf00      	nop
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
      return;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
      return;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x642>
    return;
 80035cc:	bf00      	nop
  }
}
 80035ce:	37e8      	adds	r7, #232	; 0xe8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	b5b0      	push	{r4, r5, r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4313      	orrs	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4baf      	ldr	r3, [pc, #700]	; (80038fc <UART_SetConfig+0x2e8>)
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	69f9      	ldr	r1, [r7, #28]
 8003648:	430b      	orrs	r3, r1
 800364a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4aa4      	ldr	r2, [pc, #656]	; (8003900 <UART_SetConfig+0x2ec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4313      	orrs	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003686:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	69f9      	ldr	r1, [r7, #28]
 8003690:	430b      	orrs	r3, r1
 8003692:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f023 010f 	bic.w	r1, r3, #15
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a95      	ldr	r2, [pc, #596]	; (8003904 <UART_SetConfig+0x2f0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d120      	bne.n	80036f6 <UART_SetConfig+0xe2>
 80036b4:	4b94      	ldr	r3, [pc, #592]	; (8003908 <UART_SetConfig+0x2f4>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d816      	bhi.n	80036f0 <UART_SetConfig+0xdc>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0xb4>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036e5 	.word	0x080036e5
 80036d0:	080036df 	.word	0x080036df
 80036d4:	080036eb 	.word	0x080036eb
 80036d8:	2301      	movs	r3, #1
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e0bc      	b.n	8003858 <UART_SetConfig+0x244>
 80036de:	2302      	movs	r3, #2
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e0b9      	b.n	8003858 <UART_SetConfig+0x244>
 80036e4:	2304      	movs	r3, #4
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e0b6      	b.n	8003858 <UART_SetConfig+0x244>
 80036ea:	2308      	movs	r3, #8
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e0b3      	b.n	8003858 <UART_SetConfig+0x244>
 80036f0:	2310      	movs	r3, #16
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e0b0      	b.n	8003858 <UART_SetConfig+0x244>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a84      	ldr	r2, [pc, #528]	; (800390c <UART_SetConfig+0x2f8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d132      	bne.n	8003766 <UART_SetConfig+0x152>
 8003700:	4b81      	ldr	r3, [pc, #516]	; (8003908 <UART_SetConfig+0x2f4>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d828      	bhi.n	8003760 <UART_SetConfig+0x14c>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <UART_SetConfig+0x100>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003749 	.word	0x08003749
 8003718:	08003761 	.word	0x08003761
 800371c:	08003761 	.word	0x08003761
 8003720:	08003761 	.word	0x08003761
 8003724:	08003755 	.word	0x08003755
 8003728:	08003761 	.word	0x08003761
 800372c:	08003761 	.word	0x08003761
 8003730:	08003761 	.word	0x08003761
 8003734:	0800374f 	.word	0x0800374f
 8003738:	08003761 	.word	0x08003761
 800373c:	08003761 	.word	0x08003761
 8003740:	08003761 	.word	0x08003761
 8003744:	0800375b 	.word	0x0800375b
 8003748:	2300      	movs	r3, #0
 800374a:	76fb      	strb	r3, [r7, #27]
 800374c:	e084      	b.n	8003858 <UART_SetConfig+0x244>
 800374e:	2302      	movs	r3, #2
 8003750:	76fb      	strb	r3, [r7, #27]
 8003752:	e081      	b.n	8003858 <UART_SetConfig+0x244>
 8003754:	2304      	movs	r3, #4
 8003756:	76fb      	strb	r3, [r7, #27]
 8003758:	e07e      	b.n	8003858 <UART_SetConfig+0x244>
 800375a:	2308      	movs	r3, #8
 800375c:	76fb      	strb	r3, [r7, #27]
 800375e:	e07b      	b.n	8003858 <UART_SetConfig+0x244>
 8003760:	2310      	movs	r3, #16
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e078      	b.n	8003858 <UART_SetConfig+0x244>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a69      	ldr	r2, [pc, #420]	; (8003910 <UART_SetConfig+0x2fc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d120      	bne.n	80037b2 <UART_SetConfig+0x19e>
 8003770:	4b65      	ldr	r3, [pc, #404]	; (8003908 <UART_SetConfig+0x2f4>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800377a:	2b30      	cmp	r3, #48	; 0x30
 800377c:	d013      	beq.n	80037a6 <UART_SetConfig+0x192>
 800377e:	2b30      	cmp	r3, #48	; 0x30
 8003780:	d814      	bhi.n	80037ac <UART_SetConfig+0x198>
 8003782:	2b20      	cmp	r3, #32
 8003784:	d009      	beq.n	800379a <UART_SetConfig+0x186>
 8003786:	2b20      	cmp	r3, #32
 8003788:	d810      	bhi.n	80037ac <UART_SetConfig+0x198>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_SetConfig+0x180>
 800378e:	2b10      	cmp	r3, #16
 8003790:	d006      	beq.n	80037a0 <UART_SetConfig+0x18c>
 8003792:	e00b      	b.n	80037ac <UART_SetConfig+0x198>
 8003794:	2300      	movs	r3, #0
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	e05e      	b.n	8003858 <UART_SetConfig+0x244>
 800379a:	2302      	movs	r3, #2
 800379c:	76fb      	strb	r3, [r7, #27]
 800379e:	e05b      	b.n	8003858 <UART_SetConfig+0x244>
 80037a0:	2304      	movs	r3, #4
 80037a2:	76fb      	strb	r3, [r7, #27]
 80037a4:	e058      	b.n	8003858 <UART_SetConfig+0x244>
 80037a6:	2308      	movs	r3, #8
 80037a8:	76fb      	strb	r3, [r7, #27]
 80037aa:	e055      	b.n	8003858 <UART_SetConfig+0x244>
 80037ac:	2310      	movs	r3, #16
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e052      	b.n	8003858 <UART_SetConfig+0x244>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a57      	ldr	r2, [pc, #348]	; (8003914 <UART_SetConfig+0x300>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d120      	bne.n	80037fe <UART_SetConfig+0x1ea>
 80037bc:	4b52      	ldr	r3, [pc, #328]	; (8003908 <UART_SetConfig+0x2f4>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037c6:	2bc0      	cmp	r3, #192	; 0xc0
 80037c8:	d013      	beq.n	80037f2 <UART_SetConfig+0x1de>
 80037ca:	2bc0      	cmp	r3, #192	; 0xc0
 80037cc:	d814      	bhi.n	80037f8 <UART_SetConfig+0x1e4>
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0x1d2>
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d810      	bhi.n	80037f8 <UART_SetConfig+0x1e4>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x1cc>
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d006      	beq.n	80037ec <UART_SetConfig+0x1d8>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x1e4>
 80037e0:	2300      	movs	r3, #0
 80037e2:	76fb      	strb	r3, [r7, #27]
 80037e4:	e038      	b.n	8003858 <UART_SetConfig+0x244>
 80037e6:	2302      	movs	r3, #2
 80037e8:	76fb      	strb	r3, [r7, #27]
 80037ea:	e035      	b.n	8003858 <UART_SetConfig+0x244>
 80037ec:	2304      	movs	r3, #4
 80037ee:	76fb      	strb	r3, [r7, #27]
 80037f0:	e032      	b.n	8003858 <UART_SetConfig+0x244>
 80037f2:	2308      	movs	r3, #8
 80037f4:	76fb      	strb	r3, [r7, #27]
 80037f6:	e02f      	b.n	8003858 <UART_SetConfig+0x244>
 80037f8:	2310      	movs	r3, #16
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	e02c      	b.n	8003858 <UART_SetConfig+0x244>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3f      	ldr	r2, [pc, #252]	; (8003900 <UART_SetConfig+0x2ec>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d125      	bne.n	8003854 <UART_SetConfig+0x240>
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <UART_SetConfig+0x2f4>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003816:	d017      	beq.n	8003848 <UART_SetConfig+0x234>
 8003818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800381c:	d817      	bhi.n	800384e <UART_SetConfig+0x23a>
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003822:	d00b      	beq.n	800383c <UART_SetConfig+0x228>
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	d811      	bhi.n	800384e <UART_SetConfig+0x23a>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <UART_SetConfig+0x222>
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d006      	beq.n	8003842 <UART_SetConfig+0x22e>
 8003834:	e00b      	b.n	800384e <UART_SetConfig+0x23a>
 8003836:	2300      	movs	r3, #0
 8003838:	76fb      	strb	r3, [r7, #27]
 800383a:	e00d      	b.n	8003858 <UART_SetConfig+0x244>
 800383c:	2302      	movs	r3, #2
 800383e:	76fb      	strb	r3, [r7, #27]
 8003840:	e00a      	b.n	8003858 <UART_SetConfig+0x244>
 8003842:	2304      	movs	r3, #4
 8003844:	76fb      	strb	r3, [r7, #27]
 8003846:	e007      	b.n	8003858 <UART_SetConfig+0x244>
 8003848:	2308      	movs	r3, #8
 800384a:	76fb      	strb	r3, [r7, #27]
 800384c:	e004      	b.n	8003858 <UART_SetConfig+0x244>
 800384e:	2310      	movs	r3, #16
 8003850:	76fb      	strb	r3, [r7, #27]
 8003852:	e001      	b.n	8003858 <UART_SetConfig+0x244>
 8003854:	2310      	movs	r3, #16
 8003856:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <UART_SetConfig+0x2ec>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f040 809e 	bne.w	80039a0 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003864:	7efb      	ldrb	r3, [r7, #27]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d823      	bhi.n	80038b2 <UART_SetConfig+0x29e>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <UART_SetConfig+0x25c>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003895 	.word	0x08003895
 8003874:	080038b3 	.word	0x080038b3
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038b3 	.word	0x080038b3
 8003880:	080038a3 	.word	0x080038a3
 8003884:	080038b3 	.word	0x080038b3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038b3 	.word	0x080038b3
 8003890:	080038ab 	.word	0x080038ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003894:	f7fe ff42 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003898:	6178      	str	r0, [r7, #20]
        break;
 800389a:	e00f      	b.n	80038bc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <UART_SetConfig+0x304>)
 800389e:	617b      	str	r3, [r7, #20]
        break;
 80038a0:	e00c      	b.n	80038bc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a2:	f7fe fecd 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80038a6:	6178      	str	r0, [r7, #20]
        break;
 80038a8:	e008      	b.n	80038bc <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	617b      	str	r3, [r7, #20]
        break;
 80038b0:	e004      	b.n	80038bc <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	76bb      	strb	r3, [r7, #26]
        break;
 80038ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 812c 	beq.w	8003b1c <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <UART_SetConfig+0x308>)
 80038ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038ce:	461a      	mov	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d305      	bcc.n	80038f4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d915      	bls.n	8003920 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	76bb      	strb	r3, [r7, #26]
 80038f8:	e110      	b.n	8003b1c <UART_SetConfig+0x508>
 80038fa:	bf00      	nop
 80038fc:	cfff69f3 	.word	0xcfff69f3
 8003900:	40008000 	.word	0x40008000
 8003904:	40013800 	.word	0x40013800
 8003908:	40021000 	.word	0x40021000
 800390c:	40004400 	.word	0x40004400
 8003910:	40004800 	.word	0x40004800
 8003914:	40004c00 	.word	0x40004c00
 8003918:	00f42400 	.word	0x00f42400
 800391c:	08006344 	.word	0x08006344
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4618      	mov	r0, r3
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	4a85      	ldr	r2, [pc, #532]	; (8003b44 <UART_SetConfig+0x530>)
 800392e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003932:	b29a      	uxth	r2, r3
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	f7fc fd2a 	bl	8000390 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	020b      	lsls	r3, r1, #8
 800394e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003952:	0202      	lsls	r2, r0, #8
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6849      	ldr	r1, [r1, #4]
 8003958:	0849      	lsrs	r1, r1, #1
 800395a:	4608      	mov	r0, r1
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	1814      	adds	r4, r2, r0
 8003962:	eb43 0501 	adc.w	r5, r3, r1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	4620      	mov	r0, r4
 8003972:	4629      	mov	r1, r5
 8003974:	f7fc fd0c 	bl	8000390 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003986:	d308      	bcc.n	800399a <UART_SetConfig+0x386>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398e:	d204      	bcs.n	800399a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e0c0      	b.n	8003b1c <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	76bb      	strb	r3, [r7, #26]
 800399e:	e0bd      	b.n	8003b1c <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d164      	bne.n	8003a74 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80039aa:	7efb      	ldrb	r3, [r7, #27]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d828      	bhi.n	8003a02 <UART_SetConfig+0x3ee>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0x3a4>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a03 	.word	0x08003a03
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003a03 	.word	0x08003a03
 80039d0:	08003a03 	.word	0x08003a03
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe fe9e 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80039e0:	6178      	str	r0, [r7, #20]
        break;
 80039e2:	e013      	b.n	8003a0c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe feb0 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 80039e8:	6178      	str	r0, [r7, #20]
        break;
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b56      	ldr	r3, [pc, #344]	; (8003b48 <UART_SetConfig+0x534>)
 80039ee:	617b      	str	r3, [r7, #20]
        break;
 80039f0:	e00c      	b.n	8003a0c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe fe25 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80039f6:	6178      	str	r0, [r7, #20]
        break;
 80039f8:	e008      	b.n	8003a0c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	617b      	str	r3, [r7, #20]
        break;
 8003a00:	e004      	b.n	8003a0c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	76bb      	strb	r3, [r7, #26]
        break;
 8003a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8084 	beq.w	8003b1c <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <UART_SetConfig+0x530>)
 8003a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a26:	005a      	lsls	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	441a      	add	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d916      	bls.n	8003a6e <UART_SetConfig+0x45a>
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a46:	d212      	bcs.n	8003a6e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	89fb      	ldrh	r3, [r7, #14]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	89fa      	ldrh	r2, [r7, #14]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	e056      	b.n	8003b1c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	76bb      	strb	r3, [r7, #26]
 8003a72:	e053      	b.n	8003b1c <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a74:	7efb      	ldrb	r3, [r7, #27]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d827      	bhi.n	8003aca <UART_SetConfig+0x4b6>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0x46c>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003aad 	.word	0x08003aad
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003acb 	.word	0x08003acb
 8003a90:	08003abb 	.word	0x08003abb
 8003a94:	08003acb 	.word	0x08003acb
 8003a98:	08003acb 	.word	0x08003acb
 8003a9c:	08003acb 	.word	0x08003acb
 8003aa0:	08003ac3 	.word	0x08003ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7fe fe3a 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003aa8:	6178      	str	r0, [r7, #20]
        break;
 8003aaa:	e013      	b.n	8003ad4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aac:	f7fe fe4c 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003ab0:	6178      	str	r0, [r7, #20]
        break;
 8003ab2:	e00f      	b.n	8003ad4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <UART_SetConfig+0x534>)
 8003ab6:	617b      	str	r3, [r7, #20]
        break;
 8003ab8:	e00c      	b.n	8003ad4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aba:	f7fe fdc1 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003abe:	6178      	str	r0, [r7, #20]
        break;
 8003ac0:	e008      	b.n	8003ad4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac6:	617b      	str	r3, [r7, #20]
        break;
 8003ac8:	e004      	b.n	8003ad4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	76bb      	strb	r3, [r7, #26]
        break;
 8003ad2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <UART_SetConfig+0x530>)
 8003ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	fbb3 f2f2 	udiv	r2, r3, r2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	441a      	add	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d909      	bls.n	8003b18 <UART_SetConfig+0x504>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0a:	d205      	bcs.n	8003b18 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	e001      	b.n	8003b1c <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b38:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bdb0      	pop	{r4, r5, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	08006344 	.word	0x08006344
 8003b48:	00f42400 	.word	0x00f42400

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d10a      	bne.n	8003c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b098      	sub	sp, #96	; 0x60
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fc4a 	bl	8001538 <HAL_GetTick>
 8003ca4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d12f      	bne.n	8003d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f88e 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d022      	beq.n	8003d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cec:	647b      	str	r3, [r7, #68]	; 0x44
 8003cee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e063      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d149      	bne.n	8003db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f857 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03c      	beq.n	8003db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8e:	61fa      	str	r2, [r7, #28]
 8003d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e012      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3758      	adds	r7, #88	; 0x58
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	e04f      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d04b      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fd fb9b 	bl	8001538 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e04e      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d037      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d034      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d031      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d110      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f95b 	bl	8004104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2208      	movs	r2, #8
 8003e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e029      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e70:	d111      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f941 	bl	8004104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d0a0      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b0a3      	sub	sp, #140	; 0x8c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d10e      	bne.n	8003f12 <UART_Start_Receive_IT+0x52>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <UART_Start_Receive_IT+0x48>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f06:	e02d      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	22ff      	movs	r2, #255	; 0xff
 8003f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f10:	e028      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <UART_Start_Receive_IT+0x76>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <UART_Start_Receive_IT+0x6c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f2a:	e01b      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	227f      	movs	r2, #127	; 0x7f
 8003f30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f34:	e016      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3e:	d10d      	bne.n	8003f5c <UART_Start_Receive_IT+0x9c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <UART_Start_Receive_IT+0x92>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	227f      	movs	r2, #127	; 0x7f
 8003f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f50:	e008      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	223f      	movs	r2, #63	; 0x3f
 8003f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f5a:	e003      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3308      	adds	r3, #8
 8003f94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f98:	673a      	str	r2, [r7, #112]	; 0x70
 8003f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e3      	bne.n	8003f74 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb4:	d14f      	bne.n	8004056 <UART_Start_Receive_IT+0x196>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d349      	bcc.n	8004056 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d107      	bne.n	8003fdc <UART_Start_Receive_IT+0x11c>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a47      	ldr	r2, [pc, #284]	; (80040f4 <UART_Start_Receive_IT+0x234>)
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74
 8003fda:	e002      	b.n	8003fe2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a46      	ldr	r2, [pc, #280]	; (80040f8 <UART_Start_Receive_IT+0x238>)
 8003fe0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01a      	beq.n	8004020 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800400c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004012:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800401a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e4      	bne.n	8003fea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004040:	64ba      	str	r2, [r7, #72]	; 0x48
 8004042:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800404e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_Start_Receive_IT+0x160>
 8004054:	e046      	b.n	80040e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d107      	bne.n	8004070 <UART_Start_Receive_IT+0x1b0>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a24      	ldr	r2, [pc, #144]	; (80040fc <UART_Start_Receive_IT+0x23c>)
 800406c:	675a      	str	r2, [r3, #116]	; 0x74
 800406e:	e002      	b.n	8004076 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a23      	ldr	r2, [pc, #140]	; (8004100 <UART_Start_Receive_IT+0x240>)
 8004074:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004092:	677b      	str	r3, [r7, #116]	; 0x74
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
 800409e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e6      	bne.n	800407e <UART_Start_Receive_IT+0x1be>
 80040b0:	e018      	b.n	80040e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	613b      	str	r3, [r7, #16]
   return(result);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f043 0320 	orr.w	r3, r3, #32
 80040c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	378c      	adds	r7, #140	; 0x8c
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	08004925 	.word	0x08004925
 80040f8:	080045c5 	.word	0x080045c5
 80040fc:	0800440d 	.word	0x0800440d
 8004100:	08004255 	.word	0x08004255

08004104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b095      	sub	sp, #84	; 0x54
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e6      	bne.n	800410c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	61fb      	str	r3, [r7, #28]
   return(result);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e3      	bne.n	800413e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d118      	bne.n	80041b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	60bb      	str	r3, [r7, #8]
   return(result);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 0310 	bic.w	r3, r3, #16
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	613b      	str	r3, [r7, #16]
   return(result);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041c4:	bf00      	nop
 80041c6:	3754      	adds	r7, #84	; 0x54
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff f9fa 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60bb      	str	r3, [r7, #8]
   return(result);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff f9c5 	bl	80035d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424a:	bf00      	nop
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b09c      	sub	sp, #112	; 0x70
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004262:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426c:	2b22      	cmp	r3, #34	; 0x22
 800426e:	f040 80be 	bne.w	80043ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800427c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004280:	b2d9      	uxtb	r1, r3
 8004282:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	400a      	ands	r2, r1
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 80a1 	bne.w	80043fe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042da:	65bb      	str	r3, [r7, #88]	; 0x58
 80042dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e6      	bne.n	80042bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3308      	adds	r3, #8
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	667b      	str	r3, [r7, #100]	; 0x64
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800430e:	647a      	str	r2, [r7, #68]	; 0x44
 8004310:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800431c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e5      	bne.n	80042ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a33      	ldr	r2, [pc, #204]	; (8004408 <UART_RxISR_8BIT+0x1b4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01f      	beq.n	8004380 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	623b      	str	r3, [r7, #32]
   return(result);
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004362:	663b      	str	r3, [r7, #96]	; 0x60
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	633b      	str	r3, [r7, #48]	; 0x30
 800436e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d12e      	bne.n	80043e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	60fb      	str	r3, [r7, #12]
   return(result);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d103      	bne.n	80043d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff f90c 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043e4:	e00b      	b.n	80043fe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fdfe 	bl	8000fe8 <HAL_UART_RxCpltCallback>
}
 80043ec:	e007      	b.n	80043fe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	3770      	adds	r7, #112	; 0x70
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40008000 	.word	0x40008000

0800440c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b09c      	sub	sp, #112	; 0x70
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800441a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004424:	2b22      	cmp	r3, #34	; 0x22
 8004426:	f040 80be 	bne.w	80045a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800443a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800443e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004442:	4013      	ands	r3, r2
 8004444:	b29a      	uxth	r2, r3
 8004446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004448:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80a1 	bne.w	80045b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004488:	667b      	str	r3, [r7, #100]	; 0x64
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004492:	657b      	str	r3, [r7, #84]	; 0x54
 8004494:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e6      	bne.n	8004474 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044c6:	643a      	str	r2, [r7, #64]	; 0x40
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <UART_RxISR_16BIT+0x1b4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01f      	beq.n	8004538 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	61fb      	str	r3, [r7, #28]
   return(result);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800451a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004526:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e6      	bne.n	8004506 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d12e      	bne.n	800459e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60bb      	str	r3, [r7, #8]
   return(result);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	65bb      	str	r3, [r7, #88]	; 0x58
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e6      	bne.n	8004546 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b10      	cmp	r3, #16
 8004584:	d103      	bne.n	800458e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2210      	movs	r2, #16
 800458c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f830 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800459c:	e00b      	b.n	80045b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fc fd22 	bl	8000fe8 <HAL_UART_RxCpltCallback>
}
 80045a4:	e007      	b.n	80045b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0208 	orr.w	r2, r2, #8
 80045b4:	619a      	str	r2, [r3, #24]
}
 80045b6:	bf00      	nop
 80045b8:	3770      	adds	r7, #112	; 0x70
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40008000 	.word	0x40008000

080045c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b0ac      	sub	sp, #176	; 0xb0
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80045d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fa:	2b22      	cmp	r3, #34	; 0x22
 80045fc:	f040 8182 	bne.w	8004904 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004606:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800460a:	e125      	b.n	8004858 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004616:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004620:	b2da      	uxtb	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	400a      	ands	r2, r1
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	d053      	beq.n	8004706 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800465e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <UART_RxISR_8BIT_FIFOEN+0xca>
 800466a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f043 0201 	orr.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800468e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800469a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2202      	movs	r2, #2
 80046ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d011      	beq.n	80046ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80046ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2204      	movs	r2, #4
 80046dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f043 0202 	orr.w	r2, r3, #2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fe ff75 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 80a2 	bne.w	8004858 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004738:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800473c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e4      	bne.n	8004714 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3308      	adds	r3, #8
 8004750:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800475a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800475c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004772:	66ba      	str	r2, [r7, #104]	; 0x68
 8004774:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004778:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e1      	bne.n	800474a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a5f      	ldr	r2, [pc, #380]	; (800491c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d021      	beq.n	80047e8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01a      	beq.n	80047e8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047d4:	657b      	str	r3, [r7, #84]	; 0x54
 80047d6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e4      	bne.n	80047b2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d130      	bne.n	8004852 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	f023 0310 	bic.w	r3, r3, #16
 800480a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004818:	643b      	str	r3, [r7, #64]	; 0x40
 800481a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800481e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e4      	bne.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d103      	bne.n	8004842 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2210      	movs	r2, #16
 8004840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fe fed6 	bl	80035fc <HAL_UARTEx_RxEventCallback>
 8004850:	e002      	b.n	8004858 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fbc8 	bl	8000fe8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004858:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f aecf 	bne.w	800460c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004874:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004878:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800487c:	2b00      	cmp	r3, #0
 800487e:	d049      	beq.n	8004914 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004886:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800488a:	429a      	cmp	r2, r3
 800488c:	d242      	bcs.n	8004914 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	61fb      	str	r3, [r7, #28]
   return(result);
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3308      	adds	r3, #8
 80048ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80048b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80048ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f043 0320 	orr.w	r3, r3, #32
 80048e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6979      	ldr	r1, [r7, #20]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	613b      	str	r3, [r7, #16]
   return(result);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e4      	bne.n	80048cc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004902:	e007      	b.n	8004914 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	619a      	str	r2, [r3, #24]
}
 8004914:	bf00      	nop
 8004916:	37b0      	adds	r7, #176	; 0xb0
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40008000 	.word	0x40008000
 8004920:	08004255 	.word	0x08004255

08004924 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b0ae      	sub	sp, #184	; 0xb8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004932:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495a:	2b22      	cmp	r3, #34	; 0x22
 800495c:	f040 8186 	bne.w	8004c6c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004966:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800496a:	e129      	b.n	8004bc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800497e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004982:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004986:	4013      	ands	r3, r2
 8004988:	b29a      	uxth	r2, r3
 800498a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800498e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80049b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d053      	beq.n	8004a6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d011      	beq.n	80049f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80049ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2201      	movs	r2, #1
 80049e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80049fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f043 0204 	orr.w	r2, r3, #4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d011      	beq.n	8004a52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f043 0202 	orr.w	r2, r3, #2
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fe fdc3 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 80a4 	bne.w	8004bc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e2      	bne.n	8004a78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e1      	bne.n	8004ab2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5f      	ldr	r2, [pc, #380]	; (8004c84 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d021      	beq.n	8004b50 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01a      	beq.n	8004b50 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e4      	bne.n	8004b1a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d130      	bne.n	8004bba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	f023 0310 	bic.w	r3, r3, #16
 8004b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
 8004b82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e4      	bne.n	8004b5e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d103      	bne.n	8004baa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fe fd22 	bl	80035fc <HAL_UARTEx_RxEventCallback>
 8004bb8:	e002      	b.n	8004bc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fa14 	bl	8000fe8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004bc0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f aecb 	bne.w	800496c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bdc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004be0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d049      	beq.n	8004c7c <UART_RxISR_16BIT_FIFOEN+0x358>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d242      	bcs.n	8004c7c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	623b      	str	r3, [r7, #32]
   return(result);
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3308      	adds	r3, #8
 8004c16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004c1a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e3      	bne.n	8004bf6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004c32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f043 0320 	orr.w	r3, r3, #32
 8004c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	617b      	str	r3, [r7, #20]
   return(result);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e4      	bne.n	8004c34 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c6a:	e007      	b.n	8004c7c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	619a      	str	r2, [r3, #24]
}
 8004c7c:	bf00      	nop
 8004c7e:	37b8      	adds	r7, #184	; 0xb8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40008000 	.word	0x40008000
 8004c88:	0800440d 	.word	0x0800440d

08004c8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_UARTEx_DisableFifoMode+0x16>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e027      	b.n	8004d2e <HAL_UARTEx_DisableFifoMode+0x66>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	; 0x24
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e02d      	b.n	8004dae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2224      	movs	r2, #36	; 0x24
 8004d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f850 	bl	8004e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e02d      	b.n	8004e2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2224      	movs	r2, #36	; 0x24
 8004dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f812 	bl	8004e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e54:	e031      	b.n	8004eba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e56:	2308      	movs	r3, #8
 8004e58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	0e5b      	lsrs	r3, r3, #25
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	0f5b      	lsrs	r3, r3, #29
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e7e:	7bbb      	ldrb	r3, [r7, #14]
 8004e80:	7b3a      	ldrb	r2, [r7, #12]
 8004e82:	4911      	ldr	r1, [pc, #68]	; (8004ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8004e84:	5c8a      	ldrb	r2, [r1, r2]
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e8a:	7b3a      	ldrb	r2, [r7, #12]
 8004e8c:	490f      	ldr	r1, [pc, #60]	; (8004ecc <UARTEx_SetNbDataToProcess+0x98>)
 8004e8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	7b7a      	ldrb	r2, [r7, #13]
 8004ea0:	4909      	ldr	r1, [pc, #36]	; (8004ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8004ea2:	5c8a      	ldrb	r2, [r1, r2]
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ea8:	7b7a      	ldrb	r2, [r7, #13]
 8004eaa:	4908      	ldr	r1, [pc, #32]	; (8004ecc <UARTEx_SetNbDataToProcess+0x98>)
 8004eac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	0800635c 	.word	0x0800635c
 8004ecc:	08006364 	.word	0x08006364

08004ed0 <__errno>:
 8004ed0:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <__errno+0x8>)
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	2000000c 	.word	0x2000000c

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4d0d      	ldr	r5, [pc, #52]	; (8004f14 <__libc_init_array+0x38>)
 8004ee0:	4c0d      	ldr	r4, [pc, #52]	; (8004f18 <__libc_init_array+0x3c>)
 8004ee2:	1b64      	subs	r4, r4, r5
 8004ee4:	10a4      	asrs	r4, r4, #2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	42a6      	cmp	r6, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	4d0b      	ldr	r5, [pc, #44]	; (8004f1c <__libc_init_array+0x40>)
 8004eee:	4c0c      	ldr	r4, [pc, #48]	; (8004f20 <__libc_init_array+0x44>)
 8004ef0:	f001 f95c 	bl	80061ac <_init>
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	2600      	movs	r6, #0
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f04:	4798      	blx	r3
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0e:	4798      	blx	r3
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	080064c0 	.word	0x080064c0
 8004f18:	080064c0 	.word	0x080064c0
 8004f1c:	080064c0 	.word	0x080064c0
 8004f20:	080064c4 	.word	0x080064c4

08004f24 <memset>:
 8004f24:	4402      	add	r2, r0
 8004f26:	4603      	mov	r3, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d100      	bne.n	8004f2e <memset+0xa>
 8004f2c:	4770      	bx	lr
 8004f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f32:	e7f9      	b.n	8004f28 <memset+0x4>

08004f34 <iprintf>:
 8004f34:	b40f      	push	{r0, r1, r2, r3}
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <iprintf+0x2c>)
 8004f38:	b513      	push	{r0, r1, r4, lr}
 8004f3a:	681c      	ldr	r4, [r3, #0]
 8004f3c:	b124      	cbz	r4, 8004f48 <iprintf+0x14>
 8004f3e:	69a3      	ldr	r3, [r4, #24]
 8004f40:	b913      	cbnz	r3, 8004f48 <iprintf+0x14>
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 fb20 	bl	8005588 <__sinit>
 8004f48:	ab05      	add	r3, sp, #20
 8004f4a:	9a04      	ldr	r2, [sp, #16]
 8004f4c:	68a1      	ldr	r1, [r4, #8]
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 fd0b 	bl	800596c <_vfiprintf_r>
 8004f56:	b002      	add	sp, #8
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	b004      	add	sp, #16
 8004f5e:	4770      	bx	lr
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <putchar>:
 8004f64:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <putchar+0x28>)
 8004f66:	b513      	push	{r0, r1, r4, lr}
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	b134      	cbz	r4, 8004f7c <putchar+0x18>
 8004f6e:	69a3      	ldr	r3, [r4, #24]
 8004f70:	b923      	cbnz	r3, 8004f7c <putchar+0x18>
 8004f72:	9001      	str	r0, [sp, #4]
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 fb07 	bl	8005588 <__sinit>
 8004f7a:	9901      	ldr	r1, [sp, #4]
 8004f7c:	68a2      	ldr	r2, [r4, #8]
 8004f7e:	4620      	mov	r0, r4
 8004f80:	b002      	add	sp, #8
 8004f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f86:	f000 bfb5 	b.w	8005ef4 <_putc_r>
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c

08004f90 <_puts_r>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	460e      	mov	r6, r1
 8004f94:	4605      	mov	r5, r0
 8004f96:	b118      	cbz	r0, 8004fa0 <_puts_r+0x10>
 8004f98:	6983      	ldr	r3, [r0, #24]
 8004f9a:	b90b      	cbnz	r3, 8004fa0 <_puts_r+0x10>
 8004f9c:	f000 faf4 	bl	8005588 <__sinit>
 8004fa0:	69ab      	ldr	r3, [r5, #24]
 8004fa2:	68ac      	ldr	r4, [r5, #8]
 8004fa4:	b913      	cbnz	r3, 8004fac <_puts_r+0x1c>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 faee 	bl	8005588 <__sinit>
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <_puts_r+0xd0>)
 8004fae:	429c      	cmp	r4, r3
 8004fb0:	d120      	bne.n	8004ff4 <_puts_r+0x64>
 8004fb2:	686c      	ldr	r4, [r5, #4]
 8004fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb6:	07db      	lsls	r3, r3, #31
 8004fb8:	d405      	bmi.n	8004fc6 <_puts_r+0x36>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	0598      	lsls	r0, r3, #22
 8004fbe:	d402      	bmi.n	8004fc6 <_puts_r+0x36>
 8004fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fc2:	f000 fb91 	bl	80056e8 <__retarget_lock_acquire_recursive>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	0719      	lsls	r1, r3, #28
 8004fca:	d51d      	bpl.n	8005008 <_puts_r+0x78>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	b1db      	cbz	r3, 8005008 <_puts_r+0x78>
 8004fd0:	3e01      	subs	r6, #1
 8004fd2:	68a3      	ldr	r3, [r4, #8]
 8004fd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	60a3      	str	r3, [r4, #8]
 8004fdc:	bb39      	cbnz	r1, 800502e <_puts_r+0x9e>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da38      	bge.n	8005054 <_puts_r+0xc4>
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	210a      	movs	r1, #10
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f8d6 	bl	8005198 <__swbuf_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d011      	beq.n	8005014 <_puts_r+0x84>
 8004ff0:	250a      	movs	r5, #10
 8004ff2:	e011      	b.n	8005018 <_puts_r+0x88>
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <_puts_r+0xd4>)
 8004ff6:	429c      	cmp	r4, r3
 8004ff8:	d101      	bne.n	8004ffe <_puts_r+0x6e>
 8004ffa:	68ac      	ldr	r4, [r5, #8]
 8004ffc:	e7da      	b.n	8004fb4 <_puts_r+0x24>
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <_puts_r+0xd8>)
 8005000:	429c      	cmp	r4, r3
 8005002:	bf08      	it	eq
 8005004:	68ec      	ldreq	r4, [r5, #12]
 8005006:	e7d5      	b.n	8004fb4 <_puts_r+0x24>
 8005008:	4621      	mov	r1, r4
 800500a:	4628      	mov	r0, r5
 800500c:	f000 f916 	bl	800523c <__swsetup_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	d0dd      	beq.n	8004fd0 <_puts_r+0x40>
 8005014:	f04f 35ff 	mov.w	r5, #4294967295
 8005018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800501a:	07da      	lsls	r2, r3, #31
 800501c:	d405      	bmi.n	800502a <_puts_r+0x9a>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	059b      	lsls	r3, r3, #22
 8005022:	d402      	bmi.n	800502a <_puts_r+0x9a>
 8005024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005026:	f000 fb60 	bl	80056ea <__retarget_lock_release_recursive>
 800502a:	4628      	mov	r0, r5
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	2b00      	cmp	r3, #0
 8005030:	da04      	bge.n	800503c <_puts_r+0xac>
 8005032:	69a2      	ldr	r2, [r4, #24]
 8005034:	429a      	cmp	r2, r3
 8005036:	dc06      	bgt.n	8005046 <_puts_r+0xb6>
 8005038:	290a      	cmp	r1, #10
 800503a:	d004      	beq.n	8005046 <_puts_r+0xb6>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	6022      	str	r2, [r4, #0]
 8005042:	7019      	strb	r1, [r3, #0]
 8005044:	e7c5      	b.n	8004fd2 <_puts_r+0x42>
 8005046:	4622      	mov	r2, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 f8a5 	bl	8005198 <__swbuf_r>
 800504e:	3001      	adds	r0, #1
 8005050:	d1bf      	bne.n	8004fd2 <_puts_r+0x42>
 8005052:	e7df      	b.n	8005014 <_puts_r+0x84>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	250a      	movs	r5, #10
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	6022      	str	r2, [r4, #0]
 800505c:	701d      	strb	r5, [r3, #0]
 800505e:	e7db      	b.n	8005018 <_puts_r+0x88>
 8005060:	08006444 	.word	0x08006444
 8005064:	08006464 	.word	0x08006464
 8005068:	08006424 	.word	0x08006424

0800506c <puts>:
 800506c:	4b02      	ldr	r3, [pc, #8]	; (8005078 <puts+0xc>)
 800506e:	4601      	mov	r1, r0
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	f7ff bf8d 	b.w	8004f90 <_puts_r>
 8005076:	bf00      	nop
 8005078:	2000000c 	.word	0x2000000c

0800507c <strcpy>:
 800507c:	4603      	mov	r3, r0
 800507e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005082:	f803 2b01 	strb.w	r2, [r3], #1
 8005086:	2a00      	cmp	r2, #0
 8005088:	d1f9      	bne.n	800507e <strcpy+0x2>
 800508a:	4770      	bx	lr

0800508c <strncpy>:
 800508c:	b510      	push	{r4, lr}
 800508e:	3901      	subs	r1, #1
 8005090:	4603      	mov	r3, r0
 8005092:	b132      	cbz	r2, 80050a2 <strncpy+0x16>
 8005094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005098:	f803 4b01 	strb.w	r4, [r3], #1
 800509c:	3a01      	subs	r2, #1
 800509e:	2c00      	cmp	r4, #0
 80050a0:	d1f7      	bne.n	8005092 <strncpy+0x6>
 80050a2:	441a      	add	r2, r3
 80050a4:	2100      	movs	r1, #0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d100      	bne.n	80050ac <strncpy+0x20>
 80050aa:	bd10      	pop	{r4, pc}
 80050ac:	f803 1b01 	strb.w	r1, [r3], #1
 80050b0:	e7f9      	b.n	80050a6 <strncpy+0x1a>

080050b2 <strstr>:
 80050b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b4:	780c      	ldrb	r4, [r1, #0]
 80050b6:	b164      	cbz	r4, 80050d2 <strstr+0x20>
 80050b8:	4603      	mov	r3, r0
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	1c5e      	adds	r6, r3, #1
 80050c0:	b90a      	cbnz	r2, 80050c6 <strstr+0x14>
 80050c2:	4610      	mov	r0, r2
 80050c4:	e005      	b.n	80050d2 <strstr+0x20>
 80050c6:	4294      	cmp	r4, r2
 80050c8:	d108      	bne.n	80050dc <strstr+0x2a>
 80050ca:	460d      	mov	r5, r1
 80050cc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80050d0:	b902      	cbnz	r2, 80050d4 <strstr+0x22>
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80050d8:	4297      	cmp	r7, r2
 80050da:	d0f7      	beq.n	80050cc <strstr+0x1a>
 80050dc:	4633      	mov	r3, r6
 80050de:	e7ec      	b.n	80050ba <strstr+0x8>

080050e0 <strtok>:
 80050e0:	4b16      	ldr	r3, [pc, #88]	; (800513c <strtok+0x5c>)
 80050e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050e4:	681e      	ldr	r6, [r3, #0]
 80050e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80050e8:	4605      	mov	r5, r0
 80050ea:	b9fc      	cbnz	r4, 800512c <strtok+0x4c>
 80050ec:	2050      	movs	r0, #80	; 0x50
 80050ee:	9101      	str	r1, [sp, #4]
 80050f0:	f000 fb60 	bl	80057b4 <malloc>
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	65b0      	str	r0, [r6, #88]	; 0x58
 80050f8:	4602      	mov	r2, r0
 80050fa:	b920      	cbnz	r0, 8005106 <strtok+0x26>
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <strtok+0x60>)
 80050fe:	4811      	ldr	r0, [pc, #68]	; (8005144 <strtok+0x64>)
 8005100:	2157      	movs	r1, #87	; 0x57
 8005102:	f000 f909 	bl	8005318 <__assert_func>
 8005106:	e9c0 4400 	strd	r4, r4, [r0]
 800510a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800510e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005112:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005116:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800511a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800511e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005122:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005126:	6184      	str	r4, [r0, #24]
 8005128:	7704      	strb	r4, [r0, #28]
 800512a:	6244      	str	r4, [r0, #36]	; 0x24
 800512c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800512e:	2301      	movs	r3, #1
 8005130:	4628      	mov	r0, r5
 8005132:	b002      	add	sp, #8
 8005134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005138:	f000 b806 	b.w	8005148 <__strtok_r>
 800513c:	2000000c 	.word	0x2000000c
 8005140:	08006370 	.word	0x08006370
 8005144:	08006387 	.word	0x08006387

08005148 <__strtok_r>:
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514a:	b908      	cbnz	r0, 8005150 <__strtok_r+0x8>
 800514c:	6810      	ldr	r0, [r2, #0]
 800514e:	b188      	cbz	r0, 8005174 <__strtok_r+0x2c>
 8005150:	4604      	mov	r4, r0
 8005152:	4620      	mov	r0, r4
 8005154:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005158:	460f      	mov	r7, r1
 800515a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800515e:	b91e      	cbnz	r6, 8005168 <__strtok_r+0x20>
 8005160:	b965      	cbnz	r5, 800517c <__strtok_r+0x34>
 8005162:	6015      	str	r5, [r2, #0]
 8005164:	4628      	mov	r0, r5
 8005166:	e005      	b.n	8005174 <__strtok_r+0x2c>
 8005168:	42b5      	cmp	r5, r6
 800516a:	d1f6      	bne.n	800515a <__strtok_r+0x12>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <__strtok_r+0xa>
 8005170:	6014      	str	r4, [r2, #0]
 8005172:	7003      	strb	r3, [r0, #0]
 8005174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005176:	461c      	mov	r4, r3
 8005178:	e00c      	b.n	8005194 <__strtok_r+0x4c>
 800517a:	b915      	cbnz	r5, 8005182 <__strtok_r+0x3a>
 800517c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005180:	460e      	mov	r6, r1
 8005182:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005186:	42ab      	cmp	r3, r5
 8005188:	d1f7      	bne.n	800517a <__strtok_r+0x32>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f3      	beq.n	8005176 <__strtok_r+0x2e>
 800518e:	2300      	movs	r3, #0
 8005190:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005194:	6014      	str	r4, [r2, #0]
 8005196:	e7ed      	b.n	8005174 <__strtok_r+0x2c>

08005198 <__swbuf_r>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	460e      	mov	r6, r1
 800519c:	4614      	mov	r4, r2
 800519e:	4605      	mov	r5, r0
 80051a0:	b118      	cbz	r0, 80051aa <__swbuf_r+0x12>
 80051a2:	6983      	ldr	r3, [r0, #24]
 80051a4:	b90b      	cbnz	r3, 80051aa <__swbuf_r+0x12>
 80051a6:	f000 f9ef 	bl	8005588 <__sinit>
 80051aa:	4b21      	ldr	r3, [pc, #132]	; (8005230 <__swbuf_r+0x98>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	d12b      	bne.n	8005208 <__swbuf_r+0x70>
 80051b0:	686c      	ldr	r4, [r5, #4]
 80051b2:	69a3      	ldr	r3, [r4, #24]
 80051b4:	60a3      	str	r3, [r4, #8]
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	071a      	lsls	r2, r3, #28
 80051ba:	d52f      	bpl.n	800521c <__swbuf_r+0x84>
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	b36b      	cbz	r3, 800521c <__swbuf_r+0x84>
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1ac0      	subs	r0, r0, r3
 80051c6:	6963      	ldr	r3, [r4, #20]
 80051c8:	b2f6      	uxtb	r6, r6
 80051ca:	4283      	cmp	r3, r0
 80051cc:	4637      	mov	r7, r6
 80051ce:	dc04      	bgt.n	80051da <__swbuf_r+0x42>
 80051d0:	4621      	mov	r1, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f944 	bl	8005460 <_fflush_r>
 80051d8:	bb30      	cbnz	r0, 8005228 <__swbuf_r+0x90>
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	3b01      	subs	r3, #1
 80051de:	60a3      	str	r3, [r4, #8]
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	6022      	str	r2, [r4, #0]
 80051e6:	701e      	strb	r6, [r3, #0]
 80051e8:	6963      	ldr	r3, [r4, #20]
 80051ea:	3001      	adds	r0, #1
 80051ec:	4283      	cmp	r3, r0
 80051ee:	d004      	beq.n	80051fa <__swbuf_r+0x62>
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	07db      	lsls	r3, r3, #31
 80051f4:	d506      	bpl.n	8005204 <__swbuf_r+0x6c>
 80051f6:	2e0a      	cmp	r6, #10
 80051f8:	d104      	bne.n	8005204 <__swbuf_r+0x6c>
 80051fa:	4621      	mov	r1, r4
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f92f 	bl	8005460 <_fflush_r>
 8005202:	b988      	cbnz	r0, 8005228 <__swbuf_r+0x90>
 8005204:	4638      	mov	r0, r7
 8005206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <__swbuf_r+0x9c>)
 800520a:	429c      	cmp	r4, r3
 800520c:	d101      	bne.n	8005212 <__swbuf_r+0x7a>
 800520e:	68ac      	ldr	r4, [r5, #8]
 8005210:	e7cf      	b.n	80051b2 <__swbuf_r+0x1a>
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <__swbuf_r+0xa0>)
 8005214:	429c      	cmp	r4, r3
 8005216:	bf08      	it	eq
 8005218:	68ec      	ldreq	r4, [r5, #12]
 800521a:	e7ca      	b.n	80051b2 <__swbuf_r+0x1a>
 800521c:	4621      	mov	r1, r4
 800521e:	4628      	mov	r0, r5
 8005220:	f000 f80c 	bl	800523c <__swsetup_r>
 8005224:	2800      	cmp	r0, #0
 8005226:	d0cb      	beq.n	80051c0 <__swbuf_r+0x28>
 8005228:	f04f 37ff 	mov.w	r7, #4294967295
 800522c:	e7ea      	b.n	8005204 <__swbuf_r+0x6c>
 800522e:	bf00      	nop
 8005230:	08006444 	.word	0x08006444
 8005234:	08006464 	.word	0x08006464
 8005238:	08006424 	.word	0x08006424

0800523c <__swsetup_r>:
 800523c:	4b32      	ldr	r3, [pc, #200]	; (8005308 <__swsetup_r+0xcc>)
 800523e:	b570      	push	{r4, r5, r6, lr}
 8005240:	681d      	ldr	r5, [r3, #0]
 8005242:	4606      	mov	r6, r0
 8005244:	460c      	mov	r4, r1
 8005246:	b125      	cbz	r5, 8005252 <__swsetup_r+0x16>
 8005248:	69ab      	ldr	r3, [r5, #24]
 800524a:	b913      	cbnz	r3, 8005252 <__swsetup_r+0x16>
 800524c:	4628      	mov	r0, r5
 800524e:	f000 f99b 	bl	8005588 <__sinit>
 8005252:	4b2e      	ldr	r3, [pc, #184]	; (800530c <__swsetup_r+0xd0>)
 8005254:	429c      	cmp	r4, r3
 8005256:	d10f      	bne.n	8005278 <__swsetup_r+0x3c>
 8005258:	686c      	ldr	r4, [r5, #4]
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005260:	0719      	lsls	r1, r3, #28
 8005262:	d42c      	bmi.n	80052be <__swsetup_r+0x82>
 8005264:	06dd      	lsls	r5, r3, #27
 8005266:	d411      	bmi.n	800528c <__swsetup_r+0x50>
 8005268:	2309      	movs	r3, #9
 800526a:	6033      	str	r3, [r6, #0]
 800526c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	e03e      	b.n	80052f6 <__swsetup_r+0xba>
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <__swsetup_r+0xd4>)
 800527a:	429c      	cmp	r4, r3
 800527c:	d101      	bne.n	8005282 <__swsetup_r+0x46>
 800527e:	68ac      	ldr	r4, [r5, #8]
 8005280:	e7eb      	b.n	800525a <__swsetup_r+0x1e>
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <__swsetup_r+0xd8>)
 8005284:	429c      	cmp	r4, r3
 8005286:	bf08      	it	eq
 8005288:	68ec      	ldreq	r4, [r5, #12]
 800528a:	e7e6      	b.n	800525a <__swsetup_r+0x1e>
 800528c:	0758      	lsls	r0, r3, #29
 800528e:	d512      	bpl.n	80052b6 <__swsetup_r+0x7a>
 8005290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005292:	b141      	cbz	r1, 80052a6 <__swsetup_r+0x6a>
 8005294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005298:	4299      	cmp	r1, r3
 800529a:	d002      	beq.n	80052a2 <__swsetup_r+0x66>
 800529c:	4630      	mov	r0, r6
 800529e:	f000 fa91 	bl	80057c4 <_free_r>
 80052a2:	2300      	movs	r3, #0
 80052a4:	6363      	str	r3, [r4, #52]	; 0x34
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	2300      	movs	r3, #0
 80052b0:	6063      	str	r3, [r4, #4]
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f043 0308 	orr.w	r3, r3, #8
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	6923      	ldr	r3, [r4, #16]
 80052c0:	b94b      	cbnz	r3, 80052d6 <__swsetup_r+0x9a>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d003      	beq.n	80052d6 <__swsetup_r+0x9a>
 80052ce:	4621      	mov	r1, r4
 80052d0:	4630      	mov	r0, r6
 80052d2:	f000 fa2f 	bl	8005734 <__smakebuf_r>
 80052d6:	89a0      	ldrh	r0, [r4, #12]
 80052d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052dc:	f010 0301 	ands.w	r3, r0, #1
 80052e0:	d00a      	beq.n	80052f8 <__swsetup_r+0xbc>
 80052e2:	2300      	movs	r3, #0
 80052e4:	60a3      	str	r3, [r4, #8]
 80052e6:	6963      	ldr	r3, [r4, #20]
 80052e8:	425b      	negs	r3, r3
 80052ea:	61a3      	str	r3, [r4, #24]
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	b943      	cbnz	r3, 8005302 <__swsetup_r+0xc6>
 80052f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052f4:	d1ba      	bne.n	800526c <__swsetup_r+0x30>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	0781      	lsls	r1, r0, #30
 80052fa:	bf58      	it	pl
 80052fc:	6963      	ldrpl	r3, [r4, #20]
 80052fe:	60a3      	str	r3, [r4, #8]
 8005300:	e7f4      	b.n	80052ec <__swsetup_r+0xb0>
 8005302:	2000      	movs	r0, #0
 8005304:	e7f7      	b.n	80052f6 <__swsetup_r+0xba>
 8005306:	bf00      	nop
 8005308:	2000000c 	.word	0x2000000c
 800530c:	08006444 	.word	0x08006444
 8005310:	08006464 	.word	0x08006464
 8005314:	08006424 	.word	0x08006424

08005318 <__assert_func>:
 8005318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800531a:	4614      	mov	r4, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <__assert_func+0x2c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4605      	mov	r5, r0
 8005324:	68d8      	ldr	r0, [r3, #12]
 8005326:	b14c      	cbz	r4, 800533c <__assert_func+0x24>
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <__assert_func+0x30>)
 800532a:	9100      	str	r1, [sp, #0]
 800532c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005330:	4906      	ldr	r1, [pc, #24]	; (800534c <__assert_func+0x34>)
 8005332:	462b      	mov	r3, r5
 8005334:	f000 f9a6 	bl	8005684 <fiprintf>
 8005338:	f000 fe8a 	bl	8006050 <abort>
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <__assert_func+0x38>)
 800533e:	461c      	mov	r4, r3
 8005340:	e7f3      	b.n	800532a <__assert_func+0x12>
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c
 8005348:	080063e8 	.word	0x080063e8
 800534c:	080063f5 	.word	0x080063f5
 8005350:	08006423 	.word	0x08006423

08005354 <__sflush_r>:
 8005354:	898a      	ldrh	r2, [r1, #12]
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	4605      	mov	r5, r0
 800535c:	0710      	lsls	r0, r2, #28
 800535e:	460c      	mov	r4, r1
 8005360:	d458      	bmi.n	8005414 <__sflush_r+0xc0>
 8005362:	684b      	ldr	r3, [r1, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dc05      	bgt.n	8005374 <__sflush_r+0x20>
 8005368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	dc02      	bgt.n	8005374 <__sflush_r+0x20>
 800536e:	2000      	movs	r0, #0
 8005370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005376:	2e00      	cmp	r6, #0
 8005378:	d0f9      	beq.n	800536e <__sflush_r+0x1a>
 800537a:	2300      	movs	r3, #0
 800537c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005380:	682f      	ldr	r7, [r5, #0]
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	d032      	beq.n	80053ec <__sflush_r+0x98>
 8005386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	075a      	lsls	r2, r3, #29
 800538c:	d505      	bpl.n	800539a <__sflush_r+0x46>
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	1ac0      	subs	r0, r0, r3
 8005392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005394:	b10b      	cbz	r3, 800539a <__sflush_r+0x46>
 8005396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005398:	1ac0      	subs	r0, r0, r3
 800539a:	2300      	movs	r3, #0
 800539c:	4602      	mov	r2, r0
 800539e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053a0:	6a21      	ldr	r1, [r4, #32]
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b0      	blx	r6
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	d106      	bne.n	80053ba <__sflush_r+0x66>
 80053ac:	6829      	ldr	r1, [r5, #0]
 80053ae:	291d      	cmp	r1, #29
 80053b0:	d82c      	bhi.n	800540c <__sflush_r+0xb8>
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <__sflush_r+0x108>)
 80053b4:	40ca      	lsrs	r2, r1
 80053b6:	07d6      	lsls	r6, r2, #31
 80053b8:	d528      	bpl.n	800540c <__sflush_r+0xb8>
 80053ba:	2200      	movs	r2, #0
 80053bc:	6062      	str	r2, [r4, #4]
 80053be:	04d9      	lsls	r1, r3, #19
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	d504      	bpl.n	80053d0 <__sflush_r+0x7c>
 80053c6:	1c42      	adds	r2, r0, #1
 80053c8:	d101      	bne.n	80053ce <__sflush_r+0x7a>
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	b903      	cbnz	r3, 80053d0 <__sflush_r+0x7c>
 80053ce:	6560      	str	r0, [r4, #84]	; 0x54
 80053d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d2:	602f      	str	r7, [r5, #0]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d0ca      	beq.n	800536e <__sflush_r+0x1a>
 80053d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053dc:	4299      	cmp	r1, r3
 80053de:	d002      	beq.n	80053e6 <__sflush_r+0x92>
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f9ef 	bl	80057c4 <_free_r>
 80053e6:	2000      	movs	r0, #0
 80053e8:	6360      	str	r0, [r4, #52]	; 0x34
 80053ea:	e7c1      	b.n	8005370 <__sflush_r+0x1c>
 80053ec:	6a21      	ldr	r1, [r4, #32]
 80053ee:	2301      	movs	r3, #1
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b0      	blx	r6
 80053f4:	1c41      	adds	r1, r0, #1
 80053f6:	d1c7      	bne.n	8005388 <__sflush_r+0x34>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0c4      	beq.n	8005388 <__sflush_r+0x34>
 80053fe:	2b1d      	cmp	r3, #29
 8005400:	d001      	beq.n	8005406 <__sflush_r+0xb2>
 8005402:	2b16      	cmp	r3, #22
 8005404:	d101      	bne.n	800540a <__sflush_r+0xb6>
 8005406:	602f      	str	r7, [r5, #0]
 8005408:	e7b1      	b.n	800536e <__sflush_r+0x1a>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	e7ad      	b.n	8005370 <__sflush_r+0x1c>
 8005414:	690f      	ldr	r7, [r1, #16]
 8005416:	2f00      	cmp	r7, #0
 8005418:	d0a9      	beq.n	800536e <__sflush_r+0x1a>
 800541a:	0793      	lsls	r3, r2, #30
 800541c:	680e      	ldr	r6, [r1, #0]
 800541e:	bf08      	it	eq
 8005420:	694b      	ldreq	r3, [r1, #20]
 8005422:	600f      	str	r7, [r1, #0]
 8005424:	bf18      	it	ne
 8005426:	2300      	movne	r3, #0
 8005428:	eba6 0807 	sub.w	r8, r6, r7
 800542c:	608b      	str	r3, [r1, #8]
 800542e:	f1b8 0f00 	cmp.w	r8, #0
 8005432:	dd9c      	ble.n	800536e <__sflush_r+0x1a>
 8005434:	6a21      	ldr	r1, [r4, #32]
 8005436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005438:	4643      	mov	r3, r8
 800543a:	463a      	mov	r2, r7
 800543c:	4628      	mov	r0, r5
 800543e:	47b0      	blx	r6
 8005440:	2800      	cmp	r0, #0
 8005442:	dc06      	bgt.n	8005452 <__sflush_r+0xfe>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	e78e      	b.n	8005370 <__sflush_r+0x1c>
 8005452:	4407      	add	r7, r0
 8005454:	eba8 0800 	sub.w	r8, r8, r0
 8005458:	e7e9      	b.n	800542e <__sflush_r+0xda>
 800545a:	bf00      	nop
 800545c:	20400001 	.word	0x20400001

08005460 <_fflush_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	690b      	ldr	r3, [r1, #16]
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b913      	cbnz	r3, 8005470 <_fflush_r+0x10>
 800546a:	2500      	movs	r5, #0
 800546c:	4628      	mov	r0, r5
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	b118      	cbz	r0, 800547a <_fflush_r+0x1a>
 8005472:	6983      	ldr	r3, [r0, #24]
 8005474:	b90b      	cbnz	r3, 800547a <_fflush_r+0x1a>
 8005476:	f000 f887 	bl	8005588 <__sinit>
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <_fflush_r+0x6c>)
 800547c:	429c      	cmp	r4, r3
 800547e:	d11b      	bne.n	80054b8 <_fflush_r+0x58>
 8005480:	686c      	ldr	r4, [r5, #4]
 8005482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ef      	beq.n	800546a <_fflush_r+0xa>
 800548a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800548c:	07d0      	lsls	r0, r2, #31
 800548e:	d404      	bmi.n	800549a <_fflush_r+0x3a>
 8005490:	0599      	lsls	r1, r3, #22
 8005492:	d402      	bmi.n	800549a <_fflush_r+0x3a>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f000 f927 	bl	80056e8 <__retarget_lock_acquire_recursive>
 800549a:	4628      	mov	r0, r5
 800549c:	4621      	mov	r1, r4
 800549e:	f7ff ff59 	bl	8005354 <__sflush_r>
 80054a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a4:	07da      	lsls	r2, r3, #31
 80054a6:	4605      	mov	r5, r0
 80054a8:	d4e0      	bmi.n	800546c <_fflush_r+0xc>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d4dd      	bmi.n	800546c <_fflush_r+0xc>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f000 f91a 	bl	80056ea <__retarget_lock_release_recursive>
 80054b6:	e7d9      	b.n	800546c <_fflush_r+0xc>
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <_fflush_r+0x70>)
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d101      	bne.n	80054c2 <_fflush_r+0x62>
 80054be:	68ac      	ldr	r4, [r5, #8]
 80054c0:	e7df      	b.n	8005482 <_fflush_r+0x22>
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <_fflush_r+0x74>)
 80054c4:	429c      	cmp	r4, r3
 80054c6:	bf08      	it	eq
 80054c8:	68ec      	ldreq	r4, [r5, #12]
 80054ca:	e7da      	b.n	8005482 <_fflush_r+0x22>
 80054cc:	08006444 	.word	0x08006444
 80054d0:	08006464 	.word	0x08006464
 80054d4:	08006424 	.word	0x08006424

080054d8 <std>:
 80054d8:	2300      	movs	r3, #0
 80054da:	b510      	push	{r4, lr}
 80054dc:	4604      	mov	r4, r0
 80054de:	e9c0 3300 	strd	r3, r3, [r0]
 80054e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054e6:	6083      	str	r3, [r0, #8]
 80054e8:	8181      	strh	r1, [r0, #12]
 80054ea:	6643      	str	r3, [r0, #100]	; 0x64
 80054ec:	81c2      	strh	r2, [r0, #14]
 80054ee:	6183      	str	r3, [r0, #24]
 80054f0:	4619      	mov	r1, r3
 80054f2:	2208      	movs	r2, #8
 80054f4:	305c      	adds	r0, #92	; 0x5c
 80054f6:	f7ff fd15 	bl	8004f24 <memset>
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <std+0x38>)
 80054fc:	6263      	str	r3, [r4, #36]	; 0x24
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <std+0x3c>)
 8005500:	62a3      	str	r3, [r4, #40]	; 0x28
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <std+0x40>)
 8005504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <std+0x44>)
 8005508:	6224      	str	r4, [r4, #32]
 800550a:	6323      	str	r3, [r4, #48]	; 0x30
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	08005fa5 	.word	0x08005fa5
 8005514:	08005fc7 	.word	0x08005fc7
 8005518:	08005fff 	.word	0x08005fff
 800551c:	08006023 	.word	0x08006023

08005520 <_cleanup_r>:
 8005520:	4901      	ldr	r1, [pc, #4]	; (8005528 <_cleanup_r+0x8>)
 8005522:	f000 b8c1 	b.w	80056a8 <_fwalk_reent>
 8005526:	bf00      	nop
 8005528:	08005461 	.word	0x08005461

0800552c <__sfmoreglue>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	1e4a      	subs	r2, r1, #1
 8005530:	2568      	movs	r5, #104	; 0x68
 8005532:	4355      	muls	r5, r2
 8005534:	460e      	mov	r6, r1
 8005536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800553a:	f000 f993 	bl	8005864 <_malloc_r>
 800553e:	4604      	mov	r4, r0
 8005540:	b140      	cbz	r0, 8005554 <__sfmoreglue+0x28>
 8005542:	2100      	movs	r1, #0
 8005544:	e9c0 1600 	strd	r1, r6, [r0]
 8005548:	300c      	adds	r0, #12
 800554a:	60a0      	str	r0, [r4, #8]
 800554c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005550:	f7ff fce8 	bl	8004f24 <memset>
 8005554:	4620      	mov	r0, r4
 8005556:	bd70      	pop	{r4, r5, r6, pc}

08005558 <__sfp_lock_acquire>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__sfp_lock_acquire+0x8>)
 800555a:	f000 b8c5 	b.w	80056e8 <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	200004a0 	.word	0x200004a0

08005564 <__sfp_lock_release>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__sfp_lock_release+0x8>)
 8005566:	f000 b8c0 	b.w	80056ea <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	200004a0 	.word	0x200004a0

08005570 <__sinit_lock_acquire>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__sinit_lock_acquire+0x8>)
 8005572:	f000 b8b9 	b.w	80056e8 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	2000049b 	.word	0x2000049b

0800557c <__sinit_lock_release>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__sinit_lock_release+0x8>)
 800557e:	f000 b8b4 	b.w	80056ea <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	2000049b 	.word	0x2000049b

08005588 <__sinit>:
 8005588:	b510      	push	{r4, lr}
 800558a:	4604      	mov	r4, r0
 800558c:	f7ff fff0 	bl	8005570 <__sinit_lock_acquire>
 8005590:	69a3      	ldr	r3, [r4, #24]
 8005592:	b11b      	cbz	r3, 800559c <__sinit+0x14>
 8005594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005598:	f7ff bff0 	b.w	800557c <__sinit_lock_release>
 800559c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055a0:	6523      	str	r3, [r4, #80]	; 0x50
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <__sinit+0x68>)
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <__sinit+0x6c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	bf04      	itt	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	61a3      	streq	r3, [r4, #24]
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f820 	bl	80055f8 <__sfp>
 80055b8:	6060      	str	r0, [r4, #4]
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f81c 	bl	80055f8 <__sfp>
 80055c0:	60a0      	str	r0, [r4, #8]
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f818 	bl	80055f8 <__sfp>
 80055c8:	2200      	movs	r2, #0
 80055ca:	60e0      	str	r0, [r4, #12]
 80055cc:	2104      	movs	r1, #4
 80055ce:	6860      	ldr	r0, [r4, #4]
 80055d0:	f7ff ff82 	bl	80054d8 <std>
 80055d4:	68a0      	ldr	r0, [r4, #8]
 80055d6:	2201      	movs	r2, #1
 80055d8:	2109      	movs	r1, #9
 80055da:	f7ff ff7d 	bl	80054d8 <std>
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	2112      	movs	r1, #18
 80055e4:	f7ff ff78 	bl	80054d8 <std>
 80055e8:	2301      	movs	r3, #1
 80055ea:	61a3      	str	r3, [r4, #24]
 80055ec:	e7d2      	b.n	8005594 <__sinit+0xc>
 80055ee:	bf00      	nop
 80055f0:	0800636c 	.word	0x0800636c
 80055f4:	08005521 	.word	0x08005521

080055f8 <__sfp>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	4607      	mov	r7, r0
 80055fc:	f7ff ffac 	bl	8005558 <__sfp_lock_acquire>
 8005600:	4b1e      	ldr	r3, [pc, #120]	; (800567c <__sfp+0x84>)
 8005602:	681e      	ldr	r6, [r3, #0]
 8005604:	69b3      	ldr	r3, [r6, #24]
 8005606:	b913      	cbnz	r3, 800560e <__sfp+0x16>
 8005608:	4630      	mov	r0, r6
 800560a:	f7ff ffbd 	bl	8005588 <__sinit>
 800560e:	3648      	adds	r6, #72	; 0x48
 8005610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005614:	3b01      	subs	r3, #1
 8005616:	d503      	bpl.n	8005620 <__sfp+0x28>
 8005618:	6833      	ldr	r3, [r6, #0]
 800561a:	b30b      	cbz	r3, 8005660 <__sfp+0x68>
 800561c:	6836      	ldr	r6, [r6, #0]
 800561e:	e7f7      	b.n	8005610 <__sfp+0x18>
 8005620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005624:	b9d5      	cbnz	r5, 800565c <__sfp+0x64>
 8005626:	4b16      	ldr	r3, [pc, #88]	; (8005680 <__sfp+0x88>)
 8005628:	60e3      	str	r3, [r4, #12]
 800562a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800562e:	6665      	str	r5, [r4, #100]	; 0x64
 8005630:	f000 f859 	bl	80056e6 <__retarget_lock_init_recursive>
 8005634:	f7ff ff96 	bl	8005564 <__sfp_lock_release>
 8005638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800563c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	61a5      	str	r5, [r4, #24]
 8005644:	2208      	movs	r2, #8
 8005646:	4629      	mov	r1, r5
 8005648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800564c:	f7ff fc6a 	bl	8004f24 <memset>
 8005650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005658:	4620      	mov	r0, r4
 800565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565c:	3468      	adds	r4, #104	; 0x68
 800565e:	e7d9      	b.n	8005614 <__sfp+0x1c>
 8005660:	2104      	movs	r1, #4
 8005662:	4638      	mov	r0, r7
 8005664:	f7ff ff62 	bl	800552c <__sfmoreglue>
 8005668:	4604      	mov	r4, r0
 800566a:	6030      	str	r0, [r6, #0]
 800566c:	2800      	cmp	r0, #0
 800566e:	d1d5      	bne.n	800561c <__sfp+0x24>
 8005670:	f7ff ff78 	bl	8005564 <__sfp_lock_release>
 8005674:	230c      	movs	r3, #12
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	e7ee      	b.n	8005658 <__sfp+0x60>
 800567a:	bf00      	nop
 800567c:	0800636c 	.word	0x0800636c
 8005680:	ffff0001 	.word	0xffff0001

08005684 <fiprintf>:
 8005684:	b40e      	push	{r1, r2, r3}
 8005686:	b503      	push	{r0, r1, lr}
 8005688:	4601      	mov	r1, r0
 800568a:	ab03      	add	r3, sp, #12
 800568c:	4805      	ldr	r0, [pc, #20]	; (80056a4 <fiprintf+0x20>)
 800568e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005692:	6800      	ldr	r0, [r0, #0]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	f000 f969 	bl	800596c <_vfiprintf_r>
 800569a:	b002      	add	sp, #8
 800569c:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a0:	b003      	add	sp, #12
 80056a2:	4770      	bx	lr
 80056a4:	2000000c 	.word	0x2000000c

080056a8 <_fwalk_reent>:
 80056a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ac:	4606      	mov	r6, r0
 80056ae:	4688      	mov	r8, r1
 80056b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056b4:	2700      	movs	r7, #0
 80056b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056ba:	f1b9 0901 	subs.w	r9, r9, #1
 80056be:	d505      	bpl.n	80056cc <_fwalk_reent+0x24>
 80056c0:	6824      	ldr	r4, [r4, #0]
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	d1f7      	bne.n	80056b6 <_fwalk_reent+0xe>
 80056c6:	4638      	mov	r0, r7
 80056c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056cc:	89ab      	ldrh	r3, [r5, #12]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d907      	bls.n	80056e2 <_fwalk_reent+0x3a>
 80056d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056d6:	3301      	adds	r3, #1
 80056d8:	d003      	beq.n	80056e2 <_fwalk_reent+0x3a>
 80056da:	4629      	mov	r1, r5
 80056dc:	4630      	mov	r0, r6
 80056de:	47c0      	blx	r8
 80056e0:	4307      	orrs	r7, r0
 80056e2:	3568      	adds	r5, #104	; 0x68
 80056e4:	e7e9      	b.n	80056ba <_fwalk_reent+0x12>

080056e6 <__retarget_lock_init_recursive>:
 80056e6:	4770      	bx	lr

080056e8 <__retarget_lock_acquire_recursive>:
 80056e8:	4770      	bx	lr

080056ea <__retarget_lock_release_recursive>:
 80056ea:	4770      	bx	lr

080056ec <__swhatbuf_r>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	460e      	mov	r6, r1
 80056f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f4:	2900      	cmp	r1, #0
 80056f6:	b096      	sub	sp, #88	; 0x58
 80056f8:	4614      	mov	r4, r2
 80056fa:	461d      	mov	r5, r3
 80056fc:	da07      	bge.n	800570e <__swhatbuf_r+0x22>
 80056fe:	2300      	movs	r3, #0
 8005700:	602b      	str	r3, [r5, #0]
 8005702:	89b3      	ldrh	r3, [r6, #12]
 8005704:	061a      	lsls	r2, r3, #24
 8005706:	d410      	bmi.n	800572a <__swhatbuf_r+0x3e>
 8005708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570c:	e00e      	b.n	800572c <__swhatbuf_r+0x40>
 800570e:	466a      	mov	r2, sp
 8005710:	f000 fcb6 	bl	8006080 <_fstat_r>
 8005714:	2800      	cmp	r0, #0
 8005716:	dbf2      	blt.n	80056fe <__swhatbuf_r+0x12>
 8005718:	9a01      	ldr	r2, [sp, #4]
 800571a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800571e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005722:	425a      	negs	r2, r3
 8005724:	415a      	adcs	r2, r3
 8005726:	602a      	str	r2, [r5, #0]
 8005728:	e7ee      	b.n	8005708 <__swhatbuf_r+0x1c>
 800572a:	2340      	movs	r3, #64	; 0x40
 800572c:	2000      	movs	r0, #0
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	b016      	add	sp, #88	; 0x58
 8005732:	bd70      	pop	{r4, r5, r6, pc}

08005734 <__smakebuf_r>:
 8005734:	898b      	ldrh	r3, [r1, #12]
 8005736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005738:	079d      	lsls	r5, r3, #30
 800573a:	4606      	mov	r6, r0
 800573c:	460c      	mov	r4, r1
 800573e:	d507      	bpl.n	8005750 <__smakebuf_r+0x1c>
 8005740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	2301      	movs	r3, #1
 800574a:	6163      	str	r3, [r4, #20]
 800574c:	b002      	add	sp, #8
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	ab01      	add	r3, sp, #4
 8005752:	466a      	mov	r2, sp
 8005754:	f7ff ffca 	bl	80056ec <__swhatbuf_r>
 8005758:	9900      	ldr	r1, [sp, #0]
 800575a:	4605      	mov	r5, r0
 800575c:	4630      	mov	r0, r6
 800575e:	f000 f881 	bl	8005864 <_malloc_r>
 8005762:	b948      	cbnz	r0, 8005778 <__smakebuf_r+0x44>
 8005764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005768:	059a      	lsls	r2, r3, #22
 800576a:	d4ef      	bmi.n	800574c <__smakebuf_r+0x18>
 800576c:	f023 0303 	bic.w	r3, r3, #3
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	e7e3      	b.n	8005740 <__smakebuf_r+0xc>
 8005778:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <__smakebuf_r+0x7c>)
 800577a:	62b3      	str	r3, [r6, #40]	; 0x28
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	6020      	str	r0, [r4, #0]
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	81a3      	strh	r3, [r4, #12]
 8005786:	9b00      	ldr	r3, [sp, #0]
 8005788:	6163      	str	r3, [r4, #20]
 800578a:	9b01      	ldr	r3, [sp, #4]
 800578c:	6120      	str	r0, [r4, #16]
 800578e:	b15b      	cbz	r3, 80057a8 <__smakebuf_r+0x74>
 8005790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005794:	4630      	mov	r0, r6
 8005796:	f000 fc85 	bl	80060a4 <_isatty_r>
 800579a:	b128      	cbz	r0, 80057a8 <__smakebuf_r+0x74>
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	81a3      	strh	r3, [r4, #12]
 80057a8:	89a0      	ldrh	r0, [r4, #12]
 80057aa:	4305      	orrs	r5, r0
 80057ac:	81a5      	strh	r5, [r4, #12]
 80057ae:	e7cd      	b.n	800574c <__smakebuf_r+0x18>
 80057b0:	08005521 	.word	0x08005521

080057b4 <malloc>:
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <malloc+0xc>)
 80057b6:	4601      	mov	r1, r0
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	f000 b853 	b.w	8005864 <_malloc_r>
 80057be:	bf00      	nop
 80057c0:	2000000c 	.word	0x2000000c

080057c4 <_free_r>:
 80057c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057c6:	2900      	cmp	r1, #0
 80057c8:	d048      	beq.n	800585c <_free_r+0x98>
 80057ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ce:	9001      	str	r0, [sp, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f1a1 0404 	sub.w	r4, r1, #4
 80057d6:	bfb8      	it	lt
 80057d8:	18e4      	addlt	r4, r4, r3
 80057da:	f000 fc85 	bl	80060e8 <__malloc_lock>
 80057de:	4a20      	ldr	r2, [pc, #128]	; (8005860 <_free_r+0x9c>)
 80057e0:	9801      	ldr	r0, [sp, #4]
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	4615      	mov	r5, r2
 80057e6:	b933      	cbnz	r3, 80057f6 <_free_r+0x32>
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6014      	str	r4, [r2, #0]
 80057ec:	b003      	add	sp, #12
 80057ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057f2:	f000 bc7f 	b.w	80060f4 <__malloc_unlock>
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	d90b      	bls.n	8005812 <_free_r+0x4e>
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	1862      	adds	r2, r4, r1
 80057fe:	4293      	cmp	r3, r2
 8005800:	bf04      	itt	eq
 8005802:	681a      	ldreq	r2, [r3, #0]
 8005804:	685b      	ldreq	r3, [r3, #4]
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	bf04      	itt	eq
 800580a:	1852      	addeq	r2, r2, r1
 800580c:	6022      	streq	r2, [r4, #0]
 800580e:	602c      	str	r4, [r5, #0]
 8005810:	e7ec      	b.n	80057ec <_free_r+0x28>
 8005812:	461a      	mov	r2, r3
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	b10b      	cbz	r3, 800581c <_free_r+0x58>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d9fa      	bls.n	8005812 <_free_r+0x4e>
 800581c:	6811      	ldr	r1, [r2, #0]
 800581e:	1855      	adds	r5, r2, r1
 8005820:	42a5      	cmp	r5, r4
 8005822:	d10b      	bne.n	800583c <_free_r+0x78>
 8005824:	6824      	ldr	r4, [r4, #0]
 8005826:	4421      	add	r1, r4
 8005828:	1854      	adds	r4, r2, r1
 800582a:	42a3      	cmp	r3, r4
 800582c:	6011      	str	r1, [r2, #0]
 800582e:	d1dd      	bne.n	80057ec <_free_r+0x28>
 8005830:	681c      	ldr	r4, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	6053      	str	r3, [r2, #4]
 8005836:	4421      	add	r1, r4
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	e7d7      	b.n	80057ec <_free_r+0x28>
 800583c:	d902      	bls.n	8005844 <_free_r+0x80>
 800583e:	230c      	movs	r3, #12
 8005840:	6003      	str	r3, [r0, #0]
 8005842:	e7d3      	b.n	80057ec <_free_r+0x28>
 8005844:	6825      	ldr	r5, [r4, #0]
 8005846:	1961      	adds	r1, r4, r5
 8005848:	428b      	cmp	r3, r1
 800584a:	bf04      	itt	eq
 800584c:	6819      	ldreq	r1, [r3, #0]
 800584e:	685b      	ldreq	r3, [r3, #4]
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	bf04      	itt	eq
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	6054      	str	r4, [r2, #4]
 800585a:	e7c7      	b.n	80057ec <_free_r+0x28>
 800585c:	b003      	add	sp, #12
 800585e:	bd30      	pop	{r4, r5, pc}
 8005860:	20000298 	.word	0x20000298

08005864 <_malloc_r>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	1ccd      	adds	r5, r1, #3
 8005868:	f025 0503 	bic.w	r5, r5, #3
 800586c:	3508      	adds	r5, #8
 800586e:	2d0c      	cmp	r5, #12
 8005870:	bf38      	it	cc
 8005872:	250c      	movcc	r5, #12
 8005874:	2d00      	cmp	r5, #0
 8005876:	4606      	mov	r6, r0
 8005878:	db01      	blt.n	800587e <_malloc_r+0x1a>
 800587a:	42a9      	cmp	r1, r5
 800587c:	d903      	bls.n	8005886 <_malloc_r+0x22>
 800587e:	230c      	movs	r3, #12
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	2000      	movs	r0, #0
 8005884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005886:	f000 fc2f 	bl	80060e8 <__malloc_lock>
 800588a:	4921      	ldr	r1, [pc, #132]	; (8005910 <_malloc_r+0xac>)
 800588c:	680a      	ldr	r2, [r1, #0]
 800588e:	4614      	mov	r4, r2
 8005890:	b99c      	cbnz	r4, 80058ba <_malloc_r+0x56>
 8005892:	4f20      	ldr	r7, [pc, #128]	; (8005914 <_malloc_r+0xb0>)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b923      	cbnz	r3, 80058a2 <_malloc_r+0x3e>
 8005898:	4621      	mov	r1, r4
 800589a:	4630      	mov	r0, r6
 800589c:	f000 fb72 	bl	8005f84 <_sbrk_r>
 80058a0:	6038      	str	r0, [r7, #0]
 80058a2:	4629      	mov	r1, r5
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 fb6d 	bl	8005f84 <_sbrk_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d123      	bne.n	80058f6 <_malloc_r+0x92>
 80058ae:	230c      	movs	r3, #12
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	4630      	mov	r0, r6
 80058b4:	f000 fc1e 	bl	80060f4 <__malloc_unlock>
 80058b8:	e7e3      	b.n	8005882 <_malloc_r+0x1e>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	1b5b      	subs	r3, r3, r5
 80058be:	d417      	bmi.n	80058f0 <_malloc_r+0x8c>
 80058c0:	2b0b      	cmp	r3, #11
 80058c2:	d903      	bls.n	80058cc <_malloc_r+0x68>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	441c      	add	r4, r3
 80058c8:	6025      	str	r5, [r4, #0]
 80058ca:	e004      	b.n	80058d6 <_malloc_r+0x72>
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	42a2      	cmp	r2, r4
 80058d0:	bf0c      	ite	eq
 80058d2:	600b      	streq	r3, [r1, #0]
 80058d4:	6053      	strne	r3, [r2, #4]
 80058d6:	4630      	mov	r0, r6
 80058d8:	f000 fc0c 	bl	80060f4 <__malloc_unlock>
 80058dc:	f104 000b 	add.w	r0, r4, #11
 80058e0:	1d23      	adds	r3, r4, #4
 80058e2:	f020 0007 	bic.w	r0, r0, #7
 80058e6:	1ac2      	subs	r2, r0, r3
 80058e8:	d0cc      	beq.n	8005884 <_malloc_r+0x20>
 80058ea:	1a1b      	subs	r3, r3, r0
 80058ec:	50a3      	str	r3, [r4, r2]
 80058ee:	e7c9      	b.n	8005884 <_malloc_r+0x20>
 80058f0:	4622      	mov	r2, r4
 80058f2:	6864      	ldr	r4, [r4, #4]
 80058f4:	e7cc      	b.n	8005890 <_malloc_r+0x2c>
 80058f6:	1cc4      	adds	r4, r0, #3
 80058f8:	f024 0403 	bic.w	r4, r4, #3
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d0e3      	beq.n	80058c8 <_malloc_r+0x64>
 8005900:	1a21      	subs	r1, r4, r0
 8005902:	4630      	mov	r0, r6
 8005904:	f000 fb3e 	bl	8005f84 <_sbrk_r>
 8005908:	3001      	adds	r0, #1
 800590a:	d1dd      	bne.n	80058c8 <_malloc_r+0x64>
 800590c:	e7cf      	b.n	80058ae <_malloc_r+0x4a>
 800590e:	bf00      	nop
 8005910:	20000298 	.word	0x20000298
 8005914:	2000029c 	.word	0x2000029c

08005918 <__sfputc_r>:
 8005918:	6893      	ldr	r3, [r2, #8]
 800591a:	3b01      	subs	r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	b410      	push	{r4}
 8005920:	6093      	str	r3, [r2, #8]
 8005922:	da08      	bge.n	8005936 <__sfputc_r+0x1e>
 8005924:	6994      	ldr	r4, [r2, #24]
 8005926:	42a3      	cmp	r3, r4
 8005928:	db01      	blt.n	800592e <__sfputc_r+0x16>
 800592a:	290a      	cmp	r1, #10
 800592c:	d103      	bne.n	8005936 <__sfputc_r+0x1e>
 800592e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005932:	f7ff bc31 	b.w	8005198 <__swbuf_r>
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	1c58      	adds	r0, r3, #1
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	7019      	strb	r1, [r3, #0]
 800593e:	4608      	mov	r0, r1
 8005940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005944:	4770      	bx	lr

08005946 <__sfputs_r>:
 8005946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005948:	4606      	mov	r6, r0
 800594a:	460f      	mov	r7, r1
 800594c:	4614      	mov	r4, r2
 800594e:	18d5      	adds	r5, r2, r3
 8005950:	42ac      	cmp	r4, r5
 8005952:	d101      	bne.n	8005958 <__sfputs_r+0x12>
 8005954:	2000      	movs	r0, #0
 8005956:	e007      	b.n	8005968 <__sfputs_r+0x22>
 8005958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595c:	463a      	mov	r2, r7
 800595e:	4630      	mov	r0, r6
 8005960:	f7ff ffda 	bl	8005918 <__sfputc_r>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d1f3      	bne.n	8005950 <__sfputs_r+0xa>
 8005968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800596c <_vfiprintf_r>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	460d      	mov	r5, r1
 8005972:	b09d      	sub	sp, #116	; 0x74
 8005974:	4614      	mov	r4, r2
 8005976:	4698      	mov	r8, r3
 8005978:	4606      	mov	r6, r0
 800597a:	b118      	cbz	r0, 8005984 <_vfiprintf_r+0x18>
 800597c:	6983      	ldr	r3, [r0, #24]
 800597e:	b90b      	cbnz	r3, 8005984 <_vfiprintf_r+0x18>
 8005980:	f7ff fe02 	bl	8005588 <__sinit>
 8005984:	4b89      	ldr	r3, [pc, #548]	; (8005bac <_vfiprintf_r+0x240>)
 8005986:	429d      	cmp	r5, r3
 8005988:	d11b      	bne.n	80059c2 <_vfiprintf_r+0x56>
 800598a:	6875      	ldr	r5, [r6, #4]
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x32>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x32>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7ff fea5 	bl	80056e8 <__retarget_lock_acquire_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	d501      	bpl.n	80059a8 <_vfiprintf_r+0x3c>
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	b9eb      	cbnz	r3, 80059e4 <_vfiprintf_r+0x78>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff fc46 	bl	800523c <__swsetup_r>
 80059b0:	b1c0      	cbz	r0, 80059e4 <_vfiprintf_r+0x78>
 80059b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b4:	07dc      	lsls	r4, r3, #31
 80059b6:	d50e      	bpl.n	80059d6 <_vfiprintf_r+0x6a>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b01d      	add	sp, #116	; 0x74
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	4b7b      	ldr	r3, [pc, #492]	; (8005bb0 <_vfiprintf_r+0x244>)
 80059c4:	429d      	cmp	r5, r3
 80059c6:	d101      	bne.n	80059cc <_vfiprintf_r+0x60>
 80059c8:	68b5      	ldr	r5, [r6, #8]
 80059ca:	e7df      	b.n	800598c <_vfiprintf_r+0x20>
 80059cc:	4b79      	ldr	r3, [pc, #484]	; (8005bb4 <_vfiprintf_r+0x248>)
 80059ce:	429d      	cmp	r5, r3
 80059d0:	bf08      	it	eq
 80059d2:	68f5      	ldreq	r5, [r6, #12]
 80059d4:	e7da      	b.n	800598c <_vfiprintf_r+0x20>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	0598      	lsls	r0, r3, #22
 80059da:	d4ed      	bmi.n	80059b8 <_vfiprintf_r+0x4c>
 80059dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059de:	f7ff fe84 	bl	80056ea <__retarget_lock_release_recursive>
 80059e2:	e7e9      	b.n	80059b8 <_vfiprintf_r+0x4c>
 80059e4:	2300      	movs	r3, #0
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	2320      	movs	r3, #32
 80059ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f2:	2330      	movs	r3, #48	; 0x30
 80059f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005bb8 <_vfiprintf_r+0x24c>
 80059f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059fc:	f04f 0901 	mov.w	r9, #1
 8005a00:	4623      	mov	r3, r4
 8005a02:	469a      	mov	sl, r3
 8005a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a08:	b10a      	cbz	r2, 8005a0e <_vfiprintf_r+0xa2>
 8005a0a:	2a25      	cmp	r2, #37	; 0x25
 8005a0c:	d1f9      	bne.n	8005a02 <_vfiprintf_r+0x96>
 8005a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a12:	d00b      	beq.n	8005a2c <_vfiprintf_r+0xc0>
 8005a14:	465b      	mov	r3, fp
 8005a16:	4622      	mov	r2, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ff93 	bl	8005946 <__sfputs_r>
 8005a20:	3001      	adds	r0, #1
 8005a22:	f000 80aa 	beq.w	8005b7a <_vfiprintf_r+0x20e>
 8005a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a28:	445a      	add	r2, fp
 8005a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a2 	beq.w	8005b7a <_vfiprintf_r+0x20e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a40:	f10a 0a01 	add.w	sl, sl, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4e:	4654      	mov	r4, sl
 8005a50:	2205      	movs	r2, #5
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	4858      	ldr	r0, [pc, #352]	; (8005bb8 <_vfiprintf_r+0x24c>)
 8005a58:	f7fa fbfa 	bl	8000250 <memchr>
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	b9d8      	cbnz	r0, 8005a98 <_vfiprintf_r+0x12c>
 8005a60:	06d1      	lsls	r1, r2, #27
 8005a62:	bf44      	itt	mi
 8005a64:	2320      	movmi	r3, #32
 8005a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6a:	0713      	lsls	r3, r2, #28
 8005a6c:	bf44      	itt	mi
 8005a6e:	232b      	movmi	r3, #43	; 0x2b
 8005a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7a:	d015      	beq.n	8005aa8 <_vfiprintf_r+0x13c>
 8005a7c:	9a07      	ldr	r2, [sp, #28]
 8005a7e:	4654      	mov	r4, sl
 8005a80:	2000      	movs	r0, #0
 8005a82:	f04f 0c0a 	mov.w	ip, #10
 8005a86:	4621      	mov	r1, r4
 8005a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8c:	3b30      	subs	r3, #48	; 0x30
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d94e      	bls.n	8005b30 <_vfiprintf_r+0x1c4>
 8005a92:	b1b0      	cbz	r0, 8005ac2 <_vfiprintf_r+0x156>
 8005a94:	9207      	str	r2, [sp, #28]
 8005a96:	e014      	b.n	8005ac2 <_vfiprintf_r+0x156>
 8005a98:	eba0 0308 	sub.w	r3, r0, r8
 8005a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	46a2      	mov	sl, r4
 8005aa6:	e7d2      	b.n	8005a4e <_vfiprintf_r+0xe2>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfbb      	ittet	lt
 8005ab4:	425b      	neglt	r3, r3
 8005ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aba:	9307      	strge	r3, [sp, #28]
 8005abc:	9307      	strlt	r3, [sp, #28]
 8005abe:	bfb8      	it	lt
 8005ac0:	9204      	strlt	r2, [sp, #16]
 8005ac2:	7823      	ldrb	r3, [r4, #0]
 8005ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac6:	d10c      	bne.n	8005ae2 <_vfiprintf_r+0x176>
 8005ac8:	7863      	ldrb	r3, [r4, #1]
 8005aca:	2b2a      	cmp	r3, #42	; 0x2a
 8005acc:	d135      	bne.n	8005b3a <_vfiprintf_r+0x1ce>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	9203      	str	r2, [sp, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfb8      	it	lt
 8005ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ade:	3402      	adds	r4, #2
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bc8 <_vfiprintf_r+0x25c>
 8005ae6:	7821      	ldrb	r1, [r4, #0]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4650      	mov	r0, sl
 8005aec:	f7fa fbb0 	bl	8000250 <memchr>
 8005af0:	b140      	cbz	r0, 8005b04 <_vfiprintf_r+0x198>
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	eba0 000a 	sub.w	r0, r0, sl
 8005af8:	fa03 f000 	lsl.w	r0, r3, r0
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	4303      	orrs	r3, r0
 8005b00:	3401      	adds	r4, #1
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b08:	482c      	ldr	r0, [pc, #176]	; (8005bbc <_vfiprintf_r+0x250>)
 8005b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b0e:	2206      	movs	r2, #6
 8005b10:	f7fa fb9e 	bl	8000250 <memchr>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d03f      	beq.n	8005b98 <_vfiprintf_r+0x22c>
 8005b18:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <_vfiprintf_r+0x254>)
 8005b1a:	bb1b      	cbnz	r3, 8005b64 <_vfiprintf_r+0x1f8>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	3307      	adds	r3, #7
 8005b20:	f023 0307 	bic.w	r3, r3, #7
 8005b24:	3308      	adds	r3, #8
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2a:	443b      	add	r3, r7
 8005b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2e:	e767      	b.n	8005a00 <_vfiprintf_r+0x94>
 8005b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b34:	460c      	mov	r4, r1
 8005b36:	2001      	movs	r0, #1
 8005b38:	e7a5      	b.n	8005a86 <_vfiprintf_r+0x11a>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	3401      	adds	r4, #1
 8005b3e:	9305      	str	r3, [sp, #20]
 8005b40:	4619      	mov	r1, r3
 8005b42:	f04f 0c0a 	mov.w	ip, #10
 8005b46:	4620      	mov	r0, r4
 8005b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4c:	3a30      	subs	r2, #48	; 0x30
 8005b4e:	2a09      	cmp	r2, #9
 8005b50:	d903      	bls.n	8005b5a <_vfiprintf_r+0x1ee>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0c5      	beq.n	8005ae2 <_vfiprintf_r+0x176>
 8005b56:	9105      	str	r1, [sp, #20]
 8005b58:	e7c3      	b.n	8005ae2 <_vfiprintf_r+0x176>
 8005b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b5e:	4604      	mov	r4, r0
 8005b60:	2301      	movs	r3, #1
 8005b62:	e7f0      	b.n	8005b46 <_vfiprintf_r+0x1da>
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <_vfiprintf_r+0x258>)
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f3af 8000 	nop.w
 8005b74:	4607      	mov	r7, r0
 8005b76:	1c78      	adds	r0, r7, #1
 8005b78:	d1d6      	bne.n	8005b28 <_vfiprintf_r+0x1bc>
 8005b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b7c:	07d9      	lsls	r1, r3, #31
 8005b7e:	d405      	bmi.n	8005b8c <_vfiprintf_r+0x220>
 8005b80:	89ab      	ldrh	r3, [r5, #12]
 8005b82:	059a      	lsls	r2, r3, #22
 8005b84:	d402      	bmi.n	8005b8c <_vfiprintf_r+0x220>
 8005b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b88:	f7ff fdaf 	bl	80056ea <__retarget_lock_release_recursive>
 8005b8c:	89ab      	ldrh	r3, [r5, #12]
 8005b8e:	065b      	lsls	r3, r3, #25
 8005b90:	f53f af12 	bmi.w	80059b8 <_vfiprintf_r+0x4c>
 8005b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b96:	e711      	b.n	80059bc <_vfiprintf_r+0x50>
 8005b98:	ab03      	add	r3, sp, #12
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <_vfiprintf_r+0x258>)
 8005ba0:	a904      	add	r1, sp, #16
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f000 f880 	bl	8005ca8 <_printf_i>
 8005ba8:	e7e4      	b.n	8005b74 <_vfiprintf_r+0x208>
 8005baa:	bf00      	nop
 8005bac:	08006444 	.word	0x08006444
 8005bb0:	08006464 	.word	0x08006464
 8005bb4:	08006424 	.word	0x08006424
 8005bb8:	08006484 	.word	0x08006484
 8005bbc:	0800648e 	.word	0x0800648e
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	08005947 	.word	0x08005947
 8005bc8:	0800648a 	.word	0x0800648a

08005bcc <_printf_common>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	688a      	ldr	r2, [r1, #8]
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bfb8      	it	lt
 8005be0:	4613      	movlt	r3, r2
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be8:	4607      	mov	r7, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	b10a      	cbz	r2, 8005bf2 <_printf_common+0x26>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	6833      	ldrmi	r3, [r6, #0]
 8005bfa:	3302      	addmi	r3, #2
 8005bfc:	6033      	strmi	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d106      	bne.n	8005c14 <_printf_common+0x48>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	6832      	ldr	r2, [r6, #0]
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc26      	bgt.n	8005c62 <_printf_common+0x96>
 8005c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c18:	1e13      	subs	r3, r2, #0
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	bf18      	it	ne
 8005c1e:	2301      	movne	r3, #1
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d42b      	bmi.n	8005c7c <_printf_common+0xb0>
 8005c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d01e      	beq.n	8005c70 <_printf_common+0xa4>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	68e5      	ldr	r5, [r4, #12]
 8005c36:	6832      	ldr	r2, [r6, #0]
 8005c38:	f003 0306 	and.w	r3, r3, #6
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	bf08      	it	eq
 8005c40:	1aad      	subeq	r5, r5, r2
 8005c42:	68a3      	ldr	r3, [r4, #8]
 8005c44:	6922      	ldr	r2, [r4, #16]
 8005c46:	bf0c      	ite	eq
 8005c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c4c:	2500      	movne	r5, #0
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	bfc4      	itt	gt
 8005c52:	1a9b      	subgt	r3, r3, r2
 8005c54:	18ed      	addgt	r5, r5, r3
 8005c56:	2600      	movs	r6, #0
 8005c58:	341a      	adds	r4, #26
 8005c5a:	42b5      	cmp	r5, r6
 8005c5c:	d11a      	bne.n	8005c94 <_printf_common+0xc8>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e008      	b.n	8005c74 <_printf_common+0xa8>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4649      	mov	r1, r9
 8005c68:	4638      	mov	r0, r7
 8005c6a:	47c0      	blx	r8
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d103      	bne.n	8005c78 <_printf_common+0xac>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	3501      	adds	r5, #1
 8005c7a:	e7c6      	b.n	8005c0a <_printf_common+0x3e>
 8005c7c:	18e1      	adds	r1, r4, r3
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	2030      	movs	r0, #48	; 0x30
 8005c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c86:	4422      	add	r2, r4
 8005c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c90:	3302      	adds	r3, #2
 8005c92:	e7c7      	b.n	8005c24 <_printf_common+0x58>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4622      	mov	r2, r4
 8005c98:	4649      	mov	r1, r9
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c0      	blx	r8
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0e6      	beq.n	8005c70 <_printf_common+0xa4>
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	e7d9      	b.n	8005c5a <_printf_common+0x8e>
	...

08005ca8 <_printf_i>:
 8005ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	4691      	mov	r9, r2
 8005cb0:	7e27      	ldrb	r7, [r4, #24]
 8005cb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cb4:	2f78      	cmp	r7, #120	; 0x78
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	469a      	mov	sl, r3
 8005cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cbe:	d807      	bhi.n	8005cd0 <_printf_i+0x28>
 8005cc0:	2f62      	cmp	r7, #98	; 0x62
 8005cc2:	d80a      	bhi.n	8005cda <_printf_i+0x32>
 8005cc4:	2f00      	cmp	r7, #0
 8005cc6:	f000 80d8 	beq.w	8005e7a <_printf_i+0x1d2>
 8005cca:	2f58      	cmp	r7, #88	; 0x58
 8005ccc:	f000 80a3 	beq.w	8005e16 <_printf_i+0x16e>
 8005cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cd8:	e03a      	b.n	8005d50 <_printf_i+0xa8>
 8005cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cde:	2b15      	cmp	r3, #21
 8005ce0:	d8f6      	bhi.n	8005cd0 <_printf_i+0x28>
 8005ce2:	a001      	add	r0, pc, #4	; (adr r0, 8005ce8 <_printf_i+0x40>)
 8005ce4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d55 	.word	0x08005d55
 8005cf0:	08005cd1 	.word	0x08005cd1
 8005cf4:	08005cd1 	.word	0x08005cd1
 8005cf8:	08005cd1 	.word	0x08005cd1
 8005cfc:	08005cd1 	.word	0x08005cd1
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005cd1 	.word	0x08005cd1
 8005d08:	08005cd1 	.word	0x08005cd1
 8005d0c:	08005cd1 	.word	0x08005cd1
 8005d10:	08005cd1 	.word	0x08005cd1
 8005d14:	08005e61 	.word	0x08005e61
 8005d18:	08005d85 	.word	0x08005d85
 8005d1c:	08005e43 	.word	0x08005e43
 8005d20:	08005cd1 	.word	0x08005cd1
 8005d24:	08005cd1 	.word	0x08005cd1
 8005d28:	08005e83 	.word	0x08005e83
 8005d2c:	08005cd1 	.word	0x08005cd1
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005cd1 	.word	0x08005cd1
 8005d38:	08005cd1 	.word	0x08005cd1
 8005d3c:	08005e4b 	.word	0x08005e4b
 8005d40:	680b      	ldr	r3, [r1, #0]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	600a      	str	r2, [r1, #0]
 8005d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0a3      	b.n	8005e9c <_printf_i+0x1f4>
 8005d54:	6825      	ldr	r5, [r4, #0]
 8005d56:	6808      	ldr	r0, [r1, #0]
 8005d58:	062e      	lsls	r6, r5, #24
 8005d5a:	f100 0304 	add.w	r3, r0, #4
 8005d5e:	d50a      	bpl.n	8005d76 <_printf_i+0xce>
 8005d60:	6805      	ldr	r5, [r0, #0]
 8005d62:	600b      	str	r3, [r1, #0]
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	da03      	bge.n	8005d70 <_printf_i+0xc8>
 8005d68:	232d      	movs	r3, #45	; 0x2d
 8005d6a:	426d      	negs	r5, r5
 8005d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d70:	485e      	ldr	r0, [pc, #376]	; (8005eec <_printf_i+0x244>)
 8005d72:	230a      	movs	r3, #10
 8005d74:	e019      	b.n	8005daa <_printf_i+0x102>
 8005d76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d7a:	6805      	ldr	r5, [r0, #0]
 8005d7c:	600b      	str	r3, [r1, #0]
 8005d7e:	bf18      	it	ne
 8005d80:	b22d      	sxthne	r5, r5
 8005d82:	e7ef      	b.n	8005d64 <_printf_i+0xbc>
 8005d84:	680b      	ldr	r3, [r1, #0]
 8005d86:	6825      	ldr	r5, [r4, #0]
 8005d88:	1d18      	adds	r0, r3, #4
 8005d8a:	6008      	str	r0, [r1, #0]
 8005d8c:	0628      	lsls	r0, r5, #24
 8005d8e:	d501      	bpl.n	8005d94 <_printf_i+0xec>
 8005d90:	681d      	ldr	r5, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <_printf_i+0xf2>
 8005d94:	0669      	lsls	r1, r5, #25
 8005d96:	d5fb      	bpl.n	8005d90 <_printf_i+0xe8>
 8005d98:	881d      	ldrh	r5, [r3, #0]
 8005d9a:	4854      	ldr	r0, [pc, #336]	; (8005eec <_printf_i+0x244>)
 8005d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d9e:	bf0c      	ite	eq
 8005da0:	2308      	moveq	r3, #8
 8005da2:	230a      	movne	r3, #10
 8005da4:	2100      	movs	r1, #0
 8005da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005daa:	6866      	ldr	r6, [r4, #4]
 8005dac:	60a6      	str	r6, [r4, #8]
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	bfa2      	ittt	ge
 8005db2:	6821      	ldrge	r1, [r4, #0]
 8005db4:	f021 0104 	bicge.w	r1, r1, #4
 8005db8:	6021      	strge	r1, [r4, #0]
 8005dba:	b90d      	cbnz	r5, 8005dc0 <_printf_i+0x118>
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	d04d      	beq.n	8005e5c <_printf_i+0x1b4>
 8005dc0:	4616      	mov	r6, r2
 8005dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8005dca:	5dc7      	ldrb	r7, [r0, r7]
 8005dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dd0:	462f      	mov	r7, r5
 8005dd2:	42bb      	cmp	r3, r7
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	d9f4      	bls.n	8005dc2 <_printf_i+0x11a>
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d10b      	bne.n	8005df4 <_printf_i+0x14c>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	07df      	lsls	r7, r3, #31
 8005de0:	d508      	bpl.n	8005df4 <_printf_i+0x14c>
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	6861      	ldr	r1, [r4, #4]
 8005de6:	4299      	cmp	r1, r3
 8005de8:	bfde      	ittt	le
 8005dea:	2330      	movle	r3, #48	; 0x30
 8005dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005df4:	1b92      	subs	r2, r2, r6
 8005df6:	6122      	str	r2, [r4, #16]
 8005df8:	f8cd a000 	str.w	sl, [sp]
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	aa03      	add	r2, sp, #12
 8005e00:	4621      	mov	r1, r4
 8005e02:	4640      	mov	r0, r8
 8005e04:	f7ff fee2 	bl	8005bcc <_printf_common>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d14c      	bne.n	8005ea6 <_printf_i+0x1fe>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	b004      	add	sp, #16
 8005e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e16:	4835      	ldr	r0, [pc, #212]	; (8005eec <_printf_i+0x244>)
 8005e18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	680e      	ldr	r6, [r1, #0]
 8005e20:	061f      	lsls	r7, r3, #24
 8005e22:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e26:	600e      	str	r6, [r1, #0]
 8005e28:	d514      	bpl.n	8005e54 <_printf_i+0x1ac>
 8005e2a:	07d9      	lsls	r1, r3, #31
 8005e2c:	bf44      	itt	mi
 8005e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e32:	6023      	strmi	r3, [r4, #0]
 8005e34:	b91d      	cbnz	r5, 8005e3e <_printf_i+0x196>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f023 0320 	bic.w	r3, r3, #32
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	2310      	movs	r3, #16
 8005e40:	e7b0      	b.n	8005da4 <_printf_i+0xfc>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f043 0320 	orr.w	r3, r3, #32
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	2378      	movs	r3, #120	; 0x78
 8005e4c:	4828      	ldr	r0, [pc, #160]	; (8005ef0 <_printf_i+0x248>)
 8005e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e52:	e7e3      	b.n	8005e1c <_printf_i+0x174>
 8005e54:	065e      	lsls	r6, r3, #25
 8005e56:	bf48      	it	mi
 8005e58:	b2ad      	uxthmi	r5, r5
 8005e5a:	e7e6      	b.n	8005e2a <_printf_i+0x182>
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	e7bb      	b.n	8005dd8 <_printf_i+0x130>
 8005e60:	680b      	ldr	r3, [r1, #0]
 8005e62:	6826      	ldr	r6, [r4, #0]
 8005e64:	6960      	ldr	r0, [r4, #20]
 8005e66:	1d1d      	adds	r5, r3, #4
 8005e68:	600d      	str	r5, [r1, #0]
 8005e6a:	0635      	lsls	r5, r6, #24
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	d501      	bpl.n	8005e74 <_printf_i+0x1cc>
 8005e70:	6018      	str	r0, [r3, #0]
 8005e72:	e002      	b.n	8005e7a <_printf_i+0x1d2>
 8005e74:	0671      	lsls	r1, r6, #25
 8005e76:	d5fb      	bpl.n	8005e70 <_printf_i+0x1c8>
 8005e78:	8018      	strh	r0, [r3, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	4616      	mov	r6, r2
 8005e80:	e7ba      	b.n	8005df8 <_printf_i+0x150>
 8005e82:	680b      	ldr	r3, [r1, #0]
 8005e84:	1d1a      	adds	r2, r3, #4
 8005e86:	600a      	str	r2, [r1, #0]
 8005e88:	681e      	ldr	r6, [r3, #0]
 8005e8a:	6862      	ldr	r2, [r4, #4]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f7fa f9de 	bl	8000250 <memchr>
 8005e94:	b108      	cbz	r0, 8005e9a <_printf_i+0x1f2>
 8005e96:	1b80      	subs	r0, r0, r6
 8005e98:	6060      	str	r0, [r4, #4]
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	e7a8      	b.n	8005df8 <_printf_i+0x150>
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4640      	mov	r0, r8
 8005eae:	47d0      	blx	sl
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d0ab      	beq.n	8005e0c <_printf_i+0x164>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	079b      	lsls	r3, r3, #30
 8005eb8:	d413      	bmi.n	8005ee2 <_printf_i+0x23a>
 8005eba:	68e0      	ldr	r0, [r4, #12]
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	4298      	cmp	r0, r3
 8005ec0:	bfb8      	it	lt
 8005ec2:	4618      	movlt	r0, r3
 8005ec4:	e7a4      	b.n	8005e10 <_printf_i+0x168>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	47d0      	blx	sl
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d09b      	beq.n	8005e0c <_printf_i+0x164>
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	9903      	ldr	r1, [sp, #12]
 8005eda:	1a5b      	subs	r3, r3, r1
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dcf2      	bgt.n	8005ec6 <_printf_i+0x21e>
 8005ee0:	e7eb      	b.n	8005eba <_printf_i+0x212>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	f104 0619 	add.w	r6, r4, #25
 8005ee8:	e7f5      	b.n	8005ed6 <_printf_i+0x22e>
 8005eea:	bf00      	nop
 8005eec:	08006495 	.word	0x08006495
 8005ef0:	080064a6 	.word	0x080064a6

08005ef4 <_putc_r>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	4606      	mov	r6, r0
 8005efc:	b118      	cbz	r0, 8005f06 <_putc_r+0x12>
 8005efe:	6983      	ldr	r3, [r0, #24]
 8005f00:	b90b      	cbnz	r3, 8005f06 <_putc_r+0x12>
 8005f02:	f7ff fb41 	bl	8005588 <__sinit>
 8005f06:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <_putc_r+0x84>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d124      	bne.n	8005f56 <_putc_r+0x62>
 8005f0c:	6874      	ldr	r4, [r6, #4]
 8005f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f10:	07d8      	lsls	r0, r3, #31
 8005f12:	d405      	bmi.n	8005f20 <_putc_r+0x2c>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	0599      	lsls	r1, r3, #22
 8005f18:	d402      	bmi.n	8005f20 <_putc_r+0x2c>
 8005f1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f1c:	f7ff fbe4 	bl	80056e8 <__retarget_lock_acquire_recursive>
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	da05      	bge.n	8005f36 <_putc_r+0x42>
 8005f2a:	69a2      	ldr	r2, [r4, #24]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	db1c      	blt.n	8005f6a <_putc_r+0x76>
 8005f30:	b2eb      	uxtb	r3, r5
 8005f32:	2b0a      	cmp	r3, #10
 8005f34:	d019      	beq.n	8005f6a <_putc_r+0x76>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	701d      	strb	r5, [r3, #0]
 8005f3e:	b2ed      	uxtb	r5, r5
 8005f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f42:	07da      	lsls	r2, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_putc_r+0x5e>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	059b      	lsls	r3, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_putc_r+0x5e>
 8005f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f4e:	f7ff fbcc 	bl	80056ea <__retarget_lock_release_recursive>
 8005f52:	4628      	mov	r0, r5
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <_putc_r+0x88>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	d101      	bne.n	8005f60 <_putc_r+0x6c>
 8005f5c:	68b4      	ldr	r4, [r6, #8]
 8005f5e:	e7d6      	b.n	8005f0e <_putc_r+0x1a>
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <_putc_r+0x8c>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	bf08      	it	eq
 8005f66:	68f4      	ldreq	r4, [r6, #12]
 8005f68:	e7d1      	b.n	8005f0e <_putc_r+0x1a>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f7ff f912 	bl	8005198 <__swbuf_r>
 8005f74:	4605      	mov	r5, r0
 8005f76:	e7e3      	b.n	8005f40 <_putc_r+0x4c>
 8005f78:	08006444 	.word	0x08006444
 8005f7c:	08006464 	.word	0x08006464
 8005f80:	08006424 	.word	0x08006424

08005f84 <_sbrk_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d06      	ldr	r5, [pc, #24]	; (8005fa0 <_sbrk_r+0x1c>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fb f9fc 	bl	800138c <_sbrk>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_sbrk_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_sbrk_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	200004a4 	.word	0x200004a4

08005fa4 <__sread>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	f000 f8a8 	bl	8006100 <_read_r>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	bfab      	itete	ge
 8005fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fb8:	181b      	addge	r3, r3, r0
 8005fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fbe:	bfac      	ite	ge
 8005fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fc2:	81a3      	strhlt	r3, [r4, #12]
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <__swrite>:
 8005fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fca:	461f      	mov	r7, r3
 8005fcc:	898b      	ldrh	r3, [r1, #12]
 8005fce:	05db      	lsls	r3, r3, #23
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	d505      	bpl.n	8005fe4 <__swrite+0x1e>
 8005fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fdc:	2302      	movs	r3, #2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f000 f870 	bl	80060c4 <_lseek_r>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffa:	f000 b817 	b.w	800602c <_write_r>

08005ffe <__sseek>:
 8005ffe:	b510      	push	{r4, lr}
 8006000:	460c      	mov	r4, r1
 8006002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006006:	f000 f85d 	bl	80060c4 <_lseek_r>
 800600a:	1c43      	adds	r3, r0, #1
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	bf15      	itete	ne
 8006010:	6560      	strne	r0, [r4, #84]	; 0x54
 8006012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800601a:	81a3      	strheq	r3, [r4, #12]
 800601c:	bf18      	it	ne
 800601e:	81a3      	strhne	r3, [r4, #12]
 8006020:	bd10      	pop	{r4, pc}

08006022 <__sclose>:
 8006022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006026:	f000 b81b 	b.w	8006060 <_close_r>
	...

0800602c <_write_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	; (800604c <_write_r+0x20>)
 8006030:	4604      	mov	r4, r0
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	2200      	movs	r2, #0
 8006038:	602a      	str	r2, [r5, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fa ffbe 	bl	8000fbc <_write>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_write_r+0x1e>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_write_r+0x1e>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	200004a4 	.word	0x200004a4

08006050 <abort>:
 8006050:	b508      	push	{r3, lr}
 8006052:	2006      	movs	r0, #6
 8006054:	f000 f88e 	bl	8006174 <raise>
 8006058:	2001      	movs	r0, #1
 800605a:	f7fb f93b 	bl	80012d4 <_exit>
	...

08006060 <_close_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	; (800607c <_close_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fb f959 	bl	8001322 <_close>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_close_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_close_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	200004a4 	.word	0x200004a4

08006080 <_fstat_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4d07      	ldr	r5, [pc, #28]	; (80060a0 <_fstat_r+0x20>)
 8006084:	2300      	movs	r3, #0
 8006086:	4604      	mov	r4, r0
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	f7fb f954 	bl	800133a <_fstat>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	d102      	bne.n	800609c <_fstat_r+0x1c>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	b103      	cbz	r3, 800609c <_fstat_r+0x1c>
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	bd38      	pop	{r3, r4, r5, pc}
 800609e:	bf00      	nop
 80060a0:	200004a4 	.word	0x200004a4

080060a4 <_isatty_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d06      	ldr	r5, [pc, #24]	; (80060c0 <_isatty_r+0x1c>)
 80060a8:	2300      	movs	r3, #0
 80060aa:	4604      	mov	r4, r0
 80060ac:	4608      	mov	r0, r1
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	f7fb f953 	bl	800135a <_isatty>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_isatty_r+0x1a>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	b103      	cbz	r3, 80060be <_isatty_r+0x1a>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	200004a4 	.word	0x200004a4

080060c4 <_lseek_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	; (80060e4 <_lseek_r+0x20>)
 80060c8:	4604      	mov	r4, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fb f94c 	bl	8001370 <_lseek>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_lseek_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_lseek_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200004a4 	.word	0x200004a4

080060e8 <__malloc_lock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_lock+0x8>)
 80060ea:	f7ff bafd 	b.w	80056e8 <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	2000049c 	.word	0x2000049c

080060f4 <__malloc_unlock>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__malloc_unlock+0x8>)
 80060f6:	f7ff baf8 	b.w	80056ea <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	2000049c 	.word	0x2000049c

08006100 <_read_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d07      	ldr	r5, [pc, #28]	; (8006120 <_read_r+0x20>)
 8006104:	4604      	mov	r4, r0
 8006106:	4608      	mov	r0, r1
 8006108:	4611      	mov	r1, r2
 800610a:	2200      	movs	r2, #0
 800610c:	602a      	str	r2, [r5, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	f7fb f8ea 	bl	80012e8 <_read>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_read_r+0x1e>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_read_r+0x1e>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	200004a4 	.word	0x200004a4

08006124 <_raise_r>:
 8006124:	291f      	cmp	r1, #31
 8006126:	b538      	push	{r3, r4, r5, lr}
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	d904      	bls.n	8006138 <_raise_r+0x14>
 800612e:	2316      	movs	r3, #22
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800613a:	b112      	cbz	r2, 8006142 <_raise_r+0x1e>
 800613c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006140:	b94b      	cbnz	r3, 8006156 <_raise_r+0x32>
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f830 	bl	80061a8 <_getpid_r>
 8006148:	462a      	mov	r2, r5
 800614a:	4601      	mov	r1, r0
 800614c:	4620      	mov	r0, r4
 800614e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006152:	f000 b817 	b.w	8006184 <_kill_r>
 8006156:	2b01      	cmp	r3, #1
 8006158:	d00a      	beq.n	8006170 <_raise_r+0x4c>
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	d103      	bne.n	8006166 <_raise_r+0x42>
 800615e:	2316      	movs	r3, #22
 8006160:	6003      	str	r3, [r0, #0]
 8006162:	2001      	movs	r0, #1
 8006164:	e7e7      	b.n	8006136 <_raise_r+0x12>
 8006166:	2400      	movs	r4, #0
 8006168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800616c:	4628      	mov	r0, r5
 800616e:	4798      	blx	r3
 8006170:	2000      	movs	r0, #0
 8006172:	e7e0      	b.n	8006136 <_raise_r+0x12>

08006174 <raise>:
 8006174:	4b02      	ldr	r3, [pc, #8]	; (8006180 <raise+0xc>)
 8006176:	4601      	mov	r1, r0
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f7ff bfd3 	b.w	8006124 <_raise_r>
 800617e:	bf00      	nop
 8006180:	2000000c 	.word	0x2000000c

08006184 <_kill_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4d07      	ldr	r5, [pc, #28]	; (80061a4 <_kill_r+0x20>)
 8006188:	2300      	movs	r3, #0
 800618a:	4604      	mov	r4, r0
 800618c:	4608      	mov	r0, r1
 800618e:	4611      	mov	r1, r2
 8006190:	602b      	str	r3, [r5, #0]
 8006192:	f7fb f88f 	bl	80012b4 <_kill>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	d102      	bne.n	80061a0 <_kill_r+0x1c>
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	b103      	cbz	r3, 80061a0 <_kill_r+0x1c>
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	bd38      	pop	{r3, r4, r5, pc}
 80061a2:	bf00      	nop
 80061a4:	200004a4 	.word	0x200004a4

080061a8 <_getpid_r>:
 80061a8:	f7fb b87c 	b.w	80012a4 <_getpid>

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
