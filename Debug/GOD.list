
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a4  080030a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  080030c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080030c0  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcde  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf8  00000000  00000000  0002fd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00032568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d217  00000000  00000000  00033010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7dc  00000000  00000000  00050227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8d64  00000000  00000000  0005da03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  001167bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800304c 	.word	0x0800304c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800304c 	.word	0x0800304c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b092      	sub	sp, #72	; 0x48
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fab2 	bl	8000a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f81d 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f92d 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8df 	bl	80006e4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000526:	f000 f857 	bl	80005d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800052a:	f000 f88f 	bl	800064c <MX_USART1_UART_Init>
  {

	  uint8_t rx_byte;
	  while (1)
	  {
	      if (HAL_UART_Receive(&huart1, &rx_byte, 1, 100) == HAL_OK)
 800052e:	1df9      	adds	r1, r7, #7
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	2201      	movs	r2, #1
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x40>)
 8000536:	f001 fed6 	bl	80022e6 <HAL_UART_Receive>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f6      	bne.n	800052e <main+0x1e>
	      {
	          // Echo byte to USART2 for debugging
	    	  HAL_UART_Transmit(&huart2, &rx_byte, 1, HAL_MAX_DELAY);
 8000540:	1df9      	adds	r1, r7, #7
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	2201      	movs	r2, #1
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <main+0x44>)
 800054a:	f001 fe3e 	bl	80021ca <HAL_UART_Transmit>
	      if (HAL_UART_Receive(&huart1, &rx_byte, 1, 100) == HAL_OK)
 800054e:	e7ee      	b.n	800052e <main+0x1e>
 8000550:	20000028 	.word	0x20000028
 8000554:	20000120 	.word	0x20000120

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2238      	movs	r2, #56	; 0x38
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fd68 	bl	800303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f000 fd55 	bl	800102c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fdfb 	bl	8001194 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005a4:	f000 f902 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f8fb 	bl	80017bc <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005cc:	f000 f8ee 	bl	80007ac <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005de:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <MX_SPI1_Init+0x70>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_SPI1_Init+0x6c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_SPI1_Init+0x6c>)
 8000604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000608:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_SPI1_Init+0x6c>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_SPI1_Init+0x6c>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_SPI1_Init+0x6c>)
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_SPI1_Init+0x6c>)
 800061e:	2207      	movs	r2, #7
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_SPI1_Init+0x6c>)
 8000624:	2200      	movs	r2, #0
 8000626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_SPI1_Init+0x6c>)
 800062a:	2200      	movs	r2, #0
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_SPI1_Init+0x6c>)
 8000630:	f001 fcd0 	bl	8001fd4 <HAL_SPI_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800063a:	f000 f8b7 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000bc 	.word	0x200000bc
 8000648:	40013000 	.word	0x40013000

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <MX_USART1_UART_Init+0x94>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000658:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_USART1_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_USART1_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART1_UART_Init+0x90>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000696:	f001 fd48 	bl	800212a <HAL_UART_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006a0:	f000 f884 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_USART1_UART_Init+0x90>)
 80006a8:	f002 fbda 	bl	8002e60 <HAL_UARTEx_SetTxFifoThreshold>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006b2:	f000 f87b 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <MX_USART1_UART_Init+0x90>)
 80006ba:	f002 fc0f 	bl	8002edc <HAL_UARTEx_SetRxFifoThreshold>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006c4:	f000 f872 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_USART1_UART_Init+0x90>)
 80006ca:	f002 fb90 	bl	8002dee <HAL_UARTEx_DisableFifoMode>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006d4:	f000 f86a 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000028 	.word	0x20000028
 80006e0:	40013800 	.word	0x40013800

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_USART2_UART_Init+0x90>)
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_USART2_UART_Init+0x90>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_USART2_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_USART2_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_USART2_UART_Init+0x90>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_USART2_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x90>)
 800072e:	f001 fcfc 	bl	800212a <HAL_UART_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000738:	f000 f838 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000740:	f002 fb8e 	bl	8002e60 <HAL_UARTEx_SetTxFifoThreshold>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074a:	f000 f82f 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000752:	f002 fbc3 	bl	8002edc <HAL_UARTEx_SetRxFifoThreshold>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800075c:	f000 f826 	bl	80007ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_USART2_UART_Init+0x90>)
 8000762:	f002 fb44 	bl	8002dee <HAL_UARTEx_DisableFifoMode>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800076c:	f000 f81e 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000120 	.word	0x20000120
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ee:	f000 fcc1 	bl	8001174 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_SPI_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d128      	bne.n	8000874 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_SPI_MspInit+0x80>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_SPI_MspInit+0x80>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23e0      	movs	r3, #224	; 0xe0
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000862:	2305      	movs	r3, #5
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 fa5a 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40013000 	.word	0x40013000
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	2244      	movs	r2, #68	; 0x44
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fbc9 	bl	800303c <memset>
  if(huart->Instance==USART1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <HAL_UART_MspInit+0x124>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d138      	bne.n	8000926 <HAL_UART_MspInit+0xa2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 f997 	bl	8001bf4 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008cc:	f7ff ff6e 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d4:	4a35      	ldr	r2, [pc, #212]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6613      	str	r3, [r2, #96]	; 0x60
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000900:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000904:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000912:	2307      	movs	r3, #7
 8000914:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fa02 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	e03b      	b.n	800099e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <HAL_UART_MspInit+0x12c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d136      	bne.n	800099e <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f959 	bl	8001bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000948:	f7ff ff30 	bl	80007ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x128>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000950:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_UART_MspInit+0x128>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000956:	6593      	str	r3, [r2, #88]	; 0x58
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x128>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x128>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x128>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x128>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097c:	230c      	movs	r3, #12
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098c:	2307      	movs	r3, #7
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 f9c5 	bl	8000d28 <HAL_GPIO_Init>
}
 800099e:	bf00      	nop
 80009a0:	3770      	adds	r7, #112	; 0x70
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40004400 	.word	0x40004400

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f890 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 facb 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd57 	bl	8000510 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   r0, =_estack
 8000a64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	080030b4 	.word	0x080030b4
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>

08000a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f91b 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f80e 	bl	8000ab0 <HAL_InitTick>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	e001      	b.n	8000aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa0:	f7ff fe8a 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]

}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_InitTick+0x68>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d022      	beq.n	8000b0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_InitTick+0x6c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f918 	bl	8000d0e <HAL_SYSTICK_Config>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d10f      	bne.n	8000b04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	d809      	bhi.n	8000afe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	2200      	movs	r2, #0
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	f04f 30ff 	mov.w	r0, #4294967295
 8000af2:	f000 f8f2 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_InitTick+0x70>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e007      	b.n	8000b0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e004      	b.n	8000b0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e001      	b.n	8000b0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	200001b4 	.word	0x200001b4
 8000b44:	20000008 	.word	0x20000008

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200001b4 	.word	0x200001b4

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff5e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff90 	bl	8000c18 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5f 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb2 	bl	8000c80 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d36:	e15a      	b.n	8000fee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 814c 	beq.w	8000fe8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d005      	beq.n	8000d68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d130      	bne.n	8000dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	f003 0201 	and.w	r2, r3, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d017      	beq.n	8000e06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d123      	bne.n	8000e5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	6939      	ldr	r1, [r7, #16]
 8000e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0203 	and.w	r2, r3, #3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 80a6 	beq.w	8000fe8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	4a5a      	ldr	r2, [pc, #360]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb4:	4a56      	ldr	r2, [pc, #344]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ede:	d01f      	beq.n	8000f20 <HAL_GPIO_Init+0x1f8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a4c      	ldr	r2, [pc, #304]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d019      	beq.n	8000f1c <HAL_GPIO_Init+0x1f4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a4b      	ldr	r2, [pc, #300]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d013      	beq.n	8000f18 <HAL_GPIO_Init+0x1f0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4a      	ldr	r2, [pc, #296]	; (800101c <HAL_GPIO_Init+0x2f4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d00d      	beq.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a49      	ldr	r2, [pc, #292]	; (8001020 <HAL_GPIO_Init+0x2f8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x1e8>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a48      	ldr	r2, [pc, #288]	; (8001024 <HAL_GPIO_Init+0x2fc>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d101      	bne.n	8000f0c <HAL_GPIO_Init+0x1e4>
 8000f08:	2305      	movs	r3, #5
 8000f0a:	e00a      	b.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	e008      	b.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f20:	2300      	movs	r3, #0
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f32:	4937      	ldr	r1, [pc, #220]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f40:	4b39      	ldr	r3, [pc, #228]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f64:	4a30      	ldr	r2, [pc, #192]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f ae9d 	bne.w	8000d38 <HAL_GPIO_Init+0x10>
  }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	48000400 	.word	0x48000400
 8001018:	48000800 	.word	0x48000800
 800101c:	48000c00 	.word	0x48000c00
 8001020:	48001000 	.word	0x48001000
 8001024:	48001400 	.word	0x48001400
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d141      	bne.n	80010be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001046:	d131      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800104e:	4a46      	ldr	r2, [pc, #280]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001060:	4a41      	ldr	r2, [pc, #260]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2232      	movs	r2, #50	; 0x32
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9b      	lsrs	r3, r3, #18
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800107e:	e002      	b.n	8001086 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3b01      	subs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	d102      	bne.n	800109a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f2      	bne.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a6:	d158      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e057      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010bc:	e04d      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c4:	d141      	bne.n	800114a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d2:	d131      	bne.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ec:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2232      	movs	r2, #50	; 0x32
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	0c9b      	lsrs	r3, r3, #18
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110a:	e002      	b.n	8001112 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3b01      	subs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111e:	d102      	bne.n	8001126 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f2      	bne.n	800110c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001132:	d112      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e011      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001148:	e007      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001158:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40007000 	.word	0x40007000
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6093      	str	r3, [r2, #8]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e301      	b.n	80017aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d075      	beq.n	800129e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b2:	4ba3      	ldr	r3, [pc, #652]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011bc:	4ba0      	ldr	r3, [pc, #640]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d102      	bne.n	80011d2 <HAL_RCC_OscConfig+0x3e>
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d002      	beq.n	80011d8 <HAL_RCC_OscConfig+0x44>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d10b      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	4b99      	ldr	r3, [pc, #612]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d05b      	beq.n	800129c <HAL_RCC_OscConfig+0x108>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d157      	bne.n	800129c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e2dc      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x74>
 80011fa:	4b91      	ldr	r3, [pc, #580]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a90      	ldr	r2, [pc, #576]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a8a      	ldr	r2, [pc, #552]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a87      	ldr	r2, [pc, #540]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 800122c:	4b84      	ldr	r3, [pc, #528]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a83      	ldr	r2, [pc, #524]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b81      	ldr	r3, [pc, #516]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a80      	ldr	r2, [pc, #512]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fc7c 	bl	8000b48 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc78 	bl	8000b48 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e2a1      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xc0>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fc68 	bl	8000b48 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc64 	bl	8000b48 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e28d      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800128e:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0xe8>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d102      	bne.n	80012ca <HAL_RCC_OscConfig+0x136>
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d002      	beq.n	80012d0 <HAL_RCC_OscConfig+0x13c>
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d11f      	bne.n	8001310 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_OscConfig+0x154>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e260      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	4952      	ldr	r1, [pc, #328]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_RCC_OscConfig+0x2b0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fbd5 	bl	8000ab0 <HAL_InitTick>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d043      	beq.n	8001394 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e24c      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d023      	beq.n	8001360 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001318:	4b49      	ldr	r3, [pc, #292]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a48      	ldr	r2, [pc, #288]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fc10 	bl	8000b48 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132c:	f7ff fc0c 	bl	8000b48 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e235      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133e:	4b40      	ldr	r3, [pc, #256]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	061b      	lsls	r3, r3, #24
 8001358:	4939      	ldr	r1, [pc, #228]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e01a      	b.n	8001396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a36      	ldr	r2, [pc, #216]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fbec 	bl	8000b48 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fbe8 	bl	8000b48 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e211      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1e0>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03c      	beq.n	800141c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbc5 	bl	8000b48 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fbc1 	bl	8000b48 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1ea      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0ef      	beq.n	80013c2 <HAL_RCC_OscConfig+0x22e>
 80013e2:	e01b      	b.n	800141c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fba8 	bl	8000b48 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fba4 	bl	8000b48 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e1cd      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ef      	bne.n	80013fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80ab 	beq.w	8001580 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_RCC_OscConfig+0x2b4>
 800143a:	2301      	movs	r3, #1
 800143c:	e005      	b.n	800144a <HAL_RCC_OscConfig+0x2b6>
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	20000004 	.word	0x20000004
 8001448:	2300      	movs	r3, #0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00d      	beq.n	800146a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4bad      	ldr	r3, [pc, #692]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	4aac      	ldr	r2, [pc, #688]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	; 0x58
 800145a:	4baa      	ldr	r3, [pc, #680]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001466:	2301      	movs	r3, #1
 8001468:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146a:	4ba7      	ldr	r3, [pc, #668]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d118      	bne.n	80014a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001476:	4ba4      	ldr	r3, [pc, #656]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4aa3      	ldr	r2, [pc, #652]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001482:	f7ff fb61 	bl	8000b48 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148a:	f7ff fb5d 	bl	8000b48 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e186      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149c:	4b9a      	ldr	r3, [pc, #616]	; (8001708 <HAL_RCC_OscConfig+0x574>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d108      	bne.n	80014c2 <HAL_RCC_OscConfig+0x32e>
 80014b0:	4b94      	ldr	r3, [pc, #592]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b6:	4a93      	ldr	r2, [pc, #588]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c0:	e024      	b.n	800150c <HAL_RCC_OscConfig+0x378>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d110      	bne.n	80014ec <HAL_RCC_OscConfig+0x358>
 80014ca:	4b8e      	ldr	r3, [pc, #568]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d0:	4a8c      	ldr	r2, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014da:	4b8a      	ldr	r3, [pc, #552]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e0:	4a88      	ldr	r2, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ea:	e00f      	b.n	800150c <HAL_RCC_OscConfig+0x378>
 80014ec:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f2:	4a84      	ldr	r2, [pc, #528]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fc:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a80      	ldr	r2, [pc, #512]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d016      	beq.n	8001542 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fb18 	bl	8000b48 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151c:	f7ff fb14 	bl	8000b48 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e13b      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001532:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ed      	beq.n	800151c <HAL_RCC_OscConfig+0x388>
 8001540:	e015      	b.n	800156e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fb01 	bl	8000b48 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fafd 	bl	8000b48 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e124      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ed      	bne.n	800154a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	4a62      	ldr	r2, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800157a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b00      	cmp	r3, #0
 800158a:	d03c      	beq.n	8001606 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01c      	beq.n	80015ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001594:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800159a:	4a5a      	ldr	r2, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fad0 	bl	8000b48 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ac:	f7ff facc 	bl	8000b48 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0f5      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015be:	4b51      	ldr	r3, [pc, #324]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ef      	beq.n	80015ac <HAL_RCC_OscConfig+0x418>
 80015cc:	e01b      	b.n	8001606 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015de:	f7ff fab3 	bl	8000b48 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e6:	f7ff faaf 	bl	8000b48 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0d8      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80015fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ef      	bne.n	80015e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80cc 	beq.w	80017a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b0c      	cmp	r3, #12
 800161a:	f000 8086 	beq.w	800172a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d15a      	bne.n	80016dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a36      	ldr	r2, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800162c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fa89 	bl	8000b48 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fa85 	bl	8000b48 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e0ae      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x578>)
 800165e:	4013      	ands	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6a11      	ldr	r1, [r2, #32]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001668:	3a01      	subs	r2, #1
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001672:	0212      	lsls	r2, r2, #8
 8001674:	4311      	orrs	r1, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800167a:	0852      	lsrs	r2, r2, #1
 800167c:	3a01      	subs	r2, #1
 800167e:	0552      	lsls	r2, r2, #21
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001686:	0852      	lsrs	r2, r2, #1
 8001688:	3a01      	subs	r2, #1
 800168a:	0652      	lsls	r2, r2, #25
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001692:	06d2      	lsls	r2, r2, #27
 8001694:	430a      	orrs	r2, r1
 8001696:	491b      	ldr	r1, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 8001698:	4313      	orrs	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a15      	ldr	r2, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa48 	bl	8000b48 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fa44 	bl	8000b48 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e06d      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x528>
 80016da:	e065      	b.n	80017a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x570>)
 80016e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fa2e 	bl	8000b48 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ee:	e00f      	b.n	8001710 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fa2a 	bl	8000b48 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d908      	bls.n	8001710 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e053      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x620>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1e9      	bne.n	80016f0 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_RCC_OscConfig+0x620>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	4924      	ldr	r1, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x620>)
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_RCC_OscConfig+0x624>)
 8001724:	4013      	ands	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
 8001728:	e03e      	b.n	80017a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e039      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_RCC_OscConfig+0x620>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	429a      	cmp	r2, r3
 8001748:	d12c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	3b01      	subs	r3, #1
 8001756:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d123      	bne.n	80017a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d11b      	bne.n	80017a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d113      	bne.n	80017a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d109      	bne.n	80017a4 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	3b01      	subs	r3, #1
 800179e:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	feeefffc 	.word	0xfeeefffc

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e11e      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d910      	bls.n	8001804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b8e      	ldr	r3, [pc, #568]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 020f 	bic.w	r2, r3, #15
 80017ea:	498c      	ldr	r1, [pc, #560]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b8a      	ldr	r3, [pc, #552]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e106      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d073      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d129      	bne.n	800186c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001818:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0f4      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001828:	f000 f99e 	bl	8001b68 <RCC_GetSysClockFreqFromPLLSource>
 800182c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4a7c      	ldr	r2, [pc, #496]	; (8001a24 <HAL_RCC_ClockConfig+0x268>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d93f      	bls.n	80018b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800184a:	2b00      	cmp	r3, #0
 800184c:	d033      	beq.n	80018b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d12f      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001856:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800185e:	4a70      	ldr	r2, [pc, #448]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e024      	b.n	80018b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d107      	bne.n	8001884 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001874:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0c6      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0be      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001894:	f000 f8ce 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 8001898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4a61      	ldr	r2, [pc, #388]	; (8001a24 <HAL_RCC_ClockConfig+0x268>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d909      	bls.n	80018b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018aa:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b5a      	ldr	r3, [pc, #360]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4957      	ldr	r1, [pc, #348]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7ff f93e 	bl	8000b48 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff f93a 	bl	8000b48 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e095      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a42      	ldr	r2, [pc, #264]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001930:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4936      	ldr	r1, [pc, #216]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
 800194a:	e008      	b.n	800195e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b80      	cmp	r3, #128	; 0x80
 8001950:	d105      	bne.n	800195e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001952:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 8001958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800195c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d21d      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 020f 	bic.w	r2, r3, #15
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800197c:	f7ff f8e4 	bl	8000b48 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff f8e0 	bl	8000b48 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e03b      	b.n	8001a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1ed      	bne.n	8001984 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4917      	ldr	r1, [pc, #92]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490f      	ldr	r1, [pc, #60]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019e6:	f000 f825 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490c      	ldr	r1, [pc, #48]	; (8001a28 <HAL_RCC_ClockConfig+0x26c>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x270>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f850 	bl	8000ab0 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	04c4b400 	.word	0x04c4b400
 8001a28:	08003064 	.word	0x08003064
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e047      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e03e      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d136      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a88:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a92:	68d2      	ldr	r2, [r2, #12]
 8001a94:	0a12      	lsrs	r2, r2, #8
 8001a96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
      break;
 8001aa0:	e00c      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	0a12      	lsrs	r2, r2, #8
 8001ab0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
      break;
 8001aba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0e5b      	lsrs	r3, r3, #25
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e001      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001adc:	693b      	ldr	r3, [r7, #16]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4904      	ldr	r1, [pc, #16]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003074 	.word	0x08003074

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b40:	f7ff ffda 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0adb      	lsrs	r3, r3, #11
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003074 	.word	0x08003074

08001b68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3301      	adds	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d10c      	bne.n	8001ba6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8c:	4a17      	ldr	r2, [pc, #92]	; (8001bec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b96:	68d2      	ldr	r2, [r2, #12]
 8001b98:	0a12      	lsrs	r2, r2, #8
 8001b9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
    break;
 8001ba4:	e00c      	b.n	8001bc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bb0:	68d2      	ldr	r2, [r2, #12]
 8001bb2:	0a12      	lsrs	r2, r2, #8
 8001bb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    break;
 8001bbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0e5b      	lsrs	r3, r3, #25
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	007a1200 	.word	0x007a1200
 8001bf0:	00f42400 	.word	0x00f42400

08001bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c00:	2300      	movs	r3, #0
 8001c02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8098 	beq.w	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a39      	ldr	r2, [pc, #228]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c4a:	f7fe ff7d 	bl	8000b48 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c50:	e009      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7fe ff79 	bl	8000b48 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d902      	bls.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	74fb      	strb	r3, [r7, #19]
        break;
 8001c64:	e005      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0ef      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d159      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01e      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d019      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7fe ff39 	bl	8000b48 <HAL_GetTick>
 8001cd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe ff35 	bl	8000b48 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d902      	bls.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	74fb      	strb	r3, [r7, #19]
            break;
 8001cf0:	e006      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ec      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10b      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d1c:	e008      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d1e:	7cfb      	ldrb	r3, [r7, #19]
 8001d20:	74bb      	strb	r3, [r7, #18]
 8001d22:	e005      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d30:	7c7b      	ldrb	r3, [r7, #17]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4ba6      	ldr	r3, [pc, #664]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4aa5      	ldr	r2, [pc, #660]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d4e:	4ba0      	ldr	r3, [pc, #640]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d54:	f023 0203 	bic.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	499c      	ldr	r1, [pc, #624]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d70:	4b97      	ldr	r3, [pc, #604]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	f023 020c 	bic.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4994      	ldr	r1, [pc, #592]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d92:	4b8f      	ldr	r3, [pc, #572]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	498b      	ldr	r1, [pc, #556]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001db4:	4b86      	ldr	r3, [pc, #536]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	4983      	ldr	r1, [pc, #524]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dd6:	4b7e      	ldr	r3, [pc, #504]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	497a      	ldr	r1, [pc, #488]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4972      	ldr	r1, [pc, #456]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4969      	ldr	r1, [pc, #420]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e3c:	4b64      	ldr	r3, [pc, #400]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4961      	ldr	r1, [pc, #388]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	4958      	ldr	r1, [pc, #352]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d015      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	4950      	ldr	r1, [pc, #320]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e9e:	d105      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d015      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eb8:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	4942      	ldr	r1, [pc, #264]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4934      	ldr	r1, [pc, #208]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d015      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	4926      	ldr	r1, [pc, #152]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f46:	d105      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d015      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	4918      	ldr	r1, [pc, #96]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d015      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e09d      	b.n	8002122 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ff6:	d009      	beq.n	800200c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
 8001ffe:	e005      	b.n	800200c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fbea 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800204c:	d902      	bls.n	8002054 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e002      	b.n	800205a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002062:	d007      	beq.n	8002074 <HAL_SPI_Init+0xa0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	ea42 0103 	orr.w	r1, r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	f003 0204 	and.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e042      	b.n	80021c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fb98 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fc1b 	bl	80029b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f97c 	bl	8002478 <UART_SetConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e01b      	b.n	80021c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fc9a 	bl	8002af4 <UART_CheckIdleState>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b08a      	sub	sp, #40	; 0x28
 80021ce:	af02      	add	r7, sp, #8
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d17b      	bne.n	80022dc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_UART_Transmit+0x26>
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e074      	b.n	80022de <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2221      	movs	r2, #33	; 0x21
 8002200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002204:	f7fe fca0 	bl	8000b48 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002222:	d108      	bne.n	8002236 <HAL_UART_Transmit+0x6c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e003      	b.n	800223e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800223e:	e030      	b.n	80022a2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2200      	movs	r2, #0
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fcfc 	bl	8002c48 <UART_WaitOnFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e03d      	b.n	80022de <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3302      	adds	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	e007      	b.n	8002290 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1c8      	bne.n	8002240 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2140      	movs	r1, #64	; 0x40
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fcc5 	bl	8002c48 <UART_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08a      	sub	sp, #40	; 0x28
 80022ea:	af02      	add	r7, sp, #8
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	f040 80b5 	bne.w	800246c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_UART_Receive+0x28>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0ad      	b.n	800246e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2222      	movs	r2, #34	; 0x22
 800231e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002328:	f7fe fc0e 	bl	8000b48 <HAL_GetTick>
 800232c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	88fa      	ldrh	r2, [r7, #6]
 8002332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	d10e      	bne.n	8002366 <HAL_UART_Receive+0x80>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_UART_Receive+0x76>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002356:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800235a:	e02d      	b.n	80023b8 <HAL_UART_Receive+0xd2>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002364:	e028      	b.n	80023b8 <HAL_UART_Receive+0xd2>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_UART_Receive+0xa4>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_UART_Receive+0x9a>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800237e:	e01b      	b.n	80023b8 <HAL_UART_Receive+0xd2>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	227f      	movs	r2, #127	; 0x7f
 8002384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002388:	e016      	b.n	80023b8 <HAL_UART_Receive+0xd2>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002392:	d10d      	bne.n	80023b0 <HAL_UART_Receive+0xca>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <HAL_UART_Receive+0xc0>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	227f      	movs	r2, #127	; 0x7f
 80023a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023a4:	e008      	b.n	80023b8 <HAL_UART_Receive+0xd2>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Receive+0xd2>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80023be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d108      	bne.n	80023dc <HAL_UART_Receive+0xf6>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d104      	bne.n	80023dc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e003      	b.n	80023e4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023e4:	e036      	b.n	8002454 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2120      	movs	r1, #32
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fc29 	bl	8002c48 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e032      	b.n	800246e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	b29a      	uxth	r2, r3
 8002416:	8a7b      	ldrh	r3, [r7, #18]
 8002418:	4013      	ands	r3, r2
 800241a:	b29a      	uxth	r2, r3
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3302      	adds	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e00c      	b.n	8002442 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	b2da      	uxtb	r2, r3
 8002430:	8a7b      	ldrh	r3, [r7, #18]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4013      	ands	r3, r2
 8002436:	b2da      	uxtb	r2, r3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3301      	adds	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1c2      	bne.n	80023e6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4313      	orrs	r3, r2
 800249a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4baf      	ldr	r3, [pc, #700]	; (8002760 <UART_SetConfig+0x2e8>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	69f9      	ldr	r1, [r7, #28]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4aa4      	ldr	r2, [pc, #656]	; (8002764 <UART_SetConfig+0x2ec>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80024ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	69f9      	ldr	r1, [r7, #28]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f023 010f 	bic.w	r1, r3, #15
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a95      	ldr	r2, [pc, #596]	; (8002768 <UART_SetConfig+0x2f0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d120      	bne.n	800255a <UART_SetConfig+0xe2>
 8002518:	4b94      	ldr	r3, [pc, #592]	; (800276c <UART_SetConfig+0x2f4>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b03      	cmp	r3, #3
 8002524:	d816      	bhi.n	8002554 <UART_SetConfig+0xdc>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <UART_SetConfig+0xb4>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002549 	.word	0x08002549
 8002534:	08002543 	.word	0x08002543
 8002538:	0800254f 	.word	0x0800254f
 800253c:	2301      	movs	r3, #1
 800253e:	76fb      	strb	r3, [r7, #27]
 8002540:	e0bc      	b.n	80026bc <UART_SetConfig+0x244>
 8002542:	2302      	movs	r3, #2
 8002544:	76fb      	strb	r3, [r7, #27]
 8002546:	e0b9      	b.n	80026bc <UART_SetConfig+0x244>
 8002548:	2304      	movs	r3, #4
 800254a:	76fb      	strb	r3, [r7, #27]
 800254c:	e0b6      	b.n	80026bc <UART_SetConfig+0x244>
 800254e:	2308      	movs	r3, #8
 8002550:	76fb      	strb	r3, [r7, #27]
 8002552:	e0b3      	b.n	80026bc <UART_SetConfig+0x244>
 8002554:	2310      	movs	r3, #16
 8002556:	76fb      	strb	r3, [r7, #27]
 8002558:	e0b0      	b.n	80026bc <UART_SetConfig+0x244>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a84      	ldr	r2, [pc, #528]	; (8002770 <UART_SetConfig+0x2f8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d132      	bne.n	80025ca <UART_SetConfig+0x152>
 8002564:	4b81      	ldr	r3, [pc, #516]	; (800276c <UART_SetConfig+0x2f4>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d828      	bhi.n	80025c4 <UART_SetConfig+0x14c>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <UART_SetConfig+0x100>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080025c5 	.word	0x080025c5
 8002580:	080025c5 	.word	0x080025c5
 8002584:	080025c5 	.word	0x080025c5
 8002588:	080025b9 	.word	0x080025b9
 800258c:	080025c5 	.word	0x080025c5
 8002590:	080025c5 	.word	0x080025c5
 8002594:	080025c5 	.word	0x080025c5
 8002598:	080025b3 	.word	0x080025b3
 800259c:	080025c5 	.word	0x080025c5
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	080025c5 	.word	0x080025c5
 80025a8:	080025bf 	.word	0x080025bf
 80025ac:	2300      	movs	r3, #0
 80025ae:	76fb      	strb	r3, [r7, #27]
 80025b0:	e084      	b.n	80026bc <UART_SetConfig+0x244>
 80025b2:	2302      	movs	r3, #2
 80025b4:	76fb      	strb	r3, [r7, #27]
 80025b6:	e081      	b.n	80026bc <UART_SetConfig+0x244>
 80025b8:	2304      	movs	r3, #4
 80025ba:	76fb      	strb	r3, [r7, #27]
 80025bc:	e07e      	b.n	80026bc <UART_SetConfig+0x244>
 80025be:	2308      	movs	r3, #8
 80025c0:	76fb      	strb	r3, [r7, #27]
 80025c2:	e07b      	b.n	80026bc <UART_SetConfig+0x244>
 80025c4:	2310      	movs	r3, #16
 80025c6:	76fb      	strb	r3, [r7, #27]
 80025c8:	e078      	b.n	80026bc <UART_SetConfig+0x244>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a69      	ldr	r2, [pc, #420]	; (8002774 <UART_SetConfig+0x2fc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d120      	bne.n	8002616 <UART_SetConfig+0x19e>
 80025d4:	4b65      	ldr	r3, [pc, #404]	; (800276c <UART_SetConfig+0x2f4>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025de:	2b30      	cmp	r3, #48	; 0x30
 80025e0:	d013      	beq.n	800260a <UART_SetConfig+0x192>
 80025e2:	2b30      	cmp	r3, #48	; 0x30
 80025e4:	d814      	bhi.n	8002610 <UART_SetConfig+0x198>
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d009      	beq.n	80025fe <UART_SetConfig+0x186>
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d810      	bhi.n	8002610 <UART_SetConfig+0x198>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <UART_SetConfig+0x180>
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d006      	beq.n	8002604 <UART_SetConfig+0x18c>
 80025f6:	e00b      	b.n	8002610 <UART_SetConfig+0x198>
 80025f8:	2300      	movs	r3, #0
 80025fa:	76fb      	strb	r3, [r7, #27]
 80025fc:	e05e      	b.n	80026bc <UART_SetConfig+0x244>
 80025fe:	2302      	movs	r3, #2
 8002600:	76fb      	strb	r3, [r7, #27]
 8002602:	e05b      	b.n	80026bc <UART_SetConfig+0x244>
 8002604:	2304      	movs	r3, #4
 8002606:	76fb      	strb	r3, [r7, #27]
 8002608:	e058      	b.n	80026bc <UART_SetConfig+0x244>
 800260a:	2308      	movs	r3, #8
 800260c:	76fb      	strb	r3, [r7, #27]
 800260e:	e055      	b.n	80026bc <UART_SetConfig+0x244>
 8002610:	2310      	movs	r3, #16
 8002612:	76fb      	strb	r3, [r7, #27]
 8002614:	e052      	b.n	80026bc <UART_SetConfig+0x244>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <UART_SetConfig+0x300>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d120      	bne.n	8002662 <UART_SetConfig+0x1ea>
 8002620:	4b52      	ldr	r3, [pc, #328]	; (800276c <UART_SetConfig+0x2f4>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800262a:	2bc0      	cmp	r3, #192	; 0xc0
 800262c:	d013      	beq.n	8002656 <UART_SetConfig+0x1de>
 800262e:	2bc0      	cmp	r3, #192	; 0xc0
 8002630:	d814      	bhi.n	800265c <UART_SetConfig+0x1e4>
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d009      	beq.n	800264a <UART_SetConfig+0x1d2>
 8002636:	2b80      	cmp	r3, #128	; 0x80
 8002638:	d810      	bhi.n	800265c <UART_SetConfig+0x1e4>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <UART_SetConfig+0x1cc>
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d006      	beq.n	8002650 <UART_SetConfig+0x1d8>
 8002642:	e00b      	b.n	800265c <UART_SetConfig+0x1e4>
 8002644:	2300      	movs	r3, #0
 8002646:	76fb      	strb	r3, [r7, #27]
 8002648:	e038      	b.n	80026bc <UART_SetConfig+0x244>
 800264a:	2302      	movs	r3, #2
 800264c:	76fb      	strb	r3, [r7, #27]
 800264e:	e035      	b.n	80026bc <UART_SetConfig+0x244>
 8002650:	2304      	movs	r3, #4
 8002652:	76fb      	strb	r3, [r7, #27]
 8002654:	e032      	b.n	80026bc <UART_SetConfig+0x244>
 8002656:	2308      	movs	r3, #8
 8002658:	76fb      	strb	r3, [r7, #27]
 800265a:	e02f      	b.n	80026bc <UART_SetConfig+0x244>
 800265c:	2310      	movs	r3, #16
 800265e:	76fb      	strb	r3, [r7, #27]
 8002660:	e02c      	b.n	80026bc <UART_SetConfig+0x244>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3f      	ldr	r2, [pc, #252]	; (8002764 <UART_SetConfig+0x2ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d125      	bne.n	80026b8 <UART_SetConfig+0x240>
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <UART_SetConfig+0x2f4>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800267a:	d017      	beq.n	80026ac <UART_SetConfig+0x234>
 800267c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002680:	d817      	bhi.n	80026b2 <UART_SetConfig+0x23a>
 8002682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002686:	d00b      	beq.n	80026a0 <UART_SetConfig+0x228>
 8002688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268c:	d811      	bhi.n	80026b2 <UART_SetConfig+0x23a>
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <UART_SetConfig+0x222>
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d006      	beq.n	80026a6 <UART_SetConfig+0x22e>
 8002698:	e00b      	b.n	80026b2 <UART_SetConfig+0x23a>
 800269a:	2300      	movs	r3, #0
 800269c:	76fb      	strb	r3, [r7, #27]
 800269e:	e00d      	b.n	80026bc <UART_SetConfig+0x244>
 80026a0:	2302      	movs	r3, #2
 80026a2:	76fb      	strb	r3, [r7, #27]
 80026a4:	e00a      	b.n	80026bc <UART_SetConfig+0x244>
 80026a6:	2304      	movs	r3, #4
 80026a8:	76fb      	strb	r3, [r7, #27]
 80026aa:	e007      	b.n	80026bc <UART_SetConfig+0x244>
 80026ac:	2308      	movs	r3, #8
 80026ae:	76fb      	strb	r3, [r7, #27]
 80026b0:	e004      	b.n	80026bc <UART_SetConfig+0x244>
 80026b2:	2310      	movs	r3, #16
 80026b4:	76fb      	strb	r3, [r7, #27]
 80026b6:	e001      	b.n	80026bc <UART_SetConfig+0x244>
 80026b8:	2310      	movs	r3, #16
 80026ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <UART_SetConfig+0x2ec>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	f040 809e 	bne.w	8002804 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026c8:	7efb      	ldrb	r3, [r7, #27]
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d823      	bhi.n	8002716 <UART_SetConfig+0x29e>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <UART_SetConfig+0x25c>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026f9 	.word	0x080026f9
 80026d8:	08002717 	.word	0x08002717
 80026dc:	08002701 	.word	0x08002701
 80026e0:	08002717 	.word	0x08002717
 80026e4:	08002707 	.word	0x08002707
 80026e8:	08002717 	.word	0x08002717
 80026ec:	08002717 	.word	0x08002717
 80026f0:	08002717 	.word	0x08002717
 80026f4:	0800270f 	.word	0x0800270f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f8:	f7ff fa0a 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 80026fc:	6178      	str	r0, [r7, #20]
        break;
 80026fe:	e00f      	b.n	8002720 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <UART_SetConfig+0x304>)
 8002702:	617b      	str	r3, [r7, #20]
        break;
 8002704:	e00c      	b.n	8002720 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002706:	f7ff f995 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 800270a:	6178      	str	r0, [r7, #20]
        break;
 800270c:	e008      	b.n	8002720 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002712:	617b      	str	r3, [r7, #20]
        break;
 8002714:	e004      	b.n	8002720 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	76bb      	strb	r3, [r7, #26]
        break;
 800271e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 812c 	beq.w	8002980 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <UART_SetConfig+0x308>)
 800272e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002732:	461a      	mov	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fbb3 f3f2 	udiv	r3, r3, r2
 800273a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	429a      	cmp	r2, r3
 800274a:	d305      	bcc.n	8002758 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	429a      	cmp	r2, r3
 8002756:	d915      	bls.n	8002784 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	76bb      	strb	r3, [r7, #26]
 800275c:	e110      	b.n	8002980 <UART_SetConfig+0x508>
 800275e:	bf00      	nop
 8002760:	cfff69f3 	.word	0xcfff69f3
 8002764:	40008000 	.word	0x40008000
 8002768:	40013800 	.word	0x40013800
 800276c:	40021000 	.word	0x40021000
 8002770:	40004400 	.word	0x40004400
 8002774:	40004800 	.word	0x40004800
 8002778:	40004c00 	.word	0x40004c00
 800277c:	00f42400 	.word	0x00f42400
 8002780:	0800307c 	.word	0x0800307c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4618      	mov	r0, r3
 8002788:	f04f 0100 	mov.w	r1, #0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	4a85      	ldr	r2, [pc, #532]	; (80029a8 <UART_SetConfig+0x530>)
 8002792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002796:	b29a      	uxth	r2, r3
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f7fd fd3c 	bl	8000218 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	020b      	lsls	r3, r1, #8
 80027b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80027b6:	0202      	lsls	r2, r0, #8
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	6849      	ldr	r1, [r1, #4]
 80027bc:	0849      	lsrs	r1, r1, #1
 80027be:	4608      	mov	r0, r1
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	1814      	adds	r4, r2, r0
 80027c6:	eb43 0501 	adc.w	r5, r3, r1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fd1e 	bl	8000218 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ea:	d308      	bcc.n	80027fe <UART_SetConfig+0x386>
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f2:	d204      	bcs.n	80027fe <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	e0c0      	b.n	8002980 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	76bb      	strb	r3, [r7, #26]
 8002802:	e0bd      	b.n	8002980 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280c:	d164      	bne.n	80028d8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800280e:	7efb      	ldrb	r3, [r7, #27]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d828      	bhi.n	8002866 <UART_SetConfig+0x3ee>
 8002814:	a201      	add	r2, pc, #4	; (adr r2, 800281c <UART_SetConfig+0x3a4>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	08002841 	.word	0x08002841
 8002820:	08002849 	.word	0x08002849
 8002824:	08002851 	.word	0x08002851
 8002828:	08002867 	.word	0x08002867
 800282c:	08002857 	.word	0x08002857
 8002830:	08002867 	.word	0x08002867
 8002834:	08002867 	.word	0x08002867
 8002838:	08002867 	.word	0x08002867
 800283c:	0800285f 	.word	0x0800285f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff f966 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002844:	6178      	str	r0, [r7, #20]
        break;
 8002846:	e013      	b.n	8002870 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002848:	f7ff f978 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 800284c:	6178      	str	r0, [r7, #20]
        break;
 800284e:	e00f      	b.n	8002870 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002850:	4b56      	ldr	r3, [pc, #344]	; (80029ac <UART_SetConfig+0x534>)
 8002852:	617b      	str	r3, [r7, #20]
        break;
 8002854:	e00c      	b.n	8002870 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002856:	f7ff f8ed 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 800285a:	6178      	str	r0, [r7, #20]
        break;
 800285c:	e008      	b.n	8002870 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002862:	617b      	str	r3, [r7, #20]
        break;
 8002864:	e004      	b.n	8002870 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	76bb      	strb	r3, [r7, #26]
        break;
 800286e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8084 	beq.w	8002980 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	4a4a      	ldr	r2, [pc, #296]	; (80029a8 <UART_SetConfig+0x530>)
 800287e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002882:	461a      	mov	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fbb3 f3f2 	udiv	r3, r3, r2
 800288a:	005a      	lsls	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	441a      	add	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d916      	bls.n	80028d2 <UART_SetConfig+0x45a>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d212      	bcs.n	80028d2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f023 030f 	bic.w	r3, r3, #15
 80028b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	89fb      	ldrh	r3, [r7, #14]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	89fa      	ldrh	r2, [r7, #14]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	e056      	b.n	8002980 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	76bb      	strb	r3, [r7, #26]
 80028d6:	e053      	b.n	8002980 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028d8:	7efb      	ldrb	r3, [r7, #27]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d827      	bhi.n	800292e <UART_SetConfig+0x4b6>
 80028de:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <UART_SetConfig+0x46c>)
 80028e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e4:	08002909 	.word	0x08002909
 80028e8:	08002911 	.word	0x08002911
 80028ec:	08002919 	.word	0x08002919
 80028f0:	0800292f 	.word	0x0800292f
 80028f4:	0800291f 	.word	0x0800291f
 80028f8:	0800292f 	.word	0x0800292f
 80028fc:	0800292f 	.word	0x0800292f
 8002900:	0800292f 	.word	0x0800292f
 8002904:	08002927 	.word	0x08002927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002908:	f7ff f902 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 800290c:	6178      	str	r0, [r7, #20]
        break;
 800290e:	e013      	b.n	8002938 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002910:	f7ff f914 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8002914:	6178      	str	r0, [r7, #20]
        break;
 8002916:	e00f      	b.n	8002938 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <UART_SetConfig+0x534>)
 800291a:	617b      	str	r3, [r7, #20]
        break;
 800291c:	e00c      	b.n	8002938 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800291e:	f7ff f889 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 8002922:	6178      	str	r0, [r7, #20]
        break;
 8002924:	e008      	b.n	8002938 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800292a:	617b      	str	r3, [r7, #20]
        break;
 800292c:	e004      	b.n	8002938 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	76bb      	strb	r3, [r7, #26]
        break;
 8002936:	bf00      	nop
    }

    if (pclk != 0U)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <UART_SetConfig+0x530>)
 8002944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002948:	461a      	mov	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	441a      	add	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d909      	bls.n	800297c <UART_SetConfig+0x504>
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d205      	bcs.n	800297c <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	e001      	b.n	8002980 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800299c:	7ebb      	ldrb	r3, [r7, #26]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdb0      	pop	{r4, r5, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	0800307c 	.word	0x0800307c
 80029ac:	00f42400 	.word	0x00f42400

080029b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01a      	beq.n	8002ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aae:	d10a      	bne.n	8002ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
  }
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b098      	sub	sp, #96	; 0x60
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b04:	f7fe f820 	bl	8000b48 <HAL_GetTick>
 8002b08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d12f      	bne.n	8002b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	2200      	movs	r2, #0
 8002b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f88e 	bl	8002c48 <UART_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d022      	beq.n	8002b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
 8002b52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e6      	bne.n	8002b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e063      	b.n	8002c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d149      	bne.n	8002c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f857 	bl	8002c48 <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d03c      	beq.n	8002c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	623b      	str	r3, [r7, #32]
   return(result);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e6      	bne.n	8002ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf2:	61fa      	str	r2, [r7, #28]
 8002bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e5      	bne.n	8002bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e012      	b.n	8002c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3758      	adds	r7, #88	; 0x58
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c58:	e04f      	b.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d04b      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c62:	f7fd ff71 	bl	8000b48 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e04e      	b.n	8002d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d037      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d034      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d031      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d110      	bne.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f838 	bl	8002d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e029      	b.n	8002d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd4:	d111      	bne.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f81e 	bl	8002d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e00f      	b.n	8002d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d0a0      	beq.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b095      	sub	sp, #84	; 0x54
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
 8002d4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e6      	bne.n	8002d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3308      	adds	r3, #8
 8002d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d88:	e841 2300 	strex	r3, r2, [r1]
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e3      	bne.n	8002d5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d118      	bne.n	8002dce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f023 0310 	bic.w	r3, r3, #16
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e6      	bne.n	8002d9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002de2:	bf00      	nop
 8002de4:	3754      	adds	r7, #84	; 0x54
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e027      	b.n	8002e54 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e02d      	b.n	8002ed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f84f 	bl	8002f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e02d      	b.n	8002f50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f811 	bl	8002f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f78:	e031      	b.n	8002fde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	0e5b      	lsrs	r3, r3, #25
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	0f5b      	lsrs	r3, r3, #29
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fa2:	7bbb      	ldrb	r3, [r7, #14]
 8002fa4:	7b3a      	ldrb	r2, [r7, #12]
 8002fa6:	4911      	ldr	r1, [pc, #68]	; (8002fec <UARTEx_SetNbDataToProcess+0x94>)
 8002fa8:	5c8a      	ldrb	r2, [r1, r2]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fae:	7b3a      	ldrb	r2, [r7, #12]
 8002fb0:	490f      	ldr	r1, [pc, #60]	; (8002ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8002fb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	7b7a      	ldrb	r2, [r7, #13]
 8002fc4:	4909      	ldr	r1, [pc, #36]	; (8002fec <UARTEx_SetNbDataToProcess+0x94>)
 8002fc6:	5c8a      	ldrb	r2, [r1, r2]
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fcc:	7b7a      	ldrb	r2, [r7, #13]
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8002fd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	08003094 	.word	0x08003094
 8002ff0:	0800309c 	.word	0x0800309c

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4d0d      	ldr	r5, [pc, #52]	; (800302c <__libc_init_array+0x38>)
 8002ff8:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	2600      	movs	r6, #0
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	4d0b      	ldr	r5, [pc, #44]	; (8003034 <__libc_init_array+0x40>)
 8003006:	4c0c      	ldr	r4, [pc, #48]	; (8003038 <__libc_init_array+0x44>)
 8003008:	f000 f820 	bl	800304c <_init>
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	2600      	movs	r6, #0
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	080030ac 	.word	0x080030ac
 8003030:	080030ac 	.word	0x080030ac
 8003034:	080030ac 	.word	0x080030ac
 8003038:	080030b0 	.word	0x080030b0

0800303c <memset>:
 800303c:	4402      	add	r2, r0
 800303e:	4603      	mov	r3, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
