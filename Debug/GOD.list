
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005944  08005944  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800594c  0800594c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000070  080059c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080059c4  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001358c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  0003362c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00035c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00036910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd55  00000000  00000000  00037510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f97a  00000000  00000000  00054265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba9af  00000000  00000000  00063bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011e58e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  0011e5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005840 	.word	0x08005840

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005840 	.word	0x08005840

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <RingBuffer_Write>:

#include "gps.h"
#include <stdint.h>
#include <stdio.h> // used for printing

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	425a      	negs	r2, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	bf58      	it	pl
 80005d6:	4253      	negpl	r3, r2
 80005d8:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	89fa      	ldrh	r2, [r7, #14]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d00b      	beq.n	8000600 <RingBuffer_Write+0x48>
        rb->buffer[rb->head] = byte;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	78fa      	ldrb	r2, [r7, #3]
 80005f6:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	89fa      	ldrh	r2, [r7, #14]
 80005fc:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    }
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800061c:	b29a      	uxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000624:	b29b      	uxth	r3, r3
 8000626:	429a      	cmp	r2, r3
 8000628:	d101      	bne.n	800062e <RingBuffer_Read+0x22>
        return 0;  // No data
 800062a:	2300      	movs	r3, #0
 800062c:	e017      	b.n	800065e <RingBuffer_Read+0x52>
    }
    *byte = rb->buffer[rb->tail];
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000634:	b29b      	uxth	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	5c9a      	ldrb	r2, [r3, r2]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000646:	b29b      	uxth	r3, r3
 8000648:	3301      	adds	r3, #1
 800064a:	425a      	negs	r2, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	bf58      	it	pl
 8000652:	4253      	negpl	r3, r2
 8000654:	b29a      	uxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    return 1;
 800065c:	2301      	movs	r3, #1
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <process_uart_data>:

char sentence[100];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer*rb) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 8000674:	e01a      	b.n	80006ac <process_uart_data+0x40>
        if (indx < sizeof(sentence) - 1) {
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <process_uart_data+0x5c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b62      	cmp	r3, #98	; 0x62
 800067c:	d807      	bhi.n	800068e <process_uart_data+0x22>
            sentence[indx++] = c;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <process_uart_data+0x5c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	4910      	ldr	r1, [pc, #64]	; (80006c8 <process_uart_data+0x5c>)
 8000686:	600a      	str	r2, [r1, #0]
 8000688:	7bf9      	ldrb	r1, [r7, #15]
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <process_uart_data+0x60>)
 800068c:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b0a      	cmp	r3, #10
 8000692:	d10b      	bne.n	80006ac <process_uart_data+0x40>
            sentence[indx] = '\0';  // Null-terminate the string
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <process_uart_data+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <process_uart_data+0x60>)
 800069a:	2100      	movs	r1, #0
 800069c:	54d1      	strb	r1, [r2, r3]
            printf("Got line: %s", sentence);
 800069e:	490b      	ldr	r1, [pc, #44]	; (80006cc <process_uart_data+0x60>)
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <process_uart_data+0x64>)
 80006a2:	f004 f901 	bl	80048a8 <iprintf>
            indx = 0;  // Reset for next line
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <process_uart_data+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 80006ac:	f107 030f 	add.w	r3, r7, #15
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ffaa 	bl	800060c <RingBuffer_Read>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1db      	bne.n	8000676 <process_uart_data+0xa>
        }
    }
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	200001a0 	.word	0x200001a0
 80006d0:	08005858 	.word	0x08005858

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fb83 	bl	8000de2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f820 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f930 	bl	8000944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 f8e2 	bl	80008ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006e8:	f000 f85a 	bl	80007a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006ec:	f000 f892 	bl	8000814 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	4907      	ldr	r1, [pc, #28]	; (8000710 <main+0x3c>)
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <main+0x40>)
 80006f6:	f002 f8b7 	bl	8002868 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 80006fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fe:	f000 fbe1 	bl	8000ec4 <HAL_Delay>
	  process_uart_data(&uart_rx_buf);
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <main+0x44>)
 8000704:	f7ff ffb2 	bl	800066c <process_uart_data>
	  printf("\r\n");
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <main+0x48>)
 800070a:	f004 f953 	bl	80049b4 <puts>
	  HAL_Delay(500);
 800070e:	e7f4      	b.n	80006fa <main+0x26>
 8000710:	20000204 	.word	0x20000204
 8000714:	20000208 	.word	0x20000208
 8000718:	20000090 	.word	0x20000090
 800071c:	08005868 	.word	0x08005868

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	2238      	movs	r2, #56	; 0x38
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 f8b2 	bl	8004898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000746:	f000 ff31 	bl	80015ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4618      	mov	r0, r3
 8000762:	f000 ffd7 	bl	8001714 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800076c:	f000 f936 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000774:	2301      	movs	r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fad7 	bl	8001d3c <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000794:	f000 f922 	bl	80009dc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_SPI1_Init+0x6c>)
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <MX_SPI1_Init+0x70>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x6c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_SPI1_Init+0x6c>)
 80007b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_SPI1_Init+0x6c>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x6c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_SPI1_Init+0x6c>)
 80007f8:	f001 feac 	bl	8002554 <HAL_SPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000802:	f000 f8eb 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000029c 	.word	0x2000029c
 8000810:	40013000 	.word	0x40013000

08000814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_USART1_UART_Init+0x94>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800085e:	f001 ff24 	bl	80026aa <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f8b8 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000870:	f003 ff1d 	bl	80046ae <HAL_UARTEx_SetTxFifoThreshold>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 f8af 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000882:	f003 ff52 	bl	800472a <HAL_UARTEx_SetRxFifoThreshold>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f8a6 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000892:	f003 fed3 	bl	800463c <HAL_UARTEx_DisableFifoMode>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f89e 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000208 	.word	0x20000208
 80008a8:	40013800 	.word	0x40013800

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART2_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x90>)
 80008f6:	f001 fed8 	bl	80026aa <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f86c 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART2_UART_Init+0x90>)
 8000908:	f003 fed1 	bl	80046ae <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f863 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x90>)
 800091a:	f003 ff06 	bl	800472a <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f85a 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART2_UART_Init+0x90>)
 800092a:	f003 fe87 	bl	800463c <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f852 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000300 	.word	0x20000300
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_GPIO_Init+0x2c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <MX_GPIO_Init+0x2c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_GPIO_Init+0x2c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b29a      	uxth	r2, r3
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <_write+0x28>)
 800098c:	f001 fedd 	bl	800274a <HAL_UART_Transmit>
    return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000300 	.word	0x20000300

080009a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <HAL_UART_RxCpltCallback+0x30>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d10a      	bne.n	80009c6 <HAL_UART_RxCpltCallback+0x26>
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_UART_RxCpltCallback+0x34>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4808      	ldr	r0, [pc, #32]	; (80009d8 <HAL_UART_RxCpltCallback+0x38>)
 80009b8:	f7ff fdfe 	bl	80005b8 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 80009bc:	2201      	movs	r2, #1
 80009be:	4905      	ldr	r1, [pc, #20]	; (80009d4 <HAL_UART_RxCpltCallback+0x34>)
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <HAL_UART_RxCpltCallback+0x30>)
 80009c2:	f001 ff51 	bl	8002868 <HAL_UART_Receive_IT>
	}
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000208 	.word	0x20000208
 80009d4:	20000204 	.word	0x20000204
 80009d8:	20000090 	.word	0x20000090

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	; 0x60
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a1e:	f000 fe69 	bl	80016f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_SPI_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d128      	bne.n	8000aa4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_SPI_MspInit+0x80>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a82:	23e0      	movs	r3, #224	; 0xe0
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a92:	2305      	movs	r3, #5
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f000 fc02 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013000 	.word	0x40013000
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	; 0x70
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	2244      	movs	r2, #68	; 0x44
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fedf 	bl	8004898 <memset>
  if(huart->Instance==USART1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a42      	ldr	r2, [pc, #264]	; (8000be8 <HAL_UART_MspInit+0x134>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d140      	bne.n	8000b66 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fb3f 	bl	8002174 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ff6e 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b04:	4a39      	ldr	r2, [pc, #228]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0c:	4b37      	ldr	r3, [pc, #220]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b34      	ldr	r3, [pc, #208]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a33      	ldr	r2, [pc, #204]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b42:	2307      	movs	r3, #7
 8000b44:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 fbaa 	bl	80012a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2025      	movs	r0, #37	; 0x25
 8000b5a:	f000 fab0 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5e:	2025      	movs	r0, #37	; 0x25
 8000b60:	f000 fac7 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b64:	e03b      	b.n	8000bde <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_UART_MspInit+0x13c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d136      	bne.n	8000bde <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 faf9 	bl	8002174 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000b88:	f7ff ff28 	bl	80009dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b96:	6593      	str	r3, [r2, #88]	; 0x58
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_UART_MspInit+0x138>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f000 fb65 	bl	80012a8 <HAL_GPIO_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3770      	adds	r7, #112	; 0x70
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40013800 	.word	0x40013800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f922 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART1_IRQHandler+0x10>)
 8000c4e:	f001 fe57 	bl	8002900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000208 	.word	0x20000208

08000c5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
	}

return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_isatty>:

int _isatty(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f003 fd88 	bl	8004844 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20008000 	.word	0x20008000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	20000194 	.word	0x20000194
 8000d68:	200003a8 	.word	0x200003a8

08000d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f003 fd47 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fc87 	bl	80006d4 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd4:	08005954 	.word	0x08005954
  ldr r2, =_sbss
 8000dd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ddc:	200003a8 	.word	0x200003a8

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f95b 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f80e 	bl	8000e14 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff fdf0 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x68>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d022      	beq.n	8000e6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_InitTick+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f966 	bl	800110e <HAL_SYSTICK_Config>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10f      	bne.n	8000e68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d809      	bhi.n	8000e62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	f000 f932 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_InitTick+0x70>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e004      	b.n	8000e72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000394 	.word	0x20000394
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000394 	.word	0x20000394

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d004      	beq.n	8000ee8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_Delay+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee8:	bf00      	nop
 8000eea:	f7ff ffdf 	bl	8000eac <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d8f7      	bhi.n	8000eea <HAL_Delay+0x26>
  {
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff40 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff33 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa4 	bl	8001064 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d005      	beq.n	800114a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2204      	movs	r2, #4
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e037      	b.n	80011ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 020e 	bic.w	r2, r2, #14
 8001158:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001168:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f003 021f 	and.w	r2, r3, #31
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001196:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00c      	beq.n	80011ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d00d      	beq.n	800120c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2204      	movs	r2, #4
 80011f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e047      	b.n	800129c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 020e 	bic.w	r2, r2, #14
 800121a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001258:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00c      	beq.n	800127c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001270:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800127a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
    }
  }
  return status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b6:	e15a      	b.n	800156e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 814c 	beq.w	8001568 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b03      	cmp	r3, #3
 8001354:	d017      	beq.n	8001386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d123      	bne.n	80013da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	6939      	ldr	r1, [r7, #16]
 80013d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0203 	and.w	r2, r3, #3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80a6 	beq.w	8001568 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_GPIO_Init+0x2e4>)
 800141e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001420:	4a5a      	ldr	r2, [pc, #360]	; (800158c <HAL_GPIO_Init+0x2e4>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6613      	str	r3, [r2, #96]	; 0x60
 8001428:	4b58      	ldr	r3, [pc, #352]	; (800158c <HAL_GPIO_Init+0x2e4>)
 800142a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001434:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_GPIO_Init+0x2e8>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145e:	d01f      	beq.n	80014a0 <HAL_GPIO_Init+0x1f8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4c      	ldr	r2, [pc, #304]	; (8001594 <HAL_GPIO_Init+0x2ec>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d019      	beq.n	800149c <HAL_GPIO_Init+0x1f4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d013      	beq.n	8001498 <HAL_GPIO_Init+0x1f0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a4a      	ldr	r2, [pc, #296]	; (800159c <HAL_GPIO_Init+0x2f4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00d      	beq.n	8001494 <HAL_GPIO_Init+0x1ec>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <HAL_GPIO_Init+0x2f8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d007      	beq.n	8001490 <HAL_GPIO_Init+0x1e8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a48      	ldr	r2, [pc, #288]	; (80015a4 <HAL_GPIO_Init+0x2fc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_GPIO_Init+0x1e4>
 8001488:	2305      	movs	r3, #5
 800148a:	e00a      	b.n	80014a2 <HAL_GPIO_Init+0x1fa>
 800148c:	2306      	movs	r3, #6
 800148e:	e008      	b.n	80014a2 <HAL_GPIO_Init+0x1fa>
 8001490:	2304      	movs	r3, #4
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x1fa>
 8001494:	2303      	movs	r3, #3
 8001496:	e004      	b.n	80014a2 <HAL_GPIO_Init+0x1fa>
 8001498:	2302      	movs	r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x1fa>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_Init+0x1fa>
 80014a0:	2300      	movs	r3, #0
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	f002 0203 	and.w	r2, r2, #3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b2:	4937      	ldr	r1, [pc, #220]	; (8001590 <HAL_GPIO_Init+0x2e8>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_GPIO_Init+0x300>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e4:	4a30      	ldr	r2, [pc, #192]	; (80015a8 <HAL_GPIO_Init+0x300>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x300>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_GPIO_Init+0x300>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_GPIO_Init+0x300>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_GPIO_Init+0x300>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_GPIO_Init+0x300>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_GPIO_Init+0x300>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	f47f ae9d 	bne.w	80012b8 <HAL_GPIO_Init+0x10>
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	48000400 	.word	0x48000400
 8001598:	48000800 	.word	0x48000800
 800159c:	48000c00 	.word	0x48000c00
 80015a0:	48001000 	.word	0x48001000
 80015a4:	48001400 	.word	0x48001400
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d141      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d131      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ce:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e0:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2232      	movs	r2, #50	; 0x32
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a3f      	ldr	r2, [pc, #252]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fe:	e002      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3b01      	subs	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001612:	d102      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f2      	bne.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001626:	d158      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e057      	b.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001632:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800163c:	e04d      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001644:	d141      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d131      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2232      	movs	r2, #50	; 0x32
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	3301      	adds	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168a:	e002      	b.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3b01      	subs	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169e:	d102      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f2      	bne.n	800168c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d112      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e011      	b.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016c8:	e007      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40007000 	.word	0x40007000
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83

080016f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001702:	6093      	str	r3, [r2, #8]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40007000 	.word	0x40007000

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e301      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d075      	beq.n	800181e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4ba3      	ldr	r3, [pc, #652]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4ba0      	ldr	r3, [pc, #640]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d002      	beq.n	8001758 <HAL_RCC_OscConfig+0x44>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4b99      	ldr	r3, [pc, #612]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d05b      	beq.n	800181c <HAL_RCC_OscConfig+0x108>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d157      	bne.n	800181c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2dc      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x74>
 800177a:	4b91      	ldr	r3, [pc, #580]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a90      	ldr	r2, [pc, #576]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e01d      	b.n	80017c4 <HAL_RCC_OscConfig+0xb0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x98>
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a8a      	ldr	r2, [pc, #552]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a87      	ldr	r2, [pc, #540]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xb0>
 80017ac:	4b84      	ldr	r3, [pc, #528]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a83      	ldr	r2, [pc, #524]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a80      	ldr	r2, [pc, #512]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb6e 	bl	8000eac <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb6a 	bl	8000eac <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e2a1      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4b76      	ldr	r3, [pc, #472]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xc0>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb5a 	bl	8000eac <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb56 	bl	8000eac <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e28d      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	4b6c      	ldr	r3, [pc, #432]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0xe8>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d075      	beq.n	8001916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001834:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b0c      	cmp	r3, #12
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0x136>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d002      	beq.n	8001850 <HAL_RCC_OscConfig+0x13c>
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d11f      	bne.n	8001890 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x154>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e260      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4952      	ldr	r1, [pc, #328]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800187c:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <HAL_RCC_OscConfig+0x2b0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fac7 	bl	8000e14 <HAL_InitTick>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d043      	beq.n	8001914 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e24c      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d023      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb02 	bl	8000eac <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fafe 	bl	8000eac <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e235      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	061b      	lsls	r3, r3, #24
 80018d8:	4939      	ldr	r1, [pc, #228]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
 80018de:	e01a      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fade 	bl	8000eac <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fada 	bl	8000eac <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e211      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1e0>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d03c      	beq.n	800199c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01c      	beq.n	8001964 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff fab7 	bl	8000eac <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fab3 	bl	8000eac <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1ea      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ef      	beq.n	8001942 <HAL_RCC_OscConfig+0x22e>
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff fa9a 	bl	8000eac <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff fa96 	bl	8000eac <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1cd      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ef      	bne.n	800197c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ab 	beq.w	8001b00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e005      	b.n	80019ca <HAL_RCC_OscConfig+0x2b6>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	20000004 	.word	0x20000004
 80019c8:	2300      	movs	r3, #0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4bad      	ldr	r3, [pc, #692]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4aac      	ldr	r2, [pc, #688]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
 80019da:	4baa      	ldr	r3, [pc, #680]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019e6:	2301      	movs	r3, #1
 80019e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	4ba7      	ldr	r3, [pc, #668]	; (8001c88 <HAL_RCC_OscConfig+0x574>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f6:	4ba4      	ldr	r3, [pc, #656]	; (8001c88 <HAL_RCC_OscConfig+0x574>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4aa3      	ldr	r2, [pc, #652]	; (8001c88 <HAL_RCC_OscConfig+0x574>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa53 	bl	8000eac <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7ff fa4f 	bl	8000eac <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e186      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1c:	4b9a      	ldr	r3, [pc, #616]	; (8001c88 <HAL_RCC_OscConfig+0x574>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_RCC_OscConfig+0x32e>
 8001a30:	4b94      	ldr	r3, [pc, #592]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a93      	ldr	r2, [pc, #588]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	e024      	b.n	8001a8c <HAL_RCC_OscConfig+0x378>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d110      	bne.n	8001a6c <HAL_RCC_OscConfig+0x358>
 8001a4a:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	4a8c      	ldr	r2, [pc, #560]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5a:	4b8a      	ldr	r3, [pc, #552]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	4a88      	ldr	r2, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6a:	e00f      	b.n	8001a8c <HAL_RCC_OscConfig+0x378>
 8001a6c:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a84      	ldr	r2, [pc, #528]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	4b81      	ldr	r3, [pc, #516]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a80      	ldr	r2, [pc, #512]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d016      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa0a 	bl	8000eac <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fa06 	bl	8000eac <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e13b      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab2:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ed      	beq.n	8001a9c <HAL_RCC_OscConfig+0x388>
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f9f3 	bl	8000eac <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f9ef 	bl	8000eac <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e124      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ed      	bne.n	8001aca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	4a62      	ldr	r2, [pc, #392]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b14:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1a:	4a5a      	ldr	r2, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f9c2 	bl	8000eac <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2c:	f7ff f9be 	bl	8000eac <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0f5      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ef      	beq.n	8001b2c <HAL_RCC_OscConfig+0x418>
 8001b4c:	e01b      	b.n	8001b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b54:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f9a5 	bl	8000eac <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b66:	f7ff f9a1 	bl	8000eac <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0d8      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ef      	bne.n	8001b66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80cc 	beq.w	8001d28 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	f000 8086 	beq.w	8001caa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d15a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a36      	ldr	r2, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f97b 	bl	8000eac <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff f977 	bl	8000eac <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0ae      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x578>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6a11      	ldr	r1, [r2, #32]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be8:	3a01      	subs	r2, #1
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bf2:	0212      	lsls	r2, r2, #8
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bfa:	0852      	lsrs	r2, r2, #1
 8001bfc:	3a01      	subs	r2, #1
 8001bfe:	0552      	lsls	r2, r2, #21
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c06:	0852      	lsrs	r2, r2, #1
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	0652      	lsls	r2, r2, #25
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c12:	06d2      	lsls	r2, r2, #27
 8001c14:	430a      	orrs	r2, r1
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f93a 	bl	8000eac <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f936 	bl	8000eac <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e06d      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x528>
 8001c5a:	e065      	b.n	8001d28 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_RCC_OscConfig+0x570>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f920 	bl	8000eac <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	e00f      	b.n	8001c90 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f91c 	bl	8000eac <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e053      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e9      	bne.n	8001c70 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4924      	ldr	r1, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x624>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
 8001ca8:	e03e      	b.n	8001d28 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e039      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d12c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d123      	bne.n	8001d24 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d11b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d113      	bne.n	8001d24 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d109      	bne.n	8001d24 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	feeefffc 	.word	0xfeeefffc

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e11e      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 020f 	bic.w	r2, r3, #15
 8001d6a:	498c      	ldr	r1, [pc, #560]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b8a      	ldr	r3, [pc, #552]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e106      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d073      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d129      	bne.n	8001dec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d98:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0f4      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001da8:	f000 f99e 	bl	80020e8 <RCC_GetSysClockFreqFromPLLSource>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4a7c      	ldr	r2, [pc, #496]	; (8001fa4 <HAL_RCC_ClockConfig+0x268>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d93f      	bls.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d033      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d12f      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e024      	b.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0c6      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0be      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e14:	f000 f8ce 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a61      	ldr	r2, [pc, #388]	; (8001fa4 <HAL_RCC_ClockConfig+0x268>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d909      	bls.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2a:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4957      	ldr	r1, [pc, #348]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e48:	f7ff f830 	bl	8000eac <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff f82c 	bl	8000eac <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e095      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001eb0:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4936      	ldr	r1, [pc, #216]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
 8001eca:	e008      	b.n	8001ede <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001edc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d21d      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 020f 	bic.w	r2, r3, #15
 8001ef4:	4929      	ldr	r1, [pc, #164]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001efc:	f7fe ffd6 	bl	8000eac <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe ffd2 	bl	8000eac <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e03b      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1ed      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4917      	ldr	r1, [pc, #92]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490f      	ldr	r1, [pc, #60]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f66:	f000 f825 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <HAL_RCC_ClockConfig+0x26c>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x270>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ff42 	bl	8000e14 <HAL_InitTick>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	04c4b400 	.word	0x04c4b400
 8001fa8:	0800586c 	.word	0x0800586c
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e047      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e03e      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d136      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3301      	adds	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002012:	68d2      	ldr	r2, [r2, #12]
 8002014:	0a12      	lsrs	r2, r2, #8
 8002016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
      break;
 8002020:	e00c      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	0a12      	lsrs	r2, r2, #8
 8002030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
      break;
 800203a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0e5b      	lsrs	r3, r3, #25
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e001      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	4618      	mov	r0, r3
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	00f42400 	.word	0x00f42400
 8002074:	007a1200 	.word	0x007a1200

08002078 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_GetHCLKFreq+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002094:	f7ff fff0 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	0800587c 	.word	0x0800587c

080020bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020c0:	f7ff ffda 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0adb      	lsrs	r3, r3, #11
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4904      	ldr	r1, [pc, #16]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	0800587c 	.word	0x0800587c

080020e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d10c      	bne.n	8002126 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002116:	68d2      	ldr	r2, [r2, #12]
 8002118:	0a12      	lsrs	r2, r2, #8
 800211a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
    break;
 8002124:	e00c      	b.n	8002140 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	0a12      	lsrs	r2, r2, #8
 8002134:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    break;
 800213e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0e5b      	lsrs	r3, r3, #25
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800215a:	687b      	ldr	r3, [r7, #4]
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000
 800216c:	007a1200 	.word	0x007a1200
 8002170:	00f42400 	.word	0x00f42400

08002174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800217c:	2300      	movs	r3, #0
 800217e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002180:	2300      	movs	r3, #0
 8002182:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8098 	beq.w	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ba:	2301      	movs	r3, #1
 80021bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021be:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a39      	ldr	r2, [pc, #228]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ca:	f7fe fe6f 	bl	8000eac <HAL_GetTick>
 80021ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d0:	e009      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe fe6b 	bl	8000eac <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d902      	bls.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	74fb      	strb	r3, [r7, #19]
        break;
 80021e4:	e005      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ef      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d159      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01e      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	d019      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002214:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d016      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe fe2b 	bl	8000eac <HAL_GetTick>
 8002256:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002258:	e00b      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe fe27 	bl	8000eac <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d902      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	74fb      	strb	r3, [r7, #19]
            break;
 8002270:	e006      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ec      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800229c:	e008      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	74bb      	strb	r3, [r7, #18]
 80022a2:	e005      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b0:	7c7b      	ldrb	r3, [r7, #17]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4ba6      	ldr	r3, [pc, #664]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4aa5      	ldr	r2, [pc, #660]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ce:	4ba0      	ldr	r3, [pc, #640]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f023 0203 	bic.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	499c      	ldr	r1, [pc, #624]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022f0:	4b97      	ldr	r3, [pc, #604]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 020c 	bic.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4994      	ldr	r1, [pc, #592]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002312:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	498b      	ldr	r1, [pc, #556]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002334:	4b86      	ldr	r3, [pc, #536]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4983      	ldr	r1, [pc, #524]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002356:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	497a      	ldr	r1, [pc, #488]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002378:	4b75      	ldr	r3, [pc, #468]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4972      	ldr	r1, [pc, #456]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4969      	ldr	r1, [pc, #420]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4961      	ldr	r1, [pc, #388]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	4958      	ldr	r1, [pc, #352]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	4950      	ldr	r1, [pc, #320]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241e:	d105      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002438:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	4942      	ldr	r1, [pc, #264]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002458:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a3c      	ldr	r2, [pc, #240]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002462:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d015      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4934      	ldr	r1, [pc, #208]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248e:	d105      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	4926      	ldr	r1, [pc, #152]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c6:	d105      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a20      	ldr	r2, [pc, #128]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	4918      	ldr	r1, [pc, #96]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fe:	d105      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002536:	d105      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002544:	7cbb      	ldrb	r3, [r7, #18]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e09d      	b.n	80026a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d108      	bne.n	8002580 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002576:	d009      	beq.n	800258c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
 800257e:	e005      	b.n	800258c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fa42 	bl	8000a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025cc:	d902      	bls.n	80025d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e002      	b.n	80025da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80025e2:	d007      	beq.n	80025f4 <HAL_SPI_Init+0xa0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002636:	ea42 0103 	orr.w	r1, r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f003 0204 	and.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e042      	b.n	8002742 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe f9f0 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fee3 	bl	80034c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fc44 	bl	8002f88 <UART_SetConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e01b      	b.n	8002742 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002718:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002728:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 ff62 	bl	8003604 <UART_CheckIdleState>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08a      	sub	sp, #40	; 0x28
 800274e:	af02      	add	r7, sp, #8
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	2b20      	cmp	r3, #32
 8002762:	d17b      	bne.n	800285c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Transmit+0x26>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e074      	b.n	800285e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2221      	movs	r2, #33	; 0x21
 8002780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002784:	f7fe fb92 	bl	8000eac <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d108      	bne.n	80027b6 <HAL_UART_Transmit+0x6c>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e003      	b.n	80027be <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027be:	e030      	b.n	8002822 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 ffc4 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e03d      	b.n	800285e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	3302      	adds	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e007      	b.n	8002810 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1c8      	bne.n	80027c0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2200      	movs	r2, #0
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 ff8d 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e006      	b.n	800285e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800287c:	2b20      	cmp	r3, #32
 800287e:	d137      	bne.n	80028f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_UART_Receive_IT+0x24>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e030      	b.n	80028f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_UART_Receive_IT+0x94>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01f      	beq.n	80028e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	613b      	str	r3, [r7, #16]
   return(result);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	69f9      	ldr	r1, [r7, #28]
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e6      	bne.n	80028ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 ffa4 	bl	8003834 <UART_Start_Receive_IT>
 80028ec:	4603      	mov	r3, r0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3728      	adds	r7, #40	; 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40008000 	.word	0x40008000

08002900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b0ba      	sub	sp, #232	; 0xe8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800292a:	f640 030f 	movw	r3, #2063	; 0x80f
 800292e:	4013      	ands	r3, r2
 8002930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d11b      	bne.n	8002974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800293c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 82e3 	beq.w	8002f30 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
      }
      return;
 8002972:	e2dd      	b.n	8002f30 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8123 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800297e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002982:	4b8d      	ldr	r3, [pc, #564]	; (8002bb8 <HAL_UART_IRQHandler+0x2b8>)
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800298a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800298e:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <HAL_UART_IRQHandler+0x2bc>)
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8116 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d011      	beq.n	80029c8 <HAL_UART_IRQHandler+0xc8>
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <HAL_UART_IRQHandler+0xf8>
 80029d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2202      	movs	r2, #2
 80029e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f043 0204 	orr.w	r2, r3, #4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d011      	beq.n	8002a28 <HAL_UART_IRQHandler+0x128>
 8002a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2204      	movs	r2, #4
 8002a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a44:	4b5c      	ldr	r3, [pc, #368]	; (8002bb8 <HAL_UART_IRQHandler+0x2b8>)
 8002a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2208      	movs	r2, #8
 8002a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f043 0208 	orr.w	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <HAL_UART_IRQHandler+0x196>
 8002a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8249 	beq.w	8002f34 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d013      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d005      	beq.n	8002afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d054      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 ffbc 	bl	8003a78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d146      	bne.n	8002b9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3308      	adds	r3, #8
 8002b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3308      	adds	r3, #8
 8002b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1d9      	bne.n	8002b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d017      	beq.n	8002b94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_UART_IRQHandler+0x2c0>)
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fb2f 	bl	80011d8 <HAL_DMA_Abort_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d019      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	e00f      	b.n	8002bb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9e1 	bl	8002f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9a:	e00b      	b.n	8002bb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f9dd 	bl	8002f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	e007      	b.n	8002bb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9d9 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002bb2:	e1bf      	b.n	8002f34 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	bf00      	nop
    return;
 8002bb6:	e1bd      	b.n	8002f34 <HAL_UART_IRQHandler+0x634>
 8002bb8:	10000001 	.word	0x10000001
 8002bbc:	04000120 	.word	0x04000120
 8002bc0:	08003b45 	.word	0x08003b45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 8153 	bne.w	8002e74 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 814c 	beq.w	8002e74 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8145 	beq.w	8002e74 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	f040 80bb 	bne.w	8002d78 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 818f 	beq.w	8002f38 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f080 8187 	bcs.w	8002f38 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 8087 	bne.w	8002d56 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1da      	bne.n	8002c48 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3308      	adds	r3, #8
 8002c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e1      	bne.n	8002c92 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3308      	adds	r3, #8
 8002cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e3      	bne.n	8002cce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d24:	f023 0310 	bic.w	r3, r3, #16
 8002d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d36:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e4      	bne.n	8002d14 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe f9e8 	bl	8001126 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f8fd 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d76:	e0df      	b.n	8002f38 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80d1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80cc 	beq.w	8002f3c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e4      	bne.n	8002da4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3308      	adds	r3, #8
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e02:	633a      	str	r2, [r7, #48]	; 0x30
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e1      	bne.n	8002dda <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0310 	bic.w	r3, r3, #16
 8002e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	617b      	str	r3, [r7, #20]
   return(result);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e4      	bne.n	8002e2a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f87f 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e72:	e063      	b.n	8002f3c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <HAL_UART_IRQHandler+0x59e>
 8002e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f001 fbb2 	bl	8004600 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e9c:	e051      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d014      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03a      	beq.n	8002f40 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
    }
    return;
 8002ed2:	e035      	b.n	8002f40 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x5f4>
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fe3f 	bl	8003b70 <UART_EndTransmit_IT>
    return;
 8002ef2:	e026      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <HAL_UART_IRQHandler+0x614>
 8002f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f001 fb8b 	bl	8004628 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f12:	e016      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_UART_IRQHandler+0x642>
 8002f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	da0c      	bge.n	8002f42 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f001 fb73 	bl	8004614 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f2e:	e008      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
      return;
 8002f30:	bf00      	nop
 8002f32:	e006      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
    return;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
      return;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
      return;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_IRQHandler+0x642>
    return;
 8002f40:	bf00      	nop
  }
}
 8002f42:	37e8      	adds	r7, #232	; 0xe8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4baf      	ldr	r3, [pc, #700]	; (8003270 <UART_SetConfig+0x2e8>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	69f9      	ldr	r1, [r7, #28]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4aa4      	ldr	r2, [pc, #656]	; (8003274 <UART_SetConfig+0x2ec>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ffa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	69f9      	ldr	r1, [r7, #28]
 8003004:	430b      	orrs	r3, r1
 8003006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f023 010f 	bic.w	r1, r3, #15
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a95      	ldr	r2, [pc, #596]	; (8003278 <UART_SetConfig+0x2f0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d120      	bne.n	800306a <UART_SetConfig+0xe2>
 8003028:	4b94      	ldr	r3, [pc, #592]	; (800327c <UART_SetConfig+0x2f4>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d816      	bhi.n	8003064 <UART_SetConfig+0xdc>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <UART_SetConfig+0xb4>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003059 	.word	0x08003059
 8003044:	08003053 	.word	0x08003053
 8003048:	0800305f 	.word	0x0800305f
 800304c:	2301      	movs	r3, #1
 800304e:	76fb      	strb	r3, [r7, #27]
 8003050:	e0bc      	b.n	80031cc <UART_SetConfig+0x244>
 8003052:	2302      	movs	r3, #2
 8003054:	76fb      	strb	r3, [r7, #27]
 8003056:	e0b9      	b.n	80031cc <UART_SetConfig+0x244>
 8003058:	2304      	movs	r3, #4
 800305a:	76fb      	strb	r3, [r7, #27]
 800305c:	e0b6      	b.n	80031cc <UART_SetConfig+0x244>
 800305e:	2308      	movs	r3, #8
 8003060:	76fb      	strb	r3, [r7, #27]
 8003062:	e0b3      	b.n	80031cc <UART_SetConfig+0x244>
 8003064:	2310      	movs	r3, #16
 8003066:	76fb      	strb	r3, [r7, #27]
 8003068:	e0b0      	b.n	80031cc <UART_SetConfig+0x244>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a84      	ldr	r2, [pc, #528]	; (8003280 <UART_SetConfig+0x2f8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d132      	bne.n	80030da <UART_SetConfig+0x152>
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <UART_SetConfig+0x2f4>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d828      	bhi.n	80030d4 <UART_SetConfig+0x14c>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x100>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030bd 	.word	0x080030bd
 800308c:	080030d5 	.word	0x080030d5
 8003090:	080030d5 	.word	0x080030d5
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030c9 	.word	0x080030c9
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080030d5 	.word	0x080030d5
 80030a8:	080030c3 	.word	0x080030c3
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030d5 	.word	0x080030d5
 80030b8:	080030cf 	.word	0x080030cf
 80030bc:	2300      	movs	r3, #0
 80030be:	76fb      	strb	r3, [r7, #27]
 80030c0:	e084      	b.n	80031cc <UART_SetConfig+0x244>
 80030c2:	2302      	movs	r3, #2
 80030c4:	76fb      	strb	r3, [r7, #27]
 80030c6:	e081      	b.n	80031cc <UART_SetConfig+0x244>
 80030c8:	2304      	movs	r3, #4
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	e07e      	b.n	80031cc <UART_SetConfig+0x244>
 80030ce:	2308      	movs	r3, #8
 80030d0:	76fb      	strb	r3, [r7, #27]
 80030d2:	e07b      	b.n	80031cc <UART_SetConfig+0x244>
 80030d4:	2310      	movs	r3, #16
 80030d6:	76fb      	strb	r3, [r7, #27]
 80030d8:	e078      	b.n	80031cc <UART_SetConfig+0x244>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a69      	ldr	r2, [pc, #420]	; (8003284 <UART_SetConfig+0x2fc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d120      	bne.n	8003126 <UART_SetConfig+0x19e>
 80030e4:	4b65      	ldr	r3, [pc, #404]	; (800327c <UART_SetConfig+0x2f4>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030ee:	2b30      	cmp	r3, #48	; 0x30
 80030f0:	d013      	beq.n	800311a <UART_SetConfig+0x192>
 80030f2:	2b30      	cmp	r3, #48	; 0x30
 80030f4:	d814      	bhi.n	8003120 <UART_SetConfig+0x198>
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d009      	beq.n	800310e <UART_SetConfig+0x186>
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d810      	bhi.n	8003120 <UART_SetConfig+0x198>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <UART_SetConfig+0x180>
 8003102:	2b10      	cmp	r3, #16
 8003104:	d006      	beq.n	8003114 <UART_SetConfig+0x18c>
 8003106:	e00b      	b.n	8003120 <UART_SetConfig+0x198>
 8003108:	2300      	movs	r3, #0
 800310a:	76fb      	strb	r3, [r7, #27]
 800310c:	e05e      	b.n	80031cc <UART_SetConfig+0x244>
 800310e:	2302      	movs	r3, #2
 8003110:	76fb      	strb	r3, [r7, #27]
 8003112:	e05b      	b.n	80031cc <UART_SetConfig+0x244>
 8003114:	2304      	movs	r3, #4
 8003116:	76fb      	strb	r3, [r7, #27]
 8003118:	e058      	b.n	80031cc <UART_SetConfig+0x244>
 800311a:	2308      	movs	r3, #8
 800311c:	76fb      	strb	r3, [r7, #27]
 800311e:	e055      	b.n	80031cc <UART_SetConfig+0x244>
 8003120:	2310      	movs	r3, #16
 8003122:	76fb      	strb	r3, [r7, #27]
 8003124:	e052      	b.n	80031cc <UART_SetConfig+0x244>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a57      	ldr	r2, [pc, #348]	; (8003288 <UART_SetConfig+0x300>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d120      	bne.n	8003172 <UART_SetConfig+0x1ea>
 8003130:	4b52      	ldr	r3, [pc, #328]	; (800327c <UART_SetConfig+0x2f4>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800313a:	2bc0      	cmp	r3, #192	; 0xc0
 800313c:	d013      	beq.n	8003166 <UART_SetConfig+0x1de>
 800313e:	2bc0      	cmp	r3, #192	; 0xc0
 8003140:	d814      	bhi.n	800316c <UART_SetConfig+0x1e4>
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d009      	beq.n	800315a <UART_SetConfig+0x1d2>
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d810      	bhi.n	800316c <UART_SetConfig+0x1e4>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <UART_SetConfig+0x1cc>
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d006      	beq.n	8003160 <UART_SetConfig+0x1d8>
 8003152:	e00b      	b.n	800316c <UART_SetConfig+0x1e4>
 8003154:	2300      	movs	r3, #0
 8003156:	76fb      	strb	r3, [r7, #27]
 8003158:	e038      	b.n	80031cc <UART_SetConfig+0x244>
 800315a:	2302      	movs	r3, #2
 800315c:	76fb      	strb	r3, [r7, #27]
 800315e:	e035      	b.n	80031cc <UART_SetConfig+0x244>
 8003160:	2304      	movs	r3, #4
 8003162:	76fb      	strb	r3, [r7, #27]
 8003164:	e032      	b.n	80031cc <UART_SetConfig+0x244>
 8003166:	2308      	movs	r3, #8
 8003168:	76fb      	strb	r3, [r7, #27]
 800316a:	e02f      	b.n	80031cc <UART_SetConfig+0x244>
 800316c:	2310      	movs	r3, #16
 800316e:	76fb      	strb	r3, [r7, #27]
 8003170:	e02c      	b.n	80031cc <UART_SetConfig+0x244>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3f      	ldr	r2, [pc, #252]	; (8003274 <UART_SetConfig+0x2ec>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0x240>
 800317c:	4b3f      	ldr	r3, [pc, #252]	; (800327c <UART_SetConfig+0x2f4>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003186:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800318a:	d017      	beq.n	80031bc <UART_SetConfig+0x234>
 800318c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003190:	d817      	bhi.n	80031c2 <UART_SetConfig+0x23a>
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003196:	d00b      	beq.n	80031b0 <UART_SetConfig+0x228>
 8003198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319c:	d811      	bhi.n	80031c2 <UART_SetConfig+0x23a>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <UART_SetConfig+0x222>
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a6:	d006      	beq.n	80031b6 <UART_SetConfig+0x22e>
 80031a8:	e00b      	b.n	80031c2 <UART_SetConfig+0x23a>
 80031aa:	2300      	movs	r3, #0
 80031ac:	76fb      	strb	r3, [r7, #27]
 80031ae:	e00d      	b.n	80031cc <UART_SetConfig+0x244>
 80031b0:	2302      	movs	r3, #2
 80031b2:	76fb      	strb	r3, [r7, #27]
 80031b4:	e00a      	b.n	80031cc <UART_SetConfig+0x244>
 80031b6:	2304      	movs	r3, #4
 80031b8:	76fb      	strb	r3, [r7, #27]
 80031ba:	e007      	b.n	80031cc <UART_SetConfig+0x244>
 80031bc:	2308      	movs	r3, #8
 80031be:	76fb      	strb	r3, [r7, #27]
 80031c0:	e004      	b.n	80031cc <UART_SetConfig+0x244>
 80031c2:	2310      	movs	r3, #16
 80031c4:	76fb      	strb	r3, [r7, #27]
 80031c6:	e001      	b.n	80031cc <UART_SetConfig+0x244>
 80031c8:	2310      	movs	r3, #16
 80031ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a28      	ldr	r2, [pc, #160]	; (8003274 <UART_SetConfig+0x2ec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f040 809e 	bne.w	8003314 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031d8:	7efb      	ldrb	r3, [r7, #27]
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d823      	bhi.n	8003226 <UART_SetConfig+0x29e>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x25c>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003227 	.word	0x08003227
 80031f4:	08003217 	.word	0x08003217
 80031f8:	08003227 	.word	0x08003227
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003227 	.word	0x08003227
 8003204:	0800321f 	.word	0x0800321f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7fe ff42 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 800320c:	6178      	str	r0, [r7, #20]
        break;
 800320e:	e00f      	b.n	8003230 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b1e      	ldr	r3, [pc, #120]	; (800328c <UART_SetConfig+0x304>)
 8003212:	617b      	str	r3, [r7, #20]
        break;
 8003214:	e00c      	b.n	8003230 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7fe fecd 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 800321a:	6178      	str	r0, [r7, #20]
        break;
 800321c:	e008      	b.n	8003230 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	617b      	str	r3, [r7, #20]
        break;
 8003224:	e004      	b.n	8003230 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	76bb      	strb	r3, [r7, #26]
        break;
 800322e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 812c 	beq.w	8003490 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <UART_SetConfig+0x308>)
 800323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003242:	461a      	mov	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fbb3 f3f2 	udiv	r3, r3, r2
 800324a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d305      	bcc.n	8003268 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	d915      	bls.n	8003294 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	76bb      	strb	r3, [r7, #26]
 800326c:	e110      	b.n	8003490 <UART_SetConfig+0x508>
 800326e:	bf00      	nop
 8003270:	cfff69f3 	.word	0xcfff69f3
 8003274:	40008000 	.word	0x40008000
 8003278:	40013800 	.word	0x40013800
 800327c:	40021000 	.word	0x40021000
 8003280:	40004400 	.word	0x40004400
 8003284:	40004800 	.word	0x40004800
 8003288:	40004c00 	.word	0x40004c00
 800328c:	00f42400 	.word	0x00f42400
 8003290:	08005884 	.word	0x08005884
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4618      	mov	r0, r3
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	4a85      	ldr	r2, [pc, #532]	; (80034b8 <UART_SetConfig+0x530>)
 80032a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	f7fd f808 	bl	80002c0 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	020b      	lsls	r3, r1, #8
 80032c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032c6:	0202      	lsls	r2, r0, #8
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	6849      	ldr	r1, [r1, #4]
 80032cc:	0849      	lsrs	r1, r1, #1
 80032ce:	4608      	mov	r0, r1
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	1814      	adds	r4, r2, r0
 80032d6:	eb43 0501 	adc.w	r5, r3, r1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fc ffea 	bl	80002c0 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fa:	d308      	bcc.n	800330e <UART_SetConfig+0x386>
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003302:	d204      	bcs.n	800330e <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e0c0      	b.n	8003490 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	76bb      	strb	r3, [r7, #26]
 8003312:	e0bd      	b.n	8003490 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	d164      	bne.n	80033e8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800331e:	7efb      	ldrb	r3, [r7, #27]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d828      	bhi.n	8003376 <UART_SetConfig+0x3ee>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x3a4>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
 8003338:	08003377 	.word	0x08003377
 800333c:	08003367 	.word	0x08003367
 8003340:	08003377 	.word	0x08003377
 8003344:	08003377 	.word	0x08003377
 8003348:	08003377 	.word	0x08003377
 800334c:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7fe fe9e 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8003354:	6178      	str	r0, [r7, #20]
        break;
 8003356:	e013      	b.n	8003380 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7fe feb0 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 800335c:	6178      	str	r0, [r7, #20]
        break;
 800335e:	e00f      	b.n	8003380 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <UART_SetConfig+0x534>)
 8003362:	617b      	str	r3, [r7, #20]
        break;
 8003364:	e00c      	b.n	8003380 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe fe25 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 800336a:	6178      	str	r0, [r7, #20]
        break;
 800336c:	e008      	b.n	8003380 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	617b      	str	r3, [r7, #20]
        break;
 8003374:	e004      	b.n	8003380 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	76bb      	strb	r3, [r7, #26]
        break;
 800337e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8084 	beq.w	8003490 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	4a4a      	ldr	r2, [pc, #296]	; (80034b8 <UART_SetConfig+0x530>)
 800338e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003392:	461a      	mov	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fbb3 f3f2 	udiv	r3, r3, r2
 800339a:	005a      	lsls	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d916      	bls.n	80033e2 <UART_SetConfig+0x45a>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d212      	bcs.n	80033e2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f023 030f 	bic.w	r3, r3, #15
 80033c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	89fa      	ldrh	r2, [r7, #14]
 80033de:	60da      	str	r2, [r3, #12]
 80033e0:	e056      	b.n	8003490 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	76bb      	strb	r3, [r7, #26]
 80033e6:	e053      	b.n	8003490 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033e8:	7efb      	ldrb	r3, [r7, #27]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d827      	bhi.n	800343e <UART_SetConfig+0x4b6>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0x46c>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003429 	.word	0x08003429
 8003400:	0800343f 	.word	0x0800343f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800343f 	.word	0x0800343f
 800340c:	0800343f 	.word	0x0800343f
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe fe3a 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 800341c:	6178      	str	r0, [r7, #20]
        break;
 800341e:	e013      	b.n	8003448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fe4c 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8003424:	6178      	str	r0, [r7, #20]
        break;
 8003426:	e00f      	b.n	8003448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <UART_SetConfig+0x534>)
 800342a:	617b      	str	r3, [r7, #20]
        break;
 800342c:	e00c      	b.n	8003448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fdc1 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8003432:	6178      	str	r0, [r7, #20]
        break;
 8003434:	e008      	b.n	8003448 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	617b      	str	r3, [r7, #20]
        break;
 800343c:	e004      	b.n	8003448 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	76bb      	strb	r3, [r7, #26]
        break;
 8003446:	bf00      	nop
    }

    if (pclk != 0U)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d020      	beq.n	8003490 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <UART_SetConfig+0x530>)
 8003454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003458:	461a      	mov	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	441a      	add	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b0f      	cmp	r3, #15
 8003476:	d909      	bls.n	800348c <UART_SetConfig+0x504>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347e:	d205      	bcs.n	800348c <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e001      	b.n	8003490 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80034ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	08005884 	.word	0x08005884
 80034bc:	00f42400 	.word	0x00f42400

080034c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035be:	d10a      	bne.n	80035d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b098      	sub	sp, #96	; 0x60
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003614:	f7fd fc4a 	bl	8000eac <HAL_GetTick>
 8003618:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d12f      	bne.n	8003688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f88e 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d022      	beq.n	8003688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
 8003662:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800366e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e6      	bne.n	8003642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e063      	b.n	8003750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d149      	bne.n	800372a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003696:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	2200      	movs	r2, #0
 80036a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f857 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03c      	beq.n	800372a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	623b      	str	r3, [r7, #32]
   return(result);
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
 80036d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e6      	bne.n	80036b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3308      	adds	r3, #8
 80036e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003702:	61fa      	str	r2, [r7, #28]
 8003704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	617b      	str	r3, [r7, #20]
   return(result);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e012      	b.n	8003750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3758      	adds	r7, #88	; 0x58
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e04f      	b.n	800380a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d04b      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fd fb9b 	bl	8000eac <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <UART_WaitOnFlagUntilTimeout+0x30>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e04e      	b.n	800382a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d037      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0xb2>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d034      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d031      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d110      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2208      	movs	r2, #8
 80037ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f95b 	bl	8003a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2208      	movs	r2, #8
 80037c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e029      	b.n	800382a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e4:	d111      	bne.n	800380a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f941 	bl	8003a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e00f      	b.n	800382a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d0a0      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003834:	b480      	push	{r7}
 8003836:	b0a3      	sub	sp, #140	; 0x8c
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003866:	d10e      	bne.n	8003886 <UART_Start_Receive_IT+0x52>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <UART_Start_Receive_IT+0x48>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003876:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800387a:	e02d      	b.n	80038d8 <UART_Start_Receive_IT+0xa4>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003884:	e028      	b.n	80038d8 <UART_Start_Receive_IT+0xa4>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10d      	bne.n	80038aa <UART_Start_Receive_IT+0x76>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <UART_Start_Receive_IT+0x6c>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	22ff      	movs	r2, #255	; 0xff
 800389a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800389e:	e01b      	b.n	80038d8 <UART_Start_Receive_IT+0xa4>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	227f      	movs	r2, #127	; 0x7f
 80038a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038a8:	e016      	b.n	80038d8 <UART_Start_Receive_IT+0xa4>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b2:	d10d      	bne.n	80038d0 <UART_Start_Receive_IT+0x9c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <UART_Start_Receive_IT+0x92>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	227f      	movs	r2, #127	; 0x7f
 80038c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038c4:	e008      	b.n	80038d8 <UART_Start_Receive_IT+0xa4>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	223f      	movs	r2, #63	; 0x3f
 80038ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038ce:	e003      	b.n	80038d8 <UART_Start_Receive_IT+0xa4>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2222      	movs	r2, #34	; 0x22
 80038e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80038f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800390c:	673a      	str	r2, [r7, #112]	; 0x70
 800390e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003912:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800391a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e3      	bne.n	80038e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003928:	d14f      	bne.n	80039ca <UART_Start_Receive_IT+0x196>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	429a      	cmp	r2, r3
 8003934:	d349      	bcc.n	80039ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d107      	bne.n	8003950 <UART_Start_Receive_IT+0x11c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d103      	bne.n	8003950 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a47      	ldr	r2, [pc, #284]	; (8003a68 <UART_Start_Receive_IT+0x234>)
 800394c:	675a      	str	r2, [r3, #116]	; 0x74
 800394e:	e002      	b.n	8003956 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a46      	ldr	r2, [pc, #280]	; (8003a6c <UART_Start_Receive_IT+0x238>)
 8003954:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01a      	beq.n	8003994 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003982:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003986:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800398e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e4      	bne.n	800395e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3308      	adds	r3, #8
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3308      	adds	r3, #8
 80039b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80039b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_Start_Receive_IT+0x160>
 80039c8:	e046      	b.n	8003a58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d107      	bne.n	80039e4 <UART_Start_Receive_IT+0x1b0>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <UART_Start_Receive_IT+0x23c>)
 80039e0:	675a      	str	r2, [r3, #116]	; 0x74
 80039e2:	e002      	b.n	80039ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <UART_Start_Receive_IT+0x240>)
 80039e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d019      	beq.n	8003a26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a06:	677b      	str	r3, [r7, #116]	; 0x74
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
 8003a12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e6      	bne.n	80039f2 <UART_Start_Receive_IT+0x1be>
 8003a24:	e018      	b.n	8003a58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	613b      	str	r3, [r7, #16]
   return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	378c      	adds	r7, #140	; 0x8c
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	08004299 	.word	0x08004299
 8003a6c:	08003f39 	.word	0x08003f39
 8003a70:	08003d81 	.word	0x08003d81
 8003a74:	08003bc9 	.word	0x08003bc9

08003a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b095      	sub	sp, #84	; 0x54
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e3      	bne.n	8003ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d118      	bne.n	8003b24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0310 	bic.w	r3, r3, #16
 8003b06:	647b      	str	r3, [r7, #68]	; 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e6      	bne.n	8003af2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b38:	bf00      	nop
 8003b3a:	3754      	adds	r7, #84	; 0x54
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff f9fa 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e6      	bne.n	8003b78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff f9c5 	bl	8002f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbe:	bf00      	nop
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b09c      	sub	sp, #112	; 0x70
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003bd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	2b22      	cmp	r3, #34	; 0x22
 8003be2:	f040 80be 	bne.w	8003d62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003bf4:	b2d9      	uxtb	r1, r3
 8003bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	400a      	ands	r2, r1
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 80a1 	bne.w	8003d72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3308      	adds	r3, #8
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	667b      	str	r3, [r7, #100]	; 0x64
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c82:	647a      	str	r2, [r7, #68]	; 0x44
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <UART_RxISR_8BIT+0x1b4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01f      	beq.n	8003cf4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e6      	bne.n	8003cc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d12e      	bne.n	8003d5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0310 	bic.w	r3, r3, #16
 8003d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e6      	bne.n	8003d02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d103      	bne.n	8003d4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff f90c 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d58:	e00b      	b.n	8003d72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc fe20 	bl	80009a0 <HAL_UART_RxCpltCallback>
}
 8003d60:	e007      	b.n	8003d72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	619a      	str	r2, [r3, #24]
}
 8003d72:	bf00      	nop
 8003d74:	3770      	adds	r7, #112	; 0x70
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40008000 	.word	0x40008000

08003d80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b09c      	sub	sp, #112	; 0x70
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d8e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d98:	2b22      	cmp	r3, #34	; 0x22
 8003d9a:	f040 80be 	bne.w	8003f1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003db2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003db6:	4013      	ands	r3, r2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80a1 	bne.w	8003f2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
 8003e08:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e6      	bne.n	8003de8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	663b      	str	r3, [r7, #96]	; 0x60
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e3a:	643a      	str	r2, [r7, #64]	; 0x40
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e5      	bne.n	8003e1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a33      	ldr	r2, [pc, #204]	; (8003f34 <UART_RxISR_16BIT+0x1b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01f      	beq.n	8003eac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d12e      	bne.n	8003f12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0310 	bic.w	r3, r3, #16
 8003ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d103      	bne.n	8003f02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff f830 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f10:	e00b      	b.n	8003f2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc fd44 	bl	80009a0 <HAL_UART_RxCpltCallback>
}
 8003f18:	e007      	b.n	8003f2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	619a      	str	r2, [r3, #24]
}
 8003f2a:	bf00      	nop
 8003f2c:	3770      	adds	r7, #112	; 0x70
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40008000 	.word	0x40008000

08003f38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0ac      	sub	sp, #176	; 0xb0
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f46:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6e:	2b22      	cmp	r3, #34	; 0x22
 8003f70:	f040 8182 	bne.w	8004278 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f7a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f7e:	e125      	b.n	80041cc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003f8e:	b2d9      	uxtb	r1, r3
 8003f90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d053      	beq.n	800407a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <UART_RxISR_8BIT_FIFOEN+0xca>
 8003fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800400e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2202      	movs	r2, #2
 8004020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800403e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2204      	movs	r2, #4
 8004050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f043 0202 	orr.w	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fe ff75 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 80a2 	bne.w	80041cc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040ac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80040b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80040b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e4      	bne.n	8004088 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80040e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80040ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80040f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e1      	bne.n	80040be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5f      	ldr	r2, [pc, #380]	; (8004290 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d021      	beq.n	800415c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01a      	beq.n	800415c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800413a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004148:	657b      	str	r3, [r7, #84]	; 0x54
 800414a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800414e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e4      	bne.n	8004126 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d130      	bne.n	80041c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418c:	643b      	str	r3, [r7, #64]	; 0x40
 800418e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e4      	bne.n	800416a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d103      	bne.n	80041b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fe fed6 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
 80041c4:	e002      	b.n	80041cc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fbea 	bl	80009a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80041d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f47f aecf 	bne.w	8003f80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d049      	beq.n	8004288 <UART_RxISR_8BIT_FIFOEN+0x350>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80041fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80041fe:	429a      	cmp	r2, r3
 8004200:	d242      	bcs.n	8004288 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	61fb      	str	r3, [r7, #28]
   return(result);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800423e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	60bb      	str	r3, [r7, #8]
   return(result);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e4      	bne.n	8004240 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004276:	e007      	b.n	8004288 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]
}
 8004288:	bf00      	nop
 800428a:	37b0      	adds	r7, #176	; 0xb0
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40008000 	.word	0x40008000
 8004294:	08003bc9 	.word	0x08003bc9

08004298 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b0ae      	sub	sp, #184	; 0xb8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	f040 8186 	bne.w	80045e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042de:	e129      	b.n	8004534 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80042f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80042f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004302:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800432a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d053      	beq.n	80043de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2202      	movs	r2, #2
 8004384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f043 0204 	orr.w	r2, r3, #4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80043a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2204      	movs	r2, #4
 80043b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f043 0202 	orr.w	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe fdc3 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 80a4 	bne.w	8004534 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800440e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004412:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e2      	bne.n	80043ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800444e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004450:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800445c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e1      	bne.n	8004426 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5f      	ldr	r2, [pc, #380]	; (80045f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d021      	beq.n	80044c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01a      	beq.n	80044c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e4      	bne.n	800448e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d130      	bne.n	800452e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
 80044f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e4      	bne.n	80044d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d103      	bne.n	800451e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2210      	movs	r2, #16
 800451c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe fd22 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
 800452c:	e002      	b.n	8004534 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fa36 	bl	80009a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004534:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800453c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f aecb 	bne.w	80042e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004550:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004554:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004558:	2b00      	cmp	r3, #0
 800455a:	d049      	beq.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004562:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004566:	429a      	cmp	r2, r3
 8004568:	d242      	bcs.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	623b      	str	r3, [r7, #32]
   return(result);
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800458e:	633a      	str	r2, [r7, #48]	; 0x30
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e3      	bne.n	800456a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80045a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f043 0320 	orr.w	r3, r3, #32
 80045bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	617b      	str	r3, [r7, #20]
   return(result);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e4      	bne.n	80045a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045de:	e007      	b.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	619a      	str	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	37b8      	adds	r7, #184	; 0xb8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40008000 	.word	0x40008000
 80045fc:	08003d81 	.word	0x08003d81

08004600 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_UARTEx_DisableFifoMode+0x16>
 800464e:	2302      	movs	r3, #2
 8004650:	e027      	b.n	80046a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	; 0x24
 800465e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e02d      	b.n	8004722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2224      	movs	r2, #36	; 0x24
 80046d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f850 	bl	80047a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800473e:	2302      	movs	r3, #2
 8004740:	e02d      	b.n	800479e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2224      	movs	r2, #36	; 0x24
 800474e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f812 	bl	80047a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047c8:	e031      	b.n	800482e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ca:	2308      	movs	r3, #8
 80047cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047ce:	2308      	movs	r3, #8
 80047d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0e5b      	lsrs	r3, r3, #25
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	0f5b      	lsrs	r3, r3, #29
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047f2:	7bbb      	ldrb	r3, [r7, #14]
 80047f4:	7b3a      	ldrb	r2, [r7, #12]
 80047f6:	4911      	ldr	r1, [pc, #68]	; (800483c <UARTEx_SetNbDataToProcess+0x94>)
 80047f8:	5c8a      	ldrb	r2, [r1, r2]
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047fe:	7b3a      	ldrb	r2, [r7, #12]
 8004800:	490f      	ldr	r1, [pc, #60]	; (8004840 <UARTEx_SetNbDataToProcess+0x98>)
 8004802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004804:	fb93 f3f2 	sdiv	r3, r3, r2
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	7b7a      	ldrb	r2, [r7, #13]
 8004814:	4909      	ldr	r1, [pc, #36]	; (800483c <UARTEx_SetNbDataToProcess+0x94>)
 8004816:	5c8a      	ldrb	r2, [r1, r2]
 8004818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800481c:	7b7a      	ldrb	r2, [r7, #13]
 800481e:	4908      	ldr	r1, [pc, #32]	; (8004840 <UARTEx_SetNbDataToProcess+0x98>)
 8004820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004822:	fb93 f3f2 	sdiv	r3, r3, r2
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	0800589c 	.word	0x0800589c
 8004840:	080058a4 	.word	0x080058a4

08004844 <__errno>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <__errno+0x8>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4d0d      	ldr	r5, [pc, #52]	; (8004888 <__libc_init_array+0x38>)
 8004854:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	2600      	movs	r6, #0
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	4d0b      	ldr	r5, [pc, #44]	; (8004890 <__libc_init_array+0x40>)
 8004862:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x44>)
 8004864:	f000 ffec 	bl	8005840 <_init>
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	2600      	movs	r6, #0
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f855 3b04 	ldr.w	r3, [r5], #4
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	0800594c 	.word	0x0800594c
 800488c:	0800594c 	.word	0x0800594c
 8004890:	0800594c 	.word	0x0800594c
 8004894:	08005950 	.word	0x08005950

08004898 <memset>:
 8004898:	4402      	add	r2, r0
 800489a:	4603      	mov	r3, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <iprintf>:
 80048a8:	b40f      	push	{r0, r1, r2, r3}
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <iprintf+0x2c>)
 80048ac:	b513      	push	{r0, r1, r4, lr}
 80048ae:	681c      	ldr	r4, [r3, #0]
 80048b0:	b124      	cbz	r4, 80048bc <iprintf+0x14>
 80048b2:	69a3      	ldr	r3, [r4, #24]
 80048b4:	b913      	cbnz	r3, 80048bc <iprintf+0x14>
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fa5e 	bl	8004d78 <__sinit>
 80048bc:	ab05      	add	r3, sp, #20
 80048be:	9a04      	ldr	r2, [sp, #16]
 80048c0:	68a1      	ldr	r1, [r4, #8]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 fc2f 	bl	8005128 <_vfiprintf_r>
 80048ca:	b002      	add	sp, #8
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d0:	b004      	add	sp, #16
 80048d2:	4770      	bx	lr
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <_puts_r>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	460e      	mov	r6, r1
 80048dc:	4605      	mov	r5, r0
 80048de:	b118      	cbz	r0, 80048e8 <_puts_r+0x10>
 80048e0:	6983      	ldr	r3, [r0, #24]
 80048e2:	b90b      	cbnz	r3, 80048e8 <_puts_r+0x10>
 80048e4:	f000 fa48 	bl	8004d78 <__sinit>
 80048e8:	69ab      	ldr	r3, [r5, #24]
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	b913      	cbnz	r3, 80048f4 <_puts_r+0x1c>
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 fa42 	bl	8004d78 <__sinit>
 80048f4:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <_puts_r+0xd0>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d120      	bne.n	800493c <_puts_r+0x64>
 80048fa:	686c      	ldr	r4, [r5, #4]
 80048fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048fe:	07db      	lsls	r3, r3, #31
 8004900:	d405      	bmi.n	800490e <_puts_r+0x36>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	0598      	lsls	r0, r3, #22
 8004906:	d402      	bmi.n	800490e <_puts_r+0x36>
 8004908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490a:	f000 fad3 	bl	8004eb4 <__retarget_lock_acquire_recursive>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	0719      	lsls	r1, r3, #28
 8004912:	d51d      	bpl.n	8004950 <_puts_r+0x78>
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	b1db      	cbz	r3, 8004950 <_puts_r+0x78>
 8004918:	3e01      	subs	r6, #1
 800491a:	68a3      	ldr	r3, [r4, #8]
 800491c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004920:	3b01      	subs	r3, #1
 8004922:	60a3      	str	r3, [r4, #8]
 8004924:	bb39      	cbnz	r1, 8004976 <_puts_r+0x9e>
 8004926:	2b00      	cmp	r3, #0
 8004928:	da38      	bge.n	800499c <_puts_r+0xc4>
 800492a:	4622      	mov	r2, r4
 800492c:	210a      	movs	r1, #10
 800492e:	4628      	mov	r0, r5
 8004930:	f000 f848 	bl	80049c4 <__swbuf_r>
 8004934:	3001      	adds	r0, #1
 8004936:	d011      	beq.n	800495c <_puts_r+0x84>
 8004938:	250a      	movs	r5, #10
 800493a:	e011      	b.n	8004960 <_puts_r+0x88>
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <_puts_r+0xd4>)
 800493e:	429c      	cmp	r4, r3
 8004940:	d101      	bne.n	8004946 <_puts_r+0x6e>
 8004942:	68ac      	ldr	r4, [r5, #8]
 8004944:	e7da      	b.n	80048fc <_puts_r+0x24>
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <_puts_r+0xd8>)
 8004948:	429c      	cmp	r4, r3
 800494a:	bf08      	it	eq
 800494c:	68ec      	ldreq	r4, [r5, #12]
 800494e:	e7d5      	b.n	80048fc <_puts_r+0x24>
 8004950:	4621      	mov	r1, r4
 8004952:	4628      	mov	r0, r5
 8004954:	f000 f888 	bl	8004a68 <__swsetup_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	d0dd      	beq.n	8004918 <_puts_r+0x40>
 800495c:	f04f 35ff 	mov.w	r5, #4294967295
 8004960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004962:	07da      	lsls	r2, r3, #31
 8004964:	d405      	bmi.n	8004972 <_puts_r+0x9a>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	059b      	lsls	r3, r3, #22
 800496a:	d402      	bmi.n	8004972 <_puts_r+0x9a>
 800496c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800496e:	f000 faa2 	bl	8004eb6 <__retarget_lock_release_recursive>
 8004972:	4628      	mov	r0, r5
 8004974:	bd70      	pop	{r4, r5, r6, pc}
 8004976:	2b00      	cmp	r3, #0
 8004978:	da04      	bge.n	8004984 <_puts_r+0xac>
 800497a:	69a2      	ldr	r2, [r4, #24]
 800497c:	429a      	cmp	r2, r3
 800497e:	dc06      	bgt.n	800498e <_puts_r+0xb6>
 8004980:	290a      	cmp	r1, #10
 8004982:	d004      	beq.n	800498e <_puts_r+0xb6>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	6022      	str	r2, [r4, #0]
 800498a:	7019      	strb	r1, [r3, #0]
 800498c:	e7c5      	b.n	800491a <_puts_r+0x42>
 800498e:	4622      	mov	r2, r4
 8004990:	4628      	mov	r0, r5
 8004992:	f000 f817 	bl	80049c4 <__swbuf_r>
 8004996:	3001      	adds	r0, #1
 8004998:	d1bf      	bne.n	800491a <_puts_r+0x42>
 800499a:	e7df      	b.n	800495c <_puts_r+0x84>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	250a      	movs	r5, #10
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	701d      	strb	r5, [r3, #0]
 80049a6:	e7db      	b.n	8004960 <_puts_r+0x88>
 80049a8:	080058d0 	.word	0x080058d0
 80049ac:	080058f0 	.word	0x080058f0
 80049b0:	080058b0 	.word	0x080058b0

080049b4 <puts>:
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <puts+0xc>)
 80049b6:	4601      	mov	r1, r0
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	f7ff bf8d 	b.w	80048d8 <_puts_r>
 80049be:	bf00      	nop
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <__swbuf_r>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	460e      	mov	r6, r1
 80049c8:	4614      	mov	r4, r2
 80049ca:	4605      	mov	r5, r0
 80049cc:	b118      	cbz	r0, 80049d6 <__swbuf_r+0x12>
 80049ce:	6983      	ldr	r3, [r0, #24]
 80049d0:	b90b      	cbnz	r3, 80049d6 <__swbuf_r+0x12>
 80049d2:	f000 f9d1 	bl	8004d78 <__sinit>
 80049d6:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <__swbuf_r+0x98>)
 80049d8:	429c      	cmp	r4, r3
 80049da:	d12b      	bne.n	8004a34 <__swbuf_r+0x70>
 80049dc:	686c      	ldr	r4, [r5, #4]
 80049de:	69a3      	ldr	r3, [r4, #24]
 80049e0:	60a3      	str	r3, [r4, #8]
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	071a      	lsls	r2, r3, #28
 80049e6:	d52f      	bpl.n	8004a48 <__swbuf_r+0x84>
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	b36b      	cbz	r3, 8004a48 <__swbuf_r+0x84>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	1ac0      	subs	r0, r0, r3
 80049f2:	6963      	ldr	r3, [r4, #20]
 80049f4:	b2f6      	uxtb	r6, r6
 80049f6:	4283      	cmp	r3, r0
 80049f8:	4637      	mov	r7, r6
 80049fa:	dc04      	bgt.n	8004a06 <__swbuf_r+0x42>
 80049fc:	4621      	mov	r1, r4
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f926 	bl	8004c50 <_fflush_r>
 8004a04:	bb30      	cbnz	r0, 8004a54 <__swbuf_r+0x90>
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60a3      	str	r3, [r4, #8]
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	6022      	str	r2, [r4, #0]
 8004a12:	701e      	strb	r6, [r3, #0]
 8004a14:	6963      	ldr	r3, [r4, #20]
 8004a16:	3001      	adds	r0, #1
 8004a18:	4283      	cmp	r3, r0
 8004a1a:	d004      	beq.n	8004a26 <__swbuf_r+0x62>
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	07db      	lsls	r3, r3, #31
 8004a20:	d506      	bpl.n	8004a30 <__swbuf_r+0x6c>
 8004a22:	2e0a      	cmp	r6, #10
 8004a24:	d104      	bne.n	8004a30 <__swbuf_r+0x6c>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f911 	bl	8004c50 <_fflush_r>
 8004a2e:	b988      	cbnz	r0, 8004a54 <__swbuf_r+0x90>
 8004a30:	4638      	mov	r0, r7
 8004a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <__swbuf_r+0x9c>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d101      	bne.n	8004a3e <__swbuf_r+0x7a>
 8004a3a:	68ac      	ldr	r4, [r5, #8]
 8004a3c:	e7cf      	b.n	80049de <__swbuf_r+0x1a>
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <__swbuf_r+0xa0>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	bf08      	it	eq
 8004a44:	68ec      	ldreq	r4, [r5, #12]
 8004a46:	e7ca      	b.n	80049de <__swbuf_r+0x1a>
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 f80c 	bl	8004a68 <__swsetup_r>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d0cb      	beq.n	80049ec <__swbuf_r+0x28>
 8004a54:	f04f 37ff 	mov.w	r7, #4294967295
 8004a58:	e7ea      	b.n	8004a30 <__swbuf_r+0x6c>
 8004a5a:	bf00      	nop
 8004a5c:	080058d0 	.word	0x080058d0
 8004a60:	080058f0 	.word	0x080058f0
 8004a64:	080058b0 	.word	0x080058b0

08004a68 <__swsetup_r>:
 8004a68:	4b32      	ldr	r3, [pc, #200]	; (8004b34 <__swsetup_r+0xcc>)
 8004a6a:	b570      	push	{r4, r5, r6, lr}
 8004a6c:	681d      	ldr	r5, [r3, #0]
 8004a6e:	4606      	mov	r6, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	b125      	cbz	r5, 8004a7e <__swsetup_r+0x16>
 8004a74:	69ab      	ldr	r3, [r5, #24]
 8004a76:	b913      	cbnz	r3, 8004a7e <__swsetup_r+0x16>
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 f97d 	bl	8004d78 <__sinit>
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <__swsetup_r+0xd0>)
 8004a80:	429c      	cmp	r4, r3
 8004a82:	d10f      	bne.n	8004aa4 <__swsetup_r+0x3c>
 8004a84:	686c      	ldr	r4, [r5, #4]
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a8c:	0719      	lsls	r1, r3, #28
 8004a8e:	d42c      	bmi.n	8004aea <__swsetup_r+0x82>
 8004a90:	06dd      	lsls	r5, r3, #27
 8004a92:	d411      	bmi.n	8004ab8 <__swsetup_r+0x50>
 8004a94:	2309      	movs	r3, #9
 8004a96:	6033      	str	r3, [r6, #0]
 8004a98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e03e      	b.n	8004b22 <__swsetup_r+0xba>
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <__swsetup_r+0xd4>)
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d101      	bne.n	8004aae <__swsetup_r+0x46>
 8004aaa:	68ac      	ldr	r4, [r5, #8]
 8004aac:	e7eb      	b.n	8004a86 <__swsetup_r+0x1e>
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <__swsetup_r+0xd8>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	bf08      	it	eq
 8004ab4:	68ec      	ldreq	r4, [r5, #12]
 8004ab6:	e7e6      	b.n	8004a86 <__swsetup_r+0x1e>
 8004ab8:	0758      	lsls	r0, r3, #29
 8004aba:	d512      	bpl.n	8004ae2 <__swsetup_r+0x7a>
 8004abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abe:	b141      	cbz	r1, 8004ad2 <__swsetup_r+0x6a>
 8004ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d002      	beq.n	8004ace <__swsetup_r+0x66>
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 fa59 	bl	8004f80 <_free_r>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	6063      	str	r3, [r4, #4]
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	f043 0308 	orr.w	r3, r3, #8
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	b94b      	cbnz	r3, 8004b02 <__swsetup_r+0x9a>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af8:	d003      	beq.n	8004b02 <__swsetup_r+0x9a>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 f9ff 	bl	8004f00 <__smakebuf_r>
 8004b02:	89a0      	ldrh	r0, [r4, #12]
 8004b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b08:	f010 0301 	ands.w	r3, r0, #1
 8004b0c:	d00a      	beq.n	8004b24 <__swsetup_r+0xbc>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60a3      	str	r3, [r4, #8]
 8004b12:	6963      	ldr	r3, [r4, #20]
 8004b14:	425b      	negs	r3, r3
 8004b16:	61a3      	str	r3, [r4, #24]
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	b943      	cbnz	r3, 8004b2e <__swsetup_r+0xc6>
 8004b1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b20:	d1ba      	bne.n	8004a98 <__swsetup_r+0x30>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	0781      	lsls	r1, r0, #30
 8004b26:	bf58      	it	pl
 8004b28:	6963      	ldrpl	r3, [r4, #20]
 8004b2a:	60a3      	str	r3, [r4, #8]
 8004b2c:	e7f4      	b.n	8004b18 <__swsetup_r+0xb0>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e7f7      	b.n	8004b22 <__swsetup_r+0xba>
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c
 8004b38:	080058d0 	.word	0x080058d0
 8004b3c:	080058f0 	.word	0x080058f0
 8004b40:	080058b0 	.word	0x080058b0

08004b44 <__sflush_r>:
 8004b44:	898a      	ldrh	r2, [r1, #12]
 8004b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	0710      	lsls	r0, r2, #28
 8004b4e:	460c      	mov	r4, r1
 8004b50:	d458      	bmi.n	8004c04 <__sflush_r+0xc0>
 8004b52:	684b      	ldr	r3, [r1, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dc05      	bgt.n	8004b64 <__sflush_r+0x20>
 8004b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	dc02      	bgt.n	8004b64 <__sflush_r+0x20>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	d0f9      	beq.n	8004b5e <__sflush_r+0x1a>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b70:	682f      	ldr	r7, [r5, #0]
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	d032      	beq.n	8004bdc <__sflush_r+0x98>
 8004b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	075a      	lsls	r2, r3, #29
 8004b7c:	d505      	bpl.n	8004b8a <__sflush_r+0x46>
 8004b7e:	6863      	ldr	r3, [r4, #4]
 8004b80:	1ac0      	subs	r0, r0, r3
 8004b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b84:	b10b      	cbz	r3, 8004b8a <__sflush_r+0x46>
 8004b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b88:	1ac0      	subs	r0, r0, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b0      	blx	r6
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	d106      	bne.n	8004baa <__sflush_r+0x66>
 8004b9c:	6829      	ldr	r1, [r5, #0]
 8004b9e:	291d      	cmp	r1, #29
 8004ba0:	d82c      	bhi.n	8004bfc <__sflush_r+0xb8>
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <__sflush_r+0x108>)
 8004ba4:	40ca      	lsrs	r2, r1
 8004ba6:	07d6      	lsls	r6, r2, #31
 8004ba8:	d528      	bpl.n	8004bfc <__sflush_r+0xb8>
 8004baa:	2200      	movs	r2, #0
 8004bac:	6062      	str	r2, [r4, #4]
 8004bae:	04d9      	lsls	r1, r3, #19
 8004bb0:	6922      	ldr	r2, [r4, #16]
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	d504      	bpl.n	8004bc0 <__sflush_r+0x7c>
 8004bb6:	1c42      	adds	r2, r0, #1
 8004bb8:	d101      	bne.n	8004bbe <__sflush_r+0x7a>
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	b903      	cbnz	r3, 8004bc0 <__sflush_r+0x7c>
 8004bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8004bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bc2:	602f      	str	r7, [r5, #0]
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	d0ca      	beq.n	8004b5e <__sflush_r+0x1a>
 8004bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	d002      	beq.n	8004bd6 <__sflush_r+0x92>
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f000 f9d5 	bl	8004f80 <_free_r>
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8004bda:	e7c1      	b.n	8004b60 <__sflush_r+0x1c>
 8004bdc:	6a21      	ldr	r1, [r4, #32]
 8004bde:	2301      	movs	r3, #1
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b0      	blx	r6
 8004be4:	1c41      	adds	r1, r0, #1
 8004be6:	d1c7      	bne.n	8004b78 <__sflush_r+0x34>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0c4      	beq.n	8004b78 <__sflush_r+0x34>
 8004bee:	2b1d      	cmp	r3, #29
 8004bf0:	d001      	beq.n	8004bf6 <__sflush_r+0xb2>
 8004bf2:	2b16      	cmp	r3, #22
 8004bf4:	d101      	bne.n	8004bfa <__sflush_r+0xb6>
 8004bf6:	602f      	str	r7, [r5, #0]
 8004bf8:	e7b1      	b.n	8004b5e <__sflush_r+0x1a>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c00:	81a3      	strh	r3, [r4, #12]
 8004c02:	e7ad      	b.n	8004b60 <__sflush_r+0x1c>
 8004c04:	690f      	ldr	r7, [r1, #16]
 8004c06:	2f00      	cmp	r7, #0
 8004c08:	d0a9      	beq.n	8004b5e <__sflush_r+0x1a>
 8004c0a:	0793      	lsls	r3, r2, #30
 8004c0c:	680e      	ldr	r6, [r1, #0]
 8004c0e:	bf08      	it	eq
 8004c10:	694b      	ldreq	r3, [r1, #20]
 8004c12:	600f      	str	r7, [r1, #0]
 8004c14:	bf18      	it	ne
 8004c16:	2300      	movne	r3, #0
 8004c18:	eba6 0807 	sub.w	r8, r6, r7
 8004c1c:	608b      	str	r3, [r1, #8]
 8004c1e:	f1b8 0f00 	cmp.w	r8, #0
 8004c22:	dd9c      	ble.n	8004b5e <__sflush_r+0x1a>
 8004c24:	6a21      	ldr	r1, [r4, #32]
 8004c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c28:	4643      	mov	r3, r8
 8004c2a:	463a      	mov	r2, r7
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b0      	blx	r6
 8004c30:	2800      	cmp	r0, #0
 8004c32:	dc06      	bgt.n	8004c42 <__sflush_r+0xfe>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	e78e      	b.n	8004b60 <__sflush_r+0x1c>
 8004c42:	4407      	add	r7, r0
 8004c44:	eba8 0800 	sub.w	r8, r8, r0
 8004c48:	e7e9      	b.n	8004c1e <__sflush_r+0xda>
 8004c4a:	bf00      	nop
 8004c4c:	20400001 	.word	0x20400001

08004c50 <_fflush_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	690b      	ldr	r3, [r1, #16]
 8004c54:	4605      	mov	r5, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	b913      	cbnz	r3, 8004c60 <_fflush_r+0x10>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	b118      	cbz	r0, 8004c6a <_fflush_r+0x1a>
 8004c62:	6983      	ldr	r3, [r0, #24]
 8004c64:	b90b      	cbnz	r3, 8004c6a <_fflush_r+0x1a>
 8004c66:	f000 f887 	bl	8004d78 <__sinit>
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <_fflush_r+0x6c>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d11b      	bne.n	8004ca8 <_fflush_r+0x58>
 8004c70:	686c      	ldr	r4, [r5, #4]
 8004c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ef      	beq.n	8004c5a <_fflush_r+0xa>
 8004c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c7c:	07d0      	lsls	r0, r2, #31
 8004c7e:	d404      	bmi.n	8004c8a <_fflush_r+0x3a>
 8004c80:	0599      	lsls	r1, r3, #22
 8004c82:	d402      	bmi.n	8004c8a <_fflush_r+0x3a>
 8004c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c86:	f000 f915 	bl	8004eb4 <__retarget_lock_acquire_recursive>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	f7ff ff59 	bl	8004b44 <__sflush_r>
 8004c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c94:	07da      	lsls	r2, r3, #31
 8004c96:	4605      	mov	r5, r0
 8004c98:	d4e0      	bmi.n	8004c5c <_fflush_r+0xc>
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	059b      	lsls	r3, r3, #22
 8004c9e:	d4dd      	bmi.n	8004c5c <_fflush_r+0xc>
 8004ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca2:	f000 f908 	bl	8004eb6 <__retarget_lock_release_recursive>
 8004ca6:	e7d9      	b.n	8004c5c <_fflush_r+0xc>
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <_fflush_r+0x70>)
 8004caa:	429c      	cmp	r4, r3
 8004cac:	d101      	bne.n	8004cb2 <_fflush_r+0x62>
 8004cae:	68ac      	ldr	r4, [r5, #8]
 8004cb0:	e7df      	b.n	8004c72 <_fflush_r+0x22>
 8004cb2:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <_fflush_r+0x74>)
 8004cb4:	429c      	cmp	r4, r3
 8004cb6:	bf08      	it	eq
 8004cb8:	68ec      	ldreq	r4, [r5, #12]
 8004cba:	e7da      	b.n	8004c72 <_fflush_r+0x22>
 8004cbc:	080058d0 	.word	0x080058d0
 8004cc0:	080058f0 	.word	0x080058f0
 8004cc4:	080058b0 	.word	0x080058b0

08004cc8 <std>:
 8004cc8:	2300      	movs	r3, #0
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	4604      	mov	r4, r0
 8004cce:	e9c0 3300 	strd	r3, r3, [r0]
 8004cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cd6:	6083      	str	r3, [r0, #8]
 8004cd8:	8181      	strh	r1, [r0, #12]
 8004cda:	6643      	str	r3, [r0, #100]	; 0x64
 8004cdc:	81c2      	strh	r2, [r0, #14]
 8004cde:	6183      	str	r3, [r0, #24]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	305c      	adds	r0, #92	; 0x5c
 8004ce6:	f7ff fdd7 	bl	8004898 <memset>
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <std+0x38>)
 8004cec:	6263      	str	r3, [r4, #36]	; 0x24
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <std+0x3c>)
 8004cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <std+0x40>)
 8004cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <std+0x44>)
 8004cf8:	6224      	str	r4, [r4, #32]
 8004cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	bf00      	nop
 8004d00:	080056d1 	.word	0x080056d1
 8004d04:	080056f3 	.word	0x080056f3
 8004d08:	0800572b 	.word	0x0800572b
 8004d0c:	0800574f 	.word	0x0800574f

08004d10 <_cleanup_r>:
 8004d10:	4901      	ldr	r1, [pc, #4]	; (8004d18 <_cleanup_r+0x8>)
 8004d12:	f000 b8af 	b.w	8004e74 <_fwalk_reent>
 8004d16:	bf00      	nop
 8004d18:	08004c51 	.word	0x08004c51

08004d1c <__sfmoreglue>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	1e4a      	subs	r2, r1, #1
 8004d20:	2568      	movs	r5, #104	; 0x68
 8004d22:	4355      	muls	r5, r2
 8004d24:	460e      	mov	r6, r1
 8004d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d2a:	f000 f979 	bl	8005020 <_malloc_r>
 8004d2e:	4604      	mov	r4, r0
 8004d30:	b140      	cbz	r0, 8004d44 <__sfmoreglue+0x28>
 8004d32:	2100      	movs	r1, #0
 8004d34:	e9c0 1600 	strd	r1, r6, [r0]
 8004d38:	300c      	adds	r0, #12
 8004d3a:	60a0      	str	r0, [r4, #8]
 8004d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d40:	f7ff fdaa 	bl	8004898 <memset>
 8004d44:	4620      	mov	r0, r4
 8004d46:	bd70      	pop	{r4, r5, r6, pc}

08004d48 <__sfp_lock_acquire>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <__sfp_lock_acquire+0x8>)
 8004d4a:	f000 b8b3 	b.w	8004eb4 <__retarget_lock_acquire_recursive>
 8004d4e:	bf00      	nop
 8004d50:	200003a0 	.word	0x200003a0

08004d54 <__sfp_lock_release>:
 8004d54:	4801      	ldr	r0, [pc, #4]	; (8004d5c <__sfp_lock_release+0x8>)
 8004d56:	f000 b8ae 	b.w	8004eb6 <__retarget_lock_release_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	200003a0 	.word	0x200003a0

08004d60 <__sinit_lock_acquire>:
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <__sinit_lock_acquire+0x8>)
 8004d62:	f000 b8a7 	b.w	8004eb4 <__retarget_lock_acquire_recursive>
 8004d66:	bf00      	nop
 8004d68:	2000039b 	.word	0x2000039b

08004d6c <__sinit_lock_release>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__sinit_lock_release+0x8>)
 8004d6e:	f000 b8a2 	b.w	8004eb6 <__retarget_lock_release_recursive>
 8004d72:	bf00      	nop
 8004d74:	2000039b 	.word	0x2000039b

08004d78 <__sinit>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	f7ff fff0 	bl	8004d60 <__sinit_lock_acquire>
 8004d80:	69a3      	ldr	r3, [r4, #24]
 8004d82:	b11b      	cbz	r3, 8004d8c <__sinit+0x14>
 8004d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d88:	f7ff bff0 	b.w	8004d6c <__sinit_lock_release>
 8004d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d90:	6523      	str	r3, [r4, #80]	; 0x50
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <__sinit+0x68>)
 8004d94:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <__sinit+0x6c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	bf04      	itt	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	61a3      	streq	r3, [r4, #24]
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f820 	bl	8004de8 <__sfp>
 8004da8:	6060      	str	r0, [r4, #4]
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f81c 	bl	8004de8 <__sfp>
 8004db0:	60a0      	str	r0, [r4, #8]
 8004db2:	4620      	mov	r0, r4
 8004db4:	f000 f818 	bl	8004de8 <__sfp>
 8004db8:	2200      	movs	r2, #0
 8004dba:	60e0      	str	r0, [r4, #12]
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	6860      	ldr	r0, [r4, #4]
 8004dc0:	f7ff ff82 	bl	8004cc8 <std>
 8004dc4:	68a0      	ldr	r0, [r4, #8]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2109      	movs	r1, #9
 8004dca:	f7ff ff7d 	bl	8004cc8 <std>
 8004dce:	68e0      	ldr	r0, [r4, #12]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	2112      	movs	r1, #18
 8004dd4:	f7ff ff78 	bl	8004cc8 <std>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	61a3      	str	r3, [r4, #24]
 8004ddc:	e7d2      	b.n	8004d84 <__sinit+0xc>
 8004dde:	bf00      	nop
 8004de0:	080058ac 	.word	0x080058ac
 8004de4:	08004d11 	.word	0x08004d11

08004de8 <__sfp>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	4607      	mov	r7, r0
 8004dec:	f7ff ffac 	bl	8004d48 <__sfp_lock_acquire>
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <__sfp+0x84>)
 8004df2:	681e      	ldr	r6, [r3, #0]
 8004df4:	69b3      	ldr	r3, [r6, #24]
 8004df6:	b913      	cbnz	r3, 8004dfe <__sfp+0x16>
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f7ff ffbd 	bl	8004d78 <__sinit>
 8004dfe:	3648      	adds	r6, #72	; 0x48
 8004e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	d503      	bpl.n	8004e10 <__sfp+0x28>
 8004e08:	6833      	ldr	r3, [r6, #0]
 8004e0a:	b30b      	cbz	r3, 8004e50 <__sfp+0x68>
 8004e0c:	6836      	ldr	r6, [r6, #0]
 8004e0e:	e7f7      	b.n	8004e00 <__sfp+0x18>
 8004e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e14:	b9d5      	cbnz	r5, 8004e4c <__sfp+0x64>
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <__sfp+0x88>)
 8004e18:	60e3      	str	r3, [r4, #12]
 8004e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e20:	f000 f847 	bl	8004eb2 <__retarget_lock_init_recursive>
 8004e24:	f7ff ff96 	bl	8004d54 <__sfp_lock_release>
 8004e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e30:	6025      	str	r5, [r4, #0]
 8004e32:	61a5      	str	r5, [r4, #24]
 8004e34:	2208      	movs	r2, #8
 8004e36:	4629      	mov	r1, r5
 8004e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e3c:	f7ff fd2c 	bl	8004898 <memset>
 8004e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	3468      	adds	r4, #104	; 0x68
 8004e4e:	e7d9      	b.n	8004e04 <__sfp+0x1c>
 8004e50:	2104      	movs	r1, #4
 8004e52:	4638      	mov	r0, r7
 8004e54:	f7ff ff62 	bl	8004d1c <__sfmoreglue>
 8004e58:	4604      	mov	r4, r0
 8004e5a:	6030      	str	r0, [r6, #0]
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d1d5      	bne.n	8004e0c <__sfp+0x24>
 8004e60:	f7ff ff78 	bl	8004d54 <__sfp_lock_release>
 8004e64:	230c      	movs	r3, #12
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	e7ee      	b.n	8004e48 <__sfp+0x60>
 8004e6a:	bf00      	nop
 8004e6c:	080058ac 	.word	0x080058ac
 8004e70:	ffff0001 	.word	0xffff0001

08004e74 <_fwalk_reent>:
 8004e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e78:	4606      	mov	r6, r0
 8004e7a:	4688      	mov	r8, r1
 8004e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e80:	2700      	movs	r7, #0
 8004e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e86:	f1b9 0901 	subs.w	r9, r9, #1
 8004e8a:	d505      	bpl.n	8004e98 <_fwalk_reent+0x24>
 8004e8c:	6824      	ldr	r4, [r4, #0]
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d1f7      	bne.n	8004e82 <_fwalk_reent+0xe>
 8004e92:	4638      	mov	r0, r7
 8004e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e98:	89ab      	ldrh	r3, [r5, #12]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d907      	bls.n	8004eae <_fwalk_reent+0x3a>
 8004e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	d003      	beq.n	8004eae <_fwalk_reent+0x3a>
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	47c0      	blx	r8
 8004eac:	4307      	orrs	r7, r0
 8004eae:	3568      	adds	r5, #104	; 0x68
 8004eb0:	e7e9      	b.n	8004e86 <_fwalk_reent+0x12>

08004eb2 <__retarget_lock_init_recursive>:
 8004eb2:	4770      	bx	lr

08004eb4 <__retarget_lock_acquire_recursive>:
 8004eb4:	4770      	bx	lr

08004eb6 <__retarget_lock_release_recursive>:
 8004eb6:	4770      	bx	lr

08004eb8 <__swhatbuf_r>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	460e      	mov	r6, r1
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	b096      	sub	sp, #88	; 0x58
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	461d      	mov	r5, r3
 8004ec8:	da07      	bge.n	8004eda <__swhatbuf_r+0x22>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	89b3      	ldrh	r3, [r6, #12]
 8004ed0:	061a      	lsls	r2, r3, #24
 8004ed2:	d410      	bmi.n	8004ef6 <__swhatbuf_r+0x3e>
 8004ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed8:	e00e      	b.n	8004ef8 <__swhatbuf_r+0x40>
 8004eda:	466a      	mov	r2, sp
 8004edc:	f000 fc5e 	bl	800579c <_fstat_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	dbf2      	blt.n	8004eca <__swhatbuf_r+0x12>
 8004ee4:	9a01      	ldr	r2, [sp, #4]
 8004ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004eee:	425a      	negs	r2, r3
 8004ef0:	415a      	adcs	r2, r3
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	e7ee      	b.n	8004ed4 <__swhatbuf_r+0x1c>
 8004ef6:	2340      	movs	r3, #64	; 0x40
 8004ef8:	2000      	movs	r0, #0
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	b016      	add	sp, #88	; 0x58
 8004efe:	bd70      	pop	{r4, r5, r6, pc}

08004f00 <__smakebuf_r>:
 8004f00:	898b      	ldrh	r3, [r1, #12]
 8004f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f04:	079d      	lsls	r5, r3, #30
 8004f06:	4606      	mov	r6, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	d507      	bpl.n	8004f1c <__smakebuf_r+0x1c>
 8004f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	6123      	str	r3, [r4, #16]
 8004f14:	2301      	movs	r3, #1
 8004f16:	6163      	str	r3, [r4, #20]
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	ab01      	add	r3, sp, #4
 8004f1e:	466a      	mov	r2, sp
 8004f20:	f7ff ffca 	bl	8004eb8 <__swhatbuf_r>
 8004f24:	9900      	ldr	r1, [sp, #0]
 8004f26:	4605      	mov	r5, r0
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f000 f879 	bl	8005020 <_malloc_r>
 8004f2e:	b948      	cbnz	r0, 8004f44 <__smakebuf_r+0x44>
 8004f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f34:	059a      	lsls	r2, r3, #22
 8004f36:	d4ef      	bmi.n	8004f18 <__smakebuf_r+0x18>
 8004f38:	f023 0303 	bic.w	r3, r3, #3
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	81a3      	strh	r3, [r4, #12]
 8004f42:	e7e3      	b.n	8004f0c <__smakebuf_r+0xc>
 8004f44:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <__smakebuf_r+0x7c>)
 8004f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	6020      	str	r0, [r4, #0]
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f50:	81a3      	strh	r3, [r4, #12]
 8004f52:	9b00      	ldr	r3, [sp, #0]
 8004f54:	6163      	str	r3, [r4, #20]
 8004f56:	9b01      	ldr	r3, [sp, #4]
 8004f58:	6120      	str	r0, [r4, #16]
 8004f5a:	b15b      	cbz	r3, 8004f74 <__smakebuf_r+0x74>
 8004f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f60:	4630      	mov	r0, r6
 8004f62:	f000 fc2d 	bl	80057c0 <_isatty_r>
 8004f66:	b128      	cbz	r0, 8004f74 <__smakebuf_r+0x74>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	89a0      	ldrh	r0, [r4, #12]
 8004f76:	4305      	orrs	r5, r0
 8004f78:	81a5      	strh	r5, [r4, #12]
 8004f7a:	e7cd      	b.n	8004f18 <__smakebuf_r+0x18>
 8004f7c:	08004d11 	.word	0x08004d11

08004f80 <_free_r>:
 8004f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f82:	2900      	cmp	r1, #0
 8004f84:	d048      	beq.n	8005018 <_free_r+0x98>
 8004f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8a:	9001      	str	r0, [sp, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f92:	bfb8      	it	lt
 8004f94:	18e4      	addlt	r4, r4, r3
 8004f96:	f000 fc35 	bl	8005804 <__malloc_lock>
 8004f9a:	4a20      	ldr	r2, [pc, #128]	; (800501c <_free_r+0x9c>)
 8004f9c:	9801      	ldr	r0, [sp, #4]
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	b933      	cbnz	r3, 8004fb2 <_free_r+0x32>
 8004fa4:	6063      	str	r3, [r4, #4]
 8004fa6:	6014      	str	r4, [r2, #0]
 8004fa8:	b003      	add	sp, #12
 8004faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fae:	f000 bc2f 	b.w	8005810 <__malloc_unlock>
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	d90b      	bls.n	8004fce <_free_r+0x4e>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	1862      	adds	r2, r4, r1
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	bf04      	itt	eq
 8004fbe:	681a      	ldreq	r2, [r3, #0]
 8004fc0:	685b      	ldreq	r3, [r3, #4]
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	bf04      	itt	eq
 8004fc6:	1852      	addeq	r2, r2, r1
 8004fc8:	6022      	streq	r2, [r4, #0]
 8004fca:	602c      	str	r4, [r5, #0]
 8004fcc:	e7ec      	b.n	8004fa8 <_free_r+0x28>
 8004fce:	461a      	mov	r2, r3
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b10b      	cbz	r3, 8004fd8 <_free_r+0x58>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d9fa      	bls.n	8004fce <_free_r+0x4e>
 8004fd8:	6811      	ldr	r1, [r2, #0]
 8004fda:	1855      	adds	r5, r2, r1
 8004fdc:	42a5      	cmp	r5, r4
 8004fde:	d10b      	bne.n	8004ff8 <_free_r+0x78>
 8004fe0:	6824      	ldr	r4, [r4, #0]
 8004fe2:	4421      	add	r1, r4
 8004fe4:	1854      	adds	r4, r2, r1
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	d1dd      	bne.n	8004fa8 <_free_r+0x28>
 8004fec:	681c      	ldr	r4, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	6053      	str	r3, [r2, #4]
 8004ff2:	4421      	add	r1, r4
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	e7d7      	b.n	8004fa8 <_free_r+0x28>
 8004ff8:	d902      	bls.n	8005000 <_free_r+0x80>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	6003      	str	r3, [r0, #0]
 8004ffe:	e7d3      	b.n	8004fa8 <_free_r+0x28>
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	1961      	adds	r1, r4, r5
 8005004:	428b      	cmp	r3, r1
 8005006:	bf04      	itt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	bf04      	itt	eq
 8005010:	1949      	addeq	r1, r1, r5
 8005012:	6021      	streq	r1, [r4, #0]
 8005014:	6054      	str	r4, [r2, #4]
 8005016:	e7c7      	b.n	8004fa8 <_free_r+0x28>
 8005018:	b003      	add	sp, #12
 800501a:	bd30      	pop	{r4, r5, pc}
 800501c:	20000198 	.word	0x20000198

08005020 <_malloc_r>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	1ccd      	adds	r5, r1, #3
 8005024:	f025 0503 	bic.w	r5, r5, #3
 8005028:	3508      	adds	r5, #8
 800502a:	2d0c      	cmp	r5, #12
 800502c:	bf38      	it	cc
 800502e:	250c      	movcc	r5, #12
 8005030:	2d00      	cmp	r5, #0
 8005032:	4606      	mov	r6, r0
 8005034:	db01      	blt.n	800503a <_malloc_r+0x1a>
 8005036:	42a9      	cmp	r1, r5
 8005038:	d903      	bls.n	8005042 <_malloc_r+0x22>
 800503a:	230c      	movs	r3, #12
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	2000      	movs	r0, #0
 8005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005042:	f000 fbdf 	bl	8005804 <__malloc_lock>
 8005046:	4921      	ldr	r1, [pc, #132]	; (80050cc <_malloc_r+0xac>)
 8005048:	680a      	ldr	r2, [r1, #0]
 800504a:	4614      	mov	r4, r2
 800504c:	b99c      	cbnz	r4, 8005076 <_malloc_r+0x56>
 800504e:	4f20      	ldr	r7, [pc, #128]	; (80050d0 <_malloc_r+0xb0>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	b923      	cbnz	r3, 800505e <_malloc_r+0x3e>
 8005054:	4621      	mov	r1, r4
 8005056:	4630      	mov	r0, r6
 8005058:	f000 fb2a 	bl	80056b0 <_sbrk_r>
 800505c:	6038      	str	r0, [r7, #0]
 800505e:	4629      	mov	r1, r5
 8005060:	4630      	mov	r0, r6
 8005062:	f000 fb25 	bl	80056b0 <_sbrk_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d123      	bne.n	80050b2 <_malloc_r+0x92>
 800506a:	230c      	movs	r3, #12
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	4630      	mov	r0, r6
 8005070:	f000 fbce 	bl	8005810 <__malloc_unlock>
 8005074:	e7e3      	b.n	800503e <_malloc_r+0x1e>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	1b5b      	subs	r3, r3, r5
 800507a:	d417      	bmi.n	80050ac <_malloc_r+0x8c>
 800507c:	2b0b      	cmp	r3, #11
 800507e:	d903      	bls.n	8005088 <_malloc_r+0x68>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	441c      	add	r4, r3
 8005084:	6025      	str	r5, [r4, #0]
 8005086:	e004      	b.n	8005092 <_malloc_r+0x72>
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	42a2      	cmp	r2, r4
 800508c:	bf0c      	ite	eq
 800508e:	600b      	streq	r3, [r1, #0]
 8005090:	6053      	strne	r3, [r2, #4]
 8005092:	4630      	mov	r0, r6
 8005094:	f000 fbbc 	bl	8005810 <__malloc_unlock>
 8005098:	f104 000b 	add.w	r0, r4, #11
 800509c:	1d23      	adds	r3, r4, #4
 800509e:	f020 0007 	bic.w	r0, r0, #7
 80050a2:	1ac2      	subs	r2, r0, r3
 80050a4:	d0cc      	beq.n	8005040 <_malloc_r+0x20>
 80050a6:	1a1b      	subs	r3, r3, r0
 80050a8:	50a3      	str	r3, [r4, r2]
 80050aa:	e7c9      	b.n	8005040 <_malloc_r+0x20>
 80050ac:	4622      	mov	r2, r4
 80050ae:	6864      	ldr	r4, [r4, #4]
 80050b0:	e7cc      	b.n	800504c <_malloc_r+0x2c>
 80050b2:	1cc4      	adds	r4, r0, #3
 80050b4:	f024 0403 	bic.w	r4, r4, #3
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d0e3      	beq.n	8005084 <_malloc_r+0x64>
 80050bc:	1a21      	subs	r1, r4, r0
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 faf6 	bl	80056b0 <_sbrk_r>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d1dd      	bne.n	8005084 <_malloc_r+0x64>
 80050c8:	e7cf      	b.n	800506a <_malloc_r+0x4a>
 80050ca:	bf00      	nop
 80050cc:	20000198 	.word	0x20000198
 80050d0:	2000019c 	.word	0x2000019c

080050d4 <__sfputc_r>:
 80050d4:	6893      	ldr	r3, [r2, #8]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	b410      	push	{r4}
 80050dc:	6093      	str	r3, [r2, #8]
 80050de:	da08      	bge.n	80050f2 <__sfputc_r+0x1e>
 80050e0:	6994      	ldr	r4, [r2, #24]
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	db01      	blt.n	80050ea <__sfputc_r+0x16>
 80050e6:	290a      	cmp	r1, #10
 80050e8:	d103      	bne.n	80050f2 <__sfputc_r+0x1e>
 80050ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ee:	f7ff bc69 	b.w	80049c4 <__swbuf_r>
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	1c58      	adds	r0, r3, #1
 80050f6:	6010      	str	r0, [r2, #0]
 80050f8:	7019      	strb	r1, [r3, #0]
 80050fa:	4608      	mov	r0, r1
 80050fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005100:	4770      	bx	lr

08005102 <__sfputs_r>:
 8005102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	4614      	mov	r4, r2
 800510a:	18d5      	adds	r5, r2, r3
 800510c:	42ac      	cmp	r4, r5
 800510e:	d101      	bne.n	8005114 <__sfputs_r+0x12>
 8005110:	2000      	movs	r0, #0
 8005112:	e007      	b.n	8005124 <__sfputs_r+0x22>
 8005114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005118:	463a      	mov	r2, r7
 800511a:	4630      	mov	r0, r6
 800511c:	f7ff ffda 	bl	80050d4 <__sfputc_r>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d1f3      	bne.n	800510c <__sfputs_r+0xa>
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005128 <_vfiprintf_r>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	460d      	mov	r5, r1
 800512e:	b09d      	sub	sp, #116	; 0x74
 8005130:	4614      	mov	r4, r2
 8005132:	4698      	mov	r8, r3
 8005134:	4606      	mov	r6, r0
 8005136:	b118      	cbz	r0, 8005140 <_vfiprintf_r+0x18>
 8005138:	6983      	ldr	r3, [r0, #24]
 800513a:	b90b      	cbnz	r3, 8005140 <_vfiprintf_r+0x18>
 800513c:	f7ff fe1c 	bl	8004d78 <__sinit>
 8005140:	4b89      	ldr	r3, [pc, #548]	; (8005368 <_vfiprintf_r+0x240>)
 8005142:	429d      	cmp	r5, r3
 8005144:	d11b      	bne.n	800517e <_vfiprintf_r+0x56>
 8005146:	6875      	ldr	r5, [r6, #4]
 8005148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	d405      	bmi.n	800515a <_vfiprintf_r+0x32>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	059a      	lsls	r2, r3, #22
 8005152:	d402      	bmi.n	800515a <_vfiprintf_r+0x32>
 8005154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005156:	f7ff fead 	bl	8004eb4 <__retarget_lock_acquire_recursive>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	071b      	lsls	r3, r3, #28
 800515e:	d501      	bpl.n	8005164 <_vfiprintf_r+0x3c>
 8005160:	692b      	ldr	r3, [r5, #16]
 8005162:	b9eb      	cbnz	r3, 80051a0 <_vfiprintf_r+0x78>
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f7ff fc7e 	bl	8004a68 <__swsetup_r>
 800516c:	b1c0      	cbz	r0, 80051a0 <_vfiprintf_r+0x78>
 800516e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005170:	07dc      	lsls	r4, r3, #31
 8005172:	d50e      	bpl.n	8005192 <_vfiprintf_r+0x6a>
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	b01d      	add	sp, #116	; 0x74
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	4b7b      	ldr	r3, [pc, #492]	; (800536c <_vfiprintf_r+0x244>)
 8005180:	429d      	cmp	r5, r3
 8005182:	d101      	bne.n	8005188 <_vfiprintf_r+0x60>
 8005184:	68b5      	ldr	r5, [r6, #8]
 8005186:	e7df      	b.n	8005148 <_vfiprintf_r+0x20>
 8005188:	4b79      	ldr	r3, [pc, #484]	; (8005370 <_vfiprintf_r+0x248>)
 800518a:	429d      	cmp	r5, r3
 800518c:	bf08      	it	eq
 800518e:	68f5      	ldreq	r5, [r6, #12]
 8005190:	e7da      	b.n	8005148 <_vfiprintf_r+0x20>
 8005192:	89ab      	ldrh	r3, [r5, #12]
 8005194:	0598      	lsls	r0, r3, #22
 8005196:	d4ed      	bmi.n	8005174 <_vfiprintf_r+0x4c>
 8005198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519a:	f7ff fe8c 	bl	8004eb6 <__retarget_lock_release_recursive>
 800519e:	e7e9      	b.n	8005174 <_vfiprintf_r+0x4c>
 80051a0:	2300      	movs	r3, #0
 80051a2:	9309      	str	r3, [sp, #36]	; 0x24
 80051a4:	2320      	movs	r3, #32
 80051a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ae:	2330      	movs	r3, #48	; 0x30
 80051b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005374 <_vfiprintf_r+0x24c>
 80051b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051b8:	f04f 0901 	mov.w	r9, #1
 80051bc:	4623      	mov	r3, r4
 80051be:	469a      	mov	sl, r3
 80051c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c4:	b10a      	cbz	r2, 80051ca <_vfiprintf_r+0xa2>
 80051c6:	2a25      	cmp	r2, #37	; 0x25
 80051c8:	d1f9      	bne.n	80051be <_vfiprintf_r+0x96>
 80051ca:	ebba 0b04 	subs.w	fp, sl, r4
 80051ce:	d00b      	beq.n	80051e8 <_vfiprintf_r+0xc0>
 80051d0:	465b      	mov	r3, fp
 80051d2:	4622      	mov	r2, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	4630      	mov	r0, r6
 80051d8:	f7ff ff93 	bl	8005102 <__sfputs_r>
 80051dc:	3001      	adds	r0, #1
 80051de:	f000 80aa 	beq.w	8005336 <_vfiprintf_r+0x20e>
 80051e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e4:	445a      	add	r2, fp
 80051e6:	9209      	str	r2, [sp, #36]	; 0x24
 80051e8:	f89a 3000 	ldrb.w	r3, [sl]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a2 	beq.w	8005336 <_vfiprintf_r+0x20e>
 80051f2:	2300      	movs	r3, #0
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051fc:	f10a 0a01 	add.w	sl, sl, #1
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	9307      	str	r3, [sp, #28]
 8005204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005208:	931a      	str	r3, [sp, #104]	; 0x68
 800520a:	4654      	mov	r4, sl
 800520c:	2205      	movs	r2, #5
 800520e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005212:	4858      	ldr	r0, [pc, #352]	; (8005374 <_vfiprintf_r+0x24c>)
 8005214:	f7fb f804 	bl	8000220 <memchr>
 8005218:	9a04      	ldr	r2, [sp, #16]
 800521a:	b9d8      	cbnz	r0, 8005254 <_vfiprintf_r+0x12c>
 800521c:	06d1      	lsls	r1, r2, #27
 800521e:	bf44      	itt	mi
 8005220:	2320      	movmi	r3, #32
 8005222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005226:	0713      	lsls	r3, r2, #28
 8005228:	bf44      	itt	mi
 800522a:	232b      	movmi	r3, #43	; 0x2b
 800522c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005230:	f89a 3000 	ldrb.w	r3, [sl]
 8005234:	2b2a      	cmp	r3, #42	; 0x2a
 8005236:	d015      	beq.n	8005264 <_vfiprintf_r+0x13c>
 8005238:	9a07      	ldr	r2, [sp, #28]
 800523a:	4654      	mov	r4, sl
 800523c:	2000      	movs	r0, #0
 800523e:	f04f 0c0a 	mov.w	ip, #10
 8005242:	4621      	mov	r1, r4
 8005244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005248:	3b30      	subs	r3, #48	; 0x30
 800524a:	2b09      	cmp	r3, #9
 800524c:	d94e      	bls.n	80052ec <_vfiprintf_r+0x1c4>
 800524e:	b1b0      	cbz	r0, 800527e <_vfiprintf_r+0x156>
 8005250:	9207      	str	r2, [sp, #28]
 8005252:	e014      	b.n	800527e <_vfiprintf_r+0x156>
 8005254:	eba0 0308 	sub.w	r3, r0, r8
 8005258:	fa09 f303 	lsl.w	r3, r9, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	9304      	str	r3, [sp, #16]
 8005260:	46a2      	mov	sl, r4
 8005262:	e7d2      	b.n	800520a <_vfiprintf_r+0xe2>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	1d19      	adds	r1, r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	9103      	str	r1, [sp, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	bfbb      	ittet	lt
 8005270:	425b      	neglt	r3, r3
 8005272:	f042 0202 	orrlt.w	r2, r2, #2
 8005276:	9307      	strge	r3, [sp, #28]
 8005278:	9307      	strlt	r3, [sp, #28]
 800527a:	bfb8      	it	lt
 800527c:	9204      	strlt	r2, [sp, #16]
 800527e:	7823      	ldrb	r3, [r4, #0]
 8005280:	2b2e      	cmp	r3, #46	; 0x2e
 8005282:	d10c      	bne.n	800529e <_vfiprintf_r+0x176>
 8005284:	7863      	ldrb	r3, [r4, #1]
 8005286:	2b2a      	cmp	r3, #42	; 0x2a
 8005288:	d135      	bne.n	80052f6 <_vfiprintf_r+0x1ce>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	1d1a      	adds	r2, r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9203      	str	r2, [sp, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfb8      	it	lt
 8005296:	f04f 33ff 	movlt.w	r3, #4294967295
 800529a:	3402      	adds	r4, #2
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005384 <_vfiprintf_r+0x25c>
 80052a2:	7821      	ldrb	r1, [r4, #0]
 80052a4:	2203      	movs	r2, #3
 80052a6:	4650      	mov	r0, sl
 80052a8:	f7fa ffba 	bl	8000220 <memchr>
 80052ac:	b140      	cbz	r0, 80052c0 <_vfiprintf_r+0x198>
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	eba0 000a 	sub.w	r0, r0, sl
 80052b4:	fa03 f000 	lsl.w	r0, r3, r0
 80052b8:	9b04      	ldr	r3, [sp, #16]
 80052ba:	4303      	orrs	r3, r0
 80052bc:	3401      	adds	r4, #1
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	482c      	ldr	r0, [pc, #176]	; (8005378 <_vfiprintf_r+0x250>)
 80052c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ca:	2206      	movs	r2, #6
 80052cc:	f7fa ffa8 	bl	8000220 <memchr>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d03f      	beq.n	8005354 <_vfiprintf_r+0x22c>
 80052d4:	4b29      	ldr	r3, [pc, #164]	; (800537c <_vfiprintf_r+0x254>)
 80052d6:	bb1b      	cbnz	r3, 8005320 <_vfiprintf_r+0x1f8>
 80052d8:	9b03      	ldr	r3, [sp, #12]
 80052da:	3307      	adds	r3, #7
 80052dc:	f023 0307 	bic.w	r3, r3, #7
 80052e0:	3308      	adds	r3, #8
 80052e2:	9303      	str	r3, [sp, #12]
 80052e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e6:	443b      	add	r3, r7
 80052e8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ea:	e767      	b.n	80051bc <_vfiprintf_r+0x94>
 80052ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f0:	460c      	mov	r4, r1
 80052f2:	2001      	movs	r0, #1
 80052f4:	e7a5      	b.n	8005242 <_vfiprintf_r+0x11a>
 80052f6:	2300      	movs	r3, #0
 80052f8:	3401      	adds	r4, #1
 80052fa:	9305      	str	r3, [sp, #20]
 80052fc:	4619      	mov	r1, r3
 80052fe:	f04f 0c0a 	mov.w	ip, #10
 8005302:	4620      	mov	r0, r4
 8005304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005308:	3a30      	subs	r2, #48	; 0x30
 800530a:	2a09      	cmp	r2, #9
 800530c:	d903      	bls.n	8005316 <_vfiprintf_r+0x1ee>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c5      	beq.n	800529e <_vfiprintf_r+0x176>
 8005312:	9105      	str	r1, [sp, #20]
 8005314:	e7c3      	b.n	800529e <_vfiprintf_r+0x176>
 8005316:	fb0c 2101 	mla	r1, ip, r1, r2
 800531a:	4604      	mov	r4, r0
 800531c:	2301      	movs	r3, #1
 800531e:	e7f0      	b.n	8005302 <_vfiprintf_r+0x1da>
 8005320:	ab03      	add	r3, sp, #12
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	462a      	mov	r2, r5
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <_vfiprintf_r+0x258>)
 8005328:	a904      	add	r1, sp, #16
 800532a:	4630      	mov	r0, r6
 800532c:	f3af 8000 	nop.w
 8005330:	4607      	mov	r7, r0
 8005332:	1c78      	adds	r0, r7, #1
 8005334:	d1d6      	bne.n	80052e4 <_vfiprintf_r+0x1bc>
 8005336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005338:	07d9      	lsls	r1, r3, #31
 800533a:	d405      	bmi.n	8005348 <_vfiprintf_r+0x220>
 800533c:	89ab      	ldrh	r3, [r5, #12]
 800533e:	059a      	lsls	r2, r3, #22
 8005340:	d402      	bmi.n	8005348 <_vfiprintf_r+0x220>
 8005342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005344:	f7ff fdb7 	bl	8004eb6 <__retarget_lock_release_recursive>
 8005348:	89ab      	ldrh	r3, [r5, #12]
 800534a:	065b      	lsls	r3, r3, #25
 800534c:	f53f af12 	bmi.w	8005174 <_vfiprintf_r+0x4c>
 8005350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005352:	e711      	b.n	8005178 <_vfiprintf_r+0x50>
 8005354:	ab03      	add	r3, sp, #12
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	462a      	mov	r2, r5
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <_vfiprintf_r+0x258>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	4630      	mov	r0, r6
 8005360:	f000 f880 	bl	8005464 <_printf_i>
 8005364:	e7e4      	b.n	8005330 <_vfiprintf_r+0x208>
 8005366:	bf00      	nop
 8005368:	080058d0 	.word	0x080058d0
 800536c:	080058f0 	.word	0x080058f0
 8005370:	080058b0 	.word	0x080058b0
 8005374:	08005910 	.word	0x08005910
 8005378:	0800591a 	.word	0x0800591a
 800537c:	00000000 	.word	0x00000000
 8005380:	08005103 	.word	0x08005103
 8005384:	08005916 	.word	0x08005916

08005388 <_printf_common>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	4616      	mov	r6, r2
 800538e:	4699      	mov	r9, r3
 8005390:	688a      	ldr	r2, [r1, #8]
 8005392:	690b      	ldr	r3, [r1, #16]
 8005394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005398:	4293      	cmp	r3, r2
 800539a:	bfb8      	it	lt
 800539c:	4613      	movlt	r3, r2
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a4:	4607      	mov	r7, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	b10a      	cbz	r2, 80053ae <_printf_common+0x26>
 80053aa:	3301      	adds	r3, #1
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	0699      	lsls	r1, r3, #26
 80053b2:	bf42      	ittt	mi
 80053b4:	6833      	ldrmi	r3, [r6, #0]
 80053b6:	3302      	addmi	r3, #2
 80053b8:	6033      	strmi	r3, [r6, #0]
 80053ba:	6825      	ldr	r5, [r4, #0]
 80053bc:	f015 0506 	ands.w	r5, r5, #6
 80053c0:	d106      	bne.n	80053d0 <_printf_common+0x48>
 80053c2:	f104 0a19 	add.w	sl, r4, #25
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	6832      	ldr	r2, [r6, #0]
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dc26      	bgt.n	800541e <_printf_common+0x96>
 80053d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d4:	1e13      	subs	r3, r2, #0
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	bf18      	it	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	0692      	lsls	r2, r2, #26
 80053de:	d42b      	bmi.n	8005438 <_printf_common+0xb0>
 80053e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d01e      	beq.n	800542c <_printf_common+0xa4>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	68e5      	ldr	r5, [r4, #12]
 80053f2:	6832      	ldr	r2, [r6, #0]
 80053f4:	f003 0306 	and.w	r3, r3, #6
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	bf08      	it	eq
 80053fc:	1aad      	subeq	r5, r5, r2
 80053fe:	68a3      	ldr	r3, [r4, #8]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	bf0c      	ite	eq
 8005404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005408:	2500      	movne	r5, #0
 800540a:	4293      	cmp	r3, r2
 800540c:	bfc4      	itt	gt
 800540e:	1a9b      	subgt	r3, r3, r2
 8005410:	18ed      	addgt	r5, r5, r3
 8005412:	2600      	movs	r6, #0
 8005414:	341a      	adds	r4, #26
 8005416:	42b5      	cmp	r5, r6
 8005418:	d11a      	bne.n	8005450 <_printf_common+0xc8>
 800541a:	2000      	movs	r0, #0
 800541c:	e008      	b.n	8005430 <_printf_common+0xa8>
 800541e:	2301      	movs	r3, #1
 8005420:	4652      	mov	r2, sl
 8005422:	4649      	mov	r1, r9
 8005424:	4638      	mov	r0, r7
 8005426:	47c0      	blx	r8
 8005428:	3001      	adds	r0, #1
 800542a:	d103      	bne.n	8005434 <_printf_common+0xac>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	3501      	adds	r5, #1
 8005436:	e7c6      	b.n	80053c6 <_printf_common+0x3e>
 8005438:	18e1      	adds	r1, r4, r3
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	2030      	movs	r0, #48	; 0x30
 800543e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005442:	4422      	add	r2, r4
 8005444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800544c:	3302      	adds	r3, #2
 800544e:	e7c7      	b.n	80053e0 <_printf_common+0x58>
 8005450:	2301      	movs	r3, #1
 8005452:	4622      	mov	r2, r4
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d0e6      	beq.n	800542c <_printf_common+0xa4>
 800545e:	3601      	adds	r6, #1
 8005460:	e7d9      	b.n	8005416 <_printf_common+0x8e>
	...

08005464 <_printf_i>:
 8005464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	460c      	mov	r4, r1
 800546a:	4691      	mov	r9, r2
 800546c:	7e27      	ldrb	r7, [r4, #24]
 800546e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005470:	2f78      	cmp	r7, #120	; 0x78
 8005472:	4680      	mov	r8, r0
 8005474:	469a      	mov	sl, r3
 8005476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547a:	d807      	bhi.n	800548c <_printf_i+0x28>
 800547c:	2f62      	cmp	r7, #98	; 0x62
 800547e:	d80a      	bhi.n	8005496 <_printf_i+0x32>
 8005480:	2f00      	cmp	r7, #0
 8005482:	f000 80d8 	beq.w	8005636 <_printf_i+0x1d2>
 8005486:	2f58      	cmp	r7, #88	; 0x58
 8005488:	f000 80a3 	beq.w	80055d2 <_printf_i+0x16e>
 800548c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005494:	e03a      	b.n	800550c <_printf_i+0xa8>
 8005496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800549a:	2b15      	cmp	r3, #21
 800549c:	d8f6      	bhi.n	800548c <_printf_i+0x28>
 800549e:	a001      	add	r0, pc, #4	; (adr r0, 80054a4 <_printf_i+0x40>)
 80054a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	08005511 	.word	0x08005511
 80054ac:	0800548d 	.word	0x0800548d
 80054b0:	0800548d 	.word	0x0800548d
 80054b4:	0800548d 	.word	0x0800548d
 80054b8:	0800548d 	.word	0x0800548d
 80054bc:	08005511 	.word	0x08005511
 80054c0:	0800548d 	.word	0x0800548d
 80054c4:	0800548d 	.word	0x0800548d
 80054c8:	0800548d 	.word	0x0800548d
 80054cc:	0800548d 	.word	0x0800548d
 80054d0:	0800561d 	.word	0x0800561d
 80054d4:	08005541 	.word	0x08005541
 80054d8:	080055ff 	.word	0x080055ff
 80054dc:	0800548d 	.word	0x0800548d
 80054e0:	0800548d 	.word	0x0800548d
 80054e4:	0800563f 	.word	0x0800563f
 80054e8:	0800548d 	.word	0x0800548d
 80054ec:	08005541 	.word	0x08005541
 80054f0:	0800548d 	.word	0x0800548d
 80054f4:	0800548d 	.word	0x0800548d
 80054f8:	08005607 	.word	0x08005607
 80054fc:	680b      	ldr	r3, [r1, #0]
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	600a      	str	r2, [r1, #0]
 8005504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550c:	2301      	movs	r3, #1
 800550e:	e0a3      	b.n	8005658 <_printf_i+0x1f4>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	6808      	ldr	r0, [r1, #0]
 8005514:	062e      	lsls	r6, r5, #24
 8005516:	f100 0304 	add.w	r3, r0, #4
 800551a:	d50a      	bpl.n	8005532 <_printf_i+0xce>
 800551c:	6805      	ldr	r5, [r0, #0]
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	2d00      	cmp	r5, #0
 8005522:	da03      	bge.n	800552c <_printf_i+0xc8>
 8005524:	232d      	movs	r3, #45	; 0x2d
 8005526:	426d      	negs	r5, r5
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	485e      	ldr	r0, [pc, #376]	; (80056a8 <_printf_i+0x244>)
 800552e:	230a      	movs	r3, #10
 8005530:	e019      	b.n	8005566 <_printf_i+0x102>
 8005532:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005536:	6805      	ldr	r5, [r0, #0]
 8005538:	600b      	str	r3, [r1, #0]
 800553a:	bf18      	it	ne
 800553c:	b22d      	sxthne	r5, r5
 800553e:	e7ef      	b.n	8005520 <_printf_i+0xbc>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	1d18      	adds	r0, r3, #4
 8005546:	6008      	str	r0, [r1, #0]
 8005548:	0628      	lsls	r0, r5, #24
 800554a:	d501      	bpl.n	8005550 <_printf_i+0xec>
 800554c:	681d      	ldr	r5, [r3, #0]
 800554e:	e002      	b.n	8005556 <_printf_i+0xf2>
 8005550:	0669      	lsls	r1, r5, #25
 8005552:	d5fb      	bpl.n	800554c <_printf_i+0xe8>
 8005554:	881d      	ldrh	r5, [r3, #0]
 8005556:	4854      	ldr	r0, [pc, #336]	; (80056a8 <_printf_i+0x244>)
 8005558:	2f6f      	cmp	r7, #111	; 0x6f
 800555a:	bf0c      	ite	eq
 800555c:	2308      	moveq	r3, #8
 800555e:	230a      	movne	r3, #10
 8005560:	2100      	movs	r1, #0
 8005562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005566:	6866      	ldr	r6, [r4, #4]
 8005568:	60a6      	str	r6, [r4, #8]
 800556a:	2e00      	cmp	r6, #0
 800556c:	bfa2      	ittt	ge
 800556e:	6821      	ldrge	r1, [r4, #0]
 8005570:	f021 0104 	bicge.w	r1, r1, #4
 8005574:	6021      	strge	r1, [r4, #0]
 8005576:	b90d      	cbnz	r5, 800557c <_printf_i+0x118>
 8005578:	2e00      	cmp	r6, #0
 800557a:	d04d      	beq.n	8005618 <_printf_i+0x1b4>
 800557c:	4616      	mov	r6, r2
 800557e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005582:	fb03 5711 	mls	r7, r3, r1, r5
 8005586:	5dc7      	ldrb	r7, [r0, r7]
 8005588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800558c:	462f      	mov	r7, r5
 800558e:	42bb      	cmp	r3, r7
 8005590:	460d      	mov	r5, r1
 8005592:	d9f4      	bls.n	800557e <_printf_i+0x11a>
 8005594:	2b08      	cmp	r3, #8
 8005596:	d10b      	bne.n	80055b0 <_printf_i+0x14c>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	07df      	lsls	r7, r3, #31
 800559c:	d508      	bpl.n	80055b0 <_printf_i+0x14c>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6861      	ldr	r1, [r4, #4]
 80055a2:	4299      	cmp	r1, r3
 80055a4:	bfde      	ittt	le
 80055a6:	2330      	movle	r3, #48	; 0x30
 80055a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055b0:	1b92      	subs	r2, r2, r6
 80055b2:	6122      	str	r2, [r4, #16]
 80055b4:	f8cd a000 	str.w	sl, [sp]
 80055b8:	464b      	mov	r3, r9
 80055ba:	aa03      	add	r2, sp, #12
 80055bc:	4621      	mov	r1, r4
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fee2 	bl	8005388 <_printf_common>
 80055c4:	3001      	adds	r0, #1
 80055c6:	d14c      	bne.n	8005662 <_printf_i+0x1fe>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	b004      	add	sp, #16
 80055ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d2:	4835      	ldr	r0, [pc, #212]	; (80056a8 <_printf_i+0x244>)
 80055d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	680e      	ldr	r6, [r1, #0]
 80055dc:	061f      	lsls	r7, r3, #24
 80055de:	f856 5b04 	ldr.w	r5, [r6], #4
 80055e2:	600e      	str	r6, [r1, #0]
 80055e4:	d514      	bpl.n	8005610 <_printf_i+0x1ac>
 80055e6:	07d9      	lsls	r1, r3, #31
 80055e8:	bf44      	itt	mi
 80055ea:	f043 0320 	orrmi.w	r3, r3, #32
 80055ee:	6023      	strmi	r3, [r4, #0]
 80055f0:	b91d      	cbnz	r5, 80055fa <_printf_i+0x196>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f023 0320 	bic.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	2310      	movs	r3, #16
 80055fc:	e7b0      	b.n	8005560 <_printf_i+0xfc>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f043 0320 	orr.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2378      	movs	r3, #120	; 0x78
 8005608:	4828      	ldr	r0, [pc, #160]	; (80056ac <_printf_i+0x248>)
 800560a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800560e:	e7e3      	b.n	80055d8 <_printf_i+0x174>
 8005610:	065e      	lsls	r6, r3, #25
 8005612:	bf48      	it	mi
 8005614:	b2ad      	uxthmi	r5, r5
 8005616:	e7e6      	b.n	80055e6 <_printf_i+0x182>
 8005618:	4616      	mov	r6, r2
 800561a:	e7bb      	b.n	8005594 <_printf_i+0x130>
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	6826      	ldr	r6, [r4, #0]
 8005620:	6960      	ldr	r0, [r4, #20]
 8005622:	1d1d      	adds	r5, r3, #4
 8005624:	600d      	str	r5, [r1, #0]
 8005626:	0635      	lsls	r5, r6, #24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	d501      	bpl.n	8005630 <_printf_i+0x1cc>
 800562c:	6018      	str	r0, [r3, #0]
 800562e:	e002      	b.n	8005636 <_printf_i+0x1d2>
 8005630:	0671      	lsls	r1, r6, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0x1c8>
 8005634:	8018      	strh	r0, [r3, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	4616      	mov	r6, r2
 800563c:	e7ba      	b.n	80055b4 <_printf_i+0x150>
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	1d1a      	adds	r2, r3, #4
 8005642:	600a      	str	r2, [r1, #0]
 8005644:	681e      	ldr	r6, [r3, #0]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	2100      	movs	r1, #0
 800564a:	4630      	mov	r0, r6
 800564c:	f7fa fde8 	bl	8000220 <memchr>
 8005650:	b108      	cbz	r0, 8005656 <_printf_i+0x1f2>
 8005652:	1b80      	subs	r0, r0, r6
 8005654:	6060      	str	r0, [r4, #4]
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	2300      	movs	r3, #0
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	e7a8      	b.n	80055b4 <_printf_i+0x150>
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	4632      	mov	r2, r6
 8005666:	4649      	mov	r1, r9
 8005668:	4640      	mov	r0, r8
 800566a:	47d0      	blx	sl
 800566c:	3001      	adds	r0, #1
 800566e:	d0ab      	beq.n	80055c8 <_printf_i+0x164>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	079b      	lsls	r3, r3, #30
 8005674:	d413      	bmi.n	800569e <_printf_i+0x23a>
 8005676:	68e0      	ldr	r0, [r4, #12]
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	4298      	cmp	r0, r3
 800567c:	bfb8      	it	lt
 800567e:	4618      	movlt	r0, r3
 8005680:	e7a4      	b.n	80055cc <_printf_i+0x168>
 8005682:	2301      	movs	r3, #1
 8005684:	4632      	mov	r2, r6
 8005686:	4649      	mov	r1, r9
 8005688:	4640      	mov	r0, r8
 800568a:	47d0      	blx	sl
 800568c:	3001      	adds	r0, #1
 800568e:	d09b      	beq.n	80055c8 <_printf_i+0x164>
 8005690:	3501      	adds	r5, #1
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	9903      	ldr	r1, [sp, #12]
 8005696:	1a5b      	subs	r3, r3, r1
 8005698:	42ab      	cmp	r3, r5
 800569a:	dcf2      	bgt.n	8005682 <_printf_i+0x21e>
 800569c:	e7eb      	b.n	8005676 <_printf_i+0x212>
 800569e:	2500      	movs	r5, #0
 80056a0:	f104 0619 	add.w	r6, r4, #25
 80056a4:	e7f5      	b.n	8005692 <_printf_i+0x22e>
 80056a6:	bf00      	nop
 80056a8:	08005921 	.word	0x08005921
 80056ac:	08005932 	.word	0x08005932

080056b0 <_sbrk_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d06      	ldr	r5, [pc, #24]	; (80056cc <_sbrk_r+0x1c>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fb fb20 	bl	8000d00 <_sbrk>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_sbrk_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_sbrk_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	200003a4 	.word	0x200003a4

080056d0 <__sread>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	460c      	mov	r4, r1
 80056d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d8:	f000 f8a0 	bl	800581c <_read_r>
 80056dc:	2800      	cmp	r0, #0
 80056de:	bfab      	itete	ge
 80056e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056e2:	89a3      	ldrhlt	r3, [r4, #12]
 80056e4:	181b      	addge	r3, r3, r0
 80056e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056ea:	bfac      	ite	ge
 80056ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ee:	81a3      	strhlt	r3, [r4, #12]
 80056f0:	bd10      	pop	{r4, pc}

080056f2 <__swrite>:
 80056f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f6:	461f      	mov	r7, r3
 80056f8:	898b      	ldrh	r3, [r1, #12]
 80056fa:	05db      	lsls	r3, r3, #23
 80056fc:	4605      	mov	r5, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	4616      	mov	r6, r2
 8005702:	d505      	bpl.n	8005710 <__swrite+0x1e>
 8005704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005708:	2302      	movs	r3, #2
 800570a:	2200      	movs	r2, #0
 800570c:	f000 f868 	bl	80057e0 <_lseek_r>
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	4632      	mov	r2, r6
 800571e:	463b      	mov	r3, r7
 8005720:	4628      	mov	r0, r5
 8005722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005726:	f000 b817 	b.w	8005758 <_write_r>

0800572a <__sseek>:
 800572a:	b510      	push	{r4, lr}
 800572c:	460c      	mov	r4, r1
 800572e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005732:	f000 f855 	bl	80057e0 <_lseek_r>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	bf15      	itete	ne
 800573c:	6560      	strne	r0, [r4, #84]	; 0x54
 800573e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005746:	81a3      	strheq	r3, [r4, #12]
 8005748:	bf18      	it	ne
 800574a:	81a3      	strhne	r3, [r4, #12]
 800574c:	bd10      	pop	{r4, pc}

0800574e <__sclose>:
 800574e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005752:	f000 b813 	b.w	800577c <_close_r>
	...

08005758 <_write_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d07      	ldr	r5, [pc, #28]	; (8005778 <_write_r+0x20>)
 800575c:	4604      	mov	r4, r0
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	2200      	movs	r2, #0
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fb f904 	bl	8000974 <_write>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_write_r+0x1e>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_write_r+0x1e>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	200003a4 	.word	0x200003a4

0800577c <_close_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d06      	ldr	r5, [pc, #24]	; (8005798 <_close_r+0x1c>)
 8005780:	2300      	movs	r3, #0
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fb fa85 	bl	8000c96 <_close>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_close_r+0x1a>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_close_r+0x1a>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	200003a4 	.word	0x200003a4

0800579c <_fstat_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d07      	ldr	r5, [pc, #28]	; (80057bc <_fstat_r+0x20>)
 80057a0:	2300      	movs	r3, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	f7fb fa80 	bl	8000cae <_fstat>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	d102      	bne.n	80057b8 <_fstat_r+0x1c>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	b103      	cbz	r3, 80057b8 <_fstat_r+0x1c>
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	bd38      	pop	{r3, r4, r5, pc}
 80057ba:	bf00      	nop
 80057bc:	200003a4 	.word	0x200003a4

080057c0 <_isatty_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d06      	ldr	r5, [pc, #24]	; (80057dc <_isatty_r+0x1c>)
 80057c4:	2300      	movs	r3, #0
 80057c6:	4604      	mov	r4, r0
 80057c8:	4608      	mov	r0, r1
 80057ca:	602b      	str	r3, [r5, #0]
 80057cc:	f7fb fa7f 	bl	8000cce <_isatty>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_isatty_r+0x1a>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_isatty_r+0x1a>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	200003a4 	.word	0x200003a4

080057e0 <_lseek_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	; (8005800 <_lseek_r+0x20>)
 80057e4:	4604      	mov	r4, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f7fb fa78 	bl	8000ce4 <_lseek>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_lseek_r+0x1e>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_lseek_r+0x1e>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	200003a4 	.word	0x200003a4

08005804 <__malloc_lock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_lock+0x8>)
 8005806:	f7ff bb55 	b.w	8004eb4 <__retarget_lock_acquire_recursive>
 800580a:	bf00      	nop
 800580c:	2000039c 	.word	0x2000039c

08005810 <__malloc_unlock>:
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <__malloc_unlock+0x8>)
 8005812:	f7ff bb50 	b.w	8004eb6 <__retarget_lock_release_recursive>
 8005816:	bf00      	nop
 8005818:	2000039c 	.word	0x2000039c

0800581c <_read_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4d07      	ldr	r5, [pc, #28]	; (800583c <_read_r+0x20>)
 8005820:	4604      	mov	r4, r0
 8005822:	4608      	mov	r0, r1
 8005824:	4611      	mov	r1, r2
 8005826:	2200      	movs	r2, #0
 8005828:	602a      	str	r2, [r5, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	f7fb fa16 	bl	8000c5c <_read>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_read_r+0x1e>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_read_r+0x1e>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	200003a4 	.word	0x200003a4

08005840 <_init>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr

0800584c <_fini>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr
