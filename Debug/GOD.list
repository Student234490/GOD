
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005084  08005084  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800508c  0800508c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08005104  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08005104  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252d  00000000  00000000  00034394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000368c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec27  00000000  00000000  00038270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111c5  00000000  00000000  00056e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb269  00000000  00000000  0006805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001232c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e38  00000000  00000000  00123318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f2c 	.word	0x08004f2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004f2c 	.word	0x08004f2c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <I2C_Scan+0x58>)
 80005c2:	f003 fd6d 	bl	80040a0 <puts>

    for (i = 1; i < 128; i++) {
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e015      	b.n	80005f8 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	b299      	uxth	r1, r3
 80005d4:	230a      	movs	r3, #10
 80005d6:	2201      	movs	r2, #1
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f001 fa0f 	bl	80019fc <HAL_I2C_IsDeviceReady>
 80005de:	4603      	mov	r3, r0
 80005e0:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d104      	bne.n	80005f2 <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4619      	mov	r1, r3
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <I2C_Scan+0x5c>)
 80005ee:	f003 fcd1 	bl	8003f94 <iprintf>
    for (i = 1; i < 128; i++) {
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dae5      	bge.n	80005cc <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <I2C_Scan+0x60>)
 8000602:	f003 fd4d 	bl	80040a0 <puts>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	08004f44 	.word	0x08004f44
 8000614:	08004f5c 	.word	0x08004f5c
 8000618:	08004f84 	.word	0x08004f84

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fc48 	bl	8000eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8cd 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f9e3 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f995 	bl	800095c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000632:	f000 f947 	bl	80008c4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000636:	f000 f905 	bl	8000844 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 800063a:	f240 5322 	movw	r3, #1314	; 0x522
 800063e:	843b      	strh	r3, [r7, #32]
  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8000640:	f107 0220 	add.w	r2, r7, #32
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	21d6      	movs	r1, #214	; 0xd6
 800064e:	485b      	ldr	r0, [pc, #364]	; (80007bc <main+0x1a0>)
 8000650:	f000 ffc6 	bl	80015e0 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 8000654:	2064      	movs	r0, #100	; 0x64
 8000656:	f000 fc9f 	bl	8000f98 <HAL_Delay>

  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 800065a:	f246 0320 	movw	r3, #24608	; 0x6020
 800065e:	83bb      	strh	r3, [r7, #28]
  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 8000660:	f107 021c 	add.w	r2, r7, #28
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2302      	movs	r3, #2
 800066c:	21d6      	movs	r1, #214	; 0xd6
 800066e:	4853      	ldr	r0, [pc, #332]	; (80007bc <main+0x1a0>)
 8000670:	f000 ffb6 	bl	80015e0 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8000674:	200a      	movs	r0, #10
 8000676:	f000 fc8f 	bl	8000f98 <HAL_Delay>

  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 800067a:	f247 0320 	movw	r3, #28704	; 0x7020
 800067e:	833b      	strh	r3, [r7, #24]
  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8000680:	f107 0218 	add.w	r2, r7, #24
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2302      	movs	r3, #2
 800068c:	213c      	movs	r1, #60	; 0x3c
 800068e:	484b      	ldr	r0, [pc, #300]	; (80007bc <main+0x1a0>)
 8000690:	f000 ffa6 	bl	80015e0 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fc7f 	bl	8000f98 <HAL_Delay>

  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 800069a:	2322      	movs	r3, #34	; 0x22
 800069c:	82bb      	strh	r3, [r7, #20]
  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 800069e:	f107 0214 	add.w	r2, r7, #20
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2302      	movs	r3, #2
 80006aa:	213c      	movs	r1, #60	; 0x3c
 80006ac:	4843      	ldr	r0, [pc, #268]	; (80007bc <main+0x1a0>)
 80006ae:	f000 ff97 	bl	80015e0 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 fc70 	bl	8000f98 <HAL_Delay>

  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 80006b8:	f640 4323 	movw	r3, #3107	; 0xc23
 80006bc:	823b      	strh	r3, [r7, #16]
  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 80006be:	f107 0210 	add.w	r2, r7, #16
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2302      	movs	r3, #2
 80006ca:	213c      	movs	r1, #60	; 0x3c
 80006cc:	483b      	ldr	r0, [pc, #236]	; (80007bc <main+0x1a0>)
 80006ce:	f000 ff87 	bl	80015e0 <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 fc60 	bl	8000f98 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  I2C_Scan(&hi2c3);
 80006d8:	4838      	ldr	r0, [pc, #224]	; (80007bc <main+0x1a0>)
 80006da:	f7ff ff6d 	bl	80005b8 <I2C_Scan>
	  /*uint16_t buffer;
	  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, OUT_X_L_M, 1, HAL_MAX_DELAY);
	  HAL_I2C_Master_Receive(&hi2c3, LSM9DS1_MAG_ADDRESS << 1 | 0x01, buffer, sizeof(buffer), HAL_MAX_DELAY);
	  printf("%d\n", buffer);
	  */
	  uint8_t reg1 = OUT_X_XL | 0x80; // Enable auto-increment
 80006de:	23a8      	movs	r3, #168	; 0xa8
 80006e0:	73fb      	strb	r3, [r7, #15]
	  uint8_t data1[6];

	  // Request starting from OUT_X_XL with auto-increment
	  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_ACC_ADDRESS << 1, &reg1, 1, HAL_MAX_DELAY);
 80006e2:	f107 020f 	add.w	r2, r7, #15
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	21d6      	movs	r1, #214	; 0xd6
 80006f0:	4832      	ldr	r0, [pc, #200]	; (80007bc <main+0x1a0>)
 80006f2:	f000 ff75 	bl	80015e0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, (LSM9DS1_ACC_ADDRESS << 1) | 0x01, data1, 6, HAL_MAX_DELAY);
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2306      	movs	r3, #6
 8000702:	21d7      	movs	r1, #215	; 0xd7
 8000704:	482d      	ldr	r0, [pc, #180]	; (80007bc <main+0x1a0>)
 8000706:	f001 f883 	bl	8001810 <HAL_I2C_Master_Receive>

	  // Combine bytes into signed 16-bit integers
	  int16_t acc_x = (int16_t)(data1[1] << 8 | data1[0]);
 800070a:	7a7b      	ldrb	r3, [r7, #9]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	7a3b      	ldrb	r3, [r7, #8]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  int16_t acc_y = (int16_t)(data1[3] << 8 | data1[2]);
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	7abb      	ldrb	r3, [r7, #10]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  int16_t acc_z = (int16_t)(data1[5] << 8 | data1[4]);
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	857b      	strh	r3, [r7, #42]	; 0x2a

	  uint8_t reg2 = OUT_X_L_M | 0x80; // Enable auto-increment
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	71fb      	strb	r3, [r7, #7]
	  uint8_t data2[6];

	  // Request starting from OUT_X_XL with auto-increment
	  HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, &reg2, 1, HAL_MAX_DELAY);
 8000738:	1dfa      	adds	r2, r7, #7
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	213c      	movs	r1, #60	; 0x3c
 8000744:	481d      	ldr	r0, [pc, #116]	; (80007bc <main+0x1a0>)
 8000746:	f000 ff4b 	bl	80015e0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, (LSM9DS1_MAG_ADDRESS << 1) | 0x01, data2, 6, HAL_MAX_DELAY);
 800074a:	463a      	mov	r2, r7
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2306      	movs	r3, #6
 8000754:	213d      	movs	r1, #61	; 0x3d
 8000756:	4819      	ldr	r0, [pc, #100]	; (80007bc <main+0x1a0>)
 8000758:	f001 f85a 	bl	8001810 <HAL_I2C_Master_Receive>

	  // Combine bytes into signed 16-bit integers
	  int16_t mag_x = (int16_t)(data2[1] << 8 | data2[0]);
 800075c:	787b      	ldrb	r3, [r7, #1]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21a      	sxth	r2, r3
 8000762:	783b      	ldrb	r3, [r7, #0]
 8000764:	b21b      	sxth	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	853b      	strh	r3, [r7, #40]	; 0x28
	  int16_t mag_y = (int16_t)(data2[3] << 8 | data2[2]);
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b21a      	sxth	r2, r3
 8000770:	78bb      	ldrb	r3, [r7, #2]
 8000772:	b21b      	sxth	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	84fb      	strh	r3, [r7, #38]	; 0x26
	  int16_t mag_z = (int16_t)(data2[5] << 8 | data2[4]);
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b21a      	sxth	r2, r3
 800077e:	793b      	ldrb	r3, [r7, #4]
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	84bb      	strh	r3, [r7, #36]	; 0x24

	  printf("%d,%d,%d,%d,%d,%d,\n\r", mag_x, mag_y, mag_z, acc_x,acc_y,acc_z);
 8000786:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 800078a:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 800078e:	f9b7 5024 	ldrsh.w	r5, [r7, #36]	; 0x24
 8000792:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000796:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800079a:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800079e:	9102      	str	r1, [sp, #8]
 80007a0:	9201      	str	r2, [sp, #4]
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	462b      	mov	r3, r5
 80007a6:	4622      	mov	r2, r4
 80007a8:	4601      	mov	r1, r0
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <main+0x1a4>)
 80007ac:	f003 fbf2 	bl	8003f94 <iprintf>
	  HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fbf0 	bl	8000f98 <HAL_Delay>
  {
 80007b8:	e791      	b.n	80006de <main+0xc2>
 80007ba:	bf00      	nop
 80007bc:	20000098 	.word	0x20000098
 80007c0:	08004f94 	.word	0x08004f94

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2238      	movs	r2, #56	; 0x38
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fbd6 	bl	8003f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ea:	f001 fd31 	bl	8002250 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fdd7 	bl	80023b8 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000810:	f000 f92a 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000818:	2301      	movs	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f002 f8d7 	bl	80029e0 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000838:	f000 f916 	bl	8000a68 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	; 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C3_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C3_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C3_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C3_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000880:	f000 fe12 	bl	80014a8 <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 f8ed 	bl	8000a68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000892:	f001 fc45 	bl	8002120 <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 f8e4 	bl	8000a68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2C3_Init+0x74>)
 80008a4:	f001 fc87 	bl	80021b6 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 f8db 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000098 	.word	0x20000098
 80008bc:	40007800 	.word	0x40007800
 80008c0:	0010061a 	.word	0x0010061a

080008c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_USART1_UART_Init+0x94>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART1_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_USART1_UART_Init+0x90>)
 800090e:	f002 fc73 	bl	80031f8 <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f8a6 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_USART1_UART_Init+0x90>)
 8000920:	f003 fa3c 	bl	8003d9c <HAL_UARTEx_SetTxFifoThreshold>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800092a:	f000 f89d 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <MX_USART1_UART_Init+0x90>)
 8000932:	f003 fa71 	bl	8003e18 <HAL_UARTEx_SetRxFifoThreshold>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 f894 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_USART1_UART_Init+0x90>)
 8000942:	f003 f9f2 	bl	8003d2a <HAL_UARTEx_DisableFifoMode>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 f88c 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000ec 	.word	0x200000ec
 8000958:	40013800 	.word	0x40013800

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_USART2_UART_Init+0x94>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_USART2_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART2_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a4:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x90>)
 80009a6:	f002 fc27 	bl	80031f8 <HAL_UART_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f85a 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_USART2_UART_Init+0x90>)
 80009b8:	f003 f9f0 	bl	8003d9c <HAL_UARTEx_SetTxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 f851 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x90>)
 80009ca:	f003 fa25 	bl	8003e18 <HAL_UARTEx_SetRxFifoThreshold>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f848 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_USART2_UART_Init+0x90>)
 80009da:	f003 f9a6 	bl	8003d2a <HAL_UARTEx_DisableFifoMode>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009e4:	f000 f840 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000180 	.word	0x20000180
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_GPIO_Init+0x44>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <MX_GPIO_Init+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_GPIO_Init+0x44>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_GPIO_Init+0x44>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <MX_GPIO_Init+0x44>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_GPIO_Init+0x44>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <_write>:
// code for setting printf to uart
//
extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <_write+0x28>)
 8000a54:	f002 fc20 	bl	8003298 <HAL_UART_Transmit>
    return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000180 	.word	0x20000180

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aaa:	f001 fc75 	bl	8002398 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09c      	sub	sp, #112	; 0x70
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	2244      	movs	r2, #68	; 0x44
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fa51 	bl	8003f84 <memset>
  if(hi2c->Instance==I2C3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a2e      	ldr	r2, [pc, #184]	; (8000ba0 <HAL_I2C_MspInit+0xe4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d154      	bne.n	8000b96 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f98c 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ffaf 	bl	8000a68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b40:	2312      	movs	r3, #18
 8000b42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 fb23 	bl	80011a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b76:	4619      	mov	r1, r3
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_I2C_MspInit+0xec>)
 8000b7a:	f000 fb13 	bl	80011a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b88:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_I2C_MspInit+0xe8>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3770      	adds	r7, #112	; 0x70
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40007800 	.word	0x40007800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000400 	.word	0x48000400

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	2244      	movs	r2, #68	; 0x44
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 f9d9 	bl	8003f84 <memset>
  if(huart->Instance==USART1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <HAL_UART_MspInit+0x124>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d138      	bne.n	8000c4e <HAL_UART_MspInit+0xa2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 f915 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bf4:	f7ff ff38 	bl	8000a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfc:	4a35      	ldr	r2, [pc, #212]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6613      	str	r3, [r2, #96]	; 0x60
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f000 faac 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4c:	e03b      	b.n	8000cc6 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_UART_MspInit+0x12c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d136      	bne.n	8000cc6 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 f8d7 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000c70:	f7ff fefa 	bl	8000a68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_MspInit+0x128>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f000 fa6f 	bl	80011a4 <HAL_GPIO_Init>
}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	; 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40004400 	.word	0x40004400

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f918 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
	}

return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	605a      	str	r2, [r3, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_isatty>:

int _isatty(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return 1;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f003 f894 	bl	8003f30 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20008000 	.word	0x20008000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	2000008c 	.word	0x2000008c
 8000e3c:	20000228 	.word	0x20000228

08000e40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e68:	f7ff ffea 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <LoopForever+0xe>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <LoopForever+0x16>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f003 f853 	bl	8003f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e96:	f7ff fbc1 	bl	800061c <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   r0, =_estack
 8000e9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea8:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8000eac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb0:	20000228 	.word	0x20000228

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>

08000eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f93d 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f80e 	bl	8000ee8 <HAL_InitTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	e001      	b.n	8000edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed8:	f7ff fdcc 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000edc:	79fb      	ldrb	r3, [r7, #7]

}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_InitTick+0x68>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d022      	beq.n	8000f42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_InitTick+0x6c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_InitTick+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f93a 	bl	800118a <HAL_SYSTICK_Config>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10f      	bne.n	8000f3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	d809      	bhi.n	8000f36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f22:	2200      	movs	r2, #0
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2a:	f000 f914 	bl	8001156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_InitTick+0x70>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e004      	b.n	8000f46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x20>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000214 	.word	0x20000214
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000214 	.word	0x20000214

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d004      	beq.n	8000fbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_Delay+0x40>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbc:	bf00      	nop
 8000fbe:	f7ff ffdf 	bl	8000f80 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8f7      	bhi.n	8000fbe <HAL_Delay+0x26>
  {
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000008 	.word	0x20000008

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff47 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff5e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff90 	bl	8001094 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5f 	bl	8001040 <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb2 	bl	80010fc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011b2:	e15a      	b.n	800146a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 814c 	beq.w	8001464 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b03      	cmp	r3, #3
 8001250:	d017      	beq.n	8001282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d123      	bne.n	80012d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0203 	and.w	r2, r3, #3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80a6 	beq.w	8001464 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 800131a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131c:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6613      	str	r3, [r2, #96]	; 0x60
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001330:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_GPIO_Init+0x2e8>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800135a:	d01f      	beq.n	800139c <HAL_GPIO_Init+0x1f8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x2ec>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d019      	beq.n	8001398 <HAL_GPIO_Init+0x1f4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1f0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <HAL_GPIO_Init+0x2f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1ec>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a49      	ldr	r2, [pc, #292]	; (800149c <HAL_GPIO_Init+0x2f8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2fc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001384:	2305      	movs	r3, #5
 8001386:	e00a      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001388:	2306      	movs	r3, #6
 800138a:	e008      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 800138c:	2304      	movs	r3, #4
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001390:	2303      	movs	r3, #3
 8001392:	e004      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001394:	2302      	movs	r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_GPIO_Init+0x1fa>
 800139c:	2300      	movs	r3, #0
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4093      	lsls	r3, r2
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ae:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_GPIO_Init+0x2e8>)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e0:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800140a:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f ae9d 	bne.w	80011b4 <HAL_GPIO_Init+0x10>
  }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	48000c00 	.word	0x48000c00
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	40010400 	.word	0x40010400

080014a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e08d      	b.n	80015d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff faf4 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	; 0x24
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e006      	b.n	8001530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800152e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d108      	bne.n	800154a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	e007      	b.n	800155a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800157c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69d9      	ldr	r1, [r3, #28]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	461a      	mov	r2, r3
 80015ec:	460b      	mov	r3, r1
 80015ee:	817b      	strh	r3, [r7, #10]
 80015f0:	4613      	mov	r3, r2
 80015f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	f040 80fd 	bne.w	80017fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_I2C_Master_Transmit+0x30>
 800160c:	2302      	movs	r3, #2
 800160e:	e0f6      	b.n	80017fe <HAL_I2C_Master_Transmit+0x21e>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001618:	f7ff fcb2 	bl	8000f80 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2319      	movs	r3, #25
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 faf6 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0e1      	b.n	80017fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2221      	movs	r2, #33	; 0x21
 800163e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2210      	movs	r2, #16
 8001646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	893a      	ldrh	r2, [r7, #8]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	2bff      	cmp	r3, #255	; 0xff
 800166a:	d906      	bls.n	800167a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	22ff      	movs	r2, #255	; 0xff
 8001670:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e007      	b.n	800168a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001688:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	d024      	beq.n	80016dc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	8979      	ldrh	r1, [r7, #10]
 80016ce:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <HAL_I2C_Master_Transmit+0x228>)
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fcf1 	bl	80020bc <I2C_TransferConfig>
 80016da:	e066      	b.n	80017aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	8979      	ldrh	r1, [r7, #10]
 80016e4:	4b48      	ldr	r3, [pc, #288]	; (8001808 <HAL_I2C_Master_Transmit+0x228>)
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 fce6 	bl	80020bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016f0:	e05b      	b.n	80017aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	6a39      	ldr	r1, [r7, #32]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fae9 	bl	8001cce <I2C_WaitOnTXISFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07b      	b.n	80017fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d034      	beq.n	80017aa <HAL_I2C_Master_Transmit+0x1ca>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d130      	bne.n	80017aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2200      	movs	r2, #0
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fa62 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e04d      	b.n	80017fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	2bff      	cmp	r3, #255	; 0xff
 800176a:	d90e      	bls.n	800178a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	22ff      	movs	r2, #255	; 0xff
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	b2da      	uxtb	r2, r3
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 fc9a 	bl	80020bc <I2C_TransferConfig>
 8001788:	e00f      	b.n	80017aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fc89 	bl	80020bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d19e      	bne.n	80016f2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	6a39      	ldr	r1, [r7, #32]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 facf 	bl	8001d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e01a      	b.n	80017fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2220      	movs	r2, #32
 80017ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6859      	ldr	r1, [r3, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_I2C_Master_Transmit+0x22c>)
 80017dc:	400b      	ands	r3, r1
 80017de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e000      	b.n	80017fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
  }
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	80002000 	.word	0x80002000
 800180c:	fe00e800 	.word	0xfe00e800

08001810 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	460b      	mov	r3, r1
 800181e:	817b      	strh	r3, [r7, #10]
 8001820:	4613      	mov	r3, r2
 8001822:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b20      	cmp	r3, #32
 800182e:	f040 80db 	bne.w	80019e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Master_Receive+0x30>
 800183c:	2302      	movs	r3, #2
 800183e:	e0d4      	b.n	80019ea <HAL_I2C_Master_Receive+0x1da>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001848:	f7ff fb9a 	bl	8000f80 <HAL_GetTick>
 800184c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2319      	movs	r3, #25
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9de 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0bf      	b.n	80019ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2222      	movs	r2, #34	; 0x22
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2210      	movs	r2, #16
 8001876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2bff      	cmp	r3, #255	; 0xff
 800189a:	d90e      	bls.n	80018ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_I2C_Master_Receive+0x1e4>)
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fc02 	bl	80020bc <I2C_TransferConfig>
 80018b8:	e06d      	b.n	8001996 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	8979      	ldrh	r1, [r7, #10]
 80018cc:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_I2C_Master_Receive+0x1e4>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fbf1 	bl	80020bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018da:	e05c      	b.n	8001996 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	6a39      	ldr	r1, [r7, #32]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fa7f 	bl	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e07c      	b.n	80019ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d034      	beq.n	8001996 <HAL_I2C_Master_Receive+0x186>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	2b00      	cmp	r3, #0
 8001932:	d130      	bne.n	8001996 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f96c 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e04d      	b.n	80019ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	2bff      	cmp	r3, #255	; 0xff
 8001956:	d90e      	bls.n	8001976 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	b2da      	uxtb	r2, r3
 8001964:	8979      	ldrh	r1, [r7, #10]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fba4 	bl	80020bc <I2C_TransferConfig>
 8001974:	e00f      	b.n	8001996 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	b2da      	uxtb	r2, r3
 8001986:	8979      	ldrh	r1, [r7, #10]
 8001988:	2300      	movs	r3, #0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 fb93 	bl	80020bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199a:	b29b      	uxth	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d19d      	bne.n	80018dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	6a39      	ldr	r1, [r7, #32]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f9d9 	bl	8001d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e01a      	b.n	80019ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2220      	movs	r2, #32
 80019ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_I2C_Master_Receive+0x1e8>)
 80019c8:	400b      	ands	r3, r1
 80019ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	80002400 	.word	0x80002400
 80019f8:	fe00e800 	.word	0xfe00e800

080019fc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	f040 80d6 	bne.w	8001bca <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e0cc      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_IsDeviceReady+0x44>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0c5      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_IsDeviceReady+0x72>
 8001a5e:	897b      	ldrh	r3, [r7, #10]
 8001a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a6c:	e006      	b.n	8001a7c <HAL_I2C_IsDeviceReady+0x80>
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa7d 	bl	8000f80 <HAL_GetTick>
 8001a86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ab4:	e034      	b.n	8001b20 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d01a      	beq.n	8001af4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001abe:	f7ff fa5f 	bl	8000f80 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d302      	bcc.n	8001ad4 <HAL_I2C_IsDeviceReady+0xd8>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e06b      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_I2C_IsDeviceReady+0x130>
 8001b26:	7fbb      	ldrb	r3, [r7, #30]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0c4      	beq.n	8001ab6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d01a      	beq.n	8001b70 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	2120      	movs	r1, #32
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f869 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e03b      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e02d      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	2120      	movs	r1, #32
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f84e 	bl	8001c1c <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e020      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2220      	movs	r2, #32
 8001b98:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f63f af56 	bhi.w	8001a56 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d103      	bne.n	8001bf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d007      	beq.n	8001c10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	619a      	str	r2, [r3, #24]
  }
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c2c:	e03b      	b.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f962 	bl	8001efc <I2C_IsErrorOccurred>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e041      	b.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d02d      	beq.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7ff f999 	bl	8000f80 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d122      	bne.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d113      	bne.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0220 	orr.w	r2, r3, #32
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d0b4      	beq.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cda:	e033      	b.n	8001d44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f90b 	bl	8001efc <I2C_IsErrorOccurred>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e031      	b.n	8001d54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d025      	beq.n	8001d44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7ff f942 	bl	8000f80 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d302      	bcc.n	8001d0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11a      	bne.n	8001d44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d013      	beq.n	8001d44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e007      	b.n	8001d54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d1c4      	bne.n	8001cdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d68:	e02f      	b.n	8001dca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f8c4 	bl	8001efc <I2C_IsErrorOccurred>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e02d      	b.n	8001dda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7e:	f7ff f8ff 	bl	8000f80 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d302      	bcc.n	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11a      	bne.n	8001dca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d013      	beq.n	8001dca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0220 	orr.w	r2, r3, #32
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e007      	b.n	8001dda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d1c8      	bne.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001df4:	e071      	b.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f87e 	bl	8001efc <I2C_IsErrorOccurred>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	d13b      	bne.n	8001e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d138      	bne.n	8001e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d105      	bne.n	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d121      	bne.n	8001e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2204      	movs	r2, #4
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001e68:	400b      	ands	r3, r1
 8001e6a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	75fb      	strb	r3, [r7, #23]
 8001e88:	e002      	b.n	8001e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e90:	f7ff f876 	bl	8000f80 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d302      	bcc.n	8001ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d119      	bne.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d116      	bne.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d00f      	beq.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d002      	beq.n	8001eee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d083      	beq.n	8001df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d068      	beq.n	8001ffa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f30:	e049      	b.n	8001fc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d045      	beq.n	8001fc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f821 	bl	8000f80 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_IsErrorOccurred+0x54>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13a      	bne.n	8001fc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f72:	d121      	bne.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f7a:	d01d      	beq.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d01a      	beq.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f92:	f7fe fff5 	bl	8000f80 <HAL_GetTick>
 8001f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f98:	e00e      	b.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f9a:	f7fe fff1 	bl	8000f80 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b19      	cmp	r3, #25
 8001fa6:	d907      	bls.n	8001fb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001fb6:	e006      	b.n	8001fc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d1e9      	bne.n	8001f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d003      	beq.n	8001fdc <I2C_IsErrorOccurred+0xe0>
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0aa      	beq.n	8001f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7ff fdaf 	bl	8001bd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <I2C_IsErrorOccurred+0x1bc>)
 8002082:	400b      	ands	r3, r1
 8002084:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80020aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	fe00e800 	.word	0xfe00e800

080020bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	4613      	mov	r3, r2
 80020cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020d4:	7a7b      	ldrb	r3, [r7, #9]
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	0d5b      	lsrs	r3, r3, #21
 80020f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <I2C_TransferConfig+0x60>)
 80020fc:	430b      	orrs	r3, r1
 80020fe:	43db      	mvns	r3, r3
 8002100:	ea02 0103 	and.w	r1, r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	03ff63ff 	.word	0x03ff63ff

08002120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b20      	cmp	r3, #32
 8002134:	d138      	bne.n	80021a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002140:	2302      	movs	r3, #2
 8002142:	e032      	b.n	80021aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	; 0x24
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d139      	bne.n	8002240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e033      	b.n	8002242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2224      	movs	r2, #36	; 0x24
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d141      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800225e:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226a:	d131      	bne.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002272:	4a46      	ldr	r2, [pc, #280]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002284:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2232      	movs	r2, #50	; 0x32
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9b      	lsrs	r3, r3, #18
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a2:	e002      	b.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b6:	d102      	bne.n	80022be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f2      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d158      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e057      	b.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d6:	4a2d      	ldr	r2, [pc, #180]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022e0:	e04d      	b.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e8:	d141      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d131      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fe:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002310:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2232      	movs	r2, #50	; 0x32
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	0c9b      	lsrs	r3, r3, #18
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232e:	e002      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3b01      	subs	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d102      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f2      	bne.n	8002330 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d112      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e011      	b.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800236c:	e007      	b.n	800237e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40007000 	.word	0x40007000
 8002390:	20000000 	.word	0x20000000
 8002394:	431bde83 	.word	0x431bde83

08002398 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a6:	6093      	str	r3, [r2, #8]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e301      	b.n	80029ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d075      	beq.n	80024c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d6:	4ba3      	ldr	r3, [pc, #652]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e0:	4ba0      	ldr	r3, [pc, #640]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d102      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3e>
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d002      	beq.n	80023fc <HAL_RCC_OscConfig+0x44>
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d10b      	bne.n	8002414 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	4b99      	ldr	r3, [pc, #612]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d157      	bne.n	80024c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e2dc      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x74>
 800241e:	4b91      	ldr	r3, [pc, #580]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a90      	ldr	r2, [pc, #576]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b8b      	ldr	r3, [pc, #556]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a8a      	ldr	r2, [pc, #552]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a87      	ldr	r2, [pc, #540]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 8002450:	4b84      	ldr	r3, [pc, #528]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a83      	ldr	r2, [pc, #524]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a80      	ldr	r2, [pc, #512]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fd86 	bl	8000f80 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fd82 	bl	8000f80 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e2a1      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xc0>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fd72 	bl	8000f80 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fd6e 	bl	8000f80 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e28d      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b2:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0xe8>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d075      	beq.n	80025ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	4b62      	ldr	r3, [pc, #392]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_OscConfig+0x136>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_OscConfig+0x13c>
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d11f      	bne.n	8002534 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_OscConfig+0x154>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e260      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4952      	ldr	r1, [pc, #328]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x2b0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fcdf 	bl	8000ee8 <HAL_InitTick>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d043      	beq.n	80025b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e24c      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a48      	ldr	r2, [pc, #288]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fd1a 	bl	8000f80 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe fd16 	bl	8000f80 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e235      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002562:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	061b      	lsls	r3, r3, #24
 800257c:	4939      	ldr	r1, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
 8002582:	e01a      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a36      	ldr	r2, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fcf6 	bl	8000f80 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe fcf2 	bl	8000f80 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e211      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1e0>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03c      	beq.n	8002640 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01c      	beq.n	8002608 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fccf 	bl	8000f80 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e6:	f7fe fccb 	bl	8000f80 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1ea      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ef      	beq.n	80025e6 <HAL_RCC_OscConfig+0x22e>
 8002606:	e01b      	b.n	8002640 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fcb2 	bl	8000f80 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe fcae 	bl	8000f80 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1cd      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ef      	bne.n	8002620 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ab 	beq.w	80027a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x2b4>
 800265e:	2301      	movs	r3, #1
 8002660:	e005      	b.n	800266e <HAL_RCC_OscConfig+0x2b6>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	20000004 	.word	0x20000004
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4bad      	ldr	r3, [pc, #692]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4aac      	ldr	r2, [pc, #688]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
 800267e:	4baa      	ldr	r3, [pc, #680]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4ba7      	ldr	r3, [pc, #668]	; (800292c <HAL_RCC_OscConfig+0x574>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269a:	4ba4      	ldr	r3, [pc, #656]	; (800292c <HAL_RCC_OscConfig+0x574>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4aa3      	ldr	r2, [pc, #652]	; (800292c <HAL_RCC_OscConfig+0x574>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fc6b 	bl	8000f80 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fc67 	bl	8000f80 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e186      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b9a      	ldr	r3, [pc, #616]	; (800292c <HAL_RCC_OscConfig+0x574>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_RCC_OscConfig+0x32e>
 80026d4:	4b94      	ldr	r3, [pc, #592]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	4a93      	ldr	r2, [pc, #588]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e4:	e024      	b.n	8002730 <HAL_RCC_OscConfig+0x378>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d110      	bne.n	8002710 <HAL_RCC_OscConfig+0x358>
 80026ee:	4b8e      	ldr	r3, [pc, #568]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	4a8c      	ldr	r2, [pc, #560]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fe:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	4a88      	ldr	r2, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270e:	e00f      	b.n	8002730 <HAL_RCC_OscConfig+0x378>
 8002710:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a84      	ldr	r2, [pc, #528]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002720:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a80      	ldr	r2, [pc, #512]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d016      	beq.n	8002766 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fc22 	bl	8000f80 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe fc1e 	bl	8000f80 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e13b      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ed      	beq.n	8002740 <HAL_RCC_OscConfig+0x388>
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fc0b 	bl	8000f80 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fc07 	bl	8000f80 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e124      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ed      	bne.n	800276e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002792:	7ffb      	ldrb	r3, [r7, #31]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	4a62      	ldr	r2, [pc, #392]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03c      	beq.n	800282a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b8:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80027ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027be:	4a5a      	ldr	r2, [pc, #360]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fbda 	bl	8000f80 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d0:	f7fe fbd6 	bl	8000f80 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0f5      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80027e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCC_OscConfig+0x418>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027f2:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80027f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fbbd 	bl	8000f80 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280a:	f7fe fbb9 	bl	8000f80 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0d8      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 800281e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ef      	bne.n	800280a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80cc 	beq.w	80029cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002834:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b0c      	cmp	r3, #12
 800283e:	f000 8086 	beq.w	800294e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d15a      	bne.n	8002900 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a36      	ldr	r2, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fb93 	bl	8000f80 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fb8f 	bl	8000f80 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0ae      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_OscConfig+0x578>)
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6a11      	ldr	r1, [r2, #32]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800288c:	3a01      	subs	r2, #1
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002896:	0212      	lsls	r2, r2, #8
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800289e:	0852      	lsrs	r2, r2, #1
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0552      	lsls	r2, r2, #21
 80028a4:	4311      	orrs	r1, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028aa:	0852      	lsrs	r2, r2, #1
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0652      	lsls	r2, r2, #25
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028b6:	06d2      	lsls	r2, r2, #27
 80028b8:	430a      	orrs	r2, r1
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fb52 	bl	8000f80 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fb4e 	bl	8000f80 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e06d      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x528>
 80028fe:	e065      	b.n	80029cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x570>)
 8002906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fb38 	bl	8000f80 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002912:	e00f      	b.n	8002934 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fb34 	bl	8000f80 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d908      	bls.n	8002934 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e053      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x620>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e9      	bne.n	8002914 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_OscConfig+0x620>)
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4924      	ldr	r1, [pc, #144]	; (80029d8 <HAL_RCC_OscConfig+0x620>)
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_OscConfig+0x624>)
 8002948:	4013      	ands	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
 800294c:	e03e      	b.n	80029cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e039      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_RCC_OscConfig+0x620>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d12c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	3b01      	subs	r3, #1
 800297a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d123      	bne.n	80029c8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d11b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d113      	bne.n	80029c8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	3b01      	subs	r3, #1
 80029ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	feeefffc 	.word	0xfeeefffc

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e11e      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 020f 	bic.w	r2, r3, #15
 8002a0e:	498c      	ldr	r1, [pc, #560]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b8a      	ldr	r3, [pc, #552]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e106      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d073      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d129      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0f4      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a4c:	f000 f99e 	bl	8002d8c <RCC_GetSysClockFreqFromPLLSource>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_ClockConfig+0x268>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d93f      	bls.n	8002ada <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d033      	beq.n	8002ada <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d12f      	bne.n	8002ada <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	4a70      	ldr	r2, [pc, #448]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e024      	b.n	8002ada <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0c6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0be      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ab8:	f000 f8ce 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4a61      	ldr	r2, [pc, #388]	; (8002c48 <HAL_RCC_ClockConfig+0x268>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d909      	bls.n	8002ada <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ace:	4a5d      	ldr	r2, [pc, #372]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4957      	ldr	r1, [pc, #348]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe fa48 	bl	8000f80 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fa44 	bl	8000f80 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e095      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b54:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4936      	ldr	r1, [pc, #216]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d21d      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 020f 	bic.w	r2, r3, #15
 8002b98:	4929      	ldr	r1, [pc, #164]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f9ee 	bl	8000f80 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe f9ea 	bl	8000f80 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e03b      	b.n	8002c36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1ed      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490f      	ldr	r1, [pc, #60]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0a:	f000 f825 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCC_ClockConfig+0x264>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490c      	ldr	r1, [pc, #48]	; (8002c4c <HAL_RCC_ClockConfig+0x26c>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x270>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe f95a 	bl	8000ee8 <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	04c4b400 	.word	0x04c4b400
 8002c4c:	08004fac 	.word	0x08004fac
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e047      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e03e      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d136      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb6:	68d2      	ldr	r2, [r2, #12]
 8002cb8:	0a12      	lsrs	r2, r2, #8
 8002cba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
      break;
 8002cc4:	e00c      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	0a12      	lsrs	r2, r2, #8
 8002cd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0e5b      	lsrs	r3, r3, #25
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e001      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d00:	693b      	ldr	r3, [r7, #16]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08004fbc 	.word	0x08004fbc

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d64:	f7ff ffda 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0adb      	lsrs	r3, r3, #11
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4904      	ldr	r1, [pc, #16]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08004fbc 	.word	0x08004fbc

08002d8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d10c      	bne.n	8002dca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dba:	68d2      	ldr	r2, [r2, #12]
 8002dbc:	0a12      	lsrs	r2, r2, #8
 8002dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
    break;
 8002dc8:	e00c      	b.n	8002de4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dd4:	68d2      	ldr	r2, [r2, #12]
 8002dd6:	0a12      	lsrs	r2, r2, #8
 8002dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
    break;
 8002de2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0e5b      	lsrs	r3, r3, #25
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002dfe:	687b      	ldr	r3, [r7, #4]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	007a1200 	.word	0x007a1200
 8002e14:	00f42400 	.word	0x00f42400

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e24:	2300      	movs	r3, #0
 8002e26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8098 	beq.w	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e62:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a39      	ldr	r2, [pc, #228]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e6e:	f7fe f887 	bl	8000f80 <HAL_GetTick>
 8002e72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e74:	e009      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe f883 	bl	8000f80 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d902      	bls.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	74fb      	strb	r3, [r7, #19]
        break;
 8002e88:	e005      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ef      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d159      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01e      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d019      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f843 	bl	8000f80 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efc:	e00b      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe f83f 	bl	8000f80 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d902      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	74fb      	strb	r3, [r7, #19]
            break;
 8002f14:	e006      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ec      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f40:	e008      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	74bb      	strb	r3, [r7, #18]
 8002f46:	e005      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f54:	7c7b      	ldrb	r3, [r7, #17]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	4aa5      	ldr	r2, [pc, #660]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f72:	4ba0      	ldr	r3, [pc, #640]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f023 0203 	bic.w	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	499c      	ldr	r1, [pc, #624]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f94:	4b97      	ldr	r3, [pc, #604]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f023 020c 	bic.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4994      	ldr	r1, [pc, #592]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb6:	4b8f      	ldr	r3, [pc, #572]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	498b      	ldr	r1, [pc, #556]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd8:	4b86      	ldr	r3, [pc, #536]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4983      	ldr	r1, [pc, #524]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ffa:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	497a      	ldr	r1, [pc, #488]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800301c:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4972      	ldr	r1, [pc, #456]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	4969      	ldr	r1, [pc, #420]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4961      	ldr	r1, [pc, #388]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003082:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4958      	ldr	r1, [pc, #352]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4950      	ldr	r1, [pc, #320]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c2:	d105      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b4b      	ldr	r3, [pc, #300]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030dc:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	4942      	ldr	r1, [pc, #264]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fa:	d105      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a3c      	ldr	r2, [pc, #240]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d015      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003114:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4934      	ldr	r1, [pc, #208]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003132:	d105      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a2e      	ldr	r2, [pc, #184]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	4926      	ldr	r1, [pc, #152]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316a:	d105      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003176:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	4918      	ldr	r1, [pc, #96]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a2:	d105      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d015      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	490a      	ldr	r1, [pc, #40]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031da:	d105      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000

080031f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e042      	b.n	8003290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fd fcc5 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2224      	movs	r2, #36	; 0x24
 8003226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb52 	bl	80038ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8b3 	bl	80033b4 <UART_SetConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e01b      	b.n	8003290 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fbd1 	bl	8003a30 <UART_CheckIdleState>
 800328e:	4603      	mov	r3, r0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d17b      	bne.n	80033aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_UART_Transmit+0x26>
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e074      	b.n	80033ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2221      	movs	r2, #33	; 0x21
 80032ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fe55 	bl	8000f80 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f0:	d108      	bne.n	8003304 <HAL_UART_Transmit+0x6c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e003      	b.n	800330c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800330c:	e030      	b.n	8003370 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fc33 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e03d      	b.n	80033ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3302      	adds	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e007      	b.n	800335e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1c8      	bne.n	800330e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fbfc 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e006      	b.n	80033ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b4:	b5b0      	push	{r4, r5, r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4baf      	ldr	r3, [pc, #700]	; (800369c <UART_SetConfig+0x2e8>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	69f9      	ldr	r1, [r7, #28]
 80033e8:	430b      	orrs	r3, r1
 80033ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4aa4      	ldr	r2, [pc, #656]	; (80036a0 <UART_SetConfig+0x2ec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	4313      	orrs	r3, r2
 800341a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003426:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	69f9      	ldr	r1, [r7, #28]
 8003430:	430b      	orrs	r3, r1
 8003432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	f023 010f 	bic.w	r1, r3, #15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a95      	ldr	r2, [pc, #596]	; (80036a4 <UART_SetConfig+0x2f0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d120      	bne.n	8003496 <UART_SetConfig+0xe2>
 8003454:	4b94      	ldr	r3, [pc, #592]	; (80036a8 <UART_SetConfig+0x2f4>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b03      	cmp	r3, #3
 8003460:	d816      	bhi.n	8003490 <UART_SetConfig+0xdc>
 8003462:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <UART_SetConfig+0xb4>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	08003479 	.word	0x08003479
 800346c:	08003485 	.word	0x08003485
 8003470:	0800347f 	.word	0x0800347f
 8003474:	0800348b 	.word	0x0800348b
 8003478:	2301      	movs	r3, #1
 800347a:	76fb      	strb	r3, [r7, #27]
 800347c:	e0bc      	b.n	80035f8 <UART_SetConfig+0x244>
 800347e:	2302      	movs	r3, #2
 8003480:	76fb      	strb	r3, [r7, #27]
 8003482:	e0b9      	b.n	80035f8 <UART_SetConfig+0x244>
 8003484:	2304      	movs	r3, #4
 8003486:	76fb      	strb	r3, [r7, #27]
 8003488:	e0b6      	b.n	80035f8 <UART_SetConfig+0x244>
 800348a:	2308      	movs	r3, #8
 800348c:	76fb      	strb	r3, [r7, #27]
 800348e:	e0b3      	b.n	80035f8 <UART_SetConfig+0x244>
 8003490:	2310      	movs	r3, #16
 8003492:	76fb      	strb	r3, [r7, #27]
 8003494:	e0b0      	b.n	80035f8 <UART_SetConfig+0x244>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a84      	ldr	r2, [pc, #528]	; (80036ac <UART_SetConfig+0x2f8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d132      	bne.n	8003506 <UART_SetConfig+0x152>
 80034a0:	4b81      	ldr	r3, [pc, #516]	; (80036a8 <UART_SetConfig+0x2f4>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d828      	bhi.n	8003500 <UART_SetConfig+0x14c>
 80034ae:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <UART_SetConfig+0x100>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	08003501 	.word	0x08003501
 80034bc:	08003501 	.word	0x08003501
 80034c0:	08003501 	.word	0x08003501
 80034c4:	080034f5 	.word	0x080034f5
 80034c8:	08003501 	.word	0x08003501
 80034cc:	08003501 	.word	0x08003501
 80034d0:	08003501 	.word	0x08003501
 80034d4:	080034ef 	.word	0x080034ef
 80034d8:	08003501 	.word	0x08003501
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003501 	.word	0x08003501
 80034e4:	080034fb 	.word	0x080034fb
 80034e8:	2300      	movs	r3, #0
 80034ea:	76fb      	strb	r3, [r7, #27]
 80034ec:	e084      	b.n	80035f8 <UART_SetConfig+0x244>
 80034ee:	2302      	movs	r3, #2
 80034f0:	76fb      	strb	r3, [r7, #27]
 80034f2:	e081      	b.n	80035f8 <UART_SetConfig+0x244>
 80034f4:	2304      	movs	r3, #4
 80034f6:	76fb      	strb	r3, [r7, #27]
 80034f8:	e07e      	b.n	80035f8 <UART_SetConfig+0x244>
 80034fa:	2308      	movs	r3, #8
 80034fc:	76fb      	strb	r3, [r7, #27]
 80034fe:	e07b      	b.n	80035f8 <UART_SetConfig+0x244>
 8003500:	2310      	movs	r3, #16
 8003502:	76fb      	strb	r3, [r7, #27]
 8003504:	e078      	b.n	80035f8 <UART_SetConfig+0x244>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a69      	ldr	r2, [pc, #420]	; (80036b0 <UART_SetConfig+0x2fc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d120      	bne.n	8003552 <UART_SetConfig+0x19e>
 8003510:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <UART_SetConfig+0x2f4>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800351a:	2b30      	cmp	r3, #48	; 0x30
 800351c:	d013      	beq.n	8003546 <UART_SetConfig+0x192>
 800351e:	2b30      	cmp	r3, #48	; 0x30
 8003520:	d814      	bhi.n	800354c <UART_SetConfig+0x198>
 8003522:	2b20      	cmp	r3, #32
 8003524:	d009      	beq.n	800353a <UART_SetConfig+0x186>
 8003526:	2b20      	cmp	r3, #32
 8003528:	d810      	bhi.n	800354c <UART_SetConfig+0x198>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <UART_SetConfig+0x180>
 800352e:	2b10      	cmp	r3, #16
 8003530:	d006      	beq.n	8003540 <UART_SetConfig+0x18c>
 8003532:	e00b      	b.n	800354c <UART_SetConfig+0x198>
 8003534:	2300      	movs	r3, #0
 8003536:	76fb      	strb	r3, [r7, #27]
 8003538:	e05e      	b.n	80035f8 <UART_SetConfig+0x244>
 800353a:	2302      	movs	r3, #2
 800353c:	76fb      	strb	r3, [r7, #27]
 800353e:	e05b      	b.n	80035f8 <UART_SetConfig+0x244>
 8003540:	2304      	movs	r3, #4
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e058      	b.n	80035f8 <UART_SetConfig+0x244>
 8003546:	2308      	movs	r3, #8
 8003548:	76fb      	strb	r3, [r7, #27]
 800354a:	e055      	b.n	80035f8 <UART_SetConfig+0x244>
 800354c:	2310      	movs	r3, #16
 800354e:	76fb      	strb	r3, [r7, #27]
 8003550:	e052      	b.n	80035f8 <UART_SetConfig+0x244>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a57      	ldr	r2, [pc, #348]	; (80036b4 <UART_SetConfig+0x300>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d120      	bne.n	800359e <UART_SetConfig+0x1ea>
 800355c:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <UART_SetConfig+0x2f4>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003566:	2bc0      	cmp	r3, #192	; 0xc0
 8003568:	d013      	beq.n	8003592 <UART_SetConfig+0x1de>
 800356a:	2bc0      	cmp	r3, #192	; 0xc0
 800356c:	d814      	bhi.n	8003598 <UART_SetConfig+0x1e4>
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d009      	beq.n	8003586 <UART_SetConfig+0x1d2>
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d810      	bhi.n	8003598 <UART_SetConfig+0x1e4>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <UART_SetConfig+0x1cc>
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d006      	beq.n	800358c <UART_SetConfig+0x1d8>
 800357e:	e00b      	b.n	8003598 <UART_SetConfig+0x1e4>
 8003580:	2300      	movs	r3, #0
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e038      	b.n	80035f8 <UART_SetConfig+0x244>
 8003586:	2302      	movs	r3, #2
 8003588:	76fb      	strb	r3, [r7, #27]
 800358a:	e035      	b.n	80035f8 <UART_SetConfig+0x244>
 800358c:	2304      	movs	r3, #4
 800358e:	76fb      	strb	r3, [r7, #27]
 8003590:	e032      	b.n	80035f8 <UART_SetConfig+0x244>
 8003592:	2308      	movs	r3, #8
 8003594:	76fb      	strb	r3, [r7, #27]
 8003596:	e02f      	b.n	80035f8 <UART_SetConfig+0x244>
 8003598:	2310      	movs	r3, #16
 800359a:	76fb      	strb	r3, [r7, #27]
 800359c:	e02c      	b.n	80035f8 <UART_SetConfig+0x244>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <UART_SetConfig+0x2ec>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d125      	bne.n	80035f4 <UART_SetConfig+0x240>
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <UART_SetConfig+0x2f4>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035b6:	d017      	beq.n	80035e8 <UART_SetConfig+0x234>
 80035b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035bc:	d817      	bhi.n	80035ee <UART_SetConfig+0x23a>
 80035be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c2:	d00b      	beq.n	80035dc <UART_SetConfig+0x228>
 80035c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c8:	d811      	bhi.n	80035ee <UART_SetConfig+0x23a>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <UART_SetConfig+0x222>
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d2:	d006      	beq.n	80035e2 <UART_SetConfig+0x22e>
 80035d4:	e00b      	b.n	80035ee <UART_SetConfig+0x23a>
 80035d6:	2300      	movs	r3, #0
 80035d8:	76fb      	strb	r3, [r7, #27]
 80035da:	e00d      	b.n	80035f8 <UART_SetConfig+0x244>
 80035dc:	2302      	movs	r3, #2
 80035de:	76fb      	strb	r3, [r7, #27]
 80035e0:	e00a      	b.n	80035f8 <UART_SetConfig+0x244>
 80035e2:	2304      	movs	r3, #4
 80035e4:	76fb      	strb	r3, [r7, #27]
 80035e6:	e007      	b.n	80035f8 <UART_SetConfig+0x244>
 80035e8:	2308      	movs	r3, #8
 80035ea:	76fb      	strb	r3, [r7, #27]
 80035ec:	e004      	b.n	80035f8 <UART_SetConfig+0x244>
 80035ee:	2310      	movs	r3, #16
 80035f0:	76fb      	strb	r3, [r7, #27]
 80035f2:	e001      	b.n	80035f8 <UART_SetConfig+0x244>
 80035f4:	2310      	movs	r3, #16
 80035f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <UART_SetConfig+0x2ec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f040 809e 	bne.w	8003740 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003604:	7efb      	ldrb	r3, [r7, #27]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d823      	bhi.n	8003652 <UART_SetConfig+0x29e>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x25c>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003635 	.word	0x08003635
 8003614:	08003653 	.word	0x08003653
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003653 	.word	0x08003653
 8003620:	08003643 	.word	0x08003643
 8003624:	08003653 	.word	0x08003653
 8003628:	08003653 	.word	0x08003653
 800362c:	08003653 	.word	0x08003653
 8003630:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7ff fb7e 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8003638:	6178      	str	r0, [r7, #20]
        break;
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <UART_SetConfig+0x304>)
 800363e:	617b      	str	r3, [r7, #20]
        break;
 8003640:	e00c      	b.n	800365c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7ff fb09 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8003646:	6178      	str	r0, [r7, #20]
        break;
 8003648:	e008      	b.n	800365c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	617b      	str	r3, [r7, #20]
        break;
 8003650:	e004      	b.n	800365c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	76bb      	strb	r3, [r7, #26]
        break;
 800365a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 812c 	beq.w	80038bc <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <UART_SetConfig+0x308>)
 800366a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800366e:	461a      	mov	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fbb3 f3f2 	udiv	r3, r3, r2
 8003676:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	d305      	bcc.n	8003694 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d915      	bls.n	80036c0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	76bb      	strb	r3, [r7, #26]
 8003698:	e110      	b.n	80038bc <UART_SetConfig+0x508>
 800369a:	bf00      	nop
 800369c:	cfff69f3 	.word	0xcfff69f3
 80036a0:	40008000 	.word	0x40008000
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40004400 	.word	0x40004400
 80036b0:	40004800 	.word	0x40004800
 80036b4:	40004c00 	.word	0x40004c00
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	08004fc4 	.word	0x08004fc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	4a85      	ldr	r2, [pc, #532]	; (80038e4 <UART_SetConfig+0x530>)
 80036ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	f7fc fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	020b      	lsls	r3, r1, #8
 80036ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036f2:	0202      	lsls	r2, r0, #8
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6849      	ldr	r1, [r1, #4]
 80036f8:	0849      	lsrs	r1, r1, #1
 80036fa:	4608      	mov	r0, r1
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	1814      	adds	r4, r2, r0
 8003702:	eb43 0501 	adc.w	r5, r3, r1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	4620      	mov	r0, r4
 8003712:	4629      	mov	r1, r5
 8003714:	f7fc fdd4 	bl	80002c0 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003726:	d308      	bcc.n	800373a <UART_SetConfig+0x386>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372e:	d204      	bcs.n	800373a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	e0c0      	b.n	80038bc <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	76bb      	strb	r3, [r7, #26]
 800373e:	e0bd      	b.n	80038bc <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003748:	d164      	bne.n	8003814 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800374a:	7efb      	ldrb	r3, [r7, #27]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d828      	bhi.n	80037a2 <UART_SetConfig+0x3ee>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0x3a4>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800377d 	.word	0x0800377d
 800375c:	08003785 	.word	0x08003785
 8003760:	0800378d 	.word	0x0800378d
 8003764:	080037a3 	.word	0x080037a3
 8003768:	08003793 	.word	0x08003793
 800376c:	080037a3 	.word	0x080037a3
 8003770:	080037a3 	.word	0x080037a3
 8003774:	080037a3 	.word	0x080037a3
 8003778:	0800379b 	.word	0x0800379b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff fada 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8003780:	6178      	str	r0, [r7, #20]
        break;
 8003782:	e013      	b.n	80037ac <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7ff faec 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8003788:	6178      	str	r0, [r7, #20]
        break;
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <UART_SetConfig+0x534>)
 800378e:	617b      	str	r3, [r7, #20]
        break;
 8003790:	e00c      	b.n	80037ac <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7ff fa61 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8003796:	6178      	str	r0, [r7, #20]
        break;
 8003798:	e008      	b.n	80037ac <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	617b      	str	r3, [r7, #20]
        break;
 80037a0:	e004      	b.n	80037ac <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	76bb      	strb	r3, [r7, #26]
        break;
 80037aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 8084 	beq.w	80038bc <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <UART_SetConfig+0x530>)
 80037ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037be:	461a      	mov	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80037c6:	005a      	lsls	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d916      	bls.n	800380e <UART_SetConfig+0x45a>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d212      	bcs.n	800380e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f023 030f 	bic.w	r3, r3, #15
 80037f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	89fb      	ldrh	r3, [r7, #14]
 8003800:	4313      	orrs	r3, r2
 8003802:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	89fa      	ldrh	r2, [r7, #14]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e056      	b.n	80038bc <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	76bb      	strb	r3, [r7, #26]
 8003812:	e053      	b.n	80038bc <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003814:	7efb      	ldrb	r3, [r7, #27]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d827      	bhi.n	800386a <UART_SetConfig+0x4b6>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0x46c>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003845 	.word	0x08003845
 8003824:	0800384d 	.word	0x0800384d
 8003828:	08003855 	.word	0x08003855
 800382c:	0800386b 	.word	0x0800386b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800386b 	.word	0x0800386b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003844:	f7ff fa76 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8003848:	6178      	str	r0, [r7, #20]
        break;
 800384a:	e013      	b.n	8003874 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7ff fa88 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8003850:	6178      	str	r0, [r7, #20]
        break;
 8003852:	e00f      	b.n	8003874 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <UART_SetConfig+0x534>)
 8003856:	617b      	str	r3, [r7, #20]
        break;
 8003858:	e00c      	b.n	8003874 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7ff f9fd 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 800385e:	6178      	str	r0, [r7, #20]
        break;
 8003860:	e008      	b.n	8003874 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	617b      	str	r3, [r7, #20]
        break;
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	76bb      	strb	r3, [r7, #26]
        break;
 8003872:	bf00      	nop
    }

    if (pclk != 0U)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d020      	beq.n	80038bc <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <UART_SetConfig+0x530>)
 8003880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003884:	461a      	mov	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fbb3 f2f2 	udiv	r2, r3, r2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	441a      	add	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b0f      	cmp	r3, #15
 80038a2:	d909      	bls.n	80038b8 <UART_SetConfig+0x504>
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d205      	bcs.n	80038b8 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	e001      	b.n	80038bc <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80038d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bdb0      	pop	{r4, r5, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	08004fc4 	.word	0x08004fc4
 80038e8:	00f42400 	.word	0x00f42400

080038ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01a      	beq.n	8003a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ea:	d10a      	bne.n	8003a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b098      	sub	sp, #96	; 0x60
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a40:	f7fd fa9e 	bl	8000f80 <HAL_GetTick>
 8003a44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d12f      	bne.n	8003ab4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f88e 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d022      	beq.n	8003ab4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a82:	653b      	str	r3, [r7, #80]	; 0x50
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e6      	bne.n	8003a6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e063      	b.n	8003b7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d149      	bne.n	8003b56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aca:	2200      	movs	r2, #0
 8003acc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f857 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03c      	beq.n	8003b56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
 8003afc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e6      	bne.n	8003adc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3308      	adds	r3, #8
 8003b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2e:	61fa      	str	r2, [r7, #28]
 8003b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e012      	b.n	8003b7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3758      	adds	r7, #88	; 0x58
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e04f      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d04b      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fd f9ef 	bl	8000f80 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e04e      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d037      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d034      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d031      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d110      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2208      	movs	r2, #8
 8003be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f838 	bl	8003c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e029      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d111      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f81e 	bl	8003c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e00f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0a0      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b095      	sub	sp, #84	; 0x54
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
 8003c86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e6      	bne.n	8003c66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e3      	bne.n	8003c98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d118      	bne.n	8003d0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0310 	bic.w	r3, r3, #16
 8003cec:	647b      	str	r3, [r7, #68]	; 0x44
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e6      	bne.n	8003cd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d1e:	bf00      	nop
 8003d20:	3754      	adds	r7, #84	; 0x54
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e027      	b.n	8003d90 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e02d      	b.n	8003e10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f84f 	bl	8003e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e02d      	b.n	8003e8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f811 	bl	8003e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d108      	bne.n	8003eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003eb4:	e031      	b.n	8003f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003eba:	2308      	movs	r3, #8
 8003ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	0e5b      	lsrs	r3, r3, #25
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	0f5b      	lsrs	r3, r3, #29
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	7b3a      	ldrb	r2, [r7, #12]
 8003ee2:	4911      	ldr	r1, [pc, #68]	; (8003f28 <UARTEx_SetNbDataToProcess+0x94>)
 8003ee4:	5c8a      	ldrb	r2, [r1, r2]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eea:	7b3a      	ldrb	r2, [r7, #12]
 8003eec:	490f      	ldr	r1, [pc, #60]	; (8003f2c <UARTEx_SetNbDataToProcess+0x98>)
 8003eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	7b7a      	ldrb	r2, [r7, #13]
 8003f00:	4909      	ldr	r1, [pc, #36]	; (8003f28 <UARTEx_SetNbDataToProcess+0x94>)
 8003f02:	5c8a      	ldrb	r2, [r1, r2]
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f08:	7b7a      	ldrb	r2, [r7, #13]
 8003f0a:	4908      	ldr	r1, [pc, #32]	; (8003f2c <UARTEx_SetNbDataToProcess+0x98>)
 8003f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	08004fdc 	.word	0x08004fdc
 8003f2c:	08004fe4 	.word	0x08004fe4

08003f30 <__errno>:
 8003f30:	4b01      	ldr	r3, [pc, #4]	; (8003f38 <__errno+0x8>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	2000000c 	.word	0x2000000c

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4d0d      	ldr	r5, [pc, #52]	; (8003f74 <__libc_init_array+0x38>)
 8003f40:	4c0d      	ldr	r4, [pc, #52]	; (8003f78 <__libc_init_array+0x3c>)
 8003f42:	1b64      	subs	r4, r4, r5
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	2600      	movs	r6, #0
 8003f48:	42a6      	cmp	r6, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	4d0b      	ldr	r5, [pc, #44]	; (8003f7c <__libc_init_array+0x40>)
 8003f4e:	4c0c      	ldr	r4, [pc, #48]	; (8003f80 <__libc_init_array+0x44>)
 8003f50:	f000 ffec 	bl	8004f2c <_init>
 8003f54:	1b64      	subs	r4, r4, r5
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	2600      	movs	r6, #0
 8003f5a:	42a6      	cmp	r6, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f64:	4798      	blx	r3
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6e:	4798      	blx	r3
 8003f70:	3601      	adds	r6, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	0800508c 	.word	0x0800508c
 8003f78:	0800508c 	.word	0x0800508c
 8003f7c:	0800508c 	.word	0x0800508c
 8003f80:	08005090 	.word	0x08005090

08003f84 <memset>:
 8003f84:	4402      	add	r2, r0
 8003f86:	4603      	mov	r3, r0
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <memset+0xa>
 8003f8c:	4770      	bx	lr
 8003f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f92:	e7f9      	b.n	8003f88 <memset+0x4>

08003f94 <iprintf>:
 8003f94:	b40f      	push	{r0, r1, r2, r3}
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <iprintf+0x2c>)
 8003f98:	b513      	push	{r0, r1, r4, lr}
 8003f9a:	681c      	ldr	r4, [r3, #0]
 8003f9c:	b124      	cbz	r4, 8003fa8 <iprintf+0x14>
 8003f9e:	69a3      	ldr	r3, [r4, #24]
 8003fa0:	b913      	cbnz	r3, 8003fa8 <iprintf+0x14>
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f000 fa5e 	bl	8004464 <__sinit>
 8003fa8:	ab05      	add	r3, sp, #20
 8003faa:	9a04      	ldr	r2, [sp, #16]
 8003fac:	68a1      	ldr	r1, [r4, #8]
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 fc2f 	bl	8004814 <_vfiprintf_r>
 8003fb6:	b002      	add	sp, #8
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	b004      	add	sp, #16
 8003fbe:	4770      	bx	lr
 8003fc0:	2000000c 	.word	0x2000000c

08003fc4 <_puts_r>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	460e      	mov	r6, r1
 8003fc8:	4605      	mov	r5, r0
 8003fca:	b118      	cbz	r0, 8003fd4 <_puts_r+0x10>
 8003fcc:	6983      	ldr	r3, [r0, #24]
 8003fce:	b90b      	cbnz	r3, 8003fd4 <_puts_r+0x10>
 8003fd0:	f000 fa48 	bl	8004464 <__sinit>
 8003fd4:	69ab      	ldr	r3, [r5, #24]
 8003fd6:	68ac      	ldr	r4, [r5, #8]
 8003fd8:	b913      	cbnz	r3, 8003fe0 <_puts_r+0x1c>
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f000 fa42 	bl	8004464 <__sinit>
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <_puts_r+0xd0>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d120      	bne.n	8004028 <_puts_r+0x64>
 8003fe6:	686c      	ldr	r4, [r5, #4]
 8003fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fea:	07db      	lsls	r3, r3, #31
 8003fec:	d405      	bmi.n	8003ffa <_puts_r+0x36>
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	0598      	lsls	r0, r3, #22
 8003ff2:	d402      	bmi.n	8003ffa <_puts_r+0x36>
 8003ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ff6:	f000 fad3 	bl	80045a0 <__retarget_lock_acquire_recursive>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	0719      	lsls	r1, r3, #28
 8003ffe:	d51d      	bpl.n	800403c <_puts_r+0x78>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	b1db      	cbz	r3, 800403c <_puts_r+0x78>
 8004004:	3e01      	subs	r6, #1
 8004006:	68a3      	ldr	r3, [r4, #8]
 8004008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800400c:	3b01      	subs	r3, #1
 800400e:	60a3      	str	r3, [r4, #8]
 8004010:	bb39      	cbnz	r1, 8004062 <_puts_r+0x9e>
 8004012:	2b00      	cmp	r3, #0
 8004014:	da38      	bge.n	8004088 <_puts_r+0xc4>
 8004016:	4622      	mov	r2, r4
 8004018:	210a      	movs	r1, #10
 800401a:	4628      	mov	r0, r5
 800401c:	f000 f848 	bl	80040b0 <__swbuf_r>
 8004020:	3001      	adds	r0, #1
 8004022:	d011      	beq.n	8004048 <_puts_r+0x84>
 8004024:	250a      	movs	r5, #10
 8004026:	e011      	b.n	800404c <_puts_r+0x88>
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <_puts_r+0xd4>)
 800402a:	429c      	cmp	r4, r3
 800402c:	d101      	bne.n	8004032 <_puts_r+0x6e>
 800402e:	68ac      	ldr	r4, [r5, #8]
 8004030:	e7da      	b.n	8003fe8 <_puts_r+0x24>
 8004032:	4b1a      	ldr	r3, [pc, #104]	; (800409c <_puts_r+0xd8>)
 8004034:	429c      	cmp	r4, r3
 8004036:	bf08      	it	eq
 8004038:	68ec      	ldreq	r4, [r5, #12]
 800403a:	e7d5      	b.n	8003fe8 <_puts_r+0x24>
 800403c:	4621      	mov	r1, r4
 800403e:	4628      	mov	r0, r5
 8004040:	f000 f888 	bl	8004154 <__swsetup_r>
 8004044:	2800      	cmp	r0, #0
 8004046:	d0dd      	beq.n	8004004 <_puts_r+0x40>
 8004048:	f04f 35ff 	mov.w	r5, #4294967295
 800404c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800404e:	07da      	lsls	r2, r3, #31
 8004050:	d405      	bmi.n	800405e <_puts_r+0x9a>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	059b      	lsls	r3, r3, #22
 8004056:	d402      	bmi.n	800405e <_puts_r+0x9a>
 8004058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405a:	f000 faa2 	bl	80045a2 <__retarget_lock_release_recursive>
 800405e:	4628      	mov	r0, r5
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	2b00      	cmp	r3, #0
 8004064:	da04      	bge.n	8004070 <_puts_r+0xac>
 8004066:	69a2      	ldr	r2, [r4, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	dc06      	bgt.n	800407a <_puts_r+0xb6>
 800406c:	290a      	cmp	r1, #10
 800406e:	d004      	beq.n	800407a <_puts_r+0xb6>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	6022      	str	r2, [r4, #0]
 8004076:	7019      	strb	r1, [r3, #0]
 8004078:	e7c5      	b.n	8004006 <_puts_r+0x42>
 800407a:	4622      	mov	r2, r4
 800407c:	4628      	mov	r0, r5
 800407e:	f000 f817 	bl	80040b0 <__swbuf_r>
 8004082:	3001      	adds	r0, #1
 8004084:	d1bf      	bne.n	8004006 <_puts_r+0x42>
 8004086:	e7df      	b.n	8004048 <_puts_r+0x84>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	250a      	movs	r5, #10
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	6022      	str	r2, [r4, #0]
 8004090:	701d      	strb	r5, [r3, #0]
 8004092:	e7db      	b.n	800404c <_puts_r+0x88>
 8004094:	08005010 	.word	0x08005010
 8004098:	08005030 	.word	0x08005030
 800409c:	08004ff0 	.word	0x08004ff0

080040a0 <puts>:
 80040a0:	4b02      	ldr	r3, [pc, #8]	; (80040ac <puts+0xc>)
 80040a2:	4601      	mov	r1, r0
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f7ff bf8d 	b.w	8003fc4 <_puts_r>
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <__swbuf_r>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	460e      	mov	r6, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	4605      	mov	r5, r0
 80040b8:	b118      	cbz	r0, 80040c2 <__swbuf_r+0x12>
 80040ba:	6983      	ldr	r3, [r0, #24]
 80040bc:	b90b      	cbnz	r3, 80040c2 <__swbuf_r+0x12>
 80040be:	f000 f9d1 	bl	8004464 <__sinit>
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <__swbuf_r+0x98>)
 80040c4:	429c      	cmp	r4, r3
 80040c6:	d12b      	bne.n	8004120 <__swbuf_r+0x70>
 80040c8:	686c      	ldr	r4, [r5, #4]
 80040ca:	69a3      	ldr	r3, [r4, #24]
 80040cc:	60a3      	str	r3, [r4, #8]
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	071a      	lsls	r2, r3, #28
 80040d2:	d52f      	bpl.n	8004134 <__swbuf_r+0x84>
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	b36b      	cbz	r3, 8004134 <__swbuf_r+0x84>
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	1ac0      	subs	r0, r0, r3
 80040de:	6963      	ldr	r3, [r4, #20]
 80040e0:	b2f6      	uxtb	r6, r6
 80040e2:	4283      	cmp	r3, r0
 80040e4:	4637      	mov	r7, r6
 80040e6:	dc04      	bgt.n	80040f2 <__swbuf_r+0x42>
 80040e8:	4621      	mov	r1, r4
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 f926 	bl	800433c <_fflush_r>
 80040f0:	bb30      	cbnz	r0, 8004140 <__swbuf_r+0x90>
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	60a3      	str	r3, [r4, #8]
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	6022      	str	r2, [r4, #0]
 80040fe:	701e      	strb	r6, [r3, #0]
 8004100:	6963      	ldr	r3, [r4, #20]
 8004102:	3001      	adds	r0, #1
 8004104:	4283      	cmp	r3, r0
 8004106:	d004      	beq.n	8004112 <__swbuf_r+0x62>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	07db      	lsls	r3, r3, #31
 800410c:	d506      	bpl.n	800411c <__swbuf_r+0x6c>
 800410e:	2e0a      	cmp	r6, #10
 8004110:	d104      	bne.n	800411c <__swbuf_r+0x6c>
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 f911 	bl	800433c <_fflush_r>
 800411a:	b988      	cbnz	r0, 8004140 <__swbuf_r+0x90>
 800411c:	4638      	mov	r0, r7
 800411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <__swbuf_r+0x9c>)
 8004122:	429c      	cmp	r4, r3
 8004124:	d101      	bne.n	800412a <__swbuf_r+0x7a>
 8004126:	68ac      	ldr	r4, [r5, #8]
 8004128:	e7cf      	b.n	80040ca <__swbuf_r+0x1a>
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <__swbuf_r+0xa0>)
 800412c:	429c      	cmp	r4, r3
 800412e:	bf08      	it	eq
 8004130:	68ec      	ldreq	r4, [r5, #12]
 8004132:	e7ca      	b.n	80040ca <__swbuf_r+0x1a>
 8004134:	4621      	mov	r1, r4
 8004136:	4628      	mov	r0, r5
 8004138:	f000 f80c 	bl	8004154 <__swsetup_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	d0cb      	beq.n	80040d8 <__swbuf_r+0x28>
 8004140:	f04f 37ff 	mov.w	r7, #4294967295
 8004144:	e7ea      	b.n	800411c <__swbuf_r+0x6c>
 8004146:	bf00      	nop
 8004148:	08005010 	.word	0x08005010
 800414c:	08005030 	.word	0x08005030
 8004150:	08004ff0 	.word	0x08004ff0

08004154 <__swsetup_r>:
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <__swsetup_r+0xcc>)
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	681d      	ldr	r5, [r3, #0]
 800415a:	4606      	mov	r6, r0
 800415c:	460c      	mov	r4, r1
 800415e:	b125      	cbz	r5, 800416a <__swsetup_r+0x16>
 8004160:	69ab      	ldr	r3, [r5, #24]
 8004162:	b913      	cbnz	r3, 800416a <__swsetup_r+0x16>
 8004164:	4628      	mov	r0, r5
 8004166:	f000 f97d 	bl	8004464 <__sinit>
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <__swsetup_r+0xd0>)
 800416c:	429c      	cmp	r4, r3
 800416e:	d10f      	bne.n	8004190 <__swsetup_r+0x3c>
 8004170:	686c      	ldr	r4, [r5, #4]
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004178:	0719      	lsls	r1, r3, #28
 800417a:	d42c      	bmi.n	80041d6 <__swsetup_r+0x82>
 800417c:	06dd      	lsls	r5, r3, #27
 800417e:	d411      	bmi.n	80041a4 <__swsetup_r+0x50>
 8004180:	2309      	movs	r3, #9
 8004182:	6033      	str	r3, [r6, #0]
 8004184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	f04f 30ff 	mov.w	r0, #4294967295
 800418e:	e03e      	b.n	800420e <__swsetup_r+0xba>
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <__swsetup_r+0xd4>)
 8004192:	429c      	cmp	r4, r3
 8004194:	d101      	bne.n	800419a <__swsetup_r+0x46>
 8004196:	68ac      	ldr	r4, [r5, #8]
 8004198:	e7eb      	b.n	8004172 <__swsetup_r+0x1e>
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <__swsetup_r+0xd8>)
 800419c:	429c      	cmp	r4, r3
 800419e:	bf08      	it	eq
 80041a0:	68ec      	ldreq	r4, [r5, #12]
 80041a2:	e7e6      	b.n	8004172 <__swsetup_r+0x1e>
 80041a4:	0758      	lsls	r0, r3, #29
 80041a6:	d512      	bpl.n	80041ce <__swsetup_r+0x7a>
 80041a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041aa:	b141      	cbz	r1, 80041be <__swsetup_r+0x6a>
 80041ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b0:	4299      	cmp	r1, r3
 80041b2:	d002      	beq.n	80041ba <__swsetup_r+0x66>
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 fa59 	bl	800466c <_free_r>
 80041ba:	2300      	movs	r3, #0
 80041bc:	6363      	str	r3, [r4, #52]	; 0x34
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	2300      	movs	r3, #0
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	f043 0308 	orr.w	r3, r3, #8
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	b94b      	cbnz	r3, 80041ee <__swsetup_r+0x9a>
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e4:	d003      	beq.n	80041ee <__swsetup_r+0x9a>
 80041e6:	4621      	mov	r1, r4
 80041e8:	4630      	mov	r0, r6
 80041ea:	f000 f9ff 	bl	80045ec <__smakebuf_r>
 80041ee:	89a0      	ldrh	r0, [r4, #12]
 80041f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041f4:	f010 0301 	ands.w	r3, r0, #1
 80041f8:	d00a      	beq.n	8004210 <__swsetup_r+0xbc>
 80041fa:	2300      	movs	r3, #0
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	6963      	ldr	r3, [r4, #20]
 8004200:	425b      	negs	r3, r3
 8004202:	61a3      	str	r3, [r4, #24]
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	b943      	cbnz	r3, 800421a <__swsetup_r+0xc6>
 8004208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800420c:	d1ba      	bne.n	8004184 <__swsetup_r+0x30>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	0781      	lsls	r1, r0, #30
 8004212:	bf58      	it	pl
 8004214:	6963      	ldrpl	r3, [r4, #20]
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	e7f4      	b.n	8004204 <__swsetup_r+0xb0>
 800421a:	2000      	movs	r0, #0
 800421c:	e7f7      	b.n	800420e <__swsetup_r+0xba>
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c
 8004224:	08005010 	.word	0x08005010
 8004228:	08005030 	.word	0x08005030
 800422c:	08004ff0 	.word	0x08004ff0

08004230 <__sflush_r>:
 8004230:	898a      	ldrh	r2, [r1, #12]
 8004232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	0710      	lsls	r0, r2, #28
 800423a:	460c      	mov	r4, r1
 800423c:	d458      	bmi.n	80042f0 <__sflush_r+0xc0>
 800423e:	684b      	ldr	r3, [r1, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	dc05      	bgt.n	8004250 <__sflush_r+0x20>
 8004244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	dc02      	bgt.n	8004250 <__sflush_r+0x20>
 800424a:	2000      	movs	r0, #0
 800424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004252:	2e00      	cmp	r6, #0
 8004254:	d0f9      	beq.n	800424a <__sflush_r+0x1a>
 8004256:	2300      	movs	r3, #0
 8004258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800425c:	682f      	ldr	r7, [r5, #0]
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	d032      	beq.n	80042c8 <__sflush_r+0x98>
 8004262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	075a      	lsls	r2, r3, #29
 8004268:	d505      	bpl.n	8004276 <__sflush_r+0x46>
 800426a:	6863      	ldr	r3, [r4, #4]
 800426c:	1ac0      	subs	r0, r0, r3
 800426e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004270:	b10b      	cbz	r3, 8004276 <__sflush_r+0x46>
 8004272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004274:	1ac0      	subs	r0, r0, r3
 8004276:	2300      	movs	r3, #0
 8004278:	4602      	mov	r2, r0
 800427a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800427c:	6a21      	ldr	r1, [r4, #32]
 800427e:	4628      	mov	r0, r5
 8004280:	47b0      	blx	r6
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	d106      	bne.n	8004296 <__sflush_r+0x66>
 8004288:	6829      	ldr	r1, [r5, #0]
 800428a:	291d      	cmp	r1, #29
 800428c:	d82c      	bhi.n	80042e8 <__sflush_r+0xb8>
 800428e:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <__sflush_r+0x108>)
 8004290:	40ca      	lsrs	r2, r1
 8004292:	07d6      	lsls	r6, r2, #31
 8004294:	d528      	bpl.n	80042e8 <__sflush_r+0xb8>
 8004296:	2200      	movs	r2, #0
 8004298:	6062      	str	r2, [r4, #4]
 800429a:	04d9      	lsls	r1, r3, #19
 800429c:	6922      	ldr	r2, [r4, #16]
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	d504      	bpl.n	80042ac <__sflush_r+0x7c>
 80042a2:	1c42      	adds	r2, r0, #1
 80042a4:	d101      	bne.n	80042aa <__sflush_r+0x7a>
 80042a6:	682b      	ldr	r3, [r5, #0]
 80042a8:	b903      	cbnz	r3, 80042ac <__sflush_r+0x7c>
 80042aa:	6560      	str	r0, [r4, #84]	; 0x54
 80042ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ae:	602f      	str	r7, [r5, #0]
 80042b0:	2900      	cmp	r1, #0
 80042b2:	d0ca      	beq.n	800424a <__sflush_r+0x1a>
 80042b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042b8:	4299      	cmp	r1, r3
 80042ba:	d002      	beq.n	80042c2 <__sflush_r+0x92>
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 f9d5 	bl	800466c <_free_r>
 80042c2:	2000      	movs	r0, #0
 80042c4:	6360      	str	r0, [r4, #52]	; 0x34
 80042c6:	e7c1      	b.n	800424c <__sflush_r+0x1c>
 80042c8:	6a21      	ldr	r1, [r4, #32]
 80042ca:	2301      	movs	r3, #1
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b0      	blx	r6
 80042d0:	1c41      	adds	r1, r0, #1
 80042d2:	d1c7      	bne.n	8004264 <__sflush_r+0x34>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0c4      	beq.n	8004264 <__sflush_r+0x34>
 80042da:	2b1d      	cmp	r3, #29
 80042dc:	d001      	beq.n	80042e2 <__sflush_r+0xb2>
 80042de:	2b16      	cmp	r3, #22
 80042e0:	d101      	bne.n	80042e6 <__sflush_r+0xb6>
 80042e2:	602f      	str	r7, [r5, #0]
 80042e4:	e7b1      	b.n	800424a <__sflush_r+0x1a>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ec:	81a3      	strh	r3, [r4, #12]
 80042ee:	e7ad      	b.n	800424c <__sflush_r+0x1c>
 80042f0:	690f      	ldr	r7, [r1, #16]
 80042f2:	2f00      	cmp	r7, #0
 80042f4:	d0a9      	beq.n	800424a <__sflush_r+0x1a>
 80042f6:	0793      	lsls	r3, r2, #30
 80042f8:	680e      	ldr	r6, [r1, #0]
 80042fa:	bf08      	it	eq
 80042fc:	694b      	ldreq	r3, [r1, #20]
 80042fe:	600f      	str	r7, [r1, #0]
 8004300:	bf18      	it	ne
 8004302:	2300      	movne	r3, #0
 8004304:	eba6 0807 	sub.w	r8, r6, r7
 8004308:	608b      	str	r3, [r1, #8]
 800430a:	f1b8 0f00 	cmp.w	r8, #0
 800430e:	dd9c      	ble.n	800424a <__sflush_r+0x1a>
 8004310:	6a21      	ldr	r1, [r4, #32]
 8004312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004314:	4643      	mov	r3, r8
 8004316:	463a      	mov	r2, r7
 8004318:	4628      	mov	r0, r5
 800431a:	47b0      	blx	r6
 800431c:	2800      	cmp	r0, #0
 800431e:	dc06      	bgt.n	800432e <__sflush_r+0xfe>
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	e78e      	b.n	800424c <__sflush_r+0x1c>
 800432e:	4407      	add	r7, r0
 8004330:	eba8 0800 	sub.w	r8, r8, r0
 8004334:	e7e9      	b.n	800430a <__sflush_r+0xda>
 8004336:	bf00      	nop
 8004338:	20400001 	.word	0x20400001

0800433c <_fflush_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	690b      	ldr	r3, [r1, #16]
 8004340:	4605      	mov	r5, r0
 8004342:	460c      	mov	r4, r1
 8004344:	b913      	cbnz	r3, 800434c <_fflush_r+0x10>
 8004346:	2500      	movs	r5, #0
 8004348:	4628      	mov	r0, r5
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	b118      	cbz	r0, 8004356 <_fflush_r+0x1a>
 800434e:	6983      	ldr	r3, [r0, #24]
 8004350:	b90b      	cbnz	r3, 8004356 <_fflush_r+0x1a>
 8004352:	f000 f887 	bl	8004464 <__sinit>
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <_fflush_r+0x6c>)
 8004358:	429c      	cmp	r4, r3
 800435a:	d11b      	bne.n	8004394 <_fflush_r+0x58>
 800435c:	686c      	ldr	r4, [r5, #4]
 800435e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ef      	beq.n	8004346 <_fflush_r+0xa>
 8004366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004368:	07d0      	lsls	r0, r2, #31
 800436a:	d404      	bmi.n	8004376 <_fflush_r+0x3a>
 800436c:	0599      	lsls	r1, r3, #22
 800436e:	d402      	bmi.n	8004376 <_fflush_r+0x3a>
 8004370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004372:	f000 f915 	bl	80045a0 <__retarget_lock_acquire_recursive>
 8004376:	4628      	mov	r0, r5
 8004378:	4621      	mov	r1, r4
 800437a:	f7ff ff59 	bl	8004230 <__sflush_r>
 800437e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004380:	07da      	lsls	r2, r3, #31
 8004382:	4605      	mov	r5, r0
 8004384:	d4e0      	bmi.n	8004348 <_fflush_r+0xc>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	059b      	lsls	r3, r3, #22
 800438a:	d4dd      	bmi.n	8004348 <_fflush_r+0xc>
 800438c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800438e:	f000 f908 	bl	80045a2 <__retarget_lock_release_recursive>
 8004392:	e7d9      	b.n	8004348 <_fflush_r+0xc>
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <_fflush_r+0x70>)
 8004396:	429c      	cmp	r4, r3
 8004398:	d101      	bne.n	800439e <_fflush_r+0x62>
 800439a:	68ac      	ldr	r4, [r5, #8]
 800439c:	e7df      	b.n	800435e <_fflush_r+0x22>
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <_fflush_r+0x74>)
 80043a0:	429c      	cmp	r4, r3
 80043a2:	bf08      	it	eq
 80043a4:	68ec      	ldreq	r4, [r5, #12]
 80043a6:	e7da      	b.n	800435e <_fflush_r+0x22>
 80043a8:	08005010 	.word	0x08005010
 80043ac:	08005030 	.word	0x08005030
 80043b0:	08004ff0 	.word	0x08004ff0

080043b4 <std>:
 80043b4:	2300      	movs	r3, #0
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	e9c0 3300 	strd	r3, r3, [r0]
 80043be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043c2:	6083      	str	r3, [r0, #8]
 80043c4:	8181      	strh	r1, [r0, #12]
 80043c6:	6643      	str	r3, [r0, #100]	; 0x64
 80043c8:	81c2      	strh	r2, [r0, #14]
 80043ca:	6183      	str	r3, [r0, #24]
 80043cc:	4619      	mov	r1, r3
 80043ce:	2208      	movs	r2, #8
 80043d0:	305c      	adds	r0, #92	; 0x5c
 80043d2:	f7ff fdd7 	bl	8003f84 <memset>
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <std+0x38>)
 80043d8:	6263      	str	r3, [r4, #36]	; 0x24
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <std+0x3c>)
 80043dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <std+0x40>)
 80043e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <std+0x44>)
 80043e4:	6224      	str	r4, [r4, #32]
 80043e6:	6323      	str	r3, [r4, #48]	; 0x30
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	08004dbd 	.word	0x08004dbd
 80043f0:	08004ddf 	.word	0x08004ddf
 80043f4:	08004e17 	.word	0x08004e17
 80043f8:	08004e3b 	.word	0x08004e3b

080043fc <_cleanup_r>:
 80043fc:	4901      	ldr	r1, [pc, #4]	; (8004404 <_cleanup_r+0x8>)
 80043fe:	f000 b8af 	b.w	8004560 <_fwalk_reent>
 8004402:	bf00      	nop
 8004404:	0800433d 	.word	0x0800433d

08004408 <__sfmoreglue>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	1e4a      	subs	r2, r1, #1
 800440c:	2568      	movs	r5, #104	; 0x68
 800440e:	4355      	muls	r5, r2
 8004410:	460e      	mov	r6, r1
 8004412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004416:	f000 f979 	bl	800470c <_malloc_r>
 800441a:	4604      	mov	r4, r0
 800441c:	b140      	cbz	r0, 8004430 <__sfmoreglue+0x28>
 800441e:	2100      	movs	r1, #0
 8004420:	e9c0 1600 	strd	r1, r6, [r0]
 8004424:	300c      	adds	r0, #12
 8004426:	60a0      	str	r0, [r4, #8]
 8004428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800442c:	f7ff fdaa 	bl	8003f84 <memset>
 8004430:	4620      	mov	r0, r4
 8004432:	bd70      	pop	{r4, r5, r6, pc}

08004434 <__sfp_lock_acquire>:
 8004434:	4801      	ldr	r0, [pc, #4]	; (800443c <__sfp_lock_acquire+0x8>)
 8004436:	f000 b8b3 	b.w	80045a0 <__retarget_lock_acquire_recursive>
 800443a:	bf00      	nop
 800443c:	20000220 	.word	0x20000220

08004440 <__sfp_lock_release>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__sfp_lock_release+0x8>)
 8004442:	f000 b8ae 	b.w	80045a2 <__retarget_lock_release_recursive>
 8004446:	bf00      	nop
 8004448:	20000220 	.word	0x20000220

0800444c <__sinit_lock_acquire>:
 800444c:	4801      	ldr	r0, [pc, #4]	; (8004454 <__sinit_lock_acquire+0x8>)
 800444e:	f000 b8a7 	b.w	80045a0 <__retarget_lock_acquire_recursive>
 8004452:	bf00      	nop
 8004454:	2000021b 	.word	0x2000021b

08004458 <__sinit_lock_release>:
 8004458:	4801      	ldr	r0, [pc, #4]	; (8004460 <__sinit_lock_release+0x8>)
 800445a:	f000 b8a2 	b.w	80045a2 <__retarget_lock_release_recursive>
 800445e:	bf00      	nop
 8004460:	2000021b 	.word	0x2000021b

08004464 <__sinit>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4604      	mov	r4, r0
 8004468:	f7ff fff0 	bl	800444c <__sinit_lock_acquire>
 800446c:	69a3      	ldr	r3, [r4, #24]
 800446e:	b11b      	cbz	r3, 8004478 <__sinit+0x14>
 8004470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004474:	f7ff bff0 	b.w	8004458 <__sinit_lock_release>
 8004478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800447c:	6523      	str	r3, [r4, #80]	; 0x50
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <__sinit+0x68>)
 8004480:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <__sinit+0x6c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	62a2      	str	r2, [r4, #40]	; 0x28
 8004486:	42a3      	cmp	r3, r4
 8004488:	bf04      	itt	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	61a3      	streq	r3, [r4, #24]
 800448e:	4620      	mov	r0, r4
 8004490:	f000 f820 	bl	80044d4 <__sfp>
 8004494:	6060      	str	r0, [r4, #4]
 8004496:	4620      	mov	r0, r4
 8004498:	f000 f81c 	bl	80044d4 <__sfp>
 800449c:	60a0      	str	r0, [r4, #8]
 800449e:	4620      	mov	r0, r4
 80044a0:	f000 f818 	bl	80044d4 <__sfp>
 80044a4:	2200      	movs	r2, #0
 80044a6:	60e0      	str	r0, [r4, #12]
 80044a8:	2104      	movs	r1, #4
 80044aa:	6860      	ldr	r0, [r4, #4]
 80044ac:	f7ff ff82 	bl	80043b4 <std>
 80044b0:	68a0      	ldr	r0, [r4, #8]
 80044b2:	2201      	movs	r2, #1
 80044b4:	2109      	movs	r1, #9
 80044b6:	f7ff ff7d 	bl	80043b4 <std>
 80044ba:	68e0      	ldr	r0, [r4, #12]
 80044bc:	2202      	movs	r2, #2
 80044be:	2112      	movs	r1, #18
 80044c0:	f7ff ff78 	bl	80043b4 <std>
 80044c4:	2301      	movs	r3, #1
 80044c6:	61a3      	str	r3, [r4, #24]
 80044c8:	e7d2      	b.n	8004470 <__sinit+0xc>
 80044ca:	bf00      	nop
 80044cc:	08004fec 	.word	0x08004fec
 80044d0:	080043fd 	.word	0x080043fd

080044d4 <__sfp>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	4607      	mov	r7, r0
 80044d8:	f7ff ffac 	bl	8004434 <__sfp_lock_acquire>
 80044dc:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <__sfp+0x84>)
 80044de:	681e      	ldr	r6, [r3, #0]
 80044e0:	69b3      	ldr	r3, [r6, #24]
 80044e2:	b913      	cbnz	r3, 80044ea <__sfp+0x16>
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff ffbd 	bl	8004464 <__sinit>
 80044ea:	3648      	adds	r6, #72	; 0x48
 80044ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	d503      	bpl.n	80044fc <__sfp+0x28>
 80044f4:	6833      	ldr	r3, [r6, #0]
 80044f6:	b30b      	cbz	r3, 800453c <__sfp+0x68>
 80044f8:	6836      	ldr	r6, [r6, #0]
 80044fa:	e7f7      	b.n	80044ec <__sfp+0x18>
 80044fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004500:	b9d5      	cbnz	r5, 8004538 <__sfp+0x64>
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <__sfp+0x88>)
 8004504:	60e3      	str	r3, [r4, #12]
 8004506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800450a:	6665      	str	r5, [r4, #100]	; 0x64
 800450c:	f000 f847 	bl	800459e <__retarget_lock_init_recursive>
 8004510:	f7ff ff96 	bl	8004440 <__sfp_lock_release>
 8004514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800451c:	6025      	str	r5, [r4, #0]
 800451e:	61a5      	str	r5, [r4, #24]
 8004520:	2208      	movs	r2, #8
 8004522:	4629      	mov	r1, r5
 8004524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004528:	f7ff fd2c 	bl	8003f84 <memset>
 800452c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004534:	4620      	mov	r0, r4
 8004536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004538:	3468      	adds	r4, #104	; 0x68
 800453a:	e7d9      	b.n	80044f0 <__sfp+0x1c>
 800453c:	2104      	movs	r1, #4
 800453e:	4638      	mov	r0, r7
 8004540:	f7ff ff62 	bl	8004408 <__sfmoreglue>
 8004544:	4604      	mov	r4, r0
 8004546:	6030      	str	r0, [r6, #0]
 8004548:	2800      	cmp	r0, #0
 800454a:	d1d5      	bne.n	80044f8 <__sfp+0x24>
 800454c:	f7ff ff78 	bl	8004440 <__sfp_lock_release>
 8004550:	230c      	movs	r3, #12
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	e7ee      	b.n	8004534 <__sfp+0x60>
 8004556:	bf00      	nop
 8004558:	08004fec 	.word	0x08004fec
 800455c:	ffff0001 	.word	0xffff0001

08004560 <_fwalk_reent>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	4606      	mov	r6, r0
 8004566:	4688      	mov	r8, r1
 8004568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800456c:	2700      	movs	r7, #0
 800456e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004572:	f1b9 0901 	subs.w	r9, r9, #1
 8004576:	d505      	bpl.n	8004584 <_fwalk_reent+0x24>
 8004578:	6824      	ldr	r4, [r4, #0]
 800457a:	2c00      	cmp	r4, #0
 800457c:	d1f7      	bne.n	800456e <_fwalk_reent+0xe>
 800457e:	4638      	mov	r0, r7
 8004580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004584:	89ab      	ldrh	r3, [r5, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d907      	bls.n	800459a <_fwalk_reent+0x3a>
 800458a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800458e:	3301      	adds	r3, #1
 8004590:	d003      	beq.n	800459a <_fwalk_reent+0x3a>
 8004592:	4629      	mov	r1, r5
 8004594:	4630      	mov	r0, r6
 8004596:	47c0      	blx	r8
 8004598:	4307      	orrs	r7, r0
 800459a:	3568      	adds	r5, #104	; 0x68
 800459c:	e7e9      	b.n	8004572 <_fwalk_reent+0x12>

0800459e <__retarget_lock_init_recursive>:
 800459e:	4770      	bx	lr

080045a0 <__retarget_lock_acquire_recursive>:
 80045a0:	4770      	bx	lr

080045a2 <__retarget_lock_release_recursive>:
 80045a2:	4770      	bx	lr

080045a4 <__swhatbuf_r>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	460e      	mov	r6, r1
 80045a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ac:	2900      	cmp	r1, #0
 80045ae:	b096      	sub	sp, #88	; 0x58
 80045b0:	4614      	mov	r4, r2
 80045b2:	461d      	mov	r5, r3
 80045b4:	da07      	bge.n	80045c6 <__swhatbuf_r+0x22>
 80045b6:	2300      	movs	r3, #0
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	89b3      	ldrh	r3, [r6, #12]
 80045bc:	061a      	lsls	r2, r3, #24
 80045be:	d410      	bmi.n	80045e2 <__swhatbuf_r+0x3e>
 80045c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c4:	e00e      	b.n	80045e4 <__swhatbuf_r+0x40>
 80045c6:	466a      	mov	r2, sp
 80045c8:	f000 fc5e 	bl	8004e88 <_fstat_r>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	dbf2      	blt.n	80045b6 <__swhatbuf_r+0x12>
 80045d0:	9a01      	ldr	r2, [sp, #4]
 80045d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045da:	425a      	negs	r2, r3
 80045dc:	415a      	adcs	r2, r3
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	e7ee      	b.n	80045c0 <__swhatbuf_r+0x1c>
 80045e2:	2340      	movs	r3, #64	; 0x40
 80045e4:	2000      	movs	r0, #0
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	b016      	add	sp, #88	; 0x58
 80045ea:	bd70      	pop	{r4, r5, r6, pc}

080045ec <__smakebuf_r>:
 80045ec:	898b      	ldrh	r3, [r1, #12]
 80045ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045f0:	079d      	lsls	r5, r3, #30
 80045f2:	4606      	mov	r6, r0
 80045f4:	460c      	mov	r4, r1
 80045f6:	d507      	bpl.n	8004608 <__smakebuf_r+0x1c>
 80045f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	2301      	movs	r3, #1
 8004602:	6163      	str	r3, [r4, #20]
 8004604:	b002      	add	sp, #8
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	ab01      	add	r3, sp, #4
 800460a:	466a      	mov	r2, sp
 800460c:	f7ff ffca 	bl	80045a4 <__swhatbuf_r>
 8004610:	9900      	ldr	r1, [sp, #0]
 8004612:	4605      	mov	r5, r0
 8004614:	4630      	mov	r0, r6
 8004616:	f000 f879 	bl	800470c <_malloc_r>
 800461a:	b948      	cbnz	r0, 8004630 <__smakebuf_r+0x44>
 800461c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004620:	059a      	lsls	r2, r3, #22
 8004622:	d4ef      	bmi.n	8004604 <__smakebuf_r+0x18>
 8004624:	f023 0303 	bic.w	r3, r3, #3
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	81a3      	strh	r3, [r4, #12]
 800462e:	e7e3      	b.n	80045f8 <__smakebuf_r+0xc>
 8004630:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <__smakebuf_r+0x7c>)
 8004632:	62b3      	str	r3, [r6, #40]	; 0x28
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	6020      	str	r0, [r4, #0]
 8004638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463c:	81a3      	strh	r3, [r4, #12]
 800463e:	9b00      	ldr	r3, [sp, #0]
 8004640:	6163      	str	r3, [r4, #20]
 8004642:	9b01      	ldr	r3, [sp, #4]
 8004644:	6120      	str	r0, [r4, #16]
 8004646:	b15b      	cbz	r3, 8004660 <__smakebuf_r+0x74>
 8004648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800464c:	4630      	mov	r0, r6
 800464e:	f000 fc2d 	bl	8004eac <_isatty_r>
 8004652:	b128      	cbz	r0, 8004660 <__smakebuf_r+0x74>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	89a0      	ldrh	r0, [r4, #12]
 8004662:	4305      	orrs	r5, r0
 8004664:	81a5      	strh	r5, [r4, #12]
 8004666:	e7cd      	b.n	8004604 <__smakebuf_r+0x18>
 8004668:	080043fd 	.word	0x080043fd

0800466c <_free_r>:
 800466c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800466e:	2900      	cmp	r1, #0
 8004670:	d048      	beq.n	8004704 <_free_r+0x98>
 8004672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004676:	9001      	str	r0, [sp, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f1a1 0404 	sub.w	r4, r1, #4
 800467e:	bfb8      	it	lt
 8004680:	18e4      	addlt	r4, r4, r3
 8004682:	f000 fc35 	bl	8004ef0 <__malloc_lock>
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <_free_r+0x9c>)
 8004688:	9801      	ldr	r0, [sp, #4]
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	4615      	mov	r5, r2
 800468e:	b933      	cbnz	r3, 800469e <_free_r+0x32>
 8004690:	6063      	str	r3, [r4, #4]
 8004692:	6014      	str	r4, [r2, #0]
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800469a:	f000 bc2f 	b.w	8004efc <__malloc_unlock>
 800469e:	42a3      	cmp	r3, r4
 80046a0:	d90b      	bls.n	80046ba <_free_r+0x4e>
 80046a2:	6821      	ldr	r1, [r4, #0]
 80046a4:	1862      	adds	r2, r4, r1
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf04      	itt	eq
 80046aa:	681a      	ldreq	r2, [r3, #0]
 80046ac:	685b      	ldreq	r3, [r3, #4]
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	bf04      	itt	eq
 80046b2:	1852      	addeq	r2, r2, r1
 80046b4:	6022      	streq	r2, [r4, #0]
 80046b6:	602c      	str	r4, [r5, #0]
 80046b8:	e7ec      	b.n	8004694 <_free_r+0x28>
 80046ba:	461a      	mov	r2, r3
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b10b      	cbz	r3, 80046c4 <_free_r+0x58>
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d9fa      	bls.n	80046ba <_free_r+0x4e>
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	1855      	adds	r5, r2, r1
 80046c8:	42a5      	cmp	r5, r4
 80046ca:	d10b      	bne.n	80046e4 <_free_r+0x78>
 80046cc:	6824      	ldr	r4, [r4, #0]
 80046ce:	4421      	add	r1, r4
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	d1dd      	bne.n	8004694 <_free_r+0x28>
 80046d8:	681c      	ldr	r4, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	6053      	str	r3, [r2, #4]
 80046de:	4421      	add	r1, r4
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	e7d7      	b.n	8004694 <_free_r+0x28>
 80046e4:	d902      	bls.n	80046ec <_free_r+0x80>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6003      	str	r3, [r0, #0]
 80046ea:	e7d3      	b.n	8004694 <_free_r+0x28>
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	1961      	adds	r1, r4, r5
 80046f0:	428b      	cmp	r3, r1
 80046f2:	bf04      	itt	eq
 80046f4:	6819      	ldreq	r1, [r3, #0]
 80046f6:	685b      	ldreq	r3, [r3, #4]
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	bf04      	itt	eq
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	6054      	str	r4, [r2, #4]
 8004702:	e7c7      	b.n	8004694 <_free_r+0x28>
 8004704:	b003      	add	sp, #12
 8004706:	bd30      	pop	{r4, r5, pc}
 8004708:	20000090 	.word	0x20000090

0800470c <_malloc_r>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	1ccd      	adds	r5, r1, #3
 8004710:	f025 0503 	bic.w	r5, r5, #3
 8004714:	3508      	adds	r5, #8
 8004716:	2d0c      	cmp	r5, #12
 8004718:	bf38      	it	cc
 800471a:	250c      	movcc	r5, #12
 800471c:	2d00      	cmp	r5, #0
 800471e:	4606      	mov	r6, r0
 8004720:	db01      	blt.n	8004726 <_malloc_r+0x1a>
 8004722:	42a9      	cmp	r1, r5
 8004724:	d903      	bls.n	800472e <_malloc_r+0x22>
 8004726:	230c      	movs	r3, #12
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	2000      	movs	r0, #0
 800472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472e:	f000 fbdf 	bl	8004ef0 <__malloc_lock>
 8004732:	4921      	ldr	r1, [pc, #132]	; (80047b8 <_malloc_r+0xac>)
 8004734:	680a      	ldr	r2, [r1, #0]
 8004736:	4614      	mov	r4, r2
 8004738:	b99c      	cbnz	r4, 8004762 <_malloc_r+0x56>
 800473a:	4f20      	ldr	r7, [pc, #128]	; (80047bc <_malloc_r+0xb0>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	b923      	cbnz	r3, 800474a <_malloc_r+0x3e>
 8004740:	4621      	mov	r1, r4
 8004742:	4630      	mov	r0, r6
 8004744:	f000 fb2a 	bl	8004d9c <_sbrk_r>
 8004748:	6038      	str	r0, [r7, #0]
 800474a:	4629      	mov	r1, r5
 800474c:	4630      	mov	r0, r6
 800474e:	f000 fb25 	bl	8004d9c <_sbrk_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d123      	bne.n	800479e <_malloc_r+0x92>
 8004756:	230c      	movs	r3, #12
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	4630      	mov	r0, r6
 800475c:	f000 fbce 	bl	8004efc <__malloc_unlock>
 8004760:	e7e3      	b.n	800472a <_malloc_r+0x1e>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	1b5b      	subs	r3, r3, r5
 8004766:	d417      	bmi.n	8004798 <_malloc_r+0x8c>
 8004768:	2b0b      	cmp	r3, #11
 800476a:	d903      	bls.n	8004774 <_malloc_r+0x68>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	441c      	add	r4, r3
 8004770:	6025      	str	r5, [r4, #0]
 8004772:	e004      	b.n	800477e <_malloc_r+0x72>
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	42a2      	cmp	r2, r4
 8004778:	bf0c      	ite	eq
 800477a:	600b      	streq	r3, [r1, #0]
 800477c:	6053      	strne	r3, [r2, #4]
 800477e:	4630      	mov	r0, r6
 8004780:	f000 fbbc 	bl	8004efc <__malloc_unlock>
 8004784:	f104 000b 	add.w	r0, r4, #11
 8004788:	1d23      	adds	r3, r4, #4
 800478a:	f020 0007 	bic.w	r0, r0, #7
 800478e:	1ac2      	subs	r2, r0, r3
 8004790:	d0cc      	beq.n	800472c <_malloc_r+0x20>
 8004792:	1a1b      	subs	r3, r3, r0
 8004794:	50a3      	str	r3, [r4, r2]
 8004796:	e7c9      	b.n	800472c <_malloc_r+0x20>
 8004798:	4622      	mov	r2, r4
 800479a:	6864      	ldr	r4, [r4, #4]
 800479c:	e7cc      	b.n	8004738 <_malloc_r+0x2c>
 800479e:	1cc4      	adds	r4, r0, #3
 80047a0:	f024 0403 	bic.w	r4, r4, #3
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d0e3      	beq.n	8004770 <_malloc_r+0x64>
 80047a8:	1a21      	subs	r1, r4, r0
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 faf6 	bl	8004d9c <_sbrk_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1dd      	bne.n	8004770 <_malloc_r+0x64>
 80047b4:	e7cf      	b.n	8004756 <_malloc_r+0x4a>
 80047b6:	bf00      	nop
 80047b8:	20000090 	.word	0x20000090
 80047bc:	20000094 	.word	0x20000094

080047c0 <__sfputc_r>:
 80047c0:	6893      	ldr	r3, [r2, #8]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	b410      	push	{r4}
 80047c8:	6093      	str	r3, [r2, #8]
 80047ca:	da08      	bge.n	80047de <__sfputc_r+0x1e>
 80047cc:	6994      	ldr	r4, [r2, #24]
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	db01      	blt.n	80047d6 <__sfputc_r+0x16>
 80047d2:	290a      	cmp	r1, #10
 80047d4:	d103      	bne.n	80047de <__sfputc_r+0x1e>
 80047d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047da:	f7ff bc69 	b.w	80040b0 <__swbuf_r>
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	1c58      	adds	r0, r3, #1
 80047e2:	6010      	str	r0, [r2, #0]
 80047e4:	7019      	strb	r1, [r3, #0]
 80047e6:	4608      	mov	r0, r1
 80047e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <__sfputs_r>:
 80047ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	18d5      	adds	r5, r2, r3
 80047f8:	42ac      	cmp	r4, r5
 80047fa:	d101      	bne.n	8004800 <__sfputs_r+0x12>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e007      	b.n	8004810 <__sfputs_r+0x22>
 8004800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004804:	463a      	mov	r2, r7
 8004806:	4630      	mov	r0, r6
 8004808:	f7ff ffda 	bl	80047c0 <__sfputc_r>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d1f3      	bne.n	80047f8 <__sfputs_r+0xa>
 8004810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004814 <_vfiprintf_r>:
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	460d      	mov	r5, r1
 800481a:	b09d      	sub	sp, #116	; 0x74
 800481c:	4614      	mov	r4, r2
 800481e:	4698      	mov	r8, r3
 8004820:	4606      	mov	r6, r0
 8004822:	b118      	cbz	r0, 800482c <_vfiprintf_r+0x18>
 8004824:	6983      	ldr	r3, [r0, #24]
 8004826:	b90b      	cbnz	r3, 800482c <_vfiprintf_r+0x18>
 8004828:	f7ff fe1c 	bl	8004464 <__sinit>
 800482c:	4b89      	ldr	r3, [pc, #548]	; (8004a54 <_vfiprintf_r+0x240>)
 800482e:	429d      	cmp	r5, r3
 8004830:	d11b      	bne.n	800486a <_vfiprintf_r+0x56>
 8004832:	6875      	ldr	r5, [r6, #4]
 8004834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004836:	07d9      	lsls	r1, r3, #31
 8004838:	d405      	bmi.n	8004846 <_vfiprintf_r+0x32>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	059a      	lsls	r2, r3, #22
 800483e:	d402      	bmi.n	8004846 <_vfiprintf_r+0x32>
 8004840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004842:	f7ff fead 	bl	80045a0 <__retarget_lock_acquire_recursive>
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	d501      	bpl.n	8004850 <_vfiprintf_r+0x3c>
 800484c:	692b      	ldr	r3, [r5, #16]
 800484e:	b9eb      	cbnz	r3, 800488c <_vfiprintf_r+0x78>
 8004850:	4629      	mov	r1, r5
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff fc7e 	bl	8004154 <__swsetup_r>
 8004858:	b1c0      	cbz	r0, 800488c <_vfiprintf_r+0x78>
 800485a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800485c:	07dc      	lsls	r4, r3, #31
 800485e:	d50e      	bpl.n	800487e <_vfiprintf_r+0x6a>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	b01d      	add	sp, #116	; 0x74
 8004866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486a:	4b7b      	ldr	r3, [pc, #492]	; (8004a58 <_vfiprintf_r+0x244>)
 800486c:	429d      	cmp	r5, r3
 800486e:	d101      	bne.n	8004874 <_vfiprintf_r+0x60>
 8004870:	68b5      	ldr	r5, [r6, #8]
 8004872:	e7df      	b.n	8004834 <_vfiprintf_r+0x20>
 8004874:	4b79      	ldr	r3, [pc, #484]	; (8004a5c <_vfiprintf_r+0x248>)
 8004876:	429d      	cmp	r5, r3
 8004878:	bf08      	it	eq
 800487a:	68f5      	ldreq	r5, [r6, #12]
 800487c:	e7da      	b.n	8004834 <_vfiprintf_r+0x20>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	0598      	lsls	r0, r3, #22
 8004882:	d4ed      	bmi.n	8004860 <_vfiprintf_r+0x4c>
 8004884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004886:	f7ff fe8c 	bl	80045a2 <__retarget_lock_release_recursive>
 800488a:	e7e9      	b.n	8004860 <_vfiprintf_r+0x4c>
 800488c:	2300      	movs	r3, #0
 800488e:	9309      	str	r3, [sp, #36]	; 0x24
 8004890:	2320      	movs	r3, #32
 8004892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004896:	f8cd 800c 	str.w	r8, [sp, #12]
 800489a:	2330      	movs	r3, #48	; 0x30
 800489c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a60 <_vfiprintf_r+0x24c>
 80048a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048a4:	f04f 0901 	mov.w	r9, #1
 80048a8:	4623      	mov	r3, r4
 80048aa:	469a      	mov	sl, r3
 80048ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b0:	b10a      	cbz	r2, 80048b6 <_vfiprintf_r+0xa2>
 80048b2:	2a25      	cmp	r2, #37	; 0x25
 80048b4:	d1f9      	bne.n	80048aa <_vfiprintf_r+0x96>
 80048b6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ba:	d00b      	beq.n	80048d4 <_vfiprintf_r+0xc0>
 80048bc:	465b      	mov	r3, fp
 80048be:	4622      	mov	r2, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ff93 	bl	80047ee <__sfputs_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	f000 80aa 	beq.w	8004a22 <_vfiprintf_r+0x20e>
 80048ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d0:	445a      	add	r2, fp
 80048d2:	9209      	str	r2, [sp, #36]	; 0x24
 80048d4:	f89a 3000 	ldrb.w	r3, [sl]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80a2 	beq.w	8004a22 <_vfiprintf_r+0x20e>
 80048de:	2300      	movs	r3, #0
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e8:	f10a 0a01 	add.w	sl, sl, #1
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9307      	str	r3, [sp, #28]
 80048f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f4:	931a      	str	r3, [sp, #104]	; 0x68
 80048f6:	4654      	mov	r4, sl
 80048f8:	2205      	movs	r2, #5
 80048fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fe:	4858      	ldr	r0, [pc, #352]	; (8004a60 <_vfiprintf_r+0x24c>)
 8004900:	f7fb fc8e 	bl	8000220 <memchr>
 8004904:	9a04      	ldr	r2, [sp, #16]
 8004906:	b9d8      	cbnz	r0, 8004940 <_vfiprintf_r+0x12c>
 8004908:	06d1      	lsls	r1, r2, #27
 800490a:	bf44      	itt	mi
 800490c:	2320      	movmi	r3, #32
 800490e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004912:	0713      	lsls	r3, r2, #28
 8004914:	bf44      	itt	mi
 8004916:	232b      	movmi	r3, #43	; 0x2b
 8004918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491c:	f89a 3000 	ldrb.w	r3, [sl]
 8004920:	2b2a      	cmp	r3, #42	; 0x2a
 8004922:	d015      	beq.n	8004950 <_vfiprintf_r+0x13c>
 8004924:	9a07      	ldr	r2, [sp, #28]
 8004926:	4654      	mov	r4, sl
 8004928:	2000      	movs	r0, #0
 800492a:	f04f 0c0a 	mov.w	ip, #10
 800492e:	4621      	mov	r1, r4
 8004930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004934:	3b30      	subs	r3, #48	; 0x30
 8004936:	2b09      	cmp	r3, #9
 8004938:	d94e      	bls.n	80049d8 <_vfiprintf_r+0x1c4>
 800493a:	b1b0      	cbz	r0, 800496a <_vfiprintf_r+0x156>
 800493c:	9207      	str	r2, [sp, #28]
 800493e:	e014      	b.n	800496a <_vfiprintf_r+0x156>
 8004940:	eba0 0308 	sub.w	r3, r0, r8
 8004944:	fa09 f303 	lsl.w	r3, r9, r3
 8004948:	4313      	orrs	r3, r2
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	46a2      	mov	sl, r4
 800494e:	e7d2      	b.n	80048f6 <_vfiprintf_r+0xe2>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	1d19      	adds	r1, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	9103      	str	r1, [sp, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	bfbb      	ittet	lt
 800495c:	425b      	neglt	r3, r3
 800495e:	f042 0202 	orrlt.w	r2, r2, #2
 8004962:	9307      	strge	r3, [sp, #28]
 8004964:	9307      	strlt	r3, [sp, #28]
 8004966:	bfb8      	it	lt
 8004968:	9204      	strlt	r2, [sp, #16]
 800496a:	7823      	ldrb	r3, [r4, #0]
 800496c:	2b2e      	cmp	r3, #46	; 0x2e
 800496e:	d10c      	bne.n	800498a <_vfiprintf_r+0x176>
 8004970:	7863      	ldrb	r3, [r4, #1]
 8004972:	2b2a      	cmp	r3, #42	; 0x2a
 8004974:	d135      	bne.n	80049e2 <_vfiprintf_r+0x1ce>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	9203      	str	r2, [sp, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	f04f 33ff 	movlt.w	r3, #4294967295
 8004986:	3402      	adds	r4, #2
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a70 <_vfiprintf_r+0x25c>
 800498e:	7821      	ldrb	r1, [r4, #0]
 8004990:	2203      	movs	r2, #3
 8004992:	4650      	mov	r0, sl
 8004994:	f7fb fc44 	bl	8000220 <memchr>
 8004998:	b140      	cbz	r0, 80049ac <_vfiprintf_r+0x198>
 800499a:	2340      	movs	r3, #64	; 0x40
 800499c:	eba0 000a 	sub.w	r0, r0, sl
 80049a0:	fa03 f000 	lsl.w	r0, r3, r0
 80049a4:	9b04      	ldr	r3, [sp, #16]
 80049a6:	4303      	orrs	r3, r0
 80049a8:	3401      	adds	r4, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b0:	482c      	ldr	r0, [pc, #176]	; (8004a64 <_vfiprintf_r+0x250>)
 80049b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049b6:	2206      	movs	r2, #6
 80049b8:	f7fb fc32 	bl	8000220 <memchr>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d03f      	beq.n	8004a40 <_vfiprintf_r+0x22c>
 80049c0:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <_vfiprintf_r+0x254>)
 80049c2:	bb1b      	cbnz	r3, 8004a0c <_vfiprintf_r+0x1f8>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	3307      	adds	r3, #7
 80049c8:	f023 0307 	bic.w	r3, r3, #7
 80049cc:	3308      	adds	r3, #8
 80049ce:	9303      	str	r3, [sp, #12]
 80049d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d2:	443b      	add	r3, r7
 80049d4:	9309      	str	r3, [sp, #36]	; 0x24
 80049d6:	e767      	b.n	80048a8 <_vfiprintf_r+0x94>
 80049d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049dc:	460c      	mov	r4, r1
 80049de:	2001      	movs	r0, #1
 80049e0:	e7a5      	b.n	800492e <_vfiprintf_r+0x11a>
 80049e2:	2300      	movs	r3, #0
 80049e4:	3401      	adds	r4, #1
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	4619      	mov	r1, r3
 80049ea:	f04f 0c0a 	mov.w	ip, #10
 80049ee:	4620      	mov	r0, r4
 80049f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f4:	3a30      	subs	r2, #48	; 0x30
 80049f6:	2a09      	cmp	r2, #9
 80049f8:	d903      	bls.n	8004a02 <_vfiprintf_r+0x1ee>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0c5      	beq.n	800498a <_vfiprintf_r+0x176>
 80049fe:	9105      	str	r1, [sp, #20]
 8004a00:	e7c3      	b.n	800498a <_vfiprintf_r+0x176>
 8004a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a06:	4604      	mov	r4, r0
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e7f0      	b.n	80049ee <_vfiprintf_r+0x1da>
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	462a      	mov	r2, r5
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <_vfiprintf_r+0x258>)
 8004a14:	a904      	add	r1, sp, #16
 8004a16:	4630      	mov	r0, r6
 8004a18:	f3af 8000 	nop.w
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	1c78      	adds	r0, r7, #1
 8004a20:	d1d6      	bne.n	80049d0 <_vfiprintf_r+0x1bc>
 8004a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a24:	07d9      	lsls	r1, r3, #31
 8004a26:	d405      	bmi.n	8004a34 <_vfiprintf_r+0x220>
 8004a28:	89ab      	ldrh	r3, [r5, #12]
 8004a2a:	059a      	lsls	r2, r3, #22
 8004a2c:	d402      	bmi.n	8004a34 <_vfiprintf_r+0x220>
 8004a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a30:	f7ff fdb7 	bl	80045a2 <__retarget_lock_release_recursive>
 8004a34:	89ab      	ldrh	r3, [r5, #12]
 8004a36:	065b      	lsls	r3, r3, #25
 8004a38:	f53f af12 	bmi.w	8004860 <_vfiprintf_r+0x4c>
 8004a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3e:	e711      	b.n	8004864 <_vfiprintf_r+0x50>
 8004a40:	ab03      	add	r3, sp, #12
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	462a      	mov	r2, r5
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <_vfiprintf_r+0x258>)
 8004a48:	a904      	add	r1, sp, #16
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f000 f880 	bl	8004b50 <_printf_i>
 8004a50:	e7e4      	b.n	8004a1c <_vfiprintf_r+0x208>
 8004a52:	bf00      	nop
 8004a54:	08005010 	.word	0x08005010
 8004a58:	08005030 	.word	0x08005030
 8004a5c:	08004ff0 	.word	0x08004ff0
 8004a60:	08005050 	.word	0x08005050
 8004a64:	0800505a 	.word	0x0800505a
 8004a68:	00000000 	.word	0x00000000
 8004a6c:	080047ef 	.word	0x080047ef
 8004a70:	08005056 	.word	0x08005056

08004a74 <_printf_common>:
 8004a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	4616      	mov	r6, r2
 8004a7a:	4699      	mov	r9, r3
 8004a7c:	688a      	ldr	r2, [r1, #8]
 8004a7e:	690b      	ldr	r3, [r1, #16]
 8004a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a84:	4293      	cmp	r3, r2
 8004a86:	bfb8      	it	lt
 8004a88:	4613      	movlt	r3, r2
 8004a8a:	6033      	str	r3, [r6, #0]
 8004a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a90:	4607      	mov	r7, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	b10a      	cbz	r2, 8004a9a <_printf_common+0x26>
 8004a96:	3301      	adds	r3, #1
 8004a98:	6033      	str	r3, [r6, #0]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	0699      	lsls	r1, r3, #26
 8004a9e:	bf42      	ittt	mi
 8004aa0:	6833      	ldrmi	r3, [r6, #0]
 8004aa2:	3302      	addmi	r3, #2
 8004aa4:	6033      	strmi	r3, [r6, #0]
 8004aa6:	6825      	ldr	r5, [r4, #0]
 8004aa8:	f015 0506 	ands.w	r5, r5, #6
 8004aac:	d106      	bne.n	8004abc <_printf_common+0x48>
 8004aae:	f104 0a19 	add.w	sl, r4, #25
 8004ab2:	68e3      	ldr	r3, [r4, #12]
 8004ab4:	6832      	ldr	r2, [r6, #0]
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	42ab      	cmp	r3, r5
 8004aba:	dc26      	bgt.n	8004b0a <_printf_common+0x96>
 8004abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ac0:	1e13      	subs	r3, r2, #0
 8004ac2:	6822      	ldr	r2, [r4, #0]
 8004ac4:	bf18      	it	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	0692      	lsls	r2, r2, #26
 8004aca:	d42b      	bmi.n	8004b24 <_printf_common+0xb0>
 8004acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c0      	blx	r8
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d01e      	beq.n	8004b18 <_printf_common+0xa4>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	68e5      	ldr	r5, [r4, #12]
 8004ade:	6832      	ldr	r2, [r6, #0]
 8004ae0:	f003 0306 	and.w	r3, r3, #6
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	bf08      	it	eq
 8004ae8:	1aad      	subeq	r5, r5, r2
 8004aea:	68a3      	ldr	r3, [r4, #8]
 8004aec:	6922      	ldr	r2, [r4, #16]
 8004aee:	bf0c      	ite	eq
 8004af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af4:	2500      	movne	r5, #0
 8004af6:	4293      	cmp	r3, r2
 8004af8:	bfc4      	itt	gt
 8004afa:	1a9b      	subgt	r3, r3, r2
 8004afc:	18ed      	addgt	r5, r5, r3
 8004afe:	2600      	movs	r6, #0
 8004b00:	341a      	adds	r4, #26
 8004b02:	42b5      	cmp	r5, r6
 8004b04:	d11a      	bne.n	8004b3c <_printf_common+0xc8>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e008      	b.n	8004b1c <_printf_common+0xa8>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	4652      	mov	r2, sl
 8004b0e:	4649      	mov	r1, r9
 8004b10:	4638      	mov	r0, r7
 8004b12:	47c0      	blx	r8
 8004b14:	3001      	adds	r0, #1
 8004b16:	d103      	bne.n	8004b20 <_printf_common+0xac>
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b20:	3501      	adds	r5, #1
 8004b22:	e7c6      	b.n	8004ab2 <_printf_common+0x3e>
 8004b24:	18e1      	adds	r1, r4, r3
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	2030      	movs	r0, #48	; 0x30
 8004b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b2e:	4422      	add	r2, r4
 8004b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b38:	3302      	adds	r3, #2
 8004b3a:	e7c7      	b.n	8004acc <_printf_common+0x58>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4622      	mov	r2, r4
 8004b40:	4649      	mov	r1, r9
 8004b42:	4638      	mov	r0, r7
 8004b44:	47c0      	blx	r8
 8004b46:	3001      	adds	r0, #1
 8004b48:	d0e6      	beq.n	8004b18 <_printf_common+0xa4>
 8004b4a:	3601      	adds	r6, #1
 8004b4c:	e7d9      	b.n	8004b02 <_printf_common+0x8e>
	...

08004b50 <_printf_i>:
 8004b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	460c      	mov	r4, r1
 8004b56:	4691      	mov	r9, r2
 8004b58:	7e27      	ldrb	r7, [r4, #24]
 8004b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b5c:	2f78      	cmp	r7, #120	; 0x78
 8004b5e:	4680      	mov	r8, r0
 8004b60:	469a      	mov	sl, r3
 8004b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b66:	d807      	bhi.n	8004b78 <_printf_i+0x28>
 8004b68:	2f62      	cmp	r7, #98	; 0x62
 8004b6a:	d80a      	bhi.n	8004b82 <_printf_i+0x32>
 8004b6c:	2f00      	cmp	r7, #0
 8004b6e:	f000 80d8 	beq.w	8004d22 <_printf_i+0x1d2>
 8004b72:	2f58      	cmp	r7, #88	; 0x58
 8004b74:	f000 80a3 	beq.w	8004cbe <_printf_i+0x16e>
 8004b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b80:	e03a      	b.n	8004bf8 <_printf_i+0xa8>
 8004b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b86:	2b15      	cmp	r3, #21
 8004b88:	d8f6      	bhi.n	8004b78 <_printf_i+0x28>
 8004b8a:	a001      	add	r0, pc, #4	; (adr r0, 8004b90 <_printf_i+0x40>)
 8004b8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004bfd 	.word	0x08004bfd
 8004b98:	08004b79 	.word	0x08004b79
 8004b9c:	08004b79 	.word	0x08004b79
 8004ba0:	08004b79 	.word	0x08004b79
 8004ba4:	08004b79 	.word	0x08004b79
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004b79 	.word	0x08004b79
 8004bb0:	08004b79 	.word	0x08004b79
 8004bb4:	08004b79 	.word	0x08004b79
 8004bb8:	08004b79 	.word	0x08004b79
 8004bbc:	08004d09 	.word	0x08004d09
 8004bc0:	08004c2d 	.word	0x08004c2d
 8004bc4:	08004ceb 	.word	0x08004ceb
 8004bc8:	08004b79 	.word	0x08004b79
 8004bcc:	08004b79 	.word	0x08004b79
 8004bd0:	08004d2b 	.word	0x08004d2b
 8004bd4:	08004b79 	.word	0x08004b79
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004b79 	.word	0x08004b79
 8004be0:	08004b79 	.word	0x08004b79
 8004be4:	08004cf3 	.word	0x08004cf3
 8004be8:	680b      	ldr	r3, [r1, #0]
 8004bea:	1d1a      	adds	r2, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	600a      	str	r2, [r1, #0]
 8004bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0a3      	b.n	8004d44 <_printf_i+0x1f4>
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	6808      	ldr	r0, [r1, #0]
 8004c00:	062e      	lsls	r6, r5, #24
 8004c02:	f100 0304 	add.w	r3, r0, #4
 8004c06:	d50a      	bpl.n	8004c1e <_printf_i+0xce>
 8004c08:	6805      	ldr	r5, [r0, #0]
 8004c0a:	600b      	str	r3, [r1, #0]
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	da03      	bge.n	8004c18 <_printf_i+0xc8>
 8004c10:	232d      	movs	r3, #45	; 0x2d
 8004c12:	426d      	negs	r5, r5
 8004c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c18:	485e      	ldr	r0, [pc, #376]	; (8004d94 <_printf_i+0x244>)
 8004c1a:	230a      	movs	r3, #10
 8004c1c:	e019      	b.n	8004c52 <_printf_i+0x102>
 8004c1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c22:	6805      	ldr	r5, [r0, #0]
 8004c24:	600b      	str	r3, [r1, #0]
 8004c26:	bf18      	it	ne
 8004c28:	b22d      	sxthne	r5, r5
 8004c2a:	e7ef      	b.n	8004c0c <_printf_i+0xbc>
 8004c2c:	680b      	ldr	r3, [r1, #0]
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	1d18      	adds	r0, r3, #4
 8004c32:	6008      	str	r0, [r1, #0]
 8004c34:	0628      	lsls	r0, r5, #24
 8004c36:	d501      	bpl.n	8004c3c <_printf_i+0xec>
 8004c38:	681d      	ldr	r5, [r3, #0]
 8004c3a:	e002      	b.n	8004c42 <_printf_i+0xf2>
 8004c3c:	0669      	lsls	r1, r5, #25
 8004c3e:	d5fb      	bpl.n	8004c38 <_printf_i+0xe8>
 8004c40:	881d      	ldrh	r5, [r3, #0]
 8004c42:	4854      	ldr	r0, [pc, #336]	; (8004d94 <_printf_i+0x244>)
 8004c44:	2f6f      	cmp	r7, #111	; 0x6f
 8004c46:	bf0c      	ite	eq
 8004c48:	2308      	moveq	r3, #8
 8004c4a:	230a      	movne	r3, #10
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c52:	6866      	ldr	r6, [r4, #4]
 8004c54:	60a6      	str	r6, [r4, #8]
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	bfa2      	ittt	ge
 8004c5a:	6821      	ldrge	r1, [r4, #0]
 8004c5c:	f021 0104 	bicge.w	r1, r1, #4
 8004c60:	6021      	strge	r1, [r4, #0]
 8004c62:	b90d      	cbnz	r5, 8004c68 <_printf_i+0x118>
 8004c64:	2e00      	cmp	r6, #0
 8004c66:	d04d      	beq.n	8004d04 <_printf_i+0x1b4>
 8004c68:	4616      	mov	r6, r2
 8004c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c72:	5dc7      	ldrb	r7, [r0, r7]
 8004c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c78:	462f      	mov	r7, r5
 8004c7a:	42bb      	cmp	r3, r7
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	d9f4      	bls.n	8004c6a <_printf_i+0x11a>
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d10b      	bne.n	8004c9c <_printf_i+0x14c>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	07df      	lsls	r7, r3, #31
 8004c88:	d508      	bpl.n	8004c9c <_printf_i+0x14c>
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	6861      	ldr	r1, [r4, #4]
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	bfde      	ittt	le
 8004c92:	2330      	movle	r3, #48	; 0x30
 8004c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c9c:	1b92      	subs	r2, r2, r6
 8004c9e:	6122      	str	r2, [r4, #16]
 8004ca0:	f8cd a000 	str.w	sl, [sp]
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	aa03      	add	r2, sp, #12
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7ff fee2 	bl	8004a74 <_printf_common>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d14c      	bne.n	8004d4e <_printf_i+0x1fe>
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	b004      	add	sp, #16
 8004cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbe:	4835      	ldr	r0, [pc, #212]	; (8004d94 <_printf_i+0x244>)
 8004cc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	680e      	ldr	r6, [r1, #0]
 8004cc8:	061f      	lsls	r7, r3, #24
 8004cca:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cce:	600e      	str	r6, [r1, #0]
 8004cd0:	d514      	bpl.n	8004cfc <_printf_i+0x1ac>
 8004cd2:	07d9      	lsls	r1, r3, #31
 8004cd4:	bf44      	itt	mi
 8004cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cda:	6023      	strmi	r3, [r4, #0]
 8004cdc:	b91d      	cbnz	r5, 8004ce6 <_printf_i+0x196>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	f023 0320 	bic.w	r3, r3, #32
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	e7b0      	b.n	8004c4c <_printf_i+0xfc>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	2378      	movs	r3, #120	; 0x78
 8004cf4:	4828      	ldr	r0, [pc, #160]	; (8004d98 <_printf_i+0x248>)
 8004cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cfa:	e7e3      	b.n	8004cc4 <_printf_i+0x174>
 8004cfc:	065e      	lsls	r6, r3, #25
 8004cfe:	bf48      	it	mi
 8004d00:	b2ad      	uxthmi	r5, r5
 8004d02:	e7e6      	b.n	8004cd2 <_printf_i+0x182>
 8004d04:	4616      	mov	r6, r2
 8004d06:	e7bb      	b.n	8004c80 <_printf_i+0x130>
 8004d08:	680b      	ldr	r3, [r1, #0]
 8004d0a:	6826      	ldr	r6, [r4, #0]
 8004d0c:	6960      	ldr	r0, [r4, #20]
 8004d0e:	1d1d      	adds	r5, r3, #4
 8004d10:	600d      	str	r5, [r1, #0]
 8004d12:	0635      	lsls	r5, r6, #24
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0x1cc>
 8004d18:	6018      	str	r0, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <_printf_i+0x1d2>
 8004d1c:	0671      	lsls	r1, r6, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0x1c8>
 8004d20:	8018      	strh	r0, [r3, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	4616      	mov	r6, r2
 8004d28:	e7ba      	b.n	8004ca0 <_printf_i+0x150>
 8004d2a:	680b      	ldr	r3, [r1, #0]
 8004d2c:	1d1a      	adds	r2, r3, #4
 8004d2e:	600a      	str	r2, [r1, #0]
 8004d30:	681e      	ldr	r6, [r3, #0]
 8004d32:	6862      	ldr	r2, [r4, #4]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4630      	mov	r0, r6
 8004d38:	f7fb fa72 	bl	8000220 <memchr>
 8004d3c:	b108      	cbz	r0, 8004d42 <_printf_i+0x1f2>
 8004d3e:	1b80      	subs	r0, r0, r6
 8004d40:	6060      	str	r0, [r4, #4]
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	2300      	movs	r3, #0
 8004d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4c:	e7a8      	b.n	8004ca0 <_printf_i+0x150>
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	4632      	mov	r2, r6
 8004d52:	4649      	mov	r1, r9
 8004d54:	4640      	mov	r0, r8
 8004d56:	47d0      	blx	sl
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d0ab      	beq.n	8004cb4 <_printf_i+0x164>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	079b      	lsls	r3, r3, #30
 8004d60:	d413      	bmi.n	8004d8a <_printf_i+0x23a>
 8004d62:	68e0      	ldr	r0, [r4, #12]
 8004d64:	9b03      	ldr	r3, [sp, #12]
 8004d66:	4298      	cmp	r0, r3
 8004d68:	bfb8      	it	lt
 8004d6a:	4618      	movlt	r0, r3
 8004d6c:	e7a4      	b.n	8004cb8 <_printf_i+0x168>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4632      	mov	r2, r6
 8004d72:	4649      	mov	r1, r9
 8004d74:	4640      	mov	r0, r8
 8004d76:	47d0      	blx	sl
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d09b      	beq.n	8004cb4 <_printf_i+0x164>
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	9903      	ldr	r1, [sp, #12]
 8004d82:	1a5b      	subs	r3, r3, r1
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dcf2      	bgt.n	8004d6e <_printf_i+0x21e>
 8004d88:	e7eb      	b.n	8004d62 <_printf_i+0x212>
 8004d8a:	2500      	movs	r5, #0
 8004d8c:	f104 0619 	add.w	r6, r4, #25
 8004d90:	e7f5      	b.n	8004d7e <_printf_i+0x22e>
 8004d92:	bf00      	nop
 8004d94:	08005061 	.word	0x08005061
 8004d98:	08005072 	.word	0x08005072

08004d9c <_sbrk_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d06      	ldr	r5, [pc, #24]	; (8004db8 <_sbrk_r+0x1c>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	602b      	str	r3, [r5, #0]
 8004da8:	f7fc f814 	bl	8000dd4 <_sbrk>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_sbrk_r+0x1a>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_sbrk_r+0x1a>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000224 	.word	0x20000224

08004dbc <__sread>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	f000 f8a0 	bl	8004f08 <_read_r>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	bfab      	itete	ge
 8004dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dce:	89a3      	ldrhlt	r3, [r4, #12]
 8004dd0:	181b      	addge	r3, r3, r0
 8004dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dd6:	bfac      	ite	ge
 8004dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dda:	81a3      	strhlt	r3, [r4, #12]
 8004ddc:	bd10      	pop	{r4, pc}

08004dde <__swrite>:
 8004dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	461f      	mov	r7, r3
 8004de4:	898b      	ldrh	r3, [r1, #12]
 8004de6:	05db      	lsls	r3, r3, #23
 8004de8:	4605      	mov	r5, r0
 8004dea:	460c      	mov	r4, r1
 8004dec:	4616      	mov	r6, r2
 8004dee:	d505      	bpl.n	8004dfc <__swrite+0x1e>
 8004df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df4:	2302      	movs	r3, #2
 8004df6:	2200      	movs	r2, #0
 8004df8:	f000 f868 	bl	8004ecc <_lseek_r>
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e06:	81a3      	strh	r3, [r4, #12]
 8004e08:	4632      	mov	r2, r6
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e12:	f000 b817 	b.w	8004e44 <_write_r>

08004e16 <__sseek>:
 8004e16:	b510      	push	{r4, lr}
 8004e18:	460c      	mov	r4, r1
 8004e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1e:	f000 f855 	bl	8004ecc <_lseek_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	bf15      	itete	ne
 8004e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e32:	81a3      	strheq	r3, [r4, #12]
 8004e34:	bf18      	it	ne
 8004e36:	81a3      	strhne	r3, [r4, #12]
 8004e38:	bd10      	pop	{r4, pc}

08004e3a <__sclose>:
 8004e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3e:	f000 b813 	b.w	8004e68 <_close_r>
	...

08004e44 <_write_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	; (8004e64 <_write_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fb fdf2 	bl	8000a3c <_write>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_write_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_write_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000224 	.word	0x20000224

08004e68 <_close_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d06      	ldr	r5, [pc, #24]	; (8004e84 <_close_r+0x1c>)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fb ff79 	bl	8000d6a <_close>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_close_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_close_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000224 	.word	0x20000224

08004e88 <_fstat_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d07      	ldr	r5, [pc, #28]	; (8004ea8 <_fstat_r+0x20>)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	602b      	str	r3, [r5, #0]
 8004e96:	f7fb ff74 	bl	8000d82 <_fstat>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	d102      	bne.n	8004ea4 <_fstat_r+0x1c>
 8004e9e:	682b      	ldr	r3, [r5, #0]
 8004ea0:	b103      	cbz	r3, 8004ea4 <_fstat_r+0x1c>
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	bd38      	pop	{r3, r4, r5, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000224 	.word	0x20000224

08004eac <_isatty_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d06      	ldr	r5, [pc, #24]	; (8004ec8 <_isatty_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fb ff73 	bl	8000da2 <_isatty>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_isatty_r+0x1a>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_isatty_r+0x1a>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	20000224 	.word	0x20000224

08004ecc <_lseek_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d07      	ldr	r5, [pc, #28]	; (8004eec <_lseek_r+0x20>)
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	602a      	str	r2, [r5, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f7fb ff6c 	bl	8000db8 <_lseek>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_lseek_r+0x1e>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_lseek_r+0x1e>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000224 	.word	0x20000224

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7ff bb55 	b.w	80045a0 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	2000021c 	.word	0x2000021c

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7ff bb50 	b.w	80045a2 <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	2000021c 	.word	0x2000021c

08004f08 <_read_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d07      	ldr	r5, [pc, #28]	; (8004f28 <_read_r+0x20>)
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	4608      	mov	r0, r1
 8004f10:	4611      	mov	r1, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	602a      	str	r2, [r5, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fb ff0a 	bl	8000d30 <_read>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_read_r+0x1e>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_read_r+0x1e>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20000224 	.word	0x20000224

08004f2c <_init>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr

08004f38 <_fini>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	bf00      	nop
 8004f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3e:	bc08      	pop	{r3}
 8004f40:	469e      	mov	lr, r3
 8004f42:	4770      	bx	lr
