
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08005ef0  08005ef0  00015ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000070  08006244  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08006244  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001433b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002862  00000000  00000000  000343db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00036c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00037988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea8b  00000000  00000000  00038608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101dd  00000000  00000000  00057093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bab1a  00000000  00000000  00067270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  00121de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005ed4 	.word	0x08005ed4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005ed4 	.word	0x08005ed4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b9 	b.w	8000684 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <printFix>:

int32_t Rational(int a, int b) {
	return(FIX16_DIV(convert(a), convert(b)));
}

void printFix(int32_t i) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	da05      	bge.n	80006a2 <printFix+0x1a>
            printf("-");
 8000696:	202d      	movs	r0, #45	; 0x2d
 8000698:	f004 fb12 	bl	8004cc0 <putchar>
            i = ~i + 1;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	425b      	negs	r3, r3
 80006a0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	1419      	asrs	r1, r3, #16
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	461a      	mov	r2, r3
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <printFix+0x3c>)
 80006b8:	f004 faea 	bl	8004c90 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08005ef0 	.word	0x08005ef0

080006c8 <RingBuffer_Write>:
#include <fixp.h>
#define LINEBUFFERSIZE 100
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80006da:	b29b      	uxth	r3, r3
 80006dc:	3301      	adds	r3, #1
 80006de:	425a      	negs	r2, r3
 80006e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006e8:	bf58      	it	pl
 80006ea:	4253      	negpl	r3, r2
 80006ec:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	89fa      	ldrh	r2, [r7, #14]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d00c      	beq.n	8000716 <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000702:	b29b      	uxth	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	78fa      	ldrb	r2, [r7, #3]
 800070a:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	89fa      	ldrh	r2, [r7, #14]
 8000710:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 8000714:	e002      	b.n	800071c <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <RingBuffer_Write+0x5c>)
 8000718:	f004 faba 	bl	8004c90 <iprintf>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08005f00 	.word	0x08005f00

08000728 <convert_DDmm_mmmm_to_fixed>:

	int32_t minutes = FIX24_DIV(raw_minutes << 24, powten[6] << 24);
	return degrees + minutes;
}

int32_t convert_DDmm_mmmm_to_fixed(char* str) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	printf("   input=%s    ", str);
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	4836      	ldr	r0, [pc, #216]	; (800080c <convert_DDmm_mmmm_to_fixed+0xe4>)
 8000734:	f004 faac 	bl	8004c90 <iprintf>
    // Parse degrees (first two digits)
    int32_t degrees = (str[0] - '0') * 10 + (str[1] - '0');
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3b30      	subs	r3, #48	; 0x30
 8000752:	4413      	add	r3, r2
 8000754:	61bb      	str	r3, [r7, #24]

    // Parse minutes (everything after the degrees)
    int32_t minutes_int = (str[2] - '0') * 10 + (str[3] - '0');
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3302      	adds	r3, #2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3303      	adds	r3, #3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3b30      	subs	r3, #48	; 0x30
 8000772:	4413      	add	r3, r2
 8000774:	617b      	str	r3, [r7, #20]

    // Parse fractional minutes (4 digits after decimal)
    int32_t frac_minutes = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    int i = 5; // Skip the dot (str[4] should be '.')
 800077a:	2305      	movs	r3, #5
 800077c:	623b      	str	r3, [r7, #32]
    for (int d = 0; d < 4; d++) {
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	e012      	b.n	80007aa <convert_DDmm_mmmm_to_fixed+0x82>
        frac_minutes = frac_minutes * 10 + (str[i++] - '0');
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	4613      	mov	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4619      	mov	r1, r3
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	623a      	str	r2, [r7, #32]
 8000796:	461a      	mov	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b30      	subs	r3, #48	; 0x30
 80007a0:	440b      	add	r3, r1
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    for (int d = 0; d < 4; d++) {
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3301      	adds	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dde9      	ble.n	8000784 <convert_DDmm_mmmm_to_fixed+0x5c>
    }
    printf("deg=%ld min=%ld fracmin=%ld    ", degrees, minutes_int, frac_minutes);
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	69b9      	ldr	r1, [r7, #24]
 80007b6:	4816      	ldr	r0, [pc, #88]	; (8000810 <convert_DDmm_mmmm_to_fixed+0xe8>)
 80007b8:	f004 fa6a 	bl	8004c90 <iprintf>

    // Total minutes = minutes_int.frac_minutes
    // Convert to micro-minutes to preserve precision: 24.7777 becomes 247777
    int32_t total_micro_minutes = minutes_int * 10000 + frac_minutes;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	f242 7210 	movw	r2, #10000	; 0x2710
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007c8:	4413      	add	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]

    // Convert micro-minutes to degrees:
    // degrees_fraction = total_micro_minutes / 60.0 / 10000.0
    // Use fixed-point math:
    // scaled_fraction = (total_micro_minutes * 65536) / (60 * 10000)
    int32_t scaled_fraction = ((int64_t)total_micro_minutes * 65536) / 600000;
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	461a      	mov	r2, r3
 80007d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	f04f 0100 	mov.w	r1, #0
 80007dc:	0419      	lsls	r1, r3, #16
 80007de:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80007e2:	0410      	lsls	r0, r2, #16
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <convert_DDmm_mmmm_to_fixed+0xec>)
 80007e6:	f04f 0300 	mov.w	r3, #0
 80007ea:	f7ff fd81 	bl	80002f0 <__aeabi_ldivmod>
 80007ee:	4602      	mov	r2, r0
 80007f0:	460b      	mov	r3, r1
 80007f2:	4613      	mov	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]

    // Integer part shifted to 16.16 format
    int32_t fixed_degrees = degrees << 16;
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	041b      	lsls	r3, r3, #16
 80007fa:	60bb      	str	r3, [r7, #8]

    return fixed_degrees + scaled_fraction;
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
}
 8000802:	4618      	mov	r0, r3
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	08005f68 	.word	0x08005f68
 8000810:	08005f78 	.word	0x08005f78
 8000814:	000927c0 	.word	0x000927c0

08000818 <RingBuffer_Read>:


int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000828:	b29a      	uxth	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8000830:	b29b      	uxth	r3, r3
 8000832:	429a      	cmp	r2, r3
 8000834:	d101      	bne.n	800083a <RingBuffer_Read+0x22>
        return 0;  // No data
 8000836:	2300      	movs	r3, #0
 8000838:	e019      	b.n	800086e <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8000840:	b29b      	uxth	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	5c9a      	ldrb	r2, [r3, r2]
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8000852:	b29b      	uxth	r3, r3
 8000854:	3301      	adds	r3, #1
 8000856:	425a      	negs	r2, r3
 8000858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800085c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000860:	bf58      	it	pl
 8000862:	4253      	negpl	r3, r2
 8000864:	b29a      	uxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
    return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	7b1b      	ldrb	r3, [r3, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d05f      	beq.n	800094e <getGPGGA+0xd2>
		char filter[] = "$GPGGA";
 800088e:	4a55      	ldr	r2, [pc, #340]	; (80009e4 <getGPGGA+0x168>)
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000898:	6018      	str	r0, [r3, #0]
 800089a:	3304      	adds	r3, #4
 800089c:	8019      	strh	r1, [r3, #0]
 800089e:	3302      	adds	r3, #2
 80008a0:	0c0a      	lsrs	r2, r1, #16
 80008a2:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f004 fa94 	bl	8004dd8 <strstr>
 80008b0:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 8090 	beq.w	80009da <getGPGGA+0x15e>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 80008ba:	69b8      	ldr	r0, [r7, #24]
 80008bc:	f7ff fcba 	bl	8000234 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b28      	cmp	r3, #40	; 0x28
 80008c4:	d93c      	bls.n	8000940 <getGPGGA+0xc4>
				char *tokPtr = strtok(senPtr, DELIM);
 80008c6:	4948      	ldr	r1, [pc, #288]	; (80009e8 <getGPGGA+0x16c>)
 80008c8:	69b8      	ldr	r0, [r7, #24]
 80008ca:	f004 fa9d 	bl	8004e08 <strtok>
 80008ce:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 80008d4:	e030      	b.n	8000938 <getGPGGA+0xbc>
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	3b03      	subs	r3, #3
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d824      	bhi.n	8000928 <getGPGGA+0xac>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <getGPGGA+0x68>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	080008f5 	.word	0x080008f5
 80008e8:	08000915 	.word	0x08000915
 80008ec:	08000929 	.word	0x08000929
 80008f0:	0800091f 	.word	0x0800091f
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							printf("%i Breddegrad: %s    ", i, tokPtr);
 80008f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <getGPGGA+0x170>)
 80008fa:	f004 f9c9 	bl	8004c90 <iprintf>
							printFix(convert_DDmm_mmmm_to_fixed(tokPtr));
 80008fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000900:	f7ff ff12 	bl	8000728 <convert_DDmm_mmmm_to_fixed>
 8000904:	4603      	mov	r3, r0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff febe 	bl	8000688 <printFix>
							printf("\r\n");
 800090c:	4838      	ldr	r0, [pc, #224]	; (80009f0 <getGPGGA+0x174>)
 800090e:	f004 fa5b 	bl	8004dc8 <puts>
							break;
 8000912:	e009      	b.n	8000928 <getGPGGA+0xac>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8000914:	4937      	ldr	r1, [pc, #220]	; (80009f4 <getGPGGA+0x178>)
 8000916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000918:	f7ff fc82 	bl	8000220 <strcmp>
								//printf("%i Nord \r\n", i);
							}
							else {
								//printf("%i Syd \r\n", i);
							}
							break;
 800091c:	e004      	b.n	8000928 <getGPGGA+0xac>
						case 5: {
							//printf("%i Længdegrad: %s \r\n", i, tokPtr);
							break;
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 800091e:	4936      	ldr	r1, [pc, #216]	; (80009f8 <getGPGGA+0x17c>)
 8000920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000922:	f7ff fc7d 	bl	8000220 <strcmp>
								//printf("%i Øst \r\n", i);
							}
							else {
								//printf("%i Vest \r\n", i);
							}
							break;
 8000926:	bf00      	nop
						}
						default: {
							//printf("%i %s \r\n", i, tokPtr);
						}
					}
					i++;
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	3301      	adds	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 800092e:	492e      	ldr	r1, [pc, #184]	; (80009e8 <getGPGGA+0x16c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f004 fa69 	bl	8004e08 <strtok>
 8000936:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1cb      	bne.n	80008d6 <getGPGGA+0x5a>
		}
		else {
			printf("Line skip, no %s: %s \r\n", filter, sentence);
		}
	}
}
 800093e:	e04c      	b.n	80009da <getGPGGA+0x15e>
				printf("Error: GPGGA too short \r\n");
 8000940:	482e      	ldr	r0, [pc, #184]	; (80009fc <getGPGGA+0x180>)
 8000942:	f004 fa41 	bl	8004dc8 <puts>
				gps->active = 0;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	731a      	strb	r2, [r3, #12]
}
 800094c:	e045      	b.n	80009da <getGPGGA+0x15e>
		char filter[] = "$GPRMC";
 800094e:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <getGPGGA+0x184>)
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000958:	6018      	str	r0, [r3, #0]
 800095a:	3304      	adds	r3, #4
 800095c:	8019      	strh	r1, [r3, #0]
 800095e:	3302      	adds	r3, #2
 8000960:	0c0a      	lsrs	r2, r1, #16
 8000962:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f004 fa34 	bl	8004dd8 <strstr>
 8000970:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d029      	beq.n	80009cc <getGPGGA+0x150>
			char *tokPtr = strtok(senPtr, DELIM);
 8000978:	491b      	ldr	r1, [pc, #108]	; (80009e8 <getGPGGA+0x16c>)
 800097a:	69f8      	ldr	r0, [r7, #28]
 800097c:	f004 fa44 	bl	8004e08 <strtok>
 8000980:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8000986:	e01d      	b.n	80009c4 <getGPGGA+0x148>
				i++;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	3301      	adds	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 800098e:	4916      	ldr	r1, [pc, #88]	; (80009e8 <getGPGGA+0x16c>)
 8000990:	2000      	movs	r0, #0
 8000992:	f004 fa39 	bl	8004e08 <strtok>
 8000996:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d112      	bne.n	80009c4 <getGPGGA+0x148>
						if (!strcmp(tokPtr, "A")) {
 800099e:	4919      	ldr	r1, [pc, #100]	; (8000a04 <getGPGGA+0x188>)
 80009a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009a2:	f7ff fc3d 	bl	8000220 <strcmp>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d106      	bne.n	80009ba <getGPGGA+0x13e>
							gps->active = 1;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 80009b2:	4815      	ldr	r0, [pc, #84]	; (8000a08 <getGPGGA+0x18c>)
 80009b4:	f004 fa08 	bl	8004dc8 <puts>
 80009b8:	e003      	b.n	80009c2 <getGPGGA+0x146>
								printf("Error: No GPS lock %s \r\n", sentence);
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <getGPGGA+0x190>)
 80009be:	f004 f967 	bl	8004c90 <iprintf>
						break;
 80009c2:	bf00      	nop
			while (tokPtr != NULL) {
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1de      	bne.n	8000988 <getGPGGA+0x10c>
}
 80009ca:	e006      	b.n	80009da <getGPGGA+0x15e>
			printf("Line skip, no %s: %s \r\n", filter, sentence);
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	4619      	mov	r1, r3
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <getGPGGA+0x194>)
 80009d6:	f004 f95b 	bl	8004c90 <iprintf>
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08006028 	.word	0x08006028
 80009e8:	08005f98 	.word	0x08005f98
 80009ec:	08005f9c 	.word	0x08005f9c
 80009f0:	08005fb4 	.word	0x08005fb4
 80009f4:	08005fb8 	.word	0x08005fb8
 80009f8:	08005fbc 	.word	0x08005fbc
 80009fc:	08005fc0 	.word	0x08005fc0
 8000a00:	08006030 	.word	0x08006030
 8000a04:	08005fdc 	.word	0x08005fdc
 8000a08:	08005fe0 	.word	0x08005fe0
 8000a0c:	08005ff4 	.word	0x08005ff4
 8000a10:	08006010 	.word	0x08006010

08000a14 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 8000a1e:	e01a      	b.n	8000a56 <process_uart_data+0x42>
        if (indx < sizeof(sentence) - 1) {
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <process_uart_data+0x60>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b62      	cmp	r3, #98	; 0x62
 8000a26:	d807      	bhi.n	8000a38 <process_uart_data+0x24>
            sentence[indx++] = c;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <process_uart_data+0x60>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	4911      	ldr	r1, [pc, #68]	; (8000a74 <process_uart_data+0x60>)
 8000a30:	600a      	str	r2, [r1, #0]
 8000a32:	7bf9      	ldrb	r1, [r7, #15]
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <process_uart_data+0x64>)
 8000a36:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	d10b      	bne.n	8000a56 <process_uart_data+0x42>
            sentence[indx] = '\0';  // Null-terminate the string
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <process_uart_data+0x60>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <process_uart_data+0x64>)
 8000a44:	2100      	movs	r1, #0
 8000a46:	54d1      	strb	r1, [r2, r3]
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <process_uart_data+0x64>)
 8000a4c:	f7ff ff16 	bl	800087c <getGPGGA>
            indx = 0;  // Reset for next line
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <process_uart_data+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8000a56:	f107 030f 	add.w	r3, r7, #15
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fedb 	bl	8000818 <RingBuffer_Read>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1db      	bne.n	8000a20 <process_uart_data+0xc>
        }
    }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	200002a0 	.word	0x200002a0

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fba2 	bl	80011ca <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f81d 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 f92d 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a8e:	f000 f8df 	bl	8000c50 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a92:	f000 f857 	bl	8000b44 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a96:	f000 f88f 	bl	8000bb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <main+0x3c>)
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <main+0x40>)
 8000aa0:	f002 f8d6 	bl	8002c50 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f000 fc01 	bl	80012ac <HAL_Delay>
	  process_uart_data(&uart_rx_buf, &GPS);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <main+0x44>)
 8000ab0:	f7ff ffb0 	bl	8000a14 <process_uart_data>
	  HAL_Delay(10);
 8000ab4:	e7f6      	b.n	8000aa4 <main+0x28>
 8000ab6:	bf00      	nop
 8000ab8:	20000304 	.word	0x20000304
 8000abc:	20000308 	.word	0x20000308
 8000ac0:	20000090 	.word	0x20000090

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2238      	movs	r2, #56	; 0x38
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 f8d4 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aea:	f000 ff53 	bl	8001994 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fff9 	bl	8001afc <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b10:	f000 f936 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 faf9 	bl	8002124 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b38:	f000 f922 	bl	8000d80 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	; 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b4a:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <MX_SPI1_Init+0x70>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b74:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_SPI1_Init+0x6c>)
 8000b9c:	f001 fece 	bl	800293c <HAL_SPI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000ba6:	f000 f8eb 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000039c 	.word	0x2000039c
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <MX_USART1_UART_Init+0x94>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c02:	f001 ff46 	bl	8002a92 <HAL_UART_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 f8b8 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	2100      	movs	r1, #0
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c14:	f003 ff3f 	bl	8004a96 <HAL_UARTEx_SetTxFifoThreshold>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f8af 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c26:	f003 ff74 	bl	8004b12 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c30:	f000 f8a6 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_USART1_UART_Init+0x90>)
 8000c36:	f003 fef5 	bl	8004a24 <HAL_UARTEx_DisableFifoMode>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 f89e 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000308 	.word	0x20000308
 8000c4c:	40013800 	.word	0x40013800

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <MX_USART2_UART_Init+0x94>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000c9a:	f001 fefa 	bl	8002a92 <HAL_UART_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f000 f86c 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000cac:	f003 fef3 	bl	8004a96 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb6:	f000 f863 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000cbe:	f003 ff28 	bl	8004b12 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc8:	f000 f85a 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_USART2_UART_Init+0x90>)
 8000cce:	f003 fea9 	bl	8004a24 <HAL_UARTEx_DisableFifoMode>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 f852 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000400 	.word	0x20000400
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_GPIO_Init+0x2c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <MX_GPIO_Init+0x2c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_GPIO_Init+0x2c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <_write+0x28>)
 8000d30:	f001 feff 	bl	8002b32 <HAL_UART_Transmit>
    return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000400 	.word	0x20000400

08000d44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_UART_RxCpltCallback+0x30>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d10a      	bne.n	8000d6a <HAL_UART_RxCpltCallback+0x26>
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_UART_RxCpltCallback+0x34>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <HAL_UART_RxCpltCallback+0x38>)
 8000d5c:	f7ff fcb4 	bl	80006c8 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 8000d60:	2201      	movs	r2, #1
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <HAL_UART_RxCpltCallback+0x34>)
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <HAL_UART_RxCpltCallback+0x30>)
 8000d66:	f001 ff73 	bl	8002c50 <HAL_UART_Receive_IT>
	}
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000308 	.word	0x20000308
 8000d78:	20000304 	.word	0x20000304
 8000d7c:	20000090 	.word	0x20000090

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dc2:	f000 fe8b 	bl	8001adc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_SPI_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d128      	bne.n	8000e48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e00:	6613      	str	r3, [r2, #96]	; 0x60
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_SPI_MspInit+0x80>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e26:	23e0      	movs	r3, #224	; 0xe0
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f000 fc24 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40013000 	.word	0x40013000
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b09c      	sub	sp, #112	; 0x70
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	2244      	movs	r2, #68	; 0x44
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 ff01 	bl	8004c80 <memset>
  if(huart->Instance==USART1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a42      	ldr	r2, [pc, #264]	; (8000f8c <HAL_UART_MspInit+0x134>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d140      	bne.n	8000f0a <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fb61 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff ff6e 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea8:	4a39      	ldr	r2, [pc, #228]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ed4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f000 fbcc 	bl	8001690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2025      	movs	r0, #37	; 0x25
 8000efe:	f000 fad2 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f02:	2025      	movs	r0, #37	; 0x25
 8000f04:	f000 fae9 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f08:	e03b      	b.n	8000f82 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <HAL_UART_MspInit+0x13c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d136      	bne.n	8000f82 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fb1b 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000f2c:	f7ff ff28 	bl	8000d80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f34:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0x138>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f60:	230c      	movs	r3, #12
 8000f62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f70:	2307      	movs	r3, #7
 8000f72:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f000 fb87 	bl	8001690 <HAL_GPIO_Init>
}
 8000f82:	bf00      	nop
 8000f84:	3770      	adds	r7, #112	; 0x70
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40004400 	.word	0x40004400

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f944 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <USART1_IRQHandler+0x10>)
 8000ff2:	f001 fe79 	bl	8002ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000308 	.word	0x20000308

08001000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	return 1;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_kill>:

int _kill(int pid, int sig)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800101a:	f003 fe07 	bl	8004c2c <__errno>
 800101e:	4603      	mov	r3, r0
 8001020:	2216      	movs	r2, #22
 8001022:	601a      	str	r2, [r3, #0]
	return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_exit>:

void _exit (int status)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ffe7 	bl	8001010 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001042:	e7fe      	b.n	8001042 <_exit+0x12>

08001044 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e00a      	b.n	800106c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001056:	f3af 8000 	nop.w
 800105a:	4601      	mov	r1, r0
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf0      	blt.n	8001056 <_read+0x12>
	}

return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:
	}
	return len;
}

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f003 fd88 	bl	8004c2c <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20008000 	.word	0x20008000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000294 	.word	0x20000294
 8001150:	200004a8 	.word	0x200004a8

08001154 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff ffea 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f003 fd47 	bl	8004c38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fc67 	bl	8000a7c <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   r0, =_estack
 80011b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011bc:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 80011c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c4:	200004a8 	.word	0x200004a8

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>

080011ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f95b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f80e 	bl	80011fc <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	e001      	b.n	80011f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ec:	f7ff fdce 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f0:	79fb      	ldrb	r3, [r7, #7]

}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_InitTick+0x68>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d022      	beq.n	8001256 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_InitTick+0x6c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_InitTick+0x68>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800121c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f966 	bl	80014f6 <HAL_SYSTICK_Config>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10f      	bne.n	8001250 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d809      	bhi.n	800124a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001236:	2200      	movs	r2, #0
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	f04f 30ff 	mov.w	r0, #4294967295
 800123e:	f000 f932 	bl	80014a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_InitTick+0x70>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e007      	b.n	800125a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e004      	b.n	800125a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000008 	.word	0x20000008
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x1c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x20>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4413      	add	r3, r2
 800127e:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_IncTick+0x1c>)
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	20000494 	.word	0x20000494
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000494 	.word	0x20000494

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d004      	beq.n	80012d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_Delay+0x40>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d0:	bf00      	nop
 80012d2:	f7ff ffdf 	bl	8001294 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d8f7      	bhi.n	80012d2 <HAL_Delay+0x26>
  {
  }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000008 	.word	0x20000008

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff40 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff33 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa4 	bl	800144c <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d005      	beq.n	8001532 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2204      	movs	r2, #4
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e037      	b.n	80015a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 020e 	bic.w	r2, r2, #14
 8001540:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001550:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 021f 	and.w	r2, r3, #31
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800157e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001596:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d00d      	beq.n	80015f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2204      	movs	r2, #4
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e047      	b.n	8001684 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 020e 	bic.w	r2, r2, #14
 8001602:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001640:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00c      	beq.n	8001664 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001658:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001662:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
    }
  }
  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800169e:	e15a      	b.n	8001956 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 814c 	beq.w	8001950 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d017      	beq.n	800176e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d123      	bne.n	80017c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	6939      	ldr	r1, [r7, #16]
 80017be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0203 	and.w	r2, r3, #3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a6 	beq.w	8001950 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001804:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6613      	str	r3, [r2, #96]	; 0x60
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181c:	4a56      	ldr	r2, [pc, #344]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001846:	d01f      	beq.n	8001888 <HAL_GPIO_Init+0x1f8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x2ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d019      	beq.n	8001884 <HAL_GPIO_Init+0x1f4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x2f0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <HAL_GPIO_Init+0x1f0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2f8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2fc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001870:	2305      	movs	r3, #5
 8001872:	e00a      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001874:	2306      	movs	r3, #6
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001878:	2304      	movs	r3, #4
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 800187c:	2303      	movs	r3, #3
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001888:	2300      	movs	r3, #0
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018cc:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_GPIO_Init+0x300>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f ae9d 	bne.w	80016a0 <HAL_GPIO_Init+0x10>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	48001400 	.word	0x48001400
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d141      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d131      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019c8:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d0:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2232      	movs	r2, #50	; 0x32
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	4a3f      	ldr	r2, [pc, #252]	; (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e6:	e002      	b.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d102      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f2      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d158      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e057      	b.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a24:	e04d      	b.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2c:	d141      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d131      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a42:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a54:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2232      	movs	r2, #50	; 0x32
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a72:	e002      	b.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d102      	bne.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f2      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d112      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e011      	b.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ab0:	e007      	b.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	431bde83 	.word	0x431bde83

08001adc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40007000 	.word	0x40007000

08001afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e301      	b.n	8002112 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d075      	beq.n	8001c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4ba3      	ldr	r3, [pc, #652]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b24:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3e>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_OscConfig+0x44>
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d05b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x108>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d157      	bne.n	8001c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e2dc      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_OscConfig+0x74>
 8001b62:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a90      	ldr	r2, [pc, #576]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xb0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b7a:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a8a      	ldr	r2, [pc, #552]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a87      	ldr	r2, [pc, #540]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xb0>
 8001b94:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a83      	ldr	r2, [pc, #524]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b81      	ldr	r3, [pc, #516]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb6e 	bl	8001294 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fb6a 	bl	8001294 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e2a1      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xc0>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb5a 	bl	8001294 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fb56 	bl	8001294 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e28d      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0xe8>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d075      	beq.n	8001cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c12:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c1c:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_OscConfig+0x136>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_OscConfig+0x13c>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d11f      	bne.n	8001c78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c38:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x154>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e260      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	4952      	ldr	r1, [pc, #328]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c64:	4b51      	ldr	r3, [pc, #324]	; (8001dac <HAL_RCC_OscConfig+0x2b0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fac7 	bl	80011fc <HAL_InitTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d043      	beq.n	8001cfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e24c      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d023      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fb02 	bl	8001294 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c94:	f7ff fafe 	bl	8001294 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e235      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	4939      	ldr	r1, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fade 	bl	8001294 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fada 	bl	8001294 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e211      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1e0>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff fab7 	bl	8001294 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fab3 	bl	8001294 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1ea      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0ef      	beq.n	8001d2a <HAL_RCC_OscConfig+0x22e>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fa9a 	bl	8001294 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fa96 	bl	8001294 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1cd      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ef      	bne.n	8001d64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80ab 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2b4>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e005      	b.n	8001db2 <HAL_RCC_OscConfig+0x2b6>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	20000004 	.word	0x20000004
 8001db0:	2300      	movs	r3, #0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4bad      	ldr	r3, [pc, #692]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4aac      	ldr	r2, [pc, #688]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4baa      	ldr	r3, [pc, #680]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4ba7      	ldr	r3, [pc, #668]	; (8002070 <HAL_RCC_OscConfig+0x574>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dde:	4ba4      	ldr	r3, [pc, #656]	; (8002070 <HAL_RCC_OscConfig+0x574>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4aa3      	ldr	r2, [pc, #652]	; (8002070 <HAL_RCC_OscConfig+0x574>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fa53 	bl	8001294 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7ff fa4f 	bl	8001294 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e186      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e04:	4b9a      	ldr	r3, [pc, #616]	; (8002070 <HAL_RCC_OscConfig+0x574>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d108      	bne.n	8001e2a <HAL_RCC_OscConfig+0x32e>
 8001e18:	4b94      	ldr	r3, [pc, #592]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	4a93      	ldr	r2, [pc, #588]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e28:	e024      	b.n	8001e74 <HAL_RCC_OscConfig+0x378>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d110      	bne.n	8001e54 <HAL_RCC_OscConfig+0x358>
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	4a8c      	ldr	r2, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e42:	4b8a      	ldr	r3, [pc, #552]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e48:	4a88      	ldr	r2, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_OscConfig+0x378>
 8001e54:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a84      	ldr	r2, [pc, #528]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a80      	ldr	r2, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d016      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fa0a 	bl	8001294 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff fa06 	bl	8001294 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e13b      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9a:	4b74      	ldr	r3, [pc, #464]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ed      	beq.n	8001e84 <HAL_RCC_OscConfig+0x388>
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f9f3 	bl	8001294 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff f9ef 	bl	8001294 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e124      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ed      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a62      	ldr	r2, [pc, #392]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d03c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001efc:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f9c2 	bl	8001294 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f14:	f7ff f9be 	bl	8001294 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0f5      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f26:	4b51      	ldr	r3, [pc, #324]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCC_OscConfig+0x418>
 8001f34:	e01b      	b.n	8001f6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff f9a5 	bl	8001294 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4e:	f7ff f9a1 	bl	8001294 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0d8      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80cc 	beq.w	8002110 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	f000 8086 	beq.w	8002092 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d15a      	bne.n	8002044 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a36      	ldr	r2, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f97b 	bl	8001294 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f977 	bl	8001294 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0ae      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a11      	ldr	r1, [r2, #32]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	4311      	orrs	r1, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fda:	0212      	lsls	r2, r2, #8
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe2:	0852      	lsrs	r2, r2, #1
 8001fe4:	3a01      	subs	r2, #1
 8001fe6:	0552      	lsls	r2, r2, #21
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fee:	0852      	lsrs	r2, r2, #1
 8001ff0:	3a01      	subs	r2, #1
 8001ff2:	0652      	lsls	r2, r2, #25
 8001ff4:	4311      	orrs	r1, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ffa:	06d2      	lsls	r2, r2, #27
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	491b      	ldr	r1, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCC_OscConfig+0x570>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8002016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f93a 	bl	8001294 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f936 	bl	8001294 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e06d      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x528>
 8002042:	e065      	b.n	8002110 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x570>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x570>)
 800204a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f920 	bl	8001294 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f91c 	bl	8001294 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d908      	bls.n	8002078 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e053      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_RCC_OscConfig+0x620>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e9      	bne.n	8002058 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_RCC_OscConfig+0x620>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4924      	ldr	r1, [pc, #144]	; (800211c <HAL_RCC_OscConfig+0x620>)
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_OscConfig+0x624>)
 800208c:	4013      	ands	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
 8002090:	e03e      	b.n	8002110 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e039      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_RCC_OscConfig+0x620>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0203 	and.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d12c      	bne.n	800210c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	3b01      	subs	r3, #1
 80020be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d123      	bne.n	800210c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d11b      	bne.n	800210c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d113      	bne.n	800210c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d109      	bne.n	800210c <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	feeefffc 	.word	0xfeeefffc

08002124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e11e      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b91      	ldr	r3, [pc, #580]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d910      	bls.n	800216c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b8e      	ldr	r3, [pc, #568]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 020f 	bic.w	r2, r3, #15
 8002152:	498c      	ldr	r1, [pc, #560]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b8a      	ldr	r3, [pc, #552]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e106      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d073      	beq.n	8002260 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d129      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002180:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0f4      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002190:	f000 f99e 	bl	80024d0 <RCC_GetSysClockFreqFromPLLSource>
 8002194:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4a7c      	ldr	r2, [pc, #496]	; (800238c <HAL_RCC_ClockConfig+0x268>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d93f      	bls.n	800221e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800219e:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d033      	beq.n	800221e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d12f      	bne.n	800221e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c6:	4a70      	ldr	r2, [pc, #448]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e024      	b.n	800221e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d107      	bne.n	80021ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0c6      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0be      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021fc:	f000 f8ce 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8002200:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_RCC_ClockConfig+0x268>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d909      	bls.n	800221e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800220a:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002212:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b5a      	ldr	r3, [pc, #360]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4957      	ldr	r1, [pc, #348]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7ff f830 	bl	8001294 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff f82c 	bl	8001294 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e095      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d023      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a42      	ldr	r2, [pc, #264]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002290:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002298:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800229a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4936      	ldr	r1, [pc, #216]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4a32      	ldr	r2, [pc, #200]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 80022c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d21d      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 020f 	bic.w	r2, r3, #15
 80022dc:	4929      	ldr	r1, [pc, #164]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e4:	f7fe ffd6 	bl	8001294 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe ffd2 	bl	8001294 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e03b      	b.n	800237a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x260>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d1ed      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4917      	ldr	r1, [pc, #92]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490f      	ldr	r1, [pc, #60]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234e:	f000 f825 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_RCC_ClockConfig+0x264>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490c      	ldr	r1, [pc, #48]	; (8002390 <HAL_RCC_ClockConfig+0x26c>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x270>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe ff42 	bl	80011fc <HAL_InitTick>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	04c4b400 	.word	0x04c4b400
 8002390:	08006038 	.word	0x08006038
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e047      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c0:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e03e      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d136      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3301      	adds	r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f0:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fa:	68d2      	ldr	r2, [r2, #12]
 80023fc:	0a12      	lsrs	r2, r2, #8
 80023fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
      break;
 8002408:	e00c      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <HAL_RCC_GetSysClockFreq+0xbc>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002414:	68d2      	ldr	r2, [r2, #12]
 8002416:	0a12      	lsrs	r2, r2, #8
 8002418:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
      break;
 8002422:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0e5b      	lsrs	r3, r3, #25
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	3301      	adds	r3, #1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	e001      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002444:	693b      	ldr	r3, [r7, #16]
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800247c:	f7ff fff0 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	08006048 	.word	0x08006048

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a8:	f7ff ffda 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0adb      	lsrs	r3, r3, #11
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08006048 	.word	0x08006048

080024d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d10c      	bne.n	800250e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024fe:	68d2      	ldr	r2, [r2, #12]
 8002500:	0a12      	lsrs	r2, r2, #8
 8002502:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
    break;
 800250c:	e00c      	b.n	8002528 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	0a12      	lsrs	r2, r2, #8
 800251c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    break;
 8002526:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0e5b      	lsrs	r3, r3, #25
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002542:	687b      	ldr	r3, [r7, #4]
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	007a1200 	.word	0x007a1200
 8002558:	00f42400 	.word	0x00f42400

0800255c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002564:	2300      	movs	r3, #0
 8002566:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002568:	2300      	movs	r3, #0
 800256a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8098 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a3f      	ldr	r2, [pc, #252]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a6:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a39      	ldr	r2, [pc, #228]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fe6f 	bl	8001294 <HAL_GetTick>
 80025b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025b8:	e009      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ba:	f7fe fe6b 	bl	8001294 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	74fb      	strb	r3, [r7, #19]
        break;
 80025cc:	e005      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ef      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d159      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01e      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d019      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002618:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fe2b 	bl	8001294 <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	e00b      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fe27 	bl	8001294 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d902      	bls.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	74fb      	strb	r3, [r7, #19]
            break;
 8002658:	e006      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ec      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002684:	e008      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	74bb      	strb	r3, [r7, #18]
 800268a:	e005      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002698:	7c7b      	ldrb	r3, [r7, #17]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269e:	4ba6      	ldr	r3, [pc, #664]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	4aa5      	ldr	r2, [pc, #660]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b6:	4ba0      	ldr	r3, [pc, #640]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f023 0203 	bic.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	499c      	ldr	r1, [pc, #624]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d8:	4b97      	ldr	r3, [pc, #604]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f023 020c 	bic.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4994      	ldr	r1, [pc, #592]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fa:	4b8f      	ldr	r3, [pc, #572]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	498b      	ldr	r1, [pc, #556]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800271c:	4b86      	ldr	r3, [pc, #536]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	4983      	ldr	r1, [pc, #524]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800273e:	4b7e      	ldr	r3, [pc, #504]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	497a      	ldr	r1, [pc, #488]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4972      	ldr	r1, [pc, #456]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002782:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4969      	ldr	r1, [pc, #420]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4961      	ldr	r1, [pc, #388]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	4958      	ldr	r1, [pc, #352]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	4950      	ldr	r1, [pc, #320]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002812:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002820:	4b45      	ldr	r3, [pc, #276]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	4942      	ldr	r1, [pc, #264]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4934      	ldr	r1, [pc, #208]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a2e      	ldr	r2, [pc, #184]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289e:	4926      	ldr	r1, [pc, #152]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	4918      	ldr	r1, [pc, #96]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291e:	d105      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800292c:	7cbb      	ldrb	r3, [r7, #18]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e09d      	b.n	8002a8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800295e:	d009      	beq.n	8002974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
 8002966:	e005      	b.n	8002974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fa20 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b4:	d902      	bls.n	80029bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e002      	b.n	80029c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029ca:	d007      	beq.n	80029dc <HAL_SPI_Init+0xa0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1e:	ea42 0103 	orr.w	r1, r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	f003 0204 	and.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a58:	ea42 0103 	orr.w	r1, r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e042      	b.n	8002b2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe f9ce 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	; 0x24
 8002ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fee3 	bl	80038a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fc44 	bl	8003370 <UART_SetConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e01b      	b.n	8002b2a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 ff62 	bl	80039ec <UART_CheckIdleState>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b08a      	sub	sp, #40	; 0x28
 8002b36:	af02      	add	r7, sp, #8
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d17b      	bne.n	8002c44 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_UART_Transmit+0x26>
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e074      	b.n	8002c46 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2221      	movs	r2, #33	; 0x21
 8002b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fb92 	bl	8001294 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d108      	bne.n	8002b9e <HAL_UART_Transmit+0x6c>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	e003      	b.n	8002ba6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba6:	e030      	b.n	8002c0a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 ffc4 	bl	8003b40 <UART_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e03d      	b.n	8002c46 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	3302      	adds	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e007      	b.n	8002bf8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1c8      	bne.n	8002ba8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2140      	movs	r1, #64	; 0x40
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 ff8d 	bl	8003b40 <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e006      	b.n	8002c46 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d137      	bne.n	8002cd8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Receive_IT+0x24>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e030      	b.n	8002cda <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_UART_Receive_IT+0x94>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d01f      	beq.n	8002cc8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	623b      	str	r3, [r7, #32]
 8002cb6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	69f9      	ldr	r1, [r7, #28]
 8002cba:	6a3a      	ldr	r2, [r7, #32]
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e6      	bne.n	8002c96 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 ffa4 	bl	8003c1c <UART_Start_Receive_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3728      	adds	r7, #40	; 0x28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40008000 	.word	0x40008000

08002ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0ba      	sub	sp, #232	; 0xe8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d12:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d16:	4013      	ands	r3, r2
 8002d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11b      	bne.n	8002d5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 82e3 	beq.w	8003318 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
      }
      return;
 8002d5a:	e2dd      	b.n	8003318 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8123 	beq.w	8002fac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002d66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002d6a:	4b8d      	ldr	r3, [pc, #564]	; (8002fa0 <HAL_UART_IRQHandler+0x2b8>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_UART_IRQHandler+0x2bc>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8116 	beq.w	8002fac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d011      	beq.n	8002db0 <HAL_UART_IRQHandler+0xc8>
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d011      	beq.n	8002de0 <HAL_UART_IRQHandler+0xf8>
 8002dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d011      	beq.n	8002e10 <HAL_UART_IRQHandler+0x128>
 8002dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f043 0202 	orr.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d017      	beq.n	8002e4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002e28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002e2c:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_UART_IRQHandler+0x2b8>)
 8002e2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f043 0208 	orr.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d012      	beq.n	8002e7e <HAL_UART_IRQHandler+0x196>
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00c      	beq.n	8002e7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8249 	beq.w	800331c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d013      	beq.n	8002ebe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d005      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d054      	beq.n	8002f8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 ffbc 	bl	8003e60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d146      	bne.n	8002f84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3308      	adds	r3, #8
 8002efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1d9      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d017      	beq.n	8002f7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_UART_IRQHandler+0x2c0>)
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fb2f 	bl	80015c0 <HAL_DMA_Abort_IT>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d019      	beq.n	8002f9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002f76:	4610      	mov	r0, r2
 8002f78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7a:	e00f      	b.n	8002f9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9e1 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f82:	e00b      	b.n	8002f9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f9dd 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8a:	e007      	b.n	8002f9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9d9 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002f9a:	e1bf      	b.n	800331c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	bf00      	nop
    return;
 8002f9e:	e1bd      	b.n	800331c <HAL_UART_IRQHandler+0x634>
 8002fa0:	10000001 	.word	0x10000001
 8002fa4:	04000120 	.word	0x04000120
 8002fa8:	08003f2d 	.word	0x08003f2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 8153 	bne.w	800325c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 814c 	beq.w	800325c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8145 	beq.w	800325c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	f040 80bb 	bne.w	8003160 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 818f 	beq.w	8003320 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003008:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800300c:	429a      	cmp	r2, r3
 800300e:	f080 8187 	bcs.w	8003320 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 8087 	bne.w	800313e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800305a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800305e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1da      	bne.n	8003030 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3308      	adds	r3, #8
 8003080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800308a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800309e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e1      	bne.n	800307a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3308      	adds	r3, #8
 80030bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3308      	adds	r3, #8
 80030d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e3      	bne.n	80030b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800310a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310c:	f023 0310 	bic.w	r3, r3, #16
 8003110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800311e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003120:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800312c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e4      	bne.n	80030fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe f9e8 	bl	800150e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003150:	b29b      	uxth	r3, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	b29b      	uxth	r3, r3
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8fd 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800315e:	e0df      	b.n	8003320 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800316c:	b29b      	uxth	r3, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80d1 	beq.w	8003324 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80cc 	beq.w	8003324 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031ae:	647b      	str	r3, [r7, #68]	; 0x44
 80031b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e4      	bne.n	800318c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	623b      	str	r3, [r7, #32]
   return(result);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031ea:	633a      	str	r2, [r7, #48]	; 0x30
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e1      	bne.n	80031c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0310 	bic.w	r3, r3, #16
 8003226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	69b9      	ldr	r1, [r7, #24]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	617b      	str	r3, [r7, #20]
   return(result);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e4      	bne.n	8003212 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800324e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f87f 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800325a:	e063      	b.n	8003324 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <HAL_UART_IRQHandler+0x59e>
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800327c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f001 fbb2 	bl	80049e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003284:	e051      	b.n	800332a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03a      	beq.n	8003328 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
    }
    return;
 80032ba:	e035      	b.n	8003328 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_UART_IRQHandler+0x5f4>
 80032c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fe3f 	bl	8003f58 <UART_EndTransmit_IT>
    return;
 80032da:	e026      	b.n	800332a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_UART_IRQHandler+0x614>
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 fb8b 	bl	8004a10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032fa:	e016      	b.n	800332a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_UART_IRQHandler+0x642>
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330c:	2b00      	cmp	r3, #0
 800330e:	da0c      	bge.n	800332a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 fb73 	bl	80049fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003316:	e008      	b.n	800332a <HAL_UART_IRQHandler+0x642>
      return;
 8003318:	bf00      	nop
 800331a:	e006      	b.n	800332a <HAL_UART_IRQHandler+0x642>
    return;
 800331c:	bf00      	nop
 800331e:	e004      	b.n	800332a <HAL_UART_IRQHandler+0x642>
      return;
 8003320:	bf00      	nop
 8003322:	e002      	b.n	800332a <HAL_UART_IRQHandler+0x642>
      return;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <HAL_UART_IRQHandler+0x642>
    return;
 8003328:	bf00      	nop
  }
}
 800332a:	37e8      	adds	r7, #232	; 0xe8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4313      	orrs	r3, r2
 8003392:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4baf      	ldr	r3, [pc, #700]	; (8003658 <UART_SetConfig+0x2e8>)
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	69f9      	ldr	r1, [r7, #28]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4aa4      	ldr	r2, [pc, #656]	; (800365c <UART_SetConfig+0x2ec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	69f9      	ldr	r1, [r7, #28]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f023 010f 	bic.w	r1, r3, #15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a95      	ldr	r2, [pc, #596]	; (8003660 <UART_SetConfig+0x2f0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d120      	bne.n	8003452 <UART_SetConfig+0xe2>
 8003410:	4b94      	ldr	r3, [pc, #592]	; (8003664 <UART_SetConfig+0x2f4>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d816      	bhi.n	800344c <UART_SetConfig+0xdc>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <UART_SetConfig+0xb4>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003435 	.word	0x08003435
 8003428:	08003441 	.word	0x08003441
 800342c:	0800343b 	.word	0x0800343b
 8003430:	08003447 	.word	0x08003447
 8003434:	2301      	movs	r3, #1
 8003436:	76fb      	strb	r3, [r7, #27]
 8003438:	e0bc      	b.n	80035b4 <UART_SetConfig+0x244>
 800343a:	2302      	movs	r3, #2
 800343c:	76fb      	strb	r3, [r7, #27]
 800343e:	e0b9      	b.n	80035b4 <UART_SetConfig+0x244>
 8003440:	2304      	movs	r3, #4
 8003442:	76fb      	strb	r3, [r7, #27]
 8003444:	e0b6      	b.n	80035b4 <UART_SetConfig+0x244>
 8003446:	2308      	movs	r3, #8
 8003448:	76fb      	strb	r3, [r7, #27]
 800344a:	e0b3      	b.n	80035b4 <UART_SetConfig+0x244>
 800344c:	2310      	movs	r3, #16
 800344e:	76fb      	strb	r3, [r7, #27]
 8003450:	e0b0      	b.n	80035b4 <UART_SetConfig+0x244>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a84      	ldr	r2, [pc, #528]	; (8003668 <UART_SetConfig+0x2f8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d132      	bne.n	80034c2 <UART_SetConfig+0x152>
 800345c:	4b81      	ldr	r3, [pc, #516]	; (8003664 <UART_SetConfig+0x2f4>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d828      	bhi.n	80034bc <UART_SetConfig+0x14c>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x100>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080034bd 	.word	0x080034bd
 8003478:	080034bd 	.word	0x080034bd
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034b1 	.word	0x080034b1
 8003484:	080034bd 	.word	0x080034bd
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034ab 	.word	0x080034ab
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034bd 	.word	0x080034bd
 80034a0:	080034b7 	.word	0x080034b7
 80034a4:	2300      	movs	r3, #0
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	e084      	b.n	80035b4 <UART_SetConfig+0x244>
 80034aa:	2302      	movs	r3, #2
 80034ac:	76fb      	strb	r3, [r7, #27]
 80034ae:	e081      	b.n	80035b4 <UART_SetConfig+0x244>
 80034b0:	2304      	movs	r3, #4
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	e07e      	b.n	80035b4 <UART_SetConfig+0x244>
 80034b6:	2308      	movs	r3, #8
 80034b8:	76fb      	strb	r3, [r7, #27]
 80034ba:	e07b      	b.n	80035b4 <UART_SetConfig+0x244>
 80034bc:	2310      	movs	r3, #16
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e078      	b.n	80035b4 <UART_SetConfig+0x244>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <UART_SetConfig+0x2fc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d120      	bne.n	800350e <UART_SetConfig+0x19e>
 80034cc:	4b65      	ldr	r3, [pc, #404]	; (8003664 <UART_SetConfig+0x2f4>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d013      	beq.n	8003502 <UART_SetConfig+0x192>
 80034da:	2b30      	cmp	r3, #48	; 0x30
 80034dc:	d814      	bhi.n	8003508 <UART_SetConfig+0x198>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d009      	beq.n	80034f6 <UART_SetConfig+0x186>
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d810      	bhi.n	8003508 <UART_SetConfig+0x198>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <UART_SetConfig+0x180>
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d006      	beq.n	80034fc <UART_SetConfig+0x18c>
 80034ee:	e00b      	b.n	8003508 <UART_SetConfig+0x198>
 80034f0:	2300      	movs	r3, #0
 80034f2:	76fb      	strb	r3, [r7, #27]
 80034f4:	e05e      	b.n	80035b4 <UART_SetConfig+0x244>
 80034f6:	2302      	movs	r3, #2
 80034f8:	76fb      	strb	r3, [r7, #27]
 80034fa:	e05b      	b.n	80035b4 <UART_SetConfig+0x244>
 80034fc:	2304      	movs	r3, #4
 80034fe:	76fb      	strb	r3, [r7, #27]
 8003500:	e058      	b.n	80035b4 <UART_SetConfig+0x244>
 8003502:	2308      	movs	r3, #8
 8003504:	76fb      	strb	r3, [r7, #27]
 8003506:	e055      	b.n	80035b4 <UART_SetConfig+0x244>
 8003508:	2310      	movs	r3, #16
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e052      	b.n	80035b4 <UART_SetConfig+0x244>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a57      	ldr	r2, [pc, #348]	; (8003670 <UART_SetConfig+0x300>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d120      	bne.n	800355a <UART_SetConfig+0x1ea>
 8003518:	4b52      	ldr	r3, [pc, #328]	; (8003664 <UART_SetConfig+0x2f4>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003522:	2bc0      	cmp	r3, #192	; 0xc0
 8003524:	d013      	beq.n	800354e <UART_SetConfig+0x1de>
 8003526:	2bc0      	cmp	r3, #192	; 0xc0
 8003528:	d814      	bhi.n	8003554 <UART_SetConfig+0x1e4>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d009      	beq.n	8003542 <UART_SetConfig+0x1d2>
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d810      	bhi.n	8003554 <UART_SetConfig+0x1e4>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <UART_SetConfig+0x1cc>
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d006      	beq.n	8003548 <UART_SetConfig+0x1d8>
 800353a:	e00b      	b.n	8003554 <UART_SetConfig+0x1e4>
 800353c:	2300      	movs	r3, #0
 800353e:	76fb      	strb	r3, [r7, #27]
 8003540:	e038      	b.n	80035b4 <UART_SetConfig+0x244>
 8003542:	2302      	movs	r3, #2
 8003544:	76fb      	strb	r3, [r7, #27]
 8003546:	e035      	b.n	80035b4 <UART_SetConfig+0x244>
 8003548:	2304      	movs	r3, #4
 800354a:	76fb      	strb	r3, [r7, #27]
 800354c:	e032      	b.n	80035b4 <UART_SetConfig+0x244>
 800354e:	2308      	movs	r3, #8
 8003550:	76fb      	strb	r3, [r7, #27]
 8003552:	e02f      	b.n	80035b4 <UART_SetConfig+0x244>
 8003554:	2310      	movs	r3, #16
 8003556:	76fb      	strb	r3, [r7, #27]
 8003558:	e02c      	b.n	80035b4 <UART_SetConfig+0x244>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3f      	ldr	r2, [pc, #252]	; (800365c <UART_SetConfig+0x2ec>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d125      	bne.n	80035b0 <UART_SetConfig+0x240>
 8003564:	4b3f      	ldr	r3, [pc, #252]	; (8003664 <UART_SetConfig+0x2f4>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800356e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003572:	d017      	beq.n	80035a4 <UART_SetConfig+0x234>
 8003574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003578:	d817      	bhi.n	80035aa <UART_SetConfig+0x23a>
 800357a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357e:	d00b      	beq.n	8003598 <UART_SetConfig+0x228>
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d811      	bhi.n	80035aa <UART_SetConfig+0x23a>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <UART_SetConfig+0x222>
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d006      	beq.n	800359e <UART_SetConfig+0x22e>
 8003590:	e00b      	b.n	80035aa <UART_SetConfig+0x23a>
 8003592:	2300      	movs	r3, #0
 8003594:	76fb      	strb	r3, [r7, #27]
 8003596:	e00d      	b.n	80035b4 <UART_SetConfig+0x244>
 8003598:	2302      	movs	r3, #2
 800359a:	76fb      	strb	r3, [r7, #27]
 800359c:	e00a      	b.n	80035b4 <UART_SetConfig+0x244>
 800359e:	2304      	movs	r3, #4
 80035a0:	76fb      	strb	r3, [r7, #27]
 80035a2:	e007      	b.n	80035b4 <UART_SetConfig+0x244>
 80035a4:	2308      	movs	r3, #8
 80035a6:	76fb      	strb	r3, [r7, #27]
 80035a8:	e004      	b.n	80035b4 <UART_SetConfig+0x244>
 80035aa:	2310      	movs	r3, #16
 80035ac:	76fb      	strb	r3, [r7, #27]
 80035ae:	e001      	b.n	80035b4 <UART_SetConfig+0x244>
 80035b0:	2310      	movs	r3, #16
 80035b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <UART_SetConfig+0x2ec>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f040 809e 	bne.w	80036fc <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035c0:	7efb      	ldrb	r3, [r7, #27]
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d823      	bhi.n	800360e <UART_SetConfig+0x29e>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x25c>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	0800360f 	.word	0x0800360f
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	080035ff 	.word	0x080035ff
 80035e0:	0800360f 	.word	0x0800360f
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800360f 	.word	0x0800360f
 80035ec:	08003607 	.word	0x08003607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe ff42 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 80035f4:	6178      	str	r0, [r7, #20]
        break;
 80035f6:	e00f      	b.n	8003618 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f8:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <UART_SetConfig+0x304>)
 80035fa:	617b      	str	r3, [r7, #20]
        break;
 80035fc:	e00c      	b.n	8003618 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe fecd 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8003602:	6178      	str	r0, [r7, #20]
        break;
 8003604:	e008      	b.n	8003618 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	617b      	str	r3, [r7, #20]
        break;
 800360c:	e004      	b.n	8003618 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	76bb      	strb	r3, [r7, #26]
        break;
 8003616:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 812c 	beq.w	8003878 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	4a14      	ldr	r2, [pc, #80]	; (8003678 <UART_SetConfig+0x308>)
 8003626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362a:	461a      	mov	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003632:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d305      	bcc.n	8003650 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	d915      	bls.n	800367c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	76bb      	strb	r3, [r7, #26]
 8003654:	e110      	b.n	8003878 <UART_SetConfig+0x508>
 8003656:	bf00      	nop
 8003658:	cfff69f3 	.word	0xcfff69f3
 800365c:	40008000 	.word	0x40008000
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40004400 	.word	0x40004400
 800366c:	40004800 	.word	0x40004800
 8003670:	40004c00 	.word	0x40004c00
 8003674:	00f42400 	.word	0x00f42400
 8003678:	08006050 	.word	0x08006050
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4618      	mov	r0, r3
 8003680:	f04f 0100 	mov.w	r1, #0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	4a85      	ldr	r2, [pc, #532]	; (80038a0 <UART_SetConfig+0x530>)
 800368a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800368e:	b29a      	uxth	r2, r3
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	f7fc fe7c 	bl	8000390 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	020b      	lsls	r3, r1, #8
 80036aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036ae:	0202      	lsls	r2, r0, #8
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	6849      	ldr	r1, [r1, #4]
 80036b4:	0849      	lsrs	r1, r1, #1
 80036b6:	4608      	mov	r0, r1
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	1814      	adds	r4, r2, r0
 80036be:	eb43 0501 	adc.w	r5, r3, r1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	4620      	mov	r0, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	f7fc fe5e 	bl	8000390 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e2:	d308      	bcc.n	80036f6 <UART_SetConfig+0x386>
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ea:	d204      	bcs.n	80036f6 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	e0c0      	b.n	8003878 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	76bb      	strb	r3, [r7, #26]
 80036fa:	e0bd      	b.n	8003878 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003704:	d164      	bne.n	80037d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003706:	7efb      	ldrb	r3, [r7, #27]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d828      	bhi.n	800375e <UART_SetConfig+0x3ee>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <UART_SetConfig+0x3a4>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003739 	.word	0x08003739
 8003718:	08003741 	.word	0x08003741
 800371c:	08003749 	.word	0x08003749
 8003720:	0800375f 	.word	0x0800375f
 8003724:	0800374f 	.word	0x0800374f
 8003728:	0800375f 	.word	0x0800375f
 800372c:	0800375f 	.word	0x0800375f
 8003730:	0800375f 	.word	0x0800375f
 8003734:	08003757 	.word	0x08003757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003738:	f7fe fe9e 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 800373c:	6178      	str	r0, [r7, #20]
        break;
 800373e:	e013      	b.n	8003768 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003740:	f7fe feb0 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003744:	6178      	str	r0, [r7, #20]
        break;
 8003746:	e00f      	b.n	8003768 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003748:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <UART_SetConfig+0x534>)
 800374a:	617b      	str	r3, [r7, #20]
        break;
 800374c:	e00c      	b.n	8003768 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800374e:	f7fe fe25 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8003752:	6178      	str	r0, [r7, #20]
        break;
 8003754:	e008      	b.n	8003768 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375a:	617b      	str	r3, [r7, #20]
        break;
 800375c:	e004      	b.n	8003768 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	76bb      	strb	r3, [r7, #26]
        break;
 8003766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8084 	beq.w	8003878 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <UART_SetConfig+0x530>)
 8003776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800377a:	461a      	mov	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003782:	005a      	lsls	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d916      	bls.n	80037ca <UART_SetConfig+0x45a>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a2:	d212      	bcs.n	80037ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f023 030f 	bic.w	r3, r3, #15
 80037ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	4313      	orrs	r3, r2
 80037be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	89fa      	ldrh	r2, [r7, #14]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e056      	b.n	8003878 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	76bb      	strb	r3, [r7, #26]
 80037ce:	e053      	b.n	8003878 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d0:	7efb      	ldrb	r3, [r7, #27]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d827      	bhi.n	8003826 <UART_SetConfig+0x4b6>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x46c>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003827 	.word	0x08003827
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003827 	.word	0x08003827
 80037f4:	08003827 	.word	0x08003827
 80037f8:	08003827 	.word	0x08003827
 80037fc:	0800381f 	.word	0x0800381f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe fe3a 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003804:	6178      	str	r0, [r7, #20]
        break;
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe fe4c 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 800380c:	6178      	str	r0, [r7, #20]
        break;
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <UART_SetConfig+0x534>)
 8003812:	617b      	str	r3, [r7, #20]
        break;
 8003814:	e00c      	b.n	8003830 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe fdc1 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800381a:	6178      	str	r0, [r7, #20]
        break;
 800381c:	e008      	b.n	8003830 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	617b      	str	r3, [r7, #20]
        break;
 8003824:	e004      	b.n	8003830 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	76bb      	strb	r3, [r7, #26]
        break;
 800382e:	bf00      	nop
    }

    if (pclk != 0U)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <UART_SetConfig+0x530>)
 800383c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003840:	461a      	mov	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fbb3 f2f2 	udiv	r2, r3, r2
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	441a      	add	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2b0f      	cmp	r3, #15
 800385e:	d909      	bls.n	8003874 <UART_SetConfig+0x504>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d205      	bcs.n	8003874 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e001      	b.n	8003878 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003894:	7ebb      	ldrb	r3, [r7, #26]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bdb0      	pop	{r4, r5, r7, pc}
 800389e:	bf00      	nop
 80038a0:	08006050 	.word	0x08006050
 80038a4:	00f42400 	.word	0x00f42400

080038a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01a      	beq.n	80039be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a6:	d10a      	bne.n	80039be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b098      	sub	sp, #96	; 0x60
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039fc:	f7fd fc4a 	bl	8001294 <HAL_GetTick>
 8003a00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d12f      	bne.n	8003a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f88e 	bl	8003b40 <UART_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d022      	beq.n	8003a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e063      	b.n	8003b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d149      	bne.n	8003b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	2200      	movs	r2, #0
 8003a88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f857 	bl	8003b40 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d03c      	beq.n	8003b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aea:	61fa      	str	r2, [r7, #28]
 8003aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	617b      	str	r3, [r7, #20]
   return(result);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e012      	b.n	8003b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3758      	adds	r7, #88	; 0x58
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b50:	e04f      	b.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d04b      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fd fb9b 	bl	8001294 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e04e      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d037      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b80      	cmp	r3, #128	; 0x80
 8003b86:	d034      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d031      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d110      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f95b 	bl	8003e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2208      	movs	r2, #8
 8003bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e029      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bcc:	d111      	bne.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f941 	bl	8003e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e00f      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d0a0      	beq.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b0a3      	sub	sp, #140	; 0x8c
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d10e      	bne.n	8003c6e <UART_Start_Receive_IT+0x52>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <UART_Start_Receive_IT+0x48>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c62:	e02d      	b.n	8003cc0 <UART_Start_Receive_IT+0xa4>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c6c:	e028      	b.n	8003cc0 <UART_Start_Receive_IT+0xa4>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <UART_Start_Receive_IT+0x76>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <UART_Start_Receive_IT+0x6c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	22ff      	movs	r2, #255	; 0xff
 8003c82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c86:	e01b      	b.n	8003cc0 <UART_Start_Receive_IT+0xa4>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	227f      	movs	r2, #127	; 0x7f
 8003c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c90:	e016      	b.n	8003cc0 <UART_Start_Receive_IT+0xa4>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9a:	d10d      	bne.n	8003cb8 <UART_Start_Receive_IT+0x9c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <UART_Start_Receive_IT+0x92>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	227f      	movs	r2, #127	; 0x7f
 8003ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cac:	e008      	b.n	8003cc0 <UART_Start_Receive_IT+0xa4>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	223f      	movs	r2, #63	; 0x3f
 8003cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cb6:	e003      	b.n	8003cc0 <UART_Start_Receive_IT+0xa4>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2222      	movs	r2, #34	; 0x22
 8003ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003cf4:	673a      	str	r2, [r7, #112]	; 0x70
 8003cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003cfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e3      	bne.n	8003cd0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d10:	d14f      	bne.n	8003db2 <UART_Start_Receive_IT+0x196>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d349      	bcc.n	8003db2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d107      	bne.n	8003d38 <UART_Start_Receive_IT+0x11c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <UART_Start_Receive_IT+0x234>)
 8003d34:	675a      	str	r2, [r3, #116]	; 0x74
 8003d36:	e002      	b.n	8003d3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <UART_Start_Receive_IT+0x238>)
 8003d3c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e4      	bne.n	8003d46 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d9c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_Start_Receive_IT+0x160>
 8003db0:	e046      	b.n	8003e40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d107      	bne.n	8003dcc <UART_Start_Receive_IT+0x1b0>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <UART_Start_Receive_IT+0x23c>)
 8003dc8:	675a      	str	r2, [r3, #116]	; 0x74
 8003dca:	e002      	b.n	8003dd2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <UART_Start_Receive_IT+0x240>)
 8003dd0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d019      	beq.n	8003e0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003dee:	677b      	str	r3, [r7, #116]	; 0x74
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_Start_Receive_IT+0x1be>
 8003e0c:	e018      	b.n	8003e40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f043 0320 	orr.w	r3, r3, #32
 8003e22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69f9      	ldr	r1, [r7, #28]
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	378c      	adds	r7, #140	; 0x8c
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	08004681 	.word	0x08004681
 8003e54:	08004321 	.word	0x08004321
 8003e58:	08004169 	.word	0x08004169
 8003e5c:	08003fb1 	.word	0x08003fb1

08003e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b095      	sub	sp, #84	; 0x54
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e86:	643b      	str	r3, [r7, #64]	; 0x40
 8003e88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e6      	bne.n	8003e68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e3      	bne.n	8003e9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d118      	bne.n	8003f0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f023 0310 	bic.w	r3, r3, #16
 8003eee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	613b      	str	r3, [r7, #16]
   return(result);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e6      	bne.n	8003eda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003f20:	bf00      	nop
 8003f22:	3754      	adds	r7, #84	; 0x54
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff f9fa 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff f9c5 	bl	8003330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa6:	bf00      	nop
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b09c      	sub	sp, #112	; 0x70
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc8:	2b22      	cmp	r3, #34	; 0x22
 8003fca:	f040 80be 	bne.w	800414a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fdc:	b2d9      	uxtb	r1, r3
 8003fde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	400a      	ands	r2, r1
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 80a1 	bne.w	800415a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800402c:	66bb      	str	r3, [r7, #104]	; 0x68
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004036:	65bb      	str	r3, [r7, #88]	; 0x58
 8004038:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800403c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e6      	bne.n	8004018 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	667b      	str	r3, [r7, #100]	; 0x64
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800406a:	647a      	str	r2, [r7, #68]	; 0x44
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a33      	ldr	r2, [pc, #204]	; (8004164 <UART_RxISR_8BIT+0x1b4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01f      	beq.n	80040dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	623b      	str	r3, [r7, #32]
   return(result);
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040be:	663b      	str	r3, [r7, #96]	; 0x60
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d12e      	bne.n	8004142 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	69b9      	ldr	r1, [r7, #24]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	617b      	str	r3, [r7, #20]
   return(result);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e6      	bne.n	80040ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	d103      	bne.n	8004132 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2210      	movs	r2, #16
 8004130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff f90c 	bl	8003358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004140:	e00b      	b.n	800415a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc fdfe 	bl	8000d44 <HAL_UART_RxCpltCallback>
}
 8004148:	e007      	b.n	800415a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0208 	orr.w	r2, r2, #8
 8004158:	619a      	str	r2, [r3, #24]
}
 800415a:	bf00      	nop
 800415c:	3770      	adds	r7, #112	; 0x70
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40008000 	.word	0x40008000

08004168 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b09c      	sub	sp, #112	; 0x70
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004176:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	2b22      	cmp	r3, #34	; 0x22
 8004182:	f040 80be 	bne.w	8004302 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004196:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800419a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800419e:	4013      	ands	r3, r2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 80a1 	bne.w	8004312 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80041de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e4:	667b      	str	r3, [r7, #100]	; 0x64
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ee:	657b      	str	r3, [r7, #84]	; 0x54
 80041f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e6      	bne.n	80041d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004222:	643a      	str	r2, [r7, #64]	; 0x40
 8004224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a33      	ldr	r2, [pc, #204]	; (800431c <UART_RxISR_16BIT+0x1b4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01f      	beq.n	8004294 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004282:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d12e      	bne.n	80042fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f023 0310 	bic.w	r3, r3, #16
 80042b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	613b      	str	r3, [r7, #16]
   return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d103      	bne.n	80042ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2210      	movs	r2, #16
 80042e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff f830 	bl	8003358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042f8:	e00b      	b.n	8004312 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc fd22 	bl	8000d44 <HAL_UART_RxCpltCallback>
}
 8004300:	e007      	b.n	8004312 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0208 	orr.w	r2, r2, #8
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	3770      	adds	r7, #112	; 0x70
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40008000 	.word	0x40008000

08004320 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b0ac      	sub	sp, #176	; 0xb0
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800432e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004356:	2b22      	cmp	r3, #34	; 0x22
 8004358:	f040 8182 	bne.w	8004660 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004362:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004366:	e125      	b.n	80045b4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004372:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004376:	b2d9      	uxtb	r1, r3
 8004378:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800437c:	b2da      	uxtb	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	400a      	ands	r2, r1
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d053      	beq.n	8004462 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80043c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d011      	beq.n	800441a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80043f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2202      	movs	r2, #2
 8004408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	f043 0204 	orr.w	r2, r3, #4
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800441a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2204      	movs	r2, #4
 8004438:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f043 0202 	orr.w	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	2b00      	cmp	r3, #0
 8004452:	d006      	beq.n	8004462 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fe ff75 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 80a2 	bne.w	80045b4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004492:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004494:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004498:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80044a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e4      	bne.n	8004470 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80044b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ce:	66ba      	str	r2, [r7, #104]	; 0x68
 80044d0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80044d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80044dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e1      	bne.n	80044a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a5f      	ldr	r2, [pc, #380]	; (8004678 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d021      	beq.n	8004544 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01a      	beq.n	8004544 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004530:	657b      	str	r3, [r7, #84]	; 0x54
 8004532:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800453e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e4      	bne.n	800450e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d130      	bne.n	80045ae <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004574:	643b      	str	r3, [r7, #64]	; 0x40
 8004576:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800457a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e4      	bne.n	8004552 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b10      	cmp	r3, #16
 8004594:	d103      	bne.n	800459e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe fed6 	bl	8003358 <HAL_UARTEx_RxEventCallback>
 80045ac:	e002      	b.n	80045b4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fbc8 	bl	8000d44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045b4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80045bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f aecf 	bne.w	8004368 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80045d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d049      	beq.n	8004670 <UART_RxISR_8BIT_FIFOEN+0x350>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045e2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d242      	bcs.n	8004670 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800460e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e3      	bne.n	80045ea <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004626:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	60bb      	str	r3, [r7, #8]
   return(result);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6979      	ldr	r1, [r7, #20]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e4      	bne.n	8004628 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800465e:	e007      	b.n	8004670 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0208 	orr.w	r2, r2, #8
 800466e:	619a      	str	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	37b0      	adds	r7, #176	; 0xb0
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40008000 	.word	0x40008000
 800467c:	08003fb1 	.word	0x08003fb1

08004680 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b0ae      	sub	sp, #184	; 0xb8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800468e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	f040 8186 	bne.w	80049c8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80046c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80046c6:	e129      	b.n	800491c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80046da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80046de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80046e2:	4013      	ands	r3, r2
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	1c9a      	adds	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d053      	beq.n	80047c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800471e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <UART_RxISR_16BIT_FIFOEN+0xce>
 800472a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800474e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d011      	beq.n	800477e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800475a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2202      	movs	r2, #2
 800476c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f043 0204 	orr.w	r2, r3, #4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d011      	beq.n	80047ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800478a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2204      	movs	r2, #4
 800479c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f043 0202 	orr.w	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fe fdc3 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 80a4 	bne.w	800491c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047fa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e2      	bne.n	80047d4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800481e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800483c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e1      	bne.n	800480e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a5f      	ldr	r2, [pc, #380]	; (80049e0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d021      	beq.n	80048ac <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01a      	beq.n	80048ac <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800488a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004898:	65bb      	str	r3, [r7, #88]	; 0x58
 800489a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800489e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e4      	bne.n	8004876 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d130      	bne.n	8004916 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
 80048de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e4      	bne.n	80048ba <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d103      	bne.n	8004906 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fe fd22 	bl	8003358 <HAL_UARTEx_RxEventCallback>
 8004914:	e002      	b.n	800491c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc fa14 	bl	8000d44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800491c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004924:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	f47f aecb 	bne.w	80046c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004938:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800493c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004940:	2b00      	cmp	r3, #0
 8004942:	d049      	beq.n	80049d8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800494a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800494e:	429a      	cmp	r2, r3
 8004950:	d242      	bcs.n	80049d8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	623b      	str	r3, [r7, #32]
   return(result);
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004976:	633a      	str	r2, [r7, #48]	; 0x30
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800498e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	60fb      	str	r3, [r7, #12]
   return(result);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f043 0320 	orr.w	r3, r3, #32
 80049a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	617b      	str	r3, [r7, #20]
   return(result);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e4      	bne.n	8004990 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049c6:	e007      	b.n	80049d8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	619a      	str	r2, [r3, #24]
}
 80049d8:	bf00      	nop
 80049da:	37b8      	adds	r7, #184	; 0xb8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40008000 	.word	0x40008000
 80049e4:	08004169 	.word	0x08004169

080049e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_UARTEx_DisableFifoMode+0x16>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e027      	b.n	8004a8a <HAL_UARTEx_DisableFifoMode+0x66>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2224      	movs	r2, #36	; 0x24
 8004a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e02d      	b.n	8004b0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2224      	movs	r2, #36	; 0x24
 8004aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f850 	bl	8004b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e02d      	b.n	8004b86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2224      	movs	r2, #36	; 0x24
 8004b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f812 	bl	8004b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d108      	bne.n	8004bb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bb0:	e031      	b.n	8004c16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	0e5b      	lsrs	r3, r3, #25
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	0f5b      	lsrs	r3, r3, #29
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bda:	7bbb      	ldrb	r3, [r7, #14]
 8004bdc:	7b3a      	ldrb	r2, [r7, #12]
 8004bde:	4911      	ldr	r1, [pc, #68]	; (8004c24 <UARTEx_SetNbDataToProcess+0x94>)
 8004be0:	5c8a      	ldrb	r2, [r1, r2]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004be6:	7b3a      	ldrb	r2, [r7, #12]
 8004be8:	490f      	ldr	r1, [pc, #60]	; (8004c28 <UARTEx_SetNbDataToProcess+0x98>)
 8004bea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	7b7a      	ldrb	r2, [r7, #13]
 8004bfc:	4909      	ldr	r1, [pc, #36]	; (8004c24 <UARTEx_SetNbDataToProcess+0x94>)
 8004bfe:	5c8a      	ldrb	r2, [r1, r2]
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c04:	7b7a      	ldrb	r2, [r7, #13]
 8004c06:	4908      	ldr	r1, [pc, #32]	; (8004c28 <UARTEx_SetNbDataToProcess+0x98>)
 8004c08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	08006068 	.word	0x08006068
 8004c28:	08006070 	.word	0x08006070

08004c2c <__errno>:
 8004c2c:	4b01      	ldr	r3, [pc, #4]	; (8004c34 <__errno+0x8>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c

08004c38 <__libc_init_array>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4d0d      	ldr	r5, [pc, #52]	; (8004c70 <__libc_init_array+0x38>)
 8004c3c:	4c0d      	ldr	r4, [pc, #52]	; (8004c74 <__libc_init_array+0x3c>)
 8004c3e:	1b64      	subs	r4, r4, r5
 8004c40:	10a4      	asrs	r4, r4, #2
 8004c42:	2600      	movs	r6, #0
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	d109      	bne.n	8004c5c <__libc_init_array+0x24>
 8004c48:	4d0b      	ldr	r5, [pc, #44]	; (8004c78 <__libc_init_array+0x40>)
 8004c4a:	4c0c      	ldr	r4, [pc, #48]	; (8004c7c <__libc_init_array+0x44>)
 8004c4c:	f001 f942 	bl	8005ed4 <_init>
 8004c50:	1b64      	subs	r4, r4, r5
 8004c52:	10a4      	asrs	r4, r4, #2
 8004c54:	2600      	movs	r6, #0
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d105      	bne.n	8004c66 <__libc_init_array+0x2e>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c60:	4798      	blx	r3
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7ee      	b.n	8004c44 <__libc_init_array+0xc>
 8004c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6a:	4798      	blx	r3
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	e7f2      	b.n	8004c56 <__libc_init_array+0x1e>
 8004c70:	080061cc 	.word	0x080061cc
 8004c74:	080061cc 	.word	0x080061cc
 8004c78:	080061cc 	.word	0x080061cc
 8004c7c:	080061d0 	.word	0x080061d0

08004c80 <memset>:
 8004c80:	4402      	add	r2, r0
 8004c82:	4603      	mov	r3, r0
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <iprintf>:
 8004c90:	b40f      	push	{r0, r1, r2, r3}
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <iprintf+0x2c>)
 8004c94:	b513      	push	{r0, r1, r4, lr}
 8004c96:	681c      	ldr	r4, [r3, #0]
 8004c98:	b124      	cbz	r4, 8004ca4 <iprintf+0x14>
 8004c9a:	69a3      	ldr	r3, [r4, #24]
 8004c9c:	b913      	cbnz	r3, 8004ca4 <iprintf+0x14>
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 fb06 	bl	80052b0 <__sinit>
 8004ca4:	ab05      	add	r3, sp, #20
 8004ca6:	9a04      	ldr	r2, [sp, #16]
 8004ca8:	68a1      	ldr	r1, [r4, #8]
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fcf1 	bl	8005694 <_vfiprintf_r>
 8004cb2:	b002      	add	sp, #8
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	b004      	add	sp, #16
 8004cba:	4770      	bx	lr
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <putchar>:
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <putchar+0x28>)
 8004cc2:	b513      	push	{r0, r1, r4, lr}
 8004cc4:	681c      	ldr	r4, [r3, #0]
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	b134      	cbz	r4, 8004cd8 <putchar+0x18>
 8004cca:	69a3      	ldr	r3, [r4, #24]
 8004ccc:	b923      	cbnz	r3, 8004cd8 <putchar+0x18>
 8004cce:	9001      	str	r0, [sp, #4]
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 faed 	bl	80052b0 <__sinit>
 8004cd6:	9901      	ldr	r1, [sp, #4]
 8004cd8:	68a2      	ldr	r2, [r4, #8]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	b002      	add	sp, #8
 8004cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce2:	f000 bf9b 	b.w	8005c1c <_putc_r>
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c

08004cec <_puts_r>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	460e      	mov	r6, r1
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	b118      	cbz	r0, 8004cfc <_puts_r+0x10>
 8004cf4:	6983      	ldr	r3, [r0, #24]
 8004cf6:	b90b      	cbnz	r3, 8004cfc <_puts_r+0x10>
 8004cf8:	f000 fada 	bl	80052b0 <__sinit>
 8004cfc:	69ab      	ldr	r3, [r5, #24]
 8004cfe:	68ac      	ldr	r4, [r5, #8]
 8004d00:	b913      	cbnz	r3, 8004d08 <_puts_r+0x1c>
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 fad4 	bl	80052b0 <__sinit>
 8004d08:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <_puts_r+0xd0>)
 8004d0a:	429c      	cmp	r4, r3
 8004d0c:	d120      	bne.n	8004d50 <_puts_r+0x64>
 8004d0e:	686c      	ldr	r4, [r5, #4]
 8004d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d12:	07db      	lsls	r3, r3, #31
 8004d14:	d405      	bmi.n	8004d22 <_puts_r+0x36>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	0598      	lsls	r0, r3, #22
 8004d1a:	d402      	bmi.n	8004d22 <_puts_r+0x36>
 8004d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d1e:	f000 fb77 	bl	8005410 <__retarget_lock_acquire_recursive>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	0719      	lsls	r1, r3, #28
 8004d26:	d51d      	bpl.n	8004d64 <_puts_r+0x78>
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	b1db      	cbz	r3, 8004d64 <_puts_r+0x78>
 8004d2c:	3e01      	subs	r6, #1
 8004d2e:	68a3      	ldr	r3, [r4, #8]
 8004d30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d34:	3b01      	subs	r3, #1
 8004d36:	60a3      	str	r3, [r4, #8]
 8004d38:	bb39      	cbnz	r1, 8004d8a <_puts_r+0x9e>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da38      	bge.n	8004db0 <_puts_r+0xc4>
 8004d3e:	4622      	mov	r2, r4
 8004d40:	210a      	movs	r1, #10
 8004d42:	4628      	mov	r0, r5
 8004d44:	f000 f8bc 	bl	8004ec0 <__swbuf_r>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d011      	beq.n	8004d70 <_puts_r+0x84>
 8004d4c:	250a      	movs	r5, #10
 8004d4e:	e011      	b.n	8004d74 <_puts_r+0x88>
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <_puts_r+0xd4>)
 8004d52:	429c      	cmp	r4, r3
 8004d54:	d101      	bne.n	8004d5a <_puts_r+0x6e>
 8004d56:	68ac      	ldr	r4, [r5, #8]
 8004d58:	e7da      	b.n	8004d10 <_puts_r+0x24>
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <_puts_r+0xd8>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	bf08      	it	eq
 8004d60:	68ec      	ldreq	r4, [r5, #12]
 8004d62:	e7d5      	b.n	8004d10 <_puts_r+0x24>
 8004d64:	4621      	mov	r1, r4
 8004d66:	4628      	mov	r0, r5
 8004d68:	f000 f8fc 	bl	8004f64 <__swsetup_r>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d0dd      	beq.n	8004d2c <_puts_r+0x40>
 8004d70:	f04f 35ff 	mov.w	r5, #4294967295
 8004d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d76:	07da      	lsls	r2, r3, #31
 8004d78:	d405      	bmi.n	8004d86 <_puts_r+0x9a>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	d402      	bmi.n	8004d86 <_puts_r+0x9a>
 8004d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d82:	f000 fb46 	bl	8005412 <__retarget_lock_release_recursive>
 8004d86:	4628      	mov	r0, r5
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da04      	bge.n	8004d98 <_puts_r+0xac>
 8004d8e:	69a2      	ldr	r2, [r4, #24]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	dc06      	bgt.n	8004da2 <_puts_r+0xb6>
 8004d94:	290a      	cmp	r1, #10
 8004d96:	d004      	beq.n	8004da2 <_puts_r+0xb6>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	7019      	strb	r1, [r3, #0]
 8004da0:	e7c5      	b.n	8004d2e <_puts_r+0x42>
 8004da2:	4622      	mov	r2, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f88b 	bl	8004ec0 <__swbuf_r>
 8004daa:	3001      	adds	r0, #1
 8004dac:	d1bf      	bne.n	8004d2e <_puts_r+0x42>
 8004dae:	e7df      	b.n	8004d70 <_puts_r+0x84>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	250a      	movs	r5, #10
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	6022      	str	r2, [r4, #0]
 8004db8:	701d      	strb	r5, [r3, #0]
 8004dba:	e7db      	b.n	8004d74 <_puts_r+0x88>
 8004dbc:	08006150 	.word	0x08006150
 8004dc0:	08006170 	.word	0x08006170
 8004dc4:	08006130 	.word	0x08006130

08004dc8 <puts>:
 8004dc8:	4b02      	ldr	r3, [pc, #8]	; (8004dd4 <puts+0xc>)
 8004dca:	4601      	mov	r1, r0
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	f7ff bf8d 	b.w	8004cec <_puts_r>
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <strstr>:
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	780c      	ldrb	r4, [r1, #0]
 8004ddc:	b164      	cbz	r4, 8004df8 <strstr+0x20>
 8004dde:	4603      	mov	r3, r0
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	1c5e      	adds	r6, r3, #1
 8004de6:	b90a      	cbnz	r2, 8004dec <strstr+0x14>
 8004de8:	4610      	mov	r0, r2
 8004dea:	e005      	b.n	8004df8 <strstr+0x20>
 8004dec:	4294      	cmp	r4, r2
 8004dee:	d108      	bne.n	8004e02 <strstr+0x2a>
 8004df0:	460d      	mov	r5, r1
 8004df2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004df6:	b902      	cbnz	r2, 8004dfa <strstr+0x22>
 8004df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004dfe:	4297      	cmp	r7, r2
 8004e00:	d0f7      	beq.n	8004df2 <strstr+0x1a>
 8004e02:	4633      	mov	r3, r6
 8004e04:	e7ec      	b.n	8004de0 <strstr+0x8>
	...

08004e08 <strtok>:
 8004e08:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <strtok+0x5c>)
 8004e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e0c:	681e      	ldr	r6, [r3, #0]
 8004e0e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004e10:	4605      	mov	r5, r0
 8004e12:	b9fc      	cbnz	r4, 8004e54 <strtok+0x4c>
 8004e14:	2050      	movs	r0, #80	; 0x50
 8004e16:	9101      	str	r1, [sp, #4]
 8004e18:	f000 fb60 	bl	80054dc <malloc>
 8004e1c:	9901      	ldr	r1, [sp, #4]
 8004e1e:	65b0      	str	r0, [r6, #88]	; 0x58
 8004e20:	4602      	mov	r2, r0
 8004e22:	b920      	cbnz	r0, 8004e2e <strtok+0x26>
 8004e24:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <strtok+0x60>)
 8004e26:	4811      	ldr	r0, [pc, #68]	; (8004e6c <strtok+0x64>)
 8004e28:	2157      	movs	r1, #87	; 0x57
 8004e2a:	f000 f909 	bl	8005040 <__assert_func>
 8004e2e:	e9c0 4400 	strd	r4, r4, [r0]
 8004e32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e4e:	6184      	str	r4, [r0, #24]
 8004e50:	7704      	strb	r4, [r0, #28]
 8004e52:	6244      	str	r4, [r0, #36]	; 0x24
 8004e54:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004e56:	2301      	movs	r3, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	b002      	add	sp, #8
 8004e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e60:	f000 b806 	b.w	8004e70 <__strtok_r>
 8004e64:	2000000c 	.word	0x2000000c
 8004e68:	0800607c 	.word	0x0800607c
 8004e6c:	08006093 	.word	0x08006093

08004e70 <__strtok_r>:
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b908      	cbnz	r0, 8004e78 <__strtok_r+0x8>
 8004e74:	6810      	ldr	r0, [r2, #0]
 8004e76:	b188      	cbz	r0, 8004e9c <__strtok_r+0x2c>
 8004e78:	4604      	mov	r4, r0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e80:	460f      	mov	r7, r1
 8004e82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e86:	b91e      	cbnz	r6, 8004e90 <__strtok_r+0x20>
 8004e88:	b965      	cbnz	r5, 8004ea4 <__strtok_r+0x34>
 8004e8a:	6015      	str	r5, [r2, #0]
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	e005      	b.n	8004e9c <__strtok_r+0x2c>
 8004e90:	42b5      	cmp	r5, r6
 8004e92:	d1f6      	bne.n	8004e82 <__strtok_r+0x12>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <__strtok_r+0xa>
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	7003      	strb	r3, [r0, #0]
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	e00c      	b.n	8004ebc <__strtok_r+0x4c>
 8004ea2:	b915      	cbnz	r5, 8004eaa <__strtok_r+0x3a>
 8004ea4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ea8:	460e      	mov	r6, r1
 8004eaa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004eae:	42ab      	cmp	r3, r5
 8004eb0:	d1f7      	bne.n	8004ea2 <__strtok_r+0x32>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f3      	beq.n	8004e9e <__strtok_r+0x2e>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	e7ed      	b.n	8004e9c <__strtok_r+0x2c>

08004ec0 <__swbuf_r>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b118      	cbz	r0, 8004ed2 <__swbuf_r+0x12>
 8004eca:	6983      	ldr	r3, [r0, #24]
 8004ecc:	b90b      	cbnz	r3, 8004ed2 <__swbuf_r+0x12>
 8004ece:	f000 f9ef 	bl	80052b0 <__sinit>
 8004ed2:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <__swbuf_r+0x98>)
 8004ed4:	429c      	cmp	r4, r3
 8004ed6:	d12b      	bne.n	8004f30 <__swbuf_r+0x70>
 8004ed8:	686c      	ldr	r4, [r5, #4]
 8004eda:	69a3      	ldr	r3, [r4, #24]
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	071a      	lsls	r2, r3, #28
 8004ee2:	d52f      	bpl.n	8004f44 <__swbuf_r+0x84>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	b36b      	cbz	r3, 8004f44 <__swbuf_r+0x84>
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	1ac0      	subs	r0, r0, r3
 8004eee:	6963      	ldr	r3, [r4, #20]
 8004ef0:	b2f6      	uxtb	r6, r6
 8004ef2:	4283      	cmp	r3, r0
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	dc04      	bgt.n	8004f02 <__swbuf_r+0x42>
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f944 	bl	8005188 <_fflush_r>
 8004f00:	bb30      	cbnz	r0, 8004f50 <__swbuf_r+0x90>
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	60a3      	str	r3, [r4, #8]
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	701e      	strb	r6, [r3, #0]
 8004f10:	6963      	ldr	r3, [r4, #20]
 8004f12:	3001      	adds	r0, #1
 8004f14:	4283      	cmp	r3, r0
 8004f16:	d004      	beq.n	8004f22 <__swbuf_r+0x62>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	07db      	lsls	r3, r3, #31
 8004f1c:	d506      	bpl.n	8004f2c <__swbuf_r+0x6c>
 8004f1e:	2e0a      	cmp	r6, #10
 8004f20:	d104      	bne.n	8004f2c <__swbuf_r+0x6c>
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f92f 	bl	8005188 <_fflush_r>
 8004f2a:	b988      	cbnz	r0, 8004f50 <__swbuf_r+0x90>
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <__swbuf_r+0x9c>)
 8004f32:	429c      	cmp	r4, r3
 8004f34:	d101      	bne.n	8004f3a <__swbuf_r+0x7a>
 8004f36:	68ac      	ldr	r4, [r5, #8]
 8004f38:	e7cf      	b.n	8004eda <__swbuf_r+0x1a>
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <__swbuf_r+0xa0>)
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	bf08      	it	eq
 8004f40:	68ec      	ldreq	r4, [r5, #12]
 8004f42:	e7ca      	b.n	8004eda <__swbuf_r+0x1a>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 f80c 	bl	8004f64 <__swsetup_r>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d0cb      	beq.n	8004ee8 <__swbuf_r+0x28>
 8004f50:	f04f 37ff 	mov.w	r7, #4294967295
 8004f54:	e7ea      	b.n	8004f2c <__swbuf_r+0x6c>
 8004f56:	bf00      	nop
 8004f58:	08006150 	.word	0x08006150
 8004f5c:	08006170 	.word	0x08006170
 8004f60:	08006130 	.word	0x08006130

08004f64 <__swsetup_r>:
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <__swsetup_r+0xcc>)
 8004f66:	b570      	push	{r4, r5, r6, lr}
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	b125      	cbz	r5, 8004f7a <__swsetup_r+0x16>
 8004f70:	69ab      	ldr	r3, [r5, #24]
 8004f72:	b913      	cbnz	r3, 8004f7a <__swsetup_r+0x16>
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 f99b 	bl	80052b0 <__sinit>
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <__swsetup_r+0xd0>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d10f      	bne.n	8004fa0 <__swsetup_r+0x3c>
 8004f80:	686c      	ldr	r4, [r5, #4]
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f88:	0719      	lsls	r1, r3, #28
 8004f8a:	d42c      	bmi.n	8004fe6 <__swsetup_r+0x82>
 8004f8c:	06dd      	lsls	r5, r3, #27
 8004f8e:	d411      	bmi.n	8004fb4 <__swsetup_r+0x50>
 8004f90:	2309      	movs	r3, #9
 8004f92:	6033      	str	r3, [r6, #0]
 8004f94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f98:	81a3      	strh	r3, [r4, #12]
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	e03e      	b.n	800501e <__swsetup_r+0xba>
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <__swsetup_r+0xd4>)
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d101      	bne.n	8004faa <__swsetup_r+0x46>
 8004fa6:	68ac      	ldr	r4, [r5, #8]
 8004fa8:	e7eb      	b.n	8004f82 <__swsetup_r+0x1e>
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <__swsetup_r+0xd8>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	bf08      	it	eq
 8004fb0:	68ec      	ldreq	r4, [r5, #12]
 8004fb2:	e7e6      	b.n	8004f82 <__swsetup_r+0x1e>
 8004fb4:	0758      	lsls	r0, r3, #29
 8004fb6:	d512      	bpl.n	8004fde <__swsetup_r+0x7a>
 8004fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fba:	b141      	cbz	r1, 8004fce <__swsetup_r+0x6a>
 8004fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	d002      	beq.n	8004fca <__swsetup_r+0x66>
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f000 fa91 	bl	80054ec <_free_r>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6063      	str	r3, [r4, #4]
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	f043 0308 	orr.w	r3, r3, #8
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	b94b      	cbnz	r3, 8004ffe <__swsetup_r+0x9a>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff4:	d003      	beq.n	8004ffe <__swsetup_r+0x9a>
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f000 fa2f 	bl	800545c <__smakebuf_r>
 8004ffe:	89a0      	ldrh	r0, [r4, #12]
 8005000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005004:	f010 0301 	ands.w	r3, r0, #1
 8005008:	d00a      	beq.n	8005020 <__swsetup_r+0xbc>
 800500a:	2300      	movs	r3, #0
 800500c:	60a3      	str	r3, [r4, #8]
 800500e:	6963      	ldr	r3, [r4, #20]
 8005010:	425b      	negs	r3, r3
 8005012:	61a3      	str	r3, [r4, #24]
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	b943      	cbnz	r3, 800502a <__swsetup_r+0xc6>
 8005018:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800501c:	d1ba      	bne.n	8004f94 <__swsetup_r+0x30>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	0781      	lsls	r1, r0, #30
 8005022:	bf58      	it	pl
 8005024:	6963      	ldrpl	r3, [r4, #20]
 8005026:	60a3      	str	r3, [r4, #8]
 8005028:	e7f4      	b.n	8005014 <__swsetup_r+0xb0>
 800502a:	2000      	movs	r0, #0
 800502c:	e7f7      	b.n	800501e <__swsetup_r+0xba>
 800502e:	bf00      	nop
 8005030:	2000000c 	.word	0x2000000c
 8005034:	08006150 	.word	0x08006150
 8005038:	08006170 	.word	0x08006170
 800503c:	08006130 	.word	0x08006130

08005040 <__assert_func>:
 8005040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005042:	4614      	mov	r4, r2
 8005044:	461a      	mov	r2, r3
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <__assert_func+0x2c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4605      	mov	r5, r0
 800504c:	68d8      	ldr	r0, [r3, #12]
 800504e:	b14c      	cbz	r4, 8005064 <__assert_func+0x24>
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <__assert_func+0x30>)
 8005052:	9100      	str	r1, [sp, #0]
 8005054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005058:	4906      	ldr	r1, [pc, #24]	; (8005074 <__assert_func+0x34>)
 800505a:	462b      	mov	r3, r5
 800505c:	f000 f9a6 	bl	80053ac <fiprintf>
 8005060:	f000 fe8a 	bl	8005d78 <abort>
 8005064:	4b04      	ldr	r3, [pc, #16]	; (8005078 <__assert_func+0x38>)
 8005066:	461c      	mov	r4, r3
 8005068:	e7f3      	b.n	8005052 <__assert_func+0x12>
 800506a:	bf00      	nop
 800506c:	2000000c 	.word	0x2000000c
 8005070:	080060f4 	.word	0x080060f4
 8005074:	08006101 	.word	0x08006101
 8005078:	0800612f 	.word	0x0800612f

0800507c <__sflush_r>:
 800507c:	898a      	ldrh	r2, [r1, #12]
 800507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	0710      	lsls	r0, r2, #28
 8005086:	460c      	mov	r4, r1
 8005088:	d458      	bmi.n	800513c <__sflush_r+0xc0>
 800508a:	684b      	ldr	r3, [r1, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	dc05      	bgt.n	800509c <__sflush_r+0x20>
 8005090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	dc02      	bgt.n	800509c <__sflush_r+0x20>
 8005096:	2000      	movs	r0, #0
 8005098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800509e:	2e00      	cmp	r6, #0
 80050a0:	d0f9      	beq.n	8005096 <__sflush_r+0x1a>
 80050a2:	2300      	movs	r3, #0
 80050a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050a8:	682f      	ldr	r7, [r5, #0]
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	d032      	beq.n	8005114 <__sflush_r+0x98>
 80050ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	075a      	lsls	r2, r3, #29
 80050b4:	d505      	bpl.n	80050c2 <__sflush_r+0x46>
 80050b6:	6863      	ldr	r3, [r4, #4]
 80050b8:	1ac0      	subs	r0, r0, r3
 80050ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050bc:	b10b      	cbz	r3, 80050c2 <__sflush_r+0x46>
 80050be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c0:	1ac0      	subs	r0, r0, r3
 80050c2:	2300      	movs	r3, #0
 80050c4:	4602      	mov	r2, r0
 80050c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050c8:	6a21      	ldr	r1, [r4, #32]
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b0      	blx	r6
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	d106      	bne.n	80050e2 <__sflush_r+0x66>
 80050d4:	6829      	ldr	r1, [r5, #0]
 80050d6:	291d      	cmp	r1, #29
 80050d8:	d82c      	bhi.n	8005134 <__sflush_r+0xb8>
 80050da:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <__sflush_r+0x108>)
 80050dc:	40ca      	lsrs	r2, r1
 80050de:	07d6      	lsls	r6, r2, #31
 80050e0:	d528      	bpl.n	8005134 <__sflush_r+0xb8>
 80050e2:	2200      	movs	r2, #0
 80050e4:	6062      	str	r2, [r4, #4]
 80050e6:	04d9      	lsls	r1, r3, #19
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	6022      	str	r2, [r4, #0]
 80050ec:	d504      	bpl.n	80050f8 <__sflush_r+0x7c>
 80050ee:	1c42      	adds	r2, r0, #1
 80050f0:	d101      	bne.n	80050f6 <__sflush_r+0x7a>
 80050f2:	682b      	ldr	r3, [r5, #0]
 80050f4:	b903      	cbnz	r3, 80050f8 <__sflush_r+0x7c>
 80050f6:	6560      	str	r0, [r4, #84]	; 0x54
 80050f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fa:	602f      	str	r7, [r5, #0]
 80050fc:	2900      	cmp	r1, #0
 80050fe:	d0ca      	beq.n	8005096 <__sflush_r+0x1a>
 8005100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005104:	4299      	cmp	r1, r3
 8005106:	d002      	beq.n	800510e <__sflush_r+0x92>
 8005108:	4628      	mov	r0, r5
 800510a:	f000 f9ef 	bl	80054ec <_free_r>
 800510e:	2000      	movs	r0, #0
 8005110:	6360      	str	r0, [r4, #52]	; 0x34
 8005112:	e7c1      	b.n	8005098 <__sflush_r+0x1c>
 8005114:	6a21      	ldr	r1, [r4, #32]
 8005116:	2301      	movs	r3, #1
 8005118:	4628      	mov	r0, r5
 800511a:	47b0      	blx	r6
 800511c:	1c41      	adds	r1, r0, #1
 800511e:	d1c7      	bne.n	80050b0 <__sflush_r+0x34>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0c4      	beq.n	80050b0 <__sflush_r+0x34>
 8005126:	2b1d      	cmp	r3, #29
 8005128:	d001      	beq.n	800512e <__sflush_r+0xb2>
 800512a:	2b16      	cmp	r3, #22
 800512c:	d101      	bne.n	8005132 <__sflush_r+0xb6>
 800512e:	602f      	str	r7, [r5, #0]
 8005130:	e7b1      	b.n	8005096 <__sflush_r+0x1a>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e7ad      	b.n	8005098 <__sflush_r+0x1c>
 800513c:	690f      	ldr	r7, [r1, #16]
 800513e:	2f00      	cmp	r7, #0
 8005140:	d0a9      	beq.n	8005096 <__sflush_r+0x1a>
 8005142:	0793      	lsls	r3, r2, #30
 8005144:	680e      	ldr	r6, [r1, #0]
 8005146:	bf08      	it	eq
 8005148:	694b      	ldreq	r3, [r1, #20]
 800514a:	600f      	str	r7, [r1, #0]
 800514c:	bf18      	it	ne
 800514e:	2300      	movne	r3, #0
 8005150:	eba6 0807 	sub.w	r8, r6, r7
 8005154:	608b      	str	r3, [r1, #8]
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	dd9c      	ble.n	8005096 <__sflush_r+0x1a>
 800515c:	6a21      	ldr	r1, [r4, #32]
 800515e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005160:	4643      	mov	r3, r8
 8005162:	463a      	mov	r2, r7
 8005164:	4628      	mov	r0, r5
 8005166:	47b0      	blx	r6
 8005168:	2800      	cmp	r0, #0
 800516a:	dc06      	bgt.n	800517a <__sflush_r+0xfe>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005172:	81a3      	strh	r3, [r4, #12]
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	e78e      	b.n	8005098 <__sflush_r+0x1c>
 800517a:	4407      	add	r7, r0
 800517c:	eba8 0800 	sub.w	r8, r8, r0
 8005180:	e7e9      	b.n	8005156 <__sflush_r+0xda>
 8005182:	bf00      	nop
 8005184:	20400001 	.word	0x20400001

08005188 <_fflush_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	690b      	ldr	r3, [r1, #16]
 800518c:	4605      	mov	r5, r0
 800518e:	460c      	mov	r4, r1
 8005190:	b913      	cbnz	r3, 8005198 <_fflush_r+0x10>
 8005192:	2500      	movs	r5, #0
 8005194:	4628      	mov	r0, r5
 8005196:	bd38      	pop	{r3, r4, r5, pc}
 8005198:	b118      	cbz	r0, 80051a2 <_fflush_r+0x1a>
 800519a:	6983      	ldr	r3, [r0, #24]
 800519c:	b90b      	cbnz	r3, 80051a2 <_fflush_r+0x1a>
 800519e:	f000 f887 	bl	80052b0 <__sinit>
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <_fflush_r+0x6c>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d11b      	bne.n	80051e0 <_fflush_r+0x58>
 80051a8:	686c      	ldr	r4, [r5, #4]
 80051aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ef      	beq.n	8005192 <_fflush_r+0xa>
 80051b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051b4:	07d0      	lsls	r0, r2, #31
 80051b6:	d404      	bmi.n	80051c2 <_fflush_r+0x3a>
 80051b8:	0599      	lsls	r1, r3, #22
 80051ba:	d402      	bmi.n	80051c2 <_fflush_r+0x3a>
 80051bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051be:	f000 f927 	bl	8005410 <__retarget_lock_acquire_recursive>
 80051c2:	4628      	mov	r0, r5
 80051c4:	4621      	mov	r1, r4
 80051c6:	f7ff ff59 	bl	800507c <__sflush_r>
 80051ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051cc:	07da      	lsls	r2, r3, #31
 80051ce:	4605      	mov	r5, r0
 80051d0:	d4e0      	bmi.n	8005194 <_fflush_r+0xc>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	059b      	lsls	r3, r3, #22
 80051d6:	d4dd      	bmi.n	8005194 <_fflush_r+0xc>
 80051d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051da:	f000 f91a 	bl	8005412 <__retarget_lock_release_recursive>
 80051de:	e7d9      	b.n	8005194 <_fflush_r+0xc>
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <_fflush_r+0x70>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d101      	bne.n	80051ea <_fflush_r+0x62>
 80051e6:	68ac      	ldr	r4, [r5, #8]
 80051e8:	e7df      	b.n	80051aa <_fflush_r+0x22>
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <_fflush_r+0x74>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	bf08      	it	eq
 80051f0:	68ec      	ldreq	r4, [r5, #12]
 80051f2:	e7da      	b.n	80051aa <_fflush_r+0x22>
 80051f4:	08006150 	.word	0x08006150
 80051f8:	08006170 	.word	0x08006170
 80051fc:	08006130 	.word	0x08006130

08005200 <std>:
 8005200:	2300      	movs	r3, #0
 8005202:	b510      	push	{r4, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	e9c0 3300 	strd	r3, r3, [r0]
 800520a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800520e:	6083      	str	r3, [r0, #8]
 8005210:	8181      	strh	r1, [r0, #12]
 8005212:	6643      	str	r3, [r0, #100]	; 0x64
 8005214:	81c2      	strh	r2, [r0, #14]
 8005216:	6183      	str	r3, [r0, #24]
 8005218:	4619      	mov	r1, r3
 800521a:	2208      	movs	r2, #8
 800521c:	305c      	adds	r0, #92	; 0x5c
 800521e:	f7ff fd2f 	bl	8004c80 <memset>
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <std+0x38>)
 8005224:	6263      	str	r3, [r4, #36]	; 0x24
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <std+0x3c>)
 8005228:	62a3      	str	r3, [r4, #40]	; 0x28
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <std+0x40>)
 800522c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <std+0x44>)
 8005230:	6224      	str	r4, [r4, #32]
 8005232:	6323      	str	r3, [r4, #48]	; 0x30
 8005234:	bd10      	pop	{r4, pc}
 8005236:	bf00      	nop
 8005238:	08005ccd 	.word	0x08005ccd
 800523c:	08005cef 	.word	0x08005cef
 8005240:	08005d27 	.word	0x08005d27
 8005244:	08005d4b 	.word	0x08005d4b

08005248 <_cleanup_r>:
 8005248:	4901      	ldr	r1, [pc, #4]	; (8005250 <_cleanup_r+0x8>)
 800524a:	f000 b8c1 	b.w	80053d0 <_fwalk_reent>
 800524e:	bf00      	nop
 8005250:	08005189 	.word	0x08005189

08005254 <__sfmoreglue>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	1e4a      	subs	r2, r1, #1
 8005258:	2568      	movs	r5, #104	; 0x68
 800525a:	4355      	muls	r5, r2
 800525c:	460e      	mov	r6, r1
 800525e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005262:	f000 f993 	bl	800558c <_malloc_r>
 8005266:	4604      	mov	r4, r0
 8005268:	b140      	cbz	r0, 800527c <__sfmoreglue+0x28>
 800526a:	2100      	movs	r1, #0
 800526c:	e9c0 1600 	strd	r1, r6, [r0]
 8005270:	300c      	adds	r0, #12
 8005272:	60a0      	str	r0, [r4, #8]
 8005274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005278:	f7ff fd02 	bl	8004c80 <memset>
 800527c:	4620      	mov	r0, r4
 800527e:	bd70      	pop	{r4, r5, r6, pc}

08005280 <__sfp_lock_acquire>:
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <__sfp_lock_acquire+0x8>)
 8005282:	f000 b8c5 	b.w	8005410 <__retarget_lock_acquire_recursive>
 8005286:	bf00      	nop
 8005288:	200004a0 	.word	0x200004a0

0800528c <__sfp_lock_release>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__sfp_lock_release+0x8>)
 800528e:	f000 b8c0 	b.w	8005412 <__retarget_lock_release_recursive>
 8005292:	bf00      	nop
 8005294:	200004a0 	.word	0x200004a0

08005298 <__sinit_lock_acquire>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__sinit_lock_acquire+0x8>)
 800529a:	f000 b8b9 	b.w	8005410 <__retarget_lock_acquire_recursive>
 800529e:	bf00      	nop
 80052a0:	2000049b 	.word	0x2000049b

080052a4 <__sinit_lock_release>:
 80052a4:	4801      	ldr	r0, [pc, #4]	; (80052ac <__sinit_lock_release+0x8>)
 80052a6:	f000 b8b4 	b.w	8005412 <__retarget_lock_release_recursive>
 80052aa:	bf00      	nop
 80052ac:	2000049b 	.word	0x2000049b

080052b0 <__sinit>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	f7ff fff0 	bl	8005298 <__sinit_lock_acquire>
 80052b8:	69a3      	ldr	r3, [r4, #24]
 80052ba:	b11b      	cbz	r3, 80052c4 <__sinit+0x14>
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c0:	f7ff bff0 	b.w	80052a4 <__sinit_lock_release>
 80052c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052c8:	6523      	str	r3, [r4, #80]	; 0x50
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <__sinit+0x68>)
 80052cc:	4a13      	ldr	r2, [pc, #76]	; (800531c <__sinit+0x6c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	bf04      	itt	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	61a3      	streq	r3, [r4, #24]
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f820 	bl	8005320 <__sfp>
 80052e0:	6060      	str	r0, [r4, #4]
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 f81c 	bl	8005320 <__sfp>
 80052e8:	60a0      	str	r0, [r4, #8]
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 f818 	bl	8005320 <__sfp>
 80052f0:	2200      	movs	r2, #0
 80052f2:	60e0      	str	r0, [r4, #12]
 80052f4:	2104      	movs	r1, #4
 80052f6:	6860      	ldr	r0, [r4, #4]
 80052f8:	f7ff ff82 	bl	8005200 <std>
 80052fc:	68a0      	ldr	r0, [r4, #8]
 80052fe:	2201      	movs	r2, #1
 8005300:	2109      	movs	r1, #9
 8005302:	f7ff ff7d 	bl	8005200 <std>
 8005306:	68e0      	ldr	r0, [r4, #12]
 8005308:	2202      	movs	r2, #2
 800530a:	2112      	movs	r1, #18
 800530c:	f7ff ff78 	bl	8005200 <std>
 8005310:	2301      	movs	r3, #1
 8005312:	61a3      	str	r3, [r4, #24]
 8005314:	e7d2      	b.n	80052bc <__sinit+0xc>
 8005316:	bf00      	nop
 8005318:	08006078 	.word	0x08006078
 800531c:	08005249 	.word	0x08005249

08005320 <__sfp>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	4607      	mov	r7, r0
 8005324:	f7ff ffac 	bl	8005280 <__sfp_lock_acquire>
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <__sfp+0x84>)
 800532a:	681e      	ldr	r6, [r3, #0]
 800532c:	69b3      	ldr	r3, [r6, #24]
 800532e:	b913      	cbnz	r3, 8005336 <__sfp+0x16>
 8005330:	4630      	mov	r0, r6
 8005332:	f7ff ffbd 	bl	80052b0 <__sinit>
 8005336:	3648      	adds	r6, #72	; 0x48
 8005338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800533c:	3b01      	subs	r3, #1
 800533e:	d503      	bpl.n	8005348 <__sfp+0x28>
 8005340:	6833      	ldr	r3, [r6, #0]
 8005342:	b30b      	cbz	r3, 8005388 <__sfp+0x68>
 8005344:	6836      	ldr	r6, [r6, #0]
 8005346:	e7f7      	b.n	8005338 <__sfp+0x18>
 8005348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800534c:	b9d5      	cbnz	r5, 8005384 <__sfp+0x64>
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <__sfp+0x88>)
 8005350:	60e3      	str	r3, [r4, #12]
 8005352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005356:	6665      	str	r5, [r4, #100]	; 0x64
 8005358:	f000 f859 	bl	800540e <__retarget_lock_init_recursive>
 800535c:	f7ff ff96 	bl	800528c <__sfp_lock_release>
 8005360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005368:	6025      	str	r5, [r4, #0]
 800536a:	61a5      	str	r5, [r4, #24]
 800536c:	2208      	movs	r2, #8
 800536e:	4629      	mov	r1, r5
 8005370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005374:	f7ff fc84 	bl	8004c80 <memset>
 8005378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800537c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005380:	4620      	mov	r0, r4
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005384:	3468      	adds	r4, #104	; 0x68
 8005386:	e7d9      	b.n	800533c <__sfp+0x1c>
 8005388:	2104      	movs	r1, #4
 800538a:	4638      	mov	r0, r7
 800538c:	f7ff ff62 	bl	8005254 <__sfmoreglue>
 8005390:	4604      	mov	r4, r0
 8005392:	6030      	str	r0, [r6, #0]
 8005394:	2800      	cmp	r0, #0
 8005396:	d1d5      	bne.n	8005344 <__sfp+0x24>
 8005398:	f7ff ff78 	bl	800528c <__sfp_lock_release>
 800539c:	230c      	movs	r3, #12
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	e7ee      	b.n	8005380 <__sfp+0x60>
 80053a2:	bf00      	nop
 80053a4:	08006078 	.word	0x08006078
 80053a8:	ffff0001 	.word	0xffff0001

080053ac <fiprintf>:
 80053ac:	b40e      	push	{r1, r2, r3}
 80053ae:	b503      	push	{r0, r1, lr}
 80053b0:	4601      	mov	r1, r0
 80053b2:	ab03      	add	r3, sp, #12
 80053b4:	4805      	ldr	r0, [pc, #20]	; (80053cc <fiprintf+0x20>)
 80053b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	f000 f969 	bl	8005694 <_vfiprintf_r>
 80053c2:	b002      	add	sp, #8
 80053c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c8:	b003      	add	sp, #12
 80053ca:	4770      	bx	lr
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <_fwalk_reent>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4606      	mov	r6, r0
 80053d6:	4688      	mov	r8, r1
 80053d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053dc:	2700      	movs	r7, #0
 80053de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053e2:	f1b9 0901 	subs.w	r9, r9, #1
 80053e6:	d505      	bpl.n	80053f4 <_fwalk_reent+0x24>
 80053e8:	6824      	ldr	r4, [r4, #0]
 80053ea:	2c00      	cmp	r4, #0
 80053ec:	d1f7      	bne.n	80053de <_fwalk_reent+0xe>
 80053ee:	4638      	mov	r0, r7
 80053f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f4:	89ab      	ldrh	r3, [r5, #12]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d907      	bls.n	800540a <_fwalk_reent+0x3a>
 80053fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053fe:	3301      	adds	r3, #1
 8005400:	d003      	beq.n	800540a <_fwalk_reent+0x3a>
 8005402:	4629      	mov	r1, r5
 8005404:	4630      	mov	r0, r6
 8005406:	47c0      	blx	r8
 8005408:	4307      	orrs	r7, r0
 800540a:	3568      	adds	r5, #104	; 0x68
 800540c:	e7e9      	b.n	80053e2 <_fwalk_reent+0x12>

0800540e <__retarget_lock_init_recursive>:
 800540e:	4770      	bx	lr

08005410 <__retarget_lock_acquire_recursive>:
 8005410:	4770      	bx	lr

08005412 <__retarget_lock_release_recursive>:
 8005412:	4770      	bx	lr

08005414 <__swhatbuf_r>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	460e      	mov	r6, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	2900      	cmp	r1, #0
 800541e:	b096      	sub	sp, #88	; 0x58
 8005420:	4614      	mov	r4, r2
 8005422:	461d      	mov	r5, r3
 8005424:	da07      	bge.n	8005436 <__swhatbuf_r+0x22>
 8005426:	2300      	movs	r3, #0
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	89b3      	ldrh	r3, [r6, #12]
 800542c:	061a      	lsls	r2, r3, #24
 800542e:	d410      	bmi.n	8005452 <__swhatbuf_r+0x3e>
 8005430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005434:	e00e      	b.n	8005454 <__swhatbuf_r+0x40>
 8005436:	466a      	mov	r2, sp
 8005438:	f000 fcb6 	bl	8005da8 <_fstat_r>
 800543c:	2800      	cmp	r0, #0
 800543e:	dbf2      	blt.n	8005426 <__swhatbuf_r+0x12>
 8005440:	9a01      	ldr	r2, [sp, #4]
 8005442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005446:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800544a:	425a      	negs	r2, r3
 800544c:	415a      	adcs	r2, r3
 800544e:	602a      	str	r2, [r5, #0]
 8005450:	e7ee      	b.n	8005430 <__swhatbuf_r+0x1c>
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	2000      	movs	r0, #0
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	b016      	add	sp, #88	; 0x58
 800545a:	bd70      	pop	{r4, r5, r6, pc}

0800545c <__smakebuf_r>:
 800545c:	898b      	ldrh	r3, [r1, #12]
 800545e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005460:	079d      	lsls	r5, r3, #30
 8005462:	4606      	mov	r6, r0
 8005464:	460c      	mov	r4, r1
 8005466:	d507      	bpl.n	8005478 <__smakebuf_r+0x1c>
 8005468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2301      	movs	r3, #1
 8005472:	6163      	str	r3, [r4, #20]
 8005474:	b002      	add	sp, #8
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	ab01      	add	r3, sp, #4
 800547a:	466a      	mov	r2, sp
 800547c:	f7ff ffca 	bl	8005414 <__swhatbuf_r>
 8005480:	9900      	ldr	r1, [sp, #0]
 8005482:	4605      	mov	r5, r0
 8005484:	4630      	mov	r0, r6
 8005486:	f000 f881 	bl	800558c <_malloc_r>
 800548a:	b948      	cbnz	r0, 80054a0 <__smakebuf_r+0x44>
 800548c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d4ef      	bmi.n	8005474 <__smakebuf_r+0x18>
 8005494:	f023 0303 	bic.w	r3, r3, #3
 8005498:	f043 0302 	orr.w	r3, r3, #2
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	e7e3      	b.n	8005468 <__smakebuf_r+0xc>
 80054a0:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <__smakebuf_r+0x7c>)
 80054a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	6020      	str	r0, [r4, #0]
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	9b00      	ldr	r3, [sp, #0]
 80054b0:	6163      	str	r3, [r4, #20]
 80054b2:	9b01      	ldr	r3, [sp, #4]
 80054b4:	6120      	str	r0, [r4, #16]
 80054b6:	b15b      	cbz	r3, 80054d0 <__smakebuf_r+0x74>
 80054b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 fc85 	bl	8005dcc <_isatty_r>
 80054c2:	b128      	cbz	r0, 80054d0 <__smakebuf_r+0x74>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	89a0      	ldrh	r0, [r4, #12]
 80054d2:	4305      	orrs	r5, r0
 80054d4:	81a5      	strh	r5, [r4, #12]
 80054d6:	e7cd      	b.n	8005474 <__smakebuf_r+0x18>
 80054d8:	08005249 	.word	0x08005249

080054dc <malloc>:
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <malloc+0xc>)
 80054de:	4601      	mov	r1, r0
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f000 b853 	b.w	800558c <_malloc_r>
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <_free_r>:
 80054ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d048      	beq.n	8005584 <_free_r+0x98>
 80054f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f6:	9001      	str	r0, [sp, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f1a1 0404 	sub.w	r4, r1, #4
 80054fe:	bfb8      	it	lt
 8005500:	18e4      	addlt	r4, r4, r3
 8005502:	f000 fc85 	bl	8005e10 <__malloc_lock>
 8005506:	4a20      	ldr	r2, [pc, #128]	; (8005588 <_free_r+0x9c>)
 8005508:	9801      	ldr	r0, [sp, #4]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	4615      	mov	r5, r2
 800550e:	b933      	cbnz	r3, 800551e <_free_r+0x32>
 8005510:	6063      	str	r3, [r4, #4]
 8005512:	6014      	str	r4, [r2, #0]
 8005514:	b003      	add	sp, #12
 8005516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800551a:	f000 bc7f 	b.w	8005e1c <__malloc_unlock>
 800551e:	42a3      	cmp	r3, r4
 8005520:	d90b      	bls.n	800553a <_free_r+0x4e>
 8005522:	6821      	ldr	r1, [r4, #0]
 8005524:	1862      	adds	r2, r4, r1
 8005526:	4293      	cmp	r3, r2
 8005528:	bf04      	itt	eq
 800552a:	681a      	ldreq	r2, [r3, #0]
 800552c:	685b      	ldreq	r3, [r3, #4]
 800552e:	6063      	str	r3, [r4, #4]
 8005530:	bf04      	itt	eq
 8005532:	1852      	addeq	r2, r2, r1
 8005534:	6022      	streq	r2, [r4, #0]
 8005536:	602c      	str	r4, [r5, #0]
 8005538:	e7ec      	b.n	8005514 <_free_r+0x28>
 800553a:	461a      	mov	r2, r3
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	b10b      	cbz	r3, 8005544 <_free_r+0x58>
 8005540:	42a3      	cmp	r3, r4
 8005542:	d9fa      	bls.n	800553a <_free_r+0x4e>
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	1855      	adds	r5, r2, r1
 8005548:	42a5      	cmp	r5, r4
 800554a:	d10b      	bne.n	8005564 <_free_r+0x78>
 800554c:	6824      	ldr	r4, [r4, #0]
 800554e:	4421      	add	r1, r4
 8005550:	1854      	adds	r4, r2, r1
 8005552:	42a3      	cmp	r3, r4
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	d1dd      	bne.n	8005514 <_free_r+0x28>
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	6053      	str	r3, [r2, #4]
 800555e:	4421      	add	r1, r4
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	e7d7      	b.n	8005514 <_free_r+0x28>
 8005564:	d902      	bls.n	800556c <_free_r+0x80>
 8005566:	230c      	movs	r3, #12
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	e7d3      	b.n	8005514 <_free_r+0x28>
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1961      	adds	r1, r4, r5
 8005570:	428b      	cmp	r3, r1
 8005572:	bf04      	itt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	bf04      	itt	eq
 800557c:	1949      	addeq	r1, r1, r5
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	6054      	str	r4, [r2, #4]
 8005582:	e7c7      	b.n	8005514 <_free_r+0x28>
 8005584:	b003      	add	sp, #12
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	20000298 	.word	0x20000298

0800558c <_malloc_r>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	1ccd      	adds	r5, r1, #3
 8005590:	f025 0503 	bic.w	r5, r5, #3
 8005594:	3508      	adds	r5, #8
 8005596:	2d0c      	cmp	r5, #12
 8005598:	bf38      	it	cc
 800559a:	250c      	movcc	r5, #12
 800559c:	2d00      	cmp	r5, #0
 800559e:	4606      	mov	r6, r0
 80055a0:	db01      	blt.n	80055a6 <_malloc_r+0x1a>
 80055a2:	42a9      	cmp	r1, r5
 80055a4:	d903      	bls.n	80055ae <_malloc_r+0x22>
 80055a6:	230c      	movs	r3, #12
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	2000      	movs	r0, #0
 80055ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ae:	f000 fc2f 	bl	8005e10 <__malloc_lock>
 80055b2:	4921      	ldr	r1, [pc, #132]	; (8005638 <_malloc_r+0xac>)
 80055b4:	680a      	ldr	r2, [r1, #0]
 80055b6:	4614      	mov	r4, r2
 80055b8:	b99c      	cbnz	r4, 80055e2 <_malloc_r+0x56>
 80055ba:	4f20      	ldr	r7, [pc, #128]	; (800563c <_malloc_r+0xb0>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	b923      	cbnz	r3, 80055ca <_malloc_r+0x3e>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 fb72 	bl	8005cac <_sbrk_r>
 80055c8:	6038      	str	r0, [r7, #0]
 80055ca:	4629      	mov	r1, r5
 80055cc:	4630      	mov	r0, r6
 80055ce:	f000 fb6d 	bl	8005cac <_sbrk_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d123      	bne.n	800561e <_malloc_r+0x92>
 80055d6:	230c      	movs	r3, #12
 80055d8:	6033      	str	r3, [r6, #0]
 80055da:	4630      	mov	r0, r6
 80055dc:	f000 fc1e 	bl	8005e1c <__malloc_unlock>
 80055e0:	e7e3      	b.n	80055aa <_malloc_r+0x1e>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	1b5b      	subs	r3, r3, r5
 80055e6:	d417      	bmi.n	8005618 <_malloc_r+0x8c>
 80055e8:	2b0b      	cmp	r3, #11
 80055ea:	d903      	bls.n	80055f4 <_malloc_r+0x68>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	441c      	add	r4, r3
 80055f0:	6025      	str	r5, [r4, #0]
 80055f2:	e004      	b.n	80055fe <_malloc_r+0x72>
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	42a2      	cmp	r2, r4
 80055f8:	bf0c      	ite	eq
 80055fa:	600b      	streq	r3, [r1, #0]
 80055fc:	6053      	strne	r3, [r2, #4]
 80055fe:	4630      	mov	r0, r6
 8005600:	f000 fc0c 	bl	8005e1c <__malloc_unlock>
 8005604:	f104 000b 	add.w	r0, r4, #11
 8005608:	1d23      	adds	r3, r4, #4
 800560a:	f020 0007 	bic.w	r0, r0, #7
 800560e:	1ac2      	subs	r2, r0, r3
 8005610:	d0cc      	beq.n	80055ac <_malloc_r+0x20>
 8005612:	1a1b      	subs	r3, r3, r0
 8005614:	50a3      	str	r3, [r4, r2]
 8005616:	e7c9      	b.n	80055ac <_malloc_r+0x20>
 8005618:	4622      	mov	r2, r4
 800561a:	6864      	ldr	r4, [r4, #4]
 800561c:	e7cc      	b.n	80055b8 <_malloc_r+0x2c>
 800561e:	1cc4      	adds	r4, r0, #3
 8005620:	f024 0403 	bic.w	r4, r4, #3
 8005624:	42a0      	cmp	r0, r4
 8005626:	d0e3      	beq.n	80055f0 <_malloc_r+0x64>
 8005628:	1a21      	subs	r1, r4, r0
 800562a:	4630      	mov	r0, r6
 800562c:	f000 fb3e 	bl	8005cac <_sbrk_r>
 8005630:	3001      	adds	r0, #1
 8005632:	d1dd      	bne.n	80055f0 <_malloc_r+0x64>
 8005634:	e7cf      	b.n	80055d6 <_malloc_r+0x4a>
 8005636:	bf00      	nop
 8005638:	20000298 	.word	0x20000298
 800563c:	2000029c 	.word	0x2000029c

08005640 <__sfputc_r>:
 8005640:	6893      	ldr	r3, [r2, #8]
 8005642:	3b01      	subs	r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	b410      	push	{r4}
 8005648:	6093      	str	r3, [r2, #8]
 800564a:	da08      	bge.n	800565e <__sfputc_r+0x1e>
 800564c:	6994      	ldr	r4, [r2, #24]
 800564e:	42a3      	cmp	r3, r4
 8005650:	db01      	blt.n	8005656 <__sfputc_r+0x16>
 8005652:	290a      	cmp	r1, #10
 8005654:	d103      	bne.n	800565e <__sfputc_r+0x1e>
 8005656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800565a:	f7ff bc31 	b.w	8004ec0 <__swbuf_r>
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	1c58      	adds	r0, r3, #1
 8005662:	6010      	str	r0, [r2, #0]
 8005664:	7019      	strb	r1, [r3, #0]
 8005666:	4608      	mov	r0, r1
 8005668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800566c:	4770      	bx	lr

0800566e <__sfputs_r>:
 800566e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005670:	4606      	mov	r6, r0
 8005672:	460f      	mov	r7, r1
 8005674:	4614      	mov	r4, r2
 8005676:	18d5      	adds	r5, r2, r3
 8005678:	42ac      	cmp	r4, r5
 800567a:	d101      	bne.n	8005680 <__sfputs_r+0x12>
 800567c:	2000      	movs	r0, #0
 800567e:	e007      	b.n	8005690 <__sfputs_r+0x22>
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	463a      	mov	r2, r7
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff ffda 	bl	8005640 <__sfputc_r>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d1f3      	bne.n	8005678 <__sfputs_r+0xa>
 8005690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005694 <_vfiprintf_r>:
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	460d      	mov	r5, r1
 800569a:	b09d      	sub	sp, #116	; 0x74
 800569c:	4614      	mov	r4, r2
 800569e:	4698      	mov	r8, r3
 80056a0:	4606      	mov	r6, r0
 80056a2:	b118      	cbz	r0, 80056ac <_vfiprintf_r+0x18>
 80056a4:	6983      	ldr	r3, [r0, #24]
 80056a6:	b90b      	cbnz	r3, 80056ac <_vfiprintf_r+0x18>
 80056a8:	f7ff fe02 	bl	80052b0 <__sinit>
 80056ac:	4b89      	ldr	r3, [pc, #548]	; (80058d4 <_vfiprintf_r+0x240>)
 80056ae:	429d      	cmp	r5, r3
 80056b0:	d11b      	bne.n	80056ea <_vfiprintf_r+0x56>
 80056b2:	6875      	ldr	r5, [r6, #4]
 80056b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b6:	07d9      	lsls	r1, r3, #31
 80056b8:	d405      	bmi.n	80056c6 <_vfiprintf_r+0x32>
 80056ba:	89ab      	ldrh	r3, [r5, #12]
 80056bc:	059a      	lsls	r2, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_vfiprintf_r+0x32>
 80056c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c2:	f7ff fea5 	bl	8005410 <__retarget_lock_acquire_recursive>
 80056c6:	89ab      	ldrh	r3, [r5, #12]
 80056c8:	071b      	lsls	r3, r3, #28
 80056ca:	d501      	bpl.n	80056d0 <_vfiprintf_r+0x3c>
 80056cc:	692b      	ldr	r3, [r5, #16]
 80056ce:	b9eb      	cbnz	r3, 800570c <_vfiprintf_r+0x78>
 80056d0:	4629      	mov	r1, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff fc46 	bl	8004f64 <__swsetup_r>
 80056d8:	b1c0      	cbz	r0, 800570c <_vfiprintf_r+0x78>
 80056da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056dc:	07dc      	lsls	r4, r3, #31
 80056de:	d50e      	bpl.n	80056fe <_vfiprintf_r+0x6a>
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295
 80056e4:	b01d      	add	sp, #116	; 0x74
 80056e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ea:	4b7b      	ldr	r3, [pc, #492]	; (80058d8 <_vfiprintf_r+0x244>)
 80056ec:	429d      	cmp	r5, r3
 80056ee:	d101      	bne.n	80056f4 <_vfiprintf_r+0x60>
 80056f0:	68b5      	ldr	r5, [r6, #8]
 80056f2:	e7df      	b.n	80056b4 <_vfiprintf_r+0x20>
 80056f4:	4b79      	ldr	r3, [pc, #484]	; (80058dc <_vfiprintf_r+0x248>)
 80056f6:	429d      	cmp	r5, r3
 80056f8:	bf08      	it	eq
 80056fa:	68f5      	ldreq	r5, [r6, #12]
 80056fc:	e7da      	b.n	80056b4 <_vfiprintf_r+0x20>
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	0598      	lsls	r0, r3, #22
 8005702:	d4ed      	bmi.n	80056e0 <_vfiprintf_r+0x4c>
 8005704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005706:	f7ff fe84 	bl	8005412 <__retarget_lock_release_recursive>
 800570a:	e7e9      	b.n	80056e0 <_vfiprintf_r+0x4c>
 800570c:	2300      	movs	r3, #0
 800570e:	9309      	str	r3, [sp, #36]	; 0x24
 8005710:	2320      	movs	r3, #32
 8005712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005716:	f8cd 800c 	str.w	r8, [sp, #12]
 800571a:	2330      	movs	r3, #48	; 0x30
 800571c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058e0 <_vfiprintf_r+0x24c>
 8005720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005724:	f04f 0901 	mov.w	r9, #1
 8005728:	4623      	mov	r3, r4
 800572a:	469a      	mov	sl, r3
 800572c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005730:	b10a      	cbz	r2, 8005736 <_vfiprintf_r+0xa2>
 8005732:	2a25      	cmp	r2, #37	; 0x25
 8005734:	d1f9      	bne.n	800572a <_vfiprintf_r+0x96>
 8005736:	ebba 0b04 	subs.w	fp, sl, r4
 800573a:	d00b      	beq.n	8005754 <_vfiprintf_r+0xc0>
 800573c:	465b      	mov	r3, fp
 800573e:	4622      	mov	r2, r4
 8005740:	4629      	mov	r1, r5
 8005742:	4630      	mov	r0, r6
 8005744:	f7ff ff93 	bl	800566e <__sfputs_r>
 8005748:	3001      	adds	r0, #1
 800574a:	f000 80aa 	beq.w	80058a2 <_vfiprintf_r+0x20e>
 800574e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005750:	445a      	add	r2, fp
 8005752:	9209      	str	r2, [sp, #36]	; 0x24
 8005754:	f89a 3000 	ldrb.w	r3, [sl]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80a2 	beq.w	80058a2 <_vfiprintf_r+0x20e>
 800575e:	2300      	movs	r3, #0
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005768:	f10a 0a01 	add.w	sl, sl, #1
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005774:	931a      	str	r3, [sp, #104]	; 0x68
 8005776:	4654      	mov	r4, sl
 8005778:	2205      	movs	r2, #5
 800577a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577e:	4858      	ldr	r0, [pc, #352]	; (80058e0 <_vfiprintf_r+0x24c>)
 8005780:	f7fa fd66 	bl	8000250 <memchr>
 8005784:	9a04      	ldr	r2, [sp, #16]
 8005786:	b9d8      	cbnz	r0, 80057c0 <_vfiprintf_r+0x12c>
 8005788:	06d1      	lsls	r1, r2, #27
 800578a:	bf44      	itt	mi
 800578c:	2320      	movmi	r3, #32
 800578e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005792:	0713      	lsls	r3, r2, #28
 8005794:	bf44      	itt	mi
 8005796:	232b      	movmi	r3, #43	; 0x2b
 8005798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800579c:	f89a 3000 	ldrb.w	r3, [sl]
 80057a0:	2b2a      	cmp	r3, #42	; 0x2a
 80057a2:	d015      	beq.n	80057d0 <_vfiprintf_r+0x13c>
 80057a4:	9a07      	ldr	r2, [sp, #28]
 80057a6:	4654      	mov	r4, sl
 80057a8:	2000      	movs	r0, #0
 80057aa:	f04f 0c0a 	mov.w	ip, #10
 80057ae:	4621      	mov	r1, r4
 80057b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057b4:	3b30      	subs	r3, #48	; 0x30
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	d94e      	bls.n	8005858 <_vfiprintf_r+0x1c4>
 80057ba:	b1b0      	cbz	r0, 80057ea <_vfiprintf_r+0x156>
 80057bc:	9207      	str	r2, [sp, #28]
 80057be:	e014      	b.n	80057ea <_vfiprintf_r+0x156>
 80057c0:	eba0 0308 	sub.w	r3, r0, r8
 80057c4:	fa09 f303 	lsl.w	r3, r9, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	46a2      	mov	sl, r4
 80057ce:	e7d2      	b.n	8005776 <_vfiprintf_r+0xe2>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	1d19      	adds	r1, r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	9103      	str	r1, [sp, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfbb      	ittet	lt
 80057dc:	425b      	neglt	r3, r3
 80057de:	f042 0202 	orrlt.w	r2, r2, #2
 80057e2:	9307      	strge	r3, [sp, #28]
 80057e4:	9307      	strlt	r3, [sp, #28]
 80057e6:	bfb8      	it	lt
 80057e8:	9204      	strlt	r2, [sp, #16]
 80057ea:	7823      	ldrb	r3, [r4, #0]
 80057ec:	2b2e      	cmp	r3, #46	; 0x2e
 80057ee:	d10c      	bne.n	800580a <_vfiprintf_r+0x176>
 80057f0:	7863      	ldrb	r3, [r4, #1]
 80057f2:	2b2a      	cmp	r3, #42	; 0x2a
 80057f4:	d135      	bne.n	8005862 <_vfiprintf_r+0x1ce>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	9203      	str	r2, [sp, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfb8      	it	lt
 8005802:	f04f 33ff 	movlt.w	r3, #4294967295
 8005806:	3402      	adds	r4, #2
 8005808:	9305      	str	r3, [sp, #20]
 800580a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058f0 <_vfiprintf_r+0x25c>
 800580e:	7821      	ldrb	r1, [r4, #0]
 8005810:	2203      	movs	r2, #3
 8005812:	4650      	mov	r0, sl
 8005814:	f7fa fd1c 	bl	8000250 <memchr>
 8005818:	b140      	cbz	r0, 800582c <_vfiprintf_r+0x198>
 800581a:	2340      	movs	r3, #64	; 0x40
 800581c:	eba0 000a 	sub.w	r0, r0, sl
 8005820:	fa03 f000 	lsl.w	r0, r3, r0
 8005824:	9b04      	ldr	r3, [sp, #16]
 8005826:	4303      	orrs	r3, r0
 8005828:	3401      	adds	r4, #1
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005830:	482c      	ldr	r0, [pc, #176]	; (80058e4 <_vfiprintf_r+0x250>)
 8005832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005836:	2206      	movs	r2, #6
 8005838:	f7fa fd0a 	bl	8000250 <memchr>
 800583c:	2800      	cmp	r0, #0
 800583e:	d03f      	beq.n	80058c0 <_vfiprintf_r+0x22c>
 8005840:	4b29      	ldr	r3, [pc, #164]	; (80058e8 <_vfiprintf_r+0x254>)
 8005842:	bb1b      	cbnz	r3, 800588c <_vfiprintf_r+0x1f8>
 8005844:	9b03      	ldr	r3, [sp, #12]
 8005846:	3307      	adds	r3, #7
 8005848:	f023 0307 	bic.w	r3, r3, #7
 800584c:	3308      	adds	r3, #8
 800584e:	9303      	str	r3, [sp, #12]
 8005850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005852:	443b      	add	r3, r7
 8005854:	9309      	str	r3, [sp, #36]	; 0x24
 8005856:	e767      	b.n	8005728 <_vfiprintf_r+0x94>
 8005858:	fb0c 3202 	mla	r2, ip, r2, r3
 800585c:	460c      	mov	r4, r1
 800585e:	2001      	movs	r0, #1
 8005860:	e7a5      	b.n	80057ae <_vfiprintf_r+0x11a>
 8005862:	2300      	movs	r3, #0
 8005864:	3401      	adds	r4, #1
 8005866:	9305      	str	r3, [sp, #20]
 8005868:	4619      	mov	r1, r3
 800586a:	f04f 0c0a 	mov.w	ip, #10
 800586e:	4620      	mov	r0, r4
 8005870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005874:	3a30      	subs	r2, #48	; 0x30
 8005876:	2a09      	cmp	r2, #9
 8005878:	d903      	bls.n	8005882 <_vfiprintf_r+0x1ee>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0c5      	beq.n	800580a <_vfiprintf_r+0x176>
 800587e:	9105      	str	r1, [sp, #20]
 8005880:	e7c3      	b.n	800580a <_vfiprintf_r+0x176>
 8005882:	fb0c 2101 	mla	r1, ip, r1, r2
 8005886:	4604      	mov	r4, r0
 8005888:	2301      	movs	r3, #1
 800588a:	e7f0      	b.n	800586e <_vfiprintf_r+0x1da>
 800588c:	ab03      	add	r3, sp, #12
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	462a      	mov	r2, r5
 8005892:	4b16      	ldr	r3, [pc, #88]	; (80058ec <_vfiprintf_r+0x258>)
 8005894:	a904      	add	r1, sp, #16
 8005896:	4630      	mov	r0, r6
 8005898:	f3af 8000 	nop.w
 800589c:	4607      	mov	r7, r0
 800589e:	1c78      	adds	r0, r7, #1
 80058a0:	d1d6      	bne.n	8005850 <_vfiprintf_r+0x1bc>
 80058a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a4:	07d9      	lsls	r1, r3, #31
 80058a6:	d405      	bmi.n	80058b4 <_vfiprintf_r+0x220>
 80058a8:	89ab      	ldrh	r3, [r5, #12]
 80058aa:	059a      	lsls	r2, r3, #22
 80058ac:	d402      	bmi.n	80058b4 <_vfiprintf_r+0x220>
 80058ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058b0:	f7ff fdaf 	bl	8005412 <__retarget_lock_release_recursive>
 80058b4:	89ab      	ldrh	r3, [r5, #12]
 80058b6:	065b      	lsls	r3, r3, #25
 80058b8:	f53f af12 	bmi.w	80056e0 <_vfiprintf_r+0x4c>
 80058bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058be:	e711      	b.n	80056e4 <_vfiprintf_r+0x50>
 80058c0:	ab03      	add	r3, sp, #12
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	462a      	mov	r2, r5
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <_vfiprintf_r+0x258>)
 80058c8:	a904      	add	r1, sp, #16
 80058ca:	4630      	mov	r0, r6
 80058cc:	f000 f880 	bl	80059d0 <_printf_i>
 80058d0:	e7e4      	b.n	800589c <_vfiprintf_r+0x208>
 80058d2:	bf00      	nop
 80058d4:	08006150 	.word	0x08006150
 80058d8:	08006170 	.word	0x08006170
 80058dc:	08006130 	.word	0x08006130
 80058e0:	08006190 	.word	0x08006190
 80058e4:	0800619a 	.word	0x0800619a
 80058e8:	00000000 	.word	0x00000000
 80058ec:	0800566f 	.word	0x0800566f
 80058f0:	08006196 	.word	0x08006196

080058f4 <_printf_common>:
 80058f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	4616      	mov	r6, r2
 80058fa:	4699      	mov	r9, r3
 80058fc:	688a      	ldr	r2, [r1, #8]
 80058fe:	690b      	ldr	r3, [r1, #16]
 8005900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005904:	4293      	cmp	r3, r2
 8005906:	bfb8      	it	lt
 8005908:	4613      	movlt	r3, r2
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005910:	4607      	mov	r7, r0
 8005912:	460c      	mov	r4, r1
 8005914:	b10a      	cbz	r2, 800591a <_printf_common+0x26>
 8005916:	3301      	adds	r3, #1
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	0699      	lsls	r1, r3, #26
 800591e:	bf42      	ittt	mi
 8005920:	6833      	ldrmi	r3, [r6, #0]
 8005922:	3302      	addmi	r3, #2
 8005924:	6033      	strmi	r3, [r6, #0]
 8005926:	6825      	ldr	r5, [r4, #0]
 8005928:	f015 0506 	ands.w	r5, r5, #6
 800592c:	d106      	bne.n	800593c <_printf_common+0x48>
 800592e:	f104 0a19 	add.w	sl, r4, #25
 8005932:	68e3      	ldr	r3, [r4, #12]
 8005934:	6832      	ldr	r2, [r6, #0]
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	42ab      	cmp	r3, r5
 800593a:	dc26      	bgt.n	800598a <_printf_common+0x96>
 800593c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005940:	1e13      	subs	r3, r2, #0
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	bf18      	it	ne
 8005946:	2301      	movne	r3, #1
 8005948:	0692      	lsls	r2, r2, #26
 800594a:	d42b      	bmi.n	80059a4 <_printf_common+0xb0>
 800594c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005950:	4649      	mov	r1, r9
 8005952:	4638      	mov	r0, r7
 8005954:	47c0      	blx	r8
 8005956:	3001      	adds	r0, #1
 8005958:	d01e      	beq.n	8005998 <_printf_common+0xa4>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	68e5      	ldr	r5, [r4, #12]
 800595e:	6832      	ldr	r2, [r6, #0]
 8005960:	f003 0306 	and.w	r3, r3, #6
 8005964:	2b04      	cmp	r3, #4
 8005966:	bf08      	it	eq
 8005968:	1aad      	subeq	r5, r5, r2
 800596a:	68a3      	ldr	r3, [r4, #8]
 800596c:	6922      	ldr	r2, [r4, #16]
 800596e:	bf0c      	ite	eq
 8005970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005974:	2500      	movne	r5, #0
 8005976:	4293      	cmp	r3, r2
 8005978:	bfc4      	itt	gt
 800597a:	1a9b      	subgt	r3, r3, r2
 800597c:	18ed      	addgt	r5, r5, r3
 800597e:	2600      	movs	r6, #0
 8005980:	341a      	adds	r4, #26
 8005982:	42b5      	cmp	r5, r6
 8005984:	d11a      	bne.n	80059bc <_printf_common+0xc8>
 8005986:	2000      	movs	r0, #0
 8005988:	e008      	b.n	800599c <_printf_common+0xa8>
 800598a:	2301      	movs	r3, #1
 800598c:	4652      	mov	r2, sl
 800598e:	4649      	mov	r1, r9
 8005990:	4638      	mov	r0, r7
 8005992:	47c0      	blx	r8
 8005994:	3001      	adds	r0, #1
 8005996:	d103      	bne.n	80059a0 <_printf_common+0xac>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	3501      	adds	r5, #1
 80059a2:	e7c6      	b.n	8005932 <_printf_common+0x3e>
 80059a4:	18e1      	adds	r1, r4, r3
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	2030      	movs	r0, #48	; 0x30
 80059aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ae:	4422      	add	r2, r4
 80059b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b8:	3302      	adds	r3, #2
 80059ba:	e7c7      	b.n	800594c <_printf_common+0x58>
 80059bc:	2301      	movs	r3, #1
 80059be:	4622      	mov	r2, r4
 80059c0:	4649      	mov	r1, r9
 80059c2:	4638      	mov	r0, r7
 80059c4:	47c0      	blx	r8
 80059c6:	3001      	adds	r0, #1
 80059c8:	d0e6      	beq.n	8005998 <_printf_common+0xa4>
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7d9      	b.n	8005982 <_printf_common+0x8e>
	...

080059d0 <_printf_i>:
 80059d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	460c      	mov	r4, r1
 80059d6:	4691      	mov	r9, r2
 80059d8:	7e27      	ldrb	r7, [r4, #24]
 80059da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059dc:	2f78      	cmp	r7, #120	; 0x78
 80059de:	4680      	mov	r8, r0
 80059e0:	469a      	mov	sl, r3
 80059e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059e6:	d807      	bhi.n	80059f8 <_printf_i+0x28>
 80059e8:	2f62      	cmp	r7, #98	; 0x62
 80059ea:	d80a      	bhi.n	8005a02 <_printf_i+0x32>
 80059ec:	2f00      	cmp	r7, #0
 80059ee:	f000 80d8 	beq.w	8005ba2 <_printf_i+0x1d2>
 80059f2:	2f58      	cmp	r7, #88	; 0x58
 80059f4:	f000 80a3 	beq.w	8005b3e <_printf_i+0x16e>
 80059f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a00:	e03a      	b.n	8005a78 <_printf_i+0xa8>
 8005a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a06:	2b15      	cmp	r3, #21
 8005a08:	d8f6      	bhi.n	80059f8 <_printf_i+0x28>
 8005a0a:	a001      	add	r0, pc, #4	; (adr r0, 8005a10 <_printf_i+0x40>)
 8005a0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a10:	08005a69 	.word	0x08005a69
 8005a14:	08005a7d 	.word	0x08005a7d
 8005a18:	080059f9 	.word	0x080059f9
 8005a1c:	080059f9 	.word	0x080059f9
 8005a20:	080059f9 	.word	0x080059f9
 8005a24:	080059f9 	.word	0x080059f9
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	080059f9 	.word	0x080059f9
 8005a30:	080059f9 	.word	0x080059f9
 8005a34:	080059f9 	.word	0x080059f9
 8005a38:	080059f9 	.word	0x080059f9
 8005a3c:	08005b89 	.word	0x08005b89
 8005a40:	08005aad 	.word	0x08005aad
 8005a44:	08005b6b 	.word	0x08005b6b
 8005a48:	080059f9 	.word	0x080059f9
 8005a4c:	080059f9 	.word	0x080059f9
 8005a50:	08005bab 	.word	0x08005bab
 8005a54:	080059f9 	.word	0x080059f9
 8005a58:	08005aad 	.word	0x08005aad
 8005a5c:	080059f9 	.word	0x080059f9
 8005a60:	080059f9 	.word	0x080059f9
 8005a64:	08005b73 	.word	0x08005b73
 8005a68:	680b      	ldr	r3, [r1, #0]
 8005a6a:	1d1a      	adds	r2, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	600a      	str	r2, [r1, #0]
 8005a70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0a3      	b.n	8005bc4 <_printf_i+0x1f4>
 8005a7c:	6825      	ldr	r5, [r4, #0]
 8005a7e:	6808      	ldr	r0, [r1, #0]
 8005a80:	062e      	lsls	r6, r5, #24
 8005a82:	f100 0304 	add.w	r3, r0, #4
 8005a86:	d50a      	bpl.n	8005a9e <_printf_i+0xce>
 8005a88:	6805      	ldr	r5, [r0, #0]
 8005a8a:	600b      	str	r3, [r1, #0]
 8005a8c:	2d00      	cmp	r5, #0
 8005a8e:	da03      	bge.n	8005a98 <_printf_i+0xc8>
 8005a90:	232d      	movs	r3, #45	; 0x2d
 8005a92:	426d      	negs	r5, r5
 8005a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a98:	485e      	ldr	r0, [pc, #376]	; (8005c14 <_printf_i+0x244>)
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	e019      	b.n	8005ad2 <_printf_i+0x102>
 8005a9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005aa2:	6805      	ldr	r5, [r0, #0]
 8005aa4:	600b      	str	r3, [r1, #0]
 8005aa6:	bf18      	it	ne
 8005aa8:	b22d      	sxthne	r5, r5
 8005aaa:	e7ef      	b.n	8005a8c <_printf_i+0xbc>
 8005aac:	680b      	ldr	r3, [r1, #0]
 8005aae:	6825      	ldr	r5, [r4, #0]
 8005ab0:	1d18      	adds	r0, r3, #4
 8005ab2:	6008      	str	r0, [r1, #0]
 8005ab4:	0628      	lsls	r0, r5, #24
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0xec>
 8005ab8:	681d      	ldr	r5, [r3, #0]
 8005aba:	e002      	b.n	8005ac2 <_printf_i+0xf2>
 8005abc:	0669      	lsls	r1, r5, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0xe8>
 8005ac0:	881d      	ldrh	r5, [r3, #0]
 8005ac2:	4854      	ldr	r0, [pc, #336]	; (8005c14 <_printf_i+0x244>)
 8005ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2308      	moveq	r3, #8
 8005aca:	230a      	movne	r3, #10
 8005acc:	2100      	movs	r1, #0
 8005ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad2:	6866      	ldr	r6, [r4, #4]
 8005ad4:	60a6      	str	r6, [r4, #8]
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	bfa2      	ittt	ge
 8005ada:	6821      	ldrge	r1, [r4, #0]
 8005adc:	f021 0104 	bicge.w	r1, r1, #4
 8005ae0:	6021      	strge	r1, [r4, #0]
 8005ae2:	b90d      	cbnz	r5, 8005ae8 <_printf_i+0x118>
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	d04d      	beq.n	8005b84 <_printf_i+0x1b4>
 8005ae8:	4616      	mov	r6, r2
 8005aea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aee:	fb03 5711 	mls	r7, r3, r1, r5
 8005af2:	5dc7      	ldrb	r7, [r0, r7]
 8005af4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005af8:	462f      	mov	r7, r5
 8005afa:	42bb      	cmp	r3, r7
 8005afc:	460d      	mov	r5, r1
 8005afe:	d9f4      	bls.n	8005aea <_printf_i+0x11a>
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d10b      	bne.n	8005b1c <_printf_i+0x14c>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07df      	lsls	r7, r3, #31
 8005b08:	d508      	bpl.n	8005b1c <_printf_i+0x14c>
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	6861      	ldr	r1, [r4, #4]
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	bfde      	ittt	le
 8005b12:	2330      	movle	r3, #48	; 0x30
 8005b14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b1c:	1b92      	subs	r2, r2, r6
 8005b1e:	6122      	str	r2, [r4, #16]
 8005b20:	f8cd a000 	str.w	sl, [sp]
 8005b24:	464b      	mov	r3, r9
 8005b26:	aa03      	add	r2, sp, #12
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7ff fee2 	bl	80058f4 <_printf_common>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d14c      	bne.n	8005bce <_printf_i+0x1fe>
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	b004      	add	sp, #16
 8005b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3e:	4835      	ldr	r0, [pc, #212]	; (8005c14 <_printf_i+0x244>)
 8005b40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	680e      	ldr	r6, [r1, #0]
 8005b48:	061f      	lsls	r7, r3, #24
 8005b4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b4e:	600e      	str	r6, [r1, #0]
 8005b50:	d514      	bpl.n	8005b7c <_printf_i+0x1ac>
 8005b52:	07d9      	lsls	r1, r3, #31
 8005b54:	bf44      	itt	mi
 8005b56:	f043 0320 	orrmi.w	r3, r3, #32
 8005b5a:	6023      	strmi	r3, [r4, #0]
 8005b5c:	b91d      	cbnz	r5, 8005b66 <_printf_i+0x196>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f023 0320 	bic.w	r3, r3, #32
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	2310      	movs	r3, #16
 8005b68:	e7b0      	b.n	8005acc <_printf_i+0xfc>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	f043 0320 	orr.w	r3, r3, #32
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	2378      	movs	r3, #120	; 0x78
 8005b74:	4828      	ldr	r0, [pc, #160]	; (8005c18 <_printf_i+0x248>)
 8005b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b7a:	e7e3      	b.n	8005b44 <_printf_i+0x174>
 8005b7c:	065e      	lsls	r6, r3, #25
 8005b7e:	bf48      	it	mi
 8005b80:	b2ad      	uxthmi	r5, r5
 8005b82:	e7e6      	b.n	8005b52 <_printf_i+0x182>
 8005b84:	4616      	mov	r6, r2
 8005b86:	e7bb      	b.n	8005b00 <_printf_i+0x130>
 8005b88:	680b      	ldr	r3, [r1, #0]
 8005b8a:	6826      	ldr	r6, [r4, #0]
 8005b8c:	6960      	ldr	r0, [r4, #20]
 8005b8e:	1d1d      	adds	r5, r3, #4
 8005b90:	600d      	str	r5, [r1, #0]
 8005b92:	0635      	lsls	r5, r6, #24
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0x1cc>
 8005b98:	6018      	str	r0, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <_printf_i+0x1d2>
 8005b9c:	0671      	lsls	r1, r6, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0x1c8>
 8005ba0:	8018      	strh	r0, [r3, #0]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	4616      	mov	r6, r2
 8005ba8:	e7ba      	b.n	8005b20 <_printf_i+0x150>
 8005baa:	680b      	ldr	r3, [r1, #0]
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	600a      	str	r2, [r1, #0]
 8005bb0:	681e      	ldr	r6, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7fa fb4a 	bl	8000250 <memchr>
 8005bbc:	b108      	cbz	r0, 8005bc2 <_printf_i+0x1f2>
 8005bbe:	1b80      	subs	r0, r0, r6
 8005bc0:	6060      	str	r0, [r4, #4]
 8005bc2:	6863      	ldr	r3, [r4, #4]
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bcc:	e7a8      	b.n	8005b20 <_printf_i+0x150>
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	47d0      	blx	sl
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d0ab      	beq.n	8005b34 <_printf_i+0x164>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	079b      	lsls	r3, r3, #30
 8005be0:	d413      	bmi.n	8005c0a <_printf_i+0x23a>
 8005be2:	68e0      	ldr	r0, [r4, #12]
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	4298      	cmp	r0, r3
 8005be8:	bfb8      	it	lt
 8005bea:	4618      	movlt	r0, r3
 8005bec:	e7a4      	b.n	8005b38 <_printf_i+0x168>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d09b      	beq.n	8005b34 <_printf_i+0x164>
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	68e3      	ldr	r3, [r4, #12]
 8005c00:	9903      	ldr	r1, [sp, #12]
 8005c02:	1a5b      	subs	r3, r3, r1
 8005c04:	42ab      	cmp	r3, r5
 8005c06:	dcf2      	bgt.n	8005bee <_printf_i+0x21e>
 8005c08:	e7eb      	b.n	8005be2 <_printf_i+0x212>
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	f104 0619 	add.w	r6, r4, #25
 8005c10:	e7f5      	b.n	8005bfe <_printf_i+0x22e>
 8005c12:	bf00      	nop
 8005c14:	080061a1 	.word	0x080061a1
 8005c18:	080061b2 	.word	0x080061b2

08005c1c <_putc_r>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	460d      	mov	r5, r1
 8005c20:	4614      	mov	r4, r2
 8005c22:	4606      	mov	r6, r0
 8005c24:	b118      	cbz	r0, 8005c2e <_putc_r+0x12>
 8005c26:	6983      	ldr	r3, [r0, #24]
 8005c28:	b90b      	cbnz	r3, 8005c2e <_putc_r+0x12>
 8005c2a:	f7ff fb41 	bl	80052b0 <__sinit>
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <_putc_r+0x84>)
 8005c30:	429c      	cmp	r4, r3
 8005c32:	d124      	bne.n	8005c7e <_putc_r+0x62>
 8005c34:	6874      	ldr	r4, [r6, #4]
 8005c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c38:	07d8      	lsls	r0, r3, #31
 8005c3a:	d405      	bmi.n	8005c48 <_putc_r+0x2c>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	0599      	lsls	r1, r3, #22
 8005c40:	d402      	bmi.n	8005c48 <_putc_r+0x2c>
 8005c42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c44:	f7ff fbe4 	bl	8005410 <__retarget_lock_acquire_recursive>
 8005c48:	68a3      	ldr	r3, [r4, #8]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	60a3      	str	r3, [r4, #8]
 8005c50:	da05      	bge.n	8005c5e <_putc_r+0x42>
 8005c52:	69a2      	ldr	r2, [r4, #24]
 8005c54:	4293      	cmp	r3, r2
 8005c56:	db1c      	blt.n	8005c92 <_putc_r+0x76>
 8005c58:	b2eb      	uxtb	r3, r5
 8005c5a:	2b0a      	cmp	r3, #10
 8005c5c:	d019      	beq.n	8005c92 <_putc_r+0x76>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	6022      	str	r2, [r4, #0]
 8005c64:	701d      	strb	r5, [r3, #0]
 8005c66:	b2ed      	uxtb	r5, r5
 8005c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c6a:	07da      	lsls	r2, r3, #31
 8005c6c:	d405      	bmi.n	8005c7a <_putc_r+0x5e>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	059b      	lsls	r3, r3, #22
 8005c72:	d402      	bmi.n	8005c7a <_putc_r+0x5e>
 8005c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c76:	f7ff fbcc 	bl	8005412 <__retarget_lock_release_recursive>
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <_putc_r+0x88>)
 8005c80:	429c      	cmp	r4, r3
 8005c82:	d101      	bne.n	8005c88 <_putc_r+0x6c>
 8005c84:	68b4      	ldr	r4, [r6, #8]
 8005c86:	e7d6      	b.n	8005c36 <_putc_r+0x1a>
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <_putc_r+0x8c>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	bf08      	it	eq
 8005c8e:	68f4      	ldreq	r4, [r6, #12]
 8005c90:	e7d1      	b.n	8005c36 <_putc_r+0x1a>
 8005c92:	4629      	mov	r1, r5
 8005c94:	4622      	mov	r2, r4
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7ff f912 	bl	8004ec0 <__swbuf_r>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	e7e3      	b.n	8005c68 <_putc_r+0x4c>
 8005ca0:	08006150 	.word	0x08006150
 8005ca4:	08006170 	.word	0x08006170
 8005ca8:	08006130 	.word	0x08006130

08005cac <_sbrk_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d06      	ldr	r5, [pc, #24]	; (8005cc8 <_sbrk_r+0x1c>)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	602b      	str	r3, [r5, #0]
 8005cb8:	f7fb fa16 	bl	80010e8 <_sbrk>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_sbrk_r+0x1a>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_sbrk_r+0x1a>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	200004a4 	.word	0x200004a4

08005ccc <__sread>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	460c      	mov	r4, r1
 8005cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd4:	f000 f8a8 	bl	8005e28 <_read_r>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	bfab      	itete	ge
 8005cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cde:	89a3      	ldrhlt	r3, [r4, #12]
 8005ce0:	181b      	addge	r3, r3, r0
 8005ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ce6:	bfac      	ite	ge
 8005ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cea:	81a3      	strhlt	r3, [r4, #12]
 8005cec:	bd10      	pop	{r4, pc}

08005cee <__swrite>:
 8005cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	898b      	ldrh	r3, [r1, #12]
 8005cf6:	05db      	lsls	r3, r3, #23
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	d505      	bpl.n	8005d0c <__swrite+0x1e>
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	2302      	movs	r3, #2
 8005d06:	2200      	movs	r2, #0
 8005d08:	f000 f870 	bl	8005dec <_lseek_r>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	4632      	mov	r2, r6
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d22:	f000 b817 	b.w	8005d54 <_write_r>

08005d26 <__sseek>:
 8005d26:	b510      	push	{r4, lr}
 8005d28:	460c      	mov	r4, r1
 8005d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2e:	f000 f85d 	bl	8005dec <_lseek_r>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	bf15      	itete	ne
 8005d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d42:	81a3      	strheq	r3, [r4, #12]
 8005d44:	bf18      	it	ne
 8005d46:	81a3      	strhne	r3, [r4, #12]
 8005d48:	bd10      	pop	{r4, pc}

08005d4a <__sclose>:
 8005d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4e:	f000 b81b 	b.w	8005d88 <_close_r>
	...

08005d54 <_write_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_write_r+0x20>)
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fa ffd8 	bl	8000d18 <_write>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_write_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_write_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	200004a4 	.word	0x200004a4

08005d78 <abort>:
 8005d78:	b508      	push	{r3, lr}
 8005d7a:	2006      	movs	r0, #6
 8005d7c:	f000 f88e 	bl	8005e9c <raise>
 8005d80:	2001      	movs	r0, #1
 8005d82:	f7fb f955 	bl	8001030 <_exit>
	...

08005d88 <_close_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d06      	ldr	r5, [pc, #24]	; (8005da4 <_close_r+0x1c>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	f7fb f973 	bl	800107e <_close>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_close_r+0x1a>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_close_r+0x1a>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	200004a4 	.word	0x200004a4

08005da8 <_fstat_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4d07      	ldr	r5, [pc, #28]	; (8005dc8 <_fstat_r+0x20>)
 8005dac:	2300      	movs	r3, #0
 8005dae:	4604      	mov	r4, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	f7fb f96e 	bl	8001096 <_fstat>
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d102      	bne.n	8005dc4 <_fstat_r+0x1c>
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	b103      	cbz	r3, 8005dc4 <_fstat_r+0x1c>
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200004a4 	.word	0x200004a4

08005dcc <_isatty_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_isatty_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fb f96d 	bl	80010b6 <_isatty>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_isatty_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_isatty_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	200004a4 	.word	0x200004a4

08005dec <_lseek_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_lseek_r+0x20>)
 8005df0:	4604      	mov	r4, r0
 8005df2:	4608      	mov	r0, r1
 8005df4:	4611      	mov	r1, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f7fb f966 	bl	80010cc <_lseek>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_lseek_r+0x1e>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_lseek_r+0x1e>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	200004a4 	.word	0x200004a4

08005e10 <__malloc_lock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__malloc_lock+0x8>)
 8005e12:	f7ff bafd 	b.w	8005410 <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	2000049c 	.word	0x2000049c

08005e1c <__malloc_unlock>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__malloc_unlock+0x8>)
 8005e1e:	f7ff baf8 	b.w	8005412 <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	2000049c 	.word	0x2000049c

08005e28 <_read_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d07      	ldr	r5, [pc, #28]	; (8005e48 <_read_r+0x20>)
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fb f904 	bl	8001044 <_read>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_read_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_read_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	200004a4 	.word	0x200004a4

08005e4c <_raise_r>:
 8005e4c:	291f      	cmp	r1, #31
 8005e4e:	b538      	push	{r3, r4, r5, lr}
 8005e50:	4604      	mov	r4, r0
 8005e52:	460d      	mov	r5, r1
 8005e54:	d904      	bls.n	8005e60 <_raise_r+0x14>
 8005e56:	2316      	movs	r3, #22
 8005e58:	6003      	str	r3, [r0, #0]
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e62:	b112      	cbz	r2, 8005e6a <_raise_r+0x1e>
 8005e64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e68:	b94b      	cbnz	r3, 8005e7e <_raise_r+0x32>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 f830 	bl	8005ed0 <_getpid_r>
 8005e70:	462a      	mov	r2, r5
 8005e72:	4601      	mov	r1, r0
 8005e74:	4620      	mov	r0, r4
 8005e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e7a:	f000 b817 	b.w	8005eac <_kill_r>
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d00a      	beq.n	8005e98 <_raise_r+0x4c>
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	d103      	bne.n	8005e8e <_raise_r+0x42>
 8005e86:	2316      	movs	r3, #22
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	e7e7      	b.n	8005e5e <_raise_r+0x12>
 8005e8e:	2400      	movs	r4, #0
 8005e90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e94:	4628      	mov	r0, r5
 8005e96:	4798      	blx	r3
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e7e0      	b.n	8005e5e <_raise_r+0x12>

08005e9c <raise>:
 8005e9c:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <raise+0xc>)
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	f7ff bfd3 	b.w	8005e4c <_raise_r>
 8005ea6:	bf00      	nop
 8005ea8:	2000000c 	.word	0x2000000c

08005eac <_kill_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d07      	ldr	r5, [pc, #28]	; (8005ecc <_kill_r+0x20>)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	f7fb f8a9 	bl	8001010 <_kill>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d102      	bne.n	8005ec8 <_kill_r+0x1c>
 8005ec2:	682b      	ldr	r3, [r5, #0]
 8005ec4:	b103      	cbz	r3, 8005ec8 <_kill_r+0x1c>
 8005ec6:	6023      	str	r3, [r4, #0]
 8005ec8:	bd38      	pop	{r3, r4, r5, pc}
 8005eca:	bf00      	nop
 8005ecc:	200004a4 	.word	0x200004a4

08005ed0 <_getpid_r>:
 8005ed0:	f7fb b896 	b.w	8001000 <_getpid>

08005ed4 <_init>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr

08005ee0 <_fini>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr
