
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a08  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6d8  0800b6d8  00020a48  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6e0  0800b6e0  00020a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6e0  0800b6e0  0001b6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6e4  0800b6e4  0001b6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a48  20000000  0800b6e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000a48  0800c130  00020a48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  0800c130  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0c9  00000000  00000000  00020a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037dc  00000000  00000000  0003cb41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00040320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00041360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064d  00000000  00000000  00042238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d69  00000000  00000000  00062885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd80f  00000000  00000000  000785ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf8  00000000  00000000  00135e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a48 	.word	0x20000a48
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008cb8 	.word	0x08008cb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a4c 	.word	0x20000a4c
 800021c:	08008cb8 	.word	0x08008cb8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9b9 	b.w	8000654 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f838 	bl	80006d8 <convert>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000670:	1415      	asrs	r5, r2, #16
 8000672:	0414      	lsls	r4, r2, #16
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f000 f82f 	bl	80006d8 <convert>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000682:	4620      	mov	r0, r4
 8000684:	4629      	mov	r1, r5
 8000686:	f7ff fe1b 	bl	80002c0 <__aeabi_ldivmod>
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	4613      	mov	r3, r2
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bdb0      	pop	{r4, r5, r7, pc}

08000698 <printFix>:

void printFix(int32_t i) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da05      	bge.n	80006b2 <printFix+0x1a>
            printf("-");
 80006a6:	202d      	movs	r0, #45	; 0x2d
 80006a8:	f007 f930 	bl	800790c <putchar>
            i = ~i + 1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	425b      	negs	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1419      	asrs	r1, r3, #16
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	461a      	mov	r2, r3
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <printFix+0x3c>)
 80006c8:	f007 f908 	bl	80078dc <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08008cd0 	.word	0x08008cd0

080006d8 <convert>:
	 */

       return i << 2;
   }

int32_t convert(int32_t i) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	041b      	lsls	r3, r3, #16
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <inconvert>:

int32_t inconvert(int32_t i) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006fe:	141b      	asrs	r3, r3, #16
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <I2C_Scan+0x58>)
 8000716:	f007 f97d 	bl	8007a14 <puts>

    for (i = 1; i < 128; i++) {
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e015      	b.n	800074c <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	b29b      	uxth	r3, r3
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b299      	uxth	r1, r3
 8000728:	230a      	movs	r3, #10
 800072a:	2201      	movs	r2, #1
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f004 fa57 	bl	8004be0 <HAL_I2C_IsDeviceReady>
 8000732:	4603      	mov	r3, r0
 8000734:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d104      	bne.n	8000746 <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4619      	mov	r1, r3
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <I2C_Scan+0x5c>)
 8000742:	f007 f8cb 	bl	80078dc <iprintf>
    for (i = 1; i < 128; i++) {
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	3301      	adds	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dae5      	bge.n	8000720 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <I2C_Scan+0x60>)
 8000756:	f007 f95d 	bl	8007a14 <puts>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08008cdc 	.word	0x08008cdc
 8000768:	08008cf4 	.word	0x08008cf4
 800076c:	08008d1c 	.word	0x08008d1c

08000770 <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f003 ff6e 	bl	800465c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f003 fbf7 	bl	8003f74 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f003 ff65 	bl	800465c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f003 fbee 	bl	8003f74 <HAL_Delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	2110      	movs	r1, #16
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f003 ff51 	bl	800465c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f003 ff45 	bl	800465c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2140      	movs	r1, #64	; 0x40
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f003 ff39 	bl	800465c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	2108      	movs	r1, #8
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <LCD_Send4Bits+0x70>)
 80007fc:	f003 ff2e 	bl	800465c <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000800:	f7ff ffb6 	bl	8000770 <LCD_EnablePulse>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48000400 	.word	0x48000400

08000810 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f003 ff1b 	bl	800465c <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffb5 	bl	800079c <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 030f 	and.w	r3, r3, #15
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ffae 	bl	800079c <LCD_Send4Bits>
    HAL_Delay(2);
 8000840:	2002      	movs	r0, #2
 8000842:	f003 fb97 	bl	8003f74 <HAL_Delay>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <LCD_SendChar>:

void LCD_SendChar(char c) {
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f003 fefc 	bl	800465c <HAL_GPIO_WritePin>
    LCD_Send4Bits(c >> 4);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff96 	bl	800079c <LCD_Send4Bits>
    LCD_Send4Bits(c & 0x0F);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff8f 	bl	800079c <LCD_Send4Bits>
    HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f003 fb78 	bl	8003f74 <HAL_Delay>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <LCD_SendString>:

void LCD_SendString(char* str) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000894:	e006      	b.n	80008a4 <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffd5 	bl	800084e <LCD_SendChar>
    while (*str) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f4      	bne.n	8000896 <LCD_SendString+0xa>
    }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	460a      	mov	r2, r1
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	4613      	mov	r3, r2
 80008c4:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <LCD_SetCursor+0x1a>
 80008cc:	2200      	movs	r2, #0
 80008ce:	e000      	b.n	80008d2 <LCD_SetCursor+0x1c>
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4413      	add	r3, r2
 80008d6:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | addr);
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff95 	bl	8000810 <LCD_SendCommand>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LCD_Init>:

void LCD_Init(void) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 80008f2:	2028      	movs	r0, #40	; 0x28
 80008f4:	f003 fb3e 	bl	8003f74 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f7ff ff4f 	bl	800079c <LCD_Send4Bits>
 80008fe:	2005      	movs	r0, #5
 8000900:	f003 fb38 	bl	8003f74 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000904:	2003      	movs	r0, #3
 8000906:	f7ff ff49 	bl	800079c <LCD_Send4Bits>
 800090a:	2001      	movs	r0, #1
 800090c:	f003 fb32 	bl	8003f74 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff43 	bl	800079c <LCD_Send4Bits>
 8000916:	2001      	movs	r0, #1
 8000918:	f003 fb2c 	bl	8003f74 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 800091c:	2002      	movs	r0, #2
 800091e:	f7ff ff3d 	bl	800079c <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f7ff ff74 	bl	8000810 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff ff71 	bl	8000810 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ff6e 	bl	8000810 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff ff6b 	bl	8000810 <LCD_SendCommand>
    HAL_Delay(2);
 800093a:	2002      	movs	r0, #2
 800093c:	f003 fb1a 	bl	8003f74 <HAL_Delay>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <LCD_PrintInt>:

void LCD_PrintInt(int32_t value) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    if (value == 0) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <LCD_PrintInt+0x16>
        LCD_SendString("0    ");
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <LCD_PrintInt+0x34>)
 8000954:	f7ff ff9a 	bl	800088c <LCD_SendString>
 8000958:	e00b      	b.n	8000972 <LCD_PrintInt+0x2e>
        return;
    }
    char buffer[12];
    sprintf(buffer, "%ld  ", (long)value);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4906      	ldr	r1, [pc, #24]	; (800097c <LCD_PrintInt+0x38>)
 8000962:	4618      	mov	r0, r3
 8000964:	f007 f85e 	bl	8007a24 <siprintf>
    LCD_SendString(buffer);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff8d 	bl	800088c <LCD_SendString>
}
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08008d2c 	.word	0x08008d2c
 800097c:	08008d34 	.word	0x08008d34

08000980 <LCD_PrintAngle>:

void LCD_PrintAngle(int32_t angle) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    //angle = inconvert(angle);  // Convert to integer degrees

    if (angle < 0) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	da05      	bge.n	800099a <LCD_PrintAngle+0x1a>
        LCD_SendChar('-');
 800098e:	202d      	movs	r0, #45	; 0x2d
 8000990:	f7ff ff5d 	bl	800084e <LCD_SendChar>
        angle = -angle;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	425b      	negs	r3, r3
 8000998:	607b      	str	r3, [r7, #4]
    }
    LCD_PrintInt(angle);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffd2 	bl	8000944 <LCD_PrintInt>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <lsmCtrlReg>:
#include "lsm9ds1.h"
#include "fixp.h"
#include "main.h"
#include "vector.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 80009b0:	f240 5322 	movw	r3, #1314	; 0x522
 80009b4:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 80009b6:	f107 021c 	add.w	r2, r7, #28
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2302      	movs	r3, #2
 80009c2:	21d6      	movs	r1, #214	; 0xd6
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f003 fefd 	bl	80047c4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f003 fad2 	bl	8003f74 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 80009d0:	f246 0320 	movw	r3, #24608	; 0x6020
 80009d4:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 80009d6:	f107 0218 	add.w	r2, r7, #24
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2302      	movs	r3, #2
 80009e2:	21d6      	movs	r1, #214	; 0xd6
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f003 feed 	bl	80047c4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 80009ea:	200a      	movs	r0, #10
 80009ec:	f003 fac2 	bl	8003f74 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 80009f0:	f247 0320 	movw	r3, #28704	; 0x7020
 80009f4:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 80009f6:	f107 0214 	add.w	r2, r7, #20
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2302      	movs	r3, #2
 8000a02:	213c      	movs	r1, #60	; 0x3c
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f003 fedd 	bl	80047c4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f003 fab2 	bl	8003f74 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8000a10:	2322      	movs	r3, #34	; 0x22
 8000a12:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2302      	movs	r3, #2
 8000a20:	213c      	movs	r1, #60	; 0x3c
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f003 fece 	bl	80047c4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a28:	200a      	movs	r0, #10
 8000a2a:	f003 faa3 	bl	8003f74 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8000a2e:	f640 4323 	movw	r3, #3107	; 0xc23
 8000a32:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8000a34:	f107 020c 	add.w	r2, r7, #12
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	213c      	movs	r1, #60	; 0x3c
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f003 febe 	bl	80047c4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f003 fa93 	bl	8003f74 <HAL_Delay>
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <lsmAccRead>:
	};

	return out;
}

Vector3D lsmAccRead(I2C_HandleTypeDef*handle) {
 8000a56:	b590      	push	{r4, r7, lr}
 8000a58:	b08d      	sub	sp, #52	; 0x34
 8000a5a:	af02      	add	r7, sp, #8
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, OUT_X_L_M, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c3, LSM9DS1_MAG_ADDRESS << 1 | 0x01, buffer, sizeof(buffer), HAL_MAX_DELAY);
	printf("%d\n", buffer);
	*/

	uint8_t reg1 = OUT_X_XL | 0x80; // Enable auto-increment
 8000a60:	23a8      	movs	r3, #168	; 0xa8
 8000a62:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data1[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, &reg1, 1, HAL_MAX_DELAY);
 8000a66:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	21d6      	movs	r1, #214	; 0xd6
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f003 fea5 	bl	80047c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_ACC_ADDRESS << 1) | 0x01, data1, 6, HAL_MAX_DELAY);
 8000a7a:	f107 0218 	add.w	r2, r7, #24
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2306      	movs	r3, #6
 8000a86:	21d7      	movs	r1, #215	; 0xd7
 8000a88:	6838      	ldr	r0, [r7, #0]
 8000a8a:	f003 ffb3 	bl	80049f4 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t acc_x = (int16_t)(data1[1] << 8 | data1[0]);
 8000a8e:	7e7b      	ldrb	r3, [r7, #25]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	7e3b      	ldrb	r3, [r7, #24]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t acc_y = (int16_t)(data1[3] << 8 | data1[2]);
 8000a9c:	7efb      	ldrb	r3, [r7, #27]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	7ebb      	ldrb	r3, [r7, #26]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t acc_z = (int16_t)(data1[5] << 8 | data1[4]);
 8000aaa:	7f7b      	ldrb	r3, [r7, #29]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	7f3b      	ldrb	r3, [r7, #28]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {acc_x, acc_y, acc_z};
 8000ab8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ac8:	617b      	str	r3, [r7, #20]
	return output;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	461c      	mov	r4, r3
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	372c      	adds	r7, #44	; 0x2c
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}

08000ae2 <lsmMagRead>:

Vector3D lsmMagRead(I2C_HandleTypeDef*handle) {
 8000ae2:	b590      	push	{r4, r7, lr}
 8000ae4:	b08d      	sub	sp, #52	; 0x34
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
	uint8_t reg2 = OUT_X_L_M | 0x80; // Enable auto-increment
 8000aec:	23a8      	movs	r3, #168	; 0xa8
 8000aee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data2[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, &reg2, 1, HAL_MAX_DELAY);
 8000af2:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	213c      	movs	r1, #60	; 0x3c
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f003 fe5f 	bl	80047c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_MAG_ADDRESS << 1) | 0x01, data2, 6, HAL_MAX_DELAY);
 8000b06:	f107 0218 	add.w	r2, r7, #24
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2306      	movs	r3, #6
 8000b12:	213d      	movs	r1, #61	; 0x3d
 8000b14:	6838      	ldr	r0, [r7, #0]
 8000b16:	f003 ff6d 	bl	80049f4 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t mag_x = (int16_t)(data2[1] << 8 | data2[0]);
 8000b1a:	7e7b      	ldrb	r3, [r7, #25]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	7e3b      	ldrb	r3, [r7, #24]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t mag_y = (int16_t)(data2[3] << 8 | data2[2]);
 8000b28:	7efb      	ldrb	r3, [r7, #27]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	7ebb      	ldrb	r3, [r7, #26]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t mag_z = (int16_t)(data2[5] << 8 | data2[4]);
 8000b36:	7f7b      	ldrb	r3, [r7, #29]
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	b21a      	sxth	r2, r3
 8000b3c:	7f3b      	ldrb	r3, [r7, #28]
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {mag_x, mag_y, mag_z};
 8000b44:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000b54:	617b      	str	r3, [r7, #20]
	return output;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	461c      	mov	r4, r3
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	372c      	adds	r7, #44	; 0x2c
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
	...

08000b70 <readSensorsAndAverage>:

static int64_t  acc_sum_x = 0, acc_sum_y = 0, acc_sum_z = 0;
static int64_t  mag_sum_x = 0, mag_sum_y = 0, mag_sum_z = 0;

void readSensorsAndAverage(Vector3D* acc_avg, Vector3D* mag_avg, I2C_HandleTypeDef hi2c3)
{
 8000b70:	b082      	sub	sp, #8
 8000b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b76:	b0bb      	sub	sp, #236	; 0xec
 8000b78:	af0a      	add	r7, sp, #40	; 0x28
 8000b7a:	6578      	str	r0, [r7, #84]	; 0x54
 8000b7c:	6539      	str	r1, [r7, #80]	; 0x50
 8000b7e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000b82:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix3x3 softIron = create_matrix(
 8000b86:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000b8a:	4bc7      	ldr	r3, [pc, #796]	; (8000ea8 <readSensorsAndAverage+0x338>)
 8000b8c:	9305      	str	r3, [sp, #20]
 8000b8e:	f240 332d 	movw	r3, #813	; 0x32d
 8000b92:	9304      	str	r3, [sp, #16]
 8000b94:	4bc5      	ldr	r3, [pc, #788]	; (8000eac <readSensorsAndAverage+0x33c>)
 8000b96:	9303      	str	r3, [sp, #12]
 8000b98:	f240 332d 	movw	r3, #813	; 0x32d
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	4bc4      	ldr	r3, [pc, #784]	; (8000eb0 <readSensorsAndAverage+0x340>)
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f641 0373 	movw	r3, #6259	; 0x1873
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4bc0      	ldr	r3, [pc, #768]	; (8000eac <readSensorsAndAverage+0x33c>)
 8000baa:	f641 0273 	movw	r2, #6259	; 0x1873
 8000bae:	f24e 11ff 	movw	r1, #57855	; 0xe1ff
 8000bb2:	f002 fe87 	bl	80038c4 <create_matrix>
			57855,   6259, -1016,     /* row 0 */
			6259,    73662, 813,     /* row 1 */
			-1016,   813, 66696      /* row 2 */
	);
    /* 1. fresh raw sensor counts --------------------------------------- */
    Vector3D acc_raw = lsmAccRead(&hi2c3);     /* ±16 384 cnt ≈ 1 g   */
 8000bb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bba:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff49 	bl	8000a56 <lsmAccRead>
    Vector3D mraw    = lsmMagRead(&hi2c3);     /* ±32 768 cnt        */
 8000bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bc8:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff88 	bl	8000ae2 <lsmMagRead>
    mag_raw.x =  mraw.y + 2637; //+ 2897;    +Ymag → +Xbody
    mag_raw.y = -mraw.x + 3352;//2486.0; //+ 3352;   /* –Xmag → +Ybody
    mag_raw.z =  mraw.z + 3376; //+ 3200;    Zmag →  Zbody
    */

	mag_raw.x =  convert(mraw.x) - convert(2832 + 54); //+ 2897;   /* +Ymag → +Xbody */
 8000bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd7e 	bl	80006d8 <convert>
 8000bdc:	4604      	mov	r4, r0
 8000bde:	f640 3046 	movw	r0, #2886	; 0xb46
 8000be2:	f7ff fd79 	bl	80006d8 <convert>
 8000be6:	4603      	mov	r3, r0
 8000be8:	1ae3      	subs	r3, r4, r3
 8000bea:	677b      	str	r3, [r7, #116]	; 0x74
    mag_raw.y =  convert(mraw.y) + convert(3259 - 192); //2486.0; //+ 3352;   /* –Xmag → +Ybody */
 8000bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd71 	bl	80006d8 <convert>
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	f640 30fb 	movw	r0, #3067	; 0xbfb
 8000bfc:	f7ff fd6c 	bl	80006d8 <convert>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4423      	add	r3, r4
 8000c04:	67bb      	str	r3, [r7, #120]	; 0x78
	mag_raw.z =  convert(mraw.z) + convert(4243 - 80); //+ 3200;   /*  Zmag →  Zbody */
 8000c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd64 	bl	80006d8 <convert>
 8000c10:	4604      	mov	r4, r0
 8000c12:	f241 0043 	movw	r0, #4163	; 0x1043
 8000c16:	f7ff fd5f 	bl	80006d8 <convert>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4423      	add	r3, r4
 8000c1e:	67fb      	str	r3, [r7, #124]	; 0x7c

	mag_raw = MVMult(softIron, mag_raw);
 8000c20:	f107 0674 	add.w	r6, r7, #116	; 0x74
 8000c24:	ac06      	add	r4, sp, #24
 8000c26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c32:	466d      	mov	r5, sp
 8000c34:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c40:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f002 ffaa 	bl	8003ba4 <MVMult>

	/* 5. push *m_soft* into the FIFO instead of the raw reading ----------- */

    acc_raw.x = acc_raw.x + 376;
 8000c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    acc_raw.y = acc_raw.y + 282 + 133;
 8000c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c60:	f203 139f 	addw	r3, r3, #415	; 0x19f
 8000c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    acc_raw.z = acc_raw.z - 738;
 8000c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c6c:	f2a3 23e2 	subw	r3, r3, #738	; 0x2e2
 8000c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* 3. promote to Q16.16  (raw × 4  ==  << 2) ------------------------ */
    Vector3D acc_q16 = { acc_raw.x,
 8000c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c78:	66bb      	str	r3, [r7, #104]	; 0x68
                         acc_raw.y,
 8000c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    Vector3D acc_q16 = { acc_raw.x,
 8000c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
                         acc_raw.z};
 8000c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    Vector3D acc_q16 = { acc_raw.x,
 8000c84:	673b      	str	r3, [r7, #112]	; 0x70

    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c88:	141b      	asrs	r3, r3, #16
 8000c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
                         mag_raw.y>>16,
 8000c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c8e:	141b      	asrs	r3, r3, #16
    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
                         mag_raw.z>>16};
 8000c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c94:	141b      	asrs	r3, r3, #16
    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64

    /* 4. drop oldest sample if FIFO full ------------------------------ */
    if (buf_filled == AVG_LEN) {
 8000c98:	4b86      	ldr	r3, [pc, #536]	; (8000eb4 <readSensorsAndAverage+0x344>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	f040 809a 	bne.w	8000dd6 <readSensorsAndAverage+0x266>
        acc_sum_x -= acc_buf[buf_pos].x;
 8000ca2:	4b85      	ldr	r3, [pc, #532]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca8:	4b84      	ldr	r3, [pc, #528]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4c84      	ldr	r4, [pc, #528]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4423      	add	r3, r4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cc2:	ebb0 0802 	subs.w	r8, r0, r2
 8000cc6:	eb61 0903 	sbc.w	r9, r1, r3
 8000cca:	4b7b      	ldr	r3, [pc, #492]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000ccc:	e9c3 8900 	strd	r8, r9, [r3]
        acc_sum_y -= acc_buf[buf_pos].y;
 8000cd0:	4b7c      	ldr	r3, [pc, #496]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd6:	4b79      	ldr	r3, [pc, #484]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4c78      	ldr	r4, [pc, #480]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4423      	add	r3, r4
 8000ce8:	3304      	adds	r3, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cf2:	ebb0 0a02 	subs.w	sl, r0, r2
 8000cf6:	eb61 0b03 	sbc.w	fp, r1, r3
 8000cfa:	4b72      	ldr	r3, [pc, #456]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000cfc:	e9c3 ab00 	strd	sl, fp, [r3]
        acc_sum_z -= acc_buf[buf_pos].z;
 8000d00:	4b71      	ldr	r3, [pc, #452]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d06:	4b6d      	ldr	r3, [pc, #436]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4c6c      	ldr	r4, [pc, #432]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4423      	add	r3, r4
 8000d18:	3308      	adds	r3, #8
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d22:	1a84      	subs	r4, r0, r2
 8000d24:	64bc      	str	r4, [r7, #72]	; 0x48
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d2c:	4b66      	ldr	r3, [pc, #408]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000d2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8000d32:	e9c3 1200 	strd	r1, r2, [r3]

        mag_sum_x -= mag_buf[buf_pos].x;
 8000d36:	4b65      	ldr	r3, [pc, #404]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3c:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4c63      	ldr	r4, [pc, #396]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4423      	add	r3, r4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	643c      	str	r4, [r7, #64]	; 0x40
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8000d60:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000d62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000d66:	e9c3 1200 	strd	r1, r2, [r3]
        mag_sum_y -= mag_buf[buf_pos].y;
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <readSensorsAndAverage+0x364>)
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4c56      	ldr	r4, [pc, #344]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4423      	add	r3, r4
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	63bc      	str	r4, [r7, #56]	; 0x38
 8000d90:	eb61 0303 	sbc.w	r3, r1, r3
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <readSensorsAndAverage+0x364>)
 8000d98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000d9c:	e9c3 1200 	strd	r1, r2, [r3]
        mag_sum_z -= mag_buf[buf_pos].z;
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <readSensorsAndAverage+0x368>)
 8000da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4c48      	ldr	r4, [pc, #288]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4423      	add	r3, r4
 8000db8:	3308      	adds	r3, #8
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	633c      	str	r4, [r7, #48]	; 0x30
 8000dc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <readSensorsAndAverage+0x368>)
 8000dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000dd2:	e9c3 1200 	strd	r1, r2, [r3]
    }

    /* 5. store new sample & update sums -------------------------------- */
    acc_buf[buf_pos] = acc_q16;
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4938      	ldr	r1, [pc, #224]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	461c      	mov	r4, r3
 8000dea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    mag_buf[buf_pos] = mag_q16;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4934      	ldr	r1, [pc, #208]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	461c      	mov	r4, r3
 8000e0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    acc_sum_x += acc_q16.x;  acc_sum_y += acc_q16.y;  acc_sum_z += acc_q16.z;
 8000e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e18:	4618      	mov	r0, r3
 8000e1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	1884      	adds	r4, r0, r2
 8000e26:	62bc      	str	r4, [r7, #40]	; 0x28
 8000e28:	eb41 0303 	adc.w	r3, r1, r3
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000e30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000e34:	e9c3 1200 	strd	r1, r2, [r3]
 8000e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	1884      	adds	r4, r0, r2
 8000e48:	623c      	str	r4, [r7, #32]
 8000e4a:	eb41 0303 	adc.w	r3, r1, r3
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000e52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000e56:	e9c3 1200 	strd	r1, r2, [r3]
 8000e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	1884      	adds	r4, r0, r2
 8000e6a:	61bc      	str	r4, [r7, #24]
 8000e6c:	eb41 0303 	adc.w	r3, r1, r3
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000e78:	e9c3 1200 	strd	r1, r2, [r3]
    mag_sum_x += mag_q16.x;  mag_sum_y += mag_q16.y;  mag_sum_z += mag_q16.z;
 8000e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e7e:	4618      	mov	r0, r3
 8000e80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	1884      	adds	r4, r0, r2
 8000e8c:	613c      	str	r4, [r7, #16]
 8000e8e:	eb41 0303 	adc.w	r3, r1, r3
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000e96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e9a:	e9c3 1200 	strd	r1, r2, [r3]
 8000e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000ea6:	e019      	b.n	8000edc <readSensorsAndAverage+0x36c>
 8000ea8:	00010488 	.word	0x00010488
 8000eac:	fffffc08 	.word	0xfffffc08
 8000eb0:	00011fbe 	.word	0x00011fbe
 8000eb4:	20000aad 	.word	0x20000aad
 8000eb8:	20000ab0 	.word	0x20000ab0
 8000ebc:	20000aac 	.word	0x20000aac
 8000ec0:	20000a64 	.word	0x20000a64
 8000ec4:	20000ab8 	.word	0x20000ab8
 8000ec8:	20000ac0 	.word	0x20000ac0
 8000ecc:	20000ac8 	.word	0x20000ac8
 8000ed0:	20000a88 	.word	0x20000a88
 8000ed4:	20000ad0 	.word	0x20000ad0
 8000ed8:	20000ad8 	.word	0x20000ad8
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <readSensorsAndAverage+0x498>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	1884      	adds	r4, r0, r2
 8000ee4:	60bc      	str	r4, [r7, #8]
 8000ee6:	eb41 0303 	adc.w	r3, r1, r3
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <readSensorsAndAverage+0x498>)
 8000eee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000ef2:	e9c3 1200 	strd	r1, r2, [r3]
 8000ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ef8:	4618      	mov	r0, r3
 8000efa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <readSensorsAndAverage+0x49c>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	1884      	adds	r4, r0, r2
 8000f06:	603c      	str	r4, [r7, #0]
 8000f08:	eb41 0303 	adc.w	r3, r1, r3
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <readSensorsAndAverage+0x49c>)
 8000f10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f14:	e9c3 1200 	strd	r1, r2, [r3]

    /* 6. advance circular index --------------------------------------- */
    buf_pos = (buf_pos + 1) % AVG_LEN;
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <readSensorsAndAverage+0x4a0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <readSensorsAndAverage+0x4a4>)
 8000f20:	fb83 3102 	smull	r3, r1, r3, r2
 8000f24:	17d3      	asrs	r3, r2, #31
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	460b      	mov	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	440b      	add	r3, r1
 8000f2e:	1ad1      	subs	r1, r2, r3
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <readSensorsAndAverage+0x4a0>)
 8000f34:	701a      	strb	r2, [r3, #0]
    if (buf_filled < AVG_LEN) buf_filled++;
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d805      	bhi.n	8000f4a <readSensorsAndAverage+0x3da>
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f48:	701a      	strb	r2, [r3, #0]

    /* 7. return running mean ------------------------------------------ */
    int32_t div = buf_filled;           /* 1 … 5 */
 8000f4a:	4b33      	ldr	r3, [pc, #204]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    acc_avg->x = (int32_t)(acc_sum_x / div);
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <readSensorsAndAverage+0x4ac>)
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f62:	f7ff f9ad 	bl	80002c0 <__aeabi_ldivmod>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f6c:	601a      	str	r2, [r3, #0]
    acc_avg->y = (int32_t)(acc_sum_y / div);
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <readSensorsAndAverage+0x4b0>)
 8000f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f78:	461a      	mov	r2, r3
 8000f7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f7e:	f7ff f99f 	bl	80002c0 <__aeabi_ldivmod>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f88:	605a      	str	r2, [r3, #4]
    acc_avg->z = (int32_t)(acc_sum_z / div);
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <readSensorsAndAverage+0x4b4>)
 8000f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f94:	461a      	mov	r2, r3
 8000f96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f9a:	f7ff f991 	bl	80002c0 <__aeabi_ldivmod>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	609a      	str	r2, [r3, #8]

    mag_avg->x = (int32_t)(mag_sum_x / div);
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <readSensorsAndAverage+0x4b8>)
 8000fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fb6:	f7ff f983 	bl	80002c0 <__aeabi_ldivmod>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fc0:	601a      	str	r2, [r3, #0]
    mag_avg->y = (int32_t)(mag_sum_y / div);
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <readSensorsAndAverage+0x498>)
 8000fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fcc:	461a      	mov	r2, r3
 8000fce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fd2:	f7ff f975 	bl	80002c0 <__aeabi_ldivmod>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fdc:	605a      	str	r2, [r3, #4]
    mag_avg->z = (int32_t)(mag_sum_z / div);
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <readSensorsAndAverage+0x49c>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fe8:	461a      	mov	r2, r3
 8000fea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fee:	f7ff f967 	bl	80002c0 <__aeabi_ldivmod>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ff8:	609a      	str	r2, [r3, #8]
}
 8000ffa:	bf00      	nop
 8000ffc:	37c4      	adds	r7, #196	; 0xc4
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b002      	add	sp, #8
 8001006:	4770      	bx	lr
 8001008:	20000ad0 	.word	0x20000ad0
 800100c:	20000ad8 	.word	0x20000ad8
 8001010:	20000aac 	.word	0x20000aac
 8001014:	55555556 	.word	0x55555556
 8001018:	20000aad 	.word	0x20000aad
 800101c:	20000ab0 	.word	0x20000ab0
 8001020:	20000ab8 	.word	0x20000ab8
 8001024:	20000ac0 	.word	0x20000ac0
 8001028:	20000ac8 	.word	0x20000ac8

0800102c <sinus>:

// functions

extern const uint16_t sin_lut[LUTCOUNT];  // Q1.15 format

int32_t sinus(int t) {
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    while (t < 0) t += SIN_FULL_CYCLE;
 8001034:	e003      	b.n	800103e <sinus+0x12>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dbf8      	blt.n	8001036 <sinus+0xa>
    t %= SIN_FULL_CYCLE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	425a      	negs	r2, r3
 8001048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001050:	bf58      	it	pl
 8001052:	4253      	negpl	r3, r2
 8001054:	607b      	str	r3, [r7, #4]

    int quarter_len = LUTCOUNT;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	613b      	str	r3, [r7, #16]
    int quarter = t / quarter_len;       // 0 to 3
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fb92 f3f3 	sdiv	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
    int idx     = t % quarter_len;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	fb93 f2f2 	sdiv	r2, r3, r2
 800106e:	6939      	ldr	r1, [r7, #16]
 8001070:	fb01 f202 	mul.w	r2, r1, r2
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d82a      	bhi.n	80010d4 <sinus+0xa8>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <sinus+0x58>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001095 	.word	0x08001095
 8001088:	080010a1 	.word	0x080010a1
 800108c:	080010b3 	.word	0x080010b3
 8001090:	080010c1 	.word	0x080010c1

    int32_t val;
    switch (quarter) {
        case 0: val =  sin_lut[idx]; break;                       // [0, π/2]
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <sinus+0xc0>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e01c      	b.n	80010da <sinus+0xae>
        case 1: val =  sin_lut[quarter_len - 1 - idx]; break;     // [π/2, π]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <sinus+0xc0>)
 80010aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e013      	b.n	80010da <sinus+0xae>
        case 2: val = -sin_lut[idx]; break;                       // [π, 3π/2]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <sinus+0xc0>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ba:	425b      	negs	r3, r3
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e00c      	b.n	80010da <sinus+0xae>
        case 3: val = -sin_lut[quarter_len - 1 - idx]; break;     // [3π/2, 2π]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <sinus+0xc0>)
 80010ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ce:	425b      	negs	r3, r3
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e002      	b.n	80010da <sinus+0xae>
        default: val = 0; break;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	bf00      	nop
    }

    return (val<<1);  // Now returns 16.16 fixed-point
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	08008df0 	.word	0x08008df0

080010f0 <cosinus>:



int32_t cosinus(int t) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT / 4) % LUTCOUNT); // phase shift by 90°
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010fe:	425a      	negs	r2, r3
 8001100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001104:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001108:	bf58      	it	pl
 800110a:	4253      	negpl	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff8d 	bl	800102c <sinus>
 8001112:	4603      	mov	r3, r0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 800111c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT * 4),FIX16_MULT(convert(2),PI16)); // N/2pi
 8001126:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800112a:	f7ff fad5 	bl	80006d8 <convert>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001136:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800113a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 800113e:	2002      	movs	r0, #2
 8001140:	f7ff faca 	bl	80006d8 <convert>
 8001144:	4603      	mov	r3, r0
 8001146:	461c      	mov	r4, r3
 8001148:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800114c:	4622      	mov	r2, r4
 800114e:	462b      	mov	r3, r5
 8001150:	1891      	adds	r1, r2, r2
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	415b      	adcs	r3, r3
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800115c:	1912      	adds	r2, r2, r4
 800115e:	eb45 0303 	adc.w	r3, r5, r3
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	0199      	lsls	r1, r3, #6
 800116c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001170:	0190      	lsls	r0, r2, #6
 8001172:	1812      	adds	r2, r2, r0
 8001174:	eb41 0303 	adc.w	r3, r1, r3
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	0159      	lsls	r1, r3, #5
 8001182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001186:	0150      	lsls	r0, r2, #5
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	1b12      	subs	r2, r2, r4
 800118e:	eb63 0305 	sbc.w	r3, r3, r5
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	f04f 0100 	mov.w	r1, #0
 800119a:	0159      	lsls	r1, r3, #5
 800119c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011a0:	0150      	lsls	r0, r2, #5
 80011a2:	eb12 0800 	adds.w	r8, r2, r0
 80011a6:	eb43 0901 	adc.w	r9, r3, r1
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80011b6:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80011ba:	ea4f 4329 	mov.w	r3, r9, asr #16
 80011be:	4613      	mov	r3, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011c6:	4650      	mov	r0, sl
 80011c8:	4659      	mov	r1, fp
 80011ca:	f7ff f879 	bl	80002c0 <__aeabi_ldivmod>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4613      	mov	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	461a      	mov	r2, r3
 80011e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011e6:	fb02 f501 	mul.w	r5, r2, r1
 80011ea:	fb00 f403 	mul.w	r4, r0, r3
 80011ee:	442c      	add	r4, r5
 80011f0:	fba0 2302 	umull	r2, r3, r0, r2
 80011f4:	18e1      	adds	r1, r4, r3
 80011f6:	460b      	mov	r3, r1
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	f04f 0100 	mov.w	r1, #0
 8001200:	0c10      	lsrs	r0, r2, #16
 8001202:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001206:	1419      	asrs	r1, r3, #16
 8001208:	4603      	mov	r3, r0
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fa70 	bl	80006f0 <inconvert>
 8001210:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 8001212:	6938      	ldr	r0, [r7, #16]
 8001214:	f7ff ff0a 	bl	800102c <sinus>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001224 <cosrad>:

int32_t cosrad(int32_t t) {
 8001224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
    int32_t factor = FIX16_DIV(convert(LUTCOUNT), FIX16_MULT(convert(2), PI16));
 800122e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001232:	f7ff fa51 	bl	80006d8 <convert>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800123e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001242:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fa46 	bl	80006d8 <convert>
 800124c:	4603      	mov	r3, r0
 800124e:	461c      	mov	r4, r3
 8001250:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001254:	4622      	mov	r2, r4
 8001256:	462b      	mov	r3, r5
 8001258:	1891      	adds	r1, r2, r2
 800125a:	6039      	str	r1, [r7, #0]
 800125c:	415b      	adcs	r3, r3
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001264:	1912      	adds	r2, r2, r4
 8001266:	eb45 0303 	adc.w	r3, r5, r3
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0199      	lsls	r1, r3, #6
 8001274:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001278:	0190      	lsls	r0, r2, #6
 800127a:	1812      	adds	r2, r2, r0
 800127c:	eb41 0303 	adc.w	r3, r1, r3
 8001280:	f04f 0000 	mov.w	r0, #0
 8001284:	f04f 0100 	mov.w	r1, #0
 8001288:	0159      	lsls	r1, r3, #5
 800128a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800128e:	0150      	lsls	r0, r2, #5
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	1b12      	subs	r2, r2, r4
 8001296:	eb63 0305 	sbc.w	r3, r3, r5
 800129a:	f04f 0000 	mov.w	r0, #0
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	0159      	lsls	r1, r3, #5
 80012a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012a8:	0150      	lsls	r0, r2, #5
 80012aa:	eb12 0800 	adds.w	r8, r2, r0
 80012ae:	eb43 0901 	adc.w	r9, r3, r1
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80012be:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80012c2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80012c6:	4613      	mov	r3, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ce:	4650      	mov	r0, sl
 80012d0:	4659      	mov	r1, fp
 80012d2:	f7fe fff5 	bl	80002c0 <__aeabi_ldivmod>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4613      	mov	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
    int integer = (int)(inconvert(FIX16_MULT(t, factor)));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4618      	mov	r0, r3
 80012e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	461a      	mov	r2, r3
 80012ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ee:	fb02 f501 	mul.w	r5, r2, r1
 80012f2:	fb00 f403 	mul.w	r4, r0, r3
 80012f6:	442c      	add	r4, r5
 80012f8:	fba0 2302 	umull	r2, r3, r0, r2
 80012fc:	18e1      	adds	r1, r4, r3
 80012fe:	460b      	mov	r3, r1
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	f04f 0100 	mov.w	r1, #0
 8001308:	0c10      	lsrs	r0, r2, #16
 800130a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800130e:	1419      	asrs	r1, r3, #16
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f9ec 	bl	80006f0 <inconvert>
 8001318:	6138      	str	r0, [r7, #16]
    return cosinus(integer);
 800131a:	6938      	ldr	r0, [r7, #16]
 800131c:	f7ff fee8 	bl	80010f0 <cosinus>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800132c <fix_asin>:
}

extern const int32_t asin_lut[1024];
*/

int32_t fix_asin(int32_t x) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    if (x < -convert(1)) x = -convert(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff f9cf 	bl	80006d8 <convert>
 800133a:	4603      	mov	r3, r0
 800133c:	425b      	negs	r3, r3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	da05      	bge.n	8001350 <fix_asin+0x24>
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff f9c7 	bl	80006d8 <convert>
 800134a:	4603      	mov	r3, r0
 800134c:	425b      	negs	r3, r3
 800134e:	607b      	str	r3, [r7, #4]
    if (x >  convert(1)) x =  convert(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff f9c1 	bl	80006d8 <convert>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4293      	cmp	r3, r2
 800135c:	dd03      	ble.n	8001366 <fix_asin+0x3a>
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff f9ba 	bl	80006d8 <convert>
 8001364:	6078      	str	r0, [r7, #4]

    int32_t abs_x = (x < 0) ? -x : x;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	bfb8      	it	lt
 800136c:	425b      	neglt	r3, r3
 800136e:	623b      	str	r3, [r7, #32]

    // Scale to index in LUT
    int32_t scaled = abs_x * (LUTCOUNT - 1);      // 1024 steps
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	4613      	mov	r3, r2
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	61fb      	str	r3, [r7, #28]
    int index = scaled >> 16;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	141b      	asrs	r3, r3, #16
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t frac = scaled & 0xFFFF;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	b29b      	uxth	r3, r3
 8001384:	61bb      	str	r3, [r7, #24]

    if (index >= (LUTCOUNT-1)) index = (LUTCOUNT-2); // to safely access [i] and [i+1]
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800138c:	4293      	cmp	r3, r2
 800138e:	dd02      	ble.n	8001396 <fix_asin+0x6a>
 8001390:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001394:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t y0 = asin_lut[index];
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <fix_asin+0xd8>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	617b      	str	r3, [r7, #20]
    int32_t y1 = asin_lut[index + 1];
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <fix_asin+0xd8>)
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	613b      	str	r3, [r7, #16]
    int32_t dy = y1 - y0;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	60fb      	str	r3, [r7, #12]
    int32_t interp = y0 + FIX16_MULT(dy, frac);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4618      	mov	r0, r3
 80013b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	461a      	mov	r2, r3
 80013c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013c4:	fb02 f501 	mul.w	r5, r2, r1
 80013c8:	fb00 f403 	mul.w	r4, r0, r3
 80013cc:	442c      	add	r4, r5
 80013ce:	fba0 2302 	umull	r2, r3, r0, r2
 80013d2:	18e1      	adds	r1, r4, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	f04f 0000 	mov.w	r0, #0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	0c10      	lsrs	r0, r2, #16
 80013e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013e4:	1419      	asrs	r1, r3, #16
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]

    return (x >= 0) ? interp : -interp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da02      	bge.n	80013fa <fix_asin+0xce>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	425b      	negs	r3, r3
 80013f8:	e000      	b.n	80013fc <fix_asin+0xd0>
 80013fa:	68bb      	ldr	r3, [r7, #8]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	0800a5f0 	.word	0x0800a5f0

08001408 <fix_atan_lut>:



static inline int32_t fix_atan_lut(int32_t r) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    if (r < 0) r = -r;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da02      	bge.n	800141c <fix_atan_lut+0x14>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	425b      	negs	r3, r3
 800141a:	607b      	str	r3, [r7, #4]
    if (r > convert(1)) r = convert(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff f95b 	bl	80006d8 <convert>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4293      	cmp	r3, r2
 8001428:	dd03      	ble.n	8001432 <fix_atan_lut+0x2a>
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff f954 	bl	80006d8 <convert>
 8001430:	6078      	str	r0, [r7, #4]

    int32_t scaled = r * (LUTCOUNT - 1); // [0, 1] → [0, 1023]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
    int index = scaled >> 16;
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	141b      	asrs	r3, r3, #16
 8001440:	61fb      	str	r3, [r7, #28]
    int32_t frac = scaled & 0xFFFF;
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	b29b      	uxth	r3, r3
 8001446:	617b      	str	r3, [r7, #20]

    if (index >= (LUTCOUNT - 1)) index = (LUTCOUNT - 2);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800144e:	4293      	cmp	r3, r2
 8001450:	dd02      	ble.n	8001458 <fix_atan_lut+0x50>
 8001452:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001456:	61fb      	str	r3, [r7, #28]

    int32_t y0 = atan_lut[index];
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <fix_atan_lut+0xb0>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	613b      	str	r3, [r7, #16]
    int32_t y1 = atan_lut[index + 1];
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <fix_atan_lut+0xb0>)
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
    int32_t dy = y1 - y0;
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	60bb      	str	r3, [r7, #8]
    return y0 + FIX16_MULT(dy, frac);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	461a      	mov	r2, r3
 8001482:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001486:	fb02 f501 	mul.w	r5, r2, r1
 800148a:	fb00 f403 	mul.w	r4, r0, r3
 800148e:	442c      	add	r4, r5
 8001490:	fba0 2302 	umull	r2, r3, r0, r2
 8001494:	18e1      	adds	r1, r4, r3
 8001496:	460b      	mov	r3, r1
 8001498:	f04f 0000 	mov.w	r0, #0
 800149c:	f04f 0100 	mov.w	r1, #0
 80014a0:	0c10      	lsrs	r0, r2, #16
 80014a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014a6:	1419      	asrs	r1, r3, #16
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	080095f0 	.word	0x080095f0

080014bc <fix_atan2>:

int32_t fix_atan2(int32_t y, int32_t x) {
 80014bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
    if (x == 0) {
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10b      	bne.n	80014e6 <fix_atan2+0x2a>
        if (y > 0) return PI16 / 2;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dd01      	ble.n	80014d8 <fix_atan2+0x1c>
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <fix_atan2+0xe8>)
 80014d6:	e05f      	b.n	8001598 <fix_atan2+0xdc>
        if (y < 0) return -PI16 / 2;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da01      	bge.n	80014e2 <fix_atan2+0x26>
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <fix_atan2+0xec>)
 80014e0:	e05a      	b.n	8001598 <fix_atan2+0xdc>
        return 0; // undefined
 80014e2:	2300      	movs	r3, #0
 80014e4:	e058      	b.n	8001598 <fix_atan2+0xdc>
    }

    int32_t r = (int32_t)(((int64_t)y << 16) / x);  // r = y / x in 16.16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	461a      	mov	r2, r3
 80014ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014ee:	ea4f 4922 	mov.w	r9, r2, asr #16
 80014f2:	ea4f 4802 	mov.w	r8, r2, lsl #16
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014fe:	4640      	mov	r0, r8
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe fedd 	bl	80002c0 <__aeabi_ldivmod>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4613      	mov	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
    int32_t abs_r = (r < 0) ? -r : r;
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	bfb8      	it	lt
 8001514:	425b      	neglt	r3, r3
 8001516:	60fb      	str	r3, [r7, #12]

    int32_t angle;
    if (abs_r > convert(1)) {
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff f8dd 	bl	80006d8 <convert>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4293      	cmp	r3, r2
 8001524:	dd1d      	ble.n	8001562 <fix_atan2+0xa6>
        // r > 1 → angle = π/2 - atan(1/r)
        int32_t recip = (int32_t)(((int64_t)convert(1) << 16) / abs_r); // 16.16
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff f8d6 	bl	80006d8 <convert>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001534:	1415      	asrs	r5, r2, #16
 8001536:	0414      	lsls	r4, r2, #16
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	461a      	mov	r2, r3
 800153c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe febc 	bl	80002c0 <__aeabi_ldivmod>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4613      	mov	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
        angle = PI16 / 2 - fix_atan_lut(recip);
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f7ff ff59 	bl	8001408 <fix_atan_lut>
 8001556:	4603      	mov	r3, r0
 8001558:	f5c3 33c9 	rsb	r3, r3, #102912	; 0x19200
 800155c:	331f      	adds	r3, #31
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e003      	b.n	800156a <fix_atan2+0xae>
    } else {
        angle = fix_atan_lut(abs_r);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff ff50 	bl	8001408 <fix_atan_lut>
 8001568:	6178      	str	r0, [r7, #20]
    }

    if (r < 0) angle = -angle;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	da02      	bge.n	8001576 <fix_atan2+0xba>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	425b      	negs	r3, r3
 8001574:	617b      	str	r3, [r7, #20]

    // Quadrant correction based on signs
    if (x > 0) return angle;                    // Q1, Q4
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd01      	ble.n	8001580 <fix_atan2+0xc4>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	e00b      	b.n	8001598 <fix_atan2+0xdc>
    if (y >= 0) return angle + PI16;            // Q2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db04      	blt.n	8001590 <fix_atan2+0xd4>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f503 3349 	add.w	r3, r3, #205824	; 0x32400
 800158c:	333f      	adds	r3, #63	; 0x3f
 800158e:	e003      	b.n	8001598 <fix_atan2+0xdc>
    return angle - PI16;                        // Q3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f5a3 3349 	sub.w	r3, r3, #205824	; 0x32400
 8001596:	3b3f      	subs	r3, #63	; 0x3f
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a2:	bf00      	nop
 80015a4:	0001921f 	.word	0x0001921f
 80015a8:	fffe6de1 	.word	0xfffe6de1

080015ac <normalizeTheta>:

int32_t HVs[104] = {
0x00000000, 0xFFEACCCD, 0x00000000, 0xFFD8AE14, 0xFFF663D7, 0x00000000, 0x00112666, 0xFFF74A3D, 0xFFF9AE14, 0x00000000, 0x00096B85, 0x0003E8F6, 0x000AAB85, 0xFFFFC7AE, 0x00000000, 0xFFFCF333, 0x000B87AE, 0x000968F6, 0x00086E14, 0xFFFFA666, 0x00000000, 0xFFF2C51F, 0xFFE5199A, 0xFFFE028F, 0xFFFDD1EC, 0xFFFF87AE, 0x0001028F, 0x00000000, 0x0018D47B, 0x0008B0A4, 0x00020CCD, 0x0003B333, 0xFFFB0F5C, 0xFFFFC28F, 0x00002148, 0x00000000, 0xFFF2970A, 0x00059C29, 0x000C6E14, 0x000AB0A4, 0x00017AE1, 0xFFFDF0A4, 0x00010000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

int32_t normalizeTheta(int32_t theta) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    int32_t result;
    if ((theta > -1) && (theta<1)) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db05      	blt.n	80015c6 <normalizeTheta+0x1a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dc02      	bgt.n	80015c6 <normalizeTheta+0x1a>
        result = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e00c      	b.n	80015e0 <normalizeTheta+0x34>
    }
    else {
    	if ((theta < ((180 << 16) + 1)) && (theta > ((179 << 16) + 65535))) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80015cc:	dc06      	bgt.n	80015dc <normalizeTheta+0x30>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80015d4:	db02      	blt.n	80015dc <normalizeTheta+0x30>
            result = (179<<16)+65535;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <normalizeTheta+0x44>)
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e001      	b.n	80015e0 <normalizeTheta+0x34>
        }
        else {
            result = theta;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60fb      	str	r3, [r7, #12]
        }
    }
    return result;
 80015e0:	68fb      	ldr	r3, [r7, #12]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	00b3ffff 	.word	0x00b3ffff

080015f4 <toRad>:

int32_t toRad(int32_t angledeg) {
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
    return DIV(MULT(angledeg,PI),180<<16);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	461c      	mov	r4, r3
 8001602:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	1891      	adds	r1, r2, r2
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	415b      	adcs	r3, r3
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001616:	1912      	adds	r2, r2, r4
 8001618:	eb45 0303 	adc.w	r3, r5, r3
 800161c:	f04f 0000 	mov.w	r0, #0
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	0199      	lsls	r1, r3, #6
 8001626:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800162a:	0190      	lsls	r0, r2, #6
 800162c:	1812      	adds	r2, r2, r0
 800162e:	eb41 0303 	adc.w	r3, r1, r3
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0159      	lsls	r1, r3, #5
 800163c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001640:	0150      	lsls	r0, r2, #5
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	1b12      	subs	r2, r2, r4
 8001648:	eb63 0305 	sbc.w	r3, r3, r5
 800164c:	f04f 0000 	mov.w	r0, #0
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	0159      	lsls	r1, r3, #5
 8001656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800165a:	0150      	lsls	r0, r2, #5
 800165c:	eb12 0800 	adds.w	r8, r2, r0
 8001660:	eb43 0901 	adc.w	r9, r3, r1
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001670:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001674:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001678:	4613      	mov	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001680:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001684:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001688:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	4650      	mov	r0, sl
 8001692:	4659      	mov	r1, fp
 8001694:	f7fe fe14 	bl	80002c0 <__aeabi_ldivmod>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4613      	mov	r3, r2
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080016a8 <magnet>:

void magnet(int32_t r, int32_t theta, int32_t phi, int32_t days, int32_t buffer[3]) {
 80016a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ac:	b0b9      	sub	sp, #228	; 0xe4
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80016b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80016b4:	637a      	str	r2, [r7, #52]	; 0x34
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
 80016b8:	466b      	mov	r3, sp
 80016ba:	60bb      	str	r3, [r7, #8]
	 * Input2: 16.16 latitude in degrees, where 0 is equator, 90 is north pole and -90 is south pole
	 * Input3: 16.16 longitude in degrees, ranging from -180 to 180, where 0 is the prime meridian
	 * Input4: 16.16 decimal days since 2000
	 * Input5: 3-array of int32_t to be changed to Br, Bt and Bp respectively, in Rasmus units
	 */
	printf("Theta input: ");
 80016bc:	4892      	ldr	r0, [pc, #584]	; (8001908 <magnet+0x260>)
 80016be:	f006 f90d 	bl	80078dc <iprintf>
	printFix(theta);
 80016c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016c4:	f7fe ffe8 	bl	8000698 <printFix>
	printf("\r\n");
 80016c8:	4890      	ldr	r0, [pc, #576]	; (800190c <magnet+0x264>)
 80016ca:	f006 f9a3 	bl	8007a14 <puts>

	printf("Phi input: ");
 80016ce:	4890      	ldr	r0, [pc, #576]	; (8001910 <magnet+0x268>)
 80016d0:	f006 f904 	bl	80078dc <iprintf>
	printFix(phi);
 80016d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016d6:	f7fe ffdf 	bl	8000698 <printFix>
	printf("\r\n");
 80016da:	488c      	ldr	r0, [pc, #560]	; (800190c <magnet+0x264>)
 80016dc:	f006 f99a 	bl	8007a14 <puts>

	printf("Normalized theta: ");
 80016e0:	488c      	ldr	r0, [pc, #560]	; (8001914 <magnet+0x26c>)
 80016e2:	f006 f8fb 	bl	80078dc <iprintf>
    theta = normalizeTheta(theta);
 80016e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016e8:	f7ff ff60 	bl	80015ac <normalizeTheta>
 80016ec:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 80016ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016f0:	f7fe ffd2 	bl	8000698 <printFix>
    printf("\r\n");
 80016f4:	4885      	ldr	r0, [pc, #532]	; (800190c <magnet+0x264>)
 80016f6:	f006 f98d 	bl	8007a14 <puts>

    printf("Theta radians: ");
 80016fa:	4887      	ldr	r0, [pc, #540]	; (8001918 <magnet+0x270>)
 80016fc:	f006 f8ee 	bl	80078dc <iprintf>
    theta = toRad(5898240-theta);
 8001700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001702:	f5c3 03b4 	rsb	r3, r3, #5898240	; 0x5a0000
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff74 	bl	80015f4 <toRad>
 800170c:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 800170e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001710:	f7fe ffc2 	bl	8000698 <printFix>
    printf("\r\n");
 8001714:	487d      	ldr	r0, [pc, #500]	; (800190c <magnet+0x264>)
 8001716:	f006 f97d 	bl	8007a14 <puts>

    printf("Phi radians: ");
 800171a:	4880      	ldr	r0, [pc, #512]	; (800191c <magnet+0x274>)
 800171c:	f006 f8de 	bl	80078dc <iprintf>
    phi = toRad(phi);
 8001720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001722:	f7ff ff67 	bl	80015f4 <toRad>
 8001726:	6378      	str	r0, [r7, #52]	; 0x34
    printFix(phi);
 8001728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800172a:	f7fe ffb5 	bl	8000698 <printFix>
    printf("\r\n");
 800172e:	4877      	ldr	r0, [pc, #476]	; (800190c <magnet+0x264>)
 8001730:	f006 f970 	bl	8007a14 <puts>
    int32_t a = 417542963;
 8001734:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <magnet+0x278>)
 8001736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int Nmodel = 13; // hard code
 800173a:	230d      	movs	r3, #13
 800173c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int Nmax = Nmodel * (Nmodel + 3 ) / 2;
 8001740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001744:	3303      	adds	r3, #3
 8001746:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	0fda      	lsrs	r2, r3, #31
 8001750:	4413      	add	r3, r2
 8001752:	105b      	asrs	r3, r3, #1
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    int32_t g[Nmodel][Nmodel+1];
 8001758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800175c:	f103 0c01 	add.w	ip, r3, #1
 8001760:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8001764:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800176c:	4663      	mov	r3, ip
 800176e:	461a      	mov	r2, r3
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	0159      	lsls	r1, r3, #5
 800177e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001782:	0150      	lsls	r0, r2, #5
 8001784:	4663      	mov	r3, ip
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	4633      	mov	r3, r6
 800178c:	3b01      	subs	r3, #1
 800178e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001792:	4663      	mov	r3, ip
 8001794:	4618      	mov	r0, r3
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	4633      	mov	r3, r6
 800179c:	461a      	mov	r2, r3
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	fb02 f501 	mul.w	r5, r2, r1
 80017a6:	fb00 f403 	mul.w	r4, r0, r3
 80017aa:	442c      	add	r4, r5
 80017ac:	fba0 0102 	umull	r0, r1, r0, r2
 80017b0:	1863      	adds	r3, r4, r1
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	014b      	lsls	r3, r1, #5
 80017be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017c2:	0142      	lsls	r2, r0, #5
 80017c4:	4663      	mov	r3, ip
 80017c6:	4618      	mov	r0, r3
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	4633      	mov	r3, r6
 80017ce:	461a      	mov	r2, r3
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	fb02 f501 	mul.w	r5, r2, r1
 80017d8:	fb00 f403 	mul.w	r4, r0, r3
 80017dc:	442c      	add	r4, r5
 80017de:	fba0 0102 	umull	r0, r1, r0, r2
 80017e2:	1863      	adds	r3, r4, r1
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	014b      	lsls	r3, r1, #5
 80017f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017f4:	0142      	lsls	r2, r0, #5
 80017f6:	4662      	mov	r2, ip
 80017f8:	607e      	str	r6, [r7, #4]
 80017fa:	4633      	mov	r3, r6
 80017fc:	fb03 f302 	mul.w	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	3307      	adds	r3, #7
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	ebad 0d03 	sub.w	sp, sp, r3
 800180c:	466b      	mov	r3, sp
 800180e:	3303      	adds	r3, #3
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t h[Nmodel][Nmodel+1];
 8001818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800181c:	1c5e      	adds	r6, r3, #1
 800181e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8001822:	1e73      	subs	r3, r6, #1
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001828:	4633      	mov	r3, r6
 800182a:	461a      	mov	r2, r3
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0159      	lsls	r1, r3, #5
 800183a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183e:	0150      	lsls	r0, r2, #5
 8001840:	4633      	mov	r3, r6
 8001842:	009a      	lsls	r2, r3, #2
 8001844:	60fa      	str	r2, [r7, #12]
 8001846:	4622      	mov	r2, r4
 8001848:	1e53      	subs	r3, r2, #1
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	4633      	mov	r3, r6
 8001850:	4618      	mov	r0, r3
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	613c      	str	r4, [r7, #16]
 8001858:	4623      	mov	r3, r4
 800185a:	461a      	mov	r2, r3
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	fb02 f501 	mul.w	r5, r2, r1
 8001864:	fb00 f403 	mul.w	r4, r0, r3
 8001868:	442c      	add	r4, r5
 800186a:	fba0 0102 	umull	r0, r1, r0, r2
 800186e:	1863      	adds	r3, r4, r1
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	014b      	lsls	r3, r1, #5
 800187c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001880:	0142      	lsls	r2, r0, #5
 8001882:	4633      	mov	r3, r6
 8001884:	4618      	mov	r0, r3
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	461a      	mov	r2, r3
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	fb02 f501 	mul.w	r5, r2, r1
 8001896:	fb00 f403 	mul.w	r4, r0, r3
 800189a:	442c      	add	r4, r5
 800189c:	fba0 0102 	umull	r0, r1, r0, r2
 80018a0:	1863      	adds	r3, r4, r1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	014b      	lsls	r3, r1, #5
 80018ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018b2:	0142      	lsls	r2, r0, #5
 80018b4:	4632      	mov	r2, r6
 80018b6:	693c      	ldr	r4, [r7, #16]
 80018b8:	4623      	mov	r3, r4
 80018ba:	fb03 f302 	mul.w	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3307      	adds	r3, #7
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ca:	466b      	mov	r3, sp
 80018cc:	3303      	adds	r3, #3
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(g, 0, sizeof(g));
 80018d4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80018d8:	4662      	mov	r2, ip
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	fb03 f302 	mul.w	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	461a      	mov	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f005 fff1 	bl	80078cc <memset>
    memset(h, 0, sizeof(h));
 80018ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80018ec:	4632      	mov	r2, r6
 80018ee:	4623      	mov	r3, r4
 80018f0:	fb03 f302 	mul.w	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	461a      	mov	r2, r3
 80018f8:	2100      	movs	r1, #0
 80018fa:	f005 ffe7 	bl	80078cc <memset>


    int i;
    for (i = 0; i < Nmax; i++) { // 0 to 103
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001904:	e0a8      	b.n	8001a58 <magnet+0x3b0>
 8001906:	bf00      	nop
 8001908:	08008d3c 	.word	0x08008d3c
 800190c:	08008d4c 	.word	0x08008d4c
 8001910:	08008d50 	.word	0x08008d50
 8001914:	08008d5c 	.word	0x08008d5c
 8001918:	08008d70 	.word	0x08008d70
 800191c:	08008d80 	.word	0x08008d80
 8001920:	18e33333 	.word	0x18e33333
        g[Ns[i]-1][Ms[i]] = (Gs[i] + MULT(GVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2; // 360 til 16.16
 8001924:	4adc      	ldr	r2, [pc, #880]	; (8001c98 <magnet+0x5f0>)
 8001926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800192a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800192e:	4adb      	ldr	r2, [pc, #876]	; (8001c9c <magnet+0x5f4>)
 8001930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	461c      	mov	r4, r3
 800193a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	461a      	mov	r2, r3
 8001942:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001946:	ea4f 4922 	mov.w	r9, r2, asr #16
 800194a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800194e:	4ad4      	ldr	r2, [pc, #848]	; (8001ca0 <magnet+0x5f8>)
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	4640      	mov	r0, r8
 8001956:	4649      	mov	r1, r9
 8001958:	f7fe fcb2 	bl	80002c0 <__aeabi_ldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001968:	fb02 f005 	mul.w	r0, r2, r5
 800196c:	fb04 f103 	mul.w	r1, r4, r3
 8001970:	4401      	add	r1, r0
 8001972:	fba4 2302 	umull	r2, r3, r4, r2
 8001976:	4419      	add	r1, r3
 8001978:	460b      	mov	r3, r1
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	0c10      	lsrs	r0, r2, #16
 8001984:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001988:	1419      	asrs	r1, r3, #16
 800198a:	4603      	mov	r3, r0
 800198c:	4433      	add	r3, r6
 800198e:	1c99      	adds	r1, r3, #2
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	089d      	lsrs	r5, r3, #2
 8001994:	4ac3      	ldr	r2, [pc, #780]	; (8001ca4 <magnet+0x5fc>)
 8001996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	1e5c      	subs	r4, r3, #1
 80019a0:	4ac1      	ldr	r2, [pc, #772]	; (8001ca8 <magnet+0x600>)
 80019a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019aa:	1089      	asrs	r1, r1, #2
 80019ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80019b0:	fb04 f305 	mul.w	r3, r4, r5
 80019b4:	4403      	add	r3, r0
 80019b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        h[Ns[i]-1][Ms[i]] = (Hs[i] + MULT(HVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2;
 80019ba:	4abc      	ldr	r2, [pc, #752]	; (8001cac <magnet+0x604>)
 80019bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019c0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80019c4:	4aba      	ldr	r2, [pc, #744]	; (8001cb0 <magnet+0x608>)
 80019c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	461c      	mov	r4, r3
 80019d0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	461a      	mov	r2, r3
 80019d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80019e0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80019e4:	4aae      	ldr	r2, [pc, #696]	; (8001ca0 <magnet+0x5f8>)
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	4650      	mov	r0, sl
 80019ec:	4659      	mov	r1, fp
 80019ee:	f7fe fc67 	bl	80002c0 <__aeabi_ldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4613      	mov	r3, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019fe:	fb02 f005 	mul.w	r0, r2, r5
 8001a02:	fb04 f103 	mul.w	r1, r4, r3
 8001a06:	4401      	add	r1, r0
 8001a08:	fba4 2302 	umull	r2, r3, r4, r2
 8001a0c:	4419      	add	r1, r3
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	0c10      	lsrs	r0, r2, #16
 8001a1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a1e:	1419      	asrs	r1, r3, #16
 8001a20:	4603      	mov	r3, r0
 8001a22:	4433      	add	r3, r6
 8001a24:	1c99      	adds	r1, r3, #2
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	089d      	lsrs	r5, r3, #2
 8001a2a:	4a9e      	ldr	r2, [pc, #632]	; (8001ca4 <magnet+0x5fc>)
 8001a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	1e5c      	subs	r4, r3, #1
 8001a36:	4a9c      	ldr	r2, [pc, #624]	; (8001ca8 <magnet+0x600>)
 8001a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a40:	1089      	asrs	r1, r1, #2
 8001a42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a44:	fb04 f305 	mul.w	r3, r4, r5
 8001a48:	4403      	add	r3, r0
 8001a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < Nmax; i++) { // 0 to 103
 8001a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a52:	3301      	adds	r3, #1
 8001a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a58:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f6ff af5f 	blt.w	8001924 <magnet+0x27c>
    }

    int32_t Bt = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int32_t Br = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int32_t Bp = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    int32_t P11 = 1<<16;
 8001a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    int32_t P10 = 1<<16;
 8001a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int32_t dP11 = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t dP10 = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    int32_t K;

    int16_t m;
    int16_t n;

    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a9a:	f000 bc99 	b.w	80023d0 <magnet+0xd28>
        for (n = 1; n <= Nmodel; n++) {
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001aa4:	f000 bc86 	b.w	80023b4 <magnet+0xd0c>
            if ( m <= n ) {
 8001aa8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001aac:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f300 8478 	bgt.w	80023a6 <magnet+0xcfe>
                if (m == n) {
 8001ab6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001aba:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d175      	bne.n	8001bae <magnet+0x506>
                    P2 = MULT(sinrad(theta), P11);
 8001ac2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ac4:	f7ff fb2a 	bl	800111c <sinrad>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ada:	fb02 f501 	mul.w	r5, r2, r1
 8001ade:	fb00 f403 	mul.w	r4, r0, r3
 8001ae2:	442c      	add	r4, r5
 8001ae4:	fba0 2302 	umull	r2, r3, r0, r2
 8001ae8:	18e1      	adds	r1, r4, r3
 8001aea:	460b      	mov	r3, r1
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0c10      	lsrs	r0, r2, #16
 8001af6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001afa:	1419      	asrs	r1, r3, #16
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    dP2 = MULT(sinrad(theta), dP11) + MULT(cosrad(theta), P11);
 8001b02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b04:	f7ff fb0a 	bl	800111c <sinrad>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b14:	461a      	mov	r2, r3
 8001b16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b1a:	fb02 f501 	mul.w	r5, r2, r1
 8001b1e:	fb00 f403 	mul.w	r4, r0, r3
 8001b22:	442c      	add	r4, r5
 8001b24:	fba0 2302 	umull	r2, r3, r0, r2
 8001b28:	18e1      	adds	r1, r4, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0c10      	lsrs	r0, r2, #16
 8001b36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b3a:	1419      	asrs	r1, r3, #16
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b40:	f7ff fb70 	bl	8001224 <cosrad>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b4c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001b50:	4608      	mov	r0, r1
 8001b52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b56:	fb00 f503 	mul.w	r5, r0, r3
 8001b5a:	fb02 f401 	mul.w	r4, r2, r1
 8001b5e:	442c      	add	r4, r5
 8001b60:	fba2 2300 	umull	r2, r3, r2, r0
 8001b64:	18e1      	adds	r1, r4, r3
 8001b66:	460b      	mov	r3, r1
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0c10      	lsrs	r0, r2, #16
 8001b72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b76:	1419      	asrs	r1, r3, #16
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4433      	add	r3, r6
 8001b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    P11 = P2;
 8001b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    P10 = P11;
 8001b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    P20 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    dP11 = dP2;
 8001b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    dP10 = dP11;
 8001b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    dP20 = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001bac:	e1b1      	b.n	8001f12 <magnet+0x86a>
                } else {
                    if (n == 1) {
 8001bae:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d17e      	bne.n	8001cb4 <magnet+0x60c>
                        P2 = MULT(cosrad(theta), P10);
 8001bb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bb8:	f7ff fb34 	bl	8001224 <cosrad>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bc8:	461a      	mov	r2, r3
 8001bca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001bce:	fb02 f501 	mul.w	r5, r2, r1
 8001bd2:	fb00 f403 	mul.w	r4, r0, r3
 8001bd6:	442c      	add	r4, r5
 8001bd8:	fba0 2302 	umull	r2, r3, r0, r2
 8001bdc:	18e1      	adds	r1, r4, r3
 8001bde:	460b      	mov	r3, r1
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0c10      	lsrs	r0, r2, #16
 8001bea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001bee:	1419      	asrs	r1, r3, #16
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10);
 8001bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bf8:	f7ff fb14 	bl	8001224 <cosrad>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c0e:	fb02 f501 	mul.w	r5, r2, r1
 8001c12:	fb00 f403 	mul.w	r4, r0, r3
 8001c16:	442c      	add	r4, r5
 8001c18:	fba0 2302 	umull	r2, r3, r0, r2
 8001c1c:	18e1      	adds	r1, r4, r3
 8001c1e:	460b      	mov	r3, r1
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0c10      	lsrs	r0, r2, #16
 8001c2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c2e:	1419      	asrs	r1, r3, #16
 8001c30:	4606      	mov	r6, r0
 8001c32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c34:	f7ff fa72 	bl	800111c <sinrad>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c40:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001c44:	4608      	mov	r0, r1
 8001c46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c4a:	fb00 f503 	mul.w	r5, r0, r3
 8001c4e:	fb02 f401 	mul.w	r4, r2, r1
 8001c52:	442c      	add	r4, r5
 8001c54:	fba2 2300 	umull	r2, r3, r2, r0
 8001c58:	18e1      	adds	r1, r4, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0c10      	lsrs	r0, r2, #16
 8001c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c6a:	1419      	asrs	r1, r3, #16
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	1af3      	subs	r3, r6, r3
 8001c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c94:	e13d      	b.n	8001f12 <magnet+0x86a>
 8001c96:	bf00      	nop
 8001c98:	20000340 	.word	0x20000340
 8001c9c:	200004e0 	.word	0x200004e0
 8001ca0:	016d0000 	.word	0x016d0000
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	200001a0 	.word	0x200001a0
 8001cac:	20000680 	.word	0x20000680
 8001cb0:	20000820 	.word	0x20000820
                    } else {
                    	int32_t nm1 = convert(n-1);           // 16.16
 8001cb4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fd0c 	bl	80006d8 <convert>
 8001cc0:	67b8      	str	r0, [r7, #120]	; 0x78
                    	int32_t mfix = convert(m);
 8001cc2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fd06 	bl	80006d8 <convert>
 8001ccc:	6778      	str	r0, [r7, #116]	; 0x74
                    	int32_t num  = FIX16_MULT(nm1,nm1) - FIX16_MULT(mfix,mfix);
 8001cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd8:	461a      	mov	r2, r3
 8001cda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cde:	fb02 f501 	mul.w	r5, r2, r1
 8001ce2:	fb00 f403 	mul.w	r4, r0, r3
 8001ce6:	442c      	add	r4, r5
 8001ce8:	fba0 2302 	umull	r2, r3, r0, r2
 8001cec:	18e1      	adds	r1, r4, r3
 8001cee:	460b      	mov	r3, r1
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0c10      	lsrs	r0, r2, #16
 8001cfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cfe:	1419      	asrs	r1, r3, #16
 8001d00:	4606      	mov	r6, r0
 8001d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d04:	461a      	mov	r2, r3
 8001d06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d12:	fb00 f503 	mul.w	r5, r0, r3
 8001d16:	fb02 f401 	mul.w	r4, r2, r1
 8001d1a:	442c      	add	r4, r5
 8001d1c:	fba2 2300 	umull	r2, r3, r2, r0
 8001d20:	18e1      	adds	r1, r4, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0c10      	lsrs	r0, r2, #16
 8001d2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d32:	1419      	asrs	r1, r3, #16
 8001d34:	4603      	mov	r3, r0
 8001d36:	1af3      	subs	r3, r6, r3
 8001d38:	673b      	str	r3, [r7, #112]	; 0x70
                    	int32_t den  = FIX16_MULT(convert(2*n)-convert(1),
 8001d3a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fcc9 	bl	80006d8 <convert>
 8001d46:	4604      	mov	r4, r0
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7fe fcc5 	bl	80006d8 <convert>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	1ae3      	subs	r3, r4, r3
 8001d52:	461c      	mov	r4, r3
 8001d54:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001d58:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fcba 	bl	80006d8 <convert>
 8001d64:	4606      	mov	r6, r0
 8001d66:	2003      	movs	r0, #3
 8001d68:	f7fe fcb6 	bl	80006d8 <convert>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	1af3      	subs	r3, r6, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d76:	fb02 f005 	mul.w	r0, r2, r5
 8001d7a:	fb04 f103 	mul.w	r1, r4, r3
 8001d7e:	4401      	add	r1, r0
 8001d80:	fba4 2302 	umull	r2, r3, r4, r2
 8001d84:	4419      	add	r1, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	0c10      	lsrs	r0, r2, #16
 8001d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d96:	1419      	asrs	r1, r3, #16
 8001d98:	4603      	mov	r3, r0
 8001d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    	                          convert(2*n)-convert(3));
                    	K = FIX16_DIV(num, den);
 8001d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9e:	461a      	mov	r2, r3
 8001da0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001da4:	1411      	asrs	r1, r2, #16
 8001da6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001da8:	0413      	lsls	r3, r2, #16
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dae:	461a      	mov	r2, r3
 8001db0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001db4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001db8:	f7fe fa82 	bl	80002c0 <__aeabi_ldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	66bb      	str	r3, [r7, #104]	; 0x68
                    	P2 = MULT(cosrad(theta), P10) - MULT(K, P20);
 8001dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001dc6:	f7ff fa2d 	bl	8001224 <cosrad>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ddc:	fb02 f501 	mul.w	r5, r2, r1
 8001de0:	fb00 f403 	mul.w	r4, r0, r3
 8001de4:	442c      	add	r4, r5
 8001de6:	fba0 2302 	umull	r2, r3, r0, r2
 8001dea:	18e1      	adds	r1, r4, r3
 8001dec:	460b      	mov	r3, r1
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	0c10      	lsrs	r0, r2, #16
 8001df8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001dfc:	1419      	asrs	r1, r3, #16
 8001dfe:	4606      	mov	r6, r0
 8001e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e02:	461a      	mov	r2, r3
 8001e04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e08:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e12:	fb00 f503 	mul.w	r5, r0, r3
 8001e16:	fb02 f401 	mul.w	r4, r2, r1
 8001e1a:	442c      	add	r4, r5
 8001e1c:	fba2 2300 	umull	r2, r3, r2, r0
 8001e20:	18e1      	adds	r1, r4, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0c10      	lsrs	r0, r2, #16
 8001e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e32:	1419      	asrs	r1, r3, #16
 8001e34:	4603      	mov	r3, r0
 8001e36:	1af3      	subs	r3, r6, r3
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10) - MULT(K, dP20);
 8001e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e3e:	f7ff f9f1 	bl	8001224 <cosrad>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4618      	mov	r0, r3
 8001e46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e54:	fb02 f501 	mul.w	r5, r2, r1
 8001e58:	fb00 f403 	mul.w	r4, r0, r3
 8001e5c:	442c      	add	r4, r5
 8001e5e:	fba0 2302 	umull	r2, r3, r0, r2
 8001e62:	18e1      	adds	r1, r4, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0c10      	lsrs	r0, r2, #16
 8001e70:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e74:	1419      	asrs	r1, r3, #16
 8001e76:	4606      	mov	r6, r0
 8001e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e7a:	f7ff f94f 	bl	800111c <sinrad>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e86:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e90:	fb00 f503 	mul.w	r5, r0, r3
 8001e94:	fb02 f401 	mul.w	r4, r2, r1
 8001e98:	442c      	add	r4, r5
 8001e9a:	fba2 2300 	umull	r2, r3, r2, r0
 8001e9e:	18e1      	adds	r1, r4, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0c10      	lsrs	r0, r2, #16
 8001eac:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001eb0:	1419      	asrs	r1, r3, #16
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	1af6      	subs	r6, r6, r3
 8001eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb8:	461a      	mov	r2, r3
 8001eba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ebe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ec8:	fb00 f503 	mul.w	r5, r0, r3
 8001ecc:	fb02 f401 	mul.w	r4, r2, r1
 8001ed0:	442c      	add	r4, r5
 8001ed2:	fba2 2300 	umull	r2, r3, r2, r0
 8001ed6:	18e1      	adds	r1, r4, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	f04f 0000 	mov.w	r0, #0
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	0c10      	lsrs	r0, r2, #16
 8001ee4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ee8:	1419      	asrs	r1, r3, #16
 8001eea:	4603      	mov	r3, r0
 8001eec:	1af3      	subs	r3, r6, r3
 8001eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    }
                }
                // Precompute repeated terms
                int32_t ar_pow = POW(DIV(a, r), (n + 2)<<16);
 8001f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f16:	461a      	mov	r2, r3
 8001f18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f1c:	1411      	asrs	r1, r2, #16
 8001f1e:	6279      	str	r1, [r7, #36]	; 0x24
 8001f20:	0413      	lsls	r3, r2, #16
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f26:	461a      	mov	r2, r3
 8001f28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f30:	f7fe f9c6 	bl	80002c0 <__aeabi_ldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f46:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	141b      	asrs	r3, r3, #16
 8001f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da5c      	bge.n	8002016 <magnet+0x96e>
 8001f5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f60:	425b      	negs	r3, r3
 8001f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0101 	mov.w	r1, #1
 8001f78:	f7fe f9a2 	bl	80002c0 <__aeabi_ldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f86:	e046      	b.n	8002016 <magnet+0x96e>
 8001f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01d      	beq.n	8001fd0 <magnet+0x928>
 8001f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f98:	4618      	mov	r0, r3
 8001f9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fa8:	fb02 f501 	mul.w	r5, r2, r1
 8001fac:	fb00 f403 	mul.w	r4, r0, r3
 8001fb0:	442c      	add	r4, r5
 8001fb2:	fba0 2302 	umull	r2, r3, r0, r2
 8001fb6:	18e1      	adds	r1, r4, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	0c10      	lsrs	r0, r2, #16
 8001fc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fc8:	1419      	asrs	r1, r3, #16
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fde:	461a      	mov	r2, r3
 8001fe0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fe4:	fb02 f501 	mul.w	r5, r2, r1
 8001fe8:	fb00 f403 	mul.w	r4, r0, r3
 8001fec:	442c      	add	r4, r5
 8001fee:	fba0 2302 	umull	r2, r3, r0, r2
 8001ff2:	18e1      	adds	r1, r4, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	0c10      	lsrs	r0, r2, #16
 8002000:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002004:	1419      	asrs	r1, r3, #16
 8002006:	4603      	mov	r3, r0
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800200c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002010:	105b      	asrs	r3, r3, #1
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1b4      	bne.n	8001f88 <magnet+0x8e0>
 800201e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002022:	667b      	str	r3, [r7, #100]	; 0x64
                int32_t mphi = MULT(m<<16, phi);
 8002024:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4618      	mov	r0, r3
 800202c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	461a      	mov	r2, r3
 8002034:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002038:	fb02 f501 	mul.w	r5, r2, r1
 800203c:	fb00 f403 	mul.w	r4, r0, r3
 8002040:	442c      	add	r4, r5
 8002042:	fba0 2302 	umull	r2, r3, r0, r2
 8002046:	18e1      	adds	r1, r4, r3
 8002048:	460b      	mov	r3, r1
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	0c10      	lsrs	r0, r2, #16
 8002054:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002058:	1419      	asrs	r1, r3, #16
 800205a:	4603      	mov	r3, r0
 800205c:	663b      	str	r3, [r7, #96]	; 0x60
                int32_t cos_mphi = cosrad(mphi);
 800205e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002060:	f7ff f8e0 	bl	8001224 <cosrad>
 8002064:	65f8      	str	r0, [r7, #92]	; 0x5c
                int32_t sin_mphi = sinrad(mphi);
 8002066:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002068:	f7ff f858 	bl	800111c <sinrad>
 800206c:	65b8      	str	r0, [r7, #88]	; 0x58

                int32_t gnm = g[n - 1][m];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	0899      	lsrs	r1, r3, #2
 8002072:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800207c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002080:	fb00 f101 	mul.w	r1, r0, r1
 8002084:	440a      	add	r2, r1
 8002086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208a:	657b      	str	r3, [r7, #84]	; 0x54
                int32_t hnm = h[n - 1][m];
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	0899      	lsrs	r1, r3, #2
 8002090:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8002094:	1e58      	subs	r0, r3, #1
 8002096:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800209a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800209c:	fb00 f101 	mul.w	r1, r0, r1
 80020a0:	440a      	add	r2, r1
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	653b      	str	r3, [r7, #80]	; 0x50

                int32_t gcos = MULT(gnm, cos_mphi);
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	4618      	mov	r0, r3
 80020ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b2:	461a      	mov	r2, r3
 80020b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020b8:	fb02 f501 	mul.w	r5, r2, r1
 80020bc:	fb00 f403 	mul.w	r4, r0, r3
 80020c0:	442c      	add	r4, r5
 80020c2:	fba0 2302 	umull	r2, r3, r0, r2
 80020c6:	18e1      	adds	r1, r4, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	0c10      	lsrs	r0, r2, #16
 80020d4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020d8:	1419      	asrs	r1, r3, #16
 80020da:	4603      	mov	r3, r0
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                int32_t hsin = MULT(hnm, sin_mphi);
 80020de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e0:	4618      	mov	r0, r3
 80020e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e8:	461a      	mov	r2, r3
 80020ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020ee:	fb02 f501 	mul.w	r5, r2, r1
 80020f2:	fb00 f403 	mul.w	r4, r0, r3
 80020f6:	442c      	add	r4, r5
 80020f8:	fba0 2302 	umull	r2, r3, r0, r2
 80020fc:	18e1      	adds	r1, r4, r3
 80020fe:	460b      	mov	r3, r1
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0c10      	lsrs	r0, r2, #16
 800210a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800210e:	1419      	asrs	r1, r3, #16
 8002110:	4603      	mov	r3, r0
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
                int32_t gsin = MULT(gnm, sin_mphi);
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	4618      	mov	r0, r3
 8002118:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800211c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800211e:	461a      	mov	r2, r3
 8002120:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002124:	fb02 f501 	mul.w	r5, r2, r1
 8002128:	fb00 f403 	mul.w	r4, r0, r3
 800212c:	442c      	add	r4, r5
 800212e:	fba0 2302 	umull	r2, r3, r0, r2
 8002132:	18e1      	adds	r1, r4, r3
 8002134:	460b      	mov	r3, r1
 8002136:	f04f 0000 	mov.w	r0, #0
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	0c10      	lsrs	r0, r2, #16
 8002140:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002144:	1419      	asrs	r1, r3, #16
 8002146:	4603      	mov	r3, r0
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
                int32_t hcos = MULT(hnm, cos_mphi);
 800214a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214c:	4618      	mov	r0, r3
 800214e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002154:	461a      	mov	r2, r3
 8002156:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800215a:	fb02 f501 	mul.w	r5, r2, r1
 800215e:	fb00 f403 	mul.w	r4, r0, r3
 8002162:	442c      	add	r4, r5
 8002164:	fba0 2302 	umull	r2, r3, r0, r2
 8002168:	18e1      	adds	r1, r4, r3
 800216a:	460b      	mov	r3, r1
 800216c:	f04f 0000 	mov.w	r0, #0
 8002170:	f04f 0100 	mov.w	r1, #0
 8002174:	0c10      	lsrs	r0, r2, #16
 8002176:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800217a:	1419      	asrs	r1, r3, #16
 800217c:	4603      	mov	r3, r0
 800217e:	643b      	str	r3, [r7, #64]	; 0x40

                // Magnetic field component updates
                Br = Br + MULT(MULT(ar_pow, (n + 1)<<16), MULT((gcos + hsin), P2));
 8002180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002182:	4618      	mov	r0, r3
 8002184:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002188:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800218c:	3301      	adds	r3, #1
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	461a      	mov	r2, r3
 8002192:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002196:	fb02 f501 	mul.w	r5, r2, r1
 800219a:	fb00 f403 	mul.w	r4, r0, r3
 800219e:	442c      	add	r4, r5
 80021a0:	fba0 2302 	umull	r2, r3, r0, r2
 80021a4:	18e1      	adds	r1, r4, r3
 80021a6:	460b      	mov	r3, r1
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	0c10      	lsrs	r0, r2, #16
 80021b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80021b6:	1419      	asrs	r1, r3, #16
 80021b8:	4603      	mov	r3, r0
 80021ba:	4698      	mov	r8, r3
 80021bc:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80021c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c4:	4413      	add	r3, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80021cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d0:	461a      	mov	r2, r3
 80021d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021d6:	fb02 f501 	mul.w	r5, r2, r1
 80021da:	fb00 f403 	mul.w	r4, r0, r3
 80021de:	442c      	add	r4, r5
 80021e0:	fba0 0102 	umull	r0, r1, r0, r2
 80021e4:	1863      	adds	r3, r4, r1
 80021e6:	4619      	mov	r1, r3
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	0c02      	lsrs	r2, r0, #16
 80021f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021f6:	140b      	asrs	r3, r1, #16
 80021f8:	4613      	mov	r3, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002200:	fb02 f009 	mul.w	r0, r2, r9
 8002204:	fb08 f103 	mul.w	r1, r8, r3
 8002208:	4401      	add	r1, r0
 800220a:	fba8 2302 	umull	r2, r3, r8, r2
 800220e:	4419      	add	r1, r3
 8002210:	460b      	mov	r3, r1
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	0c10      	lsrs	r0, r2, #16
 800221c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002220:	1419      	asrs	r1, r3, #16
 8002222:	4602      	mov	r2, r0
 8002224:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002228:	4413      	add	r3, r2
 800222a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                Bt = Bt + MULT(MULT(ar_pow, 1<<16), MULT((gcos + hsin), dP2));
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002230:	4618      	mov	r0, r3
 8002232:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	040b      	lsls	r3, r1, #16
 8002240:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002244:	0402      	lsls	r2, r0, #16
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0c10      	lsrs	r0, r2, #16
 8002250:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002254:	1419      	asrs	r1, r3, #16
 8002256:	4603      	mov	r3, r0
 8002258:	4698      	mov	r8, r3
 800225a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800225e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002262:	4413      	add	r3, r2
 8002264:	4618      	mov	r0, r3
 8002266:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800226a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800226e:	461a      	mov	r2, r3
 8002270:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002274:	fb02 f501 	mul.w	r5, r2, r1
 8002278:	fb00 f403 	mul.w	r4, r0, r3
 800227c:	442c      	add	r4, r5
 800227e:	fba0 0102 	umull	r0, r1, r0, r2
 8002282:	1863      	adds	r3, r4, r1
 8002284:	4619      	mov	r1, r3
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	0c02      	lsrs	r2, r0, #16
 8002290:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002294:	140b      	asrs	r3, r1, #16
 8002296:	4613      	mov	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800229e:	fb02 f009 	mul.w	r0, r2, r9
 80022a2:	fb08 f103 	mul.w	r1, r8, r3
 80022a6:	4401      	add	r1, r0
 80022a8:	fba8 2302 	umull	r2, r3, r8, r2
 80022ac:	4419      	add	r1, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	0c10      	lsrs	r0, r2, #16
 80022ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80022be:	1419      	asrs	r1, r3, #16
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022c6:	4413      	add	r3, r2
 80022c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                Bp = Bp + MULT(MULT(ar_pow, 1<<16), MULT(MULT(convert(m), (-gsin + hcos)), P2));
 80022cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ce:	4618      	mov	r0, r3
 80022d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	040b      	lsls	r3, r1, #16
 80022de:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80022e2:	0402      	lsls	r2, r0, #16
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0c10      	lsrs	r0, r2, #16
 80022ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80022f2:	1419      	asrs	r1, r3, #16
 80022f4:	4603      	mov	r3, r0
 80022f6:	4698      	mov	r8, r3
 80022f8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80022fc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f9e9 	bl	80006d8 <convert>
 8002306:	4603      	mov	r3, r0
 8002308:	4618      	mov	r0, r3
 800230a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800230e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	461a      	mov	r2, r3
 8002316:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800231a:	fb02 f501 	mul.w	r5, r2, r1
 800231e:	fb00 f403 	mul.w	r4, r0, r3
 8002322:	442c      	add	r4, r5
 8002324:	fba0 0102 	umull	r0, r1, r0, r2
 8002328:	1863      	adds	r3, r4, r1
 800232a:	4619      	mov	r1, r3
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	0c02      	lsrs	r2, r0, #16
 8002336:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800233a:	140b      	asrs	r3, r1, #16
 800233c:	4613      	mov	r3, r2
 800233e:	4618      	mov	r0, r3
 8002340:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002348:	461a      	mov	r2, r3
 800234a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800234e:	fb02 f501 	mul.w	r5, r2, r1
 8002352:	fb00 f403 	mul.w	r4, r0, r3
 8002356:	442c      	add	r4, r5
 8002358:	fba0 0102 	umull	r0, r1, r0, r2
 800235c:	1863      	adds	r3, r4, r1
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	0c02      	lsrs	r2, r0, #16
 800236a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800236e:	140b      	asrs	r3, r1, #16
 8002370:	4613      	mov	r3, r2
 8002372:	461a      	mov	r2, r3
 8002374:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002378:	fb02 f009 	mul.w	r0, r2, r9
 800237c:	fb08 f103 	mul.w	r1, r8, r3
 8002380:	4401      	add	r1, r0
 8002382:	fba8 2302 	umull	r2, r3, r8, r2
 8002386:	4419      	add	r1, r3
 8002388:	460b      	mov	r3, r1
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	0c10      	lsrs	r0, r2, #16
 8002394:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002398:	1419      	asrs	r1, r3, #16
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023a0:	4413      	add	r3, r2
 80023a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        for (n = 1; n <= Nmodel; n++) {
 80023a6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80023b4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80023b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023bc:	429a      	cmp	r2, r3
 80023be:	f6bf ab73 	bge.w	8001aa8 <magnet+0x400>
    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 80023c2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80023d0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80023d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023d8:	429a      	cmp	r2, r3
 80023da:	f6bf ab60 	bge.w	8001a9e <magnet+0x3f6>
            }
        }
    }
    Bt = -Bt;
 80023de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023e2:	425b      	negs	r3, r3
 80023e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    Bp = -DIV(Bp, sinrad(theta));
 80023e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023ec:	461a      	mov	r2, r3
 80023ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80023f2:	1411      	asrs	r1, r2, #16
 80023f4:	61f9      	str	r1, [r7, #28]
 80023f6:	0413      	lsls	r3, r2, #16
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023fc:	f7fe fe8e 	bl	800111c <sinrad>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002408:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800240c:	f7fd ff58 	bl	80002c0 <__aeabi_ldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4613      	mov	r3, r2
 8002416:	425b      	negs	r3, r3
 8002418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    buffer[0] = Bt;
 800241c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002420:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002424:	601a      	str	r2, [r3, #0]
    buffer[1] = Bp;
 8002426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800242a:	3304      	adds	r3, #4
 800242c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002430:	601a      	str	r2, [r3, #0]
    buffer[2] = Br;
 8002432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002436:	3308      	adds	r3, #8
 8002438:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8002442:	bf00      	nop
 8002444:	37e4      	adds	r7, #228	; 0xe4
 8002446:	46bd      	mov	sp, r7
 8002448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800244c <main>:




int main(void)
{
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244e:	b0d1      	sub	sp, #324	; 0x144
 8002450:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002452:	f001 fd1e 	bl	8003e92 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002456:	f000 f9dd 	bl	8002814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800245a:	f000 faf3 	bl	8002a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800245e:	f000 faa5 	bl	80029ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002462:	f000 fa57 	bl	8002914 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002466:	f000 fa15 	bl	8002894 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 800246a:	4821      	ldr	r0, [pc, #132]	; (80024f0 <main+0xa4>)
 800246c:	f7fe fa9c 	bl	80009a8 <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 8002470:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  HAL_Delay(5);
 800247e:	2005      	movs	r0, #5
 8002480:	f001 fd78 	bl	8003f74 <HAL_Delay>
  //HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
  LCD_Init();
 8002484:	f7fe fa33 	bl	80008ee <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 8002488:	4819      	ldr	r0, [pc, #100]	; (80024f0 <main+0xa4>)
 800248a:	f7fe f93f 	bl	800070c <I2C_Scan>

int32_t r = REarth16km + Rational(2,10); // Earth's radius in fixed point 16.16 format
 800248e:	210a      	movs	r1, #10
 8002490:	2002      	movs	r0, #2
 8002492:	f7fe f8e1 	bl	8000658 <Rational>
 8002496:	4602      	mov	r2, r0
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <main+0xa8>)
 800249a:	4413      	add	r3, r2
 800249c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
printf("r : ");
 80024a0:	4815      	ldr	r0, [pc, #84]	; (80024f8 <main+0xac>)
 80024a2:	f005 fa1b 	bl	80078dc <iprintf>
printFix(r);
 80024a6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80024aa:	f7fe f8f5 	bl	8000698 <printFix>
printf("\r\n");
 80024ae:	4813      	ldr	r0, [pc, #76]	; (80024fc <main+0xb0>)
 80024b0:	f005 fab0 	bl	8007a14 <puts>
int32_t phi = convert(56);
 80024b4:	2038      	movs	r0, #56	; 0x38
 80024b6:	f7fe f90f 	bl	80006d8 <convert>
 80024ba:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
int32_t theta = convert(12);
 80024be:	200c      	movs	r0, #12
 80024c0:	f7fe f90a 	bl	80006d8 <convert>
 80024c4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
int32_t days = 24510000;
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <main+0xb4>)
 80024ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
int32_t vector[3];
magnet(r, theta, phi, days, vector);
 80024ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024d8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024dc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80024e0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80024e4:	f7ff f8e0 	bl	80016a8 <magnet>
int i;
for (i=0; i<3; i++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80024ee:	e021      	b.n	8002534 <main+0xe8>
 80024f0:	20000aec 	.word	0x20000aec
 80024f4:	18e33333 	.word	0x18e33333
 80024f8:	08008d90 	.word	0x08008d90
 80024fc:	08008d98 	.word	0x08008d98
 8002500:	0175fe30 	.word	0x0175fe30
	printf("Res %i: ", i);
 8002504:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002508:	48b2      	ldr	r0, [pc, #712]	; (80027d4 <main+0x388>)
 800250a:	f005 f9e7 	bl	80078dc <iprintf>
	printFix(vector[i]);
 800250e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002518:	4413      	add	r3, r2
 800251a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f8ba 	bl	8000698 <printFix>
	printf("\r\n");
 8002524:	48ac      	ldr	r0, [pc, #688]	; (80027d8 <main+0x38c>)
 8002526:	f005 fa75 	bl	8007a14 <puts>
for (i=0; i<3; i++) {
 800252a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800252e:	3301      	adds	r3, #1
 8002530:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002534:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002538:	2b02      	cmp	r3, #2
 800253a:	dde3      	ble.n	8002504 <main+0xb8>
	    			-(convert(3)>>5),    // East
					-(convert(166)>>5)}; //down
*/

//rigtig igrf fra NOAA, gør at lortet virker, 1/4 nT er enheden
Vector3D M2 = {     (17056<<14),  // North
 800253c:	4aa7      	ldr	r2, [pc, #668]	; (80027dc <main+0x390>)
 800253e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002542:	ca07      	ldmia	r2, {r0, r1, r2}
 8002544:	e883 0007 	stmia.w	r3, {r0, r1, r2}
/*
Vector3D M2 = {     (vector[0]>>8),  // North
					(vector[1]>>8),    // East
  					-(vector[2]>>8)}; //down
*/
Vector3D g2 = { 0, 0, 17000};
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002554:	f244 2368 	movw	r3, #17000	; 0x4268
 8002558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

//her kan man rotere en matrix, dvs input forskel fra geografisk nord
//M2 = rotateZ14(&M2, convert(90));
//g2 = rotateZ14(&g2, convert(90));

	LCD_SetCursor(0, 0);
 800255c:	2100      	movs	r1, #0
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe f9a9 	bl	80008b6 <LCD_SetCursor>
    LCD_SendString("Roll");
 8002564:	489e      	ldr	r0, [pc, #632]	; (80027e0 <main+0x394>)
 8002566:	f7fe f991 	bl	800088c <LCD_SendString>
    LCD_SetCursor(0, 6);
 800256a:	2106      	movs	r1, #6
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe f9a2 	bl	80008b6 <LCD_SetCursor>
    LCD_SendString("Pitch");
 8002572:	489c      	ldr	r0, [pc, #624]	; (80027e4 <main+0x398>)
 8002574:	f7fe f98a 	bl	800088c <LCD_SendString>
    LCD_SetCursor(0, 12);
 8002578:	210c      	movs	r1, #12
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe f99b 	bl	80008b6 <LCD_SetCursor>
    LCD_SendString("Yaw");
 8002580:	4899      	ldr	r0, [pc, #612]	; (80027e8 <main+0x39c>)
 8002582:	f7fe f983 	bl	800088c <LCD_SendString>

i = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
Vector3D degrot;
Matrix3x3 rot;
Matrix3x3 Rnb;
Vector3D acc_avg = {0, 0, convert(1)};
 800258c:	2300      	movs	r3, #0
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
 8002590:	2300      	movs	r3, #0
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
 8002594:	2001      	movs	r0, #1
 8002596:	f7fe f89f 	bl	80006d8 <convert>
 800259a:	4603      	mov	r3, r0
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
Vector3D mag_avg = {convert(1), 0, 0};
 800259e:	2001      	movs	r0, #1
 80025a0:	f7fe f89a 	bl	80006d8 <convert>
 80025a4:	4603      	mov	r3, r0
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ac:	2300      	movs	r3, #0
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
Vector3D accdata = {0,0,0};
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b4:	2300      	movs	r3, #0
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34

//til at teste om sinus lut virker
printFix(sinrad(205887>>1));
 80025bc:	488b      	ldr	r0, [pc, #556]	; (80027ec <main+0x3a0>)
 80025be:	f7fe fdad 	bl	800111c <sinrad>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe f867 	bl	8000698 <printFix>

  while (1)
  {
	  accdata = lsmAccRead(&hi2c3);
 80025ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ce:	4988      	ldr	r1, [pc, #544]	; (80027f0 <main+0x3a4>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fa40 	bl	8000a56 <lsmAccRead>

	  //printf("\n acc: %ld, %ld, %ld \n",accdata.x,accdata.y, accdata.z);
	  //printf("mag: %ld, %ld, %ld \n",magdata.x,magdata.y, magdata.z);


	  readSensorsAndAverage(&acc_avg, &mag_avg, hi2c3);
 80025d6:	4c86      	ldr	r4, [pc, #536]	; (80027f0 <main+0x3a4>)
 80025d8:	f107 0638 	add.w	r6, r7, #56	; 0x38
 80025dc:	f107 0544 	add.w	r5, r7, #68	; 0x44
 80025e0:	4668      	mov	r0, sp
 80025e2:	f104 0308 	add.w	r3, r4, #8
 80025e6:	224c      	movs	r2, #76	; 0x4c
 80025e8:	4619      	mov	r1, r3
 80025ea:	f005 f961 	bl	80078b0 <memcpy>
 80025ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80025f2:	4631      	mov	r1, r6
 80025f4:	4628      	mov	r0, r5
 80025f6:	f7fe fabb 	bl	8000b70 <readSensorsAndAverage>
	  triad(mag_avg,acc_avg,M2,g2, &rot);
 80025fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025fe:	9308      	str	r3, [sp, #32]
 8002600:	ac05      	add	r4, sp, #20
 8002602:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800260a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800260e:	ac02      	add	r4, sp, #8
 8002610:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800261c:	466a      	mov	r2, sp
 800261e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002622:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002626:	e882 0003 	stmia.w	r2, {r0, r1}
 800262a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002630:	ca07      	ldmia	r2, {r0, r1, r2}
 8002632:	f000 fc81 	bl	8002f38 <triad>
	  Rnb = transpose(rot);
 8002636:	463e      	mov	r6, r7
 8002638:	466d      	mov	r5, sp
 800263a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800263e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002646:	e885 0003 	stmia.w	r5, {r0, r1}
 800264a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800264e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002650:	4630      	mov	r0, r6
 8002652:	f001 f989 	bl	8003968 <transpose>
 8002656:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800265a:	463d      	mov	r5, r7
 800265c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	6023      	str	r3, [r4, #0]
	  rot2eulerZYX(&Rnb,&degrot);
 8002668:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800266c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fef2 	bl	800345c <rot2eulerZYX>
	  //printf("%ld,%ld,%ld\n", acc_avg.x, acc_avg.y, acc_avg.z);

	  //HAL_Delay(5);

	  //////////////////////////////////LCD deg print//////////////////
	  LCD_SetCursor(1, 0);
 8002678:	2100      	movs	r1, #0
 800267a:	2001      	movs	r0, #1
 800267c:	f7fe f91b 	bl	80008b6 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.x));
 8002680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe f833 	bl	80006f0 <inconvert>
 800268a:	4603      	mov	r3, r0
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe f977 	bl	8000980 <LCD_PrintAngle>
	  HAL_Delay(5); //vigtigt der skal være delay ellers virker det ikke at rykke cursor
 8002692:	2005      	movs	r0, #5
 8002694:	f001 fc6e 	bl	8003f74 <HAL_Delay>

	  LCD_SetCursor(1, 6);
 8002698:	2106      	movs	r1, #6
 800269a:	2001      	movs	r0, #1
 800269c:	f7fe f90b 	bl	80008b6 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.y));
 80026a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe f823 	bl	80006f0 <inconvert>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe f967 	bl	8000980 <LCD_PrintAngle>
	  HAL_Delay(5);
 80026b2:	2005      	movs	r0, #5
 80026b4:	f001 fc5e 	bl	8003f74 <HAL_Delay>

	  LCD_SetCursor(1, 12);
 80026b8:	210c      	movs	r1, #12
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7fe f8fb 	bl	80008b6 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.z));
 80026c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe f813 	bl	80006f0 <inconvert>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe f957 	bl	8000980 <LCD_PrintAngle>
	  HAL_Delay(5);
 80026d2:	2005      	movs	r0, #5
 80026d4:	f001 fc4e 	bl	8003f74 <HAL_Delay>
	  //////////////////////////////////LCD deg print end//////////////
	  static int32_t max_x = INT32_MIN, max_y = INT32_MIN, max_z = INT32_MIN;
	  static int32_t min_x = INT32_MAX, min_y = INT32_MAX, min_z = INT32_MAX;

	  /* bit1 = new-max, bit0 = new-min  -> 00 / 01 / 10 / 11 */
	  uint8_t fx = 0, fy = 0, fz = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9

	  if (mag_avg.x > max_x) { max_x = mag_avg.x; fx |= 0b10; }
 80026ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <main+0x3a8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dd08      	ble.n	8002706 <main+0x2ba>
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <main+0x3a8>)
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  if (mag_avg.x < min_x) { min_x = mag_avg.x; fx |= 0b01; }
 8002706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <main+0x3ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	da08      	bge.n	8002722 <main+0x2d6>
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	4a39      	ldr	r2, [pc, #228]	; (80027f8 <main+0x3ac>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

	  if (mag_avg.y > max_y) { max_y = mag_avg.y; fy |= 0b10; }
 8002722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <main+0x3b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	dd08      	ble.n	800273e <main+0x2f2>
 800272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272e:	4a33      	ldr	r2, [pc, #204]	; (80027fc <main+0x3b0>)
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
	  if (mag_avg.y < min_y) { min_y = mag_avg.y; fy |= 0b01; }
 800273e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <main+0x3b4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	da08      	bge.n	800275a <main+0x30e>
 8002748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <main+0x3b4>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea

	  if (mag_avg.z > max_z) { max_z = mag_avg.z; fz |= 0b10; }
 800275a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <main+0x3b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	dd08      	ble.n	8002776 <main+0x32a>
 8002764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002766:	4a27      	ldr	r2, [pc, #156]	; (8002804 <main+0x3b8>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
	  if (mag_avg.z < min_z) { min_z = mag_avg.z; fz |= 0b01; }
 8002776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <main+0x3bc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	da08      	bge.n	8002792 <main+0x346>
 8002780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <main+0x3bc>)
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
	  /* printable strings for each 2-bit flag value */
	  static const char* const flag_txt[4] = {"00","01","10","11"};

	  /* -------------- CSV log line ----------------------------------------- */
	  printf("%ld,%ld,%ld,%s,%s,%s\r\n",
	         (long)mag_avg.x, (long)mag_avg.y, (long)mag_avg.z,
 8002792:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002794:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002796:	6c3d      	ldr	r5, [r7, #64]	; 0x40
	  printf("%ld,%ld,%ld,%s,%s,%s\r\n",
 8002798:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <main+0x3c0>)
 800279e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a2:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 80027a6:	4919      	ldr	r1, [pc, #100]	; (800280c <main+0x3c0>)
 80027a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027ac:	f897 10e9 	ldrb.w	r1, [r7, #233]	; 0xe9
 80027b0:	4e16      	ldr	r6, [pc, #88]	; (800280c <main+0x3c0>)
 80027b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80027b6:	9102      	str	r1, [sp, #8]
 80027b8:	9201      	str	r2, [sp, #4]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	462b      	mov	r3, r5
 80027be:	4622      	mov	r2, r4
 80027c0:	4601      	mov	r1, r0
 80027c2:	4813      	ldr	r0, [pc, #76]	; (8002810 <main+0x3c4>)
 80027c4:	f005 f88a 	bl	80078dc <iprintf>
	         flag_txt[fx], flag_txt[fy], flag_txt[fz]);

	  //process_uart_data(&uart_rx_buf, &GPS);
	  //HAL_Delay(5);
	  i++;
 80027c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027cc:	3301      	adds	r3, #1
 80027ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  {
 80027d2:	e6fa      	b.n	80025ca <main+0x17e>
 80027d4:	08008d9c 	.word	0x08008d9c
 80027d8:	08008d98 	.word	0x08008d98
 80027dc:	08008dd4 	.word	0x08008dd4
 80027e0:	08008da8 	.word	0x08008da8
 80027e4:	08008db0 	.word	0x08008db0
 80027e8:	08008db8 	.word	0x08008db8
 80027ec:	0001921f 	.word	0x0001921f
 80027f0:	20000aec 	.word	0x20000aec
 80027f4:	200009c0 	.word	0x200009c0
 80027f8:	200009c4 	.word	0x200009c4
 80027fc:	200009c8 	.word	0x200009c8
 8002800:	200009cc 	.word	0x200009cc
 8002804:	200009d0 	.word	0x200009d0
 8002808:	200009d4 	.word	0x200009d4
 800280c:	0800b5f0 	.word	0x0800b5f0
 8002810:	08008dbc 	.word	0x08008dbc

08002814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b094      	sub	sp, #80	; 0x50
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	f107 0318 	add.w	r3, r7, #24
 800281e:	2238      	movs	r2, #56	; 0x38
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f005 f852 	bl	80078cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002836:	f44f 7000 	mov.w	r0, #512	; 0x200
 800283a:	f002 fdfb 	bl	8005434 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002848:	2340      	movs	r3, #64	; 0x40
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002850:	f107 0318 	add.w	r3, r7, #24
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fea1 	bl	800559c <HAL_RCC_OscConfig>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002860:	f000 f95a 	bl	8002b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002864:	230f      	movs	r3, #15
 8002866:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002868:	2301      	movs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f003 f9a1 	bl	8005bc4 <HAL_RCC_ClockConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002888:	f000 f946 	bl	8002b18 <Error_Handler>
  }
}
 800288c:	bf00      	nop
 800288e:	3750      	adds	r7, #80	; 0x50
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_I2C3_Init+0x74>)
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <MX_I2C3_Init+0x78>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_I2C3_Init+0x74>)
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <MX_I2C3_Init+0x7c>)
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_I2C3_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_I2C3_Init+0x74>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_I2C3_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_I2C3_Init+0x74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_I2C3_Init+0x74>)
 80028be:	2200      	movs	r2, #0
 80028c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_I2C3_Init+0x74>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_I2C3_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <MX_I2C3_Init+0x74>)
 80028d0:	f001 fedc 	bl	800468c <HAL_I2C_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80028da:	f000 f91d 	bl	8002b18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028de:	2100      	movs	r1, #0
 80028e0:	4809      	ldr	r0, [pc, #36]	; (8002908 <MX_I2C3_Init+0x74>)
 80028e2:	f002 fd0f 	bl	8005304 <HAL_I2CEx_ConfigAnalogFilter>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80028ec:	f000 f914 	bl	8002b18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028f0:	2100      	movs	r1, #0
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_I2C3_Init+0x74>)
 80028f4:	f002 fd51 	bl	800539a <HAL_I2CEx_ConfigDigitalFilter>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f000 f90b 	bl	8002b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000aec 	.word	0x20000aec
 800290c:	40007800 	.word	0x40007800
 8002910:	0010061a 	.word	0x0010061a

08002914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800291c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002920:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800295c:	4811      	ldr	r0, [pc, #68]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 800295e:	f003 fd3d 	bl	80063dc <HAL_UART_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002968:	f000 f8d6 	bl	8002b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296c:	2100      	movs	r1, #0
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002970:	f004 fea9 	bl	80076c6 <HAL_UARTEx_SetTxFifoThreshold>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800297a:	f000 f8cd 	bl	8002b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297e:	2100      	movs	r1, #0
 8002980:	4808      	ldr	r0, [pc, #32]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002982:	f004 fede 	bl	8007742 <HAL_UARTEx_SetRxFifoThreshold>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800298c:	f000 f8c4 	bl	8002b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <MX_USART1_UART_Init+0x90>)
 8002992:	f004 fe5f 	bl	8007654 <HAL_UARTEx_DisableFifoMode>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800299c:	f000 f8bc 	bl	8002b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000b44 	.word	0x20000b44
 80029a8:	40013800 	.word	0x40013800

080029ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029b2:	4a23      	ldr	r2, [pc, #140]	; (8002a40 <MX_USART2_UART_Init+0x94>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029f4:	4811      	ldr	r0, [pc, #68]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 80029f6:	f003 fcf1 	bl	80063dc <HAL_UART_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a00:	f000 f88a 	bl	8002b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a04:	2100      	movs	r1, #0
 8002a06:	480d      	ldr	r0, [pc, #52]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 8002a08:	f004 fe5d 	bl	80076c6 <HAL_UARTEx_SetTxFifoThreshold>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a12:	f000 f881 	bl	8002b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a16:	2100      	movs	r1, #0
 8002a18:	4808      	ldr	r0, [pc, #32]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 8002a1a:	f004 fe92 	bl	8007742 <HAL_UARTEx_SetRxFifoThreshold>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a24:	f000 f878 	bl	8002b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <MX_USART2_UART_Init+0x90>)
 8002a2a:	f004 fe13 	bl	8007654 <HAL_UARTEx_DisableFifoMode>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a34:	f000 f870 	bl	8002b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000bd8 	.word	0x20000bd8
 8002a40:	40004400 	.word	0x40004400

08002a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <MX_GPIO_Init+0xa0>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <MX_GPIO_Init+0xa0>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a66:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <MX_GPIO_Init+0xa0>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <MX_GPIO_Init+0xa0>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <MX_GPIO_Init+0xa0>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <MX_GPIO_Init+0xa0>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2173      	movs	r1, #115	; 0x73
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a92:	f001 fde3 	bl	800465c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2108      	movs	r1, #8
 8002a9a:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <MX_GPIO_Init+0xa4>)
 8002a9c:	f001 fdde 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002aa0:	2373      	movs	r3, #115	; 0x73
 8002aa2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aba:	f001 fc4d 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <MX_GPIO_Init+0xa4>)
 8002ad6:	f001 fc3f 	bl	8004358 <HAL_GPIO_Init>

}
 8002ada:	bf00      	nop
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	48000400 	.word	0x48000400

08002aec <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4804      	ldr	r0, [pc, #16]	; (8002b14 <_write+0x28>)
 8002b04:	f003 fcba 	bl	800647c <HAL_UART_Transmit>
    return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000bd8 	.word	0x20000bd8

08002b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b1c:	b672      	cpsid	i
}
 8002b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <Error_Handler+0x8>
	...

08002b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_MspInit+0x44>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <HAL_MspInit+0x44>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6613      	str	r3, [r2, #96]	; 0x60
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_MspInit+0x44>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_MspInit+0x44>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_MspInit+0x44>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_MspInit+0x44>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b5a:	f002 fd0f 	bl	800557c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b09c      	sub	sp, #112	; 0x70
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b84:	f107 0318 	add.w	r3, r7, #24
 8002b88:	2244      	movs	r2, #68	; 0x44
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fe9d 	bl	80078cc <memset>
  if(hi2c->Instance==I2C3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_I2C_MspInit+0xe4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d154      	bne.n	8002c46 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba6:	f107 0318 	add.w	r3, r7, #24
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fa26 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002bb6:	f7ff ffaf 	bl	8002b18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf0:	2312      	movs	r3, #18
 8002bf2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c04:	4619      	mov	r1, r3
 8002c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0a:	f001 fba5 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c12:	2312      	movs	r3, #18
 8002c14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002c1e:	2308      	movs	r3, #8
 8002c20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c26:	4619      	mov	r1, r3
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <HAL_I2C_MspInit+0xec>)
 8002c2a:	f001 fb95 	bl	8004358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_I2C_MspInit+0xe8>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c46:	bf00      	nop
 8002c48:	3770      	adds	r7, #112	; 0x70
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40007800 	.word	0x40007800
 8002c54:	40021000 	.word	0x40021000
 8002c58:	48000400 	.word	0x48000400

08002c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b09c      	sub	sp, #112	; 0x70
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	2244      	movs	r2, #68	; 0x44
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fe25 	bl	80078cc <memset>
  if(huart->Instance==USART1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_UART_MspInit+0x134>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d140      	bne.n	8002d0e <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c94:	f107 0318 	add.w	r3, r7, #24
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 f9af 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ca4:	f7ff ff38 	bl	8002b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca8:	4b3a      	ldr	r3, [pc, #232]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	4a39      	ldr	r2, [pc, #228]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb2:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb4:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ccc:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cea:	2307      	movs	r3, #7
 8002cec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf8:	f001 fb2e 	bl	8004358 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2025      	movs	r0, #37	; 0x25
 8002d02:	f001 fa34 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d06:	2025      	movs	r0, #37	; 0x25
 8002d08:	f001 fa4b 	bl	80041a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d0c:	e03b      	b.n	8002d86 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_UART_MspInit+0x13c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d136      	bne.n	8002d86 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 f969 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002d30:	f7ff fef2 	bl	8002b18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_UART_MspInit+0x138>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d64:	230c      	movs	r3, #12
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d74:	2307      	movs	r3, #7
 8002d76:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d82:	f001 fae9 	bl	8004358 <HAL_GPIO_Init>
}
 8002d86:	bf00      	nop
 8002d88:	3770      	adds	r7, #112	; 0x70
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40004400 	.word	0x40004400

08002d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <NMI_Handler+0x4>

08002da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <HardFault_Handler+0x4>

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <MemManage_Handler+0x4>

08002dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <BusFault_Handler+0x4>

08002db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <UsageFault_Handler+0x4>

08002dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de8:	f001 f8a6 	bl	8003f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <USART1_IRQHandler+0x10>)
 8002df6:	f003 fbcf 	bl	8006598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000b44 	.word	0x20000b44

08002e04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e00a      	b.n	8002e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e16:	f3af 8000 	nop.w
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	dbf0      	blt.n	8002e16 <_read+0x12>
	}

return len;
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	return -1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e66:	605a      	str	r2, [r3, #4]
	return 0;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_isatty>:

int _isatty(int file)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
	return 0;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb0:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <_sbrk+0x5c>)
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <_sbrk+0x60>)
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <_sbrk+0x64>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <_sbrk+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d207      	bcs.n	8002ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed8:	f004 fcc0 	bl	800785c <__errno>
 8002edc:	4603      	mov	r3, r0
 8002ede:	220c      	movs	r2, #12
 8002ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e009      	b.n	8002efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <_sbrk+0x64>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <_sbrk+0x64>)
 8002ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20008000 	.word	0x20008000
 8002f08:	00000400 	.word	0x00000400
 8002f0c:	20000ae0 	.word	0x20000ae0
 8002f10:	20000c80 	.word	0x20000c80

08002f14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <SystemInit+0x20>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <SystemInit+0x20>)
 8002f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <triad>:
#include <luts.h>
#define PI16 205887
#define norm(a) norm_q16(a)


void triad(Vector3D B1, Vector3D g1, Vector3D B2, Vector3D g2, Matrix3x3* result){
 8002f38:	b082      	sub	sp, #8
 8002f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3e:	b0f5      	sub	sp, #468	; 0x1d4
 8002f40:	af10      	add	r7, sp, #64	; 0x40
 8002f42:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002f46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f4a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	// Normalisér alle vektorerne
	int32_t nB1 = norm(B1);
 8002f4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f56:	f000 ff2d 	bl	8003db4 <norm_q16>
 8002f5a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
	int32_t ng1 = norm(g1);
 8002f5e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002f62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f66:	f000 ff25 	bl	8003db4 <norm_q16>
 8002f6a:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
	int32_t nB2 = norm(B2);
 8002f6e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f76:	f000 ff1d 	bl	8003db4 <norm_q16>
 8002f7a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	int32_t ng2 = norm(g2);
 8002f7e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8002f82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f86:	f000 ff15 	bl	8003db4 <norm_q16>
 8002f8a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180

	B1.x = FIX16_DIV(B1.x, nB1);
 8002f8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f9a:	ea4f 4922 	mov.w	r9, r2, asr #16
 8002f9e:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8002fa2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fac:	4640      	mov	r0, r8
 8002fae:	4649      	mov	r1, r9
 8002fb0:	f7fd f986 	bl	80002c0 <__aeabi_ldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fbc:	601a      	str	r2, [r3, #0]
	B1.y = FIX16_DIV(B1.y, nB1);
 8002fbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002fce:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002fd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fdc:	4650      	mov	r0, sl
 8002fde:	4659      	mov	r1, fp
 8002fe0:	f7fd f96e 	bl	80002c0 <__aeabi_ldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fec:	605a      	str	r2, [r3, #4]
	B1.z = FIX16_DIV(B1.z, nB1);
 8002fee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ffa:	1416      	asrs	r6, r2, #16
 8002ffc:	0415      	lsls	r5, r2, #16
 8002ffe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003002:	461a      	mov	r2, r3
 8003004:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003008:	4628      	mov	r0, r5
 800300a:	4631      	mov	r1, r6
 800300c:	f7fd f958 	bl	80002c0 <__aeabi_ldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003018:	609a      	str	r2, [r3, #8]

	g1.x = FIX16_DIV(g1.x, ng1);
 800301a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800301e:	461a      	mov	r2, r3
 8003020:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003024:	1411      	asrs	r1, r2, #16
 8003026:	6779      	str	r1, [r7, #116]	; 0x74
 8003028:	0413      	lsls	r3, r2, #16
 800302a:	673b      	str	r3, [r7, #112]	; 0x70
 800302c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003030:	461a      	mov	r2, r3
 8003032:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003036:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800303a:	f7fd f941 	bl	80002c0 <__aeabi_ldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4613      	mov	r3, r2
 8003044:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	g1.y = FIX16_DIV(g1.y, ng1);
 8003048:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800304c:	461a      	mov	r2, r3
 800304e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003052:	1411      	asrs	r1, r2, #16
 8003054:	66f9      	str	r1, [r7, #108]	; 0x6c
 8003056:	0413      	lsls	r3, r2, #16
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
 800305a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800305e:	461a      	mov	r2, r3
 8003060:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003068:	f7fd f92a 	bl	80002c0 <__aeabi_ldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4613      	mov	r3, r2
 8003072:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	g1.z = FIX16_DIV(g1.z, ng1);
 8003076:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800307a:	461a      	mov	r2, r3
 800307c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003080:	1411      	asrs	r1, r2, #16
 8003082:	6679      	str	r1, [r7, #100]	; 0x64
 8003084:	0413      	lsls	r3, r2, #16
 8003086:	663b      	str	r3, [r7, #96]	; 0x60
 8003088:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800308c:	461a      	mov	r2, r3
 800308e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003092:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003096:	f7fd f913 	bl	80002c0 <__aeabi_ldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4613      	mov	r3, r2
 80030a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	B2.x = FIX16_DIV(B2.x, nB2);
 80030a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030a8:	461a      	mov	r2, r3
 80030aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030ae:	1411      	asrs	r1, r2, #16
 80030b0:	65f9      	str	r1, [r7, #92]	; 0x5c
 80030b2:	0413      	lsls	r3, r2, #16
 80030b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030ba:	461a      	mov	r2, r3
 80030bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030c4:	f7fd f8fc 	bl	80002c0 <__aeabi_ldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	B2.y = FIX16_DIV(B2.y, nB2);
 80030d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80030d6:	461a      	mov	r2, r3
 80030d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030dc:	1411      	asrs	r1, r2, #16
 80030de:	6579      	str	r1, [r7, #84]	; 0x54
 80030e0:	0413      	lsls	r3, r2, #16
 80030e2:	653b      	str	r3, [r7, #80]	; 0x50
 80030e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030e8:	461a      	mov	r2, r3
 80030ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030f2:	f7fd f8e5 	bl	80002c0 <__aeabi_ldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4613      	mov	r3, r2
 80030fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	B2.z = FIX16_DIV(B2.z, nB2);
 8003100:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003104:	461a      	mov	r2, r3
 8003106:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800310a:	1411      	asrs	r1, r2, #16
 800310c:	64f9      	str	r1, [r7, #76]	; 0x4c
 800310e:	0413      	lsls	r3, r2, #16
 8003110:	64bb      	str	r3, [r7, #72]	; 0x48
 8003112:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003116:	461a      	mov	r2, r3
 8003118:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800311c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003120:	f7fd f8ce 	bl	80002c0 <__aeabi_ldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	g2.x = FIX16_DIV(g2.x, ng2);
 800312e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003132:	461a      	mov	r2, r3
 8003134:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003138:	1411      	asrs	r1, r2, #16
 800313a:	6479      	str	r1, [r7, #68]	; 0x44
 800313c:	0413      	lsls	r3, r2, #16
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
 8003140:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003144:	461a      	mov	r2, r3
 8003146:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800314a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800314e:	f7fd f8b7 	bl	80002c0 <__aeabi_ldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4613      	mov	r3, r2
 8003158:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	g2.y = FIX16_DIV(g2.y, ng2);
 800315c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003160:	461a      	mov	r2, r3
 8003162:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003166:	1411      	asrs	r1, r2, #16
 8003168:	63f9      	str	r1, [r7, #60]	; 0x3c
 800316a:	0413      	lsls	r3, r2, #16
 800316c:	63bb      	str	r3, [r7, #56]	; 0x38
 800316e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003172:	461a      	mov	r2, r3
 8003174:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003178:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800317c:	f7fd f8a0 	bl	80002c0 <__aeabi_ldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4613      	mov	r3, r2
 8003186:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	g2.z = FIX16_DIV(g2.z, ng2);
 800318a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800318e:	461a      	mov	r2, r3
 8003190:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003194:	1411      	asrs	r1, r2, #16
 8003196:	6379      	str	r1, [r7, #52]	; 0x34
 8003198:	0413      	lsls	r3, r2, #16
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
 800319c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031a0:	461a      	mov	r2, r3
 80031a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031aa:	f7fd f889 	bl	80002c0 <__aeabi_ldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4613      	mov	r3, r2
 80031b4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	Vector3D u1;
	Vector3D u2;
	Vector3D u3;

	t1 = B1;
 80031b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031bc:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80031c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	u1 = B2;
 80031c8:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80031cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	Vector3D B1xg1 = cross(B1, g1);
 80031d8:	f507 7692 	add.w	r6, r7, #292	; 0x124
 80031dc:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 80031e0:	466c      	mov	r4, sp
 80031e2:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80031e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ee:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80031f2:	4630      	mov	r0, r6
 80031f4:	f000 fab0 	bl	8003758 <cross>

	int32_t nB1g1 = norm(B1xg1);
 80031f8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80031fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003200:	f000 fdd8 	bl	8003db4 <norm_q16>
 8003204:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	t2.x = FIX16_DIV(B1xg1.x, nB1g1);
 8003208:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800320c:	461a      	mov	r2, r3
 800320e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003212:	1411      	asrs	r1, r2, #16
 8003214:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003216:	0413      	lsls	r3, r2, #16
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
 800321a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800321e:	461a      	mov	r2, r3
 8003220:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003224:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003228:	f7fd f84a 	bl	80002c0 <__aeabi_ldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	t2.y = FIX16_DIV(B1xg1.y, nB1g1);
 8003236:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800323a:	461a      	mov	r2, r3
 800323c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003240:	1411      	asrs	r1, r2, #16
 8003242:	6279      	str	r1, [r7, #36]	; 0x24
 8003244:	0413      	lsls	r3, r2, #16
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800324c:	461a      	mov	r2, r3
 800324e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003252:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003256:	f7fd f833 	bl	80002c0 <__aeabi_ldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4613      	mov	r3, r2
 8003260:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	t2.z = FIX16_DIV(B1xg1.z, nB1g1);
 8003264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003268:	461a      	mov	r2, r3
 800326a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800326e:	1411      	asrs	r1, r2, #16
 8003270:	61f9      	str	r1, [r7, #28]
 8003272:	0413      	lsls	r3, r2, #16
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800327a:	461a      	mov	r2, r3
 800327c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003280:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003284:	f7fd f81c 	bl	80002c0 <__aeabi_ldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	t3 = cross(t1, t2);
 8003292:	f507 75aa 	add.w	r5, r7, #340	; 0x154
 8003296:	466c      	mov	r4, sp
 8003298:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800329c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032a4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80032a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 fa54 	bl	8003758 <cross>

	Vector3D B2xg2 = cross(B2, g2);
 80032b0:	f507 758c 	add.w	r5, r7, #280	; 0x118
 80032b4:	466c      	mov	r4, sp
 80032b6:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80032ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032c2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c8:	4628      	mov	r0, r5
 80032ca:	f000 fa45 	bl	8003758 <cross>

	int32_t nB2g2 = norm(B2xg2);
 80032ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80032d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032d6:	f000 fd6d 	bl	8003db4 <norm_q16>
 80032da:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
	u2.x = FIX16_DIV(B2xg2.x, nB2g2);
 80032de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032e2:	461a      	mov	r2, r3
 80032e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032e8:	1411      	asrs	r1, r2, #16
 80032ea:	6179      	str	r1, [r7, #20]
 80032ec:	0413      	lsls	r3, r2, #16
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80032f4:	461a      	mov	r2, r3
 80032f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032fe:	f7fc ffdf 	bl	80002c0 <__aeabi_ldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4613      	mov	r3, r2
 8003308:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	u2.y = FIX16_DIV(B2xg2.y, nB2g2);
 800330c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003310:	461a      	mov	r2, r3
 8003312:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003316:	1411      	asrs	r1, r2, #16
 8003318:	60f9      	str	r1, [r7, #12]
 800331a:	0413      	lsls	r3, r2, #16
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003322:	461a      	mov	r2, r3
 8003324:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800332c:	f7fc ffc8 	bl	80002c0 <__aeabi_ldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	u2.z = FIX16_DIV(B2xg2.z, nB2g2);
 800333a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800333e:	461a      	mov	r2, r3
 8003340:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003344:	1411      	asrs	r1, r2, #16
 8003346:	6079      	str	r1, [r7, #4]
 8003348:	0413      	lsls	r3, r2, #16
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003350:	461a      	mov	r2, r3
 8003352:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335a:	f7fc ffb1 	bl	80002c0 <__aeabi_ldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4613      	mov	r3, r2
 8003364:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	u3 = cross(u1, u2);
 8003368:	f507 7598 	add.w	r5, r7, #304	; 0x130
 800336c:	466c      	mov	r4, sp
 800336e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800337a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800337e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003380:	4628      	mov	r0, r5
 8003382:	f000 f9e9 	bl	8003758 <cross>

	Matrix3x3 U = create_matrix_from_vectors(u1, u2, u3);
 8003386:	f107 05f4 	add.w	r5, r7, #244	; 0xf4
 800338a:	ac03      	add	r4, sp, #12
 800338c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003398:	466c      	mov	r4, sp
 800339a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800339e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80033aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 fab1 	bl	8003914 <create_matrix_from_vectors>
	Matrix3x3 T = create_matrix_from_vectors(t1, t2, t3);
 80033b2:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 80033b6:	ac03      	add	r4, sp, #12
 80033b8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80033bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033c4:	466c      	mov	r4, sp
 80033c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033d2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80033d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 fa9b 	bl	8003914 <create_matrix_from_vectors>

	Matrix3x3 C;
	Matrix3x3 Tt = transpose(T);
 80033de:	f107 0688 	add.w	r6, r7, #136	; 0x88
 80033e2:	466d      	mov	r5, sp
 80033e4:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80033e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80033f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 fab4 	bl	8003968 <transpose>

	C = MMult(U,Tt);
 8003400:	f107 06ac 	add.w	r6, r7, #172	; 0xac
 8003404:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003408:	ac06      	add	r4, sp, #24
 800340a:	461d      	mov	r5, r3
 800340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	466d      	mov	r5, sp
 800341a:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800341e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003426:	e885 0003 	stmia.w	r5, {r0, r1}
 800342a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800342e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003430:	4630      	mov	r0, r6
 8003432:	f000 fadb 	bl	80039ec <MMult>
	*result = C;
 8003436:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800343a:	461d      	mov	r5, r3
 800343c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	602b      	str	r3, [r5, #0]
}
 800344c:	bf00      	nop
 800344e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003452:	46bd      	mov	sp, r7
 8003454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003458:	b002      	add	sp, #8
 800345a:	4770      	bx	lr

0800345c <rot2eulerZYX>:
*/
//////////////////////////////////////////////////////////////


// In triad.c
void rot2eulerZYX(const Matrix3x3* R, Vector3D* angles) {
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
    int32_t rzx = R->z.x;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Clamp R->z.x to [-1, 1] range for asin
    if (rzx < convert(-1)) rzx = convert(-1);
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f7fd f932 	bl	80006d8 <convert>
 8003474:	4602      	mov	r2, r0
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	4293      	cmp	r3, r2
 800347a:	da04      	bge.n	8003486 <rot2eulerZYX+0x2a>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f7fd f92a 	bl	80006d8 <convert>
 8003484:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (rzx > convert(1))  rzx = convert(1);
 8003486:	2001      	movs	r0, #1
 8003488:	f7fd f926 	bl	80006d8 <convert>
 800348c:	4602      	mov	r2, r0
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	4293      	cmp	r3, r2
 8003492:	dd03      	ble.n	800349c <rot2eulerZYX+0x40>
 8003494:	2001      	movs	r0, #1
 8003496:	f7fd f91f 	bl	80006d8 <convert>
 800349a:	62f8      	str	r0, [r7, #44]	; 0x2c

    // Pitch = -asin(R->z.x)
    int32_t pitch_rad = -fix_asin(rzx);  // <-- uses your LUT
 800349c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800349e:	f7fd ff45 	bl	800132c <fix_asin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	425b      	negs	r3, r3
 80034a6:	623b      	str	r3, [r7, #32]
    int32_t cos_pitch = cosrad(pitch_rad);
 80034a8:	6a38      	ldr	r0, [r7, #32]
 80034aa:	f7fd febb 	bl	8001224 <cosrad>
 80034ae:	61f8      	str	r0, [r7, #28]

    int32_t rad2deg = FIX16_DIV(convert(180), PI16);
 80034b0:	20b4      	movs	r0, #180	; 0xb4
 80034b2:	f7fd f911 	bl	80006d8 <convert>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034be:	1415      	asrs	r5, r2, #16
 80034c0:	0414      	lsls	r4, r2, #16
 80034c2:	4a74      	ldr	r2, [pc, #464]	; (8003694 <rot2eulerZYX+0x238>)
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc fef8 	bl	80002c0 <__aeabi_ldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4613      	mov	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
    int32_t pitch_deg = FIX16_MULT(pitch_rad, rad2deg);
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	4618      	mov	r0, r3
 80034dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	461a      	mov	r2, r3
 80034e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034e8:	fb02 f501 	mul.w	r5, r2, r1
 80034ec:	fb00 f403 	mul.w	r4, r0, r3
 80034f0:	442c      	add	r4, r5
 80034f2:	fba0 2302 	umull	r2, r3, r0, r2
 80034f6:	18e1      	adds	r1, r4, r3
 80034f8:	460b      	mov	r3, r1
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0c10      	lsrs	r0, r2, #16
 8003504:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003508:	1419      	asrs	r1, r3, #16
 800350a:	4603      	mov	r3, r0
 800350c:	617b      	str	r3, [r7, #20]

    int32_t roll_deg = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t yaw_deg = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24

    // Gimbal lock threshold (approx. 0.001 in Q16.16)
    #define GIMBAL_THRESHOLD 30

    if (abs(cos_pitch) > GIMBAL_THRESHOLD) {
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	425b      	neglt	r3, r3
 800351e:	2b1e      	cmp	r3, #30
 8003520:	dd48      	ble.n	80035b4 <rot2eulerZYX+0x158>
        // No gimbal lock
        int32_t roll_rad = fix_atan2(R->z.y, R->z.z);  // <-- uses your LUT
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fd ffc5 	bl	80014bc <fix_atan2>
 8003532:	60f8      	str	r0, [r7, #12]
        int32_t yaw_rad  = fix_atan2(R->y.x, R->x.x);  // <-- uses your LUT
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fd ffbc 	bl	80014bc <fix_atan2>
 8003544:	60b8      	str	r0, [r7, #8]

        roll_deg = FIX16_MULT(roll_rad, rad2deg);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4618      	mov	r0, r3
 800354a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	461a      	mov	r2, r3
 8003552:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003556:	fb02 f501 	mul.w	r5, r2, r1
 800355a:	fb00 f403 	mul.w	r4, r0, r3
 800355e:	442c      	add	r4, r5
 8003560:	fba0 2302 	umull	r2, r3, r0, r2
 8003564:	18e1      	adds	r1, r4, r3
 8003566:	460b      	mov	r3, r1
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	0c10      	lsrs	r0, r2, #16
 8003572:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003576:	1419      	asrs	r1, r3, #16
 8003578:	4603      	mov	r3, r0
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
        yaw_deg  = FIX16_MULT(yaw_rad,  rad2deg);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	461a      	mov	r2, r3
 8003588:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800358c:	fb02 f501 	mul.w	r5, r2, r1
 8003590:	fb00 f403 	mul.w	r4, r0, r3
 8003594:	442c      	add	r4, r5
 8003596:	fba0 2302 	umull	r2, r3, r0, r2
 800359a:	18e1      	adds	r1, r4, r3
 800359c:	460b      	mov	r3, r1
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0c10      	lsrs	r0, r2, #16
 80035a8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035ac:	1419      	asrs	r1, r3, #16
 80035ae:	4603      	mov	r3, r0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
 80035b2:	e026      	b.n	8003602 <rot2eulerZYX+0x1a6>
    } else {
        // Gimbal lock fallback
        int32_t yaw_rad = fix_atan2(-R->x.y, R->y.y);  // <-- uses your LUT
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	425a      	negs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fd ff7b 	bl	80014bc <fix_atan2>
 80035c6:	6138      	str	r0, [r7, #16]
        yaw_deg = FIX16_MULT(yaw_rad, rad2deg);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4618      	mov	r0, r3
 80035cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	461a      	mov	r2, r3
 80035d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035d8:	fb02 f501 	mul.w	r5, r2, r1
 80035dc:	fb00 f403 	mul.w	r4, r0, r3
 80035e0:	442c      	add	r4, r5
 80035e2:	fba0 2302 	umull	r2, r3, r0, r2
 80035e6:	18e1      	adds	r1, r4, r3
 80035e8:	460b      	mov	r3, r1
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0c10      	lsrs	r0, r2, #16
 80035f4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035f8:	1419      	asrs	r1, r3, #16
 80035fa:	4603      	mov	r3, r0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
        roll_deg = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28

    // Wrap to [-180°, 180°]
    #define ANGLE_180 (180 << 16)
    #define ANGLE_360 (360 << 16)

    roll_deg %= ANGLE_360;
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <rot2eulerZYX+0x23c>)
 8003606:	fb82 1203 	smull	r1, r2, r2, r3
 800360a:	441a      	add	r2, r3
 800360c:	1611      	asrs	r1, r2, #24
 800360e:	17da      	asrs	r2, r3, #31
 8003610:	1a8a      	subs	r2, r1, r2
 8003612:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 8003616:	fb01 f202 	mul.w	r2, r1, r2
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (roll_deg > ANGLE_180) roll_deg -= ANGLE_360;
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8003624:	dd03      	ble.n	800362e <rot2eulerZYX+0x1d2>
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (roll_deg < -ANGLE_180) roll_deg += ANGLE_360;
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 8003634:	da03      	bge.n	800363e <rot2eulerZYX+0x1e2>
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28

    yaw_deg %= ANGLE_360;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <rot2eulerZYX+0x23c>)
 8003642:	fb82 1203 	smull	r1, r2, r2, r3
 8003646:	441a      	add	r2, r3
 8003648:	1611      	asrs	r1, r2, #24
 800364a:	17da      	asrs	r2, r3, #31
 800364c:	1a8a      	subs	r2, r1, r2
 800364e:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 8003652:	fb01 f202 	mul.w	r2, r1, r2
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    if (yaw_deg > ANGLE_180) yaw_deg -= ANGLE_360;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8003660:	dd03      	ble.n	800366a <rot2eulerZYX+0x20e>
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    if (yaw_deg < -ANGLE_180) yaw_deg += ANGLE_360;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 8003670:	da03      	bge.n	800367a <rot2eulerZYX+0x21e>
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 8003678:	627b      	str	r3, [r7, #36]	; 0x24

    angles->x = roll_deg;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367e:	601a      	str	r2, [r3, #0]
    angles->y = pitch_deg;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]
    angles->z = yaw_deg;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bdb0      	pop	{r4, r5, r7, pc}
 8003694:	0003243f 	.word	0x0003243f
 8003698:	b60b60b7 	.word	0xb60b60b7

0800369c <dot>:
#include <fixp.h>
#include "luts.h"

//////////////////Vector////////////////////////////////////////////

int32_t dot(Vector3D a, Vector3D b) {
 800369c:	b082      	sub	sp, #8
 800369e:	b4f0      	push	{r4, r5, r6, r7}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	1d3c      	adds	r4, r7, #4
 80036a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
    return Mult(a.x, b.x) + Mult(a.y, b.y) + Mult(a.z, b.z);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	461a      	mov	r2, r3
 80036b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036bc:	fb02 f501 	mul.w	r5, r2, r1
 80036c0:	fb00 f403 	mul.w	r4, r0, r3
 80036c4:	442c      	add	r4, r5
 80036c6:	fba0 2302 	umull	r2, r3, r0, r2
 80036ca:	18e1      	adds	r1, r4, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	f04f 0000 	mov.w	r0, #0
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	0c10      	lsrs	r0, r2, #16
 80036d8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80036dc:	1419      	asrs	r1, r3, #16
 80036de:	4606      	mov	r6, r0
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	461a      	mov	r2, r3
 80036ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036f0:	fb02 f501 	mul.w	r5, r2, r1
 80036f4:	fb00 f403 	mul.w	r4, r0, r3
 80036f8:	442c      	add	r4, r5
 80036fa:	fba0 2302 	umull	r2, r3, r0, r2
 80036fe:	18e1      	adds	r1, r4, r3
 8003700:	460b      	mov	r3, r1
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	0c10      	lsrs	r0, r2, #16
 800370c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003710:	1419      	asrs	r1, r3, #16
 8003712:	4603      	mov	r3, r0
 8003714:	18f4      	adds	r4, r6, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	461a      	mov	r2, r3
 8003722:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003726:	fb02 f601 	mul.w	r6, r2, r1
 800372a:	fb00 f503 	mul.w	r5, r0, r3
 800372e:	4435      	add	r5, r6
 8003730:	fba0 2302 	umull	r2, r3, r0, r2
 8003734:	18e9      	adds	r1, r5, r3
 8003736:	460b      	mov	r3, r1
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0c10      	lsrs	r0, r2, #16
 8003742:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003746:	1419      	asrs	r1, r3, #16
 8003748:	4603      	mov	r3, r0
 800374a:	4423      	add	r3, r4
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bcf0      	pop	{r4, r5, r6, r7}
 8003754:	b002      	add	sp, #8
 8003756:	4770      	bx	lr

08003758 <cross>:

Vector3D cross(Vector3D a, Vector3D b){
 8003758:	b4f0      	push	{r4, r5, r6, r7}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4638      	mov	r0, r7
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D c;
	c.x = Mult(a.y,b.z) - Mult(a.z,b.y);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	461a      	mov	r2, r3
 8003772:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003776:	fb02 f501 	mul.w	r5, r2, r1
 800377a:	fb00 f403 	mul.w	r4, r0, r3
 800377e:	442c      	add	r4, r5
 8003780:	fba0 2302 	umull	r2, r3, r0, r2
 8003784:	18e1      	adds	r1, r4, r3
 8003786:	460b      	mov	r3, r1
 8003788:	f04f 0000 	mov.w	r0, #0
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	0c10      	lsrs	r0, r2, #16
 8003792:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003796:	1419      	asrs	r1, r3, #16
 8003798:	4606      	mov	r6, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a4:	461a      	mov	r2, r3
 80037a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037aa:	fb02 f501 	mul.w	r5, r2, r1
 80037ae:	fb00 f403 	mul.w	r4, r0, r3
 80037b2:	442c      	add	r4, r5
 80037b4:	fba0 2302 	umull	r2, r3, r0, r2
 80037b8:	18e1      	adds	r1, r4, r3
 80037ba:	460b      	mov	r3, r1
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0c10      	lsrs	r0, r2, #16
 80037c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80037ca:	1419      	asrs	r1, r3, #16
 80037cc:	4603      	mov	r3, r0
 80037ce:	1af3      	subs	r3, r6, r3
 80037d0:	617b      	str	r3, [r7, #20]
	c.y = Mult(a.z,b.x) - Mult(a.x,b.z);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4618      	mov	r0, r3
 80037d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	461a      	mov	r2, r3
 80037de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037e2:	fb02 f501 	mul.w	r5, r2, r1
 80037e6:	fb00 f403 	mul.w	r4, r0, r3
 80037ea:	442c      	add	r4, r5
 80037ec:	fba0 2302 	umull	r2, r3, r0, r2
 80037f0:	18e1      	adds	r1, r4, r3
 80037f2:	460b      	mov	r3, r1
 80037f4:	f04f 0000 	mov.w	r0, #0
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	0c10      	lsrs	r0, r2, #16
 80037fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003802:	1419      	asrs	r1, r3, #16
 8003804:	4606      	mov	r6, r0
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	461a      	mov	r2, r3
 8003812:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003816:	fb02 f501 	mul.w	r5, r2, r1
 800381a:	fb00 f403 	mul.w	r4, r0, r3
 800381e:	442c      	add	r4, r5
 8003820:	fba0 2302 	umull	r2, r3, r0, r2
 8003824:	18e1      	adds	r1, r4, r3
 8003826:	460b      	mov	r3, r1
 8003828:	f04f 0000 	mov.w	r0, #0
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	0c10      	lsrs	r0, r2, #16
 8003832:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003836:	1419      	asrs	r1, r3, #16
 8003838:	4603      	mov	r3, r0
 800383a:	1af3      	subs	r3, r6, r3
 800383c:	61bb      	str	r3, [r7, #24]
	c.z = Mult(a.x,b.y) - Mult(a.y,b.x);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	461a      	mov	r2, r3
 800384a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800384e:	fb02 f501 	mul.w	r5, r2, r1
 8003852:	fb00 f403 	mul.w	r4, r0, r3
 8003856:	442c      	add	r4, r5
 8003858:	fba0 2302 	umull	r2, r3, r0, r2
 800385c:	18e1      	adds	r1, r4, r3
 800385e:	460b      	mov	r3, r1
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0c10      	lsrs	r0, r2, #16
 800386a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800386e:	1419      	asrs	r1, r3, #16
 8003870:	4606      	mov	r6, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	461a      	mov	r2, r3
 800387e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003882:	fb02 f501 	mul.w	r5, r2, r1
 8003886:	fb00 f403 	mul.w	r4, r0, r3
 800388a:	442c      	add	r4, r5
 800388c:	fba0 2302 	umull	r2, r3, r0, r2
 8003890:	18e1      	adds	r1, r4, r3
 8003892:	460b      	mov	r3, r1
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0c10      	lsrs	r0, r2, #16
 800389e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80038a2:	1419      	asrs	r1, r3, #16
 80038a4:	4603      	mov	r3, r0
 80038a6:	1af3      	subs	r3, r6, r3
 80038a8:	61fb      	str	r3, [r7, #28]
	return c;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	461c      	mov	r4, r3
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bcf0      	pop	{r4, r5, r6, r7}
 80038c2:	4770      	bx	lr

080038c4 <create_matrix>:

//////////////////Matrix////////////////////////////////////////////

Matrix3x3 create_matrix(int32_t a, int32_t b, int32_t c,
                        int32_t d, int32_t e, int32_t f,
                        int32_t g, int32_t h, int32_t i) {
 80038c4:	b4b0      	push	{r4, r5, r7}
 80038c6:	b08f      	sub	sp, #60	; 0x3c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
    Matrix3x3 matrix;
    matrix.x.x = a; matrix.x.y = d; matrix.x.z = g;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038dc:	61fb      	str	r3, [r7, #28]
    matrix.y.x = b; matrix.y.y = e; matrix.y.z = h;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
    matrix.z.x = c; matrix.z.y = f; matrix.z.z = i;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30
 80038f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
    return matrix;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	461d      	mov	r5, r3
 80038fa:	f107 0414 	add.w	r4, r7, #20
 80038fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	602b      	str	r3, [r5, #0]
}
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	373c      	adds	r7, #60	; 0x3c
 800390e:	46bd      	mov	sp, r7
 8003910:	bcb0      	pop	{r4, r5, r7}
 8003912:	4770      	bx	lr

08003914 <create_matrix_from_vectors>:

Matrix3x3 create_matrix_from_vectors(Vector3D a, Vector3D b, Vector3D c) {
 8003914:	b4b0      	push	{r4, r5, r7}
 8003916:	b08f      	sub	sp, #60	; 0x3c
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	4638      	mov	r0, r7
 800391e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Matrix3x3 matrix;
    matrix.x = a;
 8003922:	f107 0314 	add.w	r3, r7, #20
 8003926:	463a      	mov	r2, r7
 8003928:	ca07      	ldmia	r2, {r0, r1, r2}
 800392a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.y = b;
 800392e:	f107 0320 	add.w	r3, r7, #32
 8003932:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003936:	ca07      	ldmia	r2, {r0, r1, r2}
 8003938:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.z = c;
 800393c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003940:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003944:	ca07      	ldmia	r2, {r0, r1, r2}
 8003946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return matrix;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	461d      	mov	r5, r3
 800394e:	f107 0414 	add.w	r4, r7, #20
 8003952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	602b      	str	r3, [r5, #0]
}
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	373c      	adds	r7, #60	; 0x3c
 8003962:	46bd      	mov	sp, r7
 8003964:	bcb0      	pop	{r4, r5, r7}
 8003966:	4770      	bx	lr

08003968 <transpose>:

Matrix3x3 transpose(Matrix3x3 a){
 8003968:	b084      	sub	sp, #16
 800396a:	b4b0      	push	{r4, r5, r7}
 800396c:	b095      	sub	sp, #84	; 0x54
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;

	a_vect1.x = a.x.x;
 800397a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800397c:	647b      	str	r3, [r7, #68]	; 0x44
	a_vect1.y = a.y.x;
 800397e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
	a_vect1.z = a.z.x;
 8003982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003984:	64fb      	str	r3, [r7, #76]	; 0x4c

	a_vect2.x = a.x.y;
 8003986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
	a_vect2.y = a.y.y;
 800398a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
	a_vect2.z = a.z.y;
 800398e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003992:	643b      	str	r3, [r7, #64]	; 0x40

	a_vect3.x = a.x.z;
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
	a_vect3.y = a.y.z;
 8003998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
	a_vect3.z = a.z.z;
 800399c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34

	Matrix3x3 b; // b er brugt til at gemme data
	b.x = a_vect1;
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80039aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.y = a_vect2;
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.z = a_vect3;
 80039be:	f107 0320 	add.w	r3, r7, #32
 80039c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80039c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	return b;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	461d      	mov	r5, r3
 80039d0:	f107 0408 	add.w	r4, r7, #8
 80039d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	602b      	str	r3, [r5, #0]
}
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	3754      	adds	r7, #84	; 0x54
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bcb0      	pop	{r4, r5, r7}
 80039e8:	b004      	add	sp, #16
 80039ea:	4770      	bx	lr

080039ec <MMult>:

Matrix3x3 MMult(Matrix3x3 a, Matrix3x3 b){ //Matrix mult
 80039ec:	b084      	sub	sp, #16
 80039ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f0:	b0a5      	sub	sp, #148	; 0x94
 80039f2:	af06      	add	r7, sp, #24
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D b_vect1;
	Vector3D b_vect2;
	Vector3D b_vect3;
	b_vect1 = b.x;
 80039fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a02:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect2 = b.y;
 8003a0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a10:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect3 = b.z;
 8003a1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a1e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003a22:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	////a////
	a = transpose(a);
 8003a28:	f107 0694 	add.w	r6, r7, #148	; 0x94
 8003a2c:	466d      	mov	r5, sp
 8003a2e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8003a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff ff8f 	bl	8003968 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 8003a4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a4e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 8003a58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a5c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 8003a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a6a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//////calc
	Matrix3x3 svar;
	svar.x.x = dot(a_vect1, b_vect1);
 8003a74:	466a      	mov	r2, sp
 8003a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a7e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a88:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a8a:	f7ff fe07 	bl	800369c <dot>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	60fb      	str	r3, [r7, #12]
	svar.y.x = dot(a_vect1, b_vect2);
 8003a92:	466a      	mov	r2, sp
 8003a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa8:	f7ff fdf8 	bl	800369c <dot>
 8003aac:	4603      	mov	r3, r0
 8003aae:	61bb      	str	r3, [r7, #24]
	svar.z.x = dot(a_vect1, b_vect3);
 8003ab0:	466a      	mov	r2, sp
 8003ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ab6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aba:	e882 0003 	stmia.w	r2, {r0, r1}
 8003abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ac6:	f7ff fde9 	bl	800369c <dot>
 8003aca:	4603      	mov	r3, r0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24

	svar.x.y = dot(a_vect2, b_vect1);
 8003ace:	466a      	mov	r2, sp
 8003ad0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ad8:	e882 0003 	stmia.w	r2, {r0, r1}
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ae4:	f7ff fdda 	bl	800369c <dot>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	613b      	str	r3, [r7, #16]
	svar.y.y = dot(a_vect2, b_vect2);
 8003aec:	466a      	mov	r2, sp
 8003aee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003af2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003af6:	e882 0003 	stmia.w	r2, {r0, r1}
 8003afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b00:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b02:	f7ff fdcb 	bl	800369c <dot>
 8003b06:	4603      	mov	r3, r0
 8003b08:	61fb      	str	r3, [r7, #28]
	svar.z.y = dot(a_vect2, b_vect3);
 8003b0a:	466a      	mov	r2, sp
 8003b0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b14:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b20:	f7ff fdbc 	bl	800369c <dot>
 8003b24:	4603      	mov	r3, r0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

	svar.x.z = dot(a_vect3, b_vect1);
 8003b28:	466a      	mov	r2, sp
 8003b2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b32:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b3e:	f7ff fdad 	bl	800369c <dot>
 8003b42:	4603      	mov	r3, r0
 8003b44:	617b      	str	r3, [r7, #20]
	svar.y.z = dot(a_vect3, b_vect2);
 8003b46:	466a      	mov	r2, sp
 8003b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b50:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b5c:	f7ff fd9e 	bl	800369c <dot>
 8003b60:	4603      	mov	r3, r0
 8003b62:	623b      	str	r3, [r7, #32]
	svar.z.z = dot(a_vect3, b_vect3);
 8003b64:	466a      	mov	r2, sp
 8003b66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b7a:	f7ff fd8f 	bl	800369c <dot>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c

	return svar;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	461d      	mov	r5, r3
 8003b86:	f107 040c 	add.w	r4, r7, #12
 8003b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	602b      	str	r3, [r5, #0]
}
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	377c      	adds	r7, #124	; 0x7c
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003ba0:	b004      	add	sp, #16
 8003ba2:	4770      	bx	lr

08003ba4 <MVMult>:

Vector3D MVMult(Matrix3x3 a, Vector3D b){
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba8:	b095      	sub	sp, #84	; 0x54
 8003baa:	af06      	add	r7, sp, #24
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	a = transpose(a);
 8003bb6:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8003bba:	466d      	mov	r5, sp
 8003bbc:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f7ff fec8 	bl	8003968 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 8003bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bdc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 8003be6:	f107 0320 	add.w	r3, r7, #32
 8003bea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003bee:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	Vector3D c;
	c.x = dot(a_vect1, b);
 8003c02:	466a      	mov	r2, sp
 8003c04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003c16:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c18:	f7ff fd40 	bl	800369c <dot>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60bb      	str	r3, [r7, #8]
	c.y = dot(a_vect2, b);
 8003c20:	466a      	mov	r2, sp
 8003c22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c2a:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c30:	f107 0220 	add.w	r2, r7, #32
 8003c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c36:	f7ff fd31 	bl	800369c <dot>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	60fb      	str	r3, [r7, #12]
	c.z = dot(a_vect3, b);
 8003c3e:	466a      	mov	r2, sp
 8003c40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c48:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c4e:	f107 0214 	add.w	r2, r7, #20
 8003c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c54:	f7ff fd22 	bl	800369c <dot>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	613b      	str	r3, [r7, #16]
	return c;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	461c      	mov	r4, r3
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	373c      	adds	r7, #60	; 0x3c
 8003c70:	46bd      	mov	sp, r7
 8003c72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003c76:	b004      	add	sp, #16
 8003c78:	4770      	bx	lr

08003c7a <SquareRaw>:
    printf("(%ld, %ld, %ld)\n", a.x.y, a.y.y, a.z.y);
    printf("(%ld, %ld, %ld)\n", a.x.z, a.y.z, a.z.z);
}

// raw square in Q32.32
static inline int64_t SquareRaw(int32_t A) {
 8003c7a:	b4b0      	push	{r4, r5, r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
    return (int64_t)A * (int64_t)A;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003c92:	fb02 f501 	mul.w	r5, r2, r1
 8003c96:	fb00 f403 	mul.w	r4, r0, r3
 8003c9a:	442c      	add	r4, r5
 8003c9c:	fba0 2302 	umull	r2, r3, r0, r2
 8003ca0:	18e1      	adds	r1, r4, r3
 8003ca2:	460b      	mov	r3, r1
}
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bcb0      	pop	{r4, r5, r7}
 8003cae:	4770      	bx	lr

08003cb0 <isqrt_u64>:

// integer sqrt of a 64bit value
static inline uint32_t isqrt_u64(uint64_t x) {
 8003cb0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cb4:	b08a      	sub	sp, #40	; 0x28
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    uint64_t op = x;
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    uint64_t res = 0;
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // highest power-of-4 <= 2^62
    uint64_t one = (uint64_t)1 << 62;
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (one > op) one >>= 2;
 8003cdc:	e00b      	b.n	8003cf6 <isqrt_u64+0x46>
 8003cde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	0882      	lsrs	r2, r0, #2
 8003cec:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003cf0:	088b      	lsrs	r3, r1, #2
 8003cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	bf08      	it	eq
 8003d02:	4290      	cmpeq	r0, r2
 8003d04:	d3eb      	bcc.n	8003cde <isqrt_u64+0x2e>
    while (one) {
 8003d06:	e04a      	b.n	8003d9e <isqrt_u64+0xee>
        if (op >= res + one) {
 8003d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d10:	eb10 0802 	adds.w	r8, r0, r2
 8003d14:	eb41 0903 	adc.w	r9, r1, r3
 8003d18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1c:	454b      	cmp	r3, r9
 8003d1e:	bf08      	it	eq
 8003d20:	4542      	cmpeq	r2, r8
 8003d22:	d324      	bcc.n	8003d6e <isqrt_u64+0xbe>
            op  -= res + one;
 8003d24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d2c:	1884      	adds	r4, r0, r2
 8003d2e:	eb41 0503 	adc.w	r5, r1, r3
 8003d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d36:	ebb2 0a04 	subs.w	sl, r2, r4
 8003d3a:	eb63 0b05 	sbc.w	fp, r3, r5
 8003d3e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
            res  = (res >> 1) + one;
 8003d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	0842      	lsrs	r2, r0, #1
 8003d50:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003d54:	084b      	lsrs	r3, r1, #1
 8003d56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d5a:	1886      	adds	r6, r0, r2
 8003d5c:	603e      	str	r6, [r7, #0]
 8003d5e:	eb41 0303 	adc.w	r3, r1, r3
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d68:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003d6c:	e00b      	b.n	8003d86 <isqrt_u64+0xd6>
        } else {
            res >>= 1;
 8003d6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	0842      	lsrs	r2, r0, #1
 8003d7c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003d80:	084b      	lsrs	r3, r1, #1
 8003d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        one >>= 2;
 8003d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	0882      	lsrs	r2, r0, #2
 8003d94:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003d98:	088b      	lsrs	r3, r1, #2
 8003d9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (one) {
 8003d9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d1b0      	bne.n	8003d08 <isqrt_u64+0x58>
    }
    return (uint32_t)res;
 8003da6:	69bb      	ldr	r3, [r7, #24]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3728      	adds	r7, #40	; 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003db2:	4770      	bx	lr

08003db4 <norm_q16>:

// Q16.16 vector norm
int32_t norm_q16(Vector3D a) {
 8003db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	1d3b      	adds	r3, r7, #4
 8003dbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint64_t sum = 0;
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sum += (uint64_t)SquareRaw(a.x);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff52 	bl	8003c7a <SquareRaw>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003de2:	eb12 0a00 	adds.w	sl, r2, r0
 8003de6:	eb43 0b01 	adc.w	fp, r3, r1
 8003dea:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    sum += (uint64_t)SquareRaw(a.y);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff42 	bl	8003c7a <SquareRaw>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e02:	eb12 0800 	adds.w	r8, r2, r0
 8003e06:	eb43 0901 	adc.w	r9, r3, r1
 8003e0a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    sum += (uint64_t)SquareRaw(a.z);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff32 	bl	8003c7a <SquareRaw>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e22:	1814      	adds	r4, r2, r0
 8003e24:	eb43 0501 	adc.w	r5, r3, r1
 8003e28:	e9c7 4504 	strd	r4, r5, [r7, #16]
    // sum // Q32.32
    // sqrt(sum) gives Q16.16 directly
    return (int32_t)isqrt_u64(sum);
 8003e2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e30:	f7ff ff3e 	bl	8003cb0 <isqrt_u64>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e40:	480d      	ldr	r0, [pc, #52]	; (8003e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e44:	f7ff f866 	bl	8002f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e48:	480c      	ldr	r0, [pc, #48]	; (8003e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e4a:	490d      	ldr	r1, [pc, #52]	; (8003e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <LoopForever+0xe>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e50:	e002      	b.n	8003e58 <LoopCopyDataInit>

08003e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e56:	3304      	adds	r3, #4

08003e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e5c:	d3f9      	bcc.n	8003e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e60:	4c0a      	ldr	r4, [pc, #40]	; (8003e8c <LoopForever+0x16>)
  movs r3, #0
 8003e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e64:	e001      	b.n	8003e6a <LoopFillZerobss>

08003e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e68:	3204      	adds	r2, #4

08003e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e6c:	d3fb      	bcc.n	8003e66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003e6e:	f003 fcfb 	bl	8007868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e72:	f7fe faeb 	bl	800244c <main>

08003e76 <LoopForever>:

LoopForever:
    b LoopForever
 8003e76:	e7fe      	b.n	8003e76 <LoopForever>
  ldr   r0, =_estack
 8003e78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e80:	20000a48 	.word	0x20000a48
  ldr r2, =_sidata
 8003e84:	0800b6e8 	.word	0x0800b6e8
  ldr r2, =_sbss
 8003e88:	20000a48 	.word	0x20000a48
  ldr r4, =_ebss
 8003e8c:	20000c80 	.word	0x20000c80

08003e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e90:	e7fe      	b.n	8003e90 <ADC1_2_IRQHandler>

08003e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	f000 f95b 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ea2:	200f      	movs	r0, #15
 8003ea4:	f000 f80e 	bl	8003ec4 <HAL_InitTick>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	71fb      	strb	r3, [r7, #7]
 8003eb2:	e001      	b.n	8003eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eb4:	f7fe fe36 	bl	8002b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <HAL_InitTick+0x68>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d022      	beq.n	8003f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_InitTick+0x6c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <HAL_InitTick+0x68>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f966 	bl	80041be <HAL_SYSTICK_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	d809      	bhi.n	8003f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003efe:	2200      	movs	r2, #0
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295
 8003f06:	f000 f932 	bl	800416e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_InitTick+0x70>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e007      	b.n	8003f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e004      	b.n	8003f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e001      	b.n	8003f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	200009e0 	.word	0x200009e0
 8003f30:	200009d8 	.word	0x200009d8
 8003f34:	200009dc 	.word	0x200009dc

08003f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_IncTick+0x1c>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_IncTick+0x20>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <HAL_IncTick+0x1c>)
 8003f48:	6013      	str	r3, [r2, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000c6c 	.word	0x20000c6c
 8003f58:	200009e0 	.word	0x200009e0

08003f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_GetTick+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000c6c 	.word	0x20000c6c

08003f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f7c:	f7ff ffee 	bl	8003f5c <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d004      	beq.n	8003f98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_Delay+0x40>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f98:	bf00      	nop
 8003f9a:	f7ff ffdf 	bl	8003f5c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d8f7      	bhi.n	8003f9a <HAL_Delay+0x26>
  {
  }
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	200009e0 	.word	0x200009e0

08003fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <__NVIC_GetPriorityGrouping+0x18>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 0307 	and.w	r3, r3, #7
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	db0b      	blt.n	8004046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4907      	ldr	r1, [pc, #28]	; (8004054 <__NVIC_EnableIRQ+0x38>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2001      	movs	r0, #1
 800403e:	fa00 f202 	lsl.w	r2, r0, r2
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000e100 	.word	0xe000e100

08004058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	; (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
         );
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	f7ff ff8e 	bl	8004058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff29 	bl	8003fb8 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800417c:	f7ff ff40 	bl	8004000 <__NVIC_GetPriorityGrouping>
 8004180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	6978      	ldr	r0, [r7, #20]
 8004188:	f7ff ff90 	bl	80040ac <NVIC_EncodePriority>
 800418c:	4602      	mov	r2, r0
 800418e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff5f 	bl	8004058 <__NVIC_SetPriority>
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	4603      	mov	r3, r0
 80041aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff33 	bl	800401c <__NVIC_EnableIRQ>
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff ffa4 	bl	8004114 <SysTick_Config>
 80041cc:	4603      	mov	r3, r0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d005      	beq.n	80041fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e037      	b.n	800426a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 020e 	bic.w	r2, r2, #14
 8004208:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004218:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f202 	lsl.w	r2, r1, r2
 800423c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004246:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004268:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d00d      	beq.n	80042bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e047      	b.n	800434c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 020e 	bic.w	r2, r2, #14
 80042ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2101      	movs	r1, #1
 80042fa:	fa01 f202 	lsl.w	r2, r1, r2
 80042fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004308:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004320:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800432a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
    }
  }
  return status;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004366:	e15a      	b.n	800461e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	2101      	movs	r1, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 814c 	beq.w	8004618 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d005      	beq.n	8004398 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004394:	2b02      	cmp	r3, #2
 8004396:	d130      	bne.n	80043fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ce:	2201      	movs	r2, #1
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	f003 0201 	and.w	r2, r3, #1
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b03      	cmp	r3, #3
 8004404:	d017      	beq.n	8004436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	2203      	movs	r2, #3
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d123      	bne.n	800448a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	08da      	lsrs	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3208      	adds	r2, #8
 800444a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	220f      	movs	r2, #15
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	08da      	lsrs	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3208      	adds	r2, #8
 8004484:	6939      	ldr	r1, [r7, #16]
 8004486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	2203      	movs	r2, #3
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4013      	ands	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 0203 	and.w	r2, r3, #3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80a6 	beq.w	8004618 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044cc:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_GPIO_Init+0x2e4>)
 80044ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d0:	4a5a      	ldr	r2, [pc, #360]	; (800463c <HAL_GPIO_Init+0x2e4>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6613      	str	r3, [r2, #96]	; 0x60
 80044d8:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_GPIO_Init+0x2e4>)
 80044da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044e4:	4a56      	ldr	r2, [pc, #344]	; (8004640 <HAL_GPIO_Init+0x2e8>)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	3302      	adds	r3, #2
 80044ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	220f      	movs	r2, #15
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800450e:	d01f      	beq.n	8004550 <HAL_GPIO_Init+0x1f8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_GPIO_Init+0x2ec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d019      	beq.n	800454c <HAL_GPIO_Init+0x1f4>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_GPIO_Init+0x1f0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a4a      	ldr	r2, [pc, #296]	; (800464c <HAL_GPIO_Init+0x2f4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00d      	beq.n	8004544 <HAL_GPIO_Init+0x1ec>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a49      	ldr	r2, [pc, #292]	; (8004650 <HAL_GPIO_Init+0x2f8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <HAL_GPIO_Init+0x1e8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a48      	ldr	r2, [pc, #288]	; (8004654 <HAL_GPIO_Init+0x2fc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_GPIO_Init+0x1e4>
 8004538:	2305      	movs	r3, #5
 800453a:	e00a      	b.n	8004552 <HAL_GPIO_Init+0x1fa>
 800453c:	2306      	movs	r3, #6
 800453e:	e008      	b.n	8004552 <HAL_GPIO_Init+0x1fa>
 8004540:	2304      	movs	r3, #4
 8004542:	e006      	b.n	8004552 <HAL_GPIO_Init+0x1fa>
 8004544:	2303      	movs	r3, #3
 8004546:	e004      	b.n	8004552 <HAL_GPIO_Init+0x1fa>
 8004548:	2302      	movs	r3, #2
 800454a:	e002      	b.n	8004552 <HAL_GPIO_Init+0x1fa>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_GPIO_Init+0x1fa>
 8004550:	2300      	movs	r3, #0
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	f002 0203 	and.w	r2, r2, #3
 8004558:	0092      	lsls	r2, r2, #2
 800455a:	4093      	lsls	r3, r2
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004562:	4937      	ldr	r1, [pc, #220]	; (8004640 <HAL_GPIO_Init+0x2e8>)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	3302      	adds	r3, #2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_GPIO_Init+0x300>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004594:	4a30      	ldr	r2, [pc, #192]	; (8004658 <HAL_GPIO_Init+0x300>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_GPIO_Init+0x300>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045be:	4a26      	ldr	r2, [pc, #152]	; (8004658 <HAL_GPIO_Init+0x300>)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_GPIO_Init+0x300>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_GPIO_Init+0x300>)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045ee:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <HAL_GPIO_Init+0x300>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004612:	4a11      	ldr	r2, [pc, #68]	; (8004658 <HAL_GPIO_Init+0x300>)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3301      	adds	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	f47f ae9d 	bne.w	8004368 <HAL_GPIO_Init+0x10>
  }
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40021000 	.word	0x40021000
 8004640:	40010000 	.word	0x40010000
 8004644:	48000400 	.word	0x48000400
 8004648:	48000800 	.word	0x48000800
 800464c:	48000c00 	.word	0x48000c00
 8004650:	48001000 	.word	0x48001000
 8004654:	48001400 	.word	0x48001400
 8004658:	40010400 	.word	0x40010400

0800465c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
 8004668:	4613      	mov	r3, r2
 800466a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800466c:	787b      	ldrb	r3, [r7, #1]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004678:	e002      	b.n	8004680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e08d      	b.n	80047ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe fa5a 	bl	8002b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	e006      	b.n	8004714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d108      	bne.n	800472e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	e007      	b.n	800473e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800474c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	461a      	mov	r2, r3
 80047d0:	460b      	mov	r3, r1
 80047d2:	817b      	strh	r3, [r7, #10]
 80047d4:	4613      	mov	r3, r2
 80047d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	f040 80fd 	bne.w	80049e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2C_Master_Transmit+0x30>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0f6      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x21e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047fc:	f7ff fbae 	bl	8003f5c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	2319      	movs	r3, #25
 8004808:	2201      	movs	r2, #1
 800480a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 faf6 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0e1      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2221      	movs	r2, #33	; 0x21
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2210      	movs	r2, #16
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	893a      	ldrh	r2, [r7, #8]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2bff      	cmp	r3, #255	; 0xff
 800484e:	d906      	bls.n	800485e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	22ff      	movs	r2, #255	; 0xff
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e007      	b.n	800486e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800486c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	2b00      	cmp	r3, #0
 8004874:	d024      	beq.n	80048c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	781a      	ldrb	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	8979      	ldrh	r1, [r7, #10]
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_I2C_Master_Transmit+0x228>)
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fcf1 	bl	80052a0 <I2C_TransferConfig>
 80048be:	e066      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	4b48      	ldr	r3, [pc, #288]	; (80049ec <HAL_I2C_Master_Transmit+0x228>)
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fce6 	bl	80052a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80048d4:	e05b      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	6a39      	ldr	r1, [r7, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fae9 	bl	8004eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07b      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d034      	beq.n	800498e <HAL_I2C_Master_Transmit+0x1ca>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d130      	bne.n	800498e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2200      	movs	r2, #0
 8004934:	2180      	movs	r1, #128	; 0x80
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fa62 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e04d      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	2bff      	cmp	r3, #255	; 0xff
 800494e:	d90e      	bls.n	800496e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	22ff      	movs	r2, #255	; 0xff
 8004954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	b2da      	uxtb	r2, r3
 800495c:	8979      	ldrh	r1, [r7, #10]
 800495e:	2300      	movs	r3, #0
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fc9a 	bl	80052a0 <I2C_TransferConfig>
 800496c:	e00f      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	b2da      	uxtb	r2, r3
 800497e:	8979      	ldrh	r1, [r7, #10]
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fc89 	bl	80052a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d19e      	bne.n	80048d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	6a39      	ldr	r1, [r7, #32]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 facf 	bl	8004f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01a      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2220      	movs	r2, #32
 80049b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <HAL_I2C_Master_Transmit+0x22c>)
 80049c0:	400b      	ands	r3, r1
 80049c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	80002000 	.word	0x80002000
 80049f0:	fe00e800 	.word	0xfe00e800

080049f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	461a      	mov	r2, r3
 8004a00:	460b      	mov	r3, r1
 8004a02:	817b      	strh	r3, [r7, #10]
 8004a04:	4613      	mov	r3, r2
 8004a06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	f040 80db 	bne.w	8004bcc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2C_Master_Receive+0x30>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0d4      	b.n	8004bce <HAL_I2C_Master_Receive+0x1da>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a2c:	f7ff fa96 	bl	8003f5c <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2319      	movs	r3, #25
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f9de 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0bf      	b.n	8004bce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2222      	movs	r2, #34	; 0x22
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2210      	movs	r2, #16
 8004a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	893a      	ldrh	r2, [r7, #8]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	d90e      	bls.n	8004a9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	22ff      	movs	r2, #255	; 0xff
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	8979      	ldrh	r1, [r7, #10]
 8004a8e:	4b52      	ldr	r3, [pc, #328]	; (8004bd8 <HAL_I2C_Master_Receive+0x1e4>)
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fc02 	bl	80052a0 <I2C_TransferConfig>
 8004a9c:	e06d      	b.n	8004b7a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	8979      	ldrh	r1, [r7, #10]
 8004ab0:	4b49      	ldr	r3, [pc, #292]	; (8004bd8 <HAL_I2C_Master_Receive+0x1e4>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fbf1 	bl	80052a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004abe:	e05c      	b.n	8004b7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	6a39      	ldr	r1, [r7, #32]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fa7f 	bl	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e07c      	b.n	8004bce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d034      	beq.n	8004b7a <HAL_I2C_Master_Receive+0x186>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d130      	bne.n	8004b7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f96c 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e04d      	b.n	8004bce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2bff      	cmp	r3, #255	; 0xff
 8004b3a:	d90e      	bls.n	8004b5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	22ff      	movs	r2, #255	; 0xff
 8004b40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	8979      	ldrh	r1, [r7, #10]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fba4 	bl	80052a0 <I2C_TransferConfig>
 8004b58:	e00f      	b.n	8004b7a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	8979      	ldrh	r1, [r7, #10]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fb93 	bl	80052a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d19d      	bne.n	8004ac0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	6a39      	ldr	r1, [r7, #32]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f9d9 	bl	8004f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e01a      	b.n	8004bce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_I2C_Master_Receive+0x1e8>)
 8004bac:	400b      	ands	r3, r1
 8004bae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	80002400 	.word	0x80002400
 8004bdc:	fe00e800 	.word	0xfe00e800

08004be0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	460b      	mov	r3, r1
 8004bee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	f040 80d6 	bne.w	8004dae <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c10:	d101      	bne.n	8004c16 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0cc      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2C_IsDeviceReady+0x44>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0c5      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d107      	bne.n	8004c52 <HAL_I2C_IsDeviceReady+0x72>
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c50:	e006      	b.n	8004c60 <HAL_I2C_IsDeviceReady+0x80>
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c66:	f7ff f979 	bl	8003f5c <HAL_GetTick>
 8004c6a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c98:	e034      	b.n	8004d04 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d01a      	beq.n	8004cd8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7ff f95b 	bl	8003f5c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <HAL_I2C_IsDeviceReady+0xd8>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e06b      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d04:	7ffb      	ldrb	r3, [r7, #31]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <HAL_I2C_IsDeviceReady+0x130>
 8004d0a:	7fbb      	ldrb	r3, [r7, #30]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0c4      	beq.n	8004c9a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d01a      	beq.n	8004d54 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2120      	movs	r1, #32
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f869 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e03b      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e02d      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2120      	movs	r1, #32
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f84e 	bl	8004e00 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e020      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2210      	movs	r2, #16
 8004d74:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3301      	adds	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	f63f af56 	bhi.w	8004c3a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d103      	bne.n	8004dd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d007      	beq.n	8004df4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	619a      	str	r2, [r3, #24]
  }
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e10:	e03b      	b.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f962 	bl	80050e0 <I2C_IsErrorOccurred>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e041      	b.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d02d      	beq.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2e:	f7ff f895 	bl	8003f5c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d122      	bne.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d113      	bne.n	8004e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e00f      	b.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4013      	ands	r3, r2
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d0b4      	beq.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ebe:	e033      	b.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f90b 	bl	80050e0 <I2C_IsErrorOccurred>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e031      	b.n	8004f38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d025      	beq.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7ff f83e 	bl	8003f5c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11a      	bne.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d013      	beq.n	8004f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e007      	b.n	8004f38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d1c4      	bne.n	8004ec0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f4c:	e02f      	b.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f8c4 	bl	80050e0 <I2C_IsErrorOccurred>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e02d      	b.n	8004fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fe fffb 	bl	8003f5c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11a      	bne.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d013      	beq.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e007      	b.n	8004fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d1c8      	bne.n	8004f4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004fd8:	e071      	b.n	80050be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f87e 	bl	80050e0 <I2C_IsErrorOccurred>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d13b      	bne.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d138      	bne.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b04      	cmp	r3, #4
 800500e:	d105      	bne.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b10      	cmp	r3, #16
 8005028:	d121      	bne.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2204      	movs	r2, #4
 8005036:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2220      	movs	r2, #32
 800503e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800504c:	400b      	ands	r3, r1
 800504e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
 800506c:	e002      	b.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005074:	f7fe ff72 	bl	8003f5c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d119      	bne.n	80050be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d00f      	beq.n	80050be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d002      	beq.n	80050d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d083      	beq.n	8004fda <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	fe00e800 	.word	0xfe00e800

080050e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d068      	beq.n	80051de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2210      	movs	r2, #16
 8005112:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005114:	e049      	b.n	80051aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d045      	beq.n	80051aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fe ff1d 	bl	8003f5c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <I2C_IsErrorOccurred+0x54>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d13a      	bne.n	80051aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005146:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005156:	d121      	bne.n	800519c <I2C_IsErrorOccurred+0xbc>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515e:	d01d      	beq.n	800519c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	2b20      	cmp	r3, #32
 8005164:	d01a      	beq.n	800519c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005174:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005176:	f7fe fef1 	bl	8003f5c <HAL_GetTick>
 800517a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800517c:	e00e      	b.n	800519c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800517e:	f7fe feed 	bl	8003f5c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b19      	cmp	r3, #25
 800518a:	d907      	bls.n	800519c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	f043 0320 	orr.w	r3, r3, #32
 8005192:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800519a:	e006      	b.n	80051aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d1e9      	bne.n	800517e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d003      	beq.n	80051c0 <I2C_IsErrorOccurred+0xe0>
 80051b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0aa      	beq.n	8005116 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2220      	movs	r2, #32
 80051ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	f043 0304 	orr.w	r3, r3, #4
 80051d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005200:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005222:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f043 0302 	orr.w	r3, r3, #2
 800523a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800524c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01c      	beq.n	800528e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fdaf 	bl	8004db8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <I2C_IsErrorOccurred+0x1bc>)
 8005266:	400b      	ands	r3, r1
 8005268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800528e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005292:	4618      	mov	r0, r3
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	fe00e800 	.word	0xfe00e800

080052a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	4613      	mov	r3, r2
 80052b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052b8:	7a7b      	ldrb	r3, [r7, #9]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	0d5b      	lsrs	r3, r3, #21
 80052da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <I2C_TransferConfig+0x60>)
 80052e0:	430b      	orrs	r3, r1
 80052e2:	43db      	mvns	r3, r3
 80052e4:	ea02 0103 	and.w	r1, r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	03ff63ff 	.word	0x03ff63ff

08005304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b20      	cmp	r3, #32
 8005318:	d138      	bne.n	800538c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005324:	2302      	movs	r3, #2
 8005326:	e032      	b.n	800538e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005356:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d139      	bne.n	8005424 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e033      	b.n	8005426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2224      	movs	r2, #36	; 0x24
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d141      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005442:	4b4b      	ldr	r3, [pc, #300]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d131      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005450:	4b47      	ldr	r3, [pc, #284]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005456:	4a46      	ldr	r2, [pc, #280]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005460:	4b43      	ldr	r3, [pc, #268]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005468:	4a41      	ldr	r2, [pc, #260]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800546e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005470:	4b40      	ldr	r3, [pc, #256]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2232      	movs	r2, #50	; 0x32
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	0c9b      	lsrs	r3, r3, #18
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005486:	e002      	b.n	800548e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3b01      	subs	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800548e:	4b38      	ldr	r3, [pc, #224]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d102      	bne.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f2      	bne.n	8005488 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054a2:	4b33      	ldr	r3, [pc, #204]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ae:	d158      	bne.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e057      	b.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054b4:	4b2e      	ldr	r3, [pc, #184]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ba:	4a2d      	ldr	r2, [pc, #180]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054c4:	e04d      	b.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054cc:	d141      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ce:	4b28      	ldr	r3, [pc, #160]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d131      	bne.n	8005540 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e2:	4a23      	ldr	r2, [pc, #140]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ec:	4b20      	ldr	r3, [pc, #128]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054f4:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2232      	movs	r2, #50	; 0x32
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	0c9b      	lsrs	r3, r3, #18
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005512:	e002      	b.n	800551a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005526:	d102      	bne.n	800552e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f2      	bne.n	8005514 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800552e:	4b10      	ldr	r3, [pc, #64]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553a:	d112      	bne.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e011      	b.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005550:	e007      	b.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005552:	4b07      	ldr	r3, [pc, #28]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800555a:	4a05      	ldr	r2, [pc, #20]	; (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005560:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40007000 	.word	0x40007000
 8005574:	200009d8 	.word	0x200009d8
 8005578:	431bde83 	.word	0x431bde83

0800557c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4a04      	ldr	r2, [pc, #16]	; (8005598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800558a:	6093      	str	r3, [r2, #8]
}
 800558c:	bf00      	nop
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40007000 	.word	0x40007000

0800559c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e301      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d075      	beq.n	80056a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ba:	4ba3      	ldr	r3, [pc, #652]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055c4:	4ba0      	ldr	r3, [pc, #640]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d102      	bne.n	80055da <HAL_RCC_OscConfig+0x3e>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d002      	beq.n	80055e0 <HAL_RCC_OscConfig+0x44>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d10b      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	4b99      	ldr	r3, [pc, #612]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05b      	beq.n	80056a4 <HAL_RCC_OscConfig+0x108>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d157      	bne.n	80056a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e2dc      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d106      	bne.n	8005610 <HAL_RCC_OscConfig+0x74>
 8005602:	4b91      	ldr	r3, [pc, #580]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a90      	ldr	r2, [pc, #576]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e01d      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005618:	d10c      	bne.n	8005634 <HAL_RCC_OscConfig+0x98>
 800561a:	4b8b      	ldr	r3, [pc, #556]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a8a      	ldr	r2, [pc, #552]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b88      	ldr	r3, [pc, #544]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a87      	ldr	r2, [pc, #540]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e00b      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005634:	4b84      	ldr	r3, [pc, #528]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a83      	ldr	r2, [pc, #524]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 800563a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b81      	ldr	r3, [pc, #516]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a80      	ldr	r2, [pc, #512]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fe fc82 	bl	8003f5c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fe fc7e 	bl	8003f5c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2a1      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0xc0>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fe fc6e 	bl	8003f5c <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005684:	f7fe fc6a 	bl	8003f5c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e28d      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0xe8>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d075      	beq.n	800579e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b2:	4b65      	ldr	r3, [pc, #404]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056bc:	4b62      	ldr	r3, [pc, #392]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d102      	bne.n	80056d2 <HAL_RCC_OscConfig+0x136>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_OscConfig+0x13c>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d11f      	bne.n	8005718 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_OscConfig+0x154>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e260      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b55      	ldr	r3, [pc, #340]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	4952      	ldr	r1, [pc, #328]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005704:	4b51      	ldr	r3, [pc, #324]	; (800584c <HAL_RCC_OscConfig+0x2b0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f7fe fbdb 	bl	8003ec4 <HAL_InitTick>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d043      	beq.n	800579c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e24c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d023      	beq.n	8005768 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005720:	4b49      	ldr	r3, [pc, #292]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a48      	ldr	r2, [pc, #288]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe fc16 	bl	8003f5c <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005734:	f7fe fc12 	bl	8003f5c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e235      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005746:	4b40      	ldr	r3, [pc, #256]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005752:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	4939      	ldr	r1, [pc, #228]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005762:	4313      	orrs	r3, r2
 8005764:	604b      	str	r3, [r1, #4]
 8005766:	e01a      	b.n	800579e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005768:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a36      	ldr	r2, [pc, #216]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 800576e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fe fbf2 	bl	8003f5c <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577c:	f7fe fbee 	bl	8003f5c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e211      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x1e0>
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800579c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d03c      	beq.n	8005824 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01c      	beq.n	80057ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b2:	4b25      	ldr	r3, [pc, #148]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	4a23      	ldr	r2, [pc, #140]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c2:	f7fe fbcb 	bl	8003f5c <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ca:	f7fe fbc7 	bl	8003f5c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e1ea      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057dc:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0ef      	beq.n	80057ca <HAL_RCC_OscConfig+0x22e>
 80057ea:	e01b      	b.n	8005824 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ec:	4b16      	ldr	r3, [pc, #88]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fe fbae 	bl	8003f5c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005804:	f7fe fbaa 	bl	8003f5c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1cd      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ef      	bne.n	8005804 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80ab 	beq.w	8005988 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005832:	2300      	movs	r3, #0
 8005834:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005836:	4b04      	ldr	r3, [pc, #16]	; (8005848 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_RCC_OscConfig+0x2b4>
 8005842:	2301      	movs	r3, #1
 8005844:	e005      	b.n	8005852 <HAL_RCC_OscConfig+0x2b6>
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000
 800584c:	200009dc 	.word	0x200009dc
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005856:	4bad      	ldr	r3, [pc, #692]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585a:	4aac      	ldr	r2, [pc, #688]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 800585c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005860:	6593      	str	r3, [r2, #88]	; 0x58
 8005862:	4baa      	ldr	r3, [pc, #680]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800586e:	2301      	movs	r3, #1
 8005870:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005872:	4ba7      	ldr	r3, [pc, #668]	; (8005b10 <HAL_RCC_OscConfig+0x574>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d118      	bne.n	80058b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587e:	4ba4      	ldr	r3, [pc, #656]	; (8005b10 <HAL_RCC_OscConfig+0x574>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4aa3      	ldr	r2, [pc, #652]	; (8005b10 <HAL_RCC_OscConfig+0x574>)
 8005884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800588a:	f7fe fb67 	bl	8003f5c <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005892:	f7fe fb63 	bl	8003f5c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e186      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a4:	4b9a      	ldr	r3, [pc, #616]	; (8005b10 <HAL_RCC_OscConfig+0x574>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <HAL_RCC_OscConfig+0x32e>
 80058b8:	4b94      	ldr	r3, [pc, #592]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	4a93      	ldr	r2, [pc, #588]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c8:	e024      	b.n	8005914 <HAL_RCC_OscConfig+0x378>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d110      	bne.n	80058f4 <HAL_RCC_OscConfig+0x358>
 80058d2:	4b8e      	ldr	r3, [pc, #568]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	4a8c      	ldr	r2, [pc, #560]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058e2:	4b8a      	ldr	r3, [pc, #552]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	4a88      	ldr	r2, [pc, #544]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f2:	e00f      	b.n	8005914 <HAL_RCC_OscConfig+0x378>
 80058f4:	4b85      	ldr	r3, [pc, #532]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	4a84      	ldr	r2, [pc, #528]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005904:	4b81      	ldr	r3, [pc, #516]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	4a80      	ldr	r2, [pc, #512]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 800590c:	f023 0304 	bic.w	r3, r3, #4
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d016      	beq.n	800594a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fe fb1e 	bl	8003f5c <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fe fb1a 	bl	8003f5c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e13b      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593a:	4b74      	ldr	r3, [pc, #464]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ed      	beq.n	8005924 <HAL_RCC_OscConfig+0x388>
 8005948:	e015      	b.n	8005976 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fe fb07 	bl	8003f5c <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005950:	e00a      	b.n	8005968 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fe fb03 	bl	8003f5c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e124      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005968:	4b68      	ldr	r3, [pc, #416]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ed      	bne.n	8005952 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005976:	7ffb      	ldrb	r3, [r7, #31]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597c:	4b63      	ldr	r3, [pc, #396]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	4a62      	ldr	r2, [pc, #392]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005986:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d03c      	beq.n	8005a0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01c      	beq.n	80059d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800599c:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 800599e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a2:	4a5a      	ldr	r2, [pc, #360]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fe fad6 	bl	8003f5c <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059b4:	f7fe fad2 	bl	8003f5c <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0f5      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059c6:	4b51      	ldr	r3, [pc, #324]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80059c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ef      	beq.n	80059b4 <HAL_RCC_OscConfig+0x418>
 80059d4:	e01b      	b.n	8005a0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059d6:	4b4d      	ldr	r3, [pc, #308]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80059d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059dc:	4a4b      	ldr	r2, [pc, #300]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e6:	f7fe fab9 	bl	8003f5c <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ee:	f7fe fab5 	bl	8003f5c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0d8      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a00:	4b42      	ldr	r3, [pc, #264]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ef      	bne.n	80059ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80cc 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a18:	4b3c      	ldr	r3, [pc, #240]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	f000 8086 	beq.w	8005b32 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d15a      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2e:	4b37      	ldr	r3, [pc, #220]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a36      	ldr	r2, [pc, #216]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3a:	f7fe fa8f 	bl	8003f5c <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fe fa8b 	bl	8003f5c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e0ae      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a54:	4b2d      	ldr	r3, [pc, #180]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f0      	bne.n	8005a42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a60:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <HAL_RCC_OscConfig+0x578>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6a11      	ldr	r1, [r2, #32]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0112      	lsls	r2, r2, #4
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a7a:	0212      	lsls	r2, r2, #8
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a82:	0852      	lsrs	r2, r2, #1
 8005a84:	3a01      	subs	r2, #1
 8005a86:	0552      	lsls	r2, r2, #21
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	3a01      	subs	r2, #1
 8005a92:	0652      	lsls	r2, r2, #25
 8005a94:	4311      	orrs	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a9a:	06d2      	lsls	r2, r2, #27
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	491b      	ldr	r1, [pc, #108]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aa4:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab0:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fe fa4e 	bl	8003f5c <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fe fa4a 	bl	8003f5c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e06d      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x528>
 8005ae2:	e065      	b.n	8005bb0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <HAL_RCC_OscConfig+0x570>)
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fe fa34 	bl	8003f5c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005af6:	e00f      	b.n	8005b18 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fe fa30 	bl	8003f5c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d908      	bls.n	8005b18 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e053      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
 8005b0a:	bf00      	nop
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40007000 	.word	0x40007000
 8005b14:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b18:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_RCC_OscConfig+0x620>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e9      	bne.n	8005af8 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <HAL_RCC_OscConfig+0x620>)
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	4924      	ldr	r1, [pc, #144]	; (8005bbc <HAL_RCC_OscConfig+0x620>)
 8005b2a:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <HAL_RCC_OscConfig+0x624>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60cb      	str	r3, [r1, #12]
 8005b30:	e03e      	b.n	8005bb0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e039      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <HAL_RCC_OscConfig+0x620>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 0203 	and.w	r2, r3, #3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d12c      	bne.n	8005bac <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d123      	bne.n	8005bac <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d11b      	bne.n	8005bac <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d113      	bne.n	8005bac <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	3b01      	subs	r3, #1
 8005b92:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d109      	bne.n	8005bac <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	feeefffc 	.word	0xfeeefffc

08005bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e11e      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b91      	ldr	r3, [pc, #580]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d910      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b8e      	ldr	r3, [pc, #568]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 020f 	bic.w	r2, r3, #15
 8005bf2:	498c      	ldr	r1, [pc, #560]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b8a      	ldr	r3, [pc, #552]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e106      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d073      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d129      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c20:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0f4      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c30:	f000 f99e 	bl	8005f70 <RCC_GetSysClockFreqFromPLLSource>
 8005c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4a7c      	ldr	r2, [pc, #496]	; (8005e2c <HAL_RCC_ClockConfig+0x268>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d93f      	bls.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c3e:	4b7a      	ldr	r3, [pc, #488]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d033      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d12f      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c5e:	4b72      	ldr	r3, [pc, #456]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c66:	4a70      	ldr	r2, [pc, #448]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e024      	b.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0c6      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c8c:	4b66      	ldr	r3, [pc, #408]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0be      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c9c:	f000 f8ce 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4a61      	ldr	r2, [pc, #388]	; (8005e2c <HAL_RCC_ClockConfig+0x268>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d909      	bls.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005caa:	4b5f      	ldr	r3, [pc, #380]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb2:	4a5d      	ldr	r2, [pc, #372]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cbe:	4b5a      	ldr	r3, [pc, #360]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f023 0203 	bic.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4957      	ldr	r1, [pc, #348]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fe f944 	bl	8003f5c <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd8:	f7fe f940 	bl	8003f5c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e095      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 020c 	and.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1eb      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d023      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d18:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a42      	ldr	r2, [pc, #264]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d38:	4a3b      	ldr	r2, [pc, #236]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4936      	ldr	r1, [pc, #216]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d105      	bne.n	8005d66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d5a:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a32      	ldr	r2, [pc, #200]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d21d      	bcs.n	8005db0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d74:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 020f 	bic.w	r2, r3, #15
 8005d7c:	4929      	ldr	r1, [pc, #164]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d84:	f7fe f8ea 	bl	8003f5c <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8c:	f7fe f8e6 	bl	8003f5c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e03b      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da2:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1ed      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4917      	ldr	r1, [pc, #92]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	490f      	ldr	r1, [pc, #60]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dee:	f000 f825 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005df2:	4602      	mov	r2, r0
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	490c      	ldr	r1, [pc, #48]	; (8005e30 <HAL_RCC_ClockConfig+0x26c>)
 8005e00:	5ccb      	ldrb	r3, [r1, r3]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x270>)
 8005e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x274>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe f856 	bl	8003ec4 <HAL_InitTick>
 8005e18:	4603      	mov	r3, r0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40022000 	.word	0x40022000
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	04c4b400 	.word	0x04c4b400
 8005e30:	0800b600 	.word	0x0800b600
 8005e34:	200009d8 	.word	0x200009d8
 8005e38:	200009dc 	.word	0x200009dc

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e42:	4b2c      	ldr	r3, [pc, #176]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d102      	bne.n	8005e54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	e047      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e54:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e03e      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e66:	4b23      	ldr	r3, [pc, #140]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d136      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	3301      	adds	r3, #1
 8005e88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d10c      	bne.n	8005eaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e90:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9a:	68d2      	ldr	r2, [r2, #12]
 8005e9c:	0a12      	lsrs	r2, r2, #8
 8005e9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	617b      	str	r3, [r7, #20]
      break;
 8005ea8:	e00c      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eaa:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb4:	68d2      	ldr	r2, [r2, #12]
 8005eb6:	0a12      	lsrs	r2, r2, #8
 8005eb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
      break;
 8005ec2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	0e5b      	lsrs	r3, r3, #25
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e001      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ee4:	693b      	ldr	r3, [r7, #16]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	00f42400 	.word	0x00f42400
 8005efc:	007a1200 	.word	0x007a1200

08005f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	200009d8 	.word	0x200009d8

08005f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f1c:	f7ff fff0 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	4904      	ldr	r1, [pc, #16]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	0800b610 	.word	0x0800b610

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f48:	f7ff ffda 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0adb      	lsrs	r3, r3, #11
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4904      	ldr	r1, [pc, #16]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	0800b610 	.word	0x0800b610

08005f70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f76:	4b1e      	ldr	r3, [pc, #120]	; (8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f80:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d10c      	bne.n	8005fae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f94:	4a17      	ldr	r2, [pc, #92]	; (8005ff4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f9e:	68d2      	ldr	r2, [r2, #12]
 8005fa0:	0a12      	lsrs	r2, r2, #8
 8005fa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	617b      	str	r3, [r7, #20]
    break;
 8005fac:	e00c      	b.n	8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fb8:	68d2      	ldr	r2, [r2, #12]
 8005fba:	0a12      	lsrs	r2, r2, #8
 8005fbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]
    break;
 8005fc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	0e5b      	lsrs	r3, r3, #25
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fe2:	687b      	ldr	r3, [r7, #4]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	007a1200 	.word	0x007a1200
 8005ff8:	00f42400 	.word	0x00f42400

08005ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006004:	2300      	movs	r3, #0
 8006006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006008:	2300      	movs	r3, #0
 800600a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8098 	beq.w	800614a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800601a:	2300      	movs	r3, #0
 800601c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800601e:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602a:	4b40      	ldr	r3, [pc, #256]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	4a3f      	ldr	r2, [pc, #252]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006034:	6593      	str	r3, [r2, #88]	; 0x58
 8006036:	4b3d      	ldr	r3, [pc, #244]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006042:	2301      	movs	r3, #1
 8006044:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006046:	4b3a      	ldr	r3, [pc, #232]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a39      	ldr	r2, [pc, #228]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800604c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006052:	f7fd ff83 	bl	8003f5c <HAL_GetTick>
 8006056:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006058:	e009      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605a:	f7fd ff7f 	bl	8003f5c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d902      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	74fb      	strb	r3, [r7, #19]
        break;
 800606c:	e005      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606e:	4b30      	ldr	r3, [pc, #192]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ef      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800607a:	7cfb      	ldrb	r3, [r7, #19]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d159      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01e      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	429a      	cmp	r2, r3
 800609a:	d019      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800609c:	4b23      	ldr	r3, [pc, #140]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060a8:	4b20      	ldr	r3, [pc, #128]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060b8:	4b1c      	ldr	r3, [pc, #112]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d016      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060da:	f7fd ff3f 	bl	8003f5c <HAL_GetTick>
 80060de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e0:	e00b      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e2:	f7fd ff3b 	bl	8003f5c <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d902      	bls.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	74fb      	strb	r3, [r7, #19]
            break;
 80060f8:	e006      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060fa:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0ec      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	4903      	ldr	r1, [pc, #12]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006124:	e008      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	74bb      	strb	r3, [r7, #18]
 800612a:	e005      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800612c:	40021000 	.word	0x40021000
 8006130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006138:	7c7b      	ldrb	r3, [r7, #17]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d105      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800613e:	4ba6      	ldr	r3, [pc, #664]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	4aa5      	ldr	r2, [pc, #660]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006156:	4ba0      	ldr	r3, [pc, #640]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	f023 0203 	bic.w	r2, r3, #3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	499c      	ldr	r1, [pc, #624]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006178:	4b97      	ldr	r3, [pc, #604]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617e:	f023 020c 	bic.w	r2, r3, #12
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	4994      	ldr	r1, [pc, #592]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800619a:	4b8f      	ldr	r3, [pc, #572]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	498b      	ldr	r1, [pc, #556]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061bc:	4b86      	ldr	r3, [pc, #536]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	4983      	ldr	r1, [pc, #524]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061de:	4b7e      	ldr	r3, [pc, #504]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	497a      	ldr	r1, [pc, #488]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006200:	4b75      	ldr	r3, [pc, #468]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	4972      	ldr	r1, [pc, #456]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006222:	4b6d      	ldr	r3, [pc, #436]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	4969      	ldr	r1, [pc, #420]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006244:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	4961      	ldr	r1, [pc, #388]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006266:	4b5c      	ldr	r3, [pc, #368]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	4958      	ldr	r1, [pc, #352]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006288:	4b53      	ldr	r3, [pc, #332]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	4950      	ldr	r1, [pc, #320]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a6:	d105      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a8:	4b4b      	ldr	r3, [pc, #300]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a4a      	ldr	r2, [pc, #296]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d015      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062c0:	4b45      	ldr	r3, [pc, #276]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	4942      	ldr	r1, [pc, #264]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062de:	d105      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e0:	4b3d      	ldr	r3, [pc, #244]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a3c      	ldr	r2, [pc, #240]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d015      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062f8:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	4934      	ldr	r1, [pc, #208]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006316:	d105      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006318:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	4a2e      	ldr	r2, [pc, #184]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800631e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006322:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d015      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006330:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	4926      	ldr	r1, [pc, #152]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800634e:	d105      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006350:	4b21      	ldr	r3, [pc, #132]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800635a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d015      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006368:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	4918      	ldr	r1, [pc, #96]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006386:	d105      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4a12      	ldr	r2, [pc, #72]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800638e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006392:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d015      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063a0:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	490a      	ldr	r1, [pc, #40]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063be:	d105      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40021000 	.word	0x40021000

080063dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e042      	b.n	8006474 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fc fc2b 	bl	8002c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2224      	movs	r2, #36	; 0x24
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fe96 	bl	8007158 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fbf7 	bl	8006c20 <UART_SetConfig>
 8006432:	4603      	mov	r3, r0
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e01b      	b.n	8006474 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800644a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800645a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 ff15 	bl	800729c <UART_CheckIdleState>
 8006472:	4603      	mov	r3, r0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	2b20      	cmp	r3, #32
 8006494:	d17b      	bne.n	800658e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_UART_Transmit+0x26>
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e074      	b.n	8006590 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2221      	movs	r2, #33	; 0x21
 80064b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b6:	f7fd fd51 	bl	8003f5c <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	88fa      	ldrh	r2, [r7, #6]
 80064c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d4:	d108      	bne.n	80064e8 <HAL_UART_Transmit+0x6c>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e003      	b.n	80064f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064f0:	e030      	b.n	8006554 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 ff77 	bl	80073f0 <UART_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e03d      	b.n	8006590 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	3302      	adds	r3, #2
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	e007      	b.n	8006542 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	3301      	adds	r3, #1
 8006540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1c8      	bne.n	80064f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2200      	movs	r2, #0
 8006568:	2140      	movs	r1, #64	; 0x40
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 ff40 	bl	80073f0 <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e006      	b.n	8006590 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b0ba      	sub	sp, #232	; 0xe8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80065c6:	4013      	ands	r3, r2
 80065c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11b      	bne.n	800660c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d015      	beq.n	800660c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 82e3 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
      }
      return;
 800660a:	e2dd      	b.n	8006bc8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800660c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8123 	beq.w	800685c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006616:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800661a:	4b8d      	ldr	r3, [pc, #564]	; (8006850 <HAL_UART_IRQHandler+0x2b8>)
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006626:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <HAL_UART_IRQHandler+0x2bc>)
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8116 	beq.w	800685c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_UART_IRQHandler+0xc8>
 800663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d011      	beq.n	8006690 <HAL_UART_IRQHandler+0xf8>
 800666c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2202      	movs	r2, #2
 800667e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006686:	f043 0204 	orr.w	r2, r3, #4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d011      	beq.n	80066c0 <HAL_UART_IRQHandler+0x128>
 800669c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2204      	movs	r2, #4
 80066ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f043 0202 	orr.w	r2, r3, #2
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066dc:	4b5c      	ldr	r3, [pc, #368]	; (8006850 <HAL_UART_IRQHandler+0x2b8>)
 80066de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	f043 0208 	orr.w	r2, r3, #8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006704:	2b00      	cmp	r3, #0
 8006706:	d012      	beq.n	800672e <HAL_UART_IRQHandler+0x196>
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00c      	beq.n	800672e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800671c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8249 	beq.w	8006bcc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d013      	beq.n	800676e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d105      	bne.n	800675e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d005      	beq.n	8006792 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800678e:	2b00      	cmp	r3, #0
 8006790:	d054      	beq.n	800683c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fe99 	bl	80074ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d146      	bne.n	8006834 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1d9      	bne.n	80067a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d017      	beq.n	800682c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006802:	4a15      	ldr	r2, [pc, #84]	; (8006858 <HAL_UART_IRQHandler+0x2c0>)
 8006804:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680c:	4618      	mov	r0, r3
 800680e:	f7fd fd3b 	bl	8004288 <HAL_DMA_Abort_IT>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d019      	beq.n	800684c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006826:	4610      	mov	r0, r2
 8006828:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	e00f      	b.n	800684c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f9e1 	bl	8006bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006832:	e00b      	b.n	800684c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f9dd 	bl	8006bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683a:	e007      	b.n	800684c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9d9 	bl	8006bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800684a:	e1bf      	b.n	8006bcc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	bf00      	nop
    return;
 800684e:	e1bd      	b.n	8006bcc <HAL_UART_IRQHandler+0x634>
 8006850:	10000001 	.word	0x10000001
 8006854:	04000120 	.word	0x04000120
 8006858:	08007597 	.word	0x08007597

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006860:	2b01      	cmp	r3, #1
 8006862:	f040 8153 	bne.w	8006b0c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 814c 	beq.w	8006b0c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8145 	beq.w	8006b0c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2210      	movs	r2, #16
 8006888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	f040 80bb 	bne.w	8006a10 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 818f 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068bc:	429a      	cmp	r2, r3
 80068be:	f080 8187 	bcs.w	8006bd0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 8087 	bne.w	80069ee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800690a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800690e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1da      	bne.n	80068e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800693a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3308      	adds	r3, #8
 800694a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800694e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e1      	bne.n	800692a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800698a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800698c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e3      	bne.n	8006966 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069bc:	f023 0310 	bic.w	r3, r3, #16
 80069c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80069d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e4      	bne.n	80069ac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd fbf4 	bl	80041d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8fd 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a0e:	e0df      	b.n	8006bd0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80d1 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80cc 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e4      	bne.n	8006a3c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	623b      	str	r3, [r7, #32]
   return(result);
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e1      	bne.n	8006a72 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	617b      	str	r3, [r7, #20]
   return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e4      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f87f 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b0a:	e063      	b.n	8006bd4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <HAL_UART_IRQHandler+0x59e>
 8006b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fd72 	bl	8007618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b34:	e051      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d014      	beq.n	8006b6c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d03a      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
    }
    return;
 8006b6a:	e035      	b.n	8006bd8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_UART_IRQHandler+0x5f4>
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fd1c 	bl	80075c2 <UART_EndTransmit_IT>
    return;
 8006b8a:	e026      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d009      	beq.n	8006bac <HAL_UART_IRQHandler+0x614>
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fd4b 	bl	8007640 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006baa:	e016      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d010      	beq.n	8006bda <HAL_UART_IRQHandler+0x642>
 8006bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da0c      	bge.n	8006bda <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fd33 	bl	800762c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bc6:	e008      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
      return;
 8006bc8:	bf00      	nop
 8006bca:	e006      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
    return;
 8006bcc:	bf00      	nop
 8006bce:	e004      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
      return;
 8006bd0:	bf00      	nop
 8006bd2:	e002      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
      return;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <HAL_UART_IRQHandler+0x642>
    return;
 8006bd8:	bf00      	nop
  }
}
 8006bda:	37e8      	adds	r7, #232	; 0xe8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c20:	b5b0      	push	{r4, r5, r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4baf      	ldr	r3, [pc, #700]	; (8006f08 <UART_SetConfig+0x2e8>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	69f9      	ldr	r1, [r7, #28]
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4aa4      	ldr	r2, [pc, #656]	; (8006f0c <UART_SetConfig+0x2ec>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	f023 010f 	bic.w	r1, r3, #15
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a95      	ldr	r2, [pc, #596]	; (8006f10 <UART_SetConfig+0x2f0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d120      	bne.n	8006d02 <UART_SetConfig+0xe2>
 8006cc0:	4b94      	ldr	r3, [pc, #592]	; (8006f14 <UART_SetConfig+0x2f4>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d816      	bhi.n	8006cfc <UART_SetConfig+0xdc>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0xb4>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006cf1 	.word	0x08006cf1
 8006cdc:	08006ceb 	.word	0x08006ceb
 8006ce0:	08006cf7 	.word	0x08006cf7
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	76fb      	strb	r3, [r7, #27]
 8006ce8:	e0bc      	b.n	8006e64 <UART_SetConfig+0x244>
 8006cea:	2302      	movs	r3, #2
 8006cec:	76fb      	strb	r3, [r7, #27]
 8006cee:	e0b9      	b.n	8006e64 <UART_SetConfig+0x244>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	76fb      	strb	r3, [r7, #27]
 8006cf4:	e0b6      	b.n	8006e64 <UART_SetConfig+0x244>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	76fb      	strb	r3, [r7, #27]
 8006cfa:	e0b3      	b.n	8006e64 <UART_SetConfig+0x244>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	76fb      	strb	r3, [r7, #27]
 8006d00:	e0b0      	b.n	8006e64 <UART_SetConfig+0x244>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a84      	ldr	r2, [pc, #528]	; (8006f18 <UART_SetConfig+0x2f8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d132      	bne.n	8006d72 <UART_SetConfig+0x152>
 8006d0c:	4b81      	ldr	r3, [pc, #516]	; (8006f14 <UART_SetConfig+0x2f4>)
 8006d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b0c      	cmp	r3, #12
 8006d18:	d828      	bhi.n	8006d6c <UART_SetConfig+0x14c>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x100>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d55 	.word	0x08006d55
 8006d24:	08006d6d 	.word	0x08006d6d
 8006d28:	08006d6d 	.word	0x08006d6d
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d61 	.word	0x08006d61
 8006d34:	08006d6d 	.word	0x08006d6d
 8006d38:	08006d6d 	.word	0x08006d6d
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006d5b 	.word	0x08006d5b
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d6d 	.word	0x08006d6d
 8006d50:	08006d67 	.word	0x08006d67
 8006d54:	2300      	movs	r3, #0
 8006d56:	76fb      	strb	r3, [r7, #27]
 8006d58:	e084      	b.n	8006e64 <UART_SetConfig+0x244>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	76fb      	strb	r3, [r7, #27]
 8006d5e:	e081      	b.n	8006e64 <UART_SetConfig+0x244>
 8006d60:	2304      	movs	r3, #4
 8006d62:	76fb      	strb	r3, [r7, #27]
 8006d64:	e07e      	b.n	8006e64 <UART_SetConfig+0x244>
 8006d66:	2308      	movs	r3, #8
 8006d68:	76fb      	strb	r3, [r7, #27]
 8006d6a:	e07b      	b.n	8006e64 <UART_SetConfig+0x244>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	76fb      	strb	r3, [r7, #27]
 8006d70:	e078      	b.n	8006e64 <UART_SetConfig+0x244>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a69      	ldr	r2, [pc, #420]	; (8006f1c <UART_SetConfig+0x2fc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d120      	bne.n	8006dbe <UART_SetConfig+0x19e>
 8006d7c:	4b65      	ldr	r3, [pc, #404]	; (8006f14 <UART_SetConfig+0x2f4>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d86:	2b30      	cmp	r3, #48	; 0x30
 8006d88:	d013      	beq.n	8006db2 <UART_SetConfig+0x192>
 8006d8a:	2b30      	cmp	r3, #48	; 0x30
 8006d8c:	d814      	bhi.n	8006db8 <UART_SetConfig+0x198>
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d009      	beq.n	8006da6 <UART_SetConfig+0x186>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d810      	bhi.n	8006db8 <UART_SetConfig+0x198>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <UART_SetConfig+0x180>
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d006      	beq.n	8006dac <UART_SetConfig+0x18c>
 8006d9e:	e00b      	b.n	8006db8 <UART_SetConfig+0x198>
 8006da0:	2300      	movs	r3, #0
 8006da2:	76fb      	strb	r3, [r7, #27]
 8006da4:	e05e      	b.n	8006e64 <UART_SetConfig+0x244>
 8006da6:	2302      	movs	r3, #2
 8006da8:	76fb      	strb	r3, [r7, #27]
 8006daa:	e05b      	b.n	8006e64 <UART_SetConfig+0x244>
 8006dac:	2304      	movs	r3, #4
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	e058      	b.n	8006e64 <UART_SetConfig+0x244>
 8006db2:	2308      	movs	r3, #8
 8006db4:	76fb      	strb	r3, [r7, #27]
 8006db6:	e055      	b.n	8006e64 <UART_SetConfig+0x244>
 8006db8:	2310      	movs	r3, #16
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e052      	b.n	8006e64 <UART_SetConfig+0x244>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a57      	ldr	r2, [pc, #348]	; (8006f20 <UART_SetConfig+0x300>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d120      	bne.n	8006e0a <UART_SetConfig+0x1ea>
 8006dc8:	4b52      	ldr	r3, [pc, #328]	; (8006f14 <UART_SetConfig+0x2f4>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd4:	d013      	beq.n	8006dfe <UART_SetConfig+0x1de>
 8006dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd8:	d814      	bhi.n	8006e04 <UART_SetConfig+0x1e4>
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d009      	beq.n	8006df2 <UART_SetConfig+0x1d2>
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d810      	bhi.n	8006e04 <UART_SetConfig+0x1e4>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <UART_SetConfig+0x1cc>
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d006      	beq.n	8006df8 <UART_SetConfig+0x1d8>
 8006dea:	e00b      	b.n	8006e04 <UART_SetConfig+0x1e4>
 8006dec:	2300      	movs	r3, #0
 8006dee:	76fb      	strb	r3, [r7, #27]
 8006df0:	e038      	b.n	8006e64 <UART_SetConfig+0x244>
 8006df2:	2302      	movs	r3, #2
 8006df4:	76fb      	strb	r3, [r7, #27]
 8006df6:	e035      	b.n	8006e64 <UART_SetConfig+0x244>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	76fb      	strb	r3, [r7, #27]
 8006dfc:	e032      	b.n	8006e64 <UART_SetConfig+0x244>
 8006dfe:	2308      	movs	r3, #8
 8006e00:	76fb      	strb	r3, [r7, #27]
 8006e02:	e02f      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e04:	2310      	movs	r3, #16
 8006e06:	76fb      	strb	r3, [r7, #27]
 8006e08:	e02c      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a3f      	ldr	r2, [pc, #252]	; (8006f0c <UART_SetConfig+0x2ec>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d125      	bne.n	8006e60 <UART_SetConfig+0x240>
 8006e14:	4b3f      	ldr	r3, [pc, #252]	; (8006f14 <UART_SetConfig+0x2f4>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e22:	d017      	beq.n	8006e54 <UART_SetConfig+0x234>
 8006e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e28:	d817      	bhi.n	8006e5a <UART_SetConfig+0x23a>
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d00b      	beq.n	8006e48 <UART_SetConfig+0x228>
 8006e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e34:	d811      	bhi.n	8006e5a <UART_SetConfig+0x23a>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <UART_SetConfig+0x222>
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3e:	d006      	beq.n	8006e4e <UART_SetConfig+0x22e>
 8006e40:	e00b      	b.n	8006e5a <UART_SetConfig+0x23a>
 8006e42:	2300      	movs	r3, #0
 8006e44:	76fb      	strb	r3, [r7, #27]
 8006e46:	e00d      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	76fb      	strb	r3, [r7, #27]
 8006e4c:	e00a      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e4e:	2304      	movs	r3, #4
 8006e50:	76fb      	strb	r3, [r7, #27]
 8006e52:	e007      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e54:	2308      	movs	r3, #8
 8006e56:	76fb      	strb	r3, [r7, #27]
 8006e58:	e004      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	76fb      	strb	r3, [r7, #27]
 8006e5e:	e001      	b.n	8006e64 <UART_SetConfig+0x244>
 8006e60:	2310      	movs	r3, #16
 8006e62:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a28      	ldr	r2, [pc, #160]	; (8006f0c <UART_SetConfig+0x2ec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	f040 809e 	bne.w	8006fac <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e70:	7efb      	ldrb	r3, [r7, #27]
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d823      	bhi.n	8006ebe <UART_SetConfig+0x29e>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0x25c>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ebf 	.word	0x08006ebf
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006ebf 	.word	0x08006ebf
 8006e8c:	08006eaf 	.word	0x08006eaf
 8006e90:	08006ebf 	.word	0x08006ebf
 8006e94:	08006ebf 	.word	0x08006ebf
 8006e98:	08006ebf 	.word	0x08006ebf
 8006e9c:	08006eb7 	.word	0x08006eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7ff f83a 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8006ea4:	6178      	str	r0, [r7, #20]
        break;
 8006ea6:	e00f      	b.n	8006ec8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea8:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <UART_SetConfig+0x304>)
 8006eaa:	617b      	str	r3, [r7, #20]
        break;
 8006eac:	e00c      	b.n	8006ec8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eae:	f7fe ffc5 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8006eb2:	6178      	str	r0, [r7, #20]
        break;
 8006eb4:	e008      	b.n	8006ec8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	617b      	str	r3, [r7, #20]
        break;
 8006ebc:	e004      	b.n	8006ec8 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	76bb      	strb	r3, [r7, #26]
        break;
 8006ec6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 812c 	beq.w	8007128 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <UART_SetConfig+0x308>)
 8006ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eda:	461a      	mov	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	4413      	add	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d305      	bcc.n	8006f00 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d915      	bls.n	8006f2c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	76bb      	strb	r3, [r7, #26]
 8006f04:	e110      	b.n	8007128 <UART_SetConfig+0x508>
 8006f06:	bf00      	nop
 8006f08:	cfff69f3 	.word	0xcfff69f3
 8006f0c:	40008000 	.word	0x40008000
 8006f10:	40013800 	.word	0x40013800
 8006f14:	40021000 	.word	0x40021000
 8006f18:	40004400 	.word	0x40004400
 8006f1c:	40004800 	.word	0x40004800
 8006f20:	40004c00 	.word	0x40004c00
 8006f24:	00f42400 	.word	0x00f42400
 8006f28:	0800b618 	.word	0x0800b618
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f04f 0100 	mov.w	r1, #0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	4a85      	ldr	r2, [pc, #532]	; (8007150 <UART_SetConfig+0x530>)
 8006f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	f7f9 fa0c 	bl	8000360 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	020b      	lsls	r3, r1, #8
 8006f5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f5e:	0202      	lsls	r2, r0, #8
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	6849      	ldr	r1, [r1, #4]
 8006f64:	0849      	lsrs	r1, r1, #1
 8006f66:	4608      	mov	r0, r1
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	1814      	adds	r4, r2, r0
 8006f6e:	eb43 0501 	adc.w	r5, r3, r1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 f9ee 	bl	8000360 <__aeabi_uldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4613      	mov	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f92:	d308      	bcc.n	8006fa6 <UART_SetConfig+0x386>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9a:	d204      	bcs.n	8006fa6 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	e0c0      	b.n	8007128 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	76bb      	strb	r3, [r7, #26]
 8006faa:	e0bd      	b.n	8007128 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb4:	d164      	bne.n	8007080 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006fb6:	7efb      	ldrb	r3, [r7, #27]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d828      	bhi.n	800700e <UART_SetConfig+0x3ee>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x3a4>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fe ff96 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8006fec:	6178      	str	r0, [r7, #20]
        break;
 8006fee:	e013      	b.n	8007018 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fe ffa8 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	6178      	str	r0, [r7, #20]
        break;
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b56      	ldr	r3, [pc, #344]	; (8007154 <UART_SetConfig+0x534>)
 8006ffa:	617b      	str	r3, [r7, #20]
        break;
 8006ffc:	e00c      	b.n	8007018 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fe ff1d 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8007002:	6178      	str	r0, [r7, #20]
        break;
 8007004:	e008      	b.n	8007018 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	617b      	str	r3, [r7, #20]
        break;
 800700c:	e004      	b.n	8007018 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	76bb      	strb	r3, [r7, #26]
        break;
 8007016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8084 	beq.w	8007128 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	4a4a      	ldr	r2, [pc, #296]	; (8007150 <UART_SetConfig+0x530>)
 8007026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800702a:	461a      	mov	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007032:	005a      	lsls	r2, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	441a      	add	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b0f      	cmp	r3, #15
 800704a:	d916      	bls.n	800707a <UART_SetConfig+0x45a>
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007052:	d212      	bcs.n	800707a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f023 030f 	bic.w	r3, r3, #15
 800705c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	b29a      	uxth	r2, r3
 800706a:	89fb      	ldrh	r3, [r7, #14]
 800706c:	4313      	orrs	r3, r2
 800706e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	89fa      	ldrh	r2, [r7, #14]
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e056      	b.n	8007128 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	76bb      	strb	r3, [r7, #26]
 800707e:	e053      	b.n	8007128 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007080:	7efb      	ldrb	r3, [r7, #27]
 8007082:	2b08      	cmp	r3, #8
 8007084:	d827      	bhi.n	80070d6 <UART_SetConfig+0x4b6>
 8007086:	a201      	add	r2, pc, #4	; (adr r2, 800708c <UART_SetConfig+0x46c>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070c1 	.word	0x080070c1
 8007098:	080070d7 	.word	0x080070d7
 800709c:	080070c7 	.word	0x080070c7
 80070a0:	080070d7 	.word	0x080070d7
 80070a4:	080070d7 	.word	0x080070d7
 80070a8:	080070d7 	.word	0x080070d7
 80070ac:	080070cf 	.word	0x080070cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b0:	f7fe ff32 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 80070b4:	6178      	str	r0, [r7, #20]
        break;
 80070b6:	e013      	b.n	80070e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b8:	f7fe ff44 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 80070bc:	6178      	str	r0, [r7, #20]
        break;
 80070be:	e00f      	b.n	80070e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c0:	4b24      	ldr	r3, [pc, #144]	; (8007154 <UART_SetConfig+0x534>)
 80070c2:	617b      	str	r3, [r7, #20]
        break;
 80070c4:	e00c      	b.n	80070e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c6:	f7fe feb9 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 80070ca:	6178      	str	r0, [r7, #20]
        break;
 80070cc:	e008      	b.n	80070e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d2:	617b      	str	r3, [r7, #20]
        break;
 80070d4:	e004      	b.n	80070e0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	76bb      	strb	r3, [r7, #26]
        break;
 80070de:	bf00      	nop
    }

    if (pclk != 0U)
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	4a19      	ldr	r2, [pc, #100]	; (8007150 <UART_SetConfig+0x530>)
 80070ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f0:	461a      	mov	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	441a      	add	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	fbb2 f3f3 	udiv	r3, r2, r3
 8007108:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b0f      	cmp	r3, #15
 800710e:	d909      	bls.n	8007124 <UART_SetConfig+0x504>
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007116:	d205      	bcs.n	8007124 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60da      	str	r2, [r3, #12]
 8007122:	e001      	b.n	8007128 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007144:	7ebb      	ldrb	r3, [r7, #26]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bdb0      	pop	{r4, r5, r7, pc}
 800714e:	bf00      	nop
 8007150:	0800b618 	.word	0x0800b618
 8007154:	00f42400 	.word	0x00f42400

08007158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01a      	beq.n	800726e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007256:	d10a      	bne.n	800726e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b098      	sub	sp, #96	; 0x60
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ac:	f7fc fe56 	bl	8003f5c <HAL_GetTick>
 80072b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d12f      	bne.n	8007320 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c8:	2200      	movs	r2, #0
 80072ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f88e 	bl	80073f0 <UART_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d022      	beq.n	8007320 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ee:	653b      	str	r3, [r7, #80]	; 0x50
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
 80072fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e6      	bne.n	80072da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e063      	b.n	80073e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b04      	cmp	r3, #4
 800732c:	d149      	bne.n	80073c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007336:	2200      	movs	r2, #0
 8007338:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f857 	bl	80073f0 <UART_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d03c      	beq.n	80073c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	623b      	str	r3, [r7, #32]
   return(result);
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800735c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007366:	633b      	str	r3, [r7, #48]	; 0x30
 8007368:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800736c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e6      	bne.n	8007348 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	60fb      	str	r3, [r7, #12]
   return(result);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	64bb      	str	r3, [r7, #72]	; 0x48
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739a:	61fa      	str	r2, [r7, #28]
 800739c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	69b9      	ldr	r1, [r7, #24]
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	617b      	str	r3, [r7, #20]
   return(result);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e5      	bne.n	800737a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e012      	b.n	80073e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3758      	adds	r7, #88	; 0x58
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007400:	e04f      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d04b      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740a:	f7fc fda7 	bl	8003f5c <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <UART_WaitOnFlagUntilTimeout+0x30>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e04e      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d037      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d034      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d031      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d110      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2208      	movs	r2, #8
 8007452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f838 	bl	80074ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2208      	movs	r2, #8
 800745e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e029      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747c:	d111      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f81e 	bl	80074ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e00f      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d0a0      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b095      	sub	sp, #84	; 0x54
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f0:	643b      	str	r3, [r7, #64]	; 0x40
 80074f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	61fb      	str	r3, [r7, #28]
   return(result);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800752e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e3      	bne.n	8007504 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d118      	bne.n	8007576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	60bb      	str	r3, [r7, #8]
   return(result);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f023 0310 	bic.w	r3, r3, #16
 8007558:	647b      	str	r3, [r7, #68]	; 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	613b      	str	r3, [r7, #16]
   return(result);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e6      	bne.n	8007544 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	675a      	str	r2, [r3, #116]	; 0x74
}
 800758a:	bf00      	nop
 800758c:	3754      	adds	r7, #84	; 0x54
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fb1d 	bl	8006bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b088      	sub	sp, #32
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6979      	ldr	r1, [r7, #20]
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	613b      	str	r3, [r7, #16]
   return(result);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fae8 	bl	8006be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UARTEx_DisableFifoMode+0x16>
 8007666:	2302      	movs	r3, #2
 8007668:	e027      	b.n	80076ba <HAL_UARTEx_DisableFifoMode+0x66>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	; 0x24
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076da:	2302      	movs	r3, #2
 80076dc:	e02d      	b.n	800773a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2224      	movs	r2, #36	; 0x24
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0201 	bic.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f850 	bl	80077c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007756:	2302      	movs	r3, #2
 8007758:	e02d      	b.n	80077b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	; 0x24
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f812 	bl	80077c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d108      	bne.n	80077e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077e0:	e031      	b.n	8007846 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077e2:	2308      	movs	r3, #8
 80077e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077e6:	2308      	movs	r3, #8
 80077e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	0e5b      	lsrs	r3, r3, #25
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	0f5b      	lsrs	r3, r3, #29
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	7b3a      	ldrb	r2, [r7, #12]
 800780e:	4911      	ldr	r1, [pc, #68]	; (8007854 <UARTEx_SetNbDataToProcess+0x94>)
 8007810:	5c8a      	ldrb	r2, [r1, r2]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007816:	7b3a      	ldrb	r2, [r7, #12]
 8007818:	490f      	ldr	r1, [pc, #60]	; (8007858 <UARTEx_SetNbDataToProcess+0x98>)
 800781a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800781c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	7b7a      	ldrb	r2, [r7, #13]
 800782c:	4909      	ldr	r1, [pc, #36]	; (8007854 <UARTEx_SetNbDataToProcess+0x94>)
 800782e:	5c8a      	ldrb	r2, [r1, r2]
 8007830:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007834:	7b7a      	ldrb	r2, [r7, #13]
 8007836:	4908      	ldr	r1, [pc, #32]	; (8007858 <UARTEx_SetNbDataToProcess+0x98>)
 8007838:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800783a:	fb93 f3f2 	sdiv	r3, r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	0800b630 	.word	0x0800b630
 8007858:	0800b638 	.word	0x0800b638

0800785c <__errno>:
 800785c:	4b01      	ldr	r3, [pc, #4]	; (8007864 <__errno+0x8>)
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	200009e4 	.word	0x200009e4

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4d0d      	ldr	r5, [pc, #52]	; (80078a0 <__libc_init_array+0x38>)
 800786c:	4c0d      	ldr	r4, [pc, #52]	; (80078a4 <__libc_init_array+0x3c>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	2600      	movs	r6, #0
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	4d0b      	ldr	r5, [pc, #44]	; (80078a8 <__libc_init_array+0x40>)
 800787a:	4c0c      	ldr	r4, [pc, #48]	; (80078ac <__libc_init_array+0x44>)
 800787c:	f001 fa1c 	bl	8008cb8 <_init>
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	2600      	movs	r6, #0
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	0800b6e0 	.word	0x0800b6e0
 80078a4:	0800b6e0 	.word	0x0800b6e0
 80078a8:	0800b6e0 	.word	0x0800b6e0
 80078ac:	0800b6e4 	.word	0x0800b6e4

080078b0 <memcpy>:
 80078b0:	440a      	add	r2, r1
 80078b2:	4291      	cmp	r1, r2
 80078b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078b8:	d100      	bne.n	80078bc <memcpy+0xc>
 80078ba:	4770      	bx	lr
 80078bc:	b510      	push	{r4, lr}
 80078be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c6:	4291      	cmp	r1, r2
 80078c8:	d1f9      	bne.n	80078be <memcpy+0xe>
 80078ca:	bd10      	pop	{r4, pc}

080078cc <memset>:
 80078cc:	4402      	add	r2, r0
 80078ce:	4603      	mov	r3, r0
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d100      	bne.n	80078d6 <memset+0xa>
 80078d4:	4770      	bx	lr
 80078d6:	f803 1b01 	strb.w	r1, [r3], #1
 80078da:	e7f9      	b.n	80078d0 <memset+0x4>

080078dc <iprintf>:
 80078dc:	b40f      	push	{r0, r1, r2, r3}
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <iprintf+0x2c>)
 80078e0:	b513      	push	{r0, r1, r4, lr}
 80078e2:	681c      	ldr	r4, [r3, #0]
 80078e4:	b124      	cbz	r4, 80078f0 <iprintf+0x14>
 80078e6:	69a3      	ldr	r3, [r4, #24]
 80078e8:	b913      	cbnz	r3, 80078f0 <iprintf+0x14>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fa94 	bl	8007e18 <__sinit>
 80078f0:	ab05      	add	r3, sp, #20
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	68a1      	ldr	r1, [r4, #8]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fdc1 	bl	8008480 <_vfiprintf_r>
 80078fe:	b002      	add	sp, #8
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	b004      	add	sp, #16
 8007906:	4770      	bx	lr
 8007908:	200009e4 	.word	0x200009e4

0800790c <putchar>:
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <putchar+0x28>)
 800790e:	b513      	push	{r0, r1, r4, lr}
 8007910:	681c      	ldr	r4, [r3, #0]
 8007912:	4601      	mov	r1, r0
 8007914:	b134      	cbz	r4, 8007924 <putchar+0x18>
 8007916:	69a3      	ldr	r3, [r4, #24]
 8007918:	b923      	cbnz	r3, 8007924 <putchar+0x18>
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fa7b 	bl	8007e18 <__sinit>
 8007922:	9901      	ldr	r1, [sp, #4]
 8007924:	68a2      	ldr	r2, [r4, #8]
 8007926:	4620      	mov	r0, r4
 8007928:	b002      	add	sp, #8
 800792a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792e:	f001 b86b 	b.w	8008a08 <_putc_r>
 8007932:	bf00      	nop
 8007934:	200009e4 	.word	0x200009e4

08007938 <_puts_r>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	460e      	mov	r6, r1
 800793c:	4605      	mov	r5, r0
 800793e:	b118      	cbz	r0, 8007948 <_puts_r+0x10>
 8007940:	6983      	ldr	r3, [r0, #24]
 8007942:	b90b      	cbnz	r3, 8007948 <_puts_r+0x10>
 8007944:	f000 fa68 	bl	8007e18 <__sinit>
 8007948:	69ab      	ldr	r3, [r5, #24]
 800794a:	68ac      	ldr	r4, [r5, #8]
 800794c:	b913      	cbnz	r3, 8007954 <_puts_r+0x1c>
 800794e:	4628      	mov	r0, r5
 8007950:	f000 fa62 	bl	8007e18 <__sinit>
 8007954:	4b2c      	ldr	r3, [pc, #176]	; (8007a08 <_puts_r+0xd0>)
 8007956:	429c      	cmp	r4, r3
 8007958:	d120      	bne.n	800799c <_puts_r+0x64>
 800795a:	686c      	ldr	r4, [r5, #4]
 800795c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800795e:	07db      	lsls	r3, r3, #31
 8007960:	d405      	bmi.n	800796e <_puts_r+0x36>
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	0598      	lsls	r0, r3, #22
 8007966:	d402      	bmi.n	800796e <_puts_r+0x36>
 8007968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800796a:	f000 faf3 	bl	8007f54 <__retarget_lock_acquire_recursive>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	0719      	lsls	r1, r3, #28
 8007972:	d51d      	bpl.n	80079b0 <_puts_r+0x78>
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	b1db      	cbz	r3, 80079b0 <_puts_r+0x78>
 8007978:	3e01      	subs	r6, #1
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007980:	3b01      	subs	r3, #1
 8007982:	60a3      	str	r3, [r4, #8]
 8007984:	bb39      	cbnz	r1, 80079d6 <_puts_r+0x9e>
 8007986:	2b00      	cmp	r3, #0
 8007988:	da38      	bge.n	80079fc <_puts_r+0xc4>
 800798a:	4622      	mov	r2, r4
 800798c:	210a      	movs	r1, #10
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f868 	bl	8007a64 <__swbuf_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d011      	beq.n	80079bc <_puts_r+0x84>
 8007998:	250a      	movs	r5, #10
 800799a:	e011      	b.n	80079c0 <_puts_r+0x88>
 800799c:	4b1b      	ldr	r3, [pc, #108]	; (8007a0c <_puts_r+0xd4>)
 800799e:	429c      	cmp	r4, r3
 80079a0:	d101      	bne.n	80079a6 <_puts_r+0x6e>
 80079a2:	68ac      	ldr	r4, [r5, #8]
 80079a4:	e7da      	b.n	800795c <_puts_r+0x24>
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <_puts_r+0xd8>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	bf08      	it	eq
 80079ac:	68ec      	ldreq	r4, [r5, #12]
 80079ae:	e7d5      	b.n	800795c <_puts_r+0x24>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 f8a8 	bl	8007b08 <__swsetup_r>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0dd      	beq.n	8007978 <_puts_r+0x40>
 80079bc:	f04f 35ff 	mov.w	r5, #4294967295
 80079c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079c2:	07da      	lsls	r2, r3, #31
 80079c4:	d405      	bmi.n	80079d2 <_puts_r+0x9a>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	059b      	lsls	r3, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_puts_r+0x9a>
 80079cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ce:	f000 fac2 	bl	8007f56 <__retarget_lock_release_recursive>
 80079d2:	4628      	mov	r0, r5
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da04      	bge.n	80079e4 <_puts_r+0xac>
 80079da:	69a2      	ldr	r2, [r4, #24]
 80079dc:	429a      	cmp	r2, r3
 80079de:	dc06      	bgt.n	80079ee <_puts_r+0xb6>
 80079e0:	290a      	cmp	r1, #10
 80079e2:	d004      	beq.n	80079ee <_puts_r+0xb6>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	6022      	str	r2, [r4, #0]
 80079ea:	7019      	strb	r1, [r3, #0]
 80079ec:	e7c5      	b.n	800797a <_puts_r+0x42>
 80079ee:	4622      	mov	r2, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	f000 f837 	bl	8007a64 <__swbuf_r>
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1bf      	bne.n	800797a <_puts_r+0x42>
 80079fa:	e7df      	b.n	80079bc <_puts_r+0x84>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	250a      	movs	r5, #10
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	701d      	strb	r5, [r3, #0]
 8007a06:	e7db      	b.n	80079c0 <_puts_r+0x88>
 8007a08:	0800b664 	.word	0x0800b664
 8007a0c:	0800b684 	.word	0x0800b684
 8007a10:	0800b644 	.word	0x0800b644

08007a14 <puts>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <puts+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f7ff bf8d 	b.w	8007938 <_puts_r>
 8007a1e:	bf00      	nop
 8007a20:	200009e4 	.word	0x200009e4

08007a24 <siprintf>:
 8007a24:	b40e      	push	{r1, r2, r3}
 8007a26:	b500      	push	{lr}
 8007a28:	b09c      	sub	sp, #112	; 0x70
 8007a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a2c:	9002      	str	r0, [sp, #8]
 8007a2e:	9006      	str	r0, [sp, #24]
 8007a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a34:	4809      	ldr	r0, [pc, #36]	; (8007a5c <siprintf+0x38>)
 8007a36:	9107      	str	r1, [sp, #28]
 8007a38:	9104      	str	r1, [sp, #16]
 8007a3a:	4909      	ldr	r1, [pc, #36]	; (8007a60 <siprintf+0x3c>)
 8007a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a40:	9105      	str	r1, [sp, #20]
 8007a42:	6800      	ldr	r0, [r0, #0]
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	a902      	add	r1, sp, #8
 8007a48:	f000 fbf0 	bl	800822c <_svfiprintf_r>
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	b01c      	add	sp, #112	; 0x70
 8007a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a58:	b003      	add	sp, #12
 8007a5a:	4770      	bx	lr
 8007a5c:	200009e4 	.word	0x200009e4
 8007a60:	ffff0208 	.word	0xffff0208

08007a64 <__swbuf_r>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	460e      	mov	r6, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	b118      	cbz	r0, 8007a76 <__swbuf_r+0x12>
 8007a6e:	6983      	ldr	r3, [r0, #24]
 8007a70:	b90b      	cbnz	r3, 8007a76 <__swbuf_r+0x12>
 8007a72:	f000 f9d1 	bl	8007e18 <__sinit>
 8007a76:	4b21      	ldr	r3, [pc, #132]	; (8007afc <__swbuf_r+0x98>)
 8007a78:	429c      	cmp	r4, r3
 8007a7a:	d12b      	bne.n	8007ad4 <__swbuf_r+0x70>
 8007a7c:	686c      	ldr	r4, [r5, #4]
 8007a7e:	69a3      	ldr	r3, [r4, #24]
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	071a      	lsls	r2, r3, #28
 8007a86:	d52f      	bpl.n	8007ae8 <__swbuf_r+0x84>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	b36b      	cbz	r3, 8007ae8 <__swbuf_r+0x84>
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	1ac0      	subs	r0, r0, r3
 8007a92:	6963      	ldr	r3, [r4, #20]
 8007a94:	b2f6      	uxtb	r6, r6
 8007a96:	4283      	cmp	r3, r0
 8007a98:	4637      	mov	r7, r6
 8007a9a:	dc04      	bgt.n	8007aa6 <__swbuf_r+0x42>
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 f926 	bl	8007cf0 <_fflush_r>
 8007aa4:	bb30      	cbnz	r0, 8007af4 <__swbuf_r+0x90>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	701e      	strb	r6, [r3, #0]
 8007ab4:	6963      	ldr	r3, [r4, #20]
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	4283      	cmp	r3, r0
 8007aba:	d004      	beq.n	8007ac6 <__swbuf_r+0x62>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d506      	bpl.n	8007ad0 <__swbuf_r+0x6c>
 8007ac2:	2e0a      	cmp	r6, #10
 8007ac4:	d104      	bne.n	8007ad0 <__swbuf_r+0x6c>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 f911 	bl	8007cf0 <_fflush_r>
 8007ace:	b988      	cbnz	r0, 8007af4 <__swbuf_r+0x90>
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <__swbuf_r+0x9c>)
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d101      	bne.n	8007ade <__swbuf_r+0x7a>
 8007ada:	68ac      	ldr	r4, [r5, #8]
 8007adc:	e7cf      	b.n	8007a7e <__swbuf_r+0x1a>
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <__swbuf_r+0xa0>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	bf08      	it	eq
 8007ae4:	68ec      	ldreq	r4, [r5, #12]
 8007ae6:	e7ca      	b.n	8007a7e <__swbuf_r+0x1a>
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 f80c 	bl	8007b08 <__swsetup_r>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0cb      	beq.n	8007a8c <__swbuf_r+0x28>
 8007af4:	f04f 37ff 	mov.w	r7, #4294967295
 8007af8:	e7ea      	b.n	8007ad0 <__swbuf_r+0x6c>
 8007afa:	bf00      	nop
 8007afc:	0800b664 	.word	0x0800b664
 8007b00:	0800b684 	.word	0x0800b684
 8007b04:	0800b644 	.word	0x0800b644

08007b08 <__swsetup_r>:
 8007b08:	4b32      	ldr	r3, [pc, #200]	; (8007bd4 <__swsetup_r+0xcc>)
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	681d      	ldr	r5, [r3, #0]
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	b125      	cbz	r5, 8007b1e <__swsetup_r+0x16>
 8007b14:	69ab      	ldr	r3, [r5, #24]
 8007b16:	b913      	cbnz	r3, 8007b1e <__swsetup_r+0x16>
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 f97d 	bl	8007e18 <__sinit>
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <__swsetup_r+0xd0>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	d10f      	bne.n	8007b44 <__swsetup_r+0x3c>
 8007b24:	686c      	ldr	r4, [r5, #4]
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b2c:	0719      	lsls	r1, r3, #28
 8007b2e:	d42c      	bmi.n	8007b8a <__swsetup_r+0x82>
 8007b30:	06dd      	lsls	r5, r3, #27
 8007b32:	d411      	bmi.n	8007b58 <__swsetup_r+0x50>
 8007b34:	2309      	movs	r3, #9
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b42:	e03e      	b.n	8007bc2 <__swsetup_r+0xba>
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <__swsetup_r+0xd4>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	d101      	bne.n	8007b4e <__swsetup_r+0x46>
 8007b4a:	68ac      	ldr	r4, [r5, #8]
 8007b4c:	e7eb      	b.n	8007b26 <__swsetup_r+0x1e>
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <__swsetup_r+0xd8>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	bf08      	it	eq
 8007b54:	68ec      	ldreq	r4, [r5, #12]
 8007b56:	e7e6      	b.n	8007b26 <__swsetup_r+0x1e>
 8007b58:	0758      	lsls	r0, r3, #29
 8007b5a:	d512      	bpl.n	8007b82 <__swsetup_r+0x7a>
 8007b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b5e:	b141      	cbz	r1, 8007b72 <__swsetup_r+0x6a>
 8007b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b64:	4299      	cmp	r1, r3
 8007b66:	d002      	beq.n	8007b6e <__swsetup_r+0x66>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f000 fa59 	bl	8008020 <_free_r>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6363      	str	r3, [r4, #52]	; 0x34
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6063      	str	r3, [r4, #4]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f043 0308 	orr.w	r3, r3, #8
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	b94b      	cbnz	r3, 8007ba2 <__swsetup_r+0x9a>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d003      	beq.n	8007ba2 <__swsetup_r+0x9a>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 f9ff 	bl	8007fa0 <__smakebuf_r>
 8007ba2:	89a0      	ldrh	r0, [r4, #12]
 8007ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ba8:	f010 0301 	ands.w	r3, r0, #1
 8007bac:	d00a      	beq.n	8007bc4 <__swsetup_r+0xbc>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	6963      	ldr	r3, [r4, #20]
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	61a3      	str	r3, [r4, #24]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	b943      	cbnz	r3, 8007bce <__swsetup_r+0xc6>
 8007bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bc0:	d1ba      	bne.n	8007b38 <__swsetup_r+0x30>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	0781      	lsls	r1, r0, #30
 8007bc6:	bf58      	it	pl
 8007bc8:	6963      	ldrpl	r3, [r4, #20]
 8007bca:	60a3      	str	r3, [r4, #8]
 8007bcc:	e7f4      	b.n	8007bb8 <__swsetup_r+0xb0>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e7f7      	b.n	8007bc2 <__swsetup_r+0xba>
 8007bd2:	bf00      	nop
 8007bd4:	200009e4 	.word	0x200009e4
 8007bd8:	0800b664 	.word	0x0800b664
 8007bdc:	0800b684 	.word	0x0800b684
 8007be0:	0800b644 	.word	0x0800b644

08007be4 <__sflush_r>:
 8007be4:	898a      	ldrh	r2, [r1, #12]
 8007be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bea:	4605      	mov	r5, r0
 8007bec:	0710      	lsls	r0, r2, #28
 8007bee:	460c      	mov	r4, r1
 8007bf0:	d458      	bmi.n	8007ca4 <__sflush_r+0xc0>
 8007bf2:	684b      	ldr	r3, [r1, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc05      	bgt.n	8007c04 <__sflush_r+0x20>
 8007bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dc02      	bgt.n	8007c04 <__sflush_r+0x20>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	d0f9      	beq.n	8007bfe <__sflush_r+0x1a>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c10:	682f      	ldr	r7, [r5, #0]
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	d032      	beq.n	8007c7c <__sflush_r+0x98>
 8007c16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	075a      	lsls	r2, r3, #29
 8007c1c:	d505      	bpl.n	8007c2a <__sflush_r+0x46>
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	1ac0      	subs	r0, r0, r3
 8007c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c24:	b10b      	cbz	r3, 8007c2a <__sflush_r+0x46>
 8007c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c28:	1ac0      	subs	r0, r0, r3
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c30:	6a21      	ldr	r1, [r4, #32]
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b0      	blx	r6
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	d106      	bne.n	8007c4a <__sflush_r+0x66>
 8007c3c:	6829      	ldr	r1, [r5, #0]
 8007c3e:	291d      	cmp	r1, #29
 8007c40:	d82c      	bhi.n	8007c9c <__sflush_r+0xb8>
 8007c42:	4a2a      	ldr	r2, [pc, #168]	; (8007cec <__sflush_r+0x108>)
 8007c44:	40ca      	lsrs	r2, r1
 8007c46:	07d6      	lsls	r6, r2, #31
 8007c48:	d528      	bpl.n	8007c9c <__sflush_r+0xb8>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	6062      	str	r2, [r4, #4]
 8007c4e:	04d9      	lsls	r1, r3, #19
 8007c50:	6922      	ldr	r2, [r4, #16]
 8007c52:	6022      	str	r2, [r4, #0]
 8007c54:	d504      	bpl.n	8007c60 <__sflush_r+0x7c>
 8007c56:	1c42      	adds	r2, r0, #1
 8007c58:	d101      	bne.n	8007c5e <__sflush_r+0x7a>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	b903      	cbnz	r3, 8007c60 <__sflush_r+0x7c>
 8007c5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c62:	602f      	str	r7, [r5, #0]
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d0ca      	beq.n	8007bfe <__sflush_r+0x1a>
 8007c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <__sflush_r+0x92>
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 f9d5 	bl	8008020 <_free_r>
 8007c76:	2000      	movs	r0, #0
 8007c78:	6360      	str	r0, [r4, #52]	; 0x34
 8007c7a:	e7c1      	b.n	8007c00 <__sflush_r+0x1c>
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b0      	blx	r6
 8007c84:	1c41      	adds	r1, r0, #1
 8007c86:	d1c7      	bne.n	8007c18 <__sflush_r+0x34>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0c4      	beq.n	8007c18 <__sflush_r+0x34>
 8007c8e:	2b1d      	cmp	r3, #29
 8007c90:	d001      	beq.n	8007c96 <__sflush_r+0xb2>
 8007c92:	2b16      	cmp	r3, #22
 8007c94:	d101      	bne.n	8007c9a <__sflush_r+0xb6>
 8007c96:	602f      	str	r7, [r5, #0]
 8007c98:	e7b1      	b.n	8007bfe <__sflush_r+0x1a>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca0:	81a3      	strh	r3, [r4, #12]
 8007ca2:	e7ad      	b.n	8007c00 <__sflush_r+0x1c>
 8007ca4:	690f      	ldr	r7, [r1, #16]
 8007ca6:	2f00      	cmp	r7, #0
 8007ca8:	d0a9      	beq.n	8007bfe <__sflush_r+0x1a>
 8007caa:	0793      	lsls	r3, r2, #30
 8007cac:	680e      	ldr	r6, [r1, #0]
 8007cae:	bf08      	it	eq
 8007cb0:	694b      	ldreq	r3, [r1, #20]
 8007cb2:	600f      	str	r7, [r1, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	eba6 0807 	sub.w	r8, r6, r7
 8007cbc:	608b      	str	r3, [r1, #8]
 8007cbe:	f1b8 0f00 	cmp.w	r8, #0
 8007cc2:	dd9c      	ble.n	8007bfe <__sflush_r+0x1a>
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cc8:	4643      	mov	r3, r8
 8007cca:	463a      	mov	r2, r7
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b0      	blx	r6
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	dc06      	bgt.n	8007ce2 <__sflush_r+0xfe>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	e78e      	b.n	8007c00 <__sflush_r+0x1c>
 8007ce2:	4407      	add	r7, r0
 8007ce4:	eba8 0800 	sub.w	r8, r8, r0
 8007ce8:	e7e9      	b.n	8007cbe <__sflush_r+0xda>
 8007cea:	bf00      	nop
 8007cec:	20400001 	.word	0x20400001

08007cf0 <_fflush_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b913      	cbnz	r3, 8007d00 <_fflush_r+0x10>
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	b118      	cbz	r0, 8007d0a <_fflush_r+0x1a>
 8007d02:	6983      	ldr	r3, [r0, #24]
 8007d04:	b90b      	cbnz	r3, 8007d0a <_fflush_r+0x1a>
 8007d06:	f000 f887 	bl	8007e18 <__sinit>
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <_fflush_r+0x6c>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d11b      	bne.n	8007d48 <_fflush_r+0x58>
 8007d10:	686c      	ldr	r4, [r5, #4]
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0ef      	beq.n	8007cfa <_fflush_r+0xa>
 8007d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d1c:	07d0      	lsls	r0, r2, #31
 8007d1e:	d404      	bmi.n	8007d2a <_fflush_r+0x3a>
 8007d20:	0599      	lsls	r1, r3, #22
 8007d22:	d402      	bmi.n	8007d2a <_fflush_r+0x3a>
 8007d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d26:	f000 f915 	bl	8007f54 <__retarget_lock_acquire_recursive>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f7ff ff59 	bl	8007be4 <__sflush_r>
 8007d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d34:	07da      	lsls	r2, r3, #31
 8007d36:	4605      	mov	r5, r0
 8007d38:	d4e0      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	059b      	lsls	r3, r3, #22
 8007d3e:	d4dd      	bmi.n	8007cfc <_fflush_r+0xc>
 8007d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d42:	f000 f908 	bl	8007f56 <__retarget_lock_release_recursive>
 8007d46:	e7d9      	b.n	8007cfc <_fflush_r+0xc>
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <_fflush_r+0x70>)
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	d101      	bne.n	8007d52 <_fflush_r+0x62>
 8007d4e:	68ac      	ldr	r4, [r5, #8]
 8007d50:	e7df      	b.n	8007d12 <_fflush_r+0x22>
 8007d52:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <_fflush_r+0x74>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	bf08      	it	eq
 8007d58:	68ec      	ldreq	r4, [r5, #12]
 8007d5a:	e7da      	b.n	8007d12 <_fflush_r+0x22>
 8007d5c:	0800b664 	.word	0x0800b664
 8007d60:	0800b684 	.word	0x0800b684
 8007d64:	0800b644 	.word	0x0800b644

08007d68 <std>:
 8007d68:	2300      	movs	r3, #0
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d76:	6083      	str	r3, [r0, #8]
 8007d78:	8181      	strh	r1, [r0, #12]
 8007d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d7c:	81c2      	strh	r2, [r0, #14]
 8007d7e:	6183      	str	r3, [r0, #24]
 8007d80:	4619      	mov	r1, r3
 8007d82:	2208      	movs	r2, #8
 8007d84:	305c      	adds	r0, #92	; 0x5c
 8007d86:	f7ff fda1 	bl	80078cc <memset>
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <std+0x38>)
 8007d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <std+0x3c>)
 8007d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <std+0x40>)
 8007d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <std+0x44>)
 8007d98:	6224      	str	r4, [r4, #32]
 8007d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	bf00      	nop
 8007da0:	08008ab9 	.word	0x08008ab9
 8007da4:	08008adb 	.word	0x08008adb
 8007da8:	08008b13 	.word	0x08008b13
 8007dac:	08008b37 	.word	0x08008b37

08007db0 <_cleanup_r>:
 8007db0:	4901      	ldr	r1, [pc, #4]	; (8007db8 <_cleanup_r+0x8>)
 8007db2:	f000 b8af 	b.w	8007f14 <_fwalk_reent>
 8007db6:	bf00      	nop
 8007db8:	08007cf1 	.word	0x08007cf1

08007dbc <__sfmoreglue>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	1e4a      	subs	r2, r1, #1
 8007dc0:	2568      	movs	r5, #104	; 0x68
 8007dc2:	4355      	muls	r5, r2
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dca:	f000 f979 	bl	80080c0 <_malloc_r>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b140      	cbz	r0, 8007de4 <__sfmoreglue+0x28>
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007dd8:	300c      	adds	r0, #12
 8007dda:	60a0      	str	r0, [r4, #8]
 8007ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de0:	f7ff fd74 	bl	80078cc <memset>
 8007de4:	4620      	mov	r0, r4
 8007de6:	bd70      	pop	{r4, r5, r6, pc}

08007de8 <__sfp_lock_acquire>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__sfp_lock_acquire+0x8>)
 8007dea:	f000 b8b3 	b.w	8007f54 <__retarget_lock_acquire_recursive>
 8007dee:	bf00      	nop
 8007df0:	20000c78 	.word	0x20000c78

08007df4 <__sfp_lock_release>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__sfp_lock_release+0x8>)
 8007df6:	f000 b8ae 	b.w	8007f56 <__retarget_lock_release_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20000c78 	.word	0x20000c78

08007e00 <__sinit_lock_acquire>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__sinit_lock_acquire+0x8>)
 8007e02:	f000 b8a7 	b.w	8007f54 <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	20000c73 	.word	0x20000c73

08007e0c <__sinit_lock_release>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__sinit_lock_release+0x8>)
 8007e0e:	f000 b8a2 	b.w	8007f56 <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	20000c73 	.word	0x20000c73

08007e18 <__sinit>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f7ff fff0 	bl	8007e00 <__sinit_lock_acquire>
 8007e20:	69a3      	ldr	r3, [r4, #24]
 8007e22:	b11b      	cbz	r3, 8007e2c <__sinit+0x14>
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f7ff bff0 	b.w	8007e0c <__sinit_lock_release>
 8007e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e30:	6523      	str	r3, [r4, #80]	; 0x50
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <__sinit+0x68>)
 8007e34:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <__sinit+0x6c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	bf04      	itt	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	61a3      	streq	r3, [r4, #24]
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f820 	bl	8007e88 <__sfp>
 8007e48:	6060      	str	r0, [r4, #4]
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f81c 	bl	8007e88 <__sfp>
 8007e50:	60a0      	str	r0, [r4, #8]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f818 	bl	8007e88 <__sfp>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60e0      	str	r0, [r4, #12]
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	6860      	ldr	r0, [r4, #4]
 8007e60:	f7ff ff82 	bl	8007d68 <std>
 8007e64:	68a0      	ldr	r0, [r4, #8]
 8007e66:	2201      	movs	r2, #1
 8007e68:	2109      	movs	r1, #9
 8007e6a:	f7ff ff7d 	bl	8007d68 <std>
 8007e6e:	68e0      	ldr	r0, [r4, #12]
 8007e70:	2202      	movs	r2, #2
 8007e72:	2112      	movs	r1, #18
 8007e74:	f7ff ff78 	bl	8007d68 <std>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	61a3      	str	r3, [r4, #24]
 8007e7c:	e7d2      	b.n	8007e24 <__sinit+0xc>
 8007e7e:	bf00      	nop
 8007e80:	0800b640 	.word	0x0800b640
 8007e84:	08007db1 	.word	0x08007db1

08007e88 <__sfp>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	f7ff ffac 	bl	8007de8 <__sfp_lock_acquire>
 8007e90:	4b1e      	ldr	r3, [pc, #120]	; (8007f0c <__sfp+0x84>)
 8007e92:	681e      	ldr	r6, [r3, #0]
 8007e94:	69b3      	ldr	r3, [r6, #24]
 8007e96:	b913      	cbnz	r3, 8007e9e <__sfp+0x16>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff ffbd 	bl	8007e18 <__sinit>
 8007e9e:	3648      	adds	r6, #72	; 0x48
 8007ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	d503      	bpl.n	8007eb0 <__sfp+0x28>
 8007ea8:	6833      	ldr	r3, [r6, #0]
 8007eaa:	b30b      	cbz	r3, 8007ef0 <__sfp+0x68>
 8007eac:	6836      	ldr	r6, [r6, #0]
 8007eae:	e7f7      	b.n	8007ea0 <__sfp+0x18>
 8007eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eb4:	b9d5      	cbnz	r5, 8007eec <__sfp+0x64>
 8007eb6:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <__sfp+0x88>)
 8007eb8:	60e3      	str	r3, [r4, #12]
 8007eba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec0:	f000 f847 	bl	8007f52 <__retarget_lock_init_recursive>
 8007ec4:	f7ff ff96 	bl	8007df4 <__sfp_lock_release>
 8007ec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ed0:	6025      	str	r5, [r4, #0]
 8007ed2:	61a5      	str	r5, [r4, #24]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007edc:	f7ff fcf6 	bl	80078cc <memset>
 8007ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ee8:	4620      	mov	r0, r4
 8007eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eec:	3468      	adds	r4, #104	; 0x68
 8007eee:	e7d9      	b.n	8007ea4 <__sfp+0x1c>
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff ff62 	bl	8007dbc <__sfmoreglue>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	6030      	str	r0, [r6, #0]
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1d5      	bne.n	8007eac <__sfp+0x24>
 8007f00:	f7ff ff78 	bl	8007df4 <__sfp_lock_release>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	e7ee      	b.n	8007ee8 <__sfp+0x60>
 8007f0a:	bf00      	nop
 8007f0c:	0800b640 	.word	0x0800b640
 8007f10:	ffff0001 	.word	0xffff0001

08007f14 <_fwalk_reent>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	4606      	mov	r6, r0
 8007f1a:	4688      	mov	r8, r1
 8007f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f20:	2700      	movs	r7, #0
 8007f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f26:	f1b9 0901 	subs.w	r9, r9, #1
 8007f2a:	d505      	bpl.n	8007f38 <_fwalk_reent+0x24>
 8007f2c:	6824      	ldr	r4, [r4, #0]
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	d1f7      	bne.n	8007f22 <_fwalk_reent+0xe>
 8007f32:	4638      	mov	r0, r7
 8007f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f38:	89ab      	ldrh	r3, [r5, #12]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d907      	bls.n	8007f4e <_fwalk_reent+0x3a>
 8007f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f42:	3301      	adds	r3, #1
 8007f44:	d003      	beq.n	8007f4e <_fwalk_reent+0x3a>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	47c0      	blx	r8
 8007f4c:	4307      	orrs	r7, r0
 8007f4e:	3568      	adds	r5, #104	; 0x68
 8007f50:	e7e9      	b.n	8007f26 <_fwalk_reent+0x12>

08007f52 <__retarget_lock_init_recursive>:
 8007f52:	4770      	bx	lr

08007f54 <__retarget_lock_acquire_recursive>:
 8007f54:	4770      	bx	lr

08007f56 <__retarget_lock_release_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__swhatbuf_r>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	460e      	mov	r6, r1
 8007f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f60:	2900      	cmp	r1, #0
 8007f62:	b096      	sub	sp, #88	; 0x58
 8007f64:	4614      	mov	r4, r2
 8007f66:	461d      	mov	r5, r3
 8007f68:	da07      	bge.n	8007f7a <__swhatbuf_r+0x22>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	89b3      	ldrh	r3, [r6, #12]
 8007f70:	061a      	lsls	r2, r3, #24
 8007f72:	d410      	bmi.n	8007f96 <__swhatbuf_r+0x3e>
 8007f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f78:	e00e      	b.n	8007f98 <__swhatbuf_r+0x40>
 8007f7a:	466a      	mov	r2, sp
 8007f7c:	f000 fe02 	bl	8008b84 <_fstat_r>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	dbf2      	blt.n	8007f6a <__swhatbuf_r+0x12>
 8007f84:	9a01      	ldr	r2, [sp, #4]
 8007f86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f8e:	425a      	negs	r2, r3
 8007f90:	415a      	adcs	r2, r3
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	e7ee      	b.n	8007f74 <__swhatbuf_r+0x1c>
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	2000      	movs	r0, #0
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	b016      	add	sp, #88	; 0x58
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}

08007fa0 <__smakebuf_r>:
 8007fa0:	898b      	ldrh	r3, [r1, #12]
 8007fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fa4:	079d      	lsls	r5, r3, #30
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460c      	mov	r4, r1
 8007faa:	d507      	bpl.n	8007fbc <__smakebuf_r+0x1c>
 8007fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	6163      	str	r3, [r4, #20]
 8007fb8:	b002      	add	sp, #8
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	ab01      	add	r3, sp, #4
 8007fbe:	466a      	mov	r2, sp
 8007fc0:	f7ff ffca 	bl	8007f58 <__swhatbuf_r>
 8007fc4:	9900      	ldr	r1, [sp, #0]
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 f879 	bl	80080c0 <_malloc_r>
 8007fce:	b948      	cbnz	r0, 8007fe4 <__smakebuf_r+0x44>
 8007fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd4:	059a      	lsls	r2, r3, #22
 8007fd6:	d4ef      	bmi.n	8007fb8 <__smakebuf_r+0x18>
 8007fd8:	f023 0303 	bic.w	r3, r3, #3
 8007fdc:	f043 0302 	orr.w	r3, r3, #2
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	e7e3      	b.n	8007fac <__smakebuf_r+0xc>
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <__smakebuf_r+0x7c>)
 8007fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	6020      	str	r0, [r4, #0]
 8007fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	9b00      	ldr	r3, [sp, #0]
 8007ff4:	6163      	str	r3, [r4, #20]
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	6120      	str	r0, [r4, #16]
 8007ffa:	b15b      	cbz	r3, 8008014 <__smakebuf_r+0x74>
 8007ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008000:	4630      	mov	r0, r6
 8008002:	f000 fdd1 	bl	8008ba8 <_isatty_r>
 8008006:	b128      	cbz	r0, 8008014 <__smakebuf_r+0x74>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f023 0303 	bic.w	r3, r3, #3
 800800e:	f043 0301 	orr.w	r3, r3, #1
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	89a0      	ldrh	r0, [r4, #12]
 8008016:	4305      	orrs	r5, r0
 8008018:	81a5      	strh	r5, [r4, #12]
 800801a:	e7cd      	b.n	8007fb8 <__smakebuf_r+0x18>
 800801c:	08007db1 	.word	0x08007db1

08008020 <_free_r>:
 8008020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008022:	2900      	cmp	r1, #0
 8008024:	d048      	beq.n	80080b8 <_free_r+0x98>
 8008026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f1a1 0404 	sub.w	r4, r1, #4
 8008032:	bfb8      	it	lt
 8008034:	18e4      	addlt	r4, r4, r3
 8008036:	f000 fdf3 	bl	8008c20 <__malloc_lock>
 800803a:	4a20      	ldr	r2, [pc, #128]	; (80080bc <_free_r+0x9c>)
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	4615      	mov	r5, r2
 8008042:	b933      	cbnz	r3, 8008052 <_free_r+0x32>
 8008044:	6063      	str	r3, [r4, #4]
 8008046:	6014      	str	r4, [r2, #0]
 8008048:	b003      	add	sp, #12
 800804a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800804e:	f000 bded 	b.w	8008c2c <__malloc_unlock>
 8008052:	42a3      	cmp	r3, r4
 8008054:	d90b      	bls.n	800806e <_free_r+0x4e>
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	1862      	adds	r2, r4, r1
 800805a:	4293      	cmp	r3, r2
 800805c:	bf04      	itt	eq
 800805e:	681a      	ldreq	r2, [r3, #0]
 8008060:	685b      	ldreq	r3, [r3, #4]
 8008062:	6063      	str	r3, [r4, #4]
 8008064:	bf04      	itt	eq
 8008066:	1852      	addeq	r2, r2, r1
 8008068:	6022      	streq	r2, [r4, #0]
 800806a:	602c      	str	r4, [r5, #0]
 800806c:	e7ec      	b.n	8008048 <_free_r+0x28>
 800806e:	461a      	mov	r2, r3
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b10b      	cbz	r3, 8008078 <_free_r+0x58>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d9fa      	bls.n	800806e <_free_r+0x4e>
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	1855      	adds	r5, r2, r1
 800807c:	42a5      	cmp	r5, r4
 800807e:	d10b      	bne.n	8008098 <_free_r+0x78>
 8008080:	6824      	ldr	r4, [r4, #0]
 8008082:	4421      	add	r1, r4
 8008084:	1854      	adds	r4, r2, r1
 8008086:	42a3      	cmp	r3, r4
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	d1dd      	bne.n	8008048 <_free_r+0x28>
 800808c:	681c      	ldr	r4, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	6053      	str	r3, [r2, #4]
 8008092:	4421      	add	r1, r4
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	e7d7      	b.n	8008048 <_free_r+0x28>
 8008098:	d902      	bls.n	80080a0 <_free_r+0x80>
 800809a:	230c      	movs	r3, #12
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	e7d3      	b.n	8008048 <_free_r+0x28>
 80080a0:	6825      	ldr	r5, [r4, #0]
 80080a2:	1961      	adds	r1, r4, r5
 80080a4:	428b      	cmp	r3, r1
 80080a6:	bf04      	itt	eq
 80080a8:	6819      	ldreq	r1, [r3, #0]
 80080aa:	685b      	ldreq	r3, [r3, #4]
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	bf04      	itt	eq
 80080b0:	1949      	addeq	r1, r1, r5
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	6054      	str	r4, [r2, #4]
 80080b6:	e7c7      	b.n	8008048 <_free_r+0x28>
 80080b8:	b003      	add	sp, #12
 80080ba:	bd30      	pop	{r4, r5, pc}
 80080bc:	20000ae4 	.word	0x20000ae4

080080c0 <_malloc_r>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	1ccd      	adds	r5, r1, #3
 80080c4:	f025 0503 	bic.w	r5, r5, #3
 80080c8:	3508      	adds	r5, #8
 80080ca:	2d0c      	cmp	r5, #12
 80080cc:	bf38      	it	cc
 80080ce:	250c      	movcc	r5, #12
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	4606      	mov	r6, r0
 80080d4:	db01      	blt.n	80080da <_malloc_r+0x1a>
 80080d6:	42a9      	cmp	r1, r5
 80080d8:	d903      	bls.n	80080e2 <_malloc_r+0x22>
 80080da:	230c      	movs	r3, #12
 80080dc:	6033      	str	r3, [r6, #0]
 80080de:	2000      	movs	r0, #0
 80080e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e2:	f000 fd9d 	bl	8008c20 <__malloc_lock>
 80080e6:	4921      	ldr	r1, [pc, #132]	; (800816c <_malloc_r+0xac>)
 80080e8:	680a      	ldr	r2, [r1, #0]
 80080ea:	4614      	mov	r4, r2
 80080ec:	b99c      	cbnz	r4, 8008116 <_malloc_r+0x56>
 80080ee:	4f20      	ldr	r7, [pc, #128]	; (8008170 <_malloc_r+0xb0>)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	b923      	cbnz	r3, 80080fe <_malloc_r+0x3e>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 fcce 	bl	8008a98 <_sbrk_r>
 80080fc:	6038      	str	r0, [r7, #0]
 80080fe:	4629      	mov	r1, r5
 8008100:	4630      	mov	r0, r6
 8008102:	f000 fcc9 	bl	8008a98 <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d123      	bne.n	8008152 <_malloc_r+0x92>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	4630      	mov	r0, r6
 8008110:	f000 fd8c 	bl	8008c2c <__malloc_unlock>
 8008114:	e7e3      	b.n	80080de <_malloc_r+0x1e>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	1b5b      	subs	r3, r3, r5
 800811a:	d417      	bmi.n	800814c <_malloc_r+0x8c>
 800811c:	2b0b      	cmp	r3, #11
 800811e:	d903      	bls.n	8008128 <_malloc_r+0x68>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	441c      	add	r4, r3
 8008124:	6025      	str	r5, [r4, #0]
 8008126:	e004      	b.n	8008132 <_malloc_r+0x72>
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	42a2      	cmp	r2, r4
 800812c:	bf0c      	ite	eq
 800812e:	600b      	streq	r3, [r1, #0]
 8008130:	6053      	strne	r3, [r2, #4]
 8008132:	4630      	mov	r0, r6
 8008134:	f000 fd7a 	bl	8008c2c <__malloc_unlock>
 8008138:	f104 000b 	add.w	r0, r4, #11
 800813c:	1d23      	adds	r3, r4, #4
 800813e:	f020 0007 	bic.w	r0, r0, #7
 8008142:	1ac2      	subs	r2, r0, r3
 8008144:	d0cc      	beq.n	80080e0 <_malloc_r+0x20>
 8008146:	1a1b      	subs	r3, r3, r0
 8008148:	50a3      	str	r3, [r4, r2]
 800814a:	e7c9      	b.n	80080e0 <_malloc_r+0x20>
 800814c:	4622      	mov	r2, r4
 800814e:	6864      	ldr	r4, [r4, #4]
 8008150:	e7cc      	b.n	80080ec <_malloc_r+0x2c>
 8008152:	1cc4      	adds	r4, r0, #3
 8008154:	f024 0403 	bic.w	r4, r4, #3
 8008158:	42a0      	cmp	r0, r4
 800815a:	d0e3      	beq.n	8008124 <_malloc_r+0x64>
 800815c:	1a21      	subs	r1, r4, r0
 800815e:	4630      	mov	r0, r6
 8008160:	f000 fc9a 	bl	8008a98 <_sbrk_r>
 8008164:	3001      	adds	r0, #1
 8008166:	d1dd      	bne.n	8008124 <_malloc_r+0x64>
 8008168:	e7cf      	b.n	800810a <_malloc_r+0x4a>
 800816a:	bf00      	nop
 800816c:	20000ae4 	.word	0x20000ae4
 8008170:	20000ae8 	.word	0x20000ae8

08008174 <__ssputs_r>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	688e      	ldr	r6, [r1, #8]
 800817a:	429e      	cmp	r6, r3
 800817c:	4682      	mov	sl, r0
 800817e:	460c      	mov	r4, r1
 8008180:	4690      	mov	r8, r2
 8008182:	461f      	mov	r7, r3
 8008184:	d838      	bhi.n	80081f8 <__ssputs_r+0x84>
 8008186:	898a      	ldrh	r2, [r1, #12]
 8008188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800818c:	d032      	beq.n	80081f4 <__ssputs_r+0x80>
 800818e:	6825      	ldr	r5, [r4, #0]
 8008190:	6909      	ldr	r1, [r1, #16]
 8008192:	eba5 0901 	sub.w	r9, r5, r1
 8008196:	6965      	ldr	r5, [r4, #20]
 8008198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800819c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081a0:	3301      	adds	r3, #1
 80081a2:	444b      	add	r3, r9
 80081a4:	106d      	asrs	r5, r5, #1
 80081a6:	429d      	cmp	r5, r3
 80081a8:	bf38      	it	cc
 80081aa:	461d      	movcc	r5, r3
 80081ac:	0553      	lsls	r3, r2, #21
 80081ae:	d531      	bpl.n	8008214 <__ssputs_r+0xa0>
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7ff ff85 	bl	80080c0 <_malloc_r>
 80081b6:	4606      	mov	r6, r0
 80081b8:	b950      	cbnz	r0, 80081d0 <__ssputs_r+0x5c>
 80081ba:	230c      	movs	r3, #12
 80081bc:	f8ca 3000 	str.w	r3, [sl]
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c6:	81a3      	strh	r3, [r4, #12]
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d0:	6921      	ldr	r1, [r4, #16]
 80081d2:	464a      	mov	r2, r9
 80081d4:	f7ff fb6c 	bl	80078b0 <memcpy>
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	6126      	str	r6, [r4, #16]
 80081e6:	6165      	str	r5, [r4, #20]
 80081e8:	444e      	add	r6, r9
 80081ea:	eba5 0509 	sub.w	r5, r5, r9
 80081ee:	6026      	str	r6, [r4, #0]
 80081f0:	60a5      	str	r5, [r4, #8]
 80081f2:	463e      	mov	r6, r7
 80081f4:	42be      	cmp	r6, r7
 80081f6:	d900      	bls.n	80081fa <__ssputs_r+0x86>
 80081f8:	463e      	mov	r6, r7
 80081fa:	4632      	mov	r2, r6
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	4641      	mov	r1, r8
 8008200:	f000 fcf4 	bl	8008bec <memmove>
 8008204:	68a3      	ldr	r3, [r4, #8]
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	4432      	add	r2, r6
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	6022      	str	r2, [r4, #0]
 8008210:	2000      	movs	r0, #0
 8008212:	e7db      	b.n	80081cc <__ssputs_r+0x58>
 8008214:	462a      	mov	r2, r5
 8008216:	f000 fd0f 	bl	8008c38 <_realloc_r>
 800821a:	4606      	mov	r6, r0
 800821c:	2800      	cmp	r0, #0
 800821e:	d1e1      	bne.n	80081e4 <__ssputs_r+0x70>
 8008220:	6921      	ldr	r1, [r4, #16]
 8008222:	4650      	mov	r0, sl
 8008224:	f7ff fefc 	bl	8008020 <_free_r>
 8008228:	e7c7      	b.n	80081ba <__ssputs_r+0x46>
	...

0800822c <_svfiprintf_r>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4698      	mov	r8, r3
 8008232:	898b      	ldrh	r3, [r1, #12]
 8008234:	061b      	lsls	r3, r3, #24
 8008236:	b09d      	sub	sp, #116	; 0x74
 8008238:	4607      	mov	r7, r0
 800823a:	460d      	mov	r5, r1
 800823c:	4614      	mov	r4, r2
 800823e:	d50e      	bpl.n	800825e <_svfiprintf_r+0x32>
 8008240:	690b      	ldr	r3, [r1, #16]
 8008242:	b963      	cbnz	r3, 800825e <_svfiprintf_r+0x32>
 8008244:	2140      	movs	r1, #64	; 0x40
 8008246:	f7ff ff3b 	bl	80080c0 <_malloc_r>
 800824a:	6028      	str	r0, [r5, #0]
 800824c:	6128      	str	r0, [r5, #16]
 800824e:	b920      	cbnz	r0, 800825a <_svfiprintf_r+0x2e>
 8008250:	230c      	movs	r3, #12
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e0d1      	b.n	80083fe <_svfiprintf_r+0x1d2>
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	616b      	str	r3, [r5, #20]
 800825e:	2300      	movs	r3, #0
 8008260:	9309      	str	r3, [sp, #36]	; 0x24
 8008262:	2320      	movs	r3, #32
 8008264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008268:	f8cd 800c 	str.w	r8, [sp, #12]
 800826c:	2330      	movs	r3, #48	; 0x30
 800826e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008418 <_svfiprintf_r+0x1ec>
 8008272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008276:	f04f 0901 	mov.w	r9, #1
 800827a:	4623      	mov	r3, r4
 800827c:	469a      	mov	sl, r3
 800827e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008282:	b10a      	cbz	r2, 8008288 <_svfiprintf_r+0x5c>
 8008284:	2a25      	cmp	r2, #37	; 0x25
 8008286:	d1f9      	bne.n	800827c <_svfiprintf_r+0x50>
 8008288:	ebba 0b04 	subs.w	fp, sl, r4
 800828c:	d00b      	beq.n	80082a6 <_svfiprintf_r+0x7a>
 800828e:	465b      	mov	r3, fp
 8008290:	4622      	mov	r2, r4
 8008292:	4629      	mov	r1, r5
 8008294:	4638      	mov	r0, r7
 8008296:	f7ff ff6d 	bl	8008174 <__ssputs_r>
 800829a:	3001      	adds	r0, #1
 800829c:	f000 80aa 	beq.w	80083f4 <_svfiprintf_r+0x1c8>
 80082a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a2:	445a      	add	r2, fp
 80082a4:	9209      	str	r2, [sp, #36]	; 0x24
 80082a6:	f89a 3000 	ldrb.w	r3, [sl]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80a2 	beq.w	80083f4 <_svfiprintf_r+0x1c8>
 80082b0:	2300      	movs	r3, #0
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ba:	f10a 0a01 	add.w	sl, sl, #1
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	9307      	str	r3, [sp, #28]
 80082c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c6:	931a      	str	r3, [sp, #104]	; 0x68
 80082c8:	4654      	mov	r4, sl
 80082ca:	2205      	movs	r2, #5
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	4851      	ldr	r0, [pc, #324]	; (8008418 <_svfiprintf_r+0x1ec>)
 80082d2:	f7f7 ffa5 	bl	8000220 <memchr>
 80082d6:	9a04      	ldr	r2, [sp, #16]
 80082d8:	b9d8      	cbnz	r0, 8008312 <_svfiprintf_r+0xe6>
 80082da:	06d0      	lsls	r0, r2, #27
 80082dc:	bf44      	itt	mi
 80082de:	2320      	movmi	r3, #32
 80082e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e4:	0711      	lsls	r1, r2, #28
 80082e6:	bf44      	itt	mi
 80082e8:	232b      	movmi	r3, #43	; 0x2b
 80082ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ee:	f89a 3000 	ldrb.w	r3, [sl]
 80082f2:	2b2a      	cmp	r3, #42	; 0x2a
 80082f4:	d015      	beq.n	8008322 <_svfiprintf_r+0xf6>
 80082f6:	9a07      	ldr	r2, [sp, #28]
 80082f8:	4654      	mov	r4, sl
 80082fa:	2000      	movs	r0, #0
 80082fc:	f04f 0c0a 	mov.w	ip, #10
 8008300:	4621      	mov	r1, r4
 8008302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008306:	3b30      	subs	r3, #48	; 0x30
 8008308:	2b09      	cmp	r3, #9
 800830a:	d94e      	bls.n	80083aa <_svfiprintf_r+0x17e>
 800830c:	b1b0      	cbz	r0, 800833c <_svfiprintf_r+0x110>
 800830e:	9207      	str	r2, [sp, #28]
 8008310:	e014      	b.n	800833c <_svfiprintf_r+0x110>
 8008312:	eba0 0308 	sub.w	r3, r0, r8
 8008316:	fa09 f303 	lsl.w	r3, r9, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	46a2      	mov	sl, r4
 8008320:	e7d2      	b.n	80082c8 <_svfiprintf_r+0x9c>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	1d19      	adds	r1, r3, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	9103      	str	r1, [sp, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfbb      	ittet	lt
 800832e:	425b      	neglt	r3, r3
 8008330:	f042 0202 	orrlt.w	r2, r2, #2
 8008334:	9307      	strge	r3, [sp, #28]
 8008336:	9307      	strlt	r3, [sp, #28]
 8008338:	bfb8      	it	lt
 800833a:	9204      	strlt	r2, [sp, #16]
 800833c:	7823      	ldrb	r3, [r4, #0]
 800833e:	2b2e      	cmp	r3, #46	; 0x2e
 8008340:	d10c      	bne.n	800835c <_svfiprintf_r+0x130>
 8008342:	7863      	ldrb	r3, [r4, #1]
 8008344:	2b2a      	cmp	r3, #42	; 0x2a
 8008346:	d135      	bne.n	80083b4 <_svfiprintf_r+0x188>
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	9203      	str	r2, [sp, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	bfb8      	it	lt
 8008354:	f04f 33ff 	movlt.w	r3, #4294967295
 8008358:	3402      	adds	r4, #2
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008428 <_svfiprintf_r+0x1fc>
 8008360:	7821      	ldrb	r1, [r4, #0]
 8008362:	2203      	movs	r2, #3
 8008364:	4650      	mov	r0, sl
 8008366:	f7f7 ff5b 	bl	8000220 <memchr>
 800836a:	b140      	cbz	r0, 800837e <_svfiprintf_r+0x152>
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	eba0 000a 	sub.w	r0, r0, sl
 8008372:	fa03 f000 	lsl.w	r0, r3, r0
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	4303      	orrs	r3, r0
 800837a:	3401      	adds	r4, #1
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008382:	4826      	ldr	r0, [pc, #152]	; (800841c <_svfiprintf_r+0x1f0>)
 8008384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008388:	2206      	movs	r2, #6
 800838a:	f7f7 ff49 	bl	8000220 <memchr>
 800838e:	2800      	cmp	r0, #0
 8008390:	d038      	beq.n	8008404 <_svfiprintf_r+0x1d8>
 8008392:	4b23      	ldr	r3, [pc, #140]	; (8008420 <_svfiprintf_r+0x1f4>)
 8008394:	bb1b      	cbnz	r3, 80083de <_svfiprintf_r+0x1b2>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	3307      	adds	r3, #7
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	3308      	adds	r3, #8
 80083a0:	9303      	str	r3, [sp, #12]
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	4433      	add	r3, r6
 80083a6:	9309      	str	r3, [sp, #36]	; 0x24
 80083a8:	e767      	b.n	800827a <_svfiprintf_r+0x4e>
 80083aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ae:	460c      	mov	r4, r1
 80083b0:	2001      	movs	r0, #1
 80083b2:	e7a5      	b.n	8008300 <_svfiprintf_r+0xd4>
 80083b4:	2300      	movs	r3, #0
 80083b6:	3401      	adds	r4, #1
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	4619      	mov	r1, r3
 80083bc:	f04f 0c0a 	mov.w	ip, #10
 80083c0:	4620      	mov	r0, r4
 80083c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c6:	3a30      	subs	r2, #48	; 0x30
 80083c8:	2a09      	cmp	r2, #9
 80083ca:	d903      	bls.n	80083d4 <_svfiprintf_r+0x1a8>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0c5      	beq.n	800835c <_svfiprintf_r+0x130>
 80083d0:	9105      	str	r1, [sp, #20]
 80083d2:	e7c3      	b.n	800835c <_svfiprintf_r+0x130>
 80083d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d8:	4604      	mov	r4, r0
 80083da:	2301      	movs	r3, #1
 80083dc:	e7f0      	b.n	80083c0 <_svfiprintf_r+0x194>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <_svfiprintf_r+0x1f8>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4638      	mov	r0, r7
 80083ea:	f3af 8000 	nop.w
 80083ee:	1c42      	adds	r2, r0, #1
 80083f0:	4606      	mov	r6, r0
 80083f2:	d1d6      	bne.n	80083a2 <_svfiprintf_r+0x176>
 80083f4:	89ab      	ldrh	r3, [r5, #12]
 80083f6:	065b      	lsls	r3, r3, #25
 80083f8:	f53f af2c 	bmi.w	8008254 <_svfiprintf_r+0x28>
 80083fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083fe:	b01d      	add	sp, #116	; 0x74
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	ab03      	add	r3, sp, #12
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	462a      	mov	r2, r5
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <_svfiprintf_r+0x1f8>)
 800840c:	a904      	add	r1, sp, #16
 800840e:	4638      	mov	r0, r7
 8008410:	f000 f9d4 	bl	80087bc <_printf_i>
 8008414:	e7eb      	b.n	80083ee <_svfiprintf_r+0x1c2>
 8008416:	bf00      	nop
 8008418:	0800b6a4 	.word	0x0800b6a4
 800841c:	0800b6ae 	.word	0x0800b6ae
 8008420:	00000000 	.word	0x00000000
 8008424:	08008175 	.word	0x08008175
 8008428:	0800b6aa 	.word	0x0800b6aa

0800842c <__sfputc_r>:
 800842c:	6893      	ldr	r3, [r2, #8]
 800842e:	3b01      	subs	r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	b410      	push	{r4}
 8008434:	6093      	str	r3, [r2, #8]
 8008436:	da08      	bge.n	800844a <__sfputc_r+0x1e>
 8008438:	6994      	ldr	r4, [r2, #24]
 800843a:	42a3      	cmp	r3, r4
 800843c:	db01      	blt.n	8008442 <__sfputc_r+0x16>
 800843e:	290a      	cmp	r1, #10
 8008440:	d103      	bne.n	800844a <__sfputc_r+0x1e>
 8008442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008446:	f7ff bb0d 	b.w	8007a64 <__swbuf_r>
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	1c58      	adds	r0, r3, #1
 800844e:	6010      	str	r0, [r2, #0]
 8008450:	7019      	strb	r1, [r3, #0]
 8008452:	4608      	mov	r0, r1
 8008454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008458:	4770      	bx	lr

0800845a <__sfputs_r>:
 800845a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845c:	4606      	mov	r6, r0
 800845e:	460f      	mov	r7, r1
 8008460:	4614      	mov	r4, r2
 8008462:	18d5      	adds	r5, r2, r3
 8008464:	42ac      	cmp	r4, r5
 8008466:	d101      	bne.n	800846c <__sfputs_r+0x12>
 8008468:	2000      	movs	r0, #0
 800846a:	e007      	b.n	800847c <__sfputs_r+0x22>
 800846c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008470:	463a      	mov	r2, r7
 8008472:	4630      	mov	r0, r6
 8008474:	f7ff ffda 	bl	800842c <__sfputc_r>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d1f3      	bne.n	8008464 <__sfputs_r+0xa>
 800847c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008480 <_vfiprintf_r>:
 8008480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	460d      	mov	r5, r1
 8008486:	b09d      	sub	sp, #116	; 0x74
 8008488:	4614      	mov	r4, r2
 800848a:	4698      	mov	r8, r3
 800848c:	4606      	mov	r6, r0
 800848e:	b118      	cbz	r0, 8008498 <_vfiprintf_r+0x18>
 8008490:	6983      	ldr	r3, [r0, #24]
 8008492:	b90b      	cbnz	r3, 8008498 <_vfiprintf_r+0x18>
 8008494:	f7ff fcc0 	bl	8007e18 <__sinit>
 8008498:	4b89      	ldr	r3, [pc, #548]	; (80086c0 <_vfiprintf_r+0x240>)
 800849a:	429d      	cmp	r5, r3
 800849c:	d11b      	bne.n	80084d6 <_vfiprintf_r+0x56>
 800849e:	6875      	ldr	r5, [r6, #4]
 80084a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a2:	07d9      	lsls	r1, r3, #31
 80084a4:	d405      	bmi.n	80084b2 <_vfiprintf_r+0x32>
 80084a6:	89ab      	ldrh	r3, [r5, #12]
 80084a8:	059a      	lsls	r2, r3, #22
 80084aa:	d402      	bmi.n	80084b2 <_vfiprintf_r+0x32>
 80084ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ae:	f7ff fd51 	bl	8007f54 <__retarget_lock_acquire_recursive>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	071b      	lsls	r3, r3, #28
 80084b6:	d501      	bpl.n	80084bc <_vfiprintf_r+0x3c>
 80084b8:	692b      	ldr	r3, [r5, #16]
 80084ba:	b9eb      	cbnz	r3, 80084f8 <_vfiprintf_r+0x78>
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f7ff fb22 	bl	8007b08 <__swsetup_r>
 80084c4:	b1c0      	cbz	r0, 80084f8 <_vfiprintf_r+0x78>
 80084c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c8:	07dc      	lsls	r4, r3, #31
 80084ca:	d50e      	bpl.n	80084ea <_vfiprintf_r+0x6a>
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	b01d      	add	sp, #116	; 0x74
 80084d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d6:	4b7b      	ldr	r3, [pc, #492]	; (80086c4 <_vfiprintf_r+0x244>)
 80084d8:	429d      	cmp	r5, r3
 80084da:	d101      	bne.n	80084e0 <_vfiprintf_r+0x60>
 80084dc:	68b5      	ldr	r5, [r6, #8]
 80084de:	e7df      	b.n	80084a0 <_vfiprintf_r+0x20>
 80084e0:	4b79      	ldr	r3, [pc, #484]	; (80086c8 <_vfiprintf_r+0x248>)
 80084e2:	429d      	cmp	r5, r3
 80084e4:	bf08      	it	eq
 80084e6:	68f5      	ldreq	r5, [r6, #12]
 80084e8:	e7da      	b.n	80084a0 <_vfiprintf_r+0x20>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	0598      	lsls	r0, r3, #22
 80084ee:	d4ed      	bmi.n	80084cc <_vfiprintf_r+0x4c>
 80084f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f2:	f7ff fd30 	bl	8007f56 <__retarget_lock_release_recursive>
 80084f6:	e7e9      	b.n	80084cc <_vfiprintf_r+0x4c>
 80084f8:	2300      	movs	r3, #0
 80084fa:	9309      	str	r3, [sp, #36]	; 0x24
 80084fc:	2320      	movs	r3, #32
 80084fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008502:	f8cd 800c 	str.w	r8, [sp, #12]
 8008506:	2330      	movs	r3, #48	; 0x30
 8008508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086cc <_vfiprintf_r+0x24c>
 800850c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008510:	f04f 0901 	mov.w	r9, #1
 8008514:	4623      	mov	r3, r4
 8008516:	469a      	mov	sl, r3
 8008518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851c:	b10a      	cbz	r2, 8008522 <_vfiprintf_r+0xa2>
 800851e:	2a25      	cmp	r2, #37	; 0x25
 8008520:	d1f9      	bne.n	8008516 <_vfiprintf_r+0x96>
 8008522:	ebba 0b04 	subs.w	fp, sl, r4
 8008526:	d00b      	beq.n	8008540 <_vfiprintf_r+0xc0>
 8008528:	465b      	mov	r3, fp
 800852a:	4622      	mov	r2, r4
 800852c:	4629      	mov	r1, r5
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff ff93 	bl	800845a <__sfputs_r>
 8008534:	3001      	adds	r0, #1
 8008536:	f000 80aa 	beq.w	800868e <_vfiprintf_r+0x20e>
 800853a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853c:	445a      	add	r2, fp
 800853e:	9209      	str	r2, [sp, #36]	; 0x24
 8008540:	f89a 3000 	ldrb.w	r3, [sl]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 80a2 	beq.w	800868e <_vfiprintf_r+0x20e>
 800854a:	2300      	movs	r3, #0
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008554:	f10a 0a01 	add.w	sl, sl, #1
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	9307      	str	r3, [sp, #28]
 800855c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008560:	931a      	str	r3, [sp, #104]	; 0x68
 8008562:	4654      	mov	r4, sl
 8008564:	2205      	movs	r2, #5
 8008566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856a:	4858      	ldr	r0, [pc, #352]	; (80086cc <_vfiprintf_r+0x24c>)
 800856c:	f7f7 fe58 	bl	8000220 <memchr>
 8008570:	9a04      	ldr	r2, [sp, #16]
 8008572:	b9d8      	cbnz	r0, 80085ac <_vfiprintf_r+0x12c>
 8008574:	06d1      	lsls	r1, r2, #27
 8008576:	bf44      	itt	mi
 8008578:	2320      	movmi	r3, #32
 800857a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800857e:	0713      	lsls	r3, r2, #28
 8008580:	bf44      	itt	mi
 8008582:	232b      	movmi	r3, #43	; 0x2b
 8008584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008588:	f89a 3000 	ldrb.w	r3, [sl]
 800858c:	2b2a      	cmp	r3, #42	; 0x2a
 800858e:	d015      	beq.n	80085bc <_vfiprintf_r+0x13c>
 8008590:	9a07      	ldr	r2, [sp, #28]
 8008592:	4654      	mov	r4, sl
 8008594:	2000      	movs	r0, #0
 8008596:	f04f 0c0a 	mov.w	ip, #10
 800859a:	4621      	mov	r1, r4
 800859c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a0:	3b30      	subs	r3, #48	; 0x30
 80085a2:	2b09      	cmp	r3, #9
 80085a4:	d94e      	bls.n	8008644 <_vfiprintf_r+0x1c4>
 80085a6:	b1b0      	cbz	r0, 80085d6 <_vfiprintf_r+0x156>
 80085a8:	9207      	str	r2, [sp, #28]
 80085aa:	e014      	b.n	80085d6 <_vfiprintf_r+0x156>
 80085ac:	eba0 0308 	sub.w	r3, r0, r8
 80085b0:	fa09 f303 	lsl.w	r3, r9, r3
 80085b4:	4313      	orrs	r3, r2
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	46a2      	mov	sl, r4
 80085ba:	e7d2      	b.n	8008562 <_vfiprintf_r+0xe2>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	1d19      	adds	r1, r3, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	9103      	str	r1, [sp, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfbb      	ittet	lt
 80085c8:	425b      	neglt	r3, r3
 80085ca:	f042 0202 	orrlt.w	r2, r2, #2
 80085ce:	9307      	strge	r3, [sp, #28]
 80085d0:	9307      	strlt	r3, [sp, #28]
 80085d2:	bfb8      	it	lt
 80085d4:	9204      	strlt	r2, [sp, #16]
 80085d6:	7823      	ldrb	r3, [r4, #0]
 80085d8:	2b2e      	cmp	r3, #46	; 0x2e
 80085da:	d10c      	bne.n	80085f6 <_vfiprintf_r+0x176>
 80085dc:	7863      	ldrb	r3, [r4, #1]
 80085de:	2b2a      	cmp	r3, #42	; 0x2a
 80085e0:	d135      	bne.n	800864e <_vfiprintf_r+0x1ce>
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	9203      	str	r2, [sp, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bfb8      	it	lt
 80085ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80085f2:	3402      	adds	r4, #2
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086dc <_vfiprintf_r+0x25c>
 80085fa:	7821      	ldrb	r1, [r4, #0]
 80085fc:	2203      	movs	r2, #3
 80085fe:	4650      	mov	r0, sl
 8008600:	f7f7 fe0e 	bl	8000220 <memchr>
 8008604:	b140      	cbz	r0, 8008618 <_vfiprintf_r+0x198>
 8008606:	2340      	movs	r3, #64	; 0x40
 8008608:	eba0 000a 	sub.w	r0, r0, sl
 800860c:	fa03 f000 	lsl.w	r0, r3, r0
 8008610:	9b04      	ldr	r3, [sp, #16]
 8008612:	4303      	orrs	r3, r0
 8008614:	3401      	adds	r4, #1
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	482c      	ldr	r0, [pc, #176]	; (80086d0 <_vfiprintf_r+0x250>)
 800861e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008622:	2206      	movs	r2, #6
 8008624:	f7f7 fdfc 	bl	8000220 <memchr>
 8008628:	2800      	cmp	r0, #0
 800862a:	d03f      	beq.n	80086ac <_vfiprintf_r+0x22c>
 800862c:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <_vfiprintf_r+0x254>)
 800862e:	bb1b      	cbnz	r3, 8008678 <_vfiprintf_r+0x1f8>
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	3307      	adds	r3, #7
 8008634:	f023 0307 	bic.w	r3, r3, #7
 8008638:	3308      	adds	r3, #8
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863e:	443b      	add	r3, r7
 8008640:	9309      	str	r3, [sp, #36]	; 0x24
 8008642:	e767      	b.n	8008514 <_vfiprintf_r+0x94>
 8008644:	fb0c 3202 	mla	r2, ip, r2, r3
 8008648:	460c      	mov	r4, r1
 800864a:	2001      	movs	r0, #1
 800864c:	e7a5      	b.n	800859a <_vfiprintf_r+0x11a>
 800864e:	2300      	movs	r3, #0
 8008650:	3401      	adds	r4, #1
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	4619      	mov	r1, r3
 8008656:	f04f 0c0a 	mov.w	ip, #10
 800865a:	4620      	mov	r0, r4
 800865c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008660:	3a30      	subs	r2, #48	; 0x30
 8008662:	2a09      	cmp	r2, #9
 8008664:	d903      	bls.n	800866e <_vfiprintf_r+0x1ee>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0c5      	beq.n	80085f6 <_vfiprintf_r+0x176>
 800866a:	9105      	str	r1, [sp, #20]
 800866c:	e7c3      	b.n	80085f6 <_vfiprintf_r+0x176>
 800866e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008672:	4604      	mov	r4, r0
 8008674:	2301      	movs	r3, #1
 8008676:	e7f0      	b.n	800865a <_vfiprintf_r+0x1da>
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	462a      	mov	r2, r5
 800867e:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <_vfiprintf_r+0x258>)
 8008680:	a904      	add	r1, sp, #16
 8008682:	4630      	mov	r0, r6
 8008684:	f3af 8000 	nop.w
 8008688:	4607      	mov	r7, r0
 800868a:	1c78      	adds	r0, r7, #1
 800868c:	d1d6      	bne.n	800863c <_vfiprintf_r+0x1bc>
 800868e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008690:	07d9      	lsls	r1, r3, #31
 8008692:	d405      	bmi.n	80086a0 <_vfiprintf_r+0x220>
 8008694:	89ab      	ldrh	r3, [r5, #12]
 8008696:	059a      	lsls	r2, r3, #22
 8008698:	d402      	bmi.n	80086a0 <_vfiprintf_r+0x220>
 800869a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800869c:	f7ff fc5b 	bl	8007f56 <__retarget_lock_release_recursive>
 80086a0:	89ab      	ldrh	r3, [r5, #12]
 80086a2:	065b      	lsls	r3, r3, #25
 80086a4:	f53f af12 	bmi.w	80084cc <_vfiprintf_r+0x4c>
 80086a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086aa:	e711      	b.n	80084d0 <_vfiprintf_r+0x50>
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <_vfiprintf_r+0x258>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	4630      	mov	r0, r6
 80086b8:	f000 f880 	bl	80087bc <_printf_i>
 80086bc:	e7e4      	b.n	8008688 <_vfiprintf_r+0x208>
 80086be:	bf00      	nop
 80086c0:	0800b664 	.word	0x0800b664
 80086c4:	0800b684 	.word	0x0800b684
 80086c8:	0800b644 	.word	0x0800b644
 80086cc:	0800b6a4 	.word	0x0800b6a4
 80086d0:	0800b6ae 	.word	0x0800b6ae
 80086d4:	00000000 	.word	0x00000000
 80086d8:	0800845b 	.word	0x0800845b
 80086dc:	0800b6aa 	.word	0x0800b6aa

080086e0 <_printf_common>:
 80086e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	4616      	mov	r6, r2
 80086e6:	4699      	mov	r9, r3
 80086e8:	688a      	ldr	r2, [r1, #8]
 80086ea:	690b      	ldr	r3, [r1, #16]
 80086ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bfb8      	it	lt
 80086f4:	4613      	movlt	r3, r2
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086fc:	4607      	mov	r7, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	b10a      	cbz	r2, 8008706 <_printf_common+0x26>
 8008702:	3301      	adds	r3, #1
 8008704:	6033      	str	r3, [r6, #0]
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	0699      	lsls	r1, r3, #26
 800870a:	bf42      	ittt	mi
 800870c:	6833      	ldrmi	r3, [r6, #0]
 800870e:	3302      	addmi	r3, #2
 8008710:	6033      	strmi	r3, [r6, #0]
 8008712:	6825      	ldr	r5, [r4, #0]
 8008714:	f015 0506 	ands.w	r5, r5, #6
 8008718:	d106      	bne.n	8008728 <_printf_common+0x48>
 800871a:	f104 0a19 	add.w	sl, r4, #25
 800871e:	68e3      	ldr	r3, [r4, #12]
 8008720:	6832      	ldr	r2, [r6, #0]
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	42ab      	cmp	r3, r5
 8008726:	dc26      	bgt.n	8008776 <_printf_common+0x96>
 8008728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800872c:	1e13      	subs	r3, r2, #0
 800872e:	6822      	ldr	r2, [r4, #0]
 8008730:	bf18      	it	ne
 8008732:	2301      	movne	r3, #1
 8008734:	0692      	lsls	r2, r2, #26
 8008736:	d42b      	bmi.n	8008790 <_printf_common+0xb0>
 8008738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800873c:	4649      	mov	r1, r9
 800873e:	4638      	mov	r0, r7
 8008740:	47c0      	blx	r8
 8008742:	3001      	adds	r0, #1
 8008744:	d01e      	beq.n	8008784 <_printf_common+0xa4>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	68e5      	ldr	r5, [r4, #12]
 800874a:	6832      	ldr	r2, [r6, #0]
 800874c:	f003 0306 	and.w	r3, r3, #6
 8008750:	2b04      	cmp	r3, #4
 8008752:	bf08      	it	eq
 8008754:	1aad      	subeq	r5, r5, r2
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	6922      	ldr	r2, [r4, #16]
 800875a:	bf0c      	ite	eq
 800875c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008760:	2500      	movne	r5, #0
 8008762:	4293      	cmp	r3, r2
 8008764:	bfc4      	itt	gt
 8008766:	1a9b      	subgt	r3, r3, r2
 8008768:	18ed      	addgt	r5, r5, r3
 800876a:	2600      	movs	r6, #0
 800876c:	341a      	adds	r4, #26
 800876e:	42b5      	cmp	r5, r6
 8008770:	d11a      	bne.n	80087a8 <_printf_common+0xc8>
 8008772:	2000      	movs	r0, #0
 8008774:	e008      	b.n	8008788 <_printf_common+0xa8>
 8008776:	2301      	movs	r3, #1
 8008778:	4652      	mov	r2, sl
 800877a:	4649      	mov	r1, r9
 800877c:	4638      	mov	r0, r7
 800877e:	47c0      	blx	r8
 8008780:	3001      	adds	r0, #1
 8008782:	d103      	bne.n	800878c <_printf_common+0xac>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878c:	3501      	adds	r5, #1
 800878e:	e7c6      	b.n	800871e <_printf_common+0x3e>
 8008790:	18e1      	adds	r1, r4, r3
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	2030      	movs	r0, #48	; 0x30
 8008796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800879a:	4422      	add	r2, r4
 800879c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087a4:	3302      	adds	r3, #2
 80087a6:	e7c7      	b.n	8008738 <_printf_common+0x58>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4622      	mov	r2, r4
 80087ac:	4649      	mov	r1, r9
 80087ae:	4638      	mov	r0, r7
 80087b0:	47c0      	blx	r8
 80087b2:	3001      	adds	r0, #1
 80087b4:	d0e6      	beq.n	8008784 <_printf_common+0xa4>
 80087b6:	3601      	adds	r6, #1
 80087b8:	e7d9      	b.n	800876e <_printf_common+0x8e>
	...

080087bc <_printf_i>:
 80087bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	4691      	mov	r9, r2
 80087c4:	7e27      	ldrb	r7, [r4, #24]
 80087c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087c8:	2f78      	cmp	r7, #120	; 0x78
 80087ca:	4680      	mov	r8, r0
 80087cc:	469a      	mov	sl, r3
 80087ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d2:	d807      	bhi.n	80087e4 <_printf_i+0x28>
 80087d4:	2f62      	cmp	r7, #98	; 0x62
 80087d6:	d80a      	bhi.n	80087ee <_printf_i+0x32>
 80087d8:	2f00      	cmp	r7, #0
 80087da:	f000 80d8 	beq.w	800898e <_printf_i+0x1d2>
 80087de:	2f58      	cmp	r7, #88	; 0x58
 80087e0:	f000 80a3 	beq.w	800892a <_printf_i+0x16e>
 80087e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087ec:	e03a      	b.n	8008864 <_printf_i+0xa8>
 80087ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087f2:	2b15      	cmp	r3, #21
 80087f4:	d8f6      	bhi.n	80087e4 <_printf_i+0x28>
 80087f6:	a001      	add	r0, pc, #4	; (adr r0, 80087fc <_printf_i+0x40>)
 80087f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087fc:	08008855 	.word	0x08008855
 8008800:	08008869 	.word	0x08008869
 8008804:	080087e5 	.word	0x080087e5
 8008808:	080087e5 	.word	0x080087e5
 800880c:	080087e5 	.word	0x080087e5
 8008810:	080087e5 	.word	0x080087e5
 8008814:	08008869 	.word	0x08008869
 8008818:	080087e5 	.word	0x080087e5
 800881c:	080087e5 	.word	0x080087e5
 8008820:	080087e5 	.word	0x080087e5
 8008824:	080087e5 	.word	0x080087e5
 8008828:	08008975 	.word	0x08008975
 800882c:	08008899 	.word	0x08008899
 8008830:	08008957 	.word	0x08008957
 8008834:	080087e5 	.word	0x080087e5
 8008838:	080087e5 	.word	0x080087e5
 800883c:	08008997 	.word	0x08008997
 8008840:	080087e5 	.word	0x080087e5
 8008844:	08008899 	.word	0x08008899
 8008848:	080087e5 	.word	0x080087e5
 800884c:	080087e5 	.word	0x080087e5
 8008850:	0800895f 	.word	0x0800895f
 8008854:	680b      	ldr	r3, [r1, #0]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	600a      	str	r2, [r1, #0]
 800885c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008864:	2301      	movs	r3, #1
 8008866:	e0a3      	b.n	80089b0 <_printf_i+0x1f4>
 8008868:	6825      	ldr	r5, [r4, #0]
 800886a:	6808      	ldr	r0, [r1, #0]
 800886c:	062e      	lsls	r6, r5, #24
 800886e:	f100 0304 	add.w	r3, r0, #4
 8008872:	d50a      	bpl.n	800888a <_printf_i+0xce>
 8008874:	6805      	ldr	r5, [r0, #0]
 8008876:	600b      	str	r3, [r1, #0]
 8008878:	2d00      	cmp	r5, #0
 800887a:	da03      	bge.n	8008884 <_printf_i+0xc8>
 800887c:	232d      	movs	r3, #45	; 0x2d
 800887e:	426d      	negs	r5, r5
 8008880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008884:	485e      	ldr	r0, [pc, #376]	; (8008a00 <_printf_i+0x244>)
 8008886:	230a      	movs	r3, #10
 8008888:	e019      	b.n	80088be <_printf_i+0x102>
 800888a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800888e:	6805      	ldr	r5, [r0, #0]
 8008890:	600b      	str	r3, [r1, #0]
 8008892:	bf18      	it	ne
 8008894:	b22d      	sxthne	r5, r5
 8008896:	e7ef      	b.n	8008878 <_printf_i+0xbc>
 8008898:	680b      	ldr	r3, [r1, #0]
 800889a:	6825      	ldr	r5, [r4, #0]
 800889c:	1d18      	adds	r0, r3, #4
 800889e:	6008      	str	r0, [r1, #0]
 80088a0:	0628      	lsls	r0, r5, #24
 80088a2:	d501      	bpl.n	80088a8 <_printf_i+0xec>
 80088a4:	681d      	ldr	r5, [r3, #0]
 80088a6:	e002      	b.n	80088ae <_printf_i+0xf2>
 80088a8:	0669      	lsls	r1, r5, #25
 80088aa:	d5fb      	bpl.n	80088a4 <_printf_i+0xe8>
 80088ac:	881d      	ldrh	r5, [r3, #0]
 80088ae:	4854      	ldr	r0, [pc, #336]	; (8008a00 <_printf_i+0x244>)
 80088b0:	2f6f      	cmp	r7, #111	; 0x6f
 80088b2:	bf0c      	ite	eq
 80088b4:	2308      	moveq	r3, #8
 80088b6:	230a      	movne	r3, #10
 80088b8:	2100      	movs	r1, #0
 80088ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088be:	6866      	ldr	r6, [r4, #4]
 80088c0:	60a6      	str	r6, [r4, #8]
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	bfa2      	ittt	ge
 80088c6:	6821      	ldrge	r1, [r4, #0]
 80088c8:	f021 0104 	bicge.w	r1, r1, #4
 80088cc:	6021      	strge	r1, [r4, #0]
 80088ce:	b90d      	cbnz	r5, 80088d4 <_printf_i+0x118>
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d04d      	beq.n	8008970 <_printf_i+0x1b4>
 80088d4:	4616      	mov	r6, r2
 80088d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80088da:	fb03 5711 	mls	r7, r3, r1, r5
 80088de:	5dc7      	ldrb	r7, [r0, r7]
 80088e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088e4:	462f      	mov	r7, r5
 80088e6:	42bb      	cmp	r3, r7
 80088e8:	460d      	mov	r5, r1
 80088ea:	d9f4      	bls.n	80088d6 <_printf_i+0x11a>
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d10b      	bne.n	8008908 <_printf_i+0x14c>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07df      	lsls	r7, r3, #31
 80088f4:	d508      	bpl.n	8008908 <_printf_i+0x14c>
 80088f6:	6923      	ldr	r3, [r4, #16]
 80088f8:	6861      	ldr	r1, [r4, #4]
 80088fa:	4299      	cmp	r1, r3
 80088fc:	bfde      	ittt	le
 80088fe:	2330      	movle	r3, #48	; 0x30
 8008900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008908:	1b92      	subs	r2, r2, r6
 800890a:	6122      	str	r2, [r4, #16]
 800890c:	f8cd a000 	str.w	sl, [sp]
 8008910:	464b      	mov	r3, r9
 8008912:	aa03      	add	r2, sp, #12
 8008914:	4621      	mov	r1, r4
 8008916:	4640      	mov	r0, r8
 8008918:	f7ff fee2 	bl	80086e0 <_printf_common>
 800891c:	3001      	adds	r0, #1
 800891e:	d14c      	bne.n	80089ba <_printf_i+0x1fe>
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	b004      	add	sp, #16
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	4835      	ldr	r0, [pc, #212]	; (8008a00 <_printf_i+0x244>)
 800892c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	680e      	ldr	r6, [r1, #0]
 8008934:	061f      	lsls	r7, r3, #24
 8008936:	f856 5b04 	ldr.w	r5, [r6], #4
 800893a:	600e      	str	r6, [r1, #0]
 800893c:	d514      	bpl.n	8008968 <_printf_i+0x1ac>
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	bf44      	itt	mi
 8008942:	f043 0320 	orrmi.w	r3, r3, #32
 8008946:	6023      	strmi	r3, [r4, #0]
 8008948:	b91d      	cbnz	r5, 8008952 <_printf_i+0x196>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f023 0320 	bic.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	2310      	movs	r3, #16
 8008954:	e7b0      	b.n	80088b8 <_printf_i+0xfc>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	f043 0320 	orr.w	r3, r3, #32
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	2378      	movs	r3, #120	; 0x78
 8008960:	4828      	ldr	r0, [pc, #160]	; (8008a04 <_printf_i+0x248>)
 8008962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008966:	e7e3      	b.n	8008930 <_printf_i+0x174>
 8008968:	065e      	lsls	r6, r3, #25
 800896a:	bf48      	it	mi
 800896c:	b2ad      	uxthmi	r5, r5
 800896e:	e7e6      	b.n	800893e <_printf_i+0x182>
 8008970:	4616      	mov	r6, r2
 8008972:	e7bb      	b.n	80088ec <_printf_i+0x130>
 8008974:	680b      	ldr	r3, [r1, #0]
 8008976:	6826      	ldr	r6, [r4, #0]
 8008978:	6960      	ldr	r0, [r4, #20]
 800897a:	1d1d      	adds	r5, r3, #4
 800897c:	600d      	str	r5, [r1, #0]
 800897e:	0635      	lsls	r5, r6, #24
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	d501      	bpl.n	8008988 <_printf_i+0x1cc>
 8008984:	6018      	str	r0, [r3, #0]
 8008986:	e002      	b.n	800898e <_printf_i+0x1d2>
 8008988:	0671      	lsls	r1, r6, #25
 800898a:	d5fb      	bpl.n	8008984 <_printf_i+0x1c8>
 800898c:	8018      	strh	r0, [r3, #0]
 800898e:	2300      	movs	r3, #0
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	4616      	mov	r6, r2
 8008994:	e7ba      	b.n	800890c <_printf_i+0x150>
 8008996:	680b      	ldr	r3, [r1, #0]
 8008998:	1d1a      	adds	r2, r3, #4
 800899a:	600a      	str	r2, [r1, #0]
 800899c:	681e      	ldr	r6, [r3, #0]
 800899e:	6862      	ldr	r2, [r4, #4]
 80089a0:	2100      	movs	r1, #0
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7f7 fc3c 	bl	8000220 <memchr>
 80089a8:	b108      	cbz	r0, 80089ae <_printf_i+0x1f2>
 80089aa:	1b80      	subs	r0, r0, r6
 80089ac:	6060      	str	r0, [r4, #4]
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	2300      	movs	r3, #0
 80089b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089b8:	e7a8      	b.n	800890c <_printf_i+0x150>
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	4632      	mov	r2, r6
 80089be:	4649      	mov	r1, r9
 80089c0:	4640      	mov	r0, r8
 80089c2:	47d0      	blx	sl
 80089c4:	3001      	adds	r0, #1
 80089c6:	d0ab      	beq.n	8008920 <_printf_i+0x164>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	079b      	lsls	r3, r3, #30
 80089cc:	d413      	bmi.n	80089f6 <_printf_i+0x23a>
 80089ce:	68e0      	ldr	r0, [r4, #12]
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	4298      	cmp	r0, r3
 80089d4:	bfb8      	it	lt
 80089d6:	4618      	movlt	r0, r3
 80089d8:	e7a4      	b.n	8008924 <_printf_i+0x168>
 80089da:	2301      	movs	r3, #1
 80089dc:	4632      	mov	r2, r6
 80089de:	4649      	mov	r1, r9
 80089e0:	4640      	mov	r0, r8
 80089e2:	47d0      	blx	sl
 80089e4:	3001      	adds	r0, #1
 80089e6:	d09b      	beq.n	8008920 <_printf_i+0x164>
 80089e8:	3501      	adds	r5, #1
 80089ea:	68e3      	ldr	r3, [r4, #12]
 80089ec:	9903      	ldr	r1, [sp, #12]
 80089ee:	1a5b      	subs	r3, r3, r1
 80089f0:	42ab      	cmp	r3, r5
 80089f2:	dcf2      	bgt.n	80089da <_printf_i+0x21e>
 80089f4:	e7eb      	b.n	80089ce <_printf_i+0x212>
 80089f6:	2500      	movs	r5, #0
 80089f8:	f104 0619 	add.w	r6, r4, #25
 80089fc:	e7f5      	b.n	80089ea <_printf_i+0x22e>
 80089fe:	bf00      	nop
 8008a00:	0800b6b5 	.word	0x0800b6b5
 8008a04:	0800b6c6 	.word	0x0800b6c6

08008a08 <_putc_r>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	4606      	mov	r6, r0
 8008a10:	b118      	cbz	r0, 8008a1a <_putc_r+0x12>
 8008a12:	6983      	ldr	r3, [r0, #24]
 8008a14:	b90b      	cbnz	r3, 8008a1a <_putc_r+0x12>
 8008a16:	f7ff f9ff 	bl	8007e18 <__sinit>
 8008a1a:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <_putc_r+0x84>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	d124      	bne.n	8008a6a <_putc_r+0x62>
 8008a20:	6874      	ldr	r4, [r6, #4]
 8008a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a24:	07d8      	lsls	r0, r3, #31
 8008a26:	d405      	bmi.n	8008a34 <_putc_r+0x2c>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	0599      	lsls	r1, r3, #22
 8008a2c:	d402      	bmi.n	8008a34 <_putc_r+0x2c>
 8008a2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a30:	f7ff fa90 	bl	8007f54 <__retarget_lock_acquire_recursive>
 8008a34:	68a3      	ldr	r3, [r4, #8]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	da05      	bge.n	8008a4a <_putc_r+0x42>
 8008a3e:	69a2      	ldr	r2, [r4, #24]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	db1c      	blt.n	8008a7e <_putc_r+0x76>
 8008a44:	b2eb      	uxtb	r3, r5
 8008a46:	2b0a      	cmp	r3, #10
 8008a48:	d019      	beq.n	8008a7e <_putc_r+0x76>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	6022      	str	r2, [r4, #0]
 8008a50:	701d      	strb	r5, [r3, #0]
 8008a52:	b2ed      	uxtb	r5, r5
 8008a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a56:	07da      	lsls	r2, r3, #31
 8008a58:	d405      	bmi.n	8008a66 <_putc_r+0x5e>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	059b      	lsls	r3, r3, #22
 8008a5e:	d402      	bmi.n	8008a66 <_putc_r+0x5e>
 8008a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a62:	f7ff fa78 	bl	8007f56 <__retarget_lock_release_recursive>
 8008a66:	4628      	mov	r0, r5
 8008a68:	bd70      	pop	{r4, r5, r6, pc}
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <_putc_r+0x88>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	d101      	bne.n	8008a74 <_putc_r+0x6c>
 8008a70:	68b4      	ldr	r4, [r6, #8]
 8008a72:	e7d6      	b.n	8008a22 <_putc_r+0x1a>
 8008a74:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <_putc_r+0x8c>)
 8008a76:	429c      	cmp	r4, r3
 8008a78:	bf08      	it	eq
 8008a7a:	68f4      	ldreq	r4, [r6, #12]
 8008a7c:	e7d1      	b.n	8008a22 <_putc_r+0x1a>
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4622      	mov	r2, r4
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7fe ffee 	bl	8007a64 <__swbuf_r>
 8008a88:	4605      	mov	r5, r0
 8008a8a:	e7e3      	b.n	8008a54 <_putc_r+0x4c>
 8008a8c:	0800b664 	.word	0x0800b664
 8008a90:	0800b684 	.word	0x0800b684
 8008a94:	0800b644 	.word	0x0800b644

08008a98 <_sbrk_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_sbrk_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7fa fa00 	bl	8002ea8 <_sbrk>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_sbrk_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_sbrk_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	20000c7c 	.word	0x20000c7c

08008ab8 <__sread>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	460c      	mov	r4, r1
 8008abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac0:	f000 f8e0 	bl	8008c84 <_read_r>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	bfab      	itete	ge
 8008ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aca:	89a3      	ldrhlt	r3, [r4, #12]
 8008acc:	181b      	addge	r3, r3, r0
 8008ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ad2:	bfac      	ite	ge
 8008ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ad6:	81a3      	strhlt	r3, [r4, #12]
 8008ad8:	bd10      	pop	{r4, pc}

08008ada <__swrite>:
 8008ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ade:	461f      	mov	r7, r3
 8008ae0:	898b      	ldrh	r3, [r1, #12]
 8008ae2:	05db      	lsls	r3, r3, #23
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	4616      	mov	r6, r2
 8008aea:	d505      	bpl.n	8008af8 <__swrite+0x1e>
 8008aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af0:	2302      	movs	r3, #2
 8008af2:	2200      	movs	r2, #0
 8008af4:	f000 f868 	bl	8008bc8 <_lseek_r>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	4632      	mov	r2, r6
 8008b06:	463b      	mov	r3, r7
 8008b08:	4628      	mov	r0, r5
 8008b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0e:	f000 b817 	b.w	8008b40 <_write_r>

08008b12 <__sseek>:
 8008b12:	b510      	push	{r4, lr}
 8008b14:	460c      	mov	r4, r1
 8008b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1a:	f000 f855 	bl	8008bc8 <_lseek_r>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	bf15      	itete	ne
 8008b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b2e:	81a3      	strheq	r3, [r4, #12]
 8008b30:	bf18      	it	ne
 8008b32:	81a3      	strhne	r3, [r4, #12]
 8008b34:	bd10      	pop	{r4, pc}

08008b36 <__sclose>:
 8008b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3a:	f000 b813 	b.w	8008b64 <_close_r>
	...

08008b40 <_write_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d07      	ldr	r5, [pc, #28]	; (8008b60 <_write_r+0x20>)
 8008b44:	4604      	mov	r4, r0
 8008b46:	4608      	mov	r0, r1
 8008b48:	4611      	mov	r1, r2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f7f9 ffcc 	bl	8002aec <_write>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_write_r+0x1e>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_write_r+0x1e>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	20000c7c 	.word	0x20000c7c

08008b64 <_close_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4d06      	ldr	r5, [pc, #24]	; (8008b80 <_close_r+0x1c>)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	602b      	str	r3, [r5, #0]
 8008b70:	f7fa f965 	bl	8002e3e <_close>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_close_r+0x1a>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_close_r+0x1a>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20000c7c 	.word	0x20000c7c

08008b84 <_fstat_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_fstat_r+0x20>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	f7fa f960 	bl	8002e56 <_fstat>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	d102      	bne.n	8008ba0 <_fstat_r+0x1c>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	b103      	cbz	r3, 8008ba0 <_fstat_r+0x1c>
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	bd38      	pop	{r3, r4, r5, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000c7c 	.word	0x20000c7c

08008ba8 <_isatty_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d06      	ldr	r5, [pc, #24]	; (8008bc4 <_isatty_r+0x1c>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f7fa f95f 	bl	8002e76 <_isatty>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_isatty_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_isatty_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000c7c 	.word	0x20000c7c

08008bc8 <_lseek_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	; (8008be8 <_lseek_r+0x20>)
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f7fa f958 	bl	8002e8c <_lseek>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_lseek_r+0x1e>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_lseek_r+0x1e>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20000c7c 	.word	0x20000c7c

08008bec <memmove>:
 8008bec:	4288      	cmp	r0, r1
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	eb01 0402 	add.w	r4, r1, r2
 8008bf4:	d902      	bls.n	8008bfc <memmove+0x10>
 8008bf6:	4284      	cmp	r4, r0
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	d807      	bhi.n	8008c0c <memmove+0x20>
 8008bfc:	1e43      	subs	r3, r0, #1
 8008bfe:	42a1      	cmp	r1, r4
 8008c00:	d008      	beq.n	8008c14 <memmove+0x28>
 8008c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c0a:	e7f8      	b.n	8008bfe <memmove+0x12>
 8008c0c:	4402      	add	r2, r0
 8008c0e:	4601      	mov	r1, r0
 8008c10:	428a      	cmp	r2, r1
 8008c12:	d100      	bne.n	8008c16 <memmove+0x2a>
 8008c14:	bd10      	pop	{r4, pc}
 8008c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c1e:	e7f7      	b.n	8008c10 <memmove+0x24>

08008c20 <__malloc_lock>:
 8008c20:	4801      	ldr	r0, [pc, #4]	; (8008c28 <__malloc_lock+0x8>)
 8008c22:	f7ff b997 	b.w	8007f54 <__retarget_lock_acquire_recursive>
 8008c26:	bf00      	nop
 8008c28:	20000c74 	.word	0x20000c74

08008c2c <__malloc_unlock>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__malloc_unlock+0x8>)
 8008c2e:	f7ff b992 	b.w	8007f56 <__retarget_lock_release_recursive>
 8008c32:	bf00      	nop
 8008c34:	20000c74 	.word	0x20000c74

08008c38 <_realloc_r>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	4607      	mov	r7, r0
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	460e      	mov	r6, r1
 8008c40:	b921      	cbnz	r1, 8008c4c <_realloc_r+0x14>
 8008c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c46:	4611      	mov	r1, r2
 8008c48:	f7ff ba3a 	b.w	80080c0 <_malloc_r>
 8008c4c:	b922      	cbnz	r2, 8008c58 <_realloc_r+0x20>
 8008c4e:	f7ff f9e7 	bl	8008020 <_free_r>
 8008c52:	4625      	mov	r5, r4
 8008c54:	4628      	mov	r0, r5
 8008c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c58:	f000 f826 	bl	8008ca8 <_malloc_usable_size_r>
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d20f      	bcs.n	8008c80 <_realloc_r+0x48>
 8008c60:	4621      	mov	r1, r4
 8008c62:	4638      	mov	r0, r7
 8008c64:	f7ff fa2c 	bl	80080c0 <_malloc_r>
 8008c68:	4605      	mov	r5, r0
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d0f2      	beq.n	8008c54 <_realloc_r+0x1c>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4622      	mov	r2, r4
 8008c72:	f7fe fe1d 	bl	80078b0 <memcpy>
 8008c76:	4631      	mov	r1, r6
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff f9d1 	bl	8008020 <_free_r>
 8008c7e:	e7e9      	b.n	8008c54 <_realloc_r+0x1c>
 8008c80:	4635      	mov	r5, r6
 8008c82:	e7e7      	b.n	8008c54 <_realloc_r+0x1c>

08008c84 <_read_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d07      	ldr	r5, [pc, #28]	; (8008ca4 <_read_r+0x20>)
 8008c88:	4604      	mov	r4, r0
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	602a      	str	r2, [r5, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f7fa f8b6 	bl	8002e04 <_read>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_read_r+0x1e>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_read_r+0x1e>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20000c7c 	.word	0x20000c7c

08008ca8 <_malloc_usable_size_r>:
 8008ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cac:	1f18      	subs	r0, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfbc      	itt	lt
 8008cb2:	580b      	ldrlt	r3, [r1, r0]
 8008cb4:	18c0      	addlt	r0, r0, r3
 8008cb6:	4770      	bx	lr

08008cb8 <_init>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	bf00      	nop
 8008cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cbe:	bc08      	pop	{r3}
 8008cc0:	469e      	mov	lr, r3
 8008cc2:	4770      	bx	lr

08008cc4 <_fini>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	bf00      	nop
 8008cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cca:	bc08      	pop	{r3}
 8008ccc:	469e      	mov	lr, r3
 8008cce:	4770      	bx	lr
